#line 1 "C:/pyNeuroGPU_winnew/NeuroGPU6/kernel.cu"
#pragma section("__nv_managed_data__")
#line 1
static char __nv_inited_managed_rt = 0; static void **__nv_fatbinhandle_for_managed_rt; static void __nv_save_fatbinhandle_for_managed_rt(void **in){__nv_fatbinhandle_for_managed_rt = in;} static char __nv_init_managed_rt_with_module(void **); static inline void __nv_init_managed_rt(void) { __nv_inited_managed_rt = (__nv_inited_managed_rt ? __nv_inited_managed_rt                 : __nv_init_managed_rt_with_module(__nv_fatbinhandle_for_managed_rt));}
#line 1
#define __nv_is_extended_device_lambda_closure_type(X) false
#define __nv_is_extended_host_device_lambda_closure_type(X) false

#line 1
#line 62 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
#pragma warning(push)
#pragma warning(disable: 4820)
#line 708 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"
#pragma region Input Buffer SAL 1 compatibility macros
#line 1472
#pragma endregion Input Buffer SAL 1 compatibility macros
#line 2361 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"
extern "C" {
#line 2967 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"
}
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ConcurrencySal.h"
extern "C" {
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ConcurrencySal.h"
}
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
#pragma pack ( push, 8 )
#line 18
extern "C" {
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
typedef unsigned __int64 uintptr_t; 
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
typedef char *va_list; 
#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
void __cdecl __va_start(va_list *, ...); 
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
}
#line 122 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
extern "C++" {
#line 124
template< class _Ty> 
#line 125
struct __vcrt_va_list_is_reference { 
#line 127
enum: bool { __the_value}; 
#line 128
}; 
#line 130
template< class _Ty> 
#line 131
struct __vcrt_va_list_is_reference< _Ty &>  { 
#line 133
enum: bool { __the_value = '\001'}; 
#line 134
}; 
#line 136
template< class _Ty> 
#line 137
struct __vcrt_va_list_is_reference< _Ty &&>  { 
#line 139
enum: bool { __the_value = '\001'}; 
#line 140
}; 
#line 142
template < typename _Ty >
        void __vcrt_va_start_verify_argument_type ( ) throw ( )
        {
            static_assert ( ! __vcrt_va_list_is_reference < _Ty > :: __the_value, "va_start argument must not have reference type and must not be parenthesized" );
        }
#line 147
}
#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
#pragma pack ( pop )
#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
__pragma( pack ( push, 8 )) extern "C" {
#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
typedef unsigned __int64 size_t; 
#include "crt/host_runtime.h"
#line 195
typedef __int64 ptrdiff_t; 
#line 196
typedef __int64 intptr_t; 
#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
typedef bool __vcrt_bool; 
#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
extern "C++" {
#line 249
template< class _CountofType, size_t _SizeOfArray> char (*__countof_helper(__unaligned _CountofType (& _Array)[_SizeOfArray]))[_SizeOfArray]; 
#line 253
}
#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
void __cdecl __security_init_cookie(); 
#line 304
void __cdecl __security_check_cookie(uintptr_t _StackCookie); 
#line 305
__declspec(noreturn) void __cdecl __report_gsfailure(uintptr_t _StackCookie); 
#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
extern uintptr_t __security_cookie; 
#line 317 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
}__pragma( pack ( pop )) 
#line 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
__pragma( pack ( push, 8 )) extern "C" {
#line 119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
extern "C++" {
#line 121
template< bool _Enable, class _Ty> struct _CrtEnableIf; 
#line 124
template< class _Ty> 
#line 125
struct _CrtEnableIf< true, _Ty>  { 
#line 127
typedef _Ty _Type; 
#line 128
}; 
#line 129
}
#line 133 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef bool __crt_bool; 
#line 226 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
__declspec(dllimport) void __cdecl _invalid_parameter_noinfo(); 
#line 227
__declspec(dllimport) __declspec(noreturn) void __cdecl _invalid_parameter_noinfo_noreturn(); 
#line 229
__declspec(noreturn) 
#line 230
__declspec(dllimport) void __cdecl _invoke_watson(const __wchar_t *, const __wchar_t *, const __wchar_t *, unsigned, uintptr_t); 
#line 448 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef int errno_t; 
#line 449
typedef unsigned short wint_t; 
#line 450
typedef unsigned short wctype_t; 
#line 451
typedef long __time32_t; 
#line 452
typedef __int64 __time64_t; 
#line 459
typedef 
#line 454
struct __crt_locale_data_public { 
#line 456
const unsigned short *_locale_pctype; 
#line 457
int _locale_mb_cur_max; 
#line 458
unsigned _locale_lc_codepage; 
#line 459
} __crt_locale_data_public; 
#line 465
typedef 
#line 461
struct __crt_locale_pointers { 
#line 463
struct __crt_locale_data *locinfo; 
#line 464
struct __crt_multibyte_data *mbcinfo; 
#line 465
} __crt_locale_pointers; 
#line 467
typedef __crt_locale_pointers *_locale_t; 
#line 473
typedef 
#line 469
struct _Mbstatet { 
#line 471
unsigned long _Wchar; 
#line 472
unsigned short _Byte, _State; 
#line 473
} _Mbstatet; 
#line 475
typedef _Mbstatet mbstate_t; 
#line 489 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef __time64_t time_t; 
#line 499 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef size_t rsize_t; 
#line 1901 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
}__pragma( pack ( pop )) 
#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#if 0
#line 61
enum cudaRoundMode { 
#line 63
cudaRoundNearest, 
#line 64
cudaRoundZero, 
#line 65
cudaRoundPosInf, 
#line 66
cudaRoundMinInf
#line 67
}; 
#endif
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h"
__pragma( pack ( push, 8 )) extern "C" {
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h"
}__pragma( pack ( pop )) 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"
__pragma( pack ( push, 8 )) extern "C" {
#line 18
namespace std { 
#line 20
typedef decltype((__nullptr)) nullptr_t; 
#line 21
}
#line 23
using std::nullptr_t;
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"
__declspec(dllimport) int *__cdecl _errno(); 
#line 32
__declspec(dllimport) errno_t __cdecl _set_errno(int _Value); 
#line 33
__declspec(dllimport) errno_t __cdecl _get_errno(int * _Value); 
#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"
__declspec(dllimport) extern unsigned long __cdecl __threadid(); 
#line 48
__declspec(dllimport) extern uintptr_t __cdecl __threadhandle(); 
#line 52
}__pragma( pack ( pop )) 
#line 156 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#if 0
#line 156
enum cudaError { 
#line 163
cudaSuccess, 
#line 169
cudaErrorMissingConfiguration, 
#line 175
cudaErrorMemoryAllocation, 
#line 181
cudaErrorInitializationError, 
#line 191
cudaErrorLaunchFailure, 
#line 200
cudaErrorPriorLaunchFailure, 
#line 211
cudaErrorLaunchTimeout, 
#line 220
cudaErrorLaunchOutOfResources, 
#line 226
cudaErrorInvalidDeviceFunction, 
#line 235
cudaErrorInvalidConfiguration, 
#line 241
cudaErrorInvalidDevice, 
#line 247
cudaErrorInvalidValue, 
#line 253
cudaErrorInvalidPitchValue, 
#line 259
cudaErrorInvalidSymbol, 
#line 264
cudaErrorMapBufferObjectFailed, 
#line 269
cudaErrorUnmapBufferObjectFailed, 
#line 275
cudaErrorInvalidHostPointer, 
#line 281
cudaErrorInvalidDevicePointer, 
#line 287
cudaErrorInvalidTexture, 
#line 293
cudaErrorInvalidTextureBinding, 
#line 300
cudaErrorInvalidChannelDescriptor, 
#line 306
cudaErrorInvalidMemcpyDirection, 
#line 316
cudaErrorAddressOfConstant, 
#line 325
cudaErrorTextureFetchFailed, 
#line 334
cudaErrorTextureNotBound, 
#line 343
cudaErrorSynchronizationError, 
#line 349
cudaErrorInvalidFilterSetting, 
#line 355
cudaErrorInvalidNormSetting, 
#line 363
cudaErrorMixedDeviceExecution, 
#line 370
cudaErrorCudartUnloading, 
#line 375
cudaErrorUnknown, 
#line 383
cudaErrorNotYetImplemented, 
#line 392
cudaErrorMemoryValueTooLarge, 
#line 399
cudaErrorInvalidResourceHandle, 
#line 407
cudaErrorNotReady, 
#line 414
cudaErrorInsufficientDriver, 
#line 427
cudaErrorSetOnActiveProcess, 
#line 433
cudaErrorInvalidSurface, 
#line 439
cudaErrorNoDevice, 
#line 445
cudaErrorECCUncorrectable, 
#line 450
cudaErrorSharedObjectSymbolNotFound, 
#line 455
cudaErrorSharedObjectInitFailed, 
#line 461
cudaErrorUnsupportedLimit, 
#line 467
cudaErrorDuplicateVariableName, 
#line 473
cudaErrorDuplicateTextureName, 
#line 479
cudaErrorDuplicateSurfaceName, 
#line 489
cudaErrorDevicesUnavailable, 
#line 494
cudaErrorInvalidKernelImage, 
#line 502
cudaErrorNoKernelImageForDevice, 
#line 515
cudaErrorIncompatibleDriverContext, 
#line 522
cudaErrorPeerAccessAlreadyEnabled, 
#line 529
cudaErrorPeerAccessNotEnabled, 
#line 535
cudaErrorDeviceAlreadyInUse = 54, 
#line 542
cudaErrorProfilerDisabled, 
#line 550
cudaErrorProfilerNotInitialized, 
#line 557
cudaErrorProfilerAlreadyStarted, 
#line 564
cudaErrorProfilerAlreadyStopped, 
#line 572
cudaErrorAssert, 
#line 579
cudaErrorTooManyPeers, 
#line 585
cudaErrorHostMemoryAlreadyRegistered, 
#line 591
cudaErrorHostMemoryNotRegistered, 
#line 596
cudaErrorOperatingSystem, 
#line 602
cudaErrorPeerAccessUnsupported, 
#line 609
cudaErrorLaunchMaxDepthExceeded, 
#line 617
cudaErrorLaunchFileScopedTex, 
#line 625
cudaErrorLaunchFileScopedSurf, 
#line 640
cudaErrorSyncDepthExceeded, 
#line 652
cudaErrorLaunchPendingCountExceeded, 
#line 657
cudaErrorNotPermitted, 
#line 663
cudaErrorNotSupported, 
#line 672
cudaErrorHardwareStackError, 
#line 680
cudaErrorIllegalInstruction, 
#line 689
cudaErrorMisalignedAddress, 
#line 700
cudaErrorInvalidAddressSpace, 
#line 708
cudaErrorInvalidPc, 
#line 716
cudaErrorIllegalAddress, 
#line 722
cudaErrorInvalidPtx, 
#line 727
cudaErrorInvalidGraphicsContext, 
#line 733
cudaErrorNvlinkUncorrectable, 
#line 738
cudaErrorStartupFailure = 127, 
#line 746
cudaErrorApiFailureBase = 10000
#line 747
}; 
#endif
#line 752 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#if 0
#line 752
enum cudaChannelFormatKind { 
#line 754
cudaChannelFormatKindSigned, 
#line 755
cudaChannelFormatKindUnsigned, 
#line 756
cudaChannelFormatKindFloat, 
#line 757
cudaChannelFormatKindNone
#line 758
}; 
#endif
#line 763 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#if 0
#line 763
struct cudaChannelFormatDesc { 
#line 765
int x; 
#line 766
int y; 
#line 767
int z; 
#line 768
int w; 
#line 769
cudaChannelFormatKind f; 
#line 770
}; 
#endif
#line 775 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
typedef struct cudaArray *cudaArray_t; 
#line 780
typedef const cudaArray *cudaArray_const_t; 
#line 782
struct cudaArray; 
#line 787
typedef struct cudaMipmappedArray *cudaMipmappedArray_t; 
#line 792
typedef const cudaMipmappedArray *cudaMipmappedArray_const_t; 
#line 794
struct cudaMipmappedArray; 
#line 799
#if 0
#line 799
enum cudaMemoryType { 
#line 801
cudaMemoryTypeHost = 1, 
#line 802
cudaMemoryTypeDevice
#line 803
}; 
#endif
#line 808 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#if 0
#line 808
enum cudaMemcpyKind { 
#line 810
cudaMemcpyHostToHost, 
#line 811
cudaMemcpyHostToDevice, 
#line 812
cudaMemcpyDeviceToHost, 
#line 813
cudaMemcpyDeviceToDevice, 
#line 814
cudaMemcpyDefault
#line 815
}; 
#endif
#line 822 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#if 0
#line 822
struct cudaPitchedPtr { 
#line 824
void *ptr; 
#line 825
size_t pitch; 
#line 826
size_t xsize; 
#line 827
size_t ysize; 
#line 828
}; 
#endif
#line 835 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#if 0
#line 835
struct cudaExtent { 
#line 837
size_t width; 
#line 838
size_t height; 
#line 839
size_t depth; 
#line 840
}; 
#endif
#line 847 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#if 0
#line 847
struct cudaPos { 
#line 849
size_t x; 
#line 850
size_t y; 
#line 851
size_t z; 
#line 852
}; 
#endif
#line 857 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#if 0
#line 857
struct cudaMemcpy3DParms { 
#line 859
cudaArray_t srcArray; 
#line 860
cudaPos srcPos; 
#line 861
cudaPitchedPtr srcPtr; 
#line 863
cudaArray_t dstArray; 
#line 864
cudaPos dstPos; 
#line 865
cudaPitchedPtr dstPtr; 
#line 867
cudaExtent extent; 
#line 868
cudaMemcpyKind kind; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
#line 869
}; 
#endif
#line 874 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#if 0
#line 874
struct cudaMemcpy3DPeerParms { 
#line 876
cudaArray_t srcArray; 
#line 877
cudaPos srcPos; 
#line 878
cudaPitchedPtr srcPtr; 
#line 879
int srcDevice; 
#line 881
cudaArray_t dstArray; 
#line 882
cudaPos dstPos; 
#line 883
cudaPitchedPtr dstPtr; 
#line 884
int dstDevice; 
#line 886
cudaExtent extent; 
#line 887
}; 
#endif
#line 892 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
struct cudaGraphicsResource; 
#line 897
#if 0
#line 897
enum cudaGraphicsRegisterFlags { 
#line 899
cudaGraphicsRegisterFlagsNone, 
#line 900
cudaGraphicsRegisterFlagsReadOnly, 
#line 901
cudaGraphicsRegisterFlagsWriteDiscard, 
#line 902
cudaGraphicsRegisterFlagsSurfaceLoadStore = 4, 
#line 903
cudaGraphicsRegisterFlagsTextureGather = 8
#line 904
}; 
#endif
#line 909 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#if 0
#line 909
enum cudaGraphicsMapFlags { 
#line 911
cudaGraphicsMapFlagsNone, 
#line 912
cudaGraphicsMapFlagsReadOnly, 
#line 913
cudaGraphicsMapFlagsWriteDiscard
#line 914
}; 
#endif
#line 919 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#if 0
#line 919
enum cudaGraphicsCubeFace { 
#line 921
cudaGraphicsCubeFacePositiveX, 
#line 922
cudaGraphicsCubeFaceNegativeX, 
#line 923
cudaGraphicsCubeFacePositiveY, 
#line 924
cudaGraphicsCubeFaceNegativeY, 
#line 925
cudaGraphicsCubeFacePositiveZ, 
#line 926
cudaGraphicsCubeFaceNegativeZ
#line 927
}; 
#endif
#line 932 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#if 0
#line 932
enum cudaResourceType { 
#line 934
cudaResourceTypeArray, 
#line 935
cudaResourceTypeMipmappedArray, 
#line 936
cudaResourceTypeLinear, 
#line 937
cudaResourceTypePitch2D
#line 938
}; 
#endif
#line 943 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#if 0
#line 943
enum cudaResourceViewFormat { 
#line 945
cudaResViewFormatNone, 
#line 946
cudaResViewFormatUnsignedChar1, 
#line 947
cudaResViewFormatUnsignedChar2, 
#line 948
cudaResViewFormatUnsignedChar4, 
#line 949
cudaResViewFormatSignedChar1, 
#line 950
cudaResViewFormatSignedChar2, 
#line 951
cudaResViewFormatSignedChar4, 
#line 952
cudaResViewFormatUnsignedShort1, 
#line 953
cudaResViewFormatUnsignedShort2, 
#line 954
cudaResViewFormatUnsignedShort4, 
#line 955
cudaResViewFormatSignedShort1, 
#line 956
cudaResViewFormatSignedShort2, 
#line 957
cudaResViewFormatSignedShort4, 
#line 958
cudaResViewFormatUnsignedInt1, 
#line 959
cudaResViewFormatUnsignedInt2, 
#line 960
cudaResViewFormatUnsignedInt4, 
#line 961
cudaResViewFormatSignedInt1, 
#line 962
cudaResViewFormatSignedInt2, 
#line 963
cudaResViewFormatSignedInt4, 
#line 964
cudaResViewFormatHalf1, 
#line 965
cudaResViewFormatHalf2, 
#line 966
cudaResViewFormatHalf4, 
#line 967
cudaResViewFormatFloat1, 
#line 968
cudaResViewFormatFloat2, 
#line 969
cudaResViewFormatFloat4, 
#line 970
cudaResViewFormatUnsignedBlockCompressed1, 
#line 971
cudaResViewFormatUnsignedBlockCompressed2, 
#line 972
cudaResViewFormatUnsignedBlockCompressed3, 
#line 973
cudaResViewFormatUnsignedBlockCompressed4, 
#line 974
cudaResViewFormatSignedBlockCompressed4, 
#line 975
cudaResViewFormatUnsignedBlockCompressed5, 
#line 976
cudaResViewFormatSignedBlockCompressed5, 
#line 977
cudaResViewFormatUnsignedBlockCompressed6H, 
#line 978
cudaResViewFormatSignedBlockCompressed6H, 
#line 979
cudaResViewFormatUnsignedBlockCompressed7
#line 980
}; 
#endif
#line 985 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#if 0
#line 985
struct cudaResourceDesc { 
#line 986
cudaResourceType resType; 
#line 988
union { 
#line 989
struct { 
#line 990
cudaArray_t array; 
#line 991
} array; 
#line 992
struct { 
#line 993
cudaMipmappedArray_t mipmap; 
#line 994
} mipmap; 
#line 995
struct { 
#line 996
void *devPtr; 
#line 997
cudaChannelFormatDesc desc; 
#line 998
size_t sizeInBytes; 
#line 999
} linear; 
#line 1000
struct { 
#line 1001
void *devPtr; 
#line 1002
cudaChannelFormatDesc desc; 
#line 1003
size_t width; 
#line 1004
size_t height; 
#line 1005
size_t pitchInBytes; 
#line 1006
} pitch2D; 
#line 1007
} res; 
#line 1008
}; 
#endif
#line 1013 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#if 0
#line 1013
struct cudaResourceViewDesc { 
#line 1015
cudaResourceViewFormat format; 
#line 1016
size_t width; 
#line 1017
size_t height; 
#line 1018
size_t depth; 
#line 1019
unsigned firstMipmapLevel; 
#line 1020
unsigned lastMipmapLevel; 
#line 1021
unsigned firstLayer; 
#line 1022
unsigned lastLayer; 
#line 1023
}; 
#endif
#line 1028 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#if 0
#line 1028
struct cudaPointerAttributes { 
#line 1034
cudaMemoryType memoryType; 
#line 1045
int device; 
#line 1051
void *devicePointer; 
#line 1057
void *hostPointer; 
#line 1062
int isManaged; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
#line 1063
}; 
#endif
#line 1068 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#if 0
#line 1068
struct cudaFuncAttributes { 
#line 1075
size_t sharedSizeBytes; 
#line 1081
size_t constSizeBytes; 
#line 1086
size_t localSizeBytes; 
#line 1093
int maxThreadsPerBlock; 
#line 1098
int numRegs; 
#line 1105
int ptxVersion; 
#line 1112
int binaryVersion; 
#line 1118
int cacheModeCA; 
#line 1119
}; 
#endif
#line 1124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#if 0
#line 1124
enum cudaFuncCache { 
#line 1126
cudaFuncCachePreferNone, 
#line 1127
cudaFuncCachePreferShared, 
#line 1128
cudaFuncCachePreferL1, 
#line 1129
cudaFuncCachePreferEqual
#line 1130
}; 
#endif
#line 1136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#if 0
#line 1136
enum cudaSharedMemConfig { 
#line 1138
cudaSharedMemBankSizeDefault, 
#line 1139
cudaSharedMemBankSizeFourByte, 
#line 1140
cudaSharedMemBankSizeEightByte
#line 1141
}; 
#endif
#line 1146 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#if 0
#line 1146
enum cudaComputeMode { 
#line 1148
cudaComputeModeDefault, 
#line 1149
cudaComputeModeExclusive, 
#line 1150
cudaComputeModeProhibited, 
#line 1151
cudaComputeModeExclusiveProcess
#line 1152
}; 
#endif
#line 1157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#if 0
#line 1157
enum cudaLimit { 
#line 1159
cudaLimitStackSize, 
#line 1160
cudaLimitPrintfFifoSize, 
#line 1161
cudaLimitMallocHeapSize, 
#line 1162
cudaLimitDevRuntimeSyncDepth, 
#line 1163
cudaLimitDevRuntimePendingLaunchCount
#line 1164
}; 
#endif
#line 1169 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#if 0
#line 1169
enum cudaMemoryAdvise { 
#line 1171
cudaMemAdviseSetReadMostly = 1, 
#line 1172
cudaMemAdviseUnsetReadMostly, 
#line 1173
cudaMemAdviseSetPreferredLocation, 
#line 1174
cudaMemAdviseUnsetPreferredLocation, 
#line 1175
cudaMemAdviseSetAccessedBy, 
#line 1176
cudaMemAdviseUnsetAccessedBy
#line 1177
}; 
#endif
#line 1182 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#if 0
#line 1182
enum cudaMemRangeAttribute { 
#line 1184
cudaMemRangeAttributeReadMostly = 1, 
#line 1185
cudaMemRangeAttributePreferredLocation, 
#line 1186
cudaMemRangeAttributeAccessedBy, 
#line 1187
cudaMemRangeAttributeLastPrefetchLocation
#line 1188
}; 
#endif
#line 1193 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#if 0
#line 1193
enum cudaOutputMode { 
#line 1195
cudaKeyValuePair, 
#line 1196
cudaCSV
#line 1197
}; 
#endif
#line 1202 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#if 0
#line 1202
enum cudaDeviceAttr { 
#line 1204
cudaDevAttrMaxThreadsPerBlock = 1, 
#line 1205
cudaDevAttrMaxBlockDimX, 
#line 1206
cudaDevAttrMaxBlockDimY, 
#line 1207
cudaDevAttrMaxBlockDimZ, 
#line 1208
cudaDevAttrMaxGridDimX, 
#line 1209
cudaDevAttrMaxGridDimY, 
#line 1210
cudaDevAttrMaxGridDimZ, 
#line 1211
cudaDevAttrMaxSharedMemoryPerBlock, 
#line 1212
cudaDevAttrTotalConstantMemory, 
#line 1213
cudaDevAttrWarpSize, 
#line 1214
cudaDevAttrMaxPitch, 
#line 1215
cudaDevAttrMaxRegistersPerBlock, 
#line 1216
cudaDevAttrClockRate, 
#line 1217
cudaDevAttrTextureAlignment, 
#line 1218
cudaDevAttrGpuOverlap, 
#line 1219
cudaDevAttrMultiProcessorCount, 
#line 1220
cudaDevAttrKernelExecTimeout, 
#line 1221
cudaDevAttrIntegrated, 
#line 1222
cudaDevAttrCanMapHostMemory, 
#line 1223
cudaDevAttrComputeMode, 
#line 1224
cudaDevAttrMaxTexture1DWidth, 
#line 1225
cudaDevAttrMaxTexture2DWidth, 
#line 1226
cudaDevAttrMaxTexture2DHeight, 
#line 1227
cudaDevAttrMaxTexture3DWidth, 
#line 1228
cudaDevAttrMaxTexture3DHeight, 
#line 1229
cudaDevAttrMaxTexture3DDepth, 
#line 1230
cudaDevAttrMaxTexture2DLayeredWidth, 
#line 1231
cudaDevAttrMaxTexture2DLayeredHeight, 
#line 1232
cudaDevAttrMaxTexture2DLayeredLayers, 
#line 1233
cudaDevAttrSurfaceAlignment, 
#line 1234
cudaDevAttrConcurrentKernels, 
#line 1235
cudaDevAttrEccEnabled, 
#line 1236
cudaDevAttrPciBusId, 
#line 1237
cudaDevAttrPciDeviceId, 
#line 1238
cudaDevAttrTccDriver, 
#line 1239
cudaDevAttrMemoryClockRate, 
#line 1240
cudaDevAttrGlobalMemoryBusWidth, 
#line 1241
cudaDevAttrL2CacheSize, 
#line 1242
cudaDevAttrMaxThreadsPerMultiProcessor, 
#line 1243
cudaDevAttrAsyncEngineCount, 
#line 1244
cudaDevAttrUnifiedAddressing, 
#line 1245
cudaDevAttrMaxTexture1DLayeredWidth, 
#line 1246
cudaDevAttrMaxTexture1DLayeredLayers, 
#line 1247
cudaDevAttrMaxTexture2DGatherWidth = 45, 
#line 1248
cudaDevAttrMaxTexture2DGatherHeight, 
#line 1249
cudaDevAttrMaxTexture3DWidthAlt, 
#line 1250
cudaDevAttrMaxTexture3DHeightAlt, 
#line 1251
cudaDevAttrMaxTexture3DDepthAlt, 
#line 1252
cudaDevAttrPciDomainId, 
#line 1253
cudaDevAttrTexturePitchAlignment, 
#line 1254
cudaDevAttrMaxTextureCubemapWidth, 
#line 1255
cudaDevAttrMaxTextureCubemapLayeredWidth, 
#line 1256
cudaDevAttrMaxTextureCubemapLayeredLayers, 
#line 1257
cudaDevAttrMaxSurface1DWidth, 
#line 1258
cudaDevAttrMaxSurface2DWidth, 
#line 1259
cudaDevAttrMaxSurface2DHeight, 
#line 1260
cudaDevAttrMaxSurface3DWidth, 
#line 1261
cudaDevAttrMaxSurface3DHeight, 
#line 1262
cudaDevAttrMaxSurface3DDepth, 
#line 1263
cudaDevAttrMaxSurface1DLayeredWidth, 
#line 1264
cudaDevAttrMaxSurface1DLayeredLayers, 
#line 1265
cudaDevAttrMaxSurface2DLayeredWidth, 
#line 1266
cudaDevAttrMaxSurface2DLayeredHeight, 
#line 1267
cudaDevAttrMaxSurface2DLayeredLayers, 
#line 1268
cudaDevAttrMaxSurfaceCubemapWidth, 
#line 1269
cudaDevAttrMaxSurfaceCubemapLayeredWidth, 
#line 1270
cudaDevAttrMaxSurfaceCubemapLayeredLayers, 
#line 1271
cudaDevAttrMaxTexture1DLinearWidth, 
#line 1272
cudaDevAttrMaxTexture2DLinearWidth, 
#line 1273
cudaDevAttrMaxTexture2DLinearHeight, 
#line 1274
cudaDevAttrMaxTexture2DLinearPitch, 
#line 1275
cudaDevAttrMaxTexture2DMipmappedWidth, 
#line 1276
cudaDevAttrMaxTexture2DMipmappedHeight, 
#line 1277
cudaDevAttrComputeCapabilityMajor, 
#line 1278
cudaDevAttrComputeCapabilityMinor, 
#line 1279
cudaDevAttrMaxTexture1DMipmappedWidth, 
#line 1280
cudaDevAttrStreamPrioritiesSupported, 
#line 1281
cudaDevAttrGlobalL1CacheSupported, 
#line 1282
cudaDevAttrLocalL1CacheSupported, 
#line 1283
cudaDevAttrMaxSharedMemoryPerMultiprocessor, 
#line 1284
cudaDevAttrMaxRegistersPerMultiprocessor, 
#line 1285
cudaDevAttrManagedMemory, 
#line 1286
cudaDevAttrIsMultiGpuBoard, 
#line 1287
cudaDevAttrMultiGpuBoardGroupID, 
#line 1288
cudaDevAttrHostNativeAtomicSupported, 
#line 1289
cudaDevAttrSingleToDoublePrecisionPerfRatio, 
#line 1290
cudaDevAttrPageableMemoryAccess, 
#line 1291
cudaDevAttrConcurrentManagedAccess, 
#line 1292
cudaDevAttrComputePreemptionSupported, 
#line 1293
cudaDevAttrCanUseHostPointerForRegisteredMem
#line 1294
}; 
#endif
#line 1300 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#if 0
#line 1300
enum cudaDeviceP2PAttr { 
#line 1301
cudaDevP2PAttrPerformanceRank = 1, 
#line 1302
cudaDevP2PAttrAccessSupported, 
#line 1303
cudaDevP2PAttrNativeAtomicSupported
#line 1304
}; 
#endif
#line 1308 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#if 0
#line 1308
struct cudaDeviceProp { 
#line 1310
char name[256]; 
#line 1311
size_t totalGlobalMem; 
#line 1312
size_t sharedMemPerBlock; 
#line 1313
int regsPerBlock; 
#line 1314
int warpSize; 
#line 1315
size_t memPitch; 
#line 1316
int maxThreadsPerBlock; 
#line 1317
int maxThreadsDim[3]; 
#line 1318
int maxGridSize[3]; 
#line 1319
int clockRate; 
#line 1320
size_t totalConstMem; 
#line 1321
int major; 
#line 1322
int minor; 
#line 1323
size_t textureAlignment; 
#line 1324
size_t texturePitchAlignment; 
#line 1325
int deviceOverlap; 
#line 1326
int multiProcessorCount; 
#line 1327
int kernelExecTimeoutEnabled; 
#line 1328
int integrated; 
#line 1329
int canMapHostMemory; 
#line 1330
int computeMode; 
#line 1331
int maxTexture1D; 
#line 1332
int maxTexture1DMipmap; 
#line 1333
int maxTexture1DLinear; 
#line 1334
int maxTexture2D[2]; 
#line 1335
int maxTexture2DMipmap[2]; 
#line 1336
int maxTexture2DLinear[3]; 
#line 1337
int maxTexture2DGather[2]; 
#line 1338
int maxTexture3D[3]; 
#line 1339
int maxTexture3DAlt[3]; 
#line 1340
int maxTextureCubemap; 
#line 1341
int maxTexture1DLayered[2]; 
#line 1342
int maxTexture2DLayered[3]; 
#line 1343
int maxTextureCubemapLayered[2]; 
#line 1344
int maxSurface1D; 
#line 1345
int maxSurface2D[2]; 
#line 1346
int maxSurface3D[3]; 
#line 1347
int maxSurface1DLayered[2]; 
#line 1348
int maxSurface2DLayered[3]; 
#line 1349
int maxSurfaceCubemap; 
#line 1350
int maxSurfaceCubemapLayered[2]; 
#line 1351
size_t surfaceAlignment; 
#line 1352
int concurrentKernels; 
#line 1353
int ECCEnabled; 
#line 1354
int pciBusID; 
#line 1355
int pciDeviceID; 
#line 1356
int pciDomainID; 
#line 1357
int tccDriver; 
#line 1358
int asyncEngineCount; 
#line 1359
int unifiedAddressing; 
#line 1360
int memoryClockRate; 
#line 1361
int memoryBusWidth; 
#line 1362
int l2CacheSize; 
#line 1363
int maxThreadsPerMultiProcessor; 
#line 1364
int streamPrioritiesSupported; 
#line 1365
int globalL1CacheSupported; 
#line 1366
int localL1CacheSupported; 
#line 1367
size_t sharedMemPerMultiprocessor; 
#line 1368
int regsPerMultiprocessor; 
#line 1369
int managedMemory; 
#line 1370
int isMultiGpuBoard; 
#line 1371
int multiGpuBoardGroupID; 
#line 1372
int hostNativeAtomicSupported; 
#line 1373
int singleToDoublePrecisionPerfRatio; 
#line 1374
int pageableMemoryAccess; 
#line 1375
int concurrentManagedAccess; 
#line 1376
}; 
#endif
#line 1459 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#if 0
typedef 
#line 1456
struct cudaIpcEventHandle_st { 
#line 1458
char reserved[64]; 
#line 1459
} cudaIpcEventHandle_t; 
#endif
#line 1467 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#if 0
typedef 
#line 1464
struct cudaIpcMemHandle_st { 
#line 1466
char reserved[64]; 
#line 1467
} cudaIpcMemHandle_t; 
#endif
#line 1478 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#if 0
typedef cudaError 
#line 1478
cudaError_t; 
#endif
#line 1483 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#if 0
typedef struct CUstream_st *
#line 1483
cudaStream_t; 
#endif
#line 1488 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#if 0
typedef struct CUevent_st *
#line 1488
cudaEvent_t; 
#endif
#line 1493 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#if 0
typedef cudaGraphicsResource *
#line 1493
cudaGraphicsResource_t; 
#endif
#line 1498 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#if 0
typedef struct CUuuid_st 
#line 1498
cudaUUID_t; 
#endif
#line 1503 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#if 0
typedef cudaOutputMode 
#line 1503
cudaOutputMode_t; 
#endif
#line 84 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#if 0
#line 84
enum cudaSurfaceBoundaryMode { 
#line 86
cudaBoundaryModeZero, 
#line 87
cudaBoundaryModeClamp, 
#line 88
cudaBoundaryModeTrap
#line 89
}; 
#endif
#line 94 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#if 0
#line 94
enum cudaSurfaceFormatMode { 
#line 96
cudaFormatModeForced, 
#line 97
cudaFormatModeAuto
#line 98
}; 
#endif
#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#if 0
#line 103
struct surfaceReference { 
#line 108
cudaChannelFormatDesc channelDesc; 
#line 109
}; 
#endif
#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#if 0
typedef unsigned __int64 
#line 114
cudaSurfaceObject_t; 
#endif
#line 84 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#if 0
#line 84
enum cudaTextureAddressMode { 
#line 86
cudaAddressModeWrap, 
#line 87
cudaAddressModeClamp, 
#line 88
cudaAddressModeMirror, 
#line 89
cudaAddressModeBorder
#line 90
}; 
#endif
#line 95 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#if 0
#line 95
enum cudaTextureFilterMode { 
#line 97
cudaFilterModePoint, 
#line 98
cudaFilterModeLinear
#line 99
}; 
#endif
#line 104 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#if 0
#line 104
enum cudaTextureReadMode { 
#line 106
cudaReadModeElementType, 
#line 107
cudaReadModeNormalizedFloat
#line 108
}; 
#endif
#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#if 0
#line 113
struct textureReference { 
#line 118
int normalized; 
#line 122
cudaTextureFilterMode filterMode; 
#line 126
cudaTextureAddressMode addressMode[3]; 
#line 130
cudaChannelFormatDesc channelDesc; 
#line 134
int sRGB; 
#line 138
unsigned maxAnisotropy; 
#line 142
cudaTextureFilterMode mipmapFilterMode; 
#line 146
float mipmapLevelBias; 
#line 150
float minMipmapLevelClamp; 
#line 154
float maxMipmapLevelClamp; 
#line 155
int __cudaReserved[15]; 
#line 156
}; 
#endif
#line 161 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#if 0
#line 161
struct cudaTextureDesc { 
#line 166
cudaTextureAddressMode addressMode[3]; 
#line 170
cudaTextureFilterMode filterMode; 
#line 174
cudaTextureReadMode readMode; 
#line 178
int sRGB; 
#line 182
float borderColor[4]; 
#line 186
int normalizedCoords; 
#line 190
unsigned maxAnisotropy; 
#line 194
cudaTextureFilterMode mipmapFilterMode; 
#line 198
float mipmapLevelBias; 
#line 202
float minMipmapLevelClamp; 
#line 206
float maxMipmapLevelClamp; 
#line 207
}; 
#endif
#line 212 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#if 0
typedef unsigned __int64 
#line 212
cudaTextureObject_t; 
#endif
#line 98 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 98
struct char1 { 
#line 100
signed char x; 
#line 101
}; 
#endif
#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 103
struct uchar1 { 
#line 105
unsigned char x; 
#line 106
}; 
#endif
#line 109 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 109
struct __declspec(align(2)) char2 { 
#line 111
signed char x, y; 
#line 112
}; 
#endif
#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 114
struct __declspec(align(2)) uchar2 { 
#line 116
unsigned char x, y; 
#line 117
}; 
#endif
#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 119
struct char3 { 
#line 121
signed char x, y, z; 
#line 122
}; 
#endif
#line 124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 124
struct uchar3 { 
#line 126
unsigned char x, y, z; 
#line 127
}; 
#endif
#line 129 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 129
struct __declspec(align(4)) char4 { 
#line 131
signed char x, y, z, w; 
#line 132
}; 
#endif
#line 134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 134
struct __declspec(align(4)) uchar4 { 
#line 136
unsigned char x, y, z, w; 
#line 137
}; 
#endif
#line 139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 139
struct short1 { 
#line 141
short x; 
#line 142
}; 
#endif
#line 144 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 144
struct ushort1 { 
#line 146
unsigned short x; 
#line 147
}; 
#endif
#line 149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 149
struct __declspec(align(4)) short2 { 
#line 151
short x, y; 
#line 152
}; 
#endif
#line 154 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 154
struct __declspec(align(4)) ushort2 { 
#line 156
unsigned short x, y; 
#line 157
}; 
#endif
#line 159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 159
struct short3 { 
#line 161
short x, y, z; 
#line 162
}; 
#endif
#line 164 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 164
struct ushort3 { 
#line 166
unsigned short x, y, z; 
#line 167
}; 
#endif
#line 169 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 169
struct __declspec(align(8)) short4 { short x; short y; short z; short w; }; 
#endif
#line 170 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 170
struct __declspec(align(8)) ushort4 { unsigned short x; unsigned short y; unsigned short z; unsigned short w; }; 
#endif
#line 172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 172
struct int1 { 
#line 174
int x; 
#line 175
}; 
#endif
#line 177 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 177
struct uint1 { 
#line 179
unsigned x; 
#line 180
}; 
#endif
#line 182 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 182
struct __declspec(align(8)) int2 { int x; int y; }; 
#endif
#line 183 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 183
struct __declspec(align(8)) uint2 { unsigned x; unsigned y; }; 
#endif
#line 185 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 185
struct int3 { 
#line 187
int x, y, z; 
#line 188
}; 
#endif
#line 190 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 190
struct uint3 { 
#line 192
unsigned x, y, z; 
#line 193
}; 
#endif
#line 195 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 195
struct __declspec(align(16)) int4 { 
#line 197
int x, y, z, w; 
#line 198
}; 
#endif
#line 200 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 200
struct __declspec(align(16)) uint4 { 
#line 202
unsigned x, y, z, w; 
#line 203
}; 
#endif
#line 205 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 205
struct long1 { 
#line 207
long x; 
#line 208
}; 
#endif
#line 210 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 210
struct ulong1 { 
#line 212
unsigned long x; 
#line 213
}; 
#endif
#line 216 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 216
struct __declspec(align(8)) long2 { long x; long y; }; 
#endif
#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 217
struct __declspec(align(8)) ulong2 { unsigned long x; unsigned long y; }; 
#endif
#line 232 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 232
struct long3 { 
#line 234
long x, y, z; 
#line 235
}; 
#endif
#line 237 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 237
struct ulong3 { 
#line 239
unsigned long x, y, z; 
#line 240
}; 
#endif
#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 242
struct __declspec(align(16)) long4 { 
#line 244
long x, y, z, w; 
#line 245
}; 
#endif
#line 247 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 247
struct __declspec(align(16)) ulong4 { 
#line 249
unsigned long x, y, z, w; 
#line 250
}; 
#endif
#line 252 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 252
struct float1 { 
#line 254
float x; 
#line 255
}; 
#endif
#line 274 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 274
struct __declspec(align(8)) float2 { float x; float y; }; 
#endif
#line 279 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 279
struct float3 { 
#line 281
float x, y, z; 
#line 282
}; 
#endif
#line 284 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 284
struct __declspec(align(16)) float4 { 
#line 286
float x, y, z, w; 
#line 287
}; 
#endif
#line 289 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 289
struct longlong1 { 
#line 291
__int64 x; 
#line 292
}; 
#endif
#line 294 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 294
struct ulonglong1 { 
#line 296
unsigned __int64 x; 
#line 297
}; 
#endif
#line 299 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 299
struct __declspec(align(16)) longlong2 { 
#line 301
__int64 x, y; 
#line 302
}; 
#endif
#line 304 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 304
struct __declspec(align(16)) ulonglong2 { 
#line 306
unsigned __int64 x, y; 
#line 307
}; 
#endif
#line 309 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 309
struct longlong3 { 
#line 311
__int64 x, y, z; 
#line 312
}; 
#endif
#line 314 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 314
struct ulonglong3 { 
#line 316
unsigned __int64 x, y, z; 
#line 317
}; 
#endif
#line 319 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 319
struct __declspec(align(16)) longlong4 { 
#line 321
__int64 x, y, z, w; 
#line 322
}; 
#endif
#line 324 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 324
struct __declspec(align(16)) ulonglong4 { 
#line 326
unsigned __int64 x, y, z, w; 
#line 327
}; 
#endif
#line 329 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 329
struct double1 { 
#line 331
double x; 
#line 332
}; 
#endif
#line 334 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 334
struct __declspec(align(16)) double2 { 
#line 336
double x, y; 
#line 337
}; 
#endif
#line 339 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 339
struct double3 { 
#line 341
double x, y, z; 
#line 342
}; 
#endif
#line 344 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 344
struct __declspec(align(16)) double4 { 
#line 346
double x, y, z, w; 
#line 347
}; 
#endif
#line 362 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef char1 
#line 362
char1; 
#endif
#line 363 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef uchar1 
#line 363
uchar1; 
#endif
#line 364 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef char2 
#line 364
char2; 
#endif
#line 365 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef uchar2 
#line 365
uchar2; 
#endif
#line 366 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef char3 
#line 366
char3; 
#endif
#line 367 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef uchar3 
#line 367
uchar3; 
#endif
#line 368 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef char4 
#line 368
char4; 
#endif
#line 369 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef uchar4 
#line 369
uchar4; 
#endif
#line 370 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef short1 
#line 370
short1; 
#endif
#line 371 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef ushort1 
#line 371
ushort1; 
#endif
#line 372 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef short2 
#line 372
short2; 
#endif
#line 373 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef ushort2 
#line 373
ushort2; 
#endif
#line 374 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef short3 
#line 374
short3; 
#endif
#line 375 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef ushort3 
#line 375
ushort3; 
#endif
#line 376 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef short4 
#line 376
short4; 
#endif
#line 377 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef ushort4 
#line 377
ushort4; 
#endif
#line 378 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef int1 
#line 378
int1; 
#endif
#line 379 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef uint1 
#line 379
uint1; 
#endif
#line 380 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef int2 
#line 380
int2; 
#endif
#line 381 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef uint2 
#line 381
uint2; 
#endif
#line 382 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef int3 
#line 382
int3; 
#endif
#line 383 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef uint3 
#line 383
uint3; 
#endif
#line 384 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef int4 
#line 384
int4; 
#endif
#line 385 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef uint4 
#line 385
uint4; 
#endif
#line 386 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef long1 
#line 386
long1; 
#endif
#line 387 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef ulong1 
#line 387
ulong1; 
#endif
#line 388 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef long2 
#line 388
long2; 
#endif
#line 389 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef ulong2 
#line 389
ulong2; 
#endif
#line 390 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef long3 
#line 390
long3; 
#endif
#line 391 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef ulong3 
#line 391
ulong3; 
#endif
#line 392 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef long4 
#line 392
long4; 
#endif
#line 393 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef ulong4 
#line 393
ulong4; 
#endif
#line 394 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef float1 
#line 394
float1; 
#endif
#line 395 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef float2 
#line 395
float2; 
#endif
#line 396 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef float3 
#line 396
float3; 
#endif
#line 397 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef float4 
#line 397
float4; 
#endif
#line 398 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef longlong1 
#line 398
longlong1; 
#endif
#line 399 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef ulonglong1 
#line 399
ulonglong1; 
#endif
#line 400 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef longlong2 
#line 400
longlong2; 
#endif
#line 401 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef ulonglong2 
#line 401
ulonglong2; 
#endif
#line 402 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef longlong3 
#line 402
longlong3; 
#endif
#line 403 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef ulonglong3 
#line 403
ulonglong3; 
#endif
#line 404 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef longlong4 
#line 404
longlong4; 
#endif
#line 405 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef ulonglong4 
#line 405
ulonglong4; 
#endif
#line 406 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef double1 
#line 406
double1; 
#endif
#line 407 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef double2 
#line 407
double2; 
#endif
#line 408 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef double3 
#line 408
double3; 
#endif
#line 409 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef double4 
#line 409
double4; 
#endif
#line 417 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
#line 417
struct dim3 { 
#line 419
unsigned x, y, z; 
#line 425 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
}; 
#endif
#line 427 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#if 0
typedef dim3 
#line 427
dim3; 
#endif
#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
typedef 
#line 54
enum cudaDataType_t { 
#line 56
CUDA_R_16F = 2, 
#line 57
CUDA_C_16F = 6, 
#line 58
CUDA_R_32F = 0, 
#line 59
CUDA_C_32F = 4, 
#line 60
CUDA_R_64F = 1, 
#line 61
CUDA_C_64F = 5, 
#line 62
CUDA_R_8I = 3, 
#line 63
CUDA_C_8I = 7, 
#line 64
CUDA_R_8U, 
#line 65
CUDA_C_8U, 
#line 66
CUDA_R_32I, 
#line 67
CUDA_C_32I, 
#line 68
CUDA_R_32U, 
#line 69
CUDA_C_32U
#line 70
} cudaDataType; 
#line 78
typedef 
#line 73
enum libraryPropertyType_t { 
#line 75
MAJOR_VERSION, 
#line 76
MINOR_VERSION, 
#line 77
PATCH_LEVEL
#line 78
} libraryPropertyType; 
#line 104 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern "C" {
#line 106
extern cudaError_t __stdcall cudaDeviceGetAttribute(int * value, cudaDeviceAttr attr, int device); 
#line 107
extern cudaError_t __stdcall cudaDeviceGetLimit(size_t * pValue, cudaLimit limit); 
#line 108
extern cudaError_t __stdcall cudaDeviceGetCacheConfig(cudaFuncCache * pCacheConfig); 
#line 109
extern cudaError_t __stdcall cudaDeviceGetSharedMemConfig(cudaSharedMemConfig * pConfig); 
#line 110
extern cudaError_t __stdcall cudaDeviceSynchronize(); 
#line 111
extern cudaError_t __stdcall cudaGetLastError(); 
#line 112
extern cudaError_t __stdcall cudaPeekAtLastError(); 
#line 113
extern const char *__stdcall cudaGetErrorString(cudaError_t error); 
#line 114
extern const char *__stdcall cudaGetErrorName(cudaError_t error); 
#line 115
extern cudaError_t __stdcall cudaGetDeviceCount(int * count); 
#line 116
extern cudaError_t __stdcall cudaGetDevice(int * device); 
#line 117
extern cudaError_t __stdcall cudaStreamCreateWithFlags(cudaStream_t * pStream, unsigned flags); 
#line 118
extern cudaError_t __stdcall cudaStreamDestroy(cudaStream_t stream); 
#line 119
extern cudaError_t __stdcall cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned flags); 
#line 120
extern cudaError_t __stdcall cudaStreamWaitEvent_ptsz(cudaStream_t stream, cudaEvent_t event, unsigned flags); 
#line 121
extern cudaError_t __stdcall cudaEventCreateWithFlags(cudaEvent_t * event, unsigned flags); 
#line 122
extern cudaError_t __stdcall cudaEventRecord(cudaEvent_t event, cudaStream_t stream); 
#line 123
extern cudaError_t __stdcall cudaEventRecord_ptsz(cudaEvent_t event, cudaStream_t stream); 
#line 124
extern cudaError_t __stdcall cudaEventDestroy(cudaEvent_t event); 
#line 125
extern cudaError_t __stdcall cudaFuncGetAttributes(cudaFuncAttributes * attr, const void * func); 
#line 126
extern cudaError_t __stdcall cudaFree(void * devPtr); 
#line 127
extern cudaError_t __stdcall cudaMalloc(void ** devPtr, size_t size); 
#line 128
extern cudaError_t __stdcall cudaMemcpyAsync(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream); 
#line 129
extern cudaError_t __stdcall cudaMemcpyAsync_ptsz(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream); 
#line 130
extern cudaError_t __stdcall cudaMemcpy2DAsync(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream); 
#line 131
extern cudaError_t __stdcall cudaMemcpy2DAsync_ptsz(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream); 
#line 132
extern cudaError_t __stdcall cudaMemcpy3DAsync(const cudaMemcpy3DParms * p, cudaStream_t stream); 
#line 133
extern cudaError_t __stdcall cudaMemcpy3DAsync_ptsz(const cudaMemcpy3DParms * p, cudaStream_t stream); 
#line 134
extern cudaError_t __stdcall cudaMemsetAsync(void * devPtr, int value, size_t count, cudaStream_t stream); 
#line 135
extern cudaError_t __stdcall cudaMemsetAsync_ptsz(void * devPtr, int value, size_t count, cudaStream_t stream); 
#line 136
extern cudaError_t __stdcall cudaMemset2DAsync(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream); 
#line 137
extern cudaError_t __stdcall cudaMemset2DAsync_ptsz(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream); 
#line 138
extern cudaError_t __stdcall cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream); 
#line 139
extern cudaError_t __stdcall cudaMemset3DAsync_ptsz(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream); 
#line 140
extern cudaError_t __stdcall cudaRuntimeGetVersion(int * runtimeVersion); 
#line 161
extern void *__stdcall cudaGetParameterBuffer(size_t alignment, size_t size); 
#line 189
extern void *__stdcall cudaGetParameterBufferV2(void * func, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize); 
#line 190
extern cudaError_t __stdcall cudaLaunchDevice_ptsz(void * func, void * parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream); 
#line 191
extern cudaError_t __stdcall cudaLaunchDeviceV2_ptsz(void * parameterBuffer, cudaStream_t stream); 
#line 209 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaLaunchDevice(void * func, void * parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream); 
#line 210
extern cudaError_t __stdcall cudaLaunchDeviceV2(void * parameterBuffer, cudaStream_t stream); 
#line 213 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, const void * func, int blockSize, size_t dynamicSmemSize); 
#line 214
extern cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, const void * func, int blockSize, size_t dynamicSmemSize, unsigned flags); 
#line 216
}
#line 218
template< class T> static __inline cudaError_t cudaMalloc(T ** devPtr, size_t size); 
#line 219
template< class T> static __inline cudaError_t cudaFuncGetAttributes(cudaFuncAttributes * attr, T * entry); 
#line 220
template< class T> static __inline cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, T func, int blockSize, size_t dynamicSmemSize); 
#line 221
template< class T> static __inline cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, T func, int blockSize, size_t dynamicSmemSize, unsigned flags); 
#line 219 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern "C" {
#line 252 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceReset(); 
#line 269
extern cudaError_t __stdcall cudaDeviceSynchronize(); 
#line 344
extern cudaError_t __stdcall cudaDeviceSetLimit(cudaLimit limit, size_t value); 
#line 373
extern cudaError_t __stdcall cudaDeviceGetLimit(size_t * pValue, cudaLimit limit); 
#line 404
extern cudaError_t __stdcall cudaDeviceGetCacheConfig(cudaFuncCache * pCacheConfig); 
#line 439
extern cudaError_t __stdcall cudaDeviceGetStreamPriorityRange(int * leastPriority, int * greatestPriority); 
#line 481
extern cudaError_t __stdcall cudaDeviceSetCacheConfig(cudaFuncCache cacheConfig); 
#line 510
extern cudaError_t __stdcall cudaDeviceGetSharedMemConfig(cudaSharedMemConfig * pConfig); 
#line 552
extern cudaError_t __stdcall cudaDeviceSetSharedMemConfig(cudaSharedMemConfig config); 
#line 575
extern cudaError_t __stdcall cudaDeviceGetByPCIBusId(int * device, const char * pciBusId); 
#line 602
extern cudaError_t __stdcall cudaDeviceGetPCIBusId(char * pciBusId, int len, int device); 
#line 644
extern cudaError_t __stdcall cudaIpcGetEventHandle(cudaIpcEventHandle_t * handle, cudaEvent_t event); 
#line 679
extern cudaError_t __stdcall cudaIpcOpenEventHandle(cudaEvent_t * event, cudaIpcEventHandle_t handle); 
#line 717
extern cudaError_t __stdcall cudaIpcGetMemHandle(cudaIpcMemHandle_t * handle, void * devPtr); 
#line 767
extern cudaError_t __stdcall cudaIpcOpenMemHandle(void ** devPtr, cudaIpcMemHandle_t handle, unsigned flags); 
#line 797
extern cudaError_t __stdcall cudaIpcCloseMemHandle(void * devPtr); 
#line 837
extern cudaError_t __stdcall cudaThreadExit(); 
#line 861
extern cudaError_t __stdcall cudaThreadSynchronize(); 
#line 908
extern cudaError_t __stdcall cudaThreadSetLimit(cudaLimit limit, size_t value); 
#line 939
extern cudaError_t __stdcall cudaThreadGetLimit(size_t * pValue, cudaLimit limit); 
#line 974
extern cudaError_t __stdcall cudaThreadGetCacheConfig(cudaFuncCache * pCacheConfig); 
#line 1020
extern cudaError_t __stdcall cudaThreadSetCacheConfig(cudaFuncCache cacheConfig); 
#line 1074
extern cudaError_t __stdcall cudaGetLastError(); 
#line 1115
extern cudaError_t __stdcall cudaPeekAtLastError(); 
#line 1130
extern const char *__stdcall cudaGetErrorName(cudaError_t error); 
#line 1145
extern const char *__stdcall cudaGetErrorString(cudaError_t error); 
#line 1175
extern cudaError_t __stdcall cudaGetDeviceCount(int * count); 
#line 1421
extern cudaError_t __stdcall cudaGetDeviceProperties(cudaDeviceProp * prop, int device); 
#line 1593
extern cudaError_t __stdcall cudaDeviceGetAttribute(int * value, cudaDeviceAttr attr, int device); 
#line 1628
extern cudaError_t __stdcall cudaDeviceGetP2PAttribute(int * value, cudaDeviceP2PAttr attr, int srcDevice, int dstDevice); 
#line 1647
extern cudaError_t __stdcall cudaChooseDevice(int * device, const cudaDeviceProp * prop); 
#line 1681
extern cudaError_t __stdcall cudaSetDevice(int device); 
#line 1698
extern cudaError_t __stdcall cudaGetDevice(int * device); 
#line 1727
extern cudaError_t __stdcall cudaSetValidDevices(int * device_arr, int len); 
#line 1789
extern cudaError_t __stdcall cudaSetDeviceFlags(unsigned flags); 
#line 1830
extern cudaError_t __stdcall cudaGetDeviceFlags(unsigned * flags); 
#line 1867
extern cudaError_t __stdcall cudaStreamCreate(cudaStream_t * pStream); 
#line 1896
extern cudaError_t __stdcall cudaStreamCreateWithFlags(cudaStream_t * pStream, unsigned flags); 
#line 1939
extern cudaError_t __stdcall cudaStreamCreateWithPriority(cudaStream_t * pStream, unsigned flags, int priority); 
#line 1963
extern cudaError_t __stdcall cudaStreamGetPriority(cudaStream_t hStream, int * priority); 
#line 1984
extern cudaError_t __stdcall cudaStreamGetFlags(cudaStream_t hStream, unsigned * flags); 
#line 2005
extern cudaError_t __stdcall cudaStreamDestroy(cudaStream_t stream); 
#line 2037
extern cudaError_t __stdcall cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned flags); 
#line 2051 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
typedef void (__stdcall *cudaStreamCallback_t)(cudaStream_t stream, cudaError_t status, void * userData); 
#line 2108
extern cudaError_t __stdcall cudaStreamAddCallback(cudaStream_t stream, cudaStreamCallback_t callback, void * userData, unsigned flags); 
#line 2128
extern cudaError_t __stdcall cudaStreamSynchronize(cudaStream_t stream); 
#line 2149
extern cudaError_t __stdcall cudaStreamQuery(cudaStream_t stream); 
#line 2220
extern cudaError_t __stdcall cudaStreamAttachMemAsync(cudaStream_t stream, void * devPtr, size_t length = 0, unsigned flags = 4); 
#line 2256
extern cudaError_t __stdcall cudaEventCreate(cudaEvent_t * event); 
#line 2290
extern cudaError_t __stdcall cudaEventCreateWithFlags(cudaEvent_t * event, unsigned flags); 
#line 2321
extern cudaError_t __stdcall cudaEventRecord(cudaEvent_t event, cudaStream_t stream = 0); 
#line 2353
extern cudaError_t __stdcall cudaEventQuery(cudaEvent_t event); 
#line 2385
extern cudaError_t __stdcall cudaEventSynchronize(cudaEvent_t event); 
#line 2410
extern cudaError_t __stdcall cudaEventDestroy(cudaEvent_t event); 
#line 2451
extern cudaError_t __stdcall cudaEventElapsedTime(float * ms, cudaEvent_t start, cudaEvent_t end); 
#line 2510
extern cudaError_t __stdcall cudaLaunchKernel(const void * func, dim3 gridDim, dim3 blockDim, void ** args, size_t sharedMem, cudaStream_t stream); 
#line 2560 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaFuncSetCacheConfig(const void * func, cudaFuncCache cacheConfig); 
#line 2614
extern cudaError_t __stdcall cudaFuncSetSharedMemConfig(const void * func, cudaSharedMemConfig config); 
#line 2648
extern cudaError_t __stdcall cudaFuncGetAttributes(cudaFuncAttributes * attr, const void * func); 
#line 2671
extern cudaError_t __stdcall cudaSetDoubleForDevice(double * d); 
#line 2694
extern cudaError_t __stdcall cudaSetDoubleForHost(double * d); 
#line 2750
extern cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, const void * func, int blockSize, size_t dynamicSMemSize); 
#line 2794
extern cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, const void * func, int blockSize, size_t dynamicSMemSize, unsigned flags); 
#line 2845 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaConfigureCall(dim3 gridDim, dim3 blockDim, size_t sharedMem = 0, cudaStream_t stream = 0); 
#line 2874
extern cudaError_t __stdcall cudaSetupArgument(const void * arg, size_t size, size_t offset); 
#line 2912
extern cudaError_t __stdcall cudaLaunch(const void * func); 
#line 3030
extern cudaError_t __stdcall cudaMallocManaged(void ** devPtr, size_t size, unsigned flags = 1); 
#line 3056
extern cudaError_t __stdcall cudaMalloc(void ** devPtr, size_t size); 
#line 3085
extern cudaError_t __stdcall cudaMallocHost(void ** ptr, size_t size); 
#line 3124
extern cudaError_t __stdcall cudaMallocPitch(void ** devPtr, size_t * pitch, size_t width, size_t height); 
#line 3166
extern cudaError_t __stdcall cudaMallocArray(cudaArray_t * array, const cudaChannelFormatDesc * desc, size_t width, size_t height = 0, unsigned flags = 0); 
#line 3193
extern cudaError_t __stdcall cudaFree(void * devPtr); 
#line 3213
extern cudaError_t __stdcall cudaFreeHost(void * ptr); 
#line 3235
extern cudaError_t __stdcall cudaFreeArray(cudaArray_t array); 
#line 3257
extern cudaError_t __stdcall cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray); 
#line 3316
extern cudaError_t __stdcall cudaHostAlloc(void ** pHost, size_t size, unsigned flags); 
#line 3393
extern cudaError_t __stdcall cudaHostRegister(void * ptr, size_t size, unsigned flags); 
#line 3412
extern cudaError_t __stdcall cudaHostUnregister(void * ptr); 
#line 3454
extern cudaError_t __stdcall cudaHostGetDevicePointer(void ** pDevice, void * pHost, unsigned flags); 
#line 3473
extern cudaError_t __stdcall cudaHostGetFlags(unsigned * pFlags, void * pHost); 
#line 3508
extern cudaError_t __stdcall cudaMalloc3D(cudaPitchedPtr * pitchedDevPtr, cudaExtent extent); 
#line 3643
extern cudaError_t __stdcall cudaMalloc3DArray(cudaArray_t * array, const cudaChannelFormatDesc * desc, cudaExtent extent, unsigned flags = 0); 
#line 3764
extern cudaError_t __stdcall cudaMallocMipmappedArray(cudaMipmappedArray_t * mipmappedArray, const cudaChannelFormatDesc * desc, cudaExtent extent, unsigned numLevels, unsigned flags = 0); 
#line 3790
extern cudaError_t __stdcall cudaGetMipmappedArrayLevel(cudaArray_t * levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned level); 
#line 3890
extern cudaError_t __stdcall cudaMemcpy3D(const cudaMemcpy3DParms * p); 
#line 3918
extern cudaError_t __stdcall cudaMemcpy3DPeer(const cudaMemcpy3DPeerParms * p); 
#line 4029
extern cudaError_t __stdcall cudaMemcpy3DAsync(const cudaMemcpy3DParms * p, cudaStream_t stream = 0); 
#line 4052
extern cudaError_t __stdcall cudaMemcpy3DPeerAsync(const cudaMemcpy3DPeerParms * p, cudaStream_t stream = 0); 
#line 4071
extern cudaError_t __stdcall cudaMemGetInfo(size_t * free, size_t * total); 
#line 4092
extern cudaError_t __stdcall cudaArrayGetInfo(cudaChannelFormatDesc * desc, cudaExtent * extent, unsigned * flags, cudaArray_t array); 
#line 4130
extern cudaError_t __stdcall cudaMemcpy(void * dst, const void * src, size_t count, cudaMemcpyKind kind); 
#line 4162
extern cudaError_t __stdcall cudaMemcpyPeer(void * dst, int dstDevice, const void * src, int srcDevice, size_t count); 
#line 4200
extern cudaError_t __stdcall cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t count, cudaMemcpyKind kind); 
#line 4237
extern cudaError_t __stdcall cudaMemcpyFromArray(void * dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind); 
#line 4275
extern cudaError_t __stdcall cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, cudaMemcpyKind kind = cudaMemcpyDeviceToDevice); 
#line 4320
extern cudaError_t __stdcall cudaMemcpy2D(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind); 
#line 4366
extern cudaError_t __stdcall cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind); 
#line 4412
extern cudaError_t __stdcall cudaMemcpy2DFromArray(void * dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind); 
#line 4455
extern cudaError_t __stdcall cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, cudaMemcpyKind kind = cudaMemcpyDeviceToDevice); 
#line 4493
extern cudaError_t __stdcall cudaMemcpyToSymbol(const void * symbol, const void * src, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyHostToDevice); 
#line 4531
extern cudaError_t __stdcall cudaMemcpyFromSymbol(void * dst, const void * symbol, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyDeviceToHost); 
#line 4582
extern cudaError_t __stdcall cudaMemcpyAsync(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 4614
extern cudaError_t __stdcall cudaMemcpyPeerAsync(void * dst, int dstDevice, const void * src, int srcDevice, size_t count, cudaStream_t stream = 0); 
#line 4660
extern cudaError_t __stdcall cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 4705
extern cudaError_t __stdcall cudaMemcpyFromArrayAsync(void * dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 4765
extern cudaError_t __stdcall cudaMemcpy2DAsync(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 4820
extern cudaError_t __stdcall cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 4874
extern cudaError_t __stdcall cudaMemcpy2DFromArrayAsync(void * dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 4920
extern cudaError_t __stdcall cudaMemcpyToSymbolAsync(const void * symbol, const void * src, size_t count, size_t offset, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 4966
extern cudaError_t __stdcall cudaMemcpyFromSymbolAsync(void * dst, const void * symbol, size_t count, size_t offset, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 4992
extern cudaError_t __stdcall cudaMemset(void * devPtr, int value, size_t count); 
#line 5022
extern cudaError_t __stdcall cudaMemset2D(void * devPtr, size_t pitch, int value, size_t width, size_t height); 
#line 5065
extern cudaError_t __stdcall cudaMemset3D(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent); 
#line 5097
extern cudaError_t __stdcall cudaMemsetAsync(void * devPtr, int value, size_t count, cudaStream_t stream = 0); 
#line 5134
extern cudaError_t __stdcall cudaMemset2DAsync(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream = 0); 
#line 5184
extern cudaError_t __stdcall cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream = 0); 
#line 5207
extern cudaError_t __stdcall cudaGetSymbolAddress(void ** devPtr, const void * symbol); 
#line 5229
extern cudaError_t __stdcall cudaGetSymbolSize(size_t * size, const void * symbol); 
#line 5296
extern cudaError_t __stdcall cudaMemPrefetchAsync(const void * devPtr, size_t count, int dstDevice, cudaStream_t stream = 0); 
#line 5382
extern cudaError_t __stdcall cudaMemAdvise(const void * devPtr, size_t count, cudaMemoryAdvise advice, int device); 
#line 5438
extern cudaError_t __stdcall cudaMemRangeGetAttribute(void * data, size_t dataSize, cudaMemRangeAttribute attribute, const void * devPtr, size_t count); 
#line 5474
extern cudaError_t __stdcall cudaMemRangeGetAttributes(void ** data, size_t * dataSizes, cudaMemRangeAttribute * attributes, size_t numAttributes, const void * devPtr, size_t count); 
#line 5627
extern cudaError_t __stdcall cudaPointerGetAttributes(cudaPointerAttributes * attributes, const void * ptr); 
#line 5665
extern cudaError_t __stdcall cudaDeviceCanAccessPeer(int * canAccessPeer, int device, int peerDevice); 
#line 5704
extern cudaError_t __stdcall cudaDeviceEnablePeerAccess(int peerDevice, unsigned flags); 
#line 5723
extern cudaError_t __stdcall cudaDeviceDisablePeerAccess(int peerDevice); 
#line 5783
extern cudaError_t __stdcall cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource); 
#line 5815
extern cudaError_t __stdcall cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned flags); 
#line 5851
extern cudaError_t __stdcall cudaGraphicsMapResources(int count, cudaGraphicsResource_t * resources, cudaStream_t stream = 0); 
#line 5883
extern cudaError_t __stdcall cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t * resources, cudaStream_t stream = 0); 
#line 5912
extern cudaError_t __stdcall cudaGraphicsResourceGetMappedPointer(void ** devPtr, size_t * size, cudaGraphicsResource_t resource); 
#line 5946
extern cudaError_t __stdcall cudaGraphicsSubResourceGetMappedArray(cudaArray_t * array, cudaGraphicsResource_t resource, unsigned arrayIndex, unsigned mipLevel); 
#line 5971
extern cudaError_t __stdcall cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t * mipmappedArray, cudaGraphicsResource_t resource); 
#line 6011
extern cudaError_t __stdcall cudaGetChannelDesc(cudaChannelFormatDesc * desc, cudaArray_const_t array); 
#line 6046
extern cudaChannelFormatDesc __stdcall cudaCreateChannelDesc(int x, int y, int z, int w, cudaChannelFormatKind f); 
#line 6093
extern cudaError_t __stdcall cudaBindTexture(size_t * offset, const textureReference * texref, const void * devPtr, const cudaChannelFormatDesc * desc, size_t size = 4294967295U); 
#line 6144
extern cudaError_t __stdcall cudaBindTexture2D(size_t * offset, const textureReference * texref, const void * devPtr, const cudaChannelFormatDesc * desc, size_t width, size_t height, size_t pitch); 
#line 6172
extern cudaError_t __stdcall cudaBindTextureToArray(const textureReference * texref, cudaArray_const_t array, const cudaChannelFormatDesc * desc); 
#line 6200
extern cudaError_t __stdcall cudaBindTextureToMipmappedArray(const textureReference * texref, cudaMipmappedArray_const_t mipmappedArray, const cudaChannelFormatDesc * desc); 
#line 6221
extern cudaError_t __stdcall cudaUnbindTexture(const textureReference * texref); 
#line 6246
extern cudaError_t __stdcall cudaGetTextureAlignmentOffset(size_t * offset, const textureReference * texref); 
#line 6271
extern cudaError_t __stdcall cudaGetTextureReference(const textureReference ** texref, const void * symbol); 
#line 6311
extern cudaError_t __stdcall cudaBindSurfaceToArray(const surfaceReference * surfref, cudaArray_const_t array, const cudaChannelFormatDesc * desc); 
#line 6330
extern cudaError_t __stdcall cudaGetSurfaceReference(const surfaceReference ** surfref, const void * symbol); 
#line 6556
extern cudaError_t __stdcall cudaCreateTextureObject(cudaTextureObject_t * pTexObject, const cudaResourceDesc * pResDesc, const cudaTextureDesc * pTexDesc, const cudaResourceViewDesc * pResViewDesc); 
#line 6571
extern cudaError_t __stdcall cudaDestroyTextureObject(cudaTextureObject_t texObject); 
#line 6587
extern cudaError_t __stdcall cudaGetTextureObjectResourceDesc(cudaResourceDesc * pResDesc, cudaTextureObject_t texObject); 
#line 6603
extern cudaError_t __stdcall cudaGetTextureObjectTextureDesc(cudaTextureDesc * pTexDesc, cudaTextureObject_t texObject); 
#line 6620
extern cudaError_t __stdcall cudaGetTextureObjectResourceViewDesc(cudaResourceViewDesc * pResViewDesc, cudaTextureObject_t texObject); 
#line 6659
extern cudaError_t __stdcall cudaCreateSurfaceObject(cudaSurfaceObject_t * pSurfObject, const cudaResourceDesc * pResDesc); 
#line 6674
extern cudaError_t __stdcall cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject); 
#line 6689
extern cudaError_t __stdcall cudaGetSurfaceObjectResourceDesc(cudaResourceDesc * pResDesc, cudaSurfaceObject_t surfObject); 
#line 6716
extern cudaError_t __stdcall cudaDriverGetVersion(int * driverVersion); 
#line 6733
extern cudaError_t __stdcall cudaRuntimeGetVersion(int * runtimeVersion); 
#line 6738
extern cudaError_t __stdcall cudaGetExportTable(const void ** ppExportTable, const cudaUUID_t * pExportTableId); 
#line 6964 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
}
#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template< class T> __inline ::cudaChannelFormatDesc cudaCreateChannelDesc() 
#line 108
{ 
#line 109
return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone); 
#line 110
} 
#line 112
static __inline cudaChannelFormatDesc cudaCreateChannelDescHalf() 
#line 113
{ 
#line 114
int e = (((int)sizeof(unsigned short)) * 8); 
#line 116
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
#line 117
} 
#line 119
static __inline cudaChannelFormatDesc cudaCreateChannelDescHalf1() 
#line 120
{ 
#line 121
int e = (((int)sizeof(unsigned short)) * 8); 
#line 123
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
#line 124
} 
#line 126
static __inline cudaChannelFormatDesc cudaCreateChannelDescHalf2() 
#line 127
{ 
#line 128
int e = (((int)sizeof(unsigned short)) * 8); 
#line 130
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat); 
#line 131
} 
#line 133
static __inline cudaChannelFormatDesc cudaCreateChannelDescHalf4() 
#line 134
{ 
#line 135
int e = (((int)sizeof(unsigned short)) * 8); 
#line 137
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat); 
#line 138
} 
#line 140
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< char> () 
#line 141
{ 
#line 142
int e = (((int)sizeof(char)) * 8); 
#line 147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 151
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< signed char> () 
#line 152
{ 
#line 153
int e = (((int)sizeof(signed char)) * 8); 
#line 155
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 156
} 
#line 158
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned char> () 
#line 159
{ 
#line 160
int e = (((int)sizeof(unsigned char)) * 8); 
#line 162
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 163
} 
#line 165
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< char1> () 
#line 166
{ 
#line 167
int e = (((int)sizeof(signed char)) * 8); 
#line 169
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 170
} 
#line 172
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar1> () 
#line 173
{ 
#line 174
int e = (((int)sizeof(unsigned char)) * 8); 
#line 176
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 177
} 
#line 179
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< char2> () 
#line 180
{ 
#line 181
int e = (((int)sizeof(signed char)) * 8); 
#line 183
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
#line 184
} 
#line 186
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar2> () 
#line 187
{ 
#line 188
int e = (((int)sizeof(unsigned char)) * 8); 
#line 190
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
#line 191
} 
#line 193
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< char4> () 
#line 194
{ 
#line 195
int e = (((int)sizeof(signed char)) * 8); 
#line 197
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
#line 198
} 
#line 200
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar4> () 
#line 201
{ 
#line 202
int e = (((int)sizeof(unsigned char)) * 8); 
#line 204
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
#line 205
} 
#line 207
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< short> () 
#line 208
{ 
#line 209
int e = (((int)sizeof(short)) * 8); 
#line 211
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 212
} 
#line 214
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned short> () 
#line 215
{ 
#line 216
int e = (((int)sizeof(unsigned short)) * 8); 
#line 218
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 219
} 
#line 221
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< short1> () 
#line 222
{ 
#line 223
int e = (((int)sizeof(short)) * 8); 
#line 225
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 226
} 
#line 228
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort1> () 
#line 229
{ 
#line 230
int e = (((int)sizeof(unsigned short)) * 8); 
#line 232
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 233
} 
#line 235
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< short2> () 
#line 236
{ 
#line 237
int e = (((int)sizeof(short)) * 8); 
#line 239
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
#line 240
} 
#line 242
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort2> () 
#line 243
{ 
#line 244
int e = (((int)sizeof(unsigned short)) * 8); 
#line 246
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
#line 247
} 
#line 249
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< short4> () 
#line 250
{ 
#line 251
int e = (((int)sizeof(short)) * 8); 
#line 253
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
#line 254
} 
#line 256
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort4> () 
#line 257
{ 
#line 258
int e = (((int)sizeof(unsigned short)) * 8); 
#line 260
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
#line 261
} 
#line 263
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< int> () 
#line 264
{ 
#line 265
int e = (((int)sizeof(int)) * 8); 
#line 267
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 268
} 
#line 270
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned> () 
#line 271
{ 
#line 272
int e = (((int)sizeof(unsigned)) * 8); 
#line 274
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 275
} 
#line 277
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< int1> () 
#line 278
{ 
#line 279
int e = (((int)sizeof(int)) * 8); 
#line 281
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 282
} 
#line 284
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uint1> () 
#line 285
{ 
#line 286
int e = (((int)sizeof(unsigned)) * 8); 
#line 288
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 289
} 
#line 291
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< int2> () 
#line 292
{ 
#line 293
int e = (((int)sizeof(int)) * 8); 
#line 295
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
#line 296
} 
#line 298
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uint2> () 
#line 299
{ 
#line 300
int e = (((int)sizeof(unsigned)) * 8); 
#line 302
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
#line 303
} 
#line 305
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< int4> () 
#line 306
{ 
#line 307
int e = (((int)sizeof(int)) * 8); 
#line 309
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
#line 310
} 
#line 312
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uint4> () 
#line 313
{ 
#line 314
int e = (((int)sizeof(unsigned)) * 8); 
#line 316
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
#line 317
} 
#line 321
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< long> () 
#line 322
{ 
#line 323
int e = (((int)sizeof(long)) * 8); 
#line 325
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 326
} 
#line 328
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned long> () 
#line 329
{ 
#line 330
int e = (((int)sizeof(unsigned long)) * 8); 
#line 332
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 333
} 
#line 335
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< long1> () 
#line 336
{ 
#line 337
int e = (((int)sizeof(long)) * 8); 
#line 339
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 340
} 
#line 342
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ulong1> () 
#line 343
{ 
#line 344
int e = (((int)sizeof(unsigned long)) * 8); 
#line 346
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 347
} 
#line 349
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< long2> () 
#line 350
{ 
#line 351
int e = (((int)sizeof(long)) * 8); 
#line 353
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
#line 354
} 
#line 356
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ulong2> () 
#line 357
{ 
#line 358
int e = (((int)sizeof(unsigned long)) * 8); 
#line 360
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
#line 361
} 
#line 363
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< long4> () 
#line 364
{ 
#line 365
int e = (((int)sizeof(long)) * 8); 
#line 367
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
#line 368
} 
#line 370
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ulong4> () 
#line 371
{ 
#line 372
int e = (((int)sizeof(unsigned long)) * 8); 
#line 374
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
#line 375
} 
#line 379 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< float> () 
#line 380
{ 
#line 381
int e = (((int)sizeof(float)) * 8); 
#line 383
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
#line 384
} 
#line 386
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< float1> () 
#line 387
{ 
#line 388
int e = (((int)sizeof(float)) * 8); 
#line 390
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
#line 391
} 
#line 393
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< float2> () 
#line 394
{ 
#line 395
int e = (((int)sizeof(float)) * 8); 
#line 397
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat); 
#line 398
} 
#line 400
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< float4> () 
#line 401
{ 
#line 402
int e = (((int)sizeof(float)) * 8); 
#line 404
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat); 
#line 405
} 
#line 79 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
static __inline cudaPitchedPtr make_cudaPitchedPtr(void *d, size_t p, size_t xsz, size_t ysz) 
#line 80
{ 
#line 81
cudaPitchedPtr s; 
#line 83
(s.ptr) = d; 
#line 84
(s.pitch) = p; 
#line 85
(s.xsize) = xsz; 
#line 86
(s.ysize) = ysz; 
#line 88
return s; 
#line 89
} 
#line 106
static __inline cudaPos make_cudaPos(size_t x, size_t y, size_t z) 
#line 107
{ 
#line 108
cudaPos p; 
#line 110
(p.x) = x; 
#line 111
(p.y) = y; 
#line 112
(p.z) = z; 
#line 114
return p; 
#line 115
} 
#line 132
static __inline cudaExtent make_cudaExtent(size_t w, size_t h, size_t d) 
#line 133
{ 
#line 134
cudaExtent e; 
#line 136
(e.width) = w; 
#line 137
(e.height) = h; 
#line 138
(e.depth) = d; 
#line 140
return e; 
#line 141
} 
#line 75 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline char1 make_char1(signed char x) 
#line 76
{ 
#line 77
char1 t; (t.x) = x; return t; 
#line 78
} 
#line 80
static __inline uchar1 make_uchar1(unsigned char x) 
#line 81
{ 
#line 82
uchar1 t; (t.x) = x; return t; 
#line 83
} 
#line 85
static __inline char2 make_char2(signed char x, signed char y) 
#line 86
{ 
#line 87
char2 t; (t.x) = x; (t.y) = y; return t; 
#line 88
} 
#line 90
static __inline uchar2 make_uchar2(unsigned char x, unsigned char y) 
#line 91
{ 
#line 92
uchar2 t; (t.x) = x; (t.y) = y; return t; 
#line 93
} 
#line 95
static __inline char3 make_char3(signed char x, signed char y, signed char z) 
#line 96
{ 
#line 97
char3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 98
} 
#line 100
static __inline uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z) 
#line 101
{ 
#line 102
uchar3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 103
} 
#line 105
static __inline char4 make_char4(signed char x, signed char y, signed char z, signed char w) 
#line 106
{ 
#line 107
char4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 108
} 
#line 110
static __inline uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w) 
#line 111
{ 
#line 112
uchar4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 113
} 
#line 115
static __inline short1 make_short1(short x) 
#line 116
{ 
#line 117
short1 t; (t.x) = x; return t; 
#line 118
} 
#line 120
static __inline ushort1 make_ushort1(unsigned short x) 
#line 121
{ 
#line 122
ushort1 t; (t.x) = x; return t; 
#line 123
} 
#line 125
static __inline short2 make_short2(short x, short y) 
#line 126
{ 
#line 127
short2 t; (t.x) = x; (t.y) = y; return t; 
#line 128
} 
#line 130
static __inline ushort2 make_ushort2(unsigned short x, unsigned short y) 
#line 131
{ 
#line 132
ushort2 t; (t.x) = x; (t.y) = y; return t; 
#line 133
} 
#line 135
static __inline short3 make_short3(short x, short y, short z) 
#line 136
{ 
#line 137
short3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 138
} 
#line 140
static __inline ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z) 
#line 141
{ 
#line 142
ushort3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 143
} 
#line 145
static __inline short4 make_short4(short x, short y, short z, short w) 
#line 146
{ 
#line 147
short4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 148
} 
#line 150
static __inline ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w) 
#line 151
{ 
#line 152
ushort4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 153
} 
#line 155
static __inline int1 make_int1(int x) 
#line 156
{ 
#line 157
int1 t; (t.x) = x; return t; 
#line 158
} 
#line 160
static __inline uint1 make_uint1(unsigned x) 
#line 161
{ 
#line 162
uint1 t; (t.x) = x; return t; 
#line 163
} 
#line 165
static __inline int2 make_int2(int x, int y) 
#line 166
{ 
#line 167
int2 t; (t.x) = x; (t.y) = y; return t; 
#line 168
} 
#line 170
static __inline uint2 make_uint2(unsigned x, unsigned y) 
#line 171
{ 
#line 172
uint2 t; (t.x) = x; (t.y) = y; return t; 
#line 173
} 
#line 175
static __inline int3 make_int3(int x, int y, int z) 
#line 176
{ 
#line 177
int3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 178
} 
#line 180
static __inline uint3 make_uint3(unsigned x, unsigned y, unsigned z) 
#line 181
{ 
#line 182
uint3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 183
} 
#line 185
static __inline int4 make_int4(int x, int y, int z, int w) 
#line 186
{ 
#line 187
int4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 188
} 
#line 190
static __inline uint4 make_uint4(unsigned x, unsigned y, unsigned z, unsigned w) 
#line 191
{ 
#line 192
uint4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 193
} 
#line 195
static __inline long1 make_long1(long x) 
#line 196
{ 
#line 197
long1 t; (t.x) = x; return t; 
#line 198
} 
#line 200
static __inline ulong1 make_ulong1(unsigned long x) 
#line 201
{ 
#line 202
ulong1 t; (t.x) = x; return t; 
#line 203
} 
#line 205
static __inline long2 make_long2(long x, long y) 
#line 206
{ 
#line 207
long2 t; (t.x) = x; (t.y) = y; return t; 
#line 208
} 
#line 210
static __inline ulong2 make_ulong2(unsigned long x, unsigned long y) 
#line 211
{ 
#line 212
ulong2 t; (t.x) = x; (t.y) = y; return t; 
#line 213
} 
#line 215
static __inline long3 make_long3(long x, long y, long z) 
#line 216
{ 
#line 217
long3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 218
} 
#line 220
static __inline ulong3 make_ulong3(unsigned long x, unsigned long y, unsigned long z) 
#line 221
{ 
#line 222
ulong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 223
} 
#line 225
static __inline long4 make_long4(long x, long y, long z, long w) 
#line 226
{ 
#line 227
long4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 228
} 
#line 230
static __inline ulong4 make_ulong4(unsigned long x, unsigned long y, unsigned long z, unsigned long w) 
#line 231
{ 
#line 232
ulong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 233
} 
#line 235
static __inline float1 make_float1(float x) 
#line 236
{ 
#line 237
float1 t; (t.x) = x; return t; 
#line 238
} 
#line 240
static __inline float2 make_float2(float x, float y) 
#line 241
{ 
#line 242
float2 t; (t.x) = x; (t.y) = y; return t; 
#line 243
} 
#line 245
static __inline float3 make_float3(float x, float y, float z) 
#line 246
{ 
#line 247
float3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 248
} 
#line 250
static __inline float4 make_float4(float x, float y, float z, float w) 
#line 251
{ 
#line 252
float4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 253
} 
#line 255
static __inline longlong1 make_longlong1(__int64 x) 
#line 256
{ 
#line 257
longlong1 t; (t.x) = x; return t; 
#line 258
} 
#line 260
static __inline ulonglong1 make_ulonglong1(unsigned __int64 x) 
#line 261
{ 
#line 262
ulonglong1 t; (t.x) = x; return t; 
#line 263
} 
#line 265
static __inline longlong2 make_longlong2(__int64 x, __int64 y) 
#line 266
{ 
#line 267
longlong2 t; (t.x) = x; (t.y) = y; return t; 
#line 268
} 
#line 270
static __inline ulonglong2 make_ulonglong2(unsigned __int64 x, unsigned __int64 y) 
#line 271
{ 
#line 272
ulonglong2 t; (t.x) = x; (t.y) = y; return t; 
#line 273
} 
#line 275
static __inline longlong3 make_longlong3(__int64 x, __int64 y, __int64 z) 
#line 276
{ 
#line 277
longlong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 278
} 
#line 280
static __inline ulonglong3 make_ulonglong3(unsigned __int64 x, unsigned __int64 y, unsigned __int64 z) 
#line 281
{ 
#line 282
ulonglong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 283
} 
#line 285
static __inline longlong4 make_longlong4(__int64 x, __int64 y, __int64 z, __int64 w) 
#line 286
{ 
#line 287
longlong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 288
} 
#line 290
static __inline ulonglong4 make_ulonglong4(unsigned __int64 x, unsigned __int64 y, unsigned __int64 z, unsigned __int64 w) 
#line 291
{ 
#line 292
ulonglong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 293
} 
#line 295
static __inline double1 make_double1(double x) 
#line 296
{ 
#line 297
double1 t; (t.x) = x; return t; 
#line 298
} 
#line 300
static __inline double2 make_double2(double x, double y) 
#line 301
{ 
#line 302
double2 t; (t.x) = x; (t.y) = y; return t; 
#line 303
} 
#line 305
static __inline double3 make_double3(double x, double y, double z) 
#line 306
{ 
#line 307
double3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 308
} 
#line 310
static __inline double4 make_double4(double x, double y, double z, double w) 
#line 311
{ 
#line 312
double4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 313
} 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\errno.h"
__pragma( pack ( push, 8 )) extern "C" {
#line 17
__declspec(dllimport) extern int *__cdecl _errno(); 
#line 20
__declspec(dllimport) errno_t __cdecl _set_errno(int _Value); 
#line 21
__declspec(dllimport) errno_t __cdecl _get_errno(int * _Value); 
#line 25
__declspec(dllimport) unsigned long *__cdecl __doserrno(); 
#line 28
__declspec(dllimport) errno_t __cdecl _set_doserrno(unsigned long _Value); 
#line 29
__declspec(dllimport) errno_t __cdecl _get_doserrno(unsigned long * _Value); 
#line 129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\errno.h"
}__pragma( pack ( pop )) 
#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
__pragma( pack ( push, 8 )) extern "C" {
#line 19
__declspec(dllimport) const void *__cdecl memchr(const void * _Buf, int _Val, size_t _MaxCount); 
#line 26
int __cdecl memcmp(const void * _Buf1, const void * _Buf2, size_t _Size); 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
void *__cdecl memcpy(void * _Dst, const void * _Src, size_t _Size); 
#line 47
__declspec(dllimport) void *__cdecl memmove(void * _Dst, const void * _Src, size_t _Size); 
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
void *__cdecl memset(void * _Dst, int _Val, size_t _Size); 
#line 67
__declspec(dllimport) const char *__cdecl strchr(const char * _Str, int _Val); 
#line 73
__declspec(dllimport) const char *__cdecl strrchr(const char * _Str, int _Ch); 
#line 79
__declspec(dllimport) const char *__cdecl strstr(const char * _Str, const char * _SubStr); 
#line 86
__declspec(dllimport) const __wchar_t *__cdecl wcschr(const __wchar_t * _Str, __wchar_t _Ch); 
#line 92
__declspec(dllimport) const __wchar_t *__cdecl wcsrchr(const __wchar_t * _Str, __wchar_t _Ch); 
#line 99
__declspec(dllimport) const __wchar_t *__cdecl wcsstr(const __wchar_t * _Str, const __wchar_t * _SubStr); 
#line 106
}__pragma( pack ( pop )) 
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
__pragma( pack ( push, 8 )) extern "C" {
#line 35 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
static __inline errno_t __cdecl memcpy_s(void *const 
#line 36
_Destination, const rsize_t 
#line 37
_DestinationSize, const void *const 
#line 38
_Source, const rsize_t 
#line 39
_SourceSize) 
#line 41
{ 
#line 42
if (_SourceSize == (0)) 
#line 43
{ 
#line 44
return 0; 
#line 45
}  
#line 47
{ int _Expr_val = !(!(_Destination != (0))); if (!_Expr_val) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; }  } ; 
#line 48
if ((_Source == (0)) || (_DestinationSize < _SourceSize)) 
#line 49
{ 
#line 50
memset(_Destination, 0, _DestinationSize); 
#line 52
{ int _Expr_val = !(!(_Source != (0))); if (!_Expr_val) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; }  } ; 
#line 53
{ int _Expr_val = !(!(_DestinationSize >= _SourceSize)); if (!_Expr_val) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; }  } ; 
#line 56
return 22; 
#line 57
}  
#line 59
memcpy(_Destination, _Source, _SourceSize); 
#line 60
return 0; 
#line 61
} 
#line 64
static __inline errno_t __cdecl memmove_s(void *const 
#line 65
_Destination, const rsize_t 
#line 66
_DestinationSize, const void *const 
#line 67
_Source, const rsize_t 
#line 68
_SourceSize) 
#line 70
{ 
#line 71
if (_SourceSize == (0)) 
#line 72
{ 
#line 73
return 0; 
#line 74
}  
#line 76
{ int _Expr_val = !(!(_Destination != (0))); if (!_Expr_val) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; }  } ; 
#line 77
{ int _Expr_val = !(!(_Source != (0))); if (!_Expr_val) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; }  } ; 
#line 78
{ int _Expr_val = !(!(_DestinationSize >= _SourceSize)); if (!_Expr_val) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; }  } ; 
#line 80
memmove(_Destination, _Source, _SourceSize); 
#line 81
return 0; 
#line 82
} 
#line 88 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
}__pragma( pack ( pop )) 
#line 19 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
__pragma( pack ( push, 8 )) extern "C" {
#line 24
__declspec(dllimport) int __cdecl _memicmp(const void * _Buf1, const void * _Buf2, size_t _Size); 
#line 31
__declspec(dllimport) int __cdecl _memicmp_l(const void * _Buf1, const void * _Buf2, size_t _Size, _locale_t _Locale); 
#line 78 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
__declspec(dllimport) void *__cdecl memccpy(void * _Dst, const void * _Src, int _Val, size_t _Size); 
#line 86
__declspec(dllimport) int __cdecl memicmp(const void * _Buf1, const void * _Buf2, size_t _Size); 
#line 97 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
extern "C++" inline void *__cdecl memchr(void *
#line 98
_Pv, int 
#line 99
_C, size_t 
#line 100
_N) 
#line 102
{ 
#line 103
const void *const _Pvc = _Pv; 
#line 104
return const_cast< void *>(memchr(_Pvc, _C, _N)); 
#line 105
} 
#line 110 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
}__pragma( pack ( pop )) 
#line 16 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__pragma( pack ( push, 8 )) extern "C" {
#line 28
__declspec(dllimport) errno_t __cdecl wcscat_s(__wchar_t * _Destination, rsize_t _SizeInWords, const __wchar_t * _Source); 
#line 35
__declspec(dllimport) errno_t __cdecl wcscpy_s(__wchar_t * _Destination, rsize_t _SizeInWords, const __wchar_t * _Source); 
#line 42
__declspec(dllimport) errno_t __cdecl wcsncat_s(__wchar_t * _Destination, rsize_t _SizeInWords, const __wchar_t * _Source, rsize_t _MaxCount); 
#line 50
__declspec(dllimport) errno_t __cdecl wcsncpy_s(__wchar_t * _Destination, rsize_t _SizeInWords, const __wchar_t * _Source, rsize_t _MaxCount); 
#line 58
__declspec(dllimport) __wchar_t *__cdecl wcstok_s(__wchar_t * _String, const __wchar_t * _Delimiter, __wchar_t ** _Context); 
#line 79 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __declspec(allocator) __wchar_t *__cdecl _wcsdup(const __wchar_t * _String); 
#line 89 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl wcscat_s(__wchar_t (&_Destination)[_Size], const __wchar_t *_Source) throw() { return wcscat_s(_Destination, _Size, _Source); } }
#line 97 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcscat(__wchar_t * _Destination, const __wchar_t * _Source); 
#line 106 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl wcscmp(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 111
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl wcscpy_s(__wchar_t (&_Destination)[_Size], const __wchar_t *_Source) throw() { return wcscpy_s(_Destination, _Size, _Source); } }
#line 117 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcscpy(__wchar_t * _Destination, const __wchar_t * _Source); 
#line 124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) size_t __cdecl wcscspn(const __wchar_t * _String, const __wchar_t * _Control); 
#line 130
__declspec(dllimport) size_t __cdecl wcslen(const __wchar_t * _String); 
#line 143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) size_t __cdecl wcsnlen(const __wchar_t * _Source, size_t _MaxCount); 
#line 159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
static __inline size_t __cdecl wcsnlen_s(const __wchar_t *
#line 160
_Source, size_t 
#line 161
_MaxCount) 
#line 163
{ 
#line 164
return (_Source == (0)) ? 0 : wcsnlen(_Source, _MaxCount); 
#line 165
} 
#line 169 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl wcsncat_s(__wchar_t (&_Destination)[_Size], const __wchar_t *_Source, ::size_t _Count) throw() { return wcsncat_s(_Destination, _Size, _Source, _Count); } }
#line 176 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcsncat(__wchar_t * _Destination, const __wchar_t * _Source, size_t _Count); 
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl wcsncmp(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount); 
#line 191
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl wcsncpy_s(__wchar_t (&_Destination)[_Size], const __wchar_t *_Source, ::size_t _Count) throw() { return wcsncpy_s(_Destination, _Size, _Source, _Count); } }
#line 198 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcsncpy(__wchar_t * _Destination, const __wchar_t * _Source, size_t _Count); 
#line 207 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) const __wchar_t *__cdecl wcspbrk(const __wchar_t * _String, const __wchar_t * _Control); 
#line 213
__declspec(dllimport) size_t __cdecl wcsspn(const __wchar_t * _String, const __wchar_t * _Control); 
#line 219
__declspec(dllimport) __wchar_t *__cdecl wcstok(__wchar_t * _String, const __wchar_t * _Delimiter, __wchar_t ** _Context); 
#line 236 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
#pragma warning(push)
#pragma warning(disable: 4141 4996)
#line 240
static __inline __wchar_t *__cdecl _wcstok(__wchar_t *const 
#line 241
_String, const __wchar_t *const 
#line 242
_Delimiter) 
#line 244
{ 
#line 245
return wcstok(_String, _Delimiter, 0); 
#line 246
} 
#line 254 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" 
#line 253
__declspec(deprecated("wcstok has been changed to conform with the ISO C standard, adding an extra context parameter. To use the legacy Microsoft wcsto" "k, define _CRT_NON_CONFORMING_WCSTOK.")) inline __wchar_t *__cdecl 
#line 254
wcstok(__wchar_t *
#line 255
_String, const __wchar_t *
#line 256
_Delimiter) throw() 
#line 258
{ 
#line 259
return wcstok(_String, _Delimiter, 0); 
#line 260
} 
#line 263 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
#pragma warning(pop)
#line 271 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcserror(int _ErrorNumber); 
#line 276
__declspec(dllimport) errno_t __cdecl _wcserror_s(__wchar_t * _Buffer, size_t _SizeInWords, int _ErrorNumber); 
#line 282
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wcserror_s(__wchar_t (&_Buffer)[_Size], int _Error) throw() { return _wcserror_s(_Buffer, _Size, _Error); } }
#line 291 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl __wcserror(const __wchar_t * _String); 
#line 295
__declspec(dllimport) errno_t __cdecl __wcserror_s(__wchar_t * _Buffer, size_t _SizeInWords, const __wchar_t * _ErrorMessage); 
#line 301
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl __wcserror_s(__wchar_t (&_Buffer)[_Size], const __wchar_t *_ErrorMessage) throw() { return __wcserror_s(_Buffer, _Size, _ErrorMessage); } }
#line 307 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl _wcsicmp(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 312
__declspec(dllimport) int __cdecl _wcsicmp_l(const __wchar_t * _String1, const __wchar_t * _String2, _locale_t _Locale); 
#line 318
__declspec(dllimport) int __cdecl _wcsnicmp(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount); 
#line 324
__declspec(dllimport) int __cdecl _wcsnicmp_l(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 331
__declspec(dllimport) errno_t __cdecl _wcsnset_s(__wchar_t * _Destination, size_t _SizeInWords, __wchar_t _Value, size_t _MaxCount); 
#line 338
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wcsnset_s(__wchar_t (&_Destination)[_Size], __wchar_t _Value, ::size_t _MaxCount) throw() { return _wcsnset_s(_Destination, _Size, _Value, _MaxCount); } }
#line 345 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcsnset(__wchar_t * _String, __wchar_t _Value, size_t _MaxCount); 
#line 353 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcsrev(__wchar_t * _String); 
#line 357
__declspec(dllimport) errno_t __cdecl _wcsset_s(__wchar_t * _Destination, size_t _SizeInWords, __wchar_t _Value); 
#line 363
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wcsset_s(__wchar_t (&_String)[_Size], __wchar_t _Value) throw() { return _wcsset_s(_String, _Size, _Value); } }
#line 369 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcsset(__wchar_t * _String, __wchar_t _Value); 
#line 376 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl _wcslwr_s(__wchar_t * _String, size_t _SizeInWords); 
#line 381
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wcslwr_s(__wchar_t (&_String)[_Size]) throw() { return _wcslwr_s(_String, _Size); } }
#line 386 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcslwr(__wchar_t * _String); 
#line 392 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl _wcslwr_s_l(__wchar_t * _String, size_t _SizeInWords, _locale_t _Locale); 
#line 398
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wcslwr_s_l(__wchar_t (&_String)[_Size], ::_locale_t _Locale) throw() { return _wcslwr_s_l(_String, _Size, _Locale); } }
#line 404 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcslwr_l(__wchar_t * _String, _locale_t _Locale); 
#line 412 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl _wcsupr_s(__wchar_t * _String, size_t _Size); 
#line 417
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wcsupr_s(__wchar_t (&_String)[_Size]) throw() { return _wcsupr_s(_String, _Size); } }
#line 422 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcsupr(__wchar_t * _String); 
#line 428 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl _wcsupr_s_l(__wchar_t * _String, size_t _Size, _locale_t _Locale); 
#line 434
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wcsupr_s_l(__wchar_t (&_String)[_Size], ::_locale_t _Locale) throw() { return _wcsupr_s_l(_String, _Size, _Locale); } }
#line 440 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcsupr_l(__wchar_t * _String, _locale_t _Locale); 
#line 449 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) size_t __cdecl wcsxfrm(__wchar_t * _Destination, const __wchar_t * _Source, size_t _MaxCount); 
#line 457
__declspec(dllimport) size_t __cdecl _wcsxfrm_l(__wchar_t * _Destination, const __wchar_t * _Source, size_t _MaxCount, _locale_t _Locale); 
#line 465
__declspec(dllimport) int __cdecl wcscoll(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 471
__declspec(dllimport) int __cdecl _wcscoll_l(const __wchar_t * _String1, const __wchar_t * _String2, _locale_t _Locale); 
#line 478
__declspec(dllimport) int __cdecl _wcsicoll(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 484
__declspec(dllimport) int __cdecl _wcsicoll_l(const __wchar_t * _String1, const __wchar_t * _String2, _locale_t _Locale); 
#line 491
__declspec(dllimport) int __cdecl _wcsncoll(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount); 
#line 498
__declspec(dllimport) int __cdecl _wcsncoll_l(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 506
__declspec(dllimport) int __cdecl _wcsnicoll(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount); 
#line 513
__declspec(dllimport) int __cdecl _wcsnicoll_l(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 528
extern "C++" {
#line 532
inline __wchar_t *__cdecl wcschr(__wchar_t *_String, __wchar_t _C) 
#line 533
{ 
#line 534
return const_cast< __wchar_t *>(wcschr(static_cast< const __wchar_t *>(_String), _C)); 
#line 535
} 
#line 538
inline __wchar_t *__cdecl wcspbrk(__wchar_t *_String, const __wchar_t *_Control) 
#line 539
{ 
#line 540
return const_cast< __wchar_t *>(wcspbrk(static_cast< const __wchar_t *>(_String), _Control)); 
#line 541
} 
#line 544
inline __wchar_t *__cdecl wcsrchr(__wchar_t *_String, __wchar_t _C) 
#line 545
{ 
#line 546
return const_cast< __wchar_t *>(wcsrchr(static_cast< const __wchar_t *>(_String), _C)); 
#line 547
} 
#line 551
inline __wchar_t *__cdecl wcsstr(__wchar_t *_String, const __wchar_t *_SubStr) 
#line 552
{ 
#line 553
return const_cast< __wchar_t *>(wcsstr(static_cast< const __wchar_t *>(_String), _SubStr)); 
#line 554
} 
#line 556
}
#line 573 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcsdup(const __wchar_t * _String); 
#line 585 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl wcsicmp(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 591
__declspec(dllimport) int __cdecl wcsnicmp(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount); 
#line 599
__declspec(dllimport) __wchar_t *__cdecl wcsnset(__wchar_t * _String, __wchar_t _Value, size_t _MaxCount); 
#line 607
__declspec(dllimport) __wchar_t *__cdecl wcsrev(__wchar_t * _String); 
#line 613
__declspec(dllimport) __wchar_t *__cdecl wcsset(__wchar_t * _String, __wchar_t _Value); 
#line 620
__declspec(dllimport) __wchar_t *__cdecl wcslwr(__wchar_t * _String); 
#line 626
__declspec(dllimport) __wchar_t *__cdecl wcsupr(__wchar_t * _String); 
#line 631
__declspec(dllimport) int __cdecl wcsicoll(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 640 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
}__pragma( pack ( pop )) 
#line 18 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__pragma( pack ( push, 8 )) extern "C" {
#line 27
__declspec(dllimport) errno_t __cdecl strcpy_s(char * _Destination, rsize_t _SizeInBytes, const char * _Source); 
#line 34
__declspec(dllimport) errno_t __cdecl strcat_s(char * _Destination, rsize_t _SizeInBytes, const char * _Source); 
#line 41
__declspec(dllimport) errno_t __cdecl strerror_s(char * _Buffer, size_t _SizeInBytes, int _ErrorNumber); 
#line 47
__declspec(dllimport) errno_t __cdecl strncat_s(char * _Destination, rsize_t _SizeInBytes, const char * _Source, rsize_t _MaxCount); 
#line 55
__declspec(dllimport) errno_t __cdecl strncpy_s(char * _Destination, rsize_t _SizeInBytes, const char * _Source, rsize_t _MaxCount); 
#line 63
__declspec(dllimport) char *__cdecl strtok_s(char * _String, const char * _Delimiter, char ** _Context); 
#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) void *__cdecl _memccpy(void * _Dst, const void * _Src, int _Val, size_t _MaxCount); 
#line 78
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl strcat_s(char (&_Destination)[_Size], const char *_Source) throw() { return strcat_s(_Destination, _Size, _Source); } }
#line 86 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
char *__cdecl strcat(char * _Destination, const char * _Source); 
#line 95 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
int __cdecl strcmp(const char * _Str1, const char * _Str2); 
#line 101
__declspec(dllimport) int __cdecl _strcmpi(const char * _String1, const char * _String2); 
#line 107
__declspec(dllimport) int __cdecl strcoll(const char * _String1, const char * _String2); 
#line 113
__declspec(dllimport) int __cdecl _strcoll_l(const char * _String1, const char * _String2, _locale_t _Locale); 
#line 119
char *__cdecl strcpy(char * _Dest, const char * _Source); 
#line 124
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl strcpy_s(char (&_Destination)[_Size], const char *_Source) throw() { return strcpy_s(_Destination, _Size, _Source); } }
#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
char *__cdecl strcpy(char * _Destination, const char * _Source); 
#line 137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) size_t __cdecl strcspn(const char * _Str, const char * _Control); 
#line 148 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) __declspec(allocator) char *__cdecl _strdup(const char * _Source); 
#line 159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl _strerror(const char * _ErrorMessage); 
#line 164
__declspec(dllimport) errno_t __cdecl _strerror_s(char * _Buffer, size_t _SizeInBytes, const char * _ErrorMessage); 
#line 170
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _strerror_s(char (&_Buffer)[_Size], const char *_ErrorMessage) throw() { return _strerror_s(_Buffer, _Size, _ErrorMessage); } }
#line 178 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl strerror(int _ErrorMessage); 
#line 182
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl strerror_s(char (&_Buffer)[_Size], int _ErrorMessage) throw() { return strerror_s(_Buffer, _Size, _ErrorMessage); } }
#line 189 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl _stricmp(const char * _String1, const char * _String2); 
#line 195
__declspec(dllimport) int __cdecl _stricoll(const char * _String1, const char * _String2); 
#line 201
__declspec(dllimport) int __cdecl _stricoll_l(const char * _String1, const char * _String2, _locale_t _Locale); 
#line 208
__declspec(dllimport) int __cdecl _stricmp_l(const char * _String1, const char * _String2, _locale_t _Locale); 
#line 215
size_t __cdecl strlen(const char * _Str); 
#line 220
__declspec(dllimport) errno_t __cdecl _strlwr_s(char * _String, size_t _Size); 
#line 225
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _strlwr_s(char (&_String)[_Size]) throw() { return _strlwr_s(_String, _Size); } }
#line 230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl _strlwr(char * _String); 
#line 236 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) errno_t __cdecl _strlwr_s_l(char * _String, size_t _Size, _locale_t _Locale); 
#line 242
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _strlwr_s_l(char (&_String)[_Size], ::_locale_t _Locale) throw() { return _strlwr_s_l(_String, _Size, _Locale); } }
#line 248 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl _strlwr_l(char * _String, _locale_t _Locale); 
#line 255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl strncat(char * _Dest, const char * _Source, size_t _Count); 
#line 261
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl strncat_s(char (&_Destination)[_Size], const char *_Source, ::size_t _Count) throw() { return strncat_s(_Destination, _Size, _Source, _Count); } }
#line 268 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl strncat(char * _Destination, const char * _Source, size_t _Count); 
#line 277 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl strncmp(const char * _Str1, const char * _Str2, size_t _MaxCount); 
#line 284
__declspec(dllimport) int __cdecl _strnicmp(const char * _String1, const char * _String2, size_t _MaxCount); 
#line 291
__declspec(dllimport) int __cdecl _strnicmp_l(const char * _String1, const char * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 299
__declspec(dllimport) int __cdecl _strnicoll(const char * _String1, const char * _String2, size_t _MaxCount); 
#line 306
__declspec(dllimport) int __cdecl _strnicoll_l(const char * _String1, const char * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 314
__declspec(dllimport) int __cdecl _strncoll(const char * _String1, const char * _String2, size_t _MaxCount); 
#line 321
__declspec(dllimport) int __cdecl _strncoll_l(const char * _String1, const char * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 328
__declspec(dllimport) size_t __cdecl __strncnt(const char * _String, size_t _Count); 
#line 333
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl strncpy_s(char (&_Destination)[_Size], const char *_Source, ::size_t _Count) throw() { return strncpy_s(_Destination, _Size, _Source, _Count); } }
#line 340 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl strncpy(char * _Destination, const char * _Source, size_t _Count); 
#line 357 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) size_t __cdecl strnlen(const char * _String, size_t _MaxCount); 
#line 373 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
static __inline size_t __cdecl strnlen_s(const char *
#line 374
_String, size_t 
#line 375
_MaxCount) 
#line 377
{ 
#line 378
return (_String == (0)) ? 0 : strnlen(_String, _MaxCount); 
#line 379
} 
#line 383 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl _strnset(char * _Dest, int _Val, size_t _Count); 
#line 390
__declspec(dllimport) errno_t __cdecl _strnset_s(char * _String, size_t _SizeInBytes, int _Value, size_t _MaxCount); 
#line 397
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _strnset_s(char (&_Destination)[_Size], int _Value, ::size_t _Count) throw() { return _strnset_s(_Destination, _Size, _Value, _Count); } }
#line 404 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl _strnset(char * _Destination, int _Value, size_t _Count); 
#line 413 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) const char *__cdecl strpbrk(const char * _Str, const char * _Control); 
#line 418
__declspec(dllimport) char *__cdecl _strrev(char * _Str); 
#line 423
__declspec(dllimport) errno_t __cdecl _strset_s(char * _Destination, size_t _DestinationSize, int _Value); 
#line 429
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _strset_s(char (&_Destination)[_Size], int _Value) throw() { return _strset_s(_Destination, _Size, _Value); } }
#line 435 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
char *__cdecl _strset(char * _Destination, int _Value); 
#line 441 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
char *__cdecl _strset(char * _Dest, int _Value); 
#line 447
__declspec(dllimport) size_t __cdecl strspn(const char * _Str, const char * _Control); 
#line 453
__declspec(dllimport) char *__cdecl strtok(char * _String, const char * _Delimiter); 
#line 459
__declspec(dllimport) errno_t __cdecl _strupr_s(char * _String, size_t _Size); 
#line 464
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _strupr_s(char (&_String)[_Size]) throw() { return _strupr_s(_String, _Size); } }
#line 469 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl _strupr(char * _String); 
#line 475 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) errno_t __cdecl _strupr_s_l(char * _String, size_t _Size, _locale_t _Locale); 
#line 481
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _strupr_s_l(char (&_String)[_Size], ::_locale_t _Locale) throw() { return _strupr_s_l(_String, _Size, _Locale); } }
#line 487 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl _strupr_l(char * _String, _locale_t _Locale); 
#line 496 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) size_t __cdecl strxfrm(char * _Destination, const char * _Source, size_t _MaxCount); 
#line 504
__declspec(dllimport) size_t __cdecl _strxfrm_l(char * _Destination, const char * _Source, size_t _MaxCount, _locale_t _Locale); 
#line 514
extern "C++" {
#line 517
inline char *__cdecl strchr(char *const _String, const int _Ch) 
#line 518
{ 
#line 519
return const_cast< char *>(strchr(static_cast< const char *>(_String), _Ch)); 
#line 520
} 
#line 523
inline char *__cdecl strpbrk(char *const _String, const char *const _Control) 
#line 524
{ 
#line 525
return const_cast< char *>(strpbrk(static_cast< const char *>(_String), _Control)); 
#line 526
} 
#line 529
inline char *__cdecl strrchr(char *const _String, const int _Ch) 
#line 530
{ 
#line 531
return const_cast< char *>(strrchr(static_cast< const char *>(_String), _Ch)); 
#line 532
} 
#line 535
inline char *__cdecl strstr(char *const _String, const char *const _SubString) 
#line 536
{ 
#line 537
return const_cast< char *>(strstr(static_cast< const char *>(_String), _SubString)); 
#line 538
} 
#line 539
}
#line 552 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl strdup(const char * _String); 
#line 562 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl strcmpi(const char * _String1, const char * _String2); 
#line 568
__declspec(dllimport) int __cdecl stricmp(const char * _String1, const char * _String2); 
#line 574
__declspec(dllimport) char *__cdecl strlwr(char * _String); 
#line 579
__declspec(dllimport) int __cdecl strnicmp(const char * _String1, const char * _String2, size_t _MaxCount); 
#line 586
__declspec(dllimport) char *__cdecl strnset(char * _String, int _Value, size_t _MaxCount); 
#line 593
__declspec(dllimport) char *__cdecl strrev(char * _String); 
#line 598
char *__cdecl strset(char * _String, int _Value); 
#line 603
__declspec(dllimport) char *__cdecl strupr(char * _String); 
#line 611 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
}__pragma( pack ( pop )) 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__pragma( pack ( push, 8 )) extern "C" {
#line 22
struct tm { 
#line 24
int tm_sec; 
#line 25
int tm_min; 
#line 26
int tm_hour; 
#line 27
int tm_mday; 
#line 28
int tm_mon; 
#line 29
int tm_year; 
#line 30
int tm_wday; 
#line 31
int tm_yday; 
#line 32
int tm_isdst; 
#line 33
}; 
#line 44
__declspec(dllimport) __wchar_t *__cdecl _wasctime(const tm * _Tm); 
#line 50
__declspec(dllimport) errno_t __cdecl _wasctime_s(__wchar_t * _Buffer, size_t _SizeInWords, const tm * _Tm); 
#line 56
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wasctime_s(__wchar_t (&_Buffer)[_Size], const ::tm *_Time) throw() { return _wasctime_s(_Buffer, _Size, _Time); } }
#line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) size_t __cdecl wcsftime(__wchar_t * _Buffer, size_t _SizeInWords, const __wchar_t * _Format, const tm * _Tm); 
#line 74
__declspec(dllimport) size_t __cdecl _wcsftime_l(__wchar_t * _Buffer, size_t _SizeInWords, const __wchar_t * _Format, const tm * _Tm, _locale_t _Locale); 
#line 84
__declspec(dllimport) __wchar_t *__cdecl _wctime32(const __time32_t * _Time); 
#line 89
__declspec(dllimport) errno_t __cdecl _wctime32_s(__wchar_t * _Buffer, size_t _SizeInWords, const __time32_t * _Time); 
#line 95
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wctime32_s(__wchar_t (&_Buffer)[_Size], const ::__time32_t *_Time) throw() { return _wctime32_s(_Buffer, _Size, _Time); } }
#line 104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) __wchar_t *__cdecl _wctime64(const __time64_t * _Time); 
#line 109
__declspec(dllimport) errno_t __cdecl _wctime64_s(__wchar_t * _Buffer, size_t _SizeInWords, const __time64_t * _Time); 
#line 114
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wctime64_s(__wchar_t (&_Buffer)[_Size], const ::__time64_t *_Time) throw() { return _wctime64_s(_Buffer, _Size, _Time); } }
#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) errno_t __cdecl _wstrdate_s(__wchar_t * _Buffer, size_t _SizeInWords); 
#line 126
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wstrdate_s(__wchar_t (&_Buffer)[_Size]) throw() { return _wstrdate_s(_Buffer, _Size); } }
#line 131 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) __wchar_t *__cdecl _wstrdate(__wchar_t * _Buffer); 
#line 137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) errno_t __cdecl _wstrtime_s(__wchar_t * _Buffer, size_t _SizeInWords); 
#line 142
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wstrtime_s(__wchar_t (&_Buffer)[_Size]) throw() { return _wstrtime_s(_Buffer, _Size); } }
#line 147 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) __wchar_t *__cdecl _wstrtime(__wchar_t * _Buffer); 
#line 160 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
#pragma warning(push)
#pragma warning(disable: 4996)
#line 185
static __inline __wchar_t *__cdecl _wctime(const time_t *const 
#line 186
_Time) 
#line 187
{ 
#line 188
return _wctime64(_Time); 
#line 189
} 
#line 192
static __inline errno_t __cdecl _wctime_s(__wchar_t *const 
#line 193
_Buffer, const size_t 
#line 194
_SizeInWords, const time_t *const 
#line 195
_Time) 
#line 197
{ 
#line 198
return _wctime64_s(_Buffer, _SizeInWords, _Time); 
#line 199
} 
#line 208 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
}
#line 203 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
#pragma warning(pop)
#line 208 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__pragma( pack ( pop )) 
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__pragma( pack ( push, 8 )) extern "C" {
#line 23
typedef long clock_t; 
#line 25
struct _timespec32 { 
#line 27
__time32_t tv_sec; 
#line 28
long tv_nsec; 
#line 29
}; 
#line 31
struct _timespec64 { 
#line 33
__time64_t tv_sec; 
#line 34
long tv_nsec; 
#line 35
}; 
#line 38
struct timespec { 
#line 40
time_t tv_sec; 
#line 41
long tv_nsec; 
#line 42
}; 
#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) int *__cdecl __daylight(); 
#line 67
__declspec(dllimport) long *__cdecl __dstbias(); 
#line 73
__declspec(dllimport) long *__cdecl __timezone(); 
#line 79
__declspec(dllimport) char **__cdecl __tzname(); 
#line 84
__declspec(dllimport) errno_t __cdecl _get_daylight(int * _Daylight); 
#line 89
__declspec(dllimport) errno_t __cdecl _get_dstbias(long * _DaylightSavingsBias); 
#line 94
__declspec(dllimport) errno_t __cdecl _get_timezone(long * _TimeZone); 
#line 99
__declspec(dllimport) errno_t __cdecl _get_tzname(size_t * _ReturnValue, char * _Buffer, size_t _SizeInBytes, int _Index); 
#line 116
__declspec(dllimport) char *__cdecl asctime(const tm * _Tm); 
#line 123
__declspec(dllimport) errno_t __cdecl asctime_s(char * _Buffer, size_t _SizeInBytes, const tm * _Tm); 
#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl asctime_s(char (&_Buffer)[_Size], const ::tm *_Time) throw() { return asctime_s(_Buffer, _Size, _Time); } }
#line 137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) clock_t __cdecl clock(); 
#line 142
__declspec(dllimport) char *__cdecl _ctime32(const __time32_t * _Time); 
#line 147
__declspec(dllimport) errno_t __cdecl _ctime32_s(char * _Buffer, size_t _SizeInBytes, const __time32_t * _Time); 
#line 153
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _ctime32_s(char (&_Buffer)[_Size], const ::__time32_t *_Time) throw() { return _ctime32_s(_Buffer, _Size, _Time); } }
#line 162 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) char *__cdecl _ctime64(const __time64_t * _Time); 
#line 167
__declspec(dllimport) errno_t __cdecl _ctime64_s(char * _Buffer, size_t _SizeInBytes, const __time64_t * _Time); 
#line 173
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _ctime64_s(char (&_Buffer)[_Size], const ::__time64_t *_Time) throw() { return _ctime64_s(_Buffer, _Size, _Time); } }
#line 180 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) double __cdecl _difftime32(__time32_t _Time1, __time32_t _Time2); 
#line 186
__declspec(dllimport) double __cdecl _difftime64(__time64_t _Time1, __time64_t _Time2); 
#line 193
__declspec(dllimport) tm *__cdecl _gmtime32(const __time32_t * _Time); 
#line 198
__declspec(dllimport) errno_t __cdecl _gmtime32_s(tm * _Tm, const __time32_t * _Time); 
#line 205
__declspec(dllimport) tm *__cdecl _gmtime64(const __time64_t * _Time); 
#line 210
__declspec(dllimport) errno_t __cdecl _gmtime64_s(tm * _Tm, const __time64_t * _Time); 
#line 217
__declspec(dllimport) tm *__cdecl _localtime32(const __time32_t * _Time); 
#line 222
__declspec(dllimport) errno_t __cdecl _localtime32_s(tm * _Tm, const __time32_t * _Time); 
#line 229
__declspec(dllimport) tm *__cdecl _localtime64(const __time64_t * _Time); 
#line 234
__declspec(dllimport) errno_t __cdecl _localtime64_s(tm * _Tm, const __time64_t * _Time); 
#line 240
__declspec(dllimport) __time32_t __cdecl _mkgmtime32(tm * _Tm); 
#line 245
__declspec(dllimport) __time64_t __cdecl _mkgmtime64(tm * _Tm); 
#line 250
__declspec(dllimport) __time32_t __cdecl _mktime32(tm * _Tm); 
#line 255
__declspec(dllimport) __time64_t __cdecl _mktime64(tm * _Tm); 
#line 261
__declspec(dllimport) size_t __cdecl strftime(char * _Buffer, size_t _SizeInBytes, const char * _Format, const tm * _Tm); 
#line 270
__declspec(dllimport) size_t __cdecl _strftime_l(char * _Buffer, size_t _MaxSize, const char * _Format, const tm * _Tm, _locale_t _Locale); 
#line 279
__declspec(dllimport) errno_t __cdecl _strdate_s(char * _Buffer, size_t _SizeInBytes); 
#line 284
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _strdate_s(char (&_Buffer)[_Size]) throw() { return _strdate_s(_Buffer, _Size); } }
#line 289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) char *__cdecl _strdate(char * _Buffer); 
#line 295 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) errno_t __cdecl _strtime_s(char * _Buffer, size_t _SizeInBytes); 
#line 300
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _strtime_s(char (&_Buffer)[_Size]) throw() { return _strtime_s(_Buffer, _Size); } }
#line 305 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) char *__cdecl _strtime(char * _Buffer); 
#line 310 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) __time32_t __cdecl _time32(__time32_t * _Time); 
#line 314
__declspec(dllimport) __time64_t __cdecl _time64(__time64_t * _Time); 
#line 320
__declspec(dllimport) int __cdecl _timespec32_get(_timespec32 * _Ts, int _Base); 
#line 327
__declspec(dllimport) int __cdecl _timespec64_get(_timespec64 * _Ts, int _Base); 
#line 341
__declspec(dllimport) void __cdecl _tzset(); 
#line 344
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using GetLocalTime in" "stead. See online help for details.")) 
#line 345
__declspec(dllimport) unsigned __cdecl _getsystime(tm * _Tm); 
#line 349
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using SetLocalTime in" "stead. See online help for details.")) 
#line 350
__declspec(dllimport) unsigned __cdecl _setsystime(tm * _Tm, unsigned _Milliseconds); 
#line 475 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
static __inline char *__cdecl ctime(const time_t *const 
#line 476
_Time) 
#line 478
{ 
#pragma warning(push)
#pragma warning(disable: 4996)
return _ctime64(_Time); 
#pragma warning(pop)
} 
#line 486
static __inline double __cdecl difftime(const time_t 
#line 487
_Time1, const time_t 
#line 488
_Time2) 
#line 490
{ 
#line 491
return _difftime64(_Time1, _Time2); 
#line 492
} 
#line 495
static __inline tm *__cdecl gmtime(const time_t *const 
#line 496
_Time) 
#line 497
{ 
#pragma warning(push)
#pragma warning(disable: 4996)
return _gmtime64(_Time); 
#pragma warning(pop)
} 
#line 505
static __inline tm *__cdecl localtime(const time_t *const 
#line 506
_Time) 
#line 508
{ 
#pragma warning(push)
#pragma warning(disable: 4996)
return _localtime64(_Time); 
#pragma warning(pop)
} 
#line 516
static __inline time_t __cdecl _mkgmtime(tm *const 
#line 517
_Tm) 
#line 519
{ 
#line 520
return _mkgmtime64(_Tm); 
#line 521
} 
#line 524
static __inline time_t __cdecl mktime(tm *const 
#line 525
_Tm) 
#line 527
{ 
#line 528
return _mktime64(_Tm); 
#line 529
} 
#line 531
static __inline time_t __cdecl time(time_t *const 
#line 532
_Time) 
#line 534
{ 
#line 535
return _time64(_Time); 
#line 536
} 
#line 539
static __inline int __cdecl timespec_get(timespec *const 
#line 540
_Ts, const int 
#line 541
_Base) 
#line 543
{ 
#line 544
return _timespec64_get((_timespec64 *)_Ts, _Base); 
#line 545
} 
#line 549
static __inline errno_t __cdecl ctime_s(char *const 
#line 550
_Buffer, const size_t 
#line 551
_SizeInBytes, const time_t *const 
#line 552
_Time) 
#line 554
{ 
#line 555
return _ctime64_s(_Buffer, _SizeInBytes, _Time); 
#line 556
} 
#line 559
static __inline errno_t __cdecl gmtime_s(tm *const 
#line 560
_Tm, const time_t *const 
#line 561
_Time) 
#line 563
{ 
#line 564
return _gmtime64_s(_Tm, _Time); 
#line 565
} 
#line 568
static __inline errno_t __cdecl localtime_s(tm *const 
#line 569
_Tm, const time_t *const 
#line 570
_Time) 
#line 572
{ 
#line 573
return _localtime64_s(_Tm, _Time); 
#line 574
} 
#line 593 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) void __cdecl tzset(); 
#line 600 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
}__pragma( pack ( pop )) 
#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"
extern "C" {
#line 71 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"
__declspec(dllimport) extern clock_t __cdecl clock(); 
#line 72
extern void *__cdecl memset(void *, int, size_t); 
#line 73
extern void *__cdecl memcpy(void *, const void *, size_t); 
#line 75
}
#line 93 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern "C" {
#line 164 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern int __cdecl abs(int); 
#line 165
extern long __cdecl labs(long); 
#line 166
extern __int64 llabs(__int64); 
#line 216 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl fabs(double x); 
#line 257
extern __inline float fabsf(float x); 
#line 261
extern inline int min(int, int); 
#line 263
extern inline unsigned umin(unsigned, unsigned); 
#line 264
extern inline __int64 llmin(__int64, __int64); 
#line 265
extern inline unsigned __int64 ullmin(unsigned __int64, unsigned __int64); 
#line 288 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl fminf(float x, float y); 
#line 308 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl fmin(double x, double y); 
#line 313 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline int max(int, int); 
#line 315
extern inline unsigned umax(unsigned, unsigned); 
#line 316
extern inline __int64 llmax(__int64, __int64); 
#line 317
extern inline unsigned __int64 ullmax(unsigned __int64, unsigned __int64); 
#line 340 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl fmaxf(float x, float y); 
#line 360 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl fmax(double, double); 
#line 402 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl sin(double x); 
#line 435
extern double __cdecl cos(double x); 
#line 454
extern void sincos(double x, double * sptr, double * cptr); 
#line 470
extern void sincosf(float x, float * sptr, float * cptr); 
#line 515
extern double __cdecl tan(double x); 
#line 584
extern double __cdecl sqrt(double x); 
#line 656
extern double rsqrt(double x); 
#line 726
extern float rsqrtf(float x); 
#line 784 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl log2(double x); 
#line 809 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl exp2(double x); 
#line 834 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl exp2f(float x); 
#line 859 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double exp10(double x); 
#line 882
extern float exp10f(float x); 
#line 930 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl expm1(double x); 
#line 975 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl expm1f(float x); 
#line 1030 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl log2f(float x); 
#line 1082 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl log10(double x); 
#line 1153
extern double __cdecl log(double x); 
#line 1249 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl log1p(double x); 
#line 1346 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl log1pf(float x); 
#line 1419 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl floor(double x); 
#line 1458
extern double __cdecl exp(double x); 
#line 1489
extern double __cdecl cosh(double x); 
#line 1519
extern double __cdecl sinh(double x); 
#line 1549
extern double __cdecl tanh(double x); 
#line 1586 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl acosh(double x); 
#line 1624 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl acoshf(float x); 
#line 1640 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl asinh(double x); 
#line 1656 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl asinhf(float x); 
#line 1710 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl atanh(double x); 
#line 1764 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl atanhf(float x); 
#line 1821 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl ldexp(double x, int exp); 
#line 1877
extern __inline float ldexpf(float x, int exp); 
#line 1931 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl logb(double x); 
#line 1986 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl logbf(float x); 
#line 2016 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern int __cdecl ilogb(double x); 
#line 2046 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern int __cdecl ilogbf(float x); 
#line 2122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl scalbn(double x, int n); 
#line 2198 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl scalbnf(float x, int n); 
#line 2274 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl scalbln(double x, long n); 
#line 2350 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl scalblnf(float x, long n); 
#line 2426 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl frexp(double x, int * nptr); 
#line 2501
extern __inline float frexpf(float x, int * nptr); 
#line 2517 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl round(double x); 
#line 2534 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl roundf(float x); 
#line 2552 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern long __cdecl lround(double x); 
#line 2570 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern long __cdecl lroundf(float x); 
#line 2588 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern __int64 __cdecl llround(double x); 
#line 2606 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern __int64 __cdecl llroundf(float x); 
#line 2658 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl rintf(float x); 
#line 2674 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern long __cdecl lrint(double x); 
#line 2690 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern long __cdecl lrintf(float x); 
#line 2706 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern __int64 __cdecl llrint(double x); 
#line 2722 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern __int64 __cdecl llrintf(float x); 
#line 2775 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl nearbyint(double x); 
#line 2828 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl nearbyintf(float x); 
#line 2888 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl ceil(double x); 
#line 2902 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl trunc(double x); 
#line 2917 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl truncf(float x); 
#line 2943 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl fdim(double x, double y); 
#line 2969 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl fdimf(float x, float y); 
#line 3003 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl atan2(double y, double x); 
#line 3034
extern double __cdecl atan(double x); 
#line 3057
extern double __cdecl acos(double x); 
#line 3089
extern double __cdecl asin(double x); 
#line 3132 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl hypot(double x, double y); 
#line 3187 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double rhypot(double x, double y); 
#line 3231
static __inline float __cdecl hypotf(float x, float y); 
#line 3285 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float rhypotf(float x, float y); 
#line 3332
__declspec(dllimport) extern double __cdecl norm3d(double a, double b, double c); 
#line 3383
extern double rnorm3d(double a, double b, double c); 
#line 3432
__declspec(dllimport) extern double __cdecl norm4d(double a, double b, double c, double d); 
#line 3488
extern double rnorm4d(double a, double b, double c, double d); 
#line 3533
extern double norm(int dim, const double * t); 
#line 3584
extern double rnorm(int dim, const double * t); 
#line 3636
extern float rnormf(int dim, const float * a); 
#line 3680
extern float normf(int dim, const float * a); 
#line 3725
extern float norm3df(float a, float b, float c); 
#line 3776
extern float rnorm3df(float a, float b, float c); 
#line 3825
extern float norm4df(float a, float b, float c, float d); 
#line 3881
extern float rnorm4df(float a, float b, float c, float d); 
#line 3967 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl cbrt(double x); 
#line 4053 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl cbrtf(float x); 
#line 4106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double rcbrt(double x); 
#line 4156
extern float rcbrtf(float x); 
#line 4216
extern double sinpi(double x); 
#line 4276
extern float sinpif(float x); 
#line 4328
extern double cospi(double x); 
#line 4380
extern float cospif(float x); 
#line 4410
extern void sincospi(double x, double * sptr, double * cptr); 
#line 4440
extern void sincospif(float x, float * sptr, float * cptr); 
#line 4752
extern double __cdecl pow(double x, double y); 
#line 4808
__declspec(dllimport) extern double __cdecl modf(double x, double * iptr); 
#line 4867
extern double __cdecl fmod(double x, double y); 
#line 4955 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl remainder(double x, double y); 
#line 5045 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl remainderf(float x, float y); 
#line 5099 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl remquo(double x, double y, int * quo); 
#line 5153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl remquof(float x, float y, int * quo); 
#line 5192 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl j0(double x); 
#line 5234
extern float j0f(float x); 
#line 5295
__declspec(dllimport) extern double __cdecl j1(double x); 
#line 5356
extern float j1f(float x); 
#line 5399
__declspec(dllimport) extern double __cdecl jn(int n, double x); 
#line 5442
extern float jnf(int n, float x); 
#line 5494
__declspec(dllimport) extern double __cdecl y0(double x); 
#line 5546
extern float y0f(float x); 
#line 5598
__declspec(dllimport) extern double __cdecl y1(double x); 
#line 5650
extern float y1f(float x); 
#line 5703
__declspec(dllimport) extern double __cdecl yn(int n, double x); 
#line 5756
extern float ynf(int n, float x); 
#line 5783
__declspec(dllimport) extern double __cdecl cyl_bessel_i0(double x); 
#line 5809
extern float cyl_bessel_i0f(float x); 
#line 5836
__declspec(dllimport) extern double __cdecl cyl_bessel_i1(double x); 
#line 5862
extern float cyl_bessel_i1f(float x); 
#line 5947 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl erf(double x); 
#line 6029 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl erff(float x); 
#line 6091 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double erfinv(double y); 
#line 6148
extern float erfinvf(float y); 
#line 6189 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl erfc(double x); 
#line 6227 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl erfcf(float x); 
#line 6355 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl lgamma(double x); 
#line 6416 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double erfcinv(double y); 
#line 6472
extern float erfcinvf(float y); 
#line 6530
extern double normcdfinv(double y); 
#line 6588
extern float normcdfinvf(float y); 
#line 6631
extern double normcdf(double y); 
#line 6674
extern float normcdff(float y); 
#line 6749
extern double erfcx(double x); 
#line 6824
extern float erfcxf(float x); 
#line 6960 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl lgammaf(float x); 
#line 7069 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl tgamma(double x); 
#line 7178 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl tgammaf(float x); 
#line 7191 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl copysign(double x, double y); 
#line 7204 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl copysignf(float x, float y); 
#line 7241 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl nextafter(double x, double y); 
#line 7278 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl nextafterf(float x, float y); 
#line 7294 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl nan(const char * tagp); 
#line 7310 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl nanf(const char * tagp); 
#line 7315 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern int __isinff(float); 
#line 7316
extern int __isnanf(float); 
#line 7326 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern int __finite(double); 
#line 7327
extern int __finitef(float); 
#line 7328
extern int __signbit(double); 
#line 7329
extern int __isnan(double); 
#line 7330
extern int __isinf(double); 
#line 7333 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern int __signbitf(float); 
#line 7494 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl fma(double x, double y, double z); 
#line 7652 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl fmaf(float x, float y, float z); 
#line 7661 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern int __signbitl(long double); 
#line 7667 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern int __finitel(long double); 
#line 7668
extern int __isinfl(long double); 
#line 7669
extern int __isnanl(long double); 
#line 7673 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl acosf(float); 
#line 7674
__declspec(dllimport) extern float __cdecl asinf(float); 
#line 7675
__declspec(dllimport) extern float __cdecl atanf(float); 
#line 7676
__declspec(dllimport) extern float __cdecl atan2f(float, float); 
#line 7677
__declspec(dllimport) extern float __cdecl cosf(float); 
#line 7678
__declspec(dllimport) extern float __cdecl sinf(float); 
#line 7679
__declspec(dllimport) extern float __cdecl tanf(float); 
#line 7680
__declspec(dllimport) extern float __cdecl coshf(float); 
#line 7681
__declspec(dllimport) extern float __cdecl sinhf(float); 
#line 7682
__declspec(dllimport) extern float __cdecl tanhf(float); 
#line 7683
__declspec(dllimport) extern float __cdecl expf(float); 
#line 7684
__declspec(dllimport) extern float __cdecl logf(float); 
#line 7685
__declspec(dllimport) extern float __cdecl log10f(float); 
#line 7686
__declspec(dllimport) extern float __cdecl modff(float, float *); 
#line 7687
__declspec(dllimport) extern float __cdecl powf(float, float); 
#line 7688
__declspec(dllimport) extern float __cdecl sqrtf(float); 
#line 7689
__declspec(dllimport) extern float __cdecl ceilf(float); 
#line 7690
__declspec(dllimport) extern float __cdecl floorf(float); 
#line 7691
__declspec(dllimport) extern float __cdecl fmodf(float, float); 
#line 8823 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
}
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__pragma( pack ( push, 8 )) extern "C" {
#line 17
#pragma warning(push)
#pragma warning(disable:4738)
#pragma warning(disable:4820)
#line 26 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
struct _exception { 
#line 28
int type; 
#line 29
char *name; 
#line 30
double arg1; 
#line 31
double arg2; 
#line 32
double retval; 
#line 33
}; 
#line 40
struct _complex { 
#line 42
double x, y; 
#line 43
}; 
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef float float_t; 
#line 53
typedef double double_t; 
#line 68
extern const double _HUGE; 
#line 159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
void __cdecl _fperrraise(int _Except); 
#line 161
__declspec(dllimport) short __cdecl _dclass(double _X); 
#line 162
__declspec(dllimport) short __cdecl _ldclass(long double _X); 
#line 163
__declspec(dllimport) short __cdecl _fdclass(float _X); 
#line 165
__declspec(dllimport) int __cdecl _dsign(double _X); 
#line 166
__declspec(dllimport) int __cdecl _ldsign(long double _X); 
#line 167
__declspec(dllimport) int __cdecl _fdsign(float _X); 
#line 169
__declspec(dllimport) int __cdecl _dpcomp(double _X, double _Y); 
#line 170
__declspec(dllimport) int __cdecl _ldpcomp(long double _X, long double _Y); 
#line 171
__declspec(dllimport) int __cdecl _fdpcomp(float _X, float _Y); 
#line 173
__declspec(dllimport) short __cdecl _dtest(double * _Px); 
#line 174
__declspec(dllimport) short __cdecl _ldtest(long double * _Px); 
#line 175
__declspec(dllimport) short __cdecl _fdtest(float * _Px); 
#line 177
__declspec(dllimport) short __cdecl _d_int(double * _Px, short _Xexp); 
#line 178
__declspec(dllimport) short __cdecl _ld_int(long double * _Px, short _Xexp); 
#line 179
__declspec(dllimport) short __cdecl _fd_int(float * _Px, short _Xexp); 
#line 181
__declspec(dllimport) short __cdecl _dscale(double * _Px, long _Lexp); 
#line 182
__declspec(dllimport) short __cdecl _ldscale(long double * _Px, long _Lexp); 
#line 183
__declspec(dllimport) short __cdecl _fdscale(float * _Px, long _Lexp); 
#line 185
__declspec(dllimport) short __cdecl _dunscale(short * _Pex, double * _Px); 
#line 186
__declspec(dllimport) short __cdecl _ldunscale(short * _Pex, long double * _Px); 
#line 187
__declspec(dllimport) short __cdecl _fdunscale(short * _Pex, float * _Px); 
#line 189
__declspec(dllimport) short __cdecl _dexp(double * _Px, double _Y, long _Eoff); 
#line 190
__declspec(dllimport) short __cdecl _ldexp(long double * _Px, long double _Y, long _Eoff); 
#line 191
__declspec(dllimport) short __cdecl _fdexp(float * _Px, float _Y, long _Eoff); 
#line 193
__declspec(dllimport) short __cdecl _dnorm(unsigned short * _Ps); 
#line 194
__declspec(dllimport) short __cdecl _fdnorm(unsigned short * _Ps); 
#line 196
__declspec(dllimport) double __cdecl _dpoly(double _X, const double * _Tab, int _N); 
#line 197
__declspec(dllimport) long double __cdecl _ldpoly(long double _X, const long double * _Tab, int _N); 
#line 198
__declspec(dllimport) float __cdecl _fdpoly(float _X, const float * _Tab, int _N); 
#line 200
__declspec(dllimport) double __cdecl _dlog(double _X, int _Baseflag); 
#line 201
__declspec(dllimport) long double __cdecl _ldlog(long double _X, int _Baseflag); 
#line 202
__declspec(dllimport) float __cdecl _fdlog(float _X, int _Baseflag); 
#line 204
__declspec(dllimport) double __cdecl _dsin(double _X, unsigned _Qoff); 
#line 205
__declspec(dllimport) long double __cdecl _ldsin(long double _X, unsigned _Qoff); 
#line 206
__declspec(dllimport) float __cdecl _fdsin(float _X, unsigned _Qoff); 
#line 213
typedef 
#line 210
union { 
#line 211
unsigned short _Sh[4]; 
#line 212
double _Val; 
#line 213
} _double_val; 
#line 220
typedef 
#line 217
union { 
#line 218
unsigned short _Sh[2]; 
#line 219
float _Val; 
#line 220
} _float_val; 
#line 227
typedef 
#line 224
union { 
#line 225
unsigned short _Sh[4]; 
#line 226
long double _Val; 
#line 227
} _ldouble_val; 
#line 235
typedef 
#line 230
union { 
#line 231
unsigned short _Word[4]; 
#line 232
float _Float; 
#line 233
double _Double; 
#line 234
long double _Long_double; 
#line 235
} _float_const; 
#line 237
extern const _float_const _Denorm_C, _Inf_C, _Nan_C, _Snan_C, _Hugeval_C; 
#line 238
extern const _float_const _FDenorm_C, _FInf_C, _FNan_C, _FSnan_C; 
#line 239
extern const _float_const _LDenorm_C, _LInf_C, _LNan_C, _LSnan_C; 
#line 241
extern const _float_const _Eps_C, _Rteps_C; 
#line 242
extern const _float_const _FEps_C, _FRteps_C; 
#line 243
extern const _float_const _LEps_C, _LRteps_C; 
#line 245
extern const double _Zero_C, _Xbig_C; 
#line 246
extern const float _FZero_C, _FXbig_C; 
#line 247
extern const long double _LZero_C, _LXbig_C; 
#line 276
extern "C++" {
#line 278
inline int fpclassify(float _X) throw() 
#line 279
{ 
#line 280
return _fdtest(&_X); 
#line 281
} 
#line 283
inline int fpclassify(double _X) throw() 
#line 284
{ 
#line 285
return _dtest(&_X); 
#line 286
} 
#line 288
inline int fpclassify(long double _X) throw() 
#line 289
{ 
#line 290
return _ldtest(&_X); 
#line 291
} 
#line 293
inline bool signbit(float _X) throw() 
#line 294
{ 
#line 295
return _fdsign(_X) != 0; 
#line 296
} 
#line 298
inline bool signbit(double _X) throw() 
#line 299
{ 
#line 300
return _dsign(_X) != 0; 
#line 301
} 
#line 303
inline bool signbit(long double _X) throw() 
#line 304
{ 
#line 305
return _ldsign(_X) != 0; 
#line 306
} 
#line 308
inline int _fpcomp(float _X, float _Y) throw() 
#line 309
{ 
#line 310
return _fdpcomp(_X, _Y); 
#line 311
} 
#line 313
inline int _fpcomp(double _X, double _Y) throw() 
#line 314
{ 
#line 315
return _dpcomp(_X, _Y); 
#line 316
} 
#line 318
inline int _fpcomp(long double _X, long double _Y) throw() 
#line 319
{ 
#line 320
return _ldpcomp(_X, _Y); 
#line 321
} 
#line 323
template< class _Trc, class _Tre> struct _Combined_type { 
#line 325
typedef float _Type; 
#line 326
}; 
#line 328
template<> struct _Combined_type< float, double>  { 
#line 330
typedef double _Type; 
#line 331
}; 
#line 333
template<> struct _Combined_type< float, long double>  { 
#line 335
typedef long double _Type; 
#line 336
}; 
#line 338
template< class _Ty, class _T2> struct _Real_widened { 
#line 340
typedef long double _Type; 
#line 341
}; 
#line 343
template<> struct _Real_widened< float, float>  { 
#line 345
typedef float _Type; 
#line 346
}; 
#line 348
template<> struct _Real_widened< float, double>  { 
#line 350
typedef double _Type; 
#line 351
}; 
#line 353
template<> struct _Real_widened< double, float>  { 
#line 355
typedef double _Type; 
#line 356
}; 
#line 358
template<> struct _Real_widened< double, double>  { 
#line 360
typedef double _Type; 
#line 361
}; 
#line 363
template< class _Ty> struct _Real_type { 
#line 365
typedef double _Type; 
#line 366
}; 
#line 368
template<> struct _Real_type< float>  { 
#line 370
typedef float _Type; 
#line 371
}; 
#line 373
template<> struct _Real_type< long double>  { 
#line 375
typedef long double _Type; 
#line 376
}; 
#line 378
template< class _T1, class _T2> inline int 
#line 379
_fpcomp(_T1 _X, _T2 _Y) throw() 
#line 380
{ 
#line 384
typedef typename _Combined_type< float, typename _Real_widened< typename _Real_type< _T1> ::_Type, typename _Real_type< _T2> ::_Type> ::_Type> ::_Type _Tw; 
#line 385
return _fpcomp((_Tw)_X, (_Tw)_Y); 
#line 386
} 
#line 388
template< class _Ty> inline bool 
#line 389
isfinite(_Ty _X) throw() 
#line 390
{ 
#line 391
return fpclassify(_X) <= 0; 
#line 392
} 
#line 394
template< class _Ty> inline bool 
#line 395
isinf(_Ty _X) throw() 
#line 396
{ 
#line 397
return fpclassify(_X) == 1; 
#line 398
} 
#line 400
template< class _Ty> inline bool 
#line 401
isnan(_Ty _X) throw() 
#line 402
{ 
#line 403
return fpclassify(_X) == 2; 
#line 404
} 
#line 406
template< class _Ty> inline bool 
#line 407
isnormal(_Ty _X) throw() 
#line 408
{ 
#line 409
return fpclassify(_X) == (-1); 
#line 410
} 
#line 412
template< class _Ty1, class _Ty2> inline bool 
#line 413
isgreater(_Ty1 _X, _Ty2 _Y) throw() 
#line 414
{ 
#line 415
return (_fpcomp(_X, _Y) & 4) != 0; 
#line 416
} 
#line 418
template< class _Ty1, class _Ty2> inline bool 
#line 419
isgreaterequal(_Ty1 _X, _Ty2 _Y) throw() 
#line 420
{ 
#line 421
return (_fpcomp(_X, _Y) & (2 | 4)) != 0; 
#line 422
} 
#line 424
template< class _Ty1, class _Ty2> inline bool 
#line 425
isless(_Ty1 _X, _Ty2 _Y) throw() 
#line 426
{ 
#line 427
return (_fpcomp(_X, _Y) & 1) != 0; 
#line 428
} 
#line 430
template< class _Ty1, class _Ty2> inline bool 
#line 431
islessequal(_Ty1 _X, _Ty2 _Y) throw() 
#line 432
{ 
#line 433
return (_fpcomp(_X, _Y) & (1 | 2)) != 0; 
#line 434
} 
#line 436
template< class _Ty1, class _Ty2> inline bool 
#line 437
islessgreater(_Ty1 _X, _Ty2 _Y) throw() 
#line 438
{ 
#line 439
return (_fpcomp(_X, _Y) & (1 | 4)) != 0; 
#line 440
} 
#line 442
template< class _Ty1, class _Ty2> inline bool 
#line 443
isunordered(_Ty1 _X, _Ty2 _Y) throw() 
#line 444
{ 
#line 445
return _fpcomp(_X, _Y) == 0; 
#line 446
} 
#line 447
}
#line 454 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
int __cdecl abs(int _X); 
#line 455
long __cdecl labs(long _X); 
#line 456
__int64 __cdecl llabs(__int64 _X); 
#line 458
double __cdecl acos(double _X); 
#line 459
double __cdecl asin(double _X); 
#line 460
double __cdecl atan(double _X); 
#line 461
double __cdecl atan2(double _Y, double _X); 
#line 463
double __cdecl cos(double _X); 
#line 464
double __cdecl cosh(double _X); 
#line 465
double __cdecl exp(double _X); 
#line 466
double __cdecl fabs(double _X); 
#line 467
double __cdecl fmod(double _X, double _Y); 
#line 468
double __cdecl log(double _X); 
#line 469
double __cdecl log10(double _X); 
#line 470
double __cdecl pow(double _X, double _Y); 
#line 471
double __cdecl sin(double _X); 
#line 472
double __cdecl sinh(double _X); 
#line 473
double __cdecl sqrt(double _X); 
#line 474
double __cdecl tan(double _X); 
#line 475
double __cdecl tanh(double _X); 
#line 477
__declspec(dllimport) double __cdecl acosh(double _X); 
#line 478
__declspec(dllimport) double __cdecl asinh(double _X); 
#line 479
__declspec(dllimport) double __cdecl atanh(double _X); 
#line 480
__declspec(dllimport) double __cdecl atof(const char * _String); 
#line 481
__declspec(dllimport) double __cdecl _atof_l(const char * _String, _locale_t _Locale); 
#line 482
__declspec(dllimport) double __cdecl _cabs(_complex _Complex_value); 
#line 483
__declspec(dllimport) double __cdecl cbrt(double _X); 
#line 484
__declspec(dllimport) double __cdecl ceil(double _X); 
#line 485
__declspec(dllimport) double __cdecl _chgsign(double _X); 
#line 486
__declspec(dllimport) double __cdecl copysign(double _Number, double _Sign); 
#line 487
__declspec(dllimport) double __cdecl _copysign(double _Number, double _Sign); 
#line 488
__declspec(dllimport) double __cdecl erf(double _X); 
#line 489
__declspec(dllimport) double __cdecl erfc(double _X); 
#line 490
__declspec(dllimport) double __cdecl exp2(double _X); 
#line 491
__declspec(dllimport) double __cdecl expm1(double _X); 
#line 492
__declspec(dllimport) double __cdecl fdim(double _X, double _Y); 
#line 493
__declspec(dllimport) double __cdecl floor(double _X); 
#line 494
__declspec(dllimport) double __cdecl fma(double _X, double _Y, double _Z); 
#line 495
__declspec(dllimport) double __cdecl fmax(double _X, double _Y); 
#line 496
__declspec(dllimport) double __cdecl fmin(double _X, double _Y); 
#line 497
__declspec(dllimport) double __cdecl frexp(double _X, int * _Y); 
#line 498
__declspec(dllimport) double __cdecl hypot(double _X, double _Y); 
#line 499
__declspec(dllimport) double __cdecl _hypot(double _X, double _Y); 
#line 500
__declspec(dllimport) int __cdecl ilogb(double _X); 
#line 501
__declspec(dllimport) double __cdecl ldexp(double _X, int _Y); 
#line 502
__declspec(dllimport) double __cdecl lgamma(double _X); 
#line 503
__declspec(dllimport) __int64 __cdecl llrint(double _X); 
#line 504
__declspec(dllimport) __int64 __cdecl llround(double _X); 
#line 505
__declspec(dllimport) double __cdecl log1p(double _X); 
#line 506
__declspec(dllimport) double __cdecl log2(double _X); 
#line 507
__declspec(dllimport) double __cdecl logb(double _X); 
#line 508
__declspec(dllimport) long __cdecl lrint(double _X); 
#line 509
__declspec(dllimport) long __cdecl lround(double _X); 
#line 511
int __cdecl _matherr(_exception * _Except); 
#line 513
__declspec(dllimport) double __cdecl modf(double _X, double * _Y); 
#line 514
__declspec(dllimport) double __cdecl nan(const char *); 
#line 515
__declspec(dllimport) double __cdecl nearbyint(double _X); 
#line 516
__declspec(dllimport) double __cdecl nextafter(double _X, double _Y); 
#line 517
__declspec(dllimport) double __cdecl nexttoward(double _X, long double _Y); 
#line 518
__declspec(dllimport) double __cdecl remainder(double _X, double _Y); 
#line 519
__declspec(dllimport) double __cdecl remquo(double _X, double _Y, int * _Z); 
#line 520
__declspec(dllimport) double __cdecl rint(double _X); 
#line 521
__declspec(dllimport) double __cdecl round(double _X); 
#line 522
__declspec(dllimport) double __cdecl scalbln(double _X, long _Y); 
#line 523
__declspec(dllimport) double __cdecl scalbn(double _X, int _Y); 
#line 524
__declspec(dllimport) double __cdecl tgamma(double _X); 
#line 525
__declspec(dllimport) double __cdecl trunc(double _X); 
#line 526
__declspec(dllimport) double __cdecl _j0(double _X); 
#line 527
__declspec(dllimport) double __cdecl _j1(double _X); 
#line 528
__declspec(dllimport) double __cdecl _jn(int _X, double _Y); 
#line 529
__declspec(dllimport) double __cdecl _y0(double _X); 
#line 530
__declspec(dllimport) double __cdecl _y1(double _X); 
#line 531
__declspec(dllimport) double __cdecl _yn(int _X, double _Y); 
#line 533
__declspec(dllimport) float __cdecl acoshf(float _X); 
#line 534
__declspec(dllimport) float __cdecl asinhf(float _X); 
#line 535
__declspec(dllimport) float __cdecl atanhf(float _X); 
#line 536
__declspec(dllimport) float __cdecl cbrtf(float _X); 
#line 537
__declspec(dllimport) float __cdecl _chgsignf(float _X); 
#line 538
__declspec(dllimport) float __cdecl copysignf(float _Number, float _Sign); 
#line 539
__declspec(dllimport) float __cdecl _copysignf(float _Number, float _Sign); 
#line 540
__declspec(dllimport) float __cdecl erff(float _X); 
#line 541
__declspec(dllimport) float __cdecl erfcf(float _X); 
#line 542
__declspec(dllimport) float __cdecl expm1f(float _X); 
#line 543
__declspec(dllimport) float __cdecl exp2f(float _X); 
#line 544
__declspec(dllimport) float __cdecl fdimf(float _X, float _Y); 
#line 545
__declspec(dllimport) float __cdecl fmaf(float _X, float _Y, float _Z); 
#line 546
__declspec(dllimport) float __cdecl fmaxf(float _X, float _Y); 
#line 547
__declspec(dllimport) float __cdecl fminf(float _X, float _Y); 
#line 548
__declspec(dllimport) float __cdecl _hypotf(float _X, float _Y); 
#line 549
__declspec(dllimport) int __cdecl ilogbf(float _X); 
#line 550
__declspec(dllimport) float __cdecl lgammaf(float _X); 
#line 551
__declspec(dllimport) __int64 __cdecl llrintf(float _X); 
#line 552
__declspec(dllimport) __int64 __cdecl llroundf(float _X); 
#line 553
__declspec(dllimport) float __cdecl log1pf(float _X); 
#line 554
__declspec(dllimport) float __cdecl log2f(float _X); 
#line 555
__declspec(dllimport) float __cdecl logbf(float _X); 
#line 556
__declspec(dllimport) long __cdecl lrintf(float _X); 
#line 557
__declspec(dllimport) long __cdecl lroundf(float _X); 
#line 558
__declspec(dllimport) float __cdecl nanf(const char *); 
#line 559
__declspec(dllimport) float __cdecl nearbyintf(float _X); 
#line 560
__declspec(dllimport) float __cdecl nextafterf(float _X, float _Y); 
#line 561
__declspec(dllimport) float __cdecl nexttowardf(float _X, long double _Y); 
#line 562
__declspec(dllimport) float __cdecl remainderf(float _X, float _Y); 
#line 563
__declspec(dllimport) float __cdecl remquof(float _X, float _Y, int * _Z); 
#line 564
__declspec(dllimport) float __cdecl rintf(float _X); 
#line 565
__declspec(dllimport) float __cdecl roundf(float _X); 
#line 566
__declspec(dllimport) float __cdecl scalblnf(float _X, long _Y); 
#line 567
__declspec(dllimport) float __cdecl scalbnf(float _X, int _Y); 
#line 568
__declspec(dllimport) float __cdecl tgammaf(float _X); 
#line 569
__declspec(dllimport) float __cdecl truncf(float _X); 
#line 577 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl _logbf(float _X); 
#line 578
__declspec(dllimport) float __cdecl _nextafterf(float _X, float _Y); 
#line 579
__declspec(dllimport) int __cdecl _finitef(float _X); 
#line 580
__declspec(dllimport) int __cdecl _isnanf(float _X); 
#line 581
__declspec(dllimport) int __cdecl _fpclassf(float _X); 
#line 583
__declspec(dllimport) int __cdecl _set_FMA3_enable(int _Flag); 
#line 584
__declspec(dllimport) int __cdecl _get_FMA3_enable(); 
#line 597 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl acosf(float _X); 
#line 598
__declspec(dllimport) float __cdecl asinf(float _X); 
#line 599
__declspec(dllimport) float __cdecl atan2f(float _Y, float _X); 
#line 600
__declspec(dllimport) float __cdecl atanf(float _X); 
#line 601
__declspec(dllimport) float __cdecl ceilf(float _X); 
#line 602
__declspec(dllimport) float __cdecl cosf(float _X); 
#line 603
__declspec(dllimport) float __cdecl coshf(float _X); 
#line 604
__declspec(dllimport) float __cdecl expf(float _X); 
#line 656 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline float __cdecl fabsf(float _X) 
#line 657
{ 
#line 658
return (float)fabs(_X); 
#line 659
} 
#line 665 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl floorf(float _X); 
#line 666
__declspec(dllimport) float __cdecl fmodf(float _X, float _Y); 
#line 682 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline float __cdecl frexpf(float _X, int *_Y) 
#line 683
{ 
#line 684
return (float)frexp(_X, _Y); 
#line 685
} 
#line 687
__inline float __cdecl hypotf(float _X, float _Y) 
#line 688
{ 
#line 689
return _hypotf(_X, _Y); 
#line 690
} 
#line 692
__inline float __cdecl ldexpf(float _X, int _Y) 
#line 693
{ 
#line 694
return (float)ldexp(_X, _Y); 
#line 695
} 
#line 699
__declspec(dllimport) float __cdecl log10f(float _X); 
#line 700
__declspec(dllimport) float __cdecl logf(float _X); 
#line 701
__declspec(dllimport) float __cdecl modff(float _X, float * _Y); 
#line 702
__declspec(dllimport) float __cdecl powf(float _X, float _Y); 
#line 703
__declspec(dllimport) float __cdecl sinf(float _X); 
#line 704
__declspec(dllimport) float __cdecl sinhf(float _X); 
#line 705
__declspec(dllimport) float __cdecl sqrtf(float _X); 
#line 706
__declspec(dllimport) float __cdecl tanf(float _X); 
#line 707
__declspec(dllimport) float __cdecl tanhf(float _X); 
#line 761 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl acoshl(long double _X); 
#line 763
__inline long double __cdecl acosl(long double _X) 
#line 764
{ 
#line 765
return acos((double)_X); 
#line 766
} 
#line 768
__declspec(dllimport) long double __cdecl asinhl(long double _X); 
#line 770
__inline long double __cdecl asinl(long double _X) 
#line 771
{ 
#line 772
return asin((double)_X); 
#line 773
} 
#line 775
__inline long double __cdecl atan2l(long double _Y, long double _X) 
#line 776
{ 
#line 777
return atan2((double)_Y, (double)_X); 
#line 778
} 
#line 780
__declspec(dllimport) long double __cdecl atanhl(long double _X); 
#line 782
__inline long double __cdecl atanl(long double _X) 
#line 783
{ 
#line 784
return atan((double)_X); 
#line 785
} 
#line 787
__declspec(dllimport) long double __cdecl cbrtl(long double _X); 
#line 789
__inline long double __cdecl ceill(long double _X) 
#line 790
{ 
#line 791
return ceil((double)_X); 
#line 792
} 
#line 794
__inline long double __cdecl _chgsignl(long double _X) 
#line 795
{ 
#line 796
return _chgsign((double)_X); 
#line 797
} 
#line 799
__declspec(dllimport) long double __cdecl copysignl(long double _Number, long double _Sign); 
#line 801
__inline long double __cdecl _copysignl(long double _Number, long double _Sign) 
#line 802
{ 
#line 803
return _copysign((double)_Number, (double)_Sign); 
#line 804
} 
#line 806
__inline long double __cdecl coshl(long double _X) 
#line 807
{ 
#line 808
return cosh((double)_X); 
#line 809
} 
#line 811
__inline long double __cdecl cosl(long double _X) 
#line 812
{ 
#line 813
return cos((double)_X); 
#line 814
} 
#line 816
__declspec(dllimport) long double __cdecl erfl(long double _X); 
#line 817
__declspec(dllimport) long double __cdecl erfcl(long double _X); 
#line 819
__inline long double __cdecl expl(long double _X) 
#line 820
{ 
#line 821
return exp((double)_X); 
#line 822
} 
#line 824
__declspec(dllimport) long double __cdecl exp2l(long double _X); 
#line 825
__declspec(dllimport) long double __cdecl expm1l(long double _X); 
#line 827
__inline long double __cdecl fabsl(long double _X) 
#line 828
{ 
#line 829
return fabs((double)_X); 
#line 830
} 
#line 832
__declspec(dllimport) long double __cdecl fdiml(long double _X, long double _Y); 
#line 834
__inline long double __cdecl floorl(long double _X) 
#line 835
{ 
#line 836
return floor((double)_X); 
#line 837
} 
#line 839
__declspec(dllimport) long double __cdecl fmal(long double _X, long double _Y, long double _Z); 
#line 840
__declspec(dllimport) long double __cdecl fmaxl(long double _X, long double _Y); 
#line 841
__declspec(dllimport) long double __cdecl fminl(long double _X, long double _Y); 
#line 843
__inline long double __cdecl fmodl(long double _X, long double _Y) 
#line 844
{ 
#line 845
return fmod((double)_X, (double)_Y); 
#line 846
} 
#line 848
__inline long double __cdecl frexpl(long double _X, int *_Y) 
#line 849
{ 
#line 850
return frexp((double)_X, _Y); 
#line 851
} 
#line 853
__declspec(dllimport) int __cdecl ilogbl(long double _X); 
#line 855
__inline long double __cdecl _hypotl(long double _X, long double _Y) 
#line 856
{ 
#line 857
return _hypot((double)_X, (double)_Y); 
#line 858
} 
#line 860
__inline long double __cdecl hypotl(long double _X, long double _Y) 
#line 861
{ 
#line 862
return _hypot((double)_X, (double)_Y); 
#line 863
} 
#line 865
__inline long double __cdecl ldexpl(long double _X, int _Y) 
#line 866
{ 
#line 867
return ldexp((double)_X, _Y); 
#line 868
} 
#line 870
__declspec(dllimport) long double __cdecl lgammal(long double _X); 
#line 871
__declspec(dllimport) __int64 __cdecl llrintl(long double _X); 
#line 872
__declspec(dllimport) __int64 __cdecl llroundl(long double _X); 
#line 874
__inline long double __cdecl logl(long double _X) 
#line 875
{ 
#line 876
return log((double)_X); 
#line 877
} 
#line 879
__inline long double __cdecl log10l(long double _X) 
#line 880
{ 
#line 881
return log10((double)_X); 
#line 882
} 
#line 884
__declspec(dllimport) long double __cdecl log1pl(long double _X); 
#line 885
__declspec(dllimport) long double __cdecl log2l(long double _X); 
#line 886
__declspec(dllimport) long double __cdecl logbl(long double _X); 
#line 887
__declspec(dllimport) long __cdecl lrintl(long double _X); 
#line 888
__declspec(dllimport) long __cdecl lroundl(long double _X); 
#line 890
__inline long double __cdecl modfl(long double _X, long double *_Y) 
#line 891
{ 
#line 892
double _F, _I; 
#line 893
_F = modf((double)_X, &_I); 
#line 894
(*_Y) = _I; 
#line 895
return _F; 
#line 896
} 
#line 898
__declspec(dllimport) long double __cdecl nanl(const char *); 
#line 899
__declspec(dllimport) long double __cdecl nearbyintl(long double _X); 
#line 900
__declspec(dllimport) long double __cdecl nextafterl(long double _X, long double _Y); 
#line 901
__declspec(dllimport) long double __cdecl nexttowardl(long double _X, long double _Y); 
#line 903
__inline long double __cdecl powl(long double _X, long double _Y) 
#line 904
{ 
#line 905
return pow((double)_X, (double)_Y); 
#line 906
} 
#line 908
__declspec(dllimport) long double __cdecl remainderl(long double _X, long double _Y); 
#line 909
__declspec(dllimport) long double __cdecl remquol(long double _X, long double _Y, int * _Z); 
#line 910
__declspec(dllimport) long double __cdecl rintl(long double _X); 
#line 911
__declspec(dllimport) long double __cdecl roundl(long double _X); 
#line 912
__declspec(dllimport) long double __cdecl scalblnl(long double _X, long _Y); 
#line 913
__declspec(dllimport) long double __cdecl scalbnl(long double _X, int _Y); 
#line 915
__inline long double __cdecl sinhl(long double _X) 
#line 916
{ 
#line 917
return sinh((double)_X); 
#line 918
} 
#line 920
__inline long double __cdecl sinl(long double _X) 
#line 921
{ 
#line 922
return sin((double)_X); 
#line 923
} 
#line 925
__inline long double __cdecl sqrtl(long double _X) 
#line 926
{ 
#line 927
return sqrt((double)_X); 
#line 928
} 
#line 930
__inline long double __cdecl tanhl(long double _X) 
#line 931
{ 
#line 932
return tanh((double)_X); 
#line 933
} 
#line 935
__inline long double __cdecl tanl(long double _X) 
#line 936
{ 
#line 937
return tan((double)_X); 
#line 938
} 
#line 940
__declspec(dllimport) long double __cdecl tgammal(long double _X); 
#line 941
__declspec(dllimport) long double __cdecl truncl(long double _X); 
#line 963 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
extern double HUGE; 
#line 968 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl j0(double _X); 
#line 969
__declspec(dllimport) double __cdecl j1(double _X); 
#line 970
__declspec(dllimport) double __cdecl jn(int _X, double _Y); 
#line 971
__declspec(dllimport) double __cdecl y0(double _X); 
#line 972
__declspec(dllimport) double __cdecl y1(double _X); 
#line 973
__declspec(dllimport) double __cdecl yn(int _X, double _Y); 
#line 983 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
}
#line 979 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
#pragma warning(pop)
#line 983 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__pragma( pack ( pop )) 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__pragma( pack ( push, 8 )) extern "C" {
#line 54 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 55
_calloc_base(size_t _Count, size_t _Size); 
#line 61
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 62
calloc(size_t _Count, size_t _Size); 
#line 68
__declspec(dllimport) int __cdecl _callnewh(size_t _Size); 
#line 73
__declspec(dllimport) __declspec(allocator) void *__cdecl 
#line 74
_expand(void * _Block, size_t _Size); 
#line 79
__declspec(dllimport) void __cdecl 
#line 80
_free_base(void * _Block); 
#line 84
__declspec(dllimport) void __cdecl 
#line 85
free(void * _Block); 
#line 90
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 91
_malloc_base(size_t _Size); 
#line 96
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 97
malloc(size_t _Size); 
#line 102
__declspec(dllimport) size_t __cdecl 
#line 103
_msize(void * _Block); 
#line 108
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 109
_realloc_base(void * _Block, size_t _Size); 
#line 115
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 116
realloc(void * _Block, size_t _Size); 
#line 122
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 123
_recalloc(void * _Block, size_t _Count, size_t _Size); 
#line 129
__declspec(dllimport) void __cdecl 
#line 130
_aligned_free(void * _Block); 
#line 135
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 136
_aligned_malloc(size_t _Size, size_t _Alignment); 
#line 142
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 143
_aligned_offset_malloc(size_t _Size, size_t _Alignment, size_t _Offset); 
#line 150
__declspec(dllimport) size_t __cdecl 
#line 151
_aligned_msize(void * _Block, size_t _Alignment, size_t _Offset); 
#line 158
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 159
_aligned_offset_realloc(void * _Block, size_t _Size, size_t _Alignment, size_t _Offset); 
#line 167
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 168
_aligned_offset_recalloc(void * _Block, size_t _Count, size_t _Size, size_t _Alignment, size_t _Offset); 
#line 177
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 178
_aligned_realloc(void * _Block, size_t _Size, size_t _Alignment); 
#line 185
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 186
_aligned_recalloc(void * _Block, size_t _Count, size_t _Size, size_t _Alignment); 
#line 214 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
}__pragma( pack ( pop )) 
#line 16 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"
__pragma( pack ( push, 8 )) extern "C" {
#line 23
__declspec(dllimport) void *__cdecl bsearch_s(const void * _Key, const void * _Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, int (__cdecl * _PtFuncCompare)(void *, const void *, const void *), void * _Context); 
#line 32
__declspec(dllimport) void __cdecl qsort_s(void * _Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, int (__cdecl * _PtFuncCompare)(void *, const void *, const void *), void * _Context); 
#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"
__declspec(dllimport) void *__cdecl bsearch(const void * _Key, const void * _Base, size_t _NumOfElements, size_t _SizeOfElements, int (__cdecl * _PtFuncCompare)(const void *, const void *)); 
#line 53
__declspec(dllimport) void __cdecl qsort(void * _Base, size_t _NumOfElements, size_t _SizeOfElements, int (__cdecl * _PtFuncCompare)(const void *, const void *)); 
#line 61
__declspec(dllimport) void *__cdecl _lfind_s(const void * _Key, const void * _Base, unsigned * _NumOfElements, size_t _SizeOfElements, int (__cdecl * _PtFuncCompare)(void *, const void *, const void *), void * _Context); 
#line 71
__declspec(dllimport) void *__cdecl _lfind(const void * _Key, const void * _Base, unsigned * _NumOfElements, unsigned _SizeOfElements, int (__cdecl * _PtFuncCompare)(const void *, const void *)); 
#line 80
__declspec(dllimport) void *__cdecl _lsearch_s(const void * _Key, void * _Base, unsigned * _NumOfElements, size_t _SizeOfElements, int (__cdecl * _PtFuncCompare)(void *, const void *, const void *), void * _Context); 
#line 90
__declspec(dllimport) void *__cdecl _lsearch(const void * _Key, void * _Base, unsigned * _NumOfElements, unsigned _SizeOfElements, int (__cdecl * _PtFuncCompare)(const void *, const void *)); 
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"
__declspec(dllimport) void *__cdecl lfind(const void * _Key, const void * _Base, unsigned * _NumOfElements, unsigned _SizeOfElements, int (__cdecl * _PtFuncCompare)(const void *, const void *)); 
#line 194
__declspec(dllimport) void *__cdecl lsearch(const void * _Key, void * _Base, unsigned * _NumOfElements, unsigned _SizeOfElements, int (__cdecl * _PtFuncCompare)(const void *, const void *)); 
#line 206 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"
}__pragma( pack ( pop )) 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__pragma( pack ( push, 8 )) extern "C" {
#line 48
__declspec(dllimport) errno_t __cdecl _itow_s(int _Value, __wchar_t * _Buffer, size_t _BufferCount, int _Radix); 
#line 55
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _itow_s(int _Value, __wchar_t (&_Buffer)[_Size], int _Radix) throw() { return _itow_s(_Value, _Buffer, _Size, _Radix); } }
#line 62 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __wchar_t *__cdecl _itow(int _Value, __wchar_t * _Buffer, int _Radix); 
#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) errno_t __cdecl _ltow_s(long _Value, __wchar_t * _Buffer, size_t _BufferCount, int _Radix); 
#line 78
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _ltow_s(long _Value, __wchar_t (&_Buffer)[_Size], int _Radix) throw() { return _ltow_s(_Value, _Buffer, _Size, _Radix); } }
#line 85 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __wchar_t *__cdecl _ltow(long _Value, __wchar_t * _Buffer, int _Radix); 
#line 93 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) errno_t __cdecl _ultow_s(unsigned long _Value, __wchar_t * _Buffer, size_t _BufferCount, int _Radix); 
#line 100
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _ultow_s(unsigned long _Value, __wchar_t (&_Buffer)[_Size], int _Radix) throw() { return _ultow_s(_Value, _Buffer, _Size, _Radix); } }
#line 107 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __wchar_t *__cdecl _ultow(unsigned long _Value, __wchar_t * _Buffer, int _Radix); 
#line 115 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) double __cdecl wcstod(const __wchar_t * _String, __wchar_t ** _EndPtr); 
#line 121
__declspec(dllimport) double __cdecl _wcstod_l(const __wchar_t * _String, __wchar_t ** _EndPtr, _locale_t _Locale); 
#line 128
__declspec(dllimport) long __cdecl wcstol(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 135
__declspec(dllimport) long __cdecl _wcstol_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 143
__declspec(dllimport) __int64 __cdecl wcstoll(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 150
__declspec(dllimport) __int64 __cdecl _wcstoll_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 158
__declspec(dllimport) unsigned long __cdecl wcstoul(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 165
__declspec(dllimport) unsigned long __cdecl _wcstoul_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 173
__declspec(dllimport) unsigned __int64 __cdecl wcstoull(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 180
__declspec(dllimport) unsigned __int64 __cdecl _wcstoull_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 188
__declspec(dllimport) long double __cdecl wcstold(const __wchar_t * _String, __wchar_t ** _EndPtr); 
#line 194
__declspec(dllimport) long double __cdecl _wcstold_l(const __wchar_t * _String, __wchar_t ** _EndPtr, _locale_t _Locale); 
#line 201
__declspec(dllimport) float __cdecl wcstof(const __wchar_t * _String, __wchar_t ** _EndPtr); 
#line 207
__declspec(dllimport) float __cdecl _wcstof_l(const __wchar_t * _String, __wchar_t ** _EndPtr, _locale_t _Locale); 
#line 214
__declspec(dllimport) double __cdecl _wtof(const __wchar_t * _String); 
#line 219
__declspec(dllimport) double __cdecl _wtof_l(const __wchar_t * _String, _locale_t _Locale); 
#line 225
__declspec(dllimport) int __cdecl _wtoi(const __wchar_t * _String); 
#line 230
__declspec(dllimport) int __cdecl _wtoi_l(const __wchar_t * _String, _locale_t _Locale); 
#line 236
__declspec(dllimport) long __cdecl _wtol(const __wchar_t * _String); 
#line 241
__declspec(dllimport) long __cdecl _wtol_l(const __wchar_t * _String, _locale_t _Locale); 
#line 247
__declspec(dllimport) __int64 __cdecl _wtoll(const __wchar_t * _String); 
#line 252
__declspec(dllimport) __int64 __cdecl _wtoll_l(const __wchar_t * _String, _locale_t _Locale); 
#line 258
__declspec(dllimport) errno_t __cdecl _i64tow_s(__int64 _Value, __wchar_t * _Buffer, size_t _BufferCount, int _Radix); 
#line 266
__declspec(dllimport) __wchar_t *__cdecl _i64tow(__int64 _Value, __wchar_t * _Buffer, int _Radix); 
#line 273
__declspec(dllimport) errno_t __cdecl _ui64tow_s(unsigned __int64 _Value, __wchar_t * _Buffer, size_t _BufferCount, int _Radix); 
#line 281
__declspec(dllimport) __wchar_t *__cdecl _ui64tow(unsigned __int64 _Value, __wchar_t * _Buffer, int _Radix); 
#line 288
__declspec(dllimport) __int64 __cdecl _wtoi64(const __wchar_t * _String); 
#line 293
__declspec(dllimport) __int64 __cdecl _wtoi64_l(const __wchar_t * _String, _locale_t _Locale); 
#line 299
__declspec(dllimport) __int64 __cdecl _wcstoi64(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 306
__declspec(dllimport) __int64 __cdecl _wcstoi64_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 314
__declspec(dllimport) unsigned __int64 __cdecl _wcstoui64(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 321
__declspec(dllimport) unsigned __int64 __cdecl _wcstoui64_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 333
__declspec(dllimport) __declspec(allocator) __wchar_t *__cdecl _wfullpath(__wchar_t * _Buffer, const __wchar_t * _Path, size_t _BufferCount); 
#line 342
__declspec(dllimport) errno_t __cdecl _wmakepath_s(__wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Drive, const __wchar_t * _Dir, const __wchar_t * _Filename, const __wchar_t * _Ext); 
#line 351
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wmakepath_s(__wchar_t (&_Buffer)[_Size], const __wchar_t *_Drive, const __wchar_t *_Dir, const __wchar_t *_Filename, const __wchar_t *_Ext) throw() { return _wmakepath_s(_Buffer, _Size, _Drive, _Dir, _Filename, _Ext); } }
#line 360 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) void __cdecl _wmakepath(__wchar_t * _Buffer, const __wchar_t * _Drive, const __wchar_t * _Dir, const __wchar_t * _Filename, const __wchar_t * _Ext); 
#line 369 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) void __cdecl _wperror(const __wchar_t * _ErrMsg); 
#line 374
__declspec(dllimport) void __cdecl _wsplitpath(const __wchar_t * _FullPath, __wchar_t * _Drive, __wchar_t * _Dir, __wchar_t * _Filename, __wchar_t * _Ext); 
#line 382
__declspec(dllimport) errno_t __cdecl _wsplitpath_s(const __wchar_t * _FullPath, __wchar_t * _Drive, size_t _DriveCount, __wchar_t * _Dir, size_t _DirCount, __wchar_t * _Filename, size_t _FilenameCount, __wchar_t * _Ext, size_t _ExtCount); 
#line 394
extern "C++" {template< size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline ::errno_t __cdecl _wsplitpath_s(const __wchar_t *_Path, __wchar_t (&_Drive)[_DriveSize], __wchar_t (&_Dir)[_DirSize], __wchar_t (&_Name)[_NameSize], __wchar_t (&_Ext)[_ExtSize]) throw() { return _wsplitpath_s(_Path, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }
#line 407 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) errno_t __cdecl _wdupenv_s(__wchar_t ** _Buffer, size_t * _BufferCount, const __wchar_t * _VarName); 
#line 416
__declspec(dllimport) __wchar_t *__cdecl _wgetenv(const __wchar_t * _VarName); 
#line 422
__declspec(dllimport) errno_t __cdecl _wgetenv_s(size_t * _RequiredCount, __wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _VarName); 
#line 429
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wgetenv_s(::size_t *_RequiredCount, __wchar_t (&_Buffer)[_Size], const __wchar_t *_VarName) throw() { return _wgetenv_s(_RequiredCount, _Buffer, _Size, _VarName); } }
#line 438 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) int __cdecl _wputenv(const __wchar_t * _EnvString); 
#line 443
__declspec(dllimport) errno_t __cdecl _wputenv_s(const __wchar_t * _Name, const __wchar_t * _Value); 
#line 448
__declspec(dllimport) errno_t __cdecl _wsearchenv_s(const __wchar_t * _Filename, const __wchar_t * _VarName, __wchar_t * _Buffer, size_t _BufferCount); 
#line 455
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wsearchenv_s(const __wchar_t *_Filename, const __wchar_t *_VarName, __wchar_t (&_ResultPath)[_Size]) throw() { return _wsearchenv_s(_Filename, _VarName, _ResultPath, _Size); } }
#line 462 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) void __cdecl _wsearchenv(const __wchar_t * _Filename, const __wchar_t * _VarName, __wchar_t * _ResultPath); 
#line 469 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) int __cdecl _wsystem(const __wchar_t * _Command); 
#line 477 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
}__pragma( pack ( pop )) 
#line 17 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__pragma( pack ( push, 8 )) extern "C" {
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) void __cdecl _swab(char * _Buf1, char * _Buf2, int _SizeInBytes); 
#line 50
__declspec(dllimport) __declspec(noreturn) void __cdecl exit(int _Code); 
#line 51
__declspec(dllimport) __declspec(noreturn) void __cdecl _exit(int _Code); 
#line 52
__declspec(dllimport) __declspec(noreturn) void __cdecl _Exit(int _Code); 
#line 53
__declspec(dllimport) __declspec(noreturn) void __cdecl quick_exit(int _Code); 
#line 54
__declspec(dllimport) __declspec(noreturn) void __cdecl abort(); 
#line 60
__declspec(dllimport) unsigned __cdecl _set_abort_behavior(unsigned _Flags, unsigned _Mask); 
#line 68
typedef int (__cdecl *_onexit_t)(void); 
#line 139 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
int __cdecl atexit(void (__cdecl *)(void)); 
#line 140
_onexit_t __cdecl _onexit(_onexit_t _Func); 
#line 143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
int __cdecl at_quick_exit(void (__cdecl *)(void)); 
#line 154
typedef void (__cdecl *_purecall_handler)(void); 
#line 157
typedef void (__cdecl *_invalid_parameter_handler)(const __wchar_t *, const __wchar_t *, const __wchar_t *, unsigned, uintptr_t); 
#line 166
__declspec(dllimport) _purecall_handler __cdecl _set_purecall_handler(_purecall_handler _Handler); 
#line 170
__declspec(dllimport) _purecall_handler __cdecl _get_purecall_handler(); 
#line 173
__declspec(dllimport) _invalid_parameter_handler __cdecl _set_invalid_parameter_handler(_invalid_parameter_handler _Handler); 
#line 177
__declspec(dllimport) _invalid_parameter_handler __cdecl _get_invalid_parameter_handler(); 
#line 179
__declspec(dllimport) _invalid_parameter_handler __cdecl _set_thread_local_invalid_parameter_handler(_invalid_parameter_handler _Handler); 
#line 183
__declspec(dllimport) _invalid_parameter_handler __cdecl _get_thread_local_invalid_parameter_handler(); 
#line 207 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl _set_error_mode(int _Mode); 
#line 211
__declspec(dllimport) int *__cdecl _errno(); 
#line 214
__declspec(dllimport) errno_t __cdecl _set_errno(int _Value); 
#line 215
__declspec(dllimport) errno_t __cdecl _get_errno(int * _Value); 
#line 217
__declspec(dllimport) unsigned long *__cdecl __doserrno(); 
#line 220
__declspec(dllimport) errno_t __cdecl _set_doserrno(unsigned long _Value); 
#line 221
__declspec(dllimport) errno_t __cdecl _get_doserrno(unsigned long * _Value); 
#line 224
__declspec(dllimport) char **__cdecl __sys_errlist(); 
#line 227
__declspec(dllimport) int *__cdecl __sys_nerr(); 
#line 230
__declspec(dllimport) void __cdecl perror(const char * _ErrMsg); 
#line 235
__declspec(dllimport) char **__cdecl __p__pgmptr(); 
#line 236
__declspec(dllimport) __wchar_t **__cdecl __p__wpgmptr(); 
#line 237
__declspec(dllimport) int *__cdecl __p__fmode(); 
#line 250 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _get_pgmptr(char ** _Value); 
#line 253
__declspec(dllimport) errno_t __cdecl _get_wpgmptr(__wchar_t ** _Value); 
#line 255
__declspec(dllimport) errno_t __cdecl _set_fmode(int _Mode); 
#line 257
__declspec(dllimport) errno_t __cdecl _get_fmode(int * _PMode); 
#line 270
typedef 
#line 266
struct _div_t { 
#line 268
int quot; 
#line 269
int rem; 
#line 270
} div_t; 
#line 276
typedef 
#line 272
struct _ldiv_t { 
#line 274
long quot; 
#line 275
long rem; 
#line 276
} ldiv_t; 
#line 282
typedef 
#line 278
struct _lldiv_t { 
#line 280
__int64 quot; 
#line 281
__int64 rem; 
#line 282
} lldiv_t; 
#line 284
int __cdecl abs(int _Number); 
#line 285
long __cdecl labs(long _Number); 
#line 286
__int64 __cdecl llabs(__int64 _Number); 
#line 287
__int64 __cdecl _abs64(__int64 _Number); 
#line 289
unsigned short __cdecl _byteswap_ushort(unsigned short _Number); 
#line 290
unsigned long __cdecl _byteswap_ulong(unsigned long _Number); 
#line 291
unsigned __int64 __cdecl _byteswap_uint64(unsigned __int64 _Number); 
#line 293
__declspec(dllimport) div_t __cdecl div(int _Numerator, int _Denominator); 
#line 294
__declspec(dllimport) ldiv_t __cdecl ldiv(long _Numerator, long _Denominator); 
#line 295
__declspec(dllimport) lldiv_t __cdecl lldiv(__int64 _Numerator, __int64 _Denominator); 
#line 299
#pragma warning (push)
#pragma warning (disable:6540)
#line 302
unsigned __cdecl _rotl(unsigned _Value, int _Shift); 
#line 308
unsigned long __cdecl _lrotl(unsigned long _Value, int _Shift); 
#line 313
unsigned __int64 __cdecl _rotl64(unsigned __int64 _Value, int _Shift); 
#line 318
unsigned __cdecl _rotr(unsigned _Value, int _Shift); 
#line 324
unsigned long __cdecl _lrotr(unsigned long _Value, int _Shift); 
#line 329
unsigned __int64 __cdecl _rotr64(unsigned __int64 _Value, int _Shift); 
#line 334
#pragma warning (pop)
#line 341
__declspec(dllimport) void __cdecl srand(unsigned _Seed); 
#line 343
__declspec(dllimport) int __cdecl rand(); 
#line 352 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++" {
#line 354
inline long abs(const long _X) throw() 
#line 355
{ 
#line 356
return labs(_X); 
#line 357
} 
#line 359
inline __int64 abs(const __int64 _X) throw() 
#line 360
{ 
#line 361
return llabs(_X); 
#line 362
} 
#line 364
inline ldiv_t div(const long _A1, const long _A2) throw() 
#line 365
{ 
#line 366
return ldiv(_A1, _A2); 
#line 367
} 
#line 369
inline lldiv_t div(const __int64 _A1, const __int64 _A2) throw() 
#line 370
{ 
#line 371
return lldiv(_A1, _A2); 
#line 372
} 
#line 373
}
#line 385 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
#pragma pack ( push, 4 )
#line 389
typedef 
#line 387
struct { 
#line 388
unsigned char ld[10]; 
#line 389
} _LDOUBLE; 
#pragma pack ( pop )
#line 409 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
typedef 
#line 407
struct { 
#line 408
double x; 
#line 409
} _CRT_DOUBLE; 
#line 414
typedef 
#line 412
struct { 
#line 413
float f; 
#line 414
} _CRT_FLOAT; 
#line 423
typedef 
#line 421
struct { 
#line 422
long double x; 
#line 423
} _LONGDOUBLE; 
#line 427
#pragma pack ( push, 4 )
#line 431
typedef 
#line 429
struct { 
#line 430
unsigned char ld12[12]; 
#line 431
} _LDBL12; 
#pragma pack ( pop )
#line 441
__declspec(dllimport) double __cdecl atof(const char * _String); 
#line 442
__declspec(dllimport) int __cdecl atoi(const char * _String); 
#line 443
__declspec(dllimport) long __cdecl atol(const char * _String); 
#line 444
__declspec(dllimport) __int64 __cdecl atoll(const char * _String); 
#line 445
__declspec(dllimport) __int64 __cdecl _atoi64(const char * _String); 
#line 447
__declspec(dllimport) double __cdecl _atof_l(const char * _String, _locale_t _Locale); 
#line 448
__declspec(dllimport) int __cdecl _atoi_l(const char * _String, _locale_t _Locale); 
#line 449
__declspec(dllimport) long __cdecl _atol_l(const char * _String, _locale_t _Locale); 
#line 450
__declspec(dllimport) __int64 __cdecl _atoll_l(const char * _String, _locale_t _Locale); 
#line 451
__declspec(dllimport) __int64 __cdecl _atoi64_l(const char * _String, _locale_t _Locale); 
#line 453
__declspec(dllimport) int __cdecl _atoflt(_CRT_FLOAT * _Result, const char * _String); 
#line 454
__declspec(dllimport) int __cdecl _atodbl(_CRT_DOUBLE * _Result, char * _String); 
#line 455
__declspec(dllimport) int __cdecl _atoldbl(_LDOUBLE * _Result, char * _String); 
#line 458
__declspec(dllimport) int __cdecl _atoflt_l(_CRT_FLOAT * _Result, const char * _String, _locale_t _Locale); 
#line 465
__declspec(dllimport) int __cdecl _atodbl_l(_CRT_DOUBLE * _Result, char * _String, _locale_t _Locale); 
#line 473
__declspec(dllimport) int __cdecl _atoldbl_l(_LDOUBLE * _Result, char * _String, _locale_t _Locale); 
#line 480
__declspec(dllimport) float __cdecl strtof(const char * _String, char ** _EndPtr); 
#line 486
__declspec(dllimport) float __cdecl _strtof_l(const char * _String, char ** _EndPtr, _locale_t _Locale); 
#line 493
__declspec(dllimport) double __cdecl strtod(const char * _String, char ** _EndPtr); 
#line 499
__declspec(dllimport) double __cdecl _strtod_l(const char * _String, char ** _EndPtr, _locale_t _Locale); 
#line 506
__declspec(dllimport) long double __cdecl strtold(const char * _String, char ** _EndPtr); 
#line 512
__declspec(dllimport) long double __cdecl _strtold_l(const char * _String, char ** _EndPtr, _locale_t _Locale); 
#line 519
__declspec(dllimport) long __cdecl strtol(const char * _String, char ** _EndPtr, int _Radix); 
#line 526
__declspec(dllimport) long __cdecl _strtol_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 534
__declspec(dllimport) __int64 __cdecl strtoll(const char * _String, char ** _EndPtr, int _Radix); 
#line 541
__declspec(dllimport) __int64 __cdecl _strtoll_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 549
__declspec(dllimport) unsigned long __cdecl strtoul(const char * _String, char ** _EndPtr, int _Radix); 
#line 556
__declspec(dllimport) unsigned long __cdecl _strtoul_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 564
__declspec(dllimport) unsigned __int64 __cdecl strtoull(const char * _String, char ** _EndPtr, int _Radix); 
#line 571
__declspec(dllimport) unsigned __int64 __cdecl _strtoull_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 579
__declspec(dllimport) __int64 __cdecl _strtoi64(const char * _String, char ** _EndPtr, int _Radix); 
#line 586
__declspec(dllimport) __int64 __cdecl _strtoi64_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 594
__declspec(dllimport) unsigned __int64 __cdecl _strtoui64(const char * _String, char ** _EndPtr, int _Radix); 
#line 601
__declspec(dllimport) unsigned __int64 __cdecl _strtoui64_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 617
__declspec(dllimport) errno_t __cdecl _itoa_s(int _Value, char * _Buffer, size_t _BufferCount, int _Radix); 
#line 624
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _itoa_s(int _Value, char (&_Buffer)[_Size], int _Radix) throw() { return _itoa_s(_Value, _Buffer, _Size, _Radix); } }
#line 632 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl _itoa(int _Value, char * _Buffer, int _Radix); 
#line 641 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _ltoa_s(long _Value, char * _Buffer, size_t _BufferCount, int _Radix); 
#line 648
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _ltoa_s(long _Value, char (&_Buffer)[_Size], int _Radix) throw() { return _ltoa_s(_Value, _Buffer, _Size, _Radix); } }
#line 655 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl _ltoa(long _Value, char * _Buffer, int _Radix); 
#line 664 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _ultoa_s(unsigned long _Value, char * _Buffer, size_t _BufferCount, int _Radix); 
#line 671
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _ultoa_s(unsigned long _Value, char (&_Buffer)[_Size], int _Radix) throw() { return _ultoa_s(_Value, _Buffer, _Size, _Radix); } }
#line 678 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl _ultoa(unsigned long _Value, char * _Buffer, int _Radix); 
#line 687 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _i64toa_s(__int64 _Value, char * _Buffer, size_t _BufferCount, int _Radix); 
#line 696
__declspec(dllimport) char *__cdecl _i64toa(__int64 _Value, char * _Buffer, int _Radix); 
#line 704
__declspec(dllimport) errno_t __cdecl _ui64toa_s(unsigned __int64 _Value, char * _Buffer, size_t _BufferCount, int _Radix); 
#line 712
__declspec(dllimport) char *__cdecl _ui64toa(unsigned __int64 _Value, char * _Buffer, int _Radix); 
#line 732
__declspec(dllimport) errno_t __cdecl _ecvt_s(char * _Buffer, size_t _BufferCount, double _Value, int _DigitCount, int * _PtDec, int * _PtSign); 
#line 741
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _ecvt_s(char (&_Buffer)[_Size], double _Value, int _DigitCount, int *_PtDec, int *_PtSign) throw() { return _ecvt_s(_Buffer, _Size, _Value, _DigitCount, _PtDec, _PtSign); } }
#line 751 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl _ecvt(double _Value, int _DigitCount, int * _PtDec, int * _PtSign); 
#line 760
__declspec(dllimport) errno_t __cdecl _fcvt_s(char * _Buffer, size_t _BufferCount, double _Value, int _FractionalDigitCount, int * _PtDec, int * _PtSign); 
#line 769
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _fcvt_s(char (&_Buffer)[_Size], double _Value, int _FractionalDigitCount, int *_PtDec, int *_PtSign) throw() { return _fcvt_s(_Buffer, _Size, _Value, _FractionalDigitCount, _PtDec, _PtSign); } }
#line 781 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl _fcvt(double _Value, int _FractionalDigitCount, int * _PtDec, int * _PtSign); 
#line 789
__declspec(dllimport) errno_t __cdecl _gcvt_s(char * _Buffer, size_t _BufferCount, double _Value, int _DigitCount); 
#line 796
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _gcvt_s(char (&_Buffer)[_Size], double _Value, int _DigitCount) throw() { return _gcvt_s(_Buffer, _Size, _Value, _DigitCount); } }
#line 805 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl _gcvt(double _Value, int _DigitCount, char * _Buffer); 
#line 834 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl ___mb_cur_max_func(); 
#line 837
__declspec(dllimport) int __cdecl ___mb_cur_max_l_func(_locale_t); 
#line 843 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl mblen(const char * _Ch, size_t _MaxCount); 
#line 849
__declspec(dllimport) int __cdecl _mblen_l(const char * _Ch, size_t _MaxCount, _locale_t _Locale); 
#line 857
__declspec(dllimport) size_t __cdecl _mbstrlen(const char * _String); 
#line 863
__declspec(dllimport) size_t __cdecl _mbstrlen_l(const char * _String, _locale_t _Locale); 
#line 870
__declspec(dllimport) size_t __cdecl _mbstrnlen(const char * _String, size_t _MaxCount); 
#line 877
__declspec(dllimport) size_t __cdecl _mbstrnlen_l(const char * _String, size_t _MaxCount, _locale_t _Locale); 
#line 884
__declspec(dllimport) int __cdecl mbtowc(__wchar_t * _DstCh, const char * _SrcCh, size_t _SrcSizeInBytes); 
#line 891
__declspec(dllimport) int __cdecl _mbtowc_l(__wchar_t * _DstCh, const char * _SrcCh, size_t _SrcSizeInBytes, _locale_t _Locale); 
#line 899
__declspec(dllimport) errno_t __cdecl mbstowcs_s(size_t * _PtNumOfCharConverted, __wchar_t * _DstBuf, size_t _SizeInWords, const char * _SrcBuf, size_t _MaxCount); 
#line 907
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl mbstowcs_s(::size_t *_PtNumOfCharConverted, __wchar_t (&_Dest)[_Size], const char *_Source, ::size_t _MaxCount) throw() { return mbstowcs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }
#line 915 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) size_t __cdecl mbstowcs(__wchar_t * _Dest, const char * _Source, size_t _MaxCount); 
#line 923 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _mbstowcs_s_l(size_t * _PtNumOfCharConverted, __wchar_t * _DstBuf, size_t _SizeInWords, const char * _SrcBuf, size_t _MaxCount, _locale_t _Locale); 
#line 932
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _mbstowcs_s_l(::size_t *_PtNumOfCharConverted, __wchar_t (&_Dest)[_Size], const char *_Source, ::size_t _MaxCount, ::_locale_t _Locale) throw() { return _mbstowcs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
#line 941 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) size_t __cdecl _mbstowcs_l(__wchar_t * _Dest, const char * _Source, size_t _MaxCount, _locale_t _Locale); 
#line 954 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl wctomb(char * _MbCh, __wchar_t _WCh); 
#line 960
__declspec(dllimport) int __cdecl _wctomb_l(char * _MbCh, __wchar_t _WCh, _locale_t _Locale); 
#line 969
__declspec(dllimport) errno_t __cdecl wctomb_s(int * _SizeConverted, char * _MbCh, rsize_t _SizeInBytes, __wchar_t _WCh); 
#line 979 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _wctomb_s_l(int * _SizeConverted, char * _MbCh, size_t _SizeInBytes, __wchar_t _WCh, _locale_t _Locale); 
#line 987
__declspec(dllimport) errno_t __cdecl wcstombs_s(size_t * _PtNumOfCharConverted, char * _Dst, size_t _DstSizeInBytes, const __wchar_t * _Src, size_t _MaxCountInBytes); 
#line 995
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl wcstombs_s(::size_t *_PtNumOfCharConverted, char (&_Dest)[_Size], const __wchar_t *_Source, ::size_t _MaxCount) throw() { return wcstombs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }
#line 1003 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) size_t __cdecl wcstombs(char * _Dest, const __wchar_t * _Source, size_t _MaxCount); 
#line 1011 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _wcstombs_s_l(size_t * _PtNumOfCharConverted, char * _Dst, size_t _DstSizeInBytes, const __wchar_t * _Src, size_t _MaxCountInBytes, _locale_t _Locale); 
#line 1020
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wcstombs_s_l(::size_t *_PtNumOfCharConverted, char (&_Dest)[_Size], const __wchar_t *_Source, ::size_t _MaxCount, ::_locale_t _Locale) throw() { return _wcstombs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
#line 1029 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) size_t __cdecl _wcstombs_l(char * _Dest, const __wchar_t * _Source, size_t _MaxCount, _locale_t _Locale); 
#line 1059 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __declspec(allocator) char *__cdecl _fullpath(char * _Buffer, const char * _Path, size_t _BufferCount); 
#line 1068
__declspec(dllimport) errno_t __cdecl _makepath_s(char * _Buffer, size_t _BufferCount, const char * _Drive, const char * _Dir, const char * _Filename, const char * _Ext); 
#line 1077
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _makepath_s(char (&_Buffer)[_Size], const char *_Drive, const char *_Dir, const char *_Filename, const char *_Ext) throw() { return _makepath_s(_Buffer, _Size, _Drive, _Dir, _Filename, _Ext); } }
#line 1086 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) void __cdecl _makepath(char * _Buffer, const char * _Drive, const char * _Dir, const char * _Filename, const char * _Ext); 
#line 1096 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) void __cdecl _splitpath(const char * _FullPath, char * _Drive, char * _Dir, char * _Filename, char * _Ext); 
#line 1105
__declspec(dllimport) errno_t __cdecl _splitpath_s(const char * _FullPath, char * _Drive, size_t _DriveCount, char * _Dir, size_t _DirCount, char * _Filename, size_t _FilenameCount, char * _Ext, size_t _ExtCount); 
#line 1117
extern "C++" {template< size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline ::errno_t __cdecl _splitpath_s(const char *_Dest, char (&_Drive)[_DriveSize], char (&_Dir)[_DirSize], char (&_Name)[_NameSize], char (&_Ext)[_ExtSize]) throw() { return _splitpath_s(_Dest, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }
#line 1132
__declspec(dllimport) errno_t __cdecl getenv_s(size_t * _RequiredCount, char * _Buffer, rsize_t _BufferCount, const char * _VarName); 
#line 1144 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int *__cdecl __p___argc(); 
#line 1145
__declspec(dllimport) char ***__cdecl __p___argv(); 
#line 1146
__declspec(dllimport) __wchar_t ***__cdecl __p___wargv(); 
#line 1158 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char ***__cdecl __p__environ(); 
#line 1159
__declspec(dllimport) __wchar_t ***__cdecl __p__wenviron(); 
#line 1183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl getenv(const char * _VarName); 
#line 1187
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl getenv_s(::size_t *_RequiredCount, char (&_Buffer)[_Size], const char *_VarName) throw() { return getenv_s(_RequiredCount, _Buffer, _Size, _VarName); } }
#line 1200 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _dupenv_s(char ** _Buffer, size_t * _BufferCount, const char * _VarName); 
#line 1210 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl system(const char * _Command); 
#line 1216
#pragma warning (push)
#pragma warning (disable:6540)
#line 1220
__declspec(dllimport) int __cdecl _putenv(const char * _EnvString); 
#line 1225
__declspec(dllimport) errno_t __cdecl _putenv_s(const char * _Name, const char * _Value); 
#line 1230
#pragma warning (pop)
#line 1232
__declspec(dllimport) errno_t __cdecl _searchenv_s(const char * _Filename, const char * _VarName, char * _Buffer, size_t _BufferCount); 
#line 1239
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _searchenv_s(const char *_Filename, const char *_VarName, char (&_Buffer)[_Size]) throw() { return _searchenv_s(_Filename, _VarName, _Buffer, _Size); } }
#line 1246 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) void __cdecl _searchenv(const char * _Filename, const char * _VarName, char * _Buffer); 
#line 1254 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using SetErrorMode in" "stead. See online help for details.")) 
#line 1255
__declspec(dllimport) void __cdecl _seterrormode(int _Mode); 
#line 1259
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using Beep instead. S" "ee online help for details.")) 
#line 1260
__declspec(dllimport) void __cdecl _beep(unsigned _Frequency, unsigned _Duration); 
#line 1265
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using Sleep instead. " "See online help for details.")) 
#line 1266
__declspec(dllimport) void __cdecl _sleep(unsigned long _Duration); 
#line 1289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
#pragma warning(push)
#pragma warning(disable: 4141)
#line 1293
__declspec(dllimport) char *__cdecl ecvt(double _Value, int _DigitCount, int * _PtDec, int * _PtSign); 
#line 1301
__declspec(dllimport) char *__cdecl fcvt(double _Value, int _FractionalDigitCount, int * _PtDec, int * _PtSign); 
#line 1309
__declspec(dllimport) char *__cdecl gcvt(double _Value, int _DigitCount, char * _DstBuf); 
#line 1316
__declspec(dllimport) char *__cdecl itoa(int _Value, char * _Buffer, int _Radix); 
#line 1323
__declspec(dllimport) char *__cdecl ltoa(long _Value, char * _Buffer, int _Radix); 
#line 1331
__declspec(dllimport) void __cdecl swab(char * _Buf1, char * _Buf2, int _SizeInBytes); 
#line 1338
__declspec(dllimport) char *__cdecl ultoa(unsigned long _Value, char * _Buffer, int _Radix); 
#line 1349
__declspec(dllimport) int __cdecl putenv(const char * _EnvString); 
#line 1355 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
#pragma warning(pop)
#line 1357
_onexit_t __cdecl onexit(_onexit_t _Func); 
#line 1363 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
}
#line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#pragma detect_mismatch("_MSC_VER", "1900")
#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#pragma detect_mismatch("_ITERATOR_DEBUG_LEVEL", "0")
#line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#pragma detect_mismatch("RuntimeLibrary", "MD_DynamicRelease")
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\use_ansi.h"
#pragma comment(lib, "msvcprt")
#line 1363 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__pragma( pack ( pop )) 
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#pragma pack ( push, 8 )
#line 592 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
typedef __int64 _Longlong; 
#line 593
typedef unsigned __int64 _ULonglong; 
#line 611
namespace std { 
#line 612
enum _Uninitialized { 
#line 614
_Noinit
#line 615
}; 
#line 619
#pragma warning(push)
#pragma warning(disable:4412)
class __declspec(dllimport) _Lockit { 
#line 644 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
public: __thiscall _Lockit(); 
#line 645
explicit __thiscall _Lockit(int); 
#line 646
__thiscall ~_Lockit() noexcept; 
#line 649 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
static void __cdecl _Lockit_ctor(int); 
#line 650
static void __cdecl _Lockit_dtor(int); 
#line 653
private: static void __cdecl _Lockit_ctor(_Lockit *); 
#line 654
static void __cdecl _Lockit_ctor(_Lockit *, int); 
#line 655
static void __cdecl _Lockit_dtor(_Lockit *); 
#line 658
public: _Lockit(const _Lockit &) = delete;
#line 659
_Lockit &operator=(const _Lockit &) = delete;
#line 662
private: int _Locktype; 
#line 677 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
}; 
#line 764 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
class __declspec(dllimport) _Init_locks { 
#line 780 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
public: __thiscall _Init_locks(); 
#line 781
__thiscall ~_Init_locks() noexcept; 
#line 785 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
private: static void __cdecl _Init_locks_ctor(_Init_locks *); 
#line 786
static void __cdecl _Init_locks_dtor(_Init_locks *); 
#line 797 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
}; 
#line 799
#pragma warning(pop)
}
#line 809 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
__declspec(dllimport) void __cdecl _Atexit(void (__cdecl *)(void)); 
#line 811
typedef unsigned long _Uint32t; 
#line 817
#pragma pack ( pop )
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline double abs(double _Xx) noexcept 
#line 18
{ 
#line 19
return ::fabs(_Xx); 
#line 20
} 
#line 22
inline double pow(double _Xx, int _Yx) noexcept 
#line 23
{ 
#line 24
if (_Yx == 2) { 
#line 25
return _Xx * _Xx; }  
#line 27
return ::pow(_Xx, static_cast< double>(_Yx)); 
#line 28
} 
#line 30
inline float abs(float _Xx) noexcept 
#line 31
{ 
#line 32
return ::fabsf(_Xx); 
#line 33
} 
#line 35
inline float acos(float _Xx) noexcept 
#line 36
{ 
#line 37
return ::acosf(_Xx); 
#line 38
} 
#line 40
inline float acosh(float _Xx) noexcept 
#line 41
{ 
#line 42
return ::acoshf(_Xx); 
#line 43
} 
#line 45
inline float asin(float _Xx) noexcept 
#line 46
{ 
#line 47
return ::asinf(_Xx); 
#line 48
} 
#line 50
inline float asinh(float _Xx) noexcept 
#line 51
{ 
#line 52
return ::asinhf(_Xx); 
#line 53
} 
#line 55
inline float atan(float _Xx) noexcept 
#line 56
{ 
#line 57
return ::atanf(_Xx); 
#line 58
} 
#line 60
inline float atanh(float _Xx) noexcept 
#line 61
{ 
#line 62
return ::atanhf(_Xx); 
#line 63
} 
#line 65
inline float atan2(float _Yx, float _Xx) noexcept 
#line 66
{ 
#line 67
return ::atan2f(_Yx, _Xx); 
#line 68
} 
#line 70
inline float cbrt(float _Xx) noexcept 
#line 71
{ 
#line 72
return ::cbrtf(_Xx); 
#line 73
} 
#line 75
inline float ceil(float _Xx) noexcept 
#line 76
{ 
#line 77
return ::ceilf(_Xx); 
#line 78
} 
#line 80
inline float copysign(float _Number, float 
#line 81
_Sign) noexcept 
#line 82
{ 
#line 83
return ::copysignf(_Number, _Sign); 
#line 84
} 
#line 86
inline float cos(float _Xx) noexcept 
#line 87
{ 
#line 88
return ::cosf(_Xx); 
#line 89
} 
#line 91
inline float cosh(float _Xx) noexcept 
#line 92
{ 
#line 93
return ::coshf(_Xx); 
#line 94
} 
#line 96
inline float erf(float _Xx) noexcept 
#line 97
{ 
#line 98
return ::erff(_Xx); 
#line 99
} 
#line 101
inline float erfc(float _Xx) noexcept 
#line 102
{ 
#line 103
return ::erfcf(_Xx); 
#line 104
} 
#line 106
inline float exp(float _Xx) noexcept 
#line 107
{ 
#line 108
return ::expf(_Xx); 
#line 109
} 
#line 111
inline float exp2(float _Xx) noexcept 
#line 112
{ 
#line 113
return ::exp2f(_Xx); 
#line 114
} 
#line 116
inline float expm1(float _Xx) noexcept 
#line 117
{ 
#line 118
return ::expm1f(_Xx); 
#line 119
} 
#line 121
inline float fabs(float _Xx) noexcept 
#line 122
{ 
#line 123
return ::fabsf(_Xx); 
#line 124
} 
#line 126
inline float fdim(float _Xx, float _Yx) noexcept 
#line 127
{ 
#line 128
return ::fdimf(_Xx, _Yx); 
#line 129
} 
#line 131
inline float floor(float _Xx) noexcept 
#line 132
{ 
#line 133
return ::floorf(_Xx); 
#line 134
} 
#line 136
inline float fma(float _Xx, float _Yx, float 
#line 137
_Zx) noexcept 
#line 138
{ 
#line 139
return ::fmaf(_Xx, _Yx, _Zx); 
#line 140
} 
#line 142
inline float fmax(float _Xx, float _Yx) noexcept 
#line 143
{ 
#line 144
return ::fmaxf(_Xx, _Yx); 
#line 145
} 
#line 147
inline float fmin(float _Xx, float _Yx) noexcept 
#line 148
{ 
#line 149
return ::fminf(_Xx, _Yx); 
#line 150
} 
#line 152
inline float fmod(float _Xx, float _Yx) noexcept 
#line 153
{ 
#line 154
return ::fmodf(_Xx, _Yx); 
#line 155
} 
#line 157
inline float frexp(float _Xx, int *_Yx) noexcept 
#line 158
{ 
#line 159
return ::frexpf(_Xx, _Yx); 
#line 160
} 
#line 162
inline float hypot(float _Xx, float _Yx) noexcept 
#line 163
{ 
#line 164
return ::hypotf(_Xx, _Yx); 
#line 165
} 
#line 167
inline int ilogb(float _Xx) noexcept 
#line 168
{ 
#line 169
return ::ilogbf(_Xx); 
#line 170
} 
#line 172
inline float ldexp(float _Xx, int _Yx) noexcept 
#line 173
{ 
#line 174
return ::ldexpf(_Xx, _Yx); 
#line 175
} 
#line 177
inline float lgamma(float _Xx) noexcept 
#line 178
{ 
#line 179
return ::lgammaf(_Xx); 
#line 180
} 
#line 182
inline __int64 llrint(float _Xx) noexcept 
#line 183
{ 
#line 184
return ::llrintf(_Xx); 
#line 185
} 
#line 187
inline __int64 llround(float _Xx) noexcept 
#line 188
{ 
#line 189
return ::llroundf(_Xx); 
#line 190
} 
#line 192
inline float log(float _Xx) noexcept 
#line 193
{ 
#line 194
return ::logf(_Xx); 
#line 195
} 
#line 197
inline float log10(float _Xx) noexcept 
#line 198
{ 
#line 199
return ::log10f(_Xx); 
#line 200
} 
#line 202
inline float log1p(float _Xx) noexcept 
#line 203
{ 
#line 204
return ::log1pf(_Xx); 
#line 205
} 
#line 207
inline float log2(float _Xx) noexcept 
#line 208
{ 
#line 209
return ::log2f(_Xx); 
#line 210
} 
#line 212
inline float logb(float _Xx) noexcept 
#line 213
{ 
#line 214
return ::logbf(_Xx); 
#line 215
} 
#line 217
inline long lrint(float _Xx) noexcept 
#line 218
{ 
#line 219
return ::lrintf(_Xx); 
#line 220
} 
#line 222
inline long lround(float _Xx) noexcept 
#line 223
{ 
#line 224
return ::lroundf(_Xx); 
#line 225
} 
#line 227
inline float modf(float _Xx, float *_Yx) noexcept 
#line 228
{ 
#line 229
return ::modff(_Xx, _Yx); 
#line 230
} 
#line 232
inline float nearbyint(float _Xx) noexcept 
#line 233
{ 
#line 234
return ::nearbyintf(_Xx); 
#line 235
} 
#line 237
inline float nextafter(float _Xx, float _Yx) noexcept 
#line 238
{ 
#line 239
return ::nextafterf(_Xx, _Yx); 
#line 240
} 
#line 242
inline float nexttoward(float _Xx, long double 
#line 243
_Yx) noexcept 
#line 244
{ 
#line 245
return ::nexttowardf(_Xx, _Yx); 
#line 246
} 
#line 248
inline float pow(float _Xx, float 
#line 249
_Yx) noexcept 
#line 250
{ 
#line 251
return ::powf(_Xx, _Yx); 
#line 252
} 
#line 254
inline float pow(float _Xx, int _Yx) noexcept 
#line 255
{ 
#line 256
if (_Yx == 2) { 
#line 257
return _Xx * _Xx; }  
#line 259
return ::powf(_Xx, static_cast< float>(_Yx)); 
#line 260
} 
#line 262
inline float remainder(float _Xx, float _Yx) noexcept 
#line 263
{ 
#line 264
return ::remainderf(_Xx, _Yx); 
#line 265
} 
#line 267
inline float remquo(float _Xx, float _Yx, int *
#line 268
_Zx) noexcept 
#line 269
{ 
#line 270
return ::remquof(_Xx, _Yx, _Zx); 
#line 271
} 
#line 273
inline float rint(float _Xx) noexcept 
#line 274
{ 
#line 275
return ::rintf(_Xx); 
#line 276
} 
#line 278
inline float round(float _Xx) noexcept 
#line 279
{ 
#line 280
return ::roundf(_Xx); 
#line 281
} 
#line 283
inline float scalbln(float _Xx, long _Yx) noexcept 
#line 284
{ 
#line 285
return ::scalblnf(_Xx, _Yx); 
#line 286
} 
#line 288
inline float scalbn(float _Xx, int _Yx) noexcept 
#line 289
{ 
#line 290
return ::scalbnf(_Xx, _Yx); 
#line 291
} 
#line 293
inline float sin(float _Xx) noexcept 
#line 294
{ 
#line 295
return ::sinf(_Xx); 
#line 296
} 
#line 298
inline float sinh(float _Xx) noexcept 
#line 299
{ 
#line 300
return ::sinhf(_Xx); 
#line 301
} 
#line 303
inline float sqrt(float _Xx) noexcept 
#line 304
{ 
#line 305
return ::sqrtf(_Xx); 
#line 306
} 
#line 308
inline float tan(float _Xx) noexcept 
#line 309
{ 
#line 310
return ::tanf(_Xx); 
#line 311
} 
#line 313
inline float tanh(float _Xx) noexcept 
#line 314
{ 
#line 315
return ::tanhf(_Xx); 
#line 316
} 
#line 318
inline float tgamma(float _Xx) noexcept 
#line 319
{ 
#line 320
return ::tgammaf(_Xx); 
#line 321
} 
#line 323
inline float trunc(float _Xx) noexcept 
#line 324
{ 
#line 325
return ::truncf(_Xx); 
#line 326
} 
#line 328
inline long double abs(long double _Xx) noexcept 
#line 329
{ 
#line 330
return ::fabsl(_Xx); 
#line 331
} 
#line 333
inline long double acos(long double _Xx) noexcept 
#line 334
{ 
#line 335
return ::acosl(_Xx); 
#line 336
} 
#line 338
inline long double acosh(long double _Xx) noexcept 
#line 339
{ 
#line 340
return ::acoshl(_Xx); 
#line 341
} 
#line 343
inline long double asin(long double _Xx) noexcept 
#line 344
{ 
#line 345
return ::asinl(_Xx); 
#line 346
} 
#line 348
inline long double asinh(long double _Xx) noexcept 
#line 349
{ 
#line 350
return ::asinhl(_Xx); 
#line 351
} 
#line 353
inline long double atan(long double _Xx) noexcept 
#line 354
{ 
#line 355
return ::atanl(_Xx); 
#line 356
} 
#line 358
inline long double atanh(long double _Xx) noexcept 
#line 359
{ 
#line 360
return ::atanhl(_Xx); 
#line 361
} 
#line 363
inline long double atan2(long double _Yx, long double 
#line 364
_Xx) noexcept 
#line 365
{ 
#line 366
return ::atan2l(_Yx, _Xx); 
#line 367
} 
#line 369
inline long double cbrt(long double _Xx) noexcept 
#line 370
{ 
#line 371
return ::cbrtl(_Xx); 
#line 372
} 
#line 374
inline long double ceil(long double _Xx) noexcept 
#line 375
{ 
#line 376
return ::ceill(_Xx); 
#line 377
} 
#line 379
inline long double copysign(long double _Number, long double 
#line 380
_Sign) noexcept 
#line 381
{ 
#line 382
return ::copysignl(_Number, _Sign); 
#line 383
} 
#line 385
inline long double cos(long double _Xx) noexcept 
#line 386
{ 
#line 387
return ::cosl(_Xx); 
#line 388
} 
#line 390
inline long double cosh(long double _Xx) noexcept 
#line 391
{ 
#line 392
return ::coshl(_Xx); 
#line 393
} 
#line 395
inline long double erf(long double _Xx) noexcept 
#line 396
{ 
#line 397
return ::erfl(_Xx); 
#line 398
} 
#line 400
inline long double erfc(long double _Xx) noexcept 
#line 401
{ 
#line 402
return ::erfcl(_Xx); 
#line 403
} 
#line 405
inline long double exp(long double _Xx) noexcept 
#line 406
{ 
#line 407
return ::expl(_Xx); 
#line 408
} 
#line 410
inline long double exp2(long double _Xx) noexcept 
#line 411
{ 
#line 412
return ::exp2l(_Xx); 
#line 413
} 
#line 415
inline long double expm1(long double _Xx) noexcept 
#line 416
{ 
#line 417
return ::expm1l(_Xx); 
#line 418
} 
#line 420
inline long double fabs(long double _Xx) noexcept 
#line 421
{ 
#line 422
return ::fabsl(_Xx); 
#line 423
} 
#line 425
inline long double fdim(long double _Xx, long double 
#line 426
_Yx) noexcept 
#line 427
{ 
#line 428
return ::fdiml(_Xx, _Yx); 
#line 429
} 
#line 431
inline long double floor(long double _Xx) noexcept 
#line 432
{ 
#line 433
return ::floorl(_Xx); 
#line 434
} 
#line 436
inline long double fma(long double _Xx, long double 
#line 437
_Yx, long double _Zx) noexcept 
#line 438
{ 
#line 439
return ::fmal(_Xx, _Yx, _Zx); 
#line 440
} 
#line 442
inline long double fmax(long double _Xx, long double 
#line 443
_Yx) noexcept 
#line 444
{ 
#line 445
return ::fmaxl(_Xx, _Yx); 
#line 446
} 
#line 448
inline long double fmin(long double _Xx, long double 
#line 449
_Yx) noexcept 
#line 450
{ 
#line 451
return ::fminl(_Xx, _Yx); 
#line 452
} 
#line 454
inline long double fmod(long double _Xx, long double 
#line 455
_Yx) noexcept 
#line 456
{ 
#line 457
return ::fmodl(_Xx, _Yx); 
#line 458
} 
#line 460
inline long double frexp(long double _Xx, int *
#line 461
_Yx) noexcept 
#line 462
{ 
#line 463
return ::frexpl(_Xx, _Yx); 
#line 464
} 
#line 466
inline long double hypot(long double _Xx, long double 
#line 467
_Yx) noexcept 
#line 468
{ 
#line 469
return ::hypotl(_Xx, _Yx); 
#line 470
} 
#line 472
inline int ilogb(long double _Xx) noexcept 
#line 473
{ 
#line 474
return ::ilogbl(_Xx); 
#line 475
} 
#line 477
inline long double ldexp(long double _Xx, int 
#line 478
_Yx) noexcept 
#line 479
{ 
#line 480
return ::ldexpl(_Xx, _Yx); 
#line 481
} 
#line 483
inline long double lgamma(long double _Xx) noexcept 
#line 484
{ 
#line 485
return ::lgammal(_Xx); 
#line 486
} 
#line 488
inline __int64 llrint(long double _Xx) noexcept 
#line 489
{ 
#line 490
return ::llrintl(_Xx); 
#line 491
} 
#line 493
inline __int64 llround(long double _Xx) noexcept 
#line 494
{ 
#line 495
return ::llroundl(_Xx); 
#line 496
} 
#line 498
inline long double log(long double _Xx) noexcept 
#line 499
{ 
#line 500
return ::logl(_Xx); 
#line 501
} 
#line 503
inline long double log10(long double _Xx) noexcept 
#line 504
{ 
#line 505
return ::log10l(_Xx); 
#line 506
} 
#line 508
inline long double log1p(long double _Xx) noexcept 
#line 509
{ 
#line 510
return ::log1pl(_Xx); 
#line 511
} 
#line 513
inline long double log2(long double _Xx) noexcept 
#line 514
{ 
#line 515
return ::log2l(_Xx); 
#line 516
} 
#line 518
inline long double logb(long double _Xx) noexcept 
#line 519
{ 
#line 520
return ::logbl(_Xx); 
#line 521
} 
#line 523
inline long lrint(long double _Xx) noexcept 
#line 524
{ 
#line 525
return ::lrintl(_Xx); 
#line 526
} 
#line 528
inline long lround(long double _Xx) noexcept 
#line 529
{ 
#line 530
return ::lroundl(_Xx); 
#line 531
} 
#line 533
inline long double modf(long double _Xx, long double *
#line 534
_Yx) noexcept 
#line 535
{ 
#line 536
return ::modfl(_Xx, _Yx); 
#line 537
} 
#line 539
inline long double nearbyint(long double _Xx) noexcept 
#line 540
{ 
#line 541
return ::nearbyintl(_Xx); 
#line 542
} 
#line 544
inline long double nextafter(long double _Xx, long double 
#line 545
_Yx) noexcept 
#line 546
{ 
#line 547
return ::nextafterl(_Xx, _Yx); 
#line 548
} 
#line 550
inline long double nexttoward(long double _Xx, long double 
#line 551
_Yx) noexcept 
#line 552
{ 
#line 553
return ::nexttowardl(_Xx, _Yx); 
#line 554
} 
#line 556
inline long double pow(long double _Xx, long double 
#line 557
_Yx) noexcept 
#line 558
{ 
#line 559
return ::powl(_Xx, _Yx); 
#line 560
} 
#line 562
inline long double pow(long double _Xx, int 
#line 563
_Yx) noexcept 
#line 564
{ 
#line 565
if (_Yx == 2) { 
#line 566
return _Xx * _Xx; }  
#line 568
return ::powl(_Xx, static_cast< long double>(_Yx)); 
#line 569
} 
#line 571
inline long double remainder(long double _Xx, long double 
#line 572
_Yx) noexcept 
#line 573
{ 
#line 574
return ::remainderl(_Xx, _Yx); 
#line 575
} 
#line 577
inline long double remquo(long double _Xx, long double 
#line 578
_Yx, int *_Zx) noexcept 
#line 579
{ 
#line 580
return ::remquol(_Xx, _Yx, _Zx); 
#line 581
} 
#line 583
inline long double rint(long double _Xx) noexcept 
#line 584
{ 
#line 585
return ::rintl(_Xx); 
#line 586
} 
#line 588
inline long double round(long double _Xx) noexcept 
#line 589
{ 
#line 590
return ::roundl(_Xx); 
#line 591
} 
#line 593
inline long double scalbln(long double _Xx, long 
#line 594
_Yx) noexcept 
#line 595
{ 
#line 596
return ::scalblnl(_Xx, _Yx); 
#line 597
} 
#line 599
inline long double scalbn(long double _Xx, int 
#line 600
_Yx) noexcept 
#line 601
{ 
#line 602
return ::scalbnl(_Xx, _Yx); 
#line 603
} 
#line 605
inline long double sin(long double _Xx) noexcept 
#line 606
{ 
#line 607
return ::sinl(_Xx); 
#line 608
} 
#line 610
inline long double sinh(long double _Xx) noexcept 
#line 611
{ 
#line 612
return ::sinhl(_Xx); 
#line 613
} 
#line 615
inline long double sqrt(long double _Xx) noexcept 
#line 616
{ 
#line 617
return ::sqrtl(_Xx); 
#line 618
} 
#line 620
inline long double tan(long double _Xx) noexcept 
#line 621
{ 
#line 622
return ::tanl(_Xx); 
#line 623
} 
#line 625
inline long double tanh(long double _Xx) noexcept 
#line 626
{ 
#line 627
return ::tanhl(_Xx); 
#line 628
} 
#line 630
inline long double tgamma(long double _Xx) noexcept 
#line 631
{ 
#line 632
return ::tgammal(_Xx); 
#line 633
} 
#line 635
inline long double trunc(long double _Xx) noexcept 
#line 636
{ 
#line 637
return ::truncl(_Xx); 
#line 638
} 
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
namespace std { 
#line 18
using ::size_t;using ::div_t;using ::ldiv_t;
#line 19
using ::abort;using ::abs;using ::atexit;
#line 20
using ::atof;using ::atoi;using ::atol;
#line 21
using ::bsearch;using ::calloc;using ::div;
#line 22
using ::exit;using ::free;
#line 23
using ::labs;using ::ldiv;using ::malloc;
#line 24
using ::mblen;using ::mbstowcs;using ::mbtowc;
#line 25
using ::qsort;using ::rand;using ::realloc;
#line 26
using ::srand;using ::strtod;using ::strtol;
#line 27
using ::strtoul;
#line 28
using ::wcstombs;using ::wctomb;
#line 30
using ::lldiv_t;
#line 33
using ::getenv;
#line 34
using ::system;
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::atoll;using ::llabs;using ::lldiv;
#line 38
using ::strtof;using ::strtold;
#line 39
using ::strtoll;using ::strtoull;
#line 41
using ::_Exit;using ::at_quick_exit;using ::quick_exit;
#line 42
}
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
#pragma warning(push,3)
#line 8
#pragma pack ( push, 8 )
#line 13
namespace std { 
#line 15
struct _Nil { 
#line 17
}; 
#line 20
template < class _Ty,
 _Ty _Val >
 struct integral_constant
 {
 static constexpr _Ty value = _Val;

 typedef _Ty value_type;
 typedef integral_constant < _Ty, _Val > type;

 constexpr operator value_type ( ) const noexcept
  {
  return ( value );
  }

 constexpr value_type operator ( ) ( ) const noexcept
  {
  return ( value );
  }
 };
#line 40
typedef integral_constant< bool, true>  true_type; 
#line 41
typedef integral_constant< bool, false>  false_type; 
#line 44
template< bool _Val> using bool_constant = integral_constant< bool, _Val> ; 
#line 48
template< bool _Val> 
#line 49
struct _Cat_base : public integral_constant< bool, _Val>  { 
#line 52
}; 
#line 55
template< bool _Test, class 
#line 56
_Ty = void> 
#line 57
struct enable_if { 
#line 59
}; 
#line 61
template< class _Ty> 
#line 62
struct enable_if< true, _Ty>  { 
#line 64
typedef _Ty type; 
#line 65
}; 
#line 68
template< bool _Test, class 
#line 69
_Ty1, class 
#line 70
_Ty2> 
#line 71
struct conditional { 
#line 73
typedef _Ty2 type; 
#line 74
}; 
#line 76
template< class _Ty1, class 
#line 77
_Ty2> 
#line 78
struct conditional< true, _Ty1, _Ty2>  { 
#line 80
typedef _Ty1 type; 
#line 81
}; 
#line 84
template< class _Ty1, class 
#line 85
_Ty2> 
#line 86
struct is_same : public false_type { 
#line 89
}; 
#line 91
template< class _Ty1> 
#line 92
struct is_same< _Ty1, _Ty1>  : public true_type { 
#line 95
}; 
#line 98
template< class _Ty, class 
#line 99
_Uty> constexpr bool 
#line 100
is_same_v = (is_same< _Ty, _Uty> ::value); 
#line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 105
struct remove_const { 
#line 107
typedef _Ty type; 
#line 108
}; 
#line 110
template< class _Ty> 
#line 111
struct remove_const< const _Ty>  { 
#line 113
typedef _Ty type; 
#line 114
}; 
#line 117
template< class _Ty> 
#line 118
struct remove_volatile { 
#line 120
typedef _Ty type; 
#line 121
}; 
#line 123
template< class _Ty> 
#line 124
struct remove_volatile< volatile _Ty>  { 
#line 126
typedef _Ty type; 
#line 127
}; 
#line 130
template< class _Ty> 
#line 131
struct remove_cv { 
#line 134
typedef typename remove_const< typename remove_volatile< _Ty> ::type> ::type type; 
#line 135
}; 
#line 138
template< class _Ty> 
#line 139
struct _Is_integral : public false_type { 
#line 142
}; 
#line 145
template<> struct _Is_integral< bool>  : public true_type { 
#line 148
}; 
#line 151
template<> struct _Is_integral< char>  : public true_type { 
#line 154
}; 
#line 157
template<> struct _Is_integral< unsigned char>  : public true_type { 
#line 160
}; 
#line 163
template<> struct _Is_integral< signed char>  : public true_type { 
#line 166
}; 
#line 170
template<> struct _Is_integral< __wchar_t>  : public true_type { 
#line 173
}; 
#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< unsigned short>  : public true_type { 
#line 180
}; 
#line 183
template<> struct _Is_integral< signed short>  : public true_type { 
#line 186
}; 
#line 189
template<> struct _Is_integral< unsigned>  : public true_type { 
#line 192
}; 
#line 195
template<> struct _Is_integral< signed int>  : public true_type { 
#line 198
}; 
#line 201
template<> struct _Is_integral< unsigned long>  : public true_type { 
#line 204
}; 
#line 207
template<> struct _Is_integral< signed long>  : public true_type { 
#line 210
}; 
#line 213
template<> struct _Is_integral< char16_t>  : public true_type { 
#line 216
}; 
#line 219
template<> struct _Is_integral< char32_t>  : public true_type { 
#line 222
}; 
#line 225
template<> struct _Is_integral< __int64>  : public true_type { 
#line 228
}; 
#line 231
template<> struct _Is_integral< unsigned __int64>  : public true_type { 
#line 234
}; 
#line 237
template< class _Ty> 
#line 238
struct is_integral : public _Is_integral< typename remove_cv< _Ty> ::type>  { 
#line 241
}; 
#line 244
template< class _Ty> constexpr bool 
#line 245
is_integral_v = (is_integral< _Ty> ::value); 
#line 249 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 250
struct _Is_floating_point : public false_type { 
#line 253
}; 
#line 256
template<> struct _Is_floating_point< float>  : public true_type { 
#line 259
}; 
#line 262
template<> struct _Is_floating_point< double>  : public true_type { 
#line 265
}; 
#line 268
template<> struct _Is_floating_point< long double>  : public true_type { 
#line 271
}; 
#line 274
template< class _Ty> 
#line 275
struct is_floating_point : public _Is_floating_point< typename remove_cv< _Ty> ::type>  { 
#line 278
}; 
#line 281
template< class _Ty> constexpr bool 
#line 282
is_floating_point_v = (is_floating_point< _Ty> ::value); 
#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 287
struct is_arithmetic : public _Cat_base< is_integral< _Ty> ::value || is_floating_point< _Ty> ::value>  { 
#line 291
}; 
#line 294
template< class _Ty> constexpr bool 
#line 295
is_arithmetic_v = (is_arithmetic< _Ty> ::value); 
#line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 300
struct remove_reference { 
#line 302
typedef _Ty type; 
#line 303
}; 
#line 305
template< class _Ty> 
#line 306
struct remove_reference< _Ty &>  { 
#line 308
typedef _Ty type; 
#line 309
}; 
#line 311
template< class _Ty> 
#line 312
struct remove_reference< _Ty &&>  { 
#line 314
typedef _Ty type; 
#line 315
}; 
#line 318
struct _Wrap_int { 
#line 320
_Wrap_int(int) 
#line 321
{ 
#line 322
} 
#line 323
}; 
#line 325
template< class _Ty> 
#line 326
struct _Identity { 
#line 328
typedef _Ty type; 
#line 329
}; 
#line 344
}
#line 346
#pragma warning(pop)
#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
#pragma warning(push,3)
#line 347 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
#pragma pack ( pop )
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
#pragma pack ( push, 8 )
#line 15
namespace std { 
#line 16
template< class _Ty> 
#line 17
struct _Promote_to_float { 
#line 20
typedef typename conditional< is_integral< _Ty> ::value, double, _Ty> ::type type; 
#line 21
}; 
#line 23
template< class _Ty1, class 
#line 24
_Ty2> 
#line 25
struct _Common_float_type { 
#line 27
typedef typename _Promote_to_float< _Ty1> ::type _Ty1f; 
#line 28
typedef typename _Promote_to_float< _Ty2> ::type _Ty2f; 
#line 33
typedef typename conditional< is_same< typename _Promote_to_float< _Ty1> ::type, long double> ::value || is_same< typename _Promote_to_float< _Ty2> ::type, long double> ::value, long double, typename conditional< is_same< typename _Promote_to_float< _Ty1> ::type, double> ::value || is_same< typename _Promote_to_float< _Ty2> ::type, double> ::value, double, float> ::type> ::type type; 
#line 34
}; 
#line 35
}
#line 76
template < class _Ty1,
 class _Ty2 > inline
 typename :: std :: enable_if < :: std :: is_arithmetic < _Ty1 > :: value
  && :: std :: is_arithmetic < _Ty2 > :: value,
  typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type
 pow ( const _Ty1 _Left, const _Ty2 _Right )
 {
 typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type;
 return ( :: pow ( type ( _Left ), type ( _Right ) ) );
 }
#line 88
extern "C" double __cdecl acos(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type acos ( _Ty _Left ) { return ( :: acos ( ( double ) _Left ) ); }
#line 89
extern "C" double __cdecl asin(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type asin ( _Ty _Left ) { return ( :: asin ( ( double ) _Left ) ); }
#line 90
extern "C" double __cdecl atan(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type atan ( _Ty _Left ) { return ( :: atan ( ( double ) _Left ) ); }
#line 91
extern "C" double __cdecl atan2(double, double); template < class _Ty1, class _Ty2 > inline typename :: std :: enable_if < :: std :: is_arithmetic < _Ty1 > :: value && :: std :: is_arithmetic < _Ty2 > :: value, typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type atan2 ( _Ty1 _Left, _Ty2 _Right ) { typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type; return ( :: atan2 ( ( type ) _Left, ( type ) _Right ) ); }
#line 92
extern "C" __declspec(dllimport) double __cdecl ceil(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type ceil ( _Ty _Left ) { return ( :: ceil ( ( double ) _Left ) ); }
#line 93
extern "C" double __cdecl cos(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type cos ( _Ty _Left ) { return ( :: cos ( ( double ) _Left ) ); }
#line 94
extern "C" double __cdecl cosh(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type cosh ( _Ty _Left ) { return ( :: cosh ( ( double ) _Left ) ); }
#line 95
extern "C" double __cdecl exp(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type exp ( _Ty _Left ) { return ( :: exp ( ( double ) _Left ) ); }
#line 97
extern "C" double __cdecl fabs(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type fabs ( _Ty _Left ) { return ( :: fabs ( ( double ) _Left ) ); }
#line 99
extern "C" __declspec(dllimport) double __cdecl floor(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type floor ( _Ty _Left ) { return ( :: floor ( ( double ) _Left ) ); }
#line 100
extern "C" double __cdecl fmod(double, double); template < class _Ty1, class _Ty2 > inline typename :: std :: enable_if < :: std :: is_arithmetic < _Ty1 > :: value && :: std :: is_arithmetic < _Ty2 > :: value, typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type fmod ( _Ty1 _Left, _Ty2 _Right ) { typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type; return ( :: fmod ( ( type ) _Left, ( type ) _Right ) ); }
#line 101
extern "C" __declspec(dllimport) double __cdecl frexp(double, int *); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type frexp ( _Ty _Left, int * _Arg2 ) { return ( :: frexp ( ( double ) _Left, _Arg2 ) ); }
#line 102
extern "C" __declspec(dllimport) double __cdecl ldexp(double, int); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type ldexp ( _Ty _Left, int _Arg2 ) { return ( :: ldexp ( ( double ) _Left, _Arg2 ) ); }
#line 103
extern "C" double __cdecl log(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type log ( _Ty _Left ) { return ( :: log ( ( double ) _Left ) ); }
#line 104
extern "C" double __cdecl log10(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type log10 ( _Ty _Left ) { return ( :: log10 ( ( double ) _Left ) ); }
#line 107
extern "C" double __cdecl sin(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type sin ( _Ty _Left ) { return ( :: sin ( ( double ) _Left ) ); }
#line 108
extern "C" double __cdecl sinh(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type sinh ( _Ty _Left ) { return ( :: sinh ( ( double ) _Left ) ); }
#line 109
extern "C" double __cdecl sqrt(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type sqrt ( _Ty _Left ) { return ( :: sqrt ( ( double ) _Left ) ); }
#line 110
extern "C" double __cdecl tan(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type tan ( _Ty _Left ) { return ( :: tan ( ( double ) _Left ) ); }
#line 111
extern "C" double __cdecl tanh(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type tanh ( _Ty _Left ) { return ( :: tanh ( ( double ) _Left ) ); }
#line 125
inline float _Fma(float _Left, float _Middle, float _Right) 
#line 126
{ 
#line 127
return ::fmaf(_Left, _Middle, _Right); 
#line 128
} 
#line 130
inline double _Fma(double _Left, double _Middle, double _Right) 
#line 131
{ 
#line 132
return ::fma(_Left, _Middle, _Right); 
#line 133
} 
#line 135
inline long double _Fma(long double _Left, long double _Middle, long double 
#line 136
_Right) 
#line 137
{ 
#line 138
return ::fmal(_Left, _Middle, _Right); 
#line 139
} 
#line 141
template < class _Ty1,
 class _Ty2,
 class _Ty3 > inline
 typename :: std :: _Common_float_type < _Ty1,
  typename :: std :: _Common_float_type < _Ty2, _Ty3 > :: type > :: type
 fma ( _Ty1 _Left, _Ty2 _Middle, _Ty3 _Right )
 {
 typedef typename :: std :: _Common_float_type < _Ty1,
  typename :: std :: _Common_float_type < _Ty2, _Ty3 > :: type > :: type type;
 return ( _Fma ( ( type ) _Left, ( type ) _Middle, ( type ) _Right ) );
 }
#line 155
inline float _Remquo(float _Left, float _Right, int *_Pquo) 
#line 156
{ 
#line 157
return ::remquof(_Left, _Right, _Pquo); 
#line 158
} 
#line 160
inline double _Remquo(double _Left, double _Right, int *_Pquo) 
#line 161
{ 
#line 162
return ::remquo(_Left, _Right, _Pquo); 
#line 163
} 
#line 165
inline long double _Remquo(long double _Left, long double _Right, int *_Pquo) 
#line 166
{ 
#line 167
return ::remquol(_Left, _Right, _Pquo); 
#line 168
} 
#line 170
template < class _Ty1,
 class _Ty2 > inline
 typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type
 remquo ( _Ty1 _Left, _Ty2 _Right, int * _Pquo )
 {
 typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type;
 return ( _Remquo ( ( type ) _Left, ( type ) _Right, _Pquo ) );
 }
#line 179
extern "C" __declspec(dllimport) double __cdecl acosh(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type acosh ( _Ty _Left ) { return ( :: acosh ( ( double ) _Left ) ); }
#line 180
extern "C" __declspec(dllimport) double __cdecl asinh(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type asinh ( _Ty _Left ) { return ( :: asinh ( ( double ) _Left ) ); }
#line 181
extern "C" __declspec(dllimport) double __cdecl atanh(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type atanh ( _Ty _Left ) { return ( :: atanh ( ( double ) _Left ) ); }
#line 182
extern "C" __declspec(dllimport) double __cdecl cbrt(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type cbrt ( _Ty _Left ) { return ( :: cbrt ( ( double ) _Left ) ); }
#line 183
extern "C" __declspec(dllimport) double __cdecl copysign(double, double); template < class _Ty1, class _Ty2 > inline typename :: std :: enable_if < :: std :: is_arithmetic < _Ty1 > :: value && :: std :: is_arithmetic < _Ty2 > :: value, typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type copysign ( _Ty1 _Left, _Ty2 _Right ) { typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type; return ( :: copysign ( ( type ) _Left, ( type ) _Right ) ); }
#line 184
extern "C" __declspec(dllimport) double __cdecl erf(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type erf ( _Ty _Left ) { return ( :: erf ( ( double ) _Left ) ); }
#line 185
extern "C" __declspec(dllimport) double __cdecl erfc(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type erfc ( _Ty _Left ) { return ( :: erfc ( ( double ) _Left ) ); }
#line 186
extern "C" __declspec(dllimport) double __cdecl expm1(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type expm1 ( _Ty _Left ) { return ( :: expm1 ( ( double ) _Left ) ); }
#line 187
extern "C" __declspec(dllimport) double __cdecl exp2(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type exp2 ( _Ty _Left ) { return ( :: exp2 ( ( double ) _Left ) ); }
#line 188
extern "C" __declspec(dllimport) double __cdecl fdim(double, double); template < class _Ty1, class _Ty2 > inline typename :: std :: enable_if < :: std :: is_arithmetic < _Ty1 > :: value && :: std :: is_arithmetic < _Ty2 > :: value, typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type fdim ( _Ty1 _Left, _Ty2 _Right ) { typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type; return ( :: fdim ( ( type ) _Left, ( type ) _Right ) ); }
#line 190
extern "C" __declspec(dllimport) double __cdecl fmax(double, double); template < class _Ty1, class _Ty2 > inline typename :: std :: enable_if < :: std :: is_arithmetic < _Ty1 > :: value && :: std :: is_arithmetic < _Ty2 > :: value, typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type fmax ( _Ty1 _Left, _Ty2 _Right ) { typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type; return ( :: fmax ( ( type ) _Left, ( type ) _Right ) ); }
#line 191
extern "C" __declspec(dllimport) double __cdecl fmin(double, double); template < class _Ty1, class _Ty2 > inline typename :: std :: enable_if < :: std :: is_arithmetic < _Ty1 > :: value && :: std :: is_arithmetic < _Ty2 > :: value, typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type fmin ( _Ty1 _Left, _Ty2 _Right ) { typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type; return ( :: fmin ( ( type ) _Left, ( type ) _Right ) ); }
#line 192
extern "C" __declspec(dllimport) double __cdecl hypot(double, double); template < class _Ty1, class _Ty2 > inline typename :: std :: enable_if < :: std :: is_arithmetic < _Ty1 > :: value && :: std :: is_arithmetic < _Ty2 > :: value, typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type hypot ( _Ty1 _Left, _Ty2 _Right ) { typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type; return ( :: hypot ( ( type ) _Left, ( type ) _Right ) ); }
#line 193
extern "C" __declspec(dllimport) int __cdecl ilogb(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, int > :: type ilogb ( _Ty _Left ) { return ( :: ilogb ( ( double ) _Left ) ); }
#line 194
extern "C" __declspec(dllimport) double __cdecl lgamma(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type lgamma ( _Ty _Left ) { return ( :: lgamma ( ( double ) _Left ) ); }
#line 195
extern "C" __declspec(dllimport) __int64 __cdecl llrint(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, long long > :: type llrint ( _Ty _Left ) { return ( :: llrint ( ( double ) _Left ) ); }
#line 196
extern "C" __declspec(dllimport) __int64 __cdecl llround(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, long long > :: type llround ( _Ty _Left ) { return ( :: llround ( ( double ) _Left ) ); }
#line 197
extern "C" __declspec(dllimport) double __cdecl log1p(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type log1p ( _Ty _Left ) { return ( :: log1p ( ( double ) _Left ) ); }
#line 198
extern "C" __declspec(dllimport) double __cdecl log2(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type log2 ( _Ty _Left ) { return ( :: log2 ( ( double ) _Left ) ); }
#line 199
extern "C" __declspec(dllimport) double __cdecl logb(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type logb ( _Ty _Left ) { return ( :: logb ( ( double ) _Left ) ); }
#line 200
extern "C" __declspec(dllimport) long __cdecl lrint(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, long > :: type lrint ( _Ty _Left ) { return ( :: lrint ( ( double ) _Left ) ); }
#line 201
extern "C" __declspec(dllimport) long __cdecl lround(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, long > :: type lround ( _Ty _Left ) { return ( :: lround ( ( double ) _Left ) ); }
#line 202
extern "C" __declspec(dllimport) double __cdecl nearbyint(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type nearbyint ( _Ty _Left ) { return ( :: nearbyint ( ( double ) _Left ) ); }
#line 203
extern "C" __declspec(dllimport) double __cdecl nextafter(double, double); template < class _Ty1, class _Ty2 > inline typename :: std :: enable_if < :: std :: is_arithmetic < _Ty1 > :: value && :: std :: is_arithmetic < _Ty2 > :: value, typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type nextafter ( _Ty1 _Left, _Ty2 _Right ) { typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type; return ( :: nextafter ( ( type ) _Left, ( type ) _Right ) ); }
#line 204
extern "C" __declspec(dllimport) double __cdecl nexttoward(double, long double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type nexttoward ( _Ty _Left, long double _Arg2 ) { return ( :: nexttoward ( ( double ) _Left, _Arg2 ) ); }
#line 205
extern "C" __declspec(dllimport) double __cdecl remainder(double, double); template < class _Ty1, class _Ty2 > inline typename :: std :: enable_if < :: std :: is_arithmetic < _Ty1 > :: value && :: std :: is_arithmetic < _Ty2 > :: value, typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type remainder ( _Ty1 _Left, _Ty2 _Right ) { typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type; return ( :: remainder ( ( type ) _Left, ( type ) _Right ) ); }
#line 207
extern "C" __declspec(dllimport) double __cdecl rint(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type rint ( _Ty _Left ) { return ( :: rint ( ( double ) _Left ) ); }
#line 208
extern "C" __declspec(dllimport) double __cdecl round(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type round ( _Ty _Left ) { return ( :: round ( ( double ) _Left ) ); }
#line 209
extern "C" __declspec(dllimport) double __cdecl scalbln(double, long); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type scalbln ( _Ty _Left, long _Arg2 ) { return ( :: scalbln ( ( double ) _Left, _Arg2 ) ); }
#line 210
extern "C" __declspec(dllimport) double __cdecl scalbn(double, int); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type scalbn ( _Ty _Left, int _Arg2 ) { return ( :: scalbn ( ( double ) _Left, _Arg2 ) ); }
#line 211
extern "C" __declspec(dllimport) double __cdecl tgamma(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type tgamma ( _Ty _Left ) { return ( :: tgamma ( ( double ) _Left ) ); }
#line 212
extern "C" __declspec(dllimport) double __cdecl trunc(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type trunc ( _Ty _Left ) { return ( :: trunc ( ( double ) _Left ) ); }
#line 215
#pragma warning(pop)
#pragma pack ( pop )
#line 651 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
namespace std { 
#line 652
using ::abs;using ::acos;using ::asin;
#line 653
using ::atan;using ::atan2;using ::ceil;
#line 654
using ::cos;using ::cosh;using ::exp;
#line 655
using ::fabs;using ::floor;using ::fmod;
#line 656
using ::frexp;using ::ldexp;using ::log;
#line 657
using ::log10;using ::modf;using ::pow;
#line 658
using ::sin;using ::sinh;using ::sqrt;
#line 659
using ::tan;using ::tanh;
#line 661
using ::acosf;using ::asinf;
#line 662
using ::atanf;using ::atan2f;using ::ceilf;
#line 663
using ::cosf;using ::coshf;using ::expf;
#line 664
using ::fabsf;using ::floorf;using ::fmodf;
#line 665
using ::frexpf;using ::ldexpf;using ::logf;
#line 666
using ::log10f;using ::modff;using ::powf;
#line 667
using ::sinf;using ::sinhf;using ::sqrtf;
#line 668
using ::tanf;using ::tanhf;
#line 670
using ::acosl;using ::asinl;
#line 671
using ::atanl;using ::atan2l;using ::ceill;
#line 672
using ::cosl;using ::coshl;using ::expl;
#line 673
using ::fabsl;using ::floorl;using ::fmodl;
#line 674
using ::frexpl;using ::ldexpl;using ::logl;
#line 675
using ::log10l;using ::modfl;using ::powl;
#line 676
using ::sinl;using ::sinhl;using ::sqrtl;
#line 677
using ::tanl;using ::tanhl;
#line 679
using ::float_t;using ::double_t;
#line 681
using ::acosh;using ::asinh;using ::atanh;
#line 682
using ::cbrt;using ::erf;using ::erfc;
#line 683
using ::expm1;using ::exp2;
#line 684
using ::hypot;using ::ilogb;using ::lgamma;
#line 685
using ::log1p;using ::log2;using ::logb;
#line 686
using ::llrint;using ::lrint;using ::nearbyint;
#line 687
using ::rint;using ::llround;using ::lround;
#line 688
using ::fdim;using ::fma;using ::fmax;using ::fmin;
#line 689
using ::round;using ::trunc;
#line 690
using ::remainder;using ::remquo;
#line 691
using ::copysign;using ::nan;using ::nextafter;
#line 692
using ::scalbn;using ::scalbln;
#line 693
using ::nexttoward;using ::tgamma;
#line 695
using ::acoshf;using ::asinhf;using ::atanhf;
#line 696
using ::cbrtf;using ::erff;using ::erfcf;
#line 697
using ::expm1f;using ::exp2f;
#line 698
using ::hypotf;using ::ilogbf;using ::lgammaf;
#line 699
using ::log1pf;using ::log2f;using ::logbf;
#line 700
using ::llrintf;using ::lrintf;using ::nearbyintf;
#line 701
using ::rintf;using ::llroundf;using ::lroundf;
#line 702
using ::fdimf;using ::fmaf;using ::fmaxf;using ::fminf;
#line 703
using ::roundf;using ::truncf;
#line 704
using ::remainderf;using ::remquof;
#line 705
using ::copysignf;using ::nanf;
#line 706
using ::nextafterf;using ::scalbnf;using ::scalblnf;
#line 707
using ::nexttowardf;using ::tgammaf;
#line 709
using ::acoshl;using ::asinhl;using ::atanhl;
#line 710
using ::cbrtl;using ::erfl;using ::erfcl;
#line 711
using ::expm1l;using ::exp2l;
#line 712
using ::hypotl;using ::ilogbl;using ::lgammal;
#line 713
using ::log1pl;using ::log2l;using ::logbl;
#line 714
using ::llrintl;using ::lrintl;using ::nearbyintl;
#line 715
using ::rintl;using ::llroundl;using ::lroundl;
#line 716
using ::fdiml;using ::fmal;using ::fmaxl;using ::fminl;
#line 717
using ::roundl;using ::truncl;
#line 718
using ::remainderl;using ::remquol;
#line 719
using ::copysignl;using ::nanl;
#line 720
using ::nextafterl;using ::scalbnl;using ::scalblnl;
#line 721
using ::nexttowardl;using ::tgammal;
#line 723
using ::fpclassify;using ::signbit;
#line 724
using ::isfinite;using ::isinf;
#line 725
using ::isnan;using ::isnormal;
#line 726
using ::isgreater;using ::isgreaterequal;
#line 727
using ::isless;using ::islessequal;
#line 728
using ::islessgreater;using ::isunordered;
#line 729
}
#line 9034 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) double __cdecl _hypot(double x, double y); 
#line 9035
extern "C" __declspec(dllimport) float __cdecl _hypotf(float x, float y); 
#line 9045 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline bool signbit(long double) throw(); 
#line 9046
extern "C" __declspec(dllimport) int _ldsign(long double); 
#line 9089 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline bool signbit(double) throw(); 
#line 9090
extern "C" __declspec(dllimport) int _dsign(double); 
#line 9134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline bool signbit(float) throw(); 
#line 9135
extern "C" __declspec(dllimport) int _fdsign(float); 
#line 9143 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static __inline bool isinf(long double a); 
#line 9178 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static __inline bool isinf(double a); 
#line 9216 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static __inline bool isinf(float a); 
#line 9223 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static __inline bool isnan(long double a); 
#line 9256 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static __inline bool isnan(double a); 
#line 9292 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static __inline bool isnan(float a); 
#line 9299 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static __inline bool isfinite(long double a); 
#line 9336 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static __inline bool isfinite(double a); 
#line 9372 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static __inline bool isfinite(float a); 
#line 9380 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
template< class T> extern T _Pow_int(T, int) throw(); 
#line 9381
extern inline __int64 abs(__int64) throw(); 
#line 9452 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline long __cdecl abs(long) throw(); 
#line 9456 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl abs(float) throw(); 
#line 9457
extern inline double __cdecl abs(double) throw(); 
#line 9458
extern inline float __cdecl fabs(float) throw(); 
#line 9459
extern inline float __cdecl ceil(float) throw(); 
#line 9460
extern inline float __cdecl floor(float) throw(); 
#line 9461
extern inline float __cdecl sqrt(float) throw(); 
#line 9462
extern inline float __cdecl pow(float, float) throw(); 
#line 9487 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl pow(float, int) throw(); 
#line 9488
extern inline double __cdecl pow(double, int) throw(); 
#line 9491 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl log(float) throw(); 
#line 9492
extern inline float __cdecl log10(float) throw(); 
#line 9493
extern inline float __cdecl fmod(float, float) throw(); 
#line 9494
extern inline float __cdecl modf(float, float *) throw(); 
#line 9495
extern inline float __cdecl exp(float) throw(); 
#line 9496
extern inline float __cdecl frexp(float, int *) throw(); 
#line 9497
extern inline float __cdecl ldexp(float, int) throw(); 
#line 9498
extern inline float __cdecl asin(float) throw(); 
#line 9499
extern inline float __cdecl sin(float) throw(); 
#line 9500
extern inline float __cdecl sinh(float) throw(); 
#line 9501
extern inline float __cdecl acos(float) throw(); 
#line 9502
extern inline float __cdecl cos(float) throw(); 
#line 9503
extern inline float __cdecl cosh(float) throw(); 
#line 9504
extern inline float __cdecl atan(float) throw(); 
#line 9505
extern inline float __cdecl atan2(float, float) throw(); 
#line 9506
extern inline float __cdecl tan(float) throw(); 
#line 9507
extern inline float __cdecl tanh(float) throw(); 
#line 9681 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl logb(float) throw(); 
#line 9682
extern inline int __cdecl ilogb(float) throw(); 
#line 9683
extern float __cdecl scalbn(float, float) throw(); 
#line 9684
extern inline float __cdecl scalbln(float, long) throw(); 
#line 9685
extern inline float __cdecl exp2(float) throw(); 
#line 9686
extern inline float __cdecl expm1(float) throw(); 
#line 9687
extern inline float __cdecl log2(float) throw(); 
#line 9688
extern inline float __cdecl log1p(float) throw(); 
#line 9689
extern inline float __cdecl acosh(float) throw(); 
#line 9690
extern inline float __cdecl asinh(float) throw(); 
#line 9691
extern inline float __cdecl atanh(float) throw(); 
#line 9692
extern inline float __cdecl hypot(float, float) throw(); 
#line 9693
extern float __cdecl norm3d(float, float, float) throw(); 
#line 9694
extern float __cdecl norm4d(float, float, float, float) throw(); 
#line 9695
extern inline float __cdecl cbrt(float) throw(); 
#line 9696
extern inline float __cdecl erf(float) throw(); 
#line 9697
extern inline float __cdecl erfc(float) throw(); 
#line 9698
extern inline float __cdecl lgamma(float) throw(); 
#line 9699
extern inline float __cdecl tgamma(float) throw(); 
#line 9700
extern inline float __cdecl copysign(float, float) throw(); 
#line 9701
extern inline float __cdecl nextafter(float, float) throw(); 
#line 9702
extern inline float __cdecl remainder(float, float) throw(); 
#line 9703
extern inline float __cdecl remquo(float, float, int *) throw(); 
#line 9704
extern inline float __cdecl round(float) throw(); 
#line 9705
extern inline long __cdecl lround(float) throw(); 
#line 9706
extern inline __int64 __cdecl llround(float) throw(); 
#line 9707
extern inline float __cdecl trunc(float) throw(); 
#line 9708
extern inline float __cdecl rint(float) throw(); 
#line 9709
extern inline long __cdecl lrint(float) throw(); 
#line 9710
extern inline __int64 __cdecl llrint(float) throw(); 
#line 9711
extern inline float __cdecl nearbyint(float) throw(); 
#line 9712
extern inline float __cdecl fdim(float, float) throw(); 
#line 9713
extern inline float __cdecl fma(float, float, float) throw(); 
#line 9714
extern inline float __cdecl fmax(float, float) throw(); 
#line 9715
extern inline float __cdecl fmin(float, float) throw(); 
#line 9718 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float exp10(float a); 
#line 9720
static inline float rsqrt(float a); 
#line 9722
static inline float rcbrt(float a); 
#line 9724
static inline float sinpi(float a); 
#line 9726
static inline float cospi(float a); 
#line 9728
static inline void sincospi(float a, float * sptr, float * cptr); 
#line 9730
static inline void sincos(float a, float * sptr, float * cptr); 
#line 9732
static inline float j0(float a); 
#line 9734
static inline float j1(float a); 
#line 9736
static inline float jn(int n, float a); 
#line 9738
static inline float y0(float a); 
#line 9740
static inline float y1(float a); 
#line 9742
static inline float yn(int n, float a); 
#line 9744
static inline float cyl_bessel_i0(float a); 
#line 9746
static inline float cyl_bessel_i1(float a); 
#line 9748
static inline float erfinv(float a); 
#line 9750
static inline float erfcinv(float a); 
#line 9752
static inline float normcdfinv(float a); 
#line 9754
static inline float normcdf(float a); 
#line 9756
static inline float erfcx(float a); 
#line 9758
static inline double copysign(double a, float b); 
#line 9760
static inline float copysign(float a, double b); 
#line 9762
static inline unsigned min(unsigned a, unsigned b); 
#line 9764
static inline unsigned min(int a, unsigned b); 
#line 9766
static inline unsigned min(unsigned a, int b); 
#line 9768
static inline long min(long a, long b); 
#line 9770
static inline unsigned long min(unsigned long a, unsigned long b); 
#line 9772
static inline unsigned long min(long a, unsigned long b); 
#line 9774
static inline unsigned long min(unsigned long a, long b); 
#line 9776
static inline __int64 min(__int64 a, __int64 b); 
#line 9778
static inline unsigned __int64 min(unsigned __int64 a, unsigned __int64 b); 
#line 9780
static inline unsigned __int64 min(__int64 a, unsigned __int64 b); 
#line 9782
static inline unsigned __int64 min(unsigned __int64 a, __int64 b); 
#line 9784
static inline float min(float a, float b); 
#line 9786
static inline double min(double a, double b); 
#line 9788
static inline double min(float a, double b); 
#line 9790
static inline double min(double a, float b); 
#line 9792
static inline unsigned max(unsigned a, unsigned b); 
#line 9794
static inline unsigned max(int a, unsigned b); 
#line 9796
static inline unsigned max(unsigned a, int b); 
#line 9798
static inline long max(long a, long b); 
#line 9800
static inline unsigned long max(unsigned long a, unsigned long b); 
#line 9802
static inline unsigned long max(long a, unsigned long b); 
#line 9804
static inline unsigned long max(unsigned long a, long b); 
#line 9806
static inline __int64 max(__int64 a, __int64 b); 
#line 9808
static inline unsigned __int64 max(unsigned __int64 a, unsigned __int64 b); 
#line 9810
static inline unsigned __int64 max(__int64 a, unsigned __int64 b); 
#line 9812
static inline unsigned __int64 max(unsigned __int64 a, __int64 b); 
#line 9814
static inline float max(float a, float b); 
#line 9816
static inline double max(double a, double b); 
#line 9818
static inline double max(float a, double b); 
#line 9820
static inline double max(double a, float b); 
#line 354 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline bool isinf(long double a) 
#line 355
{ 
#line 359 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return isinf< long double> (a); 
#line 361 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 370 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline bool isinf(double a) 
#line 371
{ 
#line 375 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return isinf< double> (a); 
#line 377 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 386 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline bool isinf(float a) 
#line 387
{ 
#line 391 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return isinf< float> (a); 
#line 393 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 402 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline bool isnan(long double a) 
#line 403
{ 
#line 407 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return isnan< long double> (a); 
#line 409 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 418 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline bool isnan(double a) 
#line 419
{ 
#line 423 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return isnan< double> (a); 
#line 425 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 434 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline bool isnan(float a) 
#line 435
{ 
#line 439 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return isnan< float> (a); 
#line 441 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 450 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline bool isfinite(long double a) 
#line 451
{ 
#line 455 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return isfinite< long double> (a); 
#line 457 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 466 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline bool isfinite(double a) 
#line 467
{ 
#line 471 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return isfinite< double> (a); 
#line 473 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 482 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline bool isfinite(float a) 
#line 483
{ 
#line 487 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return isfinite< float> (a); 
#line 489 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 681 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float exp10(float a) 
#line 682
{ 
#line 683
return exp10f(a); 
#line 684
} 
#line 686
static inline float rsqrt(float a) 
#line 687
{ 
#line 688
return rsqrtf(a); 
#line 689
} 
#line 691
static inline float rcbrt(float a) 
#line 692
{ 
#line 693
return rcbrtf(a); 
#line 694
} 
#line 696
static inline float sinpi(float a) 
#line 697
{ 
#line 698
return sinpif(a); 
#line 699
} 
#line 701
static inline float cospi(float a) 
#line 702
{ 
#line 703
return cospif(a); 
#line 704
} 
#line 706
static inline void sincospi(float a, float *sptr, float *cptr) 
#line 707
{ 
#line 708
sincospif(a, sptr, cptr); 
#line 709
} 
#line 711
static inline void sincos(float a, float *sptr, float *cptr) 
#line 712
{ 
#line 713
sincosf(a, sptr, cptr); 
#line 714
} 
#line 716
static inline float j0(float a) 
#line 717
{ 
#line 718
return j0f(a); 
#line 719
} 
#line 721
static inline float j1(float a) 
#line 722
{ 
#line 723
return j1f(a); 
#line 724
} 
#line 726
static inline float jn(int n, float a) 
#line 727
{ 
#line 728
return jnf(n, a); 
#line 729
} 
#line 731
static inline float y0(float a) 
#line 732
{ 
#line 733
return y0f(a); 
#line 734
} 
#line 736
static inline float y1(float a) 
#line 737
{ 
#line 738
return y1f(a); 
#line 739
} 
#line 741
static inline float yn(int n, float a) 
#line 742
{ 
#line 743
return ynf(n, a); 
#line 744
} 
#line 746
static inline float cyl_bessel_i0(float a) 
#line 747
{ 
#line 748
return cyl_bessel_i0f(a); 
#line 749
} 
#line 751
static inline float cyl_bessel_i1(float a) 
#line 752
{ 
#line 753
return cyl_bessel_i1f(a); 
#line 754
} 
#line 756
static inline float erfinv(float a) 
#line 757
{ 
#line 758
return erfinvf(a); 
#line 759
} 
#line 761
static inline float erfcinv(float a) 
#line 762
{ 
#line 763
return erfcinvf(a); 
#line 764
} 
#line 766
static inline float normcdfinv(float a) 
#line 767
{ 
#line 768
return normcdfinvf(a); 
#line 769
} 
#line 771
static inline float normcdf(float a) 
#line 772
{ 
#line 773
return normcdff(a); 
#line 774
} 
#line 776
static inline float erfcx(float a) 
#line 777
{ 
#line 778
return erfcxf(a); 
#line 779
} 
#line 781
static inline double copysign(double a, float b) 
#line 782
{ 
#line 783
return copysign(a, (double)b); 
#line 784
} 
#line 786
static inline float copysign(float a, double b) 
#line 787
{ 
#line 788
return copysignf(a, (float)b); 
#line 789
} 
#line 791
static inline unsigned min(unsigned a, unsigned b) 
#line 792
{ 
#line 793
return umin(a, b); 
#line 794
} 
#line 796
static inline unsigned min(int a, unsigned b) 
#line 797
{ 
#line 798
return umin((unsigned)a, b); 
#line 799
} 
#line 801
static inline unsigned min(unsigned a, int b) 
#line 802
{ 
#line 803
return umin(a, (unsigned)b); 
#line 804
} 
#line 806
static inline long min(long a, long b) 
#line 807
{ 
#line 810
#pragma warning (disable: 4127)
#line 813 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
if (sizeof(long) == sizeof(int)) { 
#line 815
#pragma warning (default: 4127)
#line 817 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (long)min((int)a, (int)b); 
#line 818
} else { 
#line 819
return (long)llmin((__int64)a, (__int64)b); 
#line 820
}  
#line 821
} 
#line 823
static inline unsigned long min(unsigned long a, unsigned long b) 
#line 824
{ 
#line 826
#pragma warning (disable: 4127)
#line 828 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 830
#pragma warning (default: 4127)
#line 832 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (unsigned long)umin((unsigned)a, (unsigned)b); 
#line 833
} else { 
#line 834
return (unsigned long)ullmin((unsigned __int64)a, (unsigned __int64)b); 
#line 835
}  
#line 836
} 
#line 838
static inline unsigned long min(long a, unsigned long b) 
#line 839
{ 
#line 841
#pragma warning (disable: 4127)
#line 843 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 845
#pragma warning (default: 4127)
#line 847 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (unsigned long)umin((unsigned)a, (unsigned)b); 
#line 848
} else { 
#line 849
return (unsigned long)ullmin((unsigned __int64)a, (unsigned __int64)b); 
#line 850
}  
#line 851
} 
#line 853
static inline unsigned long min(unsigned long a, long b) 
#line 854
{ 
#line 856
#pragma warning (disable: 4127)
#line 858 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 860
#pragma warning (default: 4127)
#line 862 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (unsigned long)umin((unsigned)a, (unsigned)b); 
#line 863
} else { 
#line 864
return (unsigned long)ullmin((unsigned __int64)a, (unsigned __int64)b); 
#line 865
}  
#line 866
} 
#line 868
static inline __int64 min(__int64 a, __int64 b) 
#line 869
{ 
#line 870
return llmin(a, b); 
#line 871
} 
#line 873
static inline unsigned __int64 min(unsigned __int64 a, unsigned __int64 b) 
#line 874
{ 
#line 875
return ullmin(a, b); 
#line 876
} 
#line 878
static inline unsigned __int64 min(__int64 a, unsigned __int64 b) 
#line 879
{ 
#line 880
return ullmin((unsigned __int64)a, b); 
#line 881
} 
#line 883
static inline unsigned __int64 min(unsigned __int64 a, __int64 b) 
#line 884
{ 
#line 885
return ullmin(a, (unsigned __int64)b); 
#line 886
} 
#line 888
static inline float min(float a, float b) 
#line 889
{ 
#line 890
return fminf(a, b); 
#line 891
} 
#line 893
static inline double min(double a, double b) 
#line 894
{ 
#line 895
return fmin(a, b); 
#line 896
} 
#line 898
static inline double min(float a, double b) 
#line 899
{ 
#line 900
return fmin((double)a, b); 
#line 901
} 
#line 903
static inline double min(double a, float b) 
#line 904
{ 
#line 905
return fmin(a, (double)b); 
#line 906
} 
#line 908
static inline unsigned max(unsigned a, unsigned b) 
#line 909
{ 
#line 910
return umax(a, b); 
#line 911
} 
#line 913
static inline unsigned max(int a, unsigned b) 
#line 914
{ 
#line 915
return umax((unsigned)a, b); 
#line 916
} 
#line 918
static inline unsigned max(unsigned a, int b) 
#line 919
{ 
#line 920
return umax(a, (unsigned)b); 
#line 921
} 
#line 923
static inline long max(long a, long b) 
#line 924
{ 
#line 927
#pragma warning (disable: 4127)
#line 929 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
if (sizeof(long) == sizeof(int)) { 
#line 931
#pragma warning (default: 4127)
#line 933 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (long)max((int)a, (int)b); 
#line 934
} else { 
#line 935
return (long)llmax((__int64)a, (__int64)b); 
#line 936
}  
#line 937
} 
#line 939
static inline unsigned long max(unsigned long a, unsigned long b) 
#line 940
{ 
#line 942
#pragma warning (disable: 4127)
#line 944 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 946
#pragma warning (default: 4127)
#line 948 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (unsigned long)umax((unsigned)a, (unsigned)b); 
#line 949
} else { 
#line 950
return (unsigned long)ullmax((unsigned __int64)a, (unsigned __int64)b); 
#line 951
}  
#line 952
} 
#line 954
static inline unsigned long max(long a, unsigned long b) 
#line 955
{ 
#line 957
#pragma warning (disable: 4127)
#line 959 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 961
#pragma warning (default: 4127)
#line 963 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (unsigned long)umax((unsigned)a, (unsigned)b); 
#line 964
} else { 
#line 965
return (unsigned long)ullmax((unsigned __int64)a, (unsigned __int64)b); 
#line 966
}  
#line 967
} 
#line 969
static inline unsigned long max(unsigned long a, long b) 
#line 970
{ 
#line 972
#pragma warning (disable: 4127)
#line 974 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 976
#pragma warning (default: 4127)
#line 978 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (unsigned long)umax((unsigned)a, (unsigned)b); 
#line 979
} else { 
#line 980
return (unsigned long)ullmax((unsigned __int64)a, (unsigned __int64)b); 
#line 981
}  
#line 982
} 
#line 984
static inline __int64 max(__int64 a, __int64 b) 
#line 985
{ 
#line 986
return llmax(a, b); 
#line 987
} 
#line 989
static inline unsigned __int64 max(unsigned __int64 a, unsigned __int64 b) 
#line 990
{ 
#line 991
return ullmax(a, b); 
#line 992
} 
#line 994
static inline unsigned __int64 max(__int64 a, unsigned __int64 b) 
#line 995
{ 
#line 996
return ullmax((unsigned __int64)a, b); 
#line 997
} 
#line 999
static inline unsigned __int64 max(unsigned __int64 a, __int64 b) 
#line 1000
{ 
#line 1001
return ullmax(a, (unsigned __int64)b); 
#line 1002
} 
#line 1004
static inline float max(float a, float b) 
#line 1005
{ 
#line 1006
return fmaxf(a, b); 
#line 1007
} 
#line 1009
static inline double max(double a, double b) 
#line 1010
{ 
#line 1011
return fmax(a, b); 
#line 1012
} 
#line 1014
static inline double max(float a, double b) 
#line 1015
{ 
#line 1016
return fmax((double)a, b); 
#line 1017
} 
#line 1019
static inline double max(double a, float b) 
#line 1020
{ 
#line 1021
return fmax(a, (double)b); 
#line 1022
} 
#line 1028
#pragma warning(disable : 4211)
#line 1033 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline int min(int a, int b) 
#line 1034
{ 
#line 1035
return (a < b) ? a : b; 
#line 1036
} 
#line 1038
static inline unsigned umin(unsigned a, unsigned b) 
#line 1039
{ 
#line 1040
return (a < b) ? a : b; 
#line 1041
} 
#line 1043
static inline __int64 llmin(__int64 a, __int64 b) 
#line 1044
{ 
#line 1045
return (a < b) ? a : b; 
#line 1046
} 
#line 1048
static inline unsigned __int64 ullmin(unsigned __int64 a, unsigned __int64 
#line 1049
b) 
#line 1050
{ 
#line 1051
return (a < b) ? a : b; 
#line 1052
} 
#line 1054
static inline int max(int a, int b) 
#line 1055
{ 
#line 1056
return (a > b) ? a : b; 
#line 1057
} 
#line 1059
static inline unsigned umax(unsigned a, unsigned b) 
#line 1060
{ 
#line 1061
return (a > b) ? a : b; 
#line 1062
} 
#line 1064
static inline __int64 llmax(__int64 a, __int64 b) 
#line 1065
{ 
#line 1066
return (a > b) ? a : b; 
#line 1067
} 
#line 1069
static inline unsigned __int64 ullmax(unsigned __int64 a, unsigned __int64 
#line 1070
b) 
#line 1071
{ 
#line 1072
return (a > b) ? a : b; 
#line 1073
} 
#line 1076
#pragma warning(default: 4211)
#line 77 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
template< class T, int dim = 1> 
#line 78
struct surface : public surfaceReference { 
#line 81
surface() 
#line 82
{ 
#line 83
(::surfaceReference::channelDesc) = cudaCreateChannelDesc< T> (); 
#line 84
} 
#line 86
surface(::cudaChannelFormatDesc desc) 
#line 87
{ 
#line 88
(::surfaceReference::channelDesc) = desc; 
#line 89
} 
#line 91 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
}; 
#line 93
template< int dim> 
#line 94
struct surface< void, dim>  : public surfaceReference { 
#line 97
surface() 
#line 98
{ 
#line 99
(::surfaceReference::channelDesc) = cudaCreateChannelDesc< void> (); 
#line 100
} 
#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
}; 
#line 77 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
template< class T, int texType = 1, cudaTextureReadMode mode = cudaReadModeElementType> 
#line 78
struct texture : public textureReference { 
#line 81
texture(int norm = 0, ::cudaTextureFilterMode 
#line 82
fMode = cudaFilterModePoint, ::cudaTextureAddressMode 
#line 83
aMode = cudaAddressModeClamp) 
#line 84
{ 
#line 85
(::textureReference::normalized) = norm; 
#line 86
(::textureReference::filterMode) = fMode; 
#line 87
((::textureReference::addressMode)[0]) = aMode; 
#line 88
((::textureReference::addressMode)[1]) = aMode; 
#line 89
((::textureReference::addressMode)[2]) = aMode; 
#line 90
(::textureReference::channelDesc) = cudaCreateChannelDesc< T> (); 
#line 91
(::textureReference::sRGB) = 0; 
#line 92
} 
#line 94
texture(int norm, ::cudaTextureFilterMode 
#line 95
fMode, ::cudaTextureAddressMode 
#line 96
aMode, ::cudaChannelFormatDesc 
#line 97
desc) 
#line 98
{ 
#line 99
(::textureReference::normalized) = norm; 
#line 100
(::textureReference::filterMode) = fMode; 
#line 101
((::textureReference::addressMode)[0]) = aMode; 
#line 102
((::textureReference::addressMode)[1]) = aMode; 
#line 103
((::textureReference::addressMode)[2]) = aMode; 
#line 104
(::textureReference::channelDesc) = desc; 
#line 105
(::textureReference::sRGB) = 0; 
#line 106
} 
#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
}; 
#line 90 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
extern "C" {
#line 3230
}
#line 3238
static __inline int mulhi(int a, int b); 
#line 3240
static __inline unsigned mulhi(unsigned a, unsigned b); 
#line 3242
static __inline unsigned mulhi(int a, unsigned b); 
#line 3244
static __inline unsigned mulhi(unsigned a, int b); 
#line 3246
static __inline __int64 mul64hi(__int64 a, __int64 b); 
#line 3248
static __inline unsigned __int64 mul64hi(unsigned __int64 a, unsigned __int64 b); 
#line 3250
static __inline unsigned __int64 mul64hi(__int64 a, unsigned __int64 b); 
#line 3252
static __inline unsigned __int64 mul64hi(unsigned __int64 a, __int64 b); 
#line 3254
static __inline int float_as_int(float a); 
#line 3256
static __inline float int_as_float(int a); 
#line 3258
static __inline unsigned float_as_uint(float a); 
#line 3260
static __inline float uint_as_float(unsigned a); 
#line 3262
static __inline float saturate(float a); 
#line 3264
static __inline int mul24(int a, int b); 
#line 3266
static __inline unsigned umul24(unsigned a, unsigned b); 
#line 3268
__declspec(deprecated("Please use __trap() instead.")) static __inline void trap(); 
#line 3271
__declspec(deprecated("Please use __brkpt() instead.")) static __inline void brkpt(int c = 0); 
#line 3273
__declspec(deprecated("Please use __syncthreads() instead.")) static __inline void syncthreads(); 
#line 3275
__declspec(deprecated("Please use __prof_trigger() instead.")) static __inline void prof_trigger(int e); 
#line 3277
__declspec(deprecated("Please use __threadfence() instead.")) static __inline void threadfence(bool global = true); 
#line 3279
static __inline int float2int(float a, cudaRoundMode mode = cudaRoundZero); 
#line 3281
static __inline unsigned float2uint(float a, cudaRoundMode mode = cudaRoundZero); 
#line 3283
static __inline float int2float(int a, cudaRoundMode mode = cudaRoundNearest); 
#line 3285
static __inline float uint2float(unsigned a, cudaRoundMode mode = cudaRoundNearest); 
#line 83 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline int mulhi(int a, int b) 
#line 84
{int volatile ___ = 1;(void)a;(void)b;
#line 86
::exit(___);}
#if 0
#line 84
{ 
#line 85
return __mulhi(a, b); 
#line 86
} 
#endif
#line 88 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline unsigned mulhi(unsigned a, unsigned b) 
#line 89
{int volatile ___ = 1;(void)a;(void)b;
#line 91
::exit(___);}
#if 0
#line 89
{ 
#line 90
return __umulhi(a, b); 
#line 91
} 
#endif
#line 93 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline unsigned mulhi(int a, unsigned b) 
#line 94
{int volatile ___ = 1;(void)a;(void)b;
#line 96
::exit(___);}
#if 0
#line 94
{ 
#line 95
return __umulhi((unsigned)a, b); 
#line 96
} 
#endif
#line 98 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline unsigned mulhi(unsigned a, int b) 
#line 99
{int volatile ___ = 1;(void)a;(void)b;
#line 101
::exit(___);}
#if 0
#line 99
{ 
#line 100
return __umulhi(a, (unsigned)b); 
#line 101
} 
#endif
#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline __int64 mul64hi(__int64 a, __int64 b) 
#line 104
{int volatile ___ = 1;(void)a;(void)b;
#line 106
::exit(___);}
#if 0
#line 104
{ 
#line 105
return __mul64hi(a, b); 
#line 106
} 
#endif
#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline unsigned __int64 mul64hi(unsigned __int64 a, unsigned __int64 b) 
#line 109
{int volatile ___ = 1;(void)a;(void)b;
#line 111
::exit(___);}
#if 0
#line 109
{ 
#line 110
return __umul64hi(a, b); 
#line 111
} 
#endif
#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline unsigned __int64 mul64hi(__int64 a, unsigned __int64 b) 
#line 114
{int volatile ___ = 1;(void)a;(void)b;
#line 116
::exit(___);}
#if 0
#line 114
{ 
#line 115
return __umul64hi((unsigned __int64)a, b); 
#line 116
} 
#endif
#line 118 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline unsigned __int64 mul64hi(unsigned __int64 a, __int64 b) 
#line 119
{int volatile ___ = 1;(void)a;(void)b;
#line 121
::exit(___);}
#if 0
#line 119
{ 
#line 120
return __umul64hi(a, (unsigned __int64)b); 
#line 121
} 
#endif
#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline int float_as_int(float a) 
#line 124
{int volatile ___ = 1;(void)a;
#line 126
::exit(___);}
#if 0
#line 124
{ 
#line 125
return __float_as_int(a); 
#line 126
} 
#endif
#line 128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline float int_as_float(int a) 
#line 129
{int volatile ___ = 1;(void)a;
#line 131
::exit(___);}
#if 0
#line 129
{ 
#line 130
return __int_as_float(a); 
#line 131
} 
#endif
#line 133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline unsigned float_as_uint(float a) 
#line 134
{int volatile ___ = 1;(void)a;
#line 136
::exit(___);}
#if 0
#line 134
{ 
#line 135
return __float_as_uint(a); 
#line 136
} 
#endif
#line 138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline float uint_as_float(unsigned a) 
#line 139
{int volatile ___ = 1;(void)a;
#line 141
::exit(___);}
#if 0
#line 139
{ 
#line 140
return __uint_as_float(a); 
#line 141
} 
#endif
#line 142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline float saturate(float a) 
#line 143
{int volatile ___ = 1;(void)a;
#line 145
::exit(___);}
#if 0
#line 143
{ 
#line 144
return __saturatef(a); 
#line 145
} 
#endif
#line 147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline int mul24(int a, int b) 
#line 148
{int volatile ___ = 1;(void)a;(void)b;
#line 150
::exit(___);}
#if 0
#line 148
{ 
#line 149
return __mul24(a, b); 
#line 150
} 
#endif
#line 152 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline unsigned umul24(unsigned a, unsigned b) 
#line 153
{int volatile ___ = 1;(void)a;(void)b;
#line 155
::exit(___);}
#if 0
#line 153
{ 
#line 154
return __umul24(a, b); 
#line 155
} 
#endif
#line 157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline void trap() 
#line 158
{int volatile ___ = 1;
#line 160
::exit(___);}
#if 0
#line 158
{ 
#line 159
__trap(); 
#line 160
} 
#endif
#line 163 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline void brkpt(int c) 
#line 164
{int volatile ___ = 1;(void)c;
#line 166
::exit(___);}
#if 0
#line 164
{ 
#line 165
__brkpt(c); 
#line 166
} 
#endif
#line 168 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline void syncthreads() 
#line 169
{int volatile ___ = 1;
#line 171
::exit(___);}
#if 0
#line 169
{ 
#line 170
__syncthreads(); 
#line 171
} 
#endif
#line 173 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline void prof_trigger(int e) 
#line 174
{int volatile ___ = 1;(void)e;
#line 191
::exit(___);}
#if 0
#line 174
{ 
#line 175
if (e == 0) { __prof_trigger(0); } else { 
#line 176
if (e == 1) { __prof_trigger(1); } else { 
#line 177
if (e == 2) { __prof_trigger(2); } else { 
#line 178
if (e == 3) { __prof_trigger(3); } else { 
#line 179
if (e == 4) { __prof_trigger(4); } else { 
#line 180
if (e == 5) { __prof_trigger(5); } else { 
#line 181
if (e == 6) { __prof_trigger(6); } else { 
#line 182
if (e == 7) { __prof_trigger(7); } else { 
#line 183
if (e == 8) { __prof_trigger(8); } else { 
#line 184
if (e == 9) { __prof_trigger(9); } else { 
#line 185
if (e == 10) { __prof_trigger(10); } else { 
#line 186
if (e == 11) { __prof_trigger(11); } else { 
#line 187
if (e == 12) { __prof_trigger(12); } else { 
#line 188
if (e == 13) { __prof_trigger(13); } else { 
#line 189
if (e == 14) { __prof_trigger(14); } else { 
#line 190
if (e == 15) { __prof_trigger(15); }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  
#line 191
} 
#endif
#line 193 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline void threadfence(bool global) 
#line 194
{int volatile ___ = 1;(void)global;
#line 196
::exit(___);}
#if 0
#line 194
{ 
#line 195
global ? __threadfence() : __threadfence_block(); 
#line 196
} 
#endif
#line 198 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline int float2int(float a, cudaRoundMode mode) 
#line 199
{int volatile ___ = 1;(void)a;(void)mode;
#line 204
::exit(___);}
#if 0
#line 199
{ 
#line 200
return (mode == (cudaRoundNearest)) ? __float2int_rn(a) : ((mode == (cudaRoundPosInf)) ? __float2int_ru(a) : ((mode == (cudaRoundMinInf)) ? __float2int_rd(a) : __float2int_rz(a))); 
#line 204
} 
#endif
#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline unsigned float2uint(float a, cudaRoundMode mode) 
#line 207
{int volatile ___ = 1;(void)a;(void)mode;
#line 212
::exit(___);}
#if 0
#line 207
{ 
#line 208
return (mode == (cudaRoundNearest)) ? __float2uint_rn(a) : ((mode == (cudaRoundPosInf)) ? __float2uint_ru(a) : ((mode == (cudaRoundMinInf)) ? __float2uint_rd(a) : __float2uint_rz(a))); 
#line 212
} 
#endif
#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline float int2float(int a, cudaRoundMode mode) 
#line 215
{int volatile ___ = 1;(void)a;(void)mode;
#line 220
::exit(___);}
#if 0
#line 215
{ 
#line 216
return (mode == (cudaRoundZero)) ? __int2float_rz(a) : ((mode == (cudaRoundPosInf)) ? __int2float_ru(a) : ((mode == (cudaRoundMinInf)) ? __int2float_rd(a) : __int2float_rn(a))); 
#line 220
} 
#endif
#line 222 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline float uint2float(unsigned a, cudaRoundMode mode) 
#line 223
{int volatile ___ = 1;(void)a;(void)mode;
#line 228
::exit(___);}
#if 0
#line 223
{ 
#line 224
return (mode == (cudaRoundZero)) ? __uint2float_rz(a) : ((mode == (cudaRoundPosInf)) ? __uint2float_ru(a) : ((mode == (cudaRoundMinInf)) ? __uint2float_rd(a) : __uint2float_rn(a))); 
#line 228
} 
#endif
#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline int atomicAdd(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 111
{ } 
#endif
#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned atomicAdd(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 113
{ } 
#endif
#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline int atomicSub(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 115
{ } 
#endif
#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned atomicSub(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 117
{ } 
#endif
#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline int atomicExch(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 119
{ } 
#endif
#line 121 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned atomicExch(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 121
{ } 
#endif
#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline float atomicExch(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 123
{ } 
#endif
#line 125 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline int atomicMin(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 125
{ } 
#endif
#line 127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned atomicMin(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 127
{ } 
#endif
#line 129 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline int atomicMax(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 129
{ } 
#endif
#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned atomicMax(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 131
{ } 
#endif
#line 133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned atomicInc(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 133
{ } 
#endif
#line 135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned atomicDec(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 135
{ } 
#endif
#line 137 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline int atomicAnd(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 137
{ } 
#endif
#line 139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned atomicAnd(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 139
{ } 
#endif
#line 141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline int atomicOr(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 141
{ } 
#endif
#line 143 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned atomicOr(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 143
{ } 
#endif
#line 145 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline int atomicXor(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 145
{ } 
#endif
#line 147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned atomicXor(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 147
{ } 
#endif
#line 149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline int atomicCAS(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
#line 149
{ } 
#endif
#line 151 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned atomicCAS(unsigned *address, unsigned compare, unsigned val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
#line 151
{ } 
#endif
#line 164 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
extern "C" {
#line 175 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
}
#line 185 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned __int64 atomicAdd(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 185
{ } 
#endif
#line 187 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned __int64 atomicExch(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 187
{ } 
#endif
#line 189 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned __int64 atomicCAS(unsigned __int64 *address, unsigned __int64 compare, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
#line 189
{ } 
#endif
#line 191 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline bool any(bool cond) {int volatile ___ = 1;(void)cond;::exit(___);}
#if 0
#line 191
{ } 
#endif
#line 193 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline bool all(bool cond) {int volatile ___ = 1;(void)cond;::exit(___);}
#if 0
#line 193
{ } 
#endif
#line 80 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
extern "C" {
#line 1134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
}
#line 1143 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
static __inline double fma(double a, double b, double c, cudaRoundMode mode); 
#line 1145
static __inline double dmul(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
#line 1147
static __inline double dadd(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
#line 1149
static __inline double dsub(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
#line 1151
static __inline int double2int(double a, cudaRoundMode mode = cudaRoundZero); 
#line 1153
static __inline unsigned double2uint(double a, cudaRoundMode mode = cudaRoundZero); 
#line 1155
static __inline __int64 double2ll(double a, cudaRoundMode mode = cudaRoundZero); 
#line 1157
static __inline unsigned __int64 double2ull(double a, cudaRoundMode mode = cudaRoundZero); 
#line 1159
static __inline double ll2double(__int64 a, cudaRoundMode mode = cudaRoundNearest); 
#line 1161
static __inline double ull2double(unsigned __int64 a, cudaRoundMode mode = cudaRoundNearest); 
#line 1163
static __inline double int2double(int a, cudaRoundMode mode = cudaRoundNearest); 
#line 1165
static __inline double uint2double(unsigned a, cudaRoundMode mode = cudaRoundNearest); 
#line 1167
static __inline double float2double(float a, cudaRoundMode mode = cudaRoundNearest); 
#line 85 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline double fma(double a, double b, double c, cudaRoundMode mode) 
#line 86
{int volatile ___ = 1;(void)a;(void)b;(void)c;(void)mode;
#line 91
::exit(___);}
#if 0
#line 86
{ 
#line 87
return (mode == (cudaRoundZero)) ? __fma_rz(a, b, c) : ((mode == (cudaRoundPosInf)) ? __fma_ru(a, b, c) : ((mode == (cudaRoundMinInf)) ? __fma_rd(a, b, c) : __fma_rn(a, b, c))); 
#line 91
} 
#endif
#line 93 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline double dmul(double a, double b, cudaRoundMode mode) 
#line 94
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
#line 99
::exit(___);}
#if 0
#line 94
{ 
#line 95
return (mode == (cudaRoundZero)) ? __dmul_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dmul_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dmul_rd(a, b) : __dmul_rn(a, b))); 
#line 99
} 
#endif
#line 101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline double dadd(double a, double b, cudaRoundMode mode) 
#line 102
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
#line 107
::exit(___);}
#if 0
#line 102
{ 
#line 103
return (mode == (cudaRoundZero)) ? __dadd_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dadd_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dadd_rd(a, b) : __dadd_rn(a, b))); 
#line 107
} 
#endif
#line 109 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline double dsub(double a, double b, cudaRoundMode mode) 
#line 110
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
#line 115
::exit(___);}
#if 0
#line 110
{ 
#line 111
return (mode == (cudaRoundZero)) ? __dsub_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dsub_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dsub_rd(a, b) : __dsub_rn(a, b))); 
#line 115
} 
#endif
#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline int double2int(double a, cudaRoundMode mode) 
#line 118
{int volatile ___ = 1;(void)a;(void)mode;
#line 123
::exit(___);}
#if 0
#line 118
{ 
#line 119
return (mode == (cudaRoundNearest)) ? __double2int_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2int_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2int_rd(a) : __double2int_rz(a))); 
#line 123
} 
#endif
#line 125 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline unsigned double2uint(double a, cudaRoundMode mode) 
#line 126
{int volatile ___ = 1;(void)a;(void)mode;
#line 131
::exit(___);}
#if 0
#line 126
{ 
#line 127
return (mode == (cudaRoundNearest)) ? __double2uint_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2uint_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2uint_rd(a) : __double2uint_rz(a))); 
#line 131
} 
#endif
#line 133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline __int64 double2ll(double a, cudaRoundMode mode) 
#line 134
{int volatile ___ = 1;(void)a;(void)mode;
#line 139
::exit(___);}
#if 0
#line 134
{ 
#line 135
return (mode == (cudaRoundNearest)) ? __double2ll_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2ll_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2ll_rd(a) : __double2ll_rz(a))); 
#line 139
} 
#endif
#line 141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline unsigned __int64 double2ull(double a, cudaRoundMode mode) 
#line 142
{int volatile ___ = 1;(void)a;(void)mode;
#line 147
::exit(___);}
#if 0
#line 142
{ 
#line 143
return (mode == (cudaRoundNearest)) ? __double2ull_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2ull_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2ull_rd(a) : __double2ull_rz(a))); 
#line 147
} 
#endif
#line 149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline double ll2double(__int64 a, cudaRoundMode mode) 
#line 150
{int volatile ___ = 1;(void)a;(void)mode;
#line 155
::exit(___);}
#if 0
#line 150
{ 
#line 151
return (mode == (cudaRoundZero)) ? __ll2double_rz(a) : ((mode == (cudaRoundPosInf)) ? __ll2double_ru(a) : ((mode == (cudaRoundMinInf)) ? __ll2double_rd(a) : __ll2double_rn(a))); 
#line 155
} 
#endif
#line 157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline double ull2double(unsigned __int64 a, cudaRoundMode mode) 
#line 158
{int volatile ___ = 1;(void)a;(void)mode;
#line 163
::exit(___);}
#if 0
#line 158
{ 
#line 159
return (mode == (cudaRoundZero)) ? __ull2double_rz(a) : ((mode == (cudaRoundPosInf)) ? __ull2double_ru(a) : ((mode == (cudaRoundMinInf)) ? __ull2double_rd(a) : __ull2double_rn(a))); 
#line 163
} 
#endif
#line 165 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline double int2double(int a, cudaRoundMode mode) 
#line 166
{int volatile ___ = 1;(void)a;(void)mode;
#line 168
::exit(___);}
#if 0
#line 166
{ 
#line 167
return (double)a; 
#line 168
} 
#endif
#line 170 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline double uint2double(unsigned a, cudaRoundMode mode) 
#line 171
{int volatile ___ = 1;(void)a;(void)mode;
#line 173
::exit(___);}
#if 0
#line 171
{ 
#line 172
return (double)a; 
#line 173
} 
#endif
#line 175 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline double float2double(float a, cudaRoundMode mode) 
#line 176
{int volatile ___ = 1;(void)a;(void)mode;
#line 178
::exit(___);}
#if 0
#line 176
{ 
#line 177
return (double)a; 
#line 178
} 
#endif
#line 94 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.h"
static __inline float atomicAdd(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 94
{ } 
#endif
#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
static __inline __int64 atomicMin(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 102
{ } 
#endif
#line 104 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
static __inline __int64 atomicMax(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 104
{ } 
#endif
#line 106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
static __inline unsigned __int64 atomicMin(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 106
{ } 
#endif
#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
static __inline unsigned __int64 atomicMax(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 108
{ } 
#endif
#line 110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
static __inline unsigned __int64 atomicAnd(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 110
{ } 
#endif
#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
static __inline unsigned __int64 atomicOr(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 112
{ } 
#endif
#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
static __inline unsigned __int64 atomicXor(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 114
{ } 
#endif
#line 308 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline double atomicAdd(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 308
{ } 
#endif
#line 311 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicAdd_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 311
{ } 
#endif
#line 314 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicAdd_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 314
{ } 
#endif
#line 317 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicAdd_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 317
{ } 
#endif
#line 320 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicAdd_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 320
{ } 
#endif
#line 323 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicAdd_block(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 323
{ } 
#endif
#line 326 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicAdd_system(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 326
{ } 
#endif
#line 329 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline float atomicAdd_block(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 329
{ } 
#endif
#line 332 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline float atomicAdd_system(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 332
{ } 
#endif
#line 335 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline double atomicAdd_block(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 335
{ } 
#endif
#line 338 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline double atomicAdd_system(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 338
{ } 
#endif
#line 341 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicExch_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 341
{ } 
#endif
#line 344 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicExch_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 344
{ } 
#endif
#line 347 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicExch_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 347
{ } 
#endif
#line 350 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicExch_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 350
{ } 
#endif
#line 353 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicExch_block(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 353
{ } 
#endif
#line 356 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicExch_system(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 356
{ } 
#endif
#line 359 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline float atomicExch_block(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 359
{ } 
#endif
#line 362 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline float atomicExch_system(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 362
{ } 
#endif
#line 365 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicMin_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 365
{ } 
#endif
#line 368 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicMin_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 368
{ } 
#endif
#line 371 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicMin_block(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 371
{ } 
#endif
#line 374 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicMin_system(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 374
{ } 
#endif
#line 377 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicMin_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 377
{ } 
#endif
#line 380 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicMin_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 380
{ } 
#endif
#line 383 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicMin_block(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 383
{ } 
#endif
#line 386 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicMin_system(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 386
{ } 
#endif
#line 389 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicMax_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 389
{ } 
#endif
#line 392 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicMax_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 392
{ } 
#endif
#line 395 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicMax_block(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 395
{ } 
#endif
#line 398 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicMax_system(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 398
{ } 
#endif
#line 401 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicMax_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 401
{ } 
#endif
#line 404 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicMax_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 404
{ } 
#endif
#line 407 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicMax_block(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 407
{ } 
#endif
#line 410 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicMax_system(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 410
{ } 
#endif
#line 413 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicInc_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 413
{ } 
#endif
#line 416 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicInc_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 416
{ } 
#endif
#line 419 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicDec_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 419
{ } 
#endif
#line 422 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicDec_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 422
{ } 
#endif
#line 425 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicCAS_block(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
#line 425
{ } 
#endif
#line 428 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicCAS_system(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
#line 428
{ } 
#endif
#line 431 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicCAS_block(unsigned *address, unsigned compare, unsigned 
#line 432
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
#line 432
{ } 
#endif
#line 435 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicCAS_system(unsigned *address, unsigned compare, unsigned 
#line 436
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
#line 436
{ } 
#endif
#line 439 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicCAS_block(unsigned __int64 *address, unsigned __int64 
#line 440
compare, unsigned __int64 
#line 441
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
#line 441
{ } 
#endif
#line 444 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicCAS_system(unsigned __int64 *address, unsigned __int64 
#line 445
compare, unsigned __int64 
#line 446
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
#line 446
{ } 
#endif
#line 449 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicAnd_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 449
{ } 
#endif
#line 452 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicAnd_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 452
{ } 
#endif
#line 455 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicAnd_block(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 455
{ } 
#endif
#line 458 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicAnd_system(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 458
{ } 
#endif
#line 461 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicAnd_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 461
{ } 
#endif
#line 464 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicAnd_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 464
{ } 
#endif
#line 467 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicAnd_block(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 467
{ } 
#endif
#line 470 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicAnd_system(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 470
{ } 
#endif
#line 473 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicOr_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 473
{ } 
#endif
#line 476 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicOr_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 476
{ } 
#endif
#line 479 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicOr_block(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 479
{ } 
#endif
#line 482 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicOr_system(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 482
{ } 
#endif
#line 485 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicOr_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 485
{ } 
#endif
#line 488 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicOr_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 488
{ } 
#endif
#line 491 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicOr_block(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 491
{ } 
#endif
#line 494 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicOr_system(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 494
{ } 
#endif
#line 497 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicXor_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 497
{ } 
#endif
#line 500 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicXor_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 500
{ } 
#endif
#line 503 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicXor_block(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 503
{ } 
#endif
#line 506 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicXor_system(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 506
{ } 
#endif
#line 509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicXor_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 509
{ } 
#endif
#line 512 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicXor_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 512
{ } 
#endif
#line 515 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicXor_block(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 515
{ } 
#endif
#line 518 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicXor_system(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 518
{ } 
#endif
#line 79 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
extern "C" {
#line 1466 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
}
#line 1475 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
static __inline unsigned ballot(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
#line 1475
{ } 
#endif
#line 1477 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
static __inline int syncthreads_count(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
#line 1477
{ } 
#endif
#line 1479 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
static __inline bool syncthreads_and(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
#line 1479
{ } 
#endif
#line 1481 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
static __inline bool syncthreads_or(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
#line 1481
{ } 
#endif
#line 1486 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
static __inline unsigned __isGlobal(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 1486
{ } 
#endif
#line 98 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline int __shfl(int var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
#line 98
{ } 
#endif
#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned __shfl(unsigned var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
#line 100
{ } 
#endif
#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline int __shfl_up(int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 102
{ } 
#endif
#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned __shfl_up(unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 103
{ } 
#endif
#line 105 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline int __shfl_down(int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 105
{ } 
#endif
#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned __shfl_down(unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 107
{ } 
#endif
#line 109 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline int __shfl_xor(int var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
#line 109
{ } 
#endif
#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned __shfl_xor(unsigned var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
#line 111
{ } 
#endif
#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline float __shfl(float var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
#line 113
{ } 
#endif
#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline float __shfl_up(float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 115
{ } 
#endif
#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline float __shfl_down(float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 117
{ } 
#endif
#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline float __shfl_xor(float var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
#line 119
{ } 
#endif
#line 122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline __int64 __shfl(__int64 var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
#line 122
{ } 
#endif
#line 124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned __int64 __shfl(unsigned __int64 var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
#line 124
{ } 
#endif
#line 126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline __int64 __shfl_up(__int64 var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 126
{ } 
#endif
#line 128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned __int64 __shfl_up(unsigned __int64 var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 128
{ } 
#endif
#line 130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline __int64 __shfl_down(__int64 var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 130
{ } 
#endif
#line 132 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned __int64 __shfl_down(unsigned __int64 var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 132
{ } 
#endif
#line 134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline __int64 __shfl_xor(__int64 var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
#line 134
{ } 
#endif
#line 136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned __int64 __shfl_xor(unsigned __int64 var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
#line 136
{ } 
#endif
#line 138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline double __shfl(double var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
#line 138
{ } 
#endif
#line 140 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline double __shfl_up(double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 140
{ } 
#endif
#line 142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline double __shfl_down(double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 142
{ } 
#endif
#line 144 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline double __shfl_xor(double var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
#line 144
{ } 
#endif
#line 148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline long __shfl(long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
#line 148
{ } 
#endif
#line 150 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned long __shfl(unsigned long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
#line 150
{ } 
#endif
#line 152 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline long __shfl_up(long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 152
{ } 
#endif
#line 154 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned long __shfl_up(unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 154
{ } 
#endif
#line 156 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline long __shfl_down(long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 156
{ } 
#endif
#line 158 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned long __shfl_down(unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 158
{ } 
#endif
#line 160 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline long __shfl_xor(long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
#line 160
{ } 
#endif
#line 162 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned long __shfl_xor(unsigned long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
#line 162
{ } 
#endif
#line 89 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline long __ldg(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 89
{ } 
#endif
#line 90 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned long __ldg(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 90
{ } 
#endif
#line 92 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char __ldg(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 92
{ } 
#endif
#line 93 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline signed char __ldg(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 93
{ } 
#endif
#line 94 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short __ldg(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 94
{ } 
#endif
#line 95 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int __ldg(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 95
{ } 
#endif
#line 96 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline __int64 __ldg(const __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 96
{ } 
#endif
#line 97 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char2 __ldg(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 97
{ } 
#endif
#line 98 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char4 __ldg(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 98
{ } 
#endif
#line 99 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short2 __ldg(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 99
{ } 
#endif
#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short4 __ldg(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 100
{ } 
#endif
#line 101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int2 __ldg(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 101
{ } 
#endif
#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int4 __ldg(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 102
{ } 
#endif
#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline longlong2 __ldg(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 103
{ } 
#endif
#line 105 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned char __ldg(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 105
{ } 
#endif
#line 106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned short __ldg(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 106
{ } 
#endif
#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __ldg(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 107
{ } 
#endif
#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __int64 __ldg(const unsigned __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 108
{ } 
#endif
#line 109 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uchar2 __ldg(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 109
{ } 
#endif
#line 110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uchar4 __ldg(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 110
{ } 
#endif
#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ushort2 __ldg(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 111
{ } 
#endif
#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ushort4 __ldg(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 112
{ } 
#endif
#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uint2 __ldg(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 113
{ } 
#endif
#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uint4 __ldg(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 114
{ } 
#endif
#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ulonglong2 __ldg(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 115
{ } 
#endif
#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float __ldg(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 117
{ } 
#endif
#line 118 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline double __ldg(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 118
{ } 
#endif
#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float2 __ldg(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 119
{ } 
#endif
#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float4 __ldg(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 120
{ } 
#endif
#line 121 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline double2 __ldg(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 121
{ } 
#endif
#line 125 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline long __ldcg(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 125
{ } 
#endif
#line 126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned long __ldcg(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 126
{ } 
#endif
#line 128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char __ldcg(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 128
{ } 
#endif
#line 129 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline signed char __ldcg(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 129
{ } 
#endif
#line 130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short __ldcg(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 130
{ } 
#endif
#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int __ldcg(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 131
{ } 
#endif
#line 132 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline __int64 __ldcg(const __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 132
{ } 
#endif
#line 133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char2 __ldcg(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 133
{ } 
#endif
#line 134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char4 __ldcg(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 134
{ } 
#endif
#line 135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short2 __ldcg(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 135
{ } 
#endif
#line 136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short4 __ldcg(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 136
{ } 
#endif
#line 137 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int2 __ldcg(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 137
{ } 
#endif
#line 138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int4 __ldcg(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 138
{ } 
#endif
#line 139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline longlong2 __ldcg(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 139
{ } 
#endif
#line 141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned char __ldcg(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 141
{ } 
#endif
#line 142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned short __ldcg(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 142
{ } 
#endif
#line 143 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __ldcg(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 143
{ } 
#endif
#line 144 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __int64 __ldcg(const unsigned __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 144
{ } 
#endif
#line 145 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uchar2 __ldcg(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 145
{ } 
#endif
#line 146 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uchar4 __ldcg(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 146
{ } 
#endif
#line 147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ushort2 __ldcg(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 147
{ } 
#endif
#line 148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ushort4 __ldcg(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 148
{ } 
#endif
#line 149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uint2 __ldcg(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 149
{ } 
#endif
#line 150 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uint4 __ldcg(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 150
{ } 
#endif
#line 151 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ulonglong2 __ldcg(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 151
{ } 
#endif
#line 153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float __ldcg(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 153
{ } 
#endif
#line 154 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline double __ldcg(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 154
{ } 
#endif
#line 155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float2 __ldcg(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 155
{ } 
#endif
#line 156 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float4 __ldcg(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 156
{ } 
#endif
#line 157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline double2 __ldcg(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 157
{ } 
#endif
#line 161 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline long __ldca(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 161
{ } 
#endif
#line 162 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned long __ldca(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 162
{ } 
#endif
#line 164 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char __ldca(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 164
{ } 
#endif
#line 165 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline signed char __ldca(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 165
{ } 
#endif
#line 166 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short __ldca(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 166
{ } 
#endif
#line 167 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int __ldca(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 167
{ } 
#endif
#line 168 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline __int64 __ldca(const __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 168
{ } 
#endif
#line 169 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char2 __ldca(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 169
{ } 
#endif
#line 170 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char4 __ldca(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 170
{ } 
#endif
#line 171 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short2 __ldca(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 171
{ } 
#endif
#line 172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short4 __ldca(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 172
{ } 
#endif
#line 173 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int2 __ldca(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 173
{ } 
#endif
#line 174 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int4 __ldca(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 174
{ } 
#endif
#line 175 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline longlong2 __ldca(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 175
{ } 
#endif
#line 177 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned char __ldca(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 177
{ } 
#endif
#line 178 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned short __ldca(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 178
{ } 
#endif
#line 179 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __ldca(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 179
{ } 
#endif
#line 180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __int64 __ldca(const unsigned __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 180
{ } 
#endif
#line 181 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uchar2 __ldca(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 181
{ } 
#endif
#line 182 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uchar4 __ldca(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 182
{ } 
#endif
#line 183 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ushort2 __ldca(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 183
{ } 
#endif
#line 184 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ushort4 __ldca(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 184
{ } 
#endif
#line 185 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uint2 __ldca(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 185
{ } 
#endif
#line 186 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uint4 __ldca(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 186
{ } 
#endif
#line 187 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ulonglong2 __ldca(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 187
{ } 
#endif
#line 189 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float __ldca(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 189
{ } 
#endif
#line 190 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline double __ldca(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 190
{ } 
#endif
#line 191 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float2 __ldca(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 191
{ } 
#endif
#line 192 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float4 __ldca(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 192
{ } 
#endif
#line 193 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline double2 __ldca(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 193
{ } 
#endif
#line 197 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline long __ldcs(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 197
{ } 
#endif
#line 198 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned long __ldcs(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 198
{ } 
#endif
#line 200 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char __ldcs(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 200
{ } 
#endif
#line 201 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline signed char __ldcs(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 201
{ } 
#endif
#line 202 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short __ldcs(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 202
{ } 
#endif
#line 203 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int __ldcs(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 203
{ } 
#endif
#line 204 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline __int64 __ldcs(const __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 204
{ } 
#endif
#line 205 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char2 __ldcs(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 205
{ } 
#endif
#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char4 __ldcs(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 206
{ } 
#endif
#line 207 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short2 __ldcs(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 207
{ } 
#endif
#line 208 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short4 __ldcs(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 208
{ } 
#endif
#line 209 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int2 __ldcs(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 209
{ } 
#endif
#line 210 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int4 __ldcs(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 210
{ } 
#endif
#line 211 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline longlong2 __ldcs(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 211
{ } 
#endif
#line 213 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned char __ldcs(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 213
{ } 
#endif
#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned short __ldcs(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 214
{ } 
#endif
#line 215 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __ldcs(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 215
{ } 
#endif
#line 216 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __int64 __ldcs(const unsigned __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 216
{ } 
#endif
#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uchar2 __ldcs(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 217
{ } 
#endif
#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uchar4 __ldcs(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 218
{ } 
#endif
#line 219 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ushort2 __ldcs(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 219
{ } 
#endif
#line 220 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ushort4 __ldcs(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 220
{ } 
#endif
#line 221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uint2 __ldcs(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 221
{ } 
#endif
#line 222 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uint4 __ldcs(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 222
{ } 
#endif
#line 223 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ulonglong2 __ldcs(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 223
{ } 
#endif
#line 225 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float __ldcs(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 225
{ } 
#endif
#line 226 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline double __ldcs(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 226
{ } 
#endif
#line 227 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float2 __ldcs(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 227
{ } 
#endif
#line 228 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float4 __ldcs(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 228
{ } 
#endif
#line 229 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline double2 __ldcs(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 229
{ } 
#endif
#line 236 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __funnelshift_l(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
#line 236
{ } 
#endif
#line 237 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __funnelshift_lc(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
#line 237
{ } 
#endif
#line 240 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __funnelshift_r(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
#line 240
{ } 
#endif
#line 241 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __funnelshift_rc(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
#line 241
{ } 
#endif
#line 91 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline int __dp2a_lo(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
#line 91
{ } 
#endif
#line 92 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline unsigned __dp2a_lo(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
#line 92
{ } 
#endif
#line 94 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline int __dp2a_lo(short2 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
#line 94
{ } 
#endif
#line 95 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline unsigned __dp2a_lo(ushort2 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
#line 95
{ } 
#endif
#line 97 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline int __dp2a_hi(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
#line 97
{ } 
#endif
#line 98 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline unsigned __dp2a_hi(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
#line 98
{ } 
#endif
#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline int __dp2a_hi(short2 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
#line 100
{ } 
#endif
#line 101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline unsigned __dp2a_hi(ushort2 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
#line 101
{ } 
#endif
#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline int __dp4a(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
#line 108
{ } 
#endif
#line 109 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline unsigned __dp4a(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
#line 109
{ } 
#endif
#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline int __dp4a(char4 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
#line 111
{ } 
#endif
#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline unsigned __dp4a(uchar4 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
#line 112
{ } 
#endif
#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 101
surf1Dread(T *res, ::surface< void, 1>  surf, int x, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 102
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)s;(void)mode;
#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}
#if 0
#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{ 
#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
} 
#endif
#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline T 
#line 114
surf1Dread(::surface< void, 1>  surf, int x, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 115
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}
#if 0
#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{ 
#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
} 
#endif
#line 125 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 126
surf1Dread(T *res, ::surface< void, 1>  surf, int x, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 127
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)mode;
#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}
#if 0
#line 127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{ 
#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
} 
#endif
#line 260 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 261
surf2Dread(T *res, ::surface< void, 2>  surf, int x, int y, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 262
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)s;(void)mode;
#line 271 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}
#if 0
#line 262 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{ 
#line 271 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
} 
#endif
#line 273 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline T 
#line 274
surf2Dread(::surface< void, 2>  surf, int x, int y, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 275
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 283 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}
#if 0
#line 275 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{ 
#line 283 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
} 
#endif
#line 285 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 286
surf2Dread(T *res, ::surface< void, 2>  surf, int x, int y, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 287
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)mode;
#line 291 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}
#if 0
#line 287 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{ 
#line 291 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
} 
#endif
#line 422 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 423
surf3Dread(T *res, ::surface< void, 3>  surf, int x, int y, int z, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 424
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)z;(void)s;(void)mode;
#line 433 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}
#if 0
#line 424 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{ 
#line 433 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
} 
#endif
#line 435 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline T 
#line 436
surf3Dread(::surface< void, 3>  surf, int x, int y, int z, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 437
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 445 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}
#if 0
#line 437 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{ 
#line 445 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
} 
#endif
#line 447 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 448
surf3Dread(T *res, ::surface< void, 3>  surf, int x, int y, int z, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 449
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 453 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}
#if 0
#line 449 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{ 
#line 453 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
} 
#endif
#line 582 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 583
surf1DLayeredread(T *res, ::surface< void, 241>  surf, int x, int layer, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 584
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)layer;(void)s;(void)mode;
#line 593 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}
#if 0
#line 584 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{ 
#line 593 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
} 
#endif
#line 595 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline T 
#line 596
surf1DLayeredread(::surface< void, 241>  surf, int x, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 597
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 605 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}
#if 0
#line 597 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{ 
#line 605 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
} 
#endif
#line 607 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 608
surf1DLayeredread(T *res, ::surface< void, 241>  surf, int x, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 609
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)layer;(void)mode;
#line 613 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}
#if 0
#line 609 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{ 
#line 613 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
} 
#endif
#line 768 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 769
surf2DLayeredread(T *res, ::surface< void, 242>  surf, int x, int y, int layer, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 770
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layer;(void)s;(void)mode;
#line 779 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}
#if 0
#line 770 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{ 
#line 779 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
} 
#endif
#line 781 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline T 
#line 782
surf2DLayeredread(::surface< void, 242>  surf, int x, int y, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 783
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 791 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}
#if 0
#line 783 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{ 
#line 791 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
} 
#endif
#line 793 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 794
surf2DLayeredread(T *res, ::surface< void, 242>  surf, int x, int y, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 795
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 799 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}
#if 0
#line 795 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{ 
#line 799 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
} 
#endif
#line 919 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 920
surfCubemapread(T *res, ::surface< void, 12>  surf, int x, int y, int face, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 921
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)face;(void)s;(void)mode;
#line 930 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}
#if 0
#line 921 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{ 
#line 930 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
} 
#endif
#line 932 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline T 
#line 933
surfCubemapread(::surface< void, 12>  surf, int x, int y, int face, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 934
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 942 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}
#if 0
#line 934 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{ 
#line 942 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
} 
#endif
#line 944 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 945
surfCubemapread(T *res, ::surface< void, 12>  surf, int x, int y, int face, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 946
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 950 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}
#if 0
#line 946 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{ 
#line 950 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
} 
#endif
#line 1070 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1071
surfCubemapLayeredread(T *res, ::surface< void, 252>  surf, int x, int y, int layerFace, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1072
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layerFace;(void)s;(void)mode;
#line 1081 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}
#if 0
#line 1072 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{ 
#line 1081 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
} 
#endif
#line 1083 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline T 
#line 1084
surfCubemapLayeredread(::surface< void, 252>  surf, int x, int y, int layerFace, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1085
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1093 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}
#if 0
#line 1085 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{ 
#line 1093 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
} 
#endif
#line 1095 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1096
surfCubemapLayeredread(T *res, ::surface< void, 252>  surf, int x, int y, int layerFace, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1097
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}
#if 0
#line 1097 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{ 
#line 1101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
} 
#endif
#line 1232 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1233
surf1Dwrite(T val, ::surface< void, 1>  surf, int x, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1234
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)s;(void)mode;
#line 1254
::exit(___);}
#if 0
#line 1234
{ 
#line 1254
} 
#endif
#line 1256 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1257
surf1Dwrite(T val, ::surface< void, 1>  surf, int x, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1258
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 1262
::exit(___);}
#if 0
#line 1258
{ 
#line 1262
} 
#endif
#line 1377 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1378
surf2Dwrite(T val, ::surface< void, 2>  surf, int x, int y, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1379
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)s;(void)mode;
#line 1399
::exit(___);}
#if 0
#line 1379
{ 
#line 1399
} 
#endif
#line 1401 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1402
surf2Dwrite(T val, ::surface< void, 2>  surf, int x, int y, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1403
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 1407
::exit(___);}
#if 0
#line 1403
{ 
#line 1407
} 
#endif
#line 1520 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1521
surf3Dwrite(T val, ::surface< void, 3>  surf, int x, int y, int z, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1522
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)s;(void)mode;
#line 1542 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}
#if 0
#line 1522 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{ 
#line 1542 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
} 
#endif
#line 1544 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1545
surf3Dwrite(T val, ::surface< void, 3>  surf, int x, int y, int z, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1546
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 1550 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}
#if 0
#line 1546 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{ 
#line 1550 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
} 
#endif
#line 1666 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> static __forceinline void 
#line 1667
surf1DLayeredwrite(T val, ::surface< void, 241>  surf, int x, int layer, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1668
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)s;(void)mode;
#line 1688 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}
#if 0
#line 1668 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{ 
#line 1688 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
} 
#endif
#line 1690 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> static __forceinline void 
#line 1691
surf1DLayeredwrite(T val, ::surface< void, 241>  surf, int x, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1692
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 1696 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}
#if 0
#line 1692 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{ 
#line 1696 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
} 
#endif
#line 1822 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1823
surf2DLayeredwrite(T val, ::surface< void, 242>  surf, int x, int y, int layer, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1824
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)s;(void)mode;
#line 1844 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}
#if 0
#line 1824 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{ 
#line 1844 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
} 
#endif
#line 1846 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1847
surf2DLayeredwrite(T val, ::surface< void, 242>  surf, int x, int y, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1848
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1852 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}
#if 0
#line 1848 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{ 
#line 1852 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
} 
#endif
#line 1958 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1959
surfCubemapwrite(T val, ::surface< void, 12>  surf, int x, int y, int face, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1960
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)s;(void)mode;
#line 1980 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}
#if 0
#line 1960 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{ 
#line 1980 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
} 
#endif
#line 1982 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1983
surfCubemapwrite(T val, ::surface< void, 12>  surf, int x, int y, int face, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1984
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1988 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}
#if 0
#line 1984 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{ 
#line 1988 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
} 
#endif
#line 2093 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> static __forceinline void 
#line 2094
surfCubemapLayeredwrite(T val, ::surface< void, 252>  surf, int x, int y, int layerFace, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 2095
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)s;(void)mode;
#line 2115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}
#if 0
#line 2095 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{ 
#line 2115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
} 
#endif
#line 2117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> static __forceinline void 
#line 2118
surfCubemapLayeredwrite(T val, ::surface< void, 252>  surf, int x, int y, int layerFace, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 2119
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}
#if 0
#line 2119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{ 
#line 2123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
} 
#endif
#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 71
tex1Dfetch(texture< T, 1, cudaReadModeElementType> , int) {int volatile ___ = 1;::exit(___);}
#if 0
#line 71
{ } 
#endif
#line 73 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> 
#line 74
struct __nv_tex_rmnf_ret { }; 
#line 76
template<> struct __nv_tex_rmnf_ret< char>  { typedef float type; }; 
#line 77
template<> struct __nv_tex_rmnf_ret< signed char>  { typedef float type; }; 
#line 78
template<> struct __nv_tex_rmnf_ret< unsigned char>  { typedef float type; }; 
#line 79
template<> struct __nv_tex_rmnf_ret< short>  { typedef float type; }; 
#line 80
template<> struct __nv_tex_rmnf_ret< unsigned short>  { typedef float type; }; 
#line 81
template<> struct __nv_tex_rmnf_ret< char1>  { typedef float1 type; }; 
#line 82
template<> struct __nv_tex_rmnf_ret< uchar1>  { typedef float1 type; }; 
#line 83
template<> struct __nv_tex_rmnf_ret< short1>  { typedef float1 type; }; 
#line 84
template<> struct __nv_tex_rmnf_ret< ushort1>  { typedef float1 type; }; 
#line 85
template<> struct __nv_tex_rmnf_ret< char2>  { typedef float2 type; }; 
#line 86
template<> struct __nv_tex_rmnf_ret< uchar2>  { typedef float2 type; }; 
#line 87
template<> struct __nv_tex_rmnf_ret< short2>  { typedef float2 type; }; 
#line 88
template<> struct __nv_tex_rmnf_ret< ushort2>  { typedef float2 type; }; 
#line 89
template<> struct __nv_tex_rmnf_ret< char4>  { typedef float4 type; }; 
#line 90
template<> struct __nv_tex_rmnf_ret< uchar4>  { typedef float4 type; }; 
#line 91
template<> struct __nv_tex_rmnf_ret< short4>  { typedef float4 type; }; 
#line 92
template<> struct __nv_tex_rmnf_ret< ushort4>  { typedef float4 type; }; 
#line 94
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 95
tex1Dfetch(texture< T, 1, cudaReadModeNormalizedFloat> , int) {int volatile ___ = 1;::exit(___);}
#if 0
#line 95
{ } 
#endif
#line 215 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 216
tex1D(texture< T, 1, cudaReadModeElementType> , float) {int volatile ___ = 1;::exit(___);}
#if 0
#line 216
{ } 
#endif
#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 219
tex1D(texture< T, 1, cudaReadModeNormalizedFloat> , float) {int volatile ___ = 1;::exit(___);}
#if 0
#line 219
{ } 
#endif
#line 345 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 346
tex2D(texture< T, 2, cudaReadModeElementType> , float, float) {int volatile ___ = 1;::exit(___);}
#if 0
#line 346
{ } 
#endif
#line 348 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 349
tex2D(texture< T, 2, cudaReadModeNormalizedFloat> , float, float) {int volatile ___ = 1;::exit(___);}
#if 0
#line 349
{ } 
#endif
#line 475 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 476
tex1DLayered(texture< T, 241, cudaReadModeElementType> , float, int) {int volatile ___ = 1;::exit(___);}
#if 0
#line 476
{ } 
#endif
#line 478 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 479
tex1DLayered(texture< T, 241, cudaReadModeNormalizedFloat> , float, int) {int volatile ___ = 1;::exit(___);}
#if 0
#line 479
{ } 
#endif
#line 603 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 604
tex2DLayered(texture< T, 242, cudaReadModeElementType> , float, float, int) {int volatile ___ = 1;::exit(___);}
#if 0
#line 604
{ } 
#endif
#line 606 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 607
tex2DLayered(texture< T, 242, cudaReadModeNormalizedFloat> , float, float, int) {int volatile ___ = 1;::exit(___);}
#if 0
#line 607
{ } 
#endif
#line 735 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 736
tex3D(texture< T, 3, cudaReadModeElementType> , float, float, float) {int volatile ___ = 1;::exit(___);}
#if 0
#line 736
{ } 
#endif
#line 738 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 739
tex3D(texture< T, 3, cudaReadModeNormalizedFloat> , float, float, float) {int volatile ___ = 1;::exit(___);}
#if 0
#line 739
{ } 
#endif
#line 864 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 865
texCubemap(texture< T, 12, cudaReadModeElementType> , float, float, float) {int volatile ___ = 1;::exit(___);}
#if 0
#line 865
{ } 
#endif
#line 867 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 868
texCubemap(texture< T, 12, cudaReadModeNormalizedFloat> , float, float, float) {int volatile ___ = 1;::exit(___);}
#if 0
#line 868
{ } 
#endif
#line 992 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 993
texCubemapLayered(texture< T, 252, cudaReadModeElementType> , float, float, float, int) {int volatile ___ = 1;::exit(___);}
#if 0
#line 993
{ } 
#endif
#line 995 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 996
texCubemapLayered(texture< T, 252, cudaReadModeNormalizedFloat> , float, float, float, int) {int volatile ___ = 1;::exit(___);}
#if 0
#line 996
{ } 
#endif
#line 1121 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> 
#line 1122
struct __nv_tex2dgather_ret { }; 
#line 1123
template<> struct __nv_tex2dgather_ret< char>  { typedef char4 type; }; 
#line 1124
template<> struct __nv_tex2dgather_ret< signed char>  { typedef char4 type; }; 
#line 1125
template<> struct __nv_tex2dgather_ret< char1>  { typedef char4 type; }; 
#line 1126
template<> struct __nv_tex2dgather_ret< char2>  { typedef char4 type; }; 
#line 1127
template<> struct __nv_tex2dgather_ret< char3>  { typedef char4 type; }; 
#line 1128
template<> struct __nv_tex2dgather_ret< char4>  { typedef char4 type; }; 
#line 1129
template<> struct __nv_tex2dgather_ret< unsigned char>  { typedef uchar4 type; }; 
#line 1130
template<> struct __nv_tex2dgather_ret< uchar1>  { typedef uchar4 type; }; 
#line 1131
template<> struct __nv_tex2dgather_ret< uchar2>  { typedef uchar4 type; }; 
#line 1132
template<> struct __nv_tex2dgather_ret< uchar3>  { typedef uchar4 type; }; 
#line 1133
template<> struct __nv_tex2dgather_ret< uchar4>  { typedef uchar4 type; }; 
#line 1135
template<> struct __nv_tex2dgather_ret< short>  { typedef short4 type; }; 
#line 1136
template<> struct __nv_tex2dgather_ret< short1>  { typedef short4 type; }; 
#line 1137
template<> struct __nv_tex2dgather_ret< short2>  { typedef short4 type; }; 
#line 1138
template<> struct __nv_tex2dgather_ret< short3>  { typedef short4 type; }; 
#line 1139
template<> struct __nv_tex2dgather_ret< short4>  { typedef short4 type; }; 
#line 1140
template<> struct __nv_tex2dgather_ret< unsigned short>  { typedef ushort4 type; }; 
#line 1141
template<> struct __nv_tex2dgather_ret< ushort1>  { typedef ushort4 type; }; 
#line 1142
template<> struct __nv_tex2dgather_ret< ushort2>  { typedef ushort4 type; }; 
#line 1143
template<> struct __nv_tex2dgather_ret< ushort3>  { typedef ushort4 type; }; 
#line 1144
template<> struct __nv_tex2dgather_ret< ushort4>  { typedef ushort4 type; }; 
#line 1146
template<> struct __nv_tex2dgather_ret< int>  { typedef int4 type; }; 
#line 1147
template<> struct __nv_tex2dgather_ret< int1>  { typedef int4 type; }; 
#line 1148
template<> struct __nv_tex2dgather_ret< int2>  { typedef int4 type; }; 
#line 1149
template<> struct __nv_tex2dgather_ret< int3>  { typedef int4 type; }; 
#line 1150
template<> struct __nv_tex2dgather_ret< int4>  { typedef int4 type; }; 
#line 1151
template<> struct __nv_tex2dgather_ret< unsigned>  { typedef uint4 type; }; 
#line 1152
template<> struct __nv_tex2dgather_ret< uint1>  { typedef uint4 type; }; 
#line 1153
template<> struct __nv_tex2dgather_ret< uint2>  { typedef uint4 type; }; 
#line 1154
template<> struct __nv_tex2dgather_ret< uint3>  { typedef uint4 type; }; 
#line 1155
template<> struct __nv_tex2dgather_ret< uint4>  { typedef uint4 type; }; 
#line 1157
template<> struct __nv_tex2dgather_ret< float>  { typedef float4 type; }; 
#line 1158
template<> struct __nv_tex2dgather_ret< float1>  { typedef float4 type; }; 
#line 1159
template<> struct __nv_tex2dgather_ret< float2>  { typedef float4 type; }; 
#line 1160
template<> struct __nv_tex2dgather_ret< float3>  { typedef float4 type; }; 
#line 1161
template<> struct __nv_tex2dgather_ret< float4>  { typedef float4 type; }; 
#line 1163
template< class T> static typename __nv_tex2dgather_ret< T> ::type 
#line 1164
tex2Dgather(texture< T, 2, cudaReadModeElementType> , float, float, int = 0) {int volatile ___ = 1;::exit(___);}
#if 0
#line 1164
{ } 
#endif
#line 1166 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static ::float4 
#line 1167
tex2Dgather(texture< T, 2, cudaReadModeNormalizedFloat> , float, float, int = 0) {int volatile ___ = 1;::exit(___);}
#if 0
#line 1167
{ } 
#endif
#line 1232 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 1233
tex1DLod(texture< T, 1, cudaReadModeElementType> , float, float) {int volatile ___ = 1;::exit(___);}
#if 0
#line 1233
{ } 
#endif
#line 1235 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 1236
tex1DLod(texture< T, 1, cudaReadModeNormalizedFloat> , float, float) {int volatile ___ = 1;::exit(___);}
#if 0
#line 1236
{ } 
#endif
#line 1360 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 1361
tex2DLod(texture< T, 2, cudaReadModeElementType> , float, float, float) {int volatile ___ = 1;::exit(___);}
#if 0
#line 1361
{ } 
#endif
#line 1363 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 1364
tex2DLod(texture< T, 2, cudaReadModeNormalizedFloat> , float, float, float) {int volatile ___ = 1;::exit(___);}
#if 0
#line 1364
{ } 
#endif
#line 1484 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 1485
tex1DLayeredLod(texture< T, 241, cudaReadModeElementType> , float, int, float) {int volatile ___ = 1;::exit(___);}
#if 0
#line 1485
{ } 
#endif
#line 1487 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 1488
tex1DLayeredLod(texture< T, 241, cudaReadModeNormalizedFloat> , float, int, float) {int volatile ___ = 1;::exit(___);}
#if 0
#line 1488
{ } 
#endif
#line 1612 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 1613
tex2DLayeredLod(texture< T, 242, cudaReadModeElementType> , float, float, int, float) {int volatile ___ = 1;::exit(___);}
#if 0
#line 1613
{ } 
#endif
#line 1615 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 1616
tex2DLayeredLod(texture< T, 242, cudaReadModeNormalizedFloat> , float, float, int, float) {int volatile ___ = 1;::exit(___);}
#if 0
#line 1616
{ } 
#endif
#line 1740 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 1741
tex3DLod(texture< T, 3, cudaReadModeElementType> , float, float, float, float) {int volatile ___ = 1;::exit(___);}
#if 0
#line 1741
{ } 
#endif
#line 1743 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 1744
tex3DLod(texture< T, 3, cudaReadModeNormalizedFloat> , float, float, float, float) {int volatile ___ = 1;::exit(___);}
#if 0
#line 1744
{ } 
#endif
#line 1868 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 1869
texCubemapLod(texture< T, 12, cudaReadModeElementType> , float, float, float, float) {int volatile ___ = 1;::exit(___);}
#if 0
#line 1869
{ } 
#endif
#line 1871 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 1872
texCubemapLod(texture< T, 12, cudaReadModeNormalizedFloat> , float, float, float, float) {int volatile ___ = 1;::exit(___);}
#if 0
#line 1872
{ } 
#endif
#line 1996 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 1997
texCubemapLayeredLod(texture< T, 252, cudaReadModeElementType> , float, float, float, int, float) {int volatile ___ = 1;::exit(___);}
#if 0
#line 1997
{ } 
#endif
#line 1999 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 2000
texCubemapLayeredLod(texture< T, 252, cudaReadModeNormalizedFloat> , float, float, float, int, float) {int volatile ___ = 1;::exit(___);}
#if 0
#line 2000
{ } 
#endif
#line 2124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 2125
tex1DGrad(texture< T, 1, cudaReadModeElementType> , float, float, float) {int volatile ___ = 1;::exit(___);}
#if 0
#line 2125
{ } 
#endif
#line 2127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 2128
tex1DGrad(texture< T, 1, cudaReadModeNormalizedFloat> , float, float, float) {int volatile ___ = 1;::exit(___);}
#if 0
#line 2128
{ } 
#endif
#line 2252 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 2253
tex2DGrad(texture< T, 2, cudaReadModeElementType> , float, float, ::float2, ::float2) {int volatile ___ = 1;::exit(___);}
#if 0
#line 2253
{ } 
#endif
#line 2255 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 2256
tex2DGrad(texture< T, 2, cudaReadModeNormalizedFloat> , float, float, ::float2, ::float2) {int volatile ___ = 1;::exit(___);}
#if 0
#line 2256
{ } 
#endif
#line 2380 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 2381
tex1DLayeredGrad(texture< T, 241, cudaReadModeElementType> , float, int, float, float) {int volatile ___ = 1;::exit(___);}
#if 0
#line 2381
{ } 
#endif
#line 2383 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 2384
tex1DLayeredGrad(texture< T, 241, cudaReadModeNormalizedFloat> , float, int, float, float) {int volatile ___ = 1;::exit(___);}
#if 0
#line 2384
{ } 
#endif
#line 2509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 2510
tex2DLayeredGrad(texture< T, 242, cudaReadModeElementType> , float, float, int, ::float2, ::float2) {int volatile ___ = 1;::exit(___);}
#if 0
#line 2510
{ } 
#endif
#line 2512 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 2513
tex2DLayeredGrad(texture< T, 242, cudaReadModeNormalizedFloat> , float, float, int, ::float2, ::float2) {int volatile ___ = 1;::exit(___);}
#if 0
#line 2513
{ } 
#endif
#line 2637 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 2638
tex3DGrad(texture< T, 3, cudaReadModeElementType> , float, float, float, ::float4, ::float4) {int volatile ___ = 1;::exit(___);}
#if 0
#line 2638
{ } 
#endif
#line 2640 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 2641
tex3DGrad(texture< T, 3, cudaReadModeNormalizedFloat> , float, float, float, ::float4, ::float4) {int volatile ___ = 1;::exit(___);}
#if 0
#line 2641
{ } 
#endif
#line 67 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 68
tex1Dfetch(T *, ::cudaTextureObject_t, int) {int volatile ___ = 1;::exit(___);}
#if 0
#line 68
{ } 
#endif
#line 121 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 122
tex1Dfetch(::cudaTextureObject_t texObject, int x) 
#line 123
{int volatile ___ = 1;(void)texObject;(void)x;
#line 127
::exit(___);}
#if 0
#line 123
{ 
#line 124
T ret; 
#line 125
tex1Dfetch(&ret, texObject, x); 
#line 126
return ret; 
#line 127
} 
#endif
#line 135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 136
tex1D(T *, ::cudaTextureObject_t, float) {int volatile ___ = 1;::exit(___);}
#if 0
#line 136
{ } 
#endif
#line 190 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 191
tex1D(::cudaTextureObject_t texObject, float x) 
#line 192
{int volatile ___ = 1;(void)texObject;(void)x;
#line 196
::exit(___);}
#if 0
#line 192
{ 
#line 193
T ret; 
#line 194
tex1D(&ret, texObject, x); 
#line 195
return ret; 
#line 196
} 
#endif
#line 205 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 206
tex2D(T *, ::cudaTextureObject_t, float, float) {int volatile ___ = 1;::exit(___);}
#if 0
#line 206
{ } 
#endif
#line 258 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 259
tex2D(::cudaTextureObject_t texObject, float x, float y) 
#line 260
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;
#line 264
::exit(___);}
#if 0
#line 260
{ 
#line 261
T ret; 
#line 262
tex2D(&ret, texObject, x, y); 
#line 263
return ret; 
#line 264
} 
#endif
#line 272 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 273
tex3D(T *, ::cudaTextureObject_t, float, float, float) {int volatile ___ = 1;::exit(___);}
#if 0
#line 273
{ } 
#endif
#line 325 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 326
tex3D(::cudaTextureObject_t texObject, float x, float y, float z) 
#line 327
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;
#line 331
::exit(___);}
#if 0
#line 327
{ 
#line 328
T ret; 
#line 329
tex3D(&ret, texObject, x, y, z); 
#line 330
return ret; 
#line 331
} 
#endif
#line 340 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 341
tex1DLayered(T *, ::cudaTextureObject_t, float, int) {int volatile ___ = 1;::exit(___);}
#if 0
#line 341
{ } 
#endif
#line 393 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 394
tex1DLayered(::cudaTextureObject_t texObject, float x, int layer) 
#line 395
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;
#line 399
::exit(___);}
#if 0
#line 395
{ 
#line 396
T ret; 
#line 397
tex1DLayered(&ret, texObject, x, layer); 
#line 398
return ret; 
#line 399
} 
#endif
#line 408 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 409
tex2DLayered(T *, ::cudaTextureObject_t, float, float, int) {int volatile ___ = 1;::exit(___);}
#if 0
#line 409
{ } 
#endif
#line 461 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 462
tex2DLayered(::cudaTextureObject_t texObject, float x, float y, int layer) 
#line 463
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;
#line 467
::exit(___);}
#if 0
#line 463
{ 
#line 464
T ret; 
#line 465
tex2DLayered(&ret, texObject, x, y, layer); 
#line 466
return ret; 
#line 467
} 
#endif
#line 476 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 477
texCubemap(T *, ::cudaTextureObject_t, float, float, float) {int volatile ___ = 1;::exit(___);}
#if 0
#line 477
{ } 
#endif
#line 529 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 530
texCubemap(::cudaTextureObject_t texObject, float x, float y, float z) 
#line 531
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;
#line 535
::exit(___);}
#if 0
#line 531
{ 
#line 532
T ret; 
#line 533
texCubemap(&ret, texObject, x, y, z); 
#line 534
return ret; 
#line 535
} 
#endif
#line 544 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 545
texCubemapLayered(T *, ::cudaTextureObject_t, float, float, float, int) {int volatile ___ = 1;::exit(___);}
#if 0
#line 545
{ } 
#endif
#line 598 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 599
texCubemapLayered(::cudaTextureObject_t texObject, float x, float y, float z, int layer) 
#line 600
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
#line 604
::exit(___);}
#if 0
#line 600
{ 
#line 601
T ret; 
#line 602
texCubemapLayered(&ret, texObject, x, y, z, layer); 
#line 603
return ret; 
#line 604
} 
#endif
#line 613 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 614
tex2Dgather(T *, ::cudaTextureObject_t, float, float, int = 0) {int volatile ___ = 1;::exit(___);}
#if 0
#line 614
{ } 
#endif
#line 660 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 661
tex2Dgather(::cudaTextureObject_t to, float x, float y, int comp = 0) 
#line 662
{int volatile ___ = 1;(void)to;(void)x;(void)y;(void)comp;
#line 666
::exit(___);}
#if 0
#line 662
{ 
#line 663
T ret; 
#line 664
tex2Dgather(&ret, to, x, y, comp); 
#line 665
return ret; 
#line 666
} 
#endif
#line 675 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 676
tex1DLod(T *, ::cudaTextureObject_t, float, float) {int volatile ___ = 1;::exit(___);}
#if 0
#line 676
{ } 
#endif
#line 728 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 729
tex1DLod(::cudaTextureObject_t texObject, float x, float level) 
#line 730
{int volatile ___ = 1;(void)texObject;(void)x;(void)level;
#line 734
::exit(___);}
#if 0
#line 730
{ 
#line 731
T ret; 
#line 732
tex1DLod(&ret, texObject, x, level); 
#line 733
return ret; 
#line 734
} 
#endif
#line 743 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 744
tex2DLod(T *, ::cudaTextureObject_t, float, float, float) {int volatile ___ = 1;::exit(___);}
#if 0
#line 744
{ } 
#endif
#line 797 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 798
tex2DLod(::cudaTextureObject_t texObject, float x, float y, float level) 
#line 799
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)level;
#line 803
::exit(___);}
#if 0
#line 799
{ 
#line 800
T ret; 
#line 801
tex2DLod(&ret, texObject, x, y, level); 
#line 802
return ret; 
#line 803
} 
#endif
#line 812 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 813
tex3DLod(T *, ::cudaTextureObject_t, float, float, float, float) {int volatile ___ = 1;::exit(___);}
#if 0
#line 813
{ } 
#endif
#line 865 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 866
tex3DLod(::cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 867
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 871
::exit(___);}
#if 0
#line 867
{ 
#line 868
T ret; 
#line 869
tex3DLod(&ret, texObject, x, y, z, level); 
#line 870
return ret; 
#line 871
} 
#endif
#line 879 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 880
tex1DLayeredLod(T *, ::cudaTextureObject_t, float, int, float) {int volatile ___ = 1;::exit(___);}
#if 0
#line 880
{ } 
#endif
#line 932 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 933
tex1DLayeredLod(::cudaTextureObject_t texObject, float x, int layer, float level) 
#line 934
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;(void)level;
#line 938
::exit(___);}
#if 0
#line 934
{ 
#line 935
T ret; 
#line 936
tex1DLayeredLod(&ret, texObject, x, layer, level); 
#line 937
return ret; 
#line 938
} 
#endif
#line 947 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 948
tex2DLayeredLod(T *, ::cudaTextureObject_t, float, float, int, float) {int volatile ___ = 1;::exit(___);}
#if 0
#line 948
{ } 
#endif
#line 1000 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 1001
tex2DLayeredLod(::cudaTextureObject_t texObject, float x, float y, int layer, float level) 
#line 1002
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
#line 1006
::exit(___);}
#if 0
#line 1002
{ 
#line 1003
T ret; 
#line 1004
tex2DLayeredLod(&ret, texObject, x, y, layer, level); 
#line 1005
return ret; 
#line 1006
} 
#endif
#line 1014 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 1015
texCubemapLod(T *, ::cudaTextureObject_t, float, float, float, float) {int volatile ___ = 1;::exit(___);}
#if 0
#line 1015
{ } 
#endif
#line 1067 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 1068
texCubemapLod(::cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 1069
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 1073
::exit(___);}
#if 0
#line 1069
{ 
#line 1070
T ret; 
#line 1071
texCubemapLod(&ret, texObject, x, y, z, level); 
#line 1072
return ret; 
#line 1073
} 
#endif
#line 1081 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 1082
texCubemapLayeredLod(T *, ::cudaTextureObject_t, float, float, float, int, float) {int volatile ___ = 1;::exit(___);}
#if 0
#line 1082
{ } 
#endif
#line 1134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 1135
texCubemapLayeredLod(::cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
#line 1136
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 1140
::exit(___);}
#if 0
#line 1136
{ 
#line 1137
T ret; 
#line 1138
texCubemapLayeredLod(&ret, texObject, x, y, z, layer, level); 
#line 1139
return ret; 
#line 1140
} 
#endif
#line 1148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 1149
tex1DGrad(T *, ::cudaTextureObject_t, float, float, float) {int volatile ___ = 1;::exit(___);}
#if 0
#line 1149
{ } 
#endif
#line 1202 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 1203
tex1DGrad(::cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
#line 1204
{int volatile ___ = 1;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
#line 1208
::exit(___);}
#if 0
#line 1204
{ 
#line 1205
T ret; 
#line 1206
tex1DGrad(&ret, texObject, x, dPdx, dPdy); 
#line 1207
return ret; 
#line 1208
} 
#endif
#line 1216 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 1217
tex2DGrad(T *, ::cudaTextureObject_t, float, float, ::float2, ::float2) {int volatile ___ = 1;::exit(___);}
#if 0
#line 1217
{ } 
#endif
#line 1269 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 1270
tex2DGrad(::cudaTextureObject_t texObject, float x, float y, ::float2 dPdx, ::float2 dPdy) 
#line 1271
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 1275
::exit(___);}
#if 0
#line 1271
{ 
#line 1272
T ret; 
#line 1273
tex2DGrad(&ret, texObject, x, y, dPdx, dPdy); 
#line 1274
return ret; 
#line 1275
} 
#endif
#line 1283 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 1284
tex3DGrad(T *, ::cudaTextureObject_t, float, float, float, ::float4, ::float4) {int volatile ___ = 1;::exit(___);}
#if 0
#line 1284
{ } 
#endif
#line 1336 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 1337
tex3DGrad(::cudaTextureObject_t texObject, float x, float y, float z, ::float4 dPdx, ::float4 dPdy) 
#line 1338
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 1342
::exit(___);}
#if 0
#line 1338
{ 
#line 1339
T ret; 
#line 1340
tex3DGrad(&ret, texObject, x, y, z, dPdx, dPdy); 
#line 1341
return ret; 
#line 1342
} 
#endif
#line 1350 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 1351
tex1DLayeredGrad(T *, ::cudaTextureObject_t, float, int, float, float) {int volatile ___ = 1;::exit(___);}
#if 0
#line 1351
{ } 
#endif
#line 1404 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 1405
tex1DLayeredGrad(::cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
#line 1406
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 1410
::exit(___);}
#if 0
#line 1406
{ 
#line 1407
T ret; 
#line 1408
tex1DLayeredGrad(&ret, texObject, x, layer, dPdx, dPdy); 
#line 1409
return ret; 
#line 1410
} 
#endif
#line 1418 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 1419
tex2DLayeredGrad(T *, ::cudaTextureObject_t, float, float, int, ::float2, ::float2) {int volatile ___ = 1;::exit(___);}
#if 0
#line 1419
{ } 
#endif
#line 1471 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 1472
tex2DLayeredGrad(::cudaTextureObject_t texObject, float x, float y, int layer, ::float2 dPdx, ::float2 dPdy) 
#line 1473
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 1477
::exit(___);}
#if 0
#line 1473
{ 
#line 1474
T ret; 
#line 1475
tex2DLayeredGrad(&ret, texObject, x, y, layer, dPdx, dPdy); 
#line 1476
return ret; 
#line 1477
} 
#endif
#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 69
surf1Dread(T *, ::cudaSurfaceObject_t, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}
#if 0
#line 69
{ } 
#endif
#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 112
surf1Dread(::cudaSurfaceObject_t surfObject, int x, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
#line 113
{int volatile ___ = 1;(void)surfObject;(void)x;(void)boundaryMode;
#line 119
::exit(___);}
#if 0
#line 113
{ 
#line 119
} 
#endif
#line 128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 129
surf2Dread(T *, ::cudaSurfaceObject_t, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}
#if 0
#line 129
{ } 
#endif
#line 172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 173
surf2Dread(::cudaSurfaceObject_t surfObject, int x, int y, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
#line 174
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 180
::exit(___);}
#if 0
#line 174
{ 
#line 180
} 
#endif
#line 189 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 190
surf3Dread(T *, ::cudaSurfaceObject_t, int, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}
#if 0
#line 190
{ } 
#endif
#line 231 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 232
surf3Dread(::cudaSurfaceObject_t surfObject, int x, int y, int z, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
#line 233
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 239
::exit(___);}
#if 0
#line 233
{ 
#line 239
} 
#endif
#line 247 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 248
surf1DLayeredread(T *, ::cudaSurfaceObject_t, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}
#if 0
#line 248
{ } 
#endif
#line 290 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 291
surf1DLayeredread(::cudaSurfaceObject_t surfObject, int x, int layer, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
#line 292
{int volatile ___ = 1;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 298
::exit(___);}
#if 0
#line 292
{ 
#line 298
} 
#endif
#line 306 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 307
surf2DLayeredread(T *, ::cudaSurfaceObject_t, int, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}
#if 0
#line 307
{ } 
#endif
#line 348 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 349
surf2DLayeredread(::cudaSurfaceObject_t surfObject, int x, int y, int layer, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
#line 350
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 356
::exit(___);}
#if 0
#line 350
{ 
#line 356
} 
#endif
#line 364 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 365
surfCubemapread(T *, ::cudaSurfaceObject_t, int, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}
#if 0
#line 365
{ } 
#endif
#line 406 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 407
surfCubemapread(::cudaSurfaceObject_t surfObject, int x, int y, int face, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
#line 408
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 414
::exit(___);}
#if 0
#line 408
{ 
#line 414
} 
#endif
#line 422 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 423
surfCubemapLayeredread(T *, ::cudaSurfaceObject_t, int, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}
#if 0
#line 423
{ } 
#endif
#line 464 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 465
surfCubemapLayeredread(::cudaSurfaceObject_t surfObject, int x, int y, int layerface, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
#line 466
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)layerface;(void)boundaryMode;
#line 472
::exit(___);}
#if 0
#line 466
{ 
#line 472
} 
#endif
#line 480 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 481
surf1Dwrite(T, ::cudaSurfaceObject_t, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}
#if 0
#line 481
{ } 
#endif
#line 528 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 529
surf2Dwrite(T, ::cudaSurfaceObject_t, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}
#if 0
#line 529
{ } 
#endif
#line 576 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 577
surf3Dwrite(T, ::cudaSurfaceObject_t, int, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}
#if 0
#line 577
{ } 
#endif
#line 626 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 627
surf1DLayeredwrite(T, ::cudaSurfaceObject_t, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}
#if 0
#line 627
{ } 
#endif
#line 675 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 676
surf2DLayeredwrite(T, ::cudaSurfaceObject_t, int, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}
#if 0
#line 676
{ } 
#endif
#line 723 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 724
surfCubemapwrite(T, ::cudaSurfaceObject_t, int, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}
#if 0
#line 724
{ } 
#endif
#line 771 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 772
surfCubemapLayeredwrite(T, ::cudaSurfaceObject_t, int, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}
#if 0
#line 772
{ } 
#endif
#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"
extern "C" {
#line 71 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"
extern const uint3 __device_builtin_variable_threadIdx; 
#line 72
extern const uint3 __device_builtin_variable_blockIdx; 
#line 73
extern const dim3 __device_builtin_variable_blockDim; 
#line 74
extern const dim3 __device_builtin_variable_gridDim; 
#line 75
extern const int __device_builtin_variable_warpSize; 
#line 80
}
#line 183 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 184
cudaLaunchKernel(const T *
#line 185
func, ::dim3 
#line 186
gridDim, ::dim3 
#line 187
blockDim, void **
#line 188
args, ::size_t 
#line 189
sharedMem = 0, ::cudaStream_t 
#line 190
stream = 0) 
#line 192
{ 
#line 193
return ::cudaLaunchKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream); 
#line 194
} 
#line 221
template< class T> static __inline ::cudaError_t 
#line 222
cudaSetupArgument(T 
#line 223
arg, ::size_t 
#line 224
offset) 
#line 226
{ 
#line 227
return ::cudaSetupArgument((const void *)(&arg), sizeof(T), offset); 
#line 228
} 
#line 260
static __inline cudaError_t cudaEventCreate(cudaEvent_t *
#line 261
event, unsigned 
#line 262
flags) 
#line 264
{ 
#line 265
return ::cudaEventCreateWithFlags(event, flags); 
#line 266
} 
#line 323
static __inline cudaError_t cudaMallocHost(void **
#line 324
ptr, size_t 
#line 325
size, unsigned 
#line 326
flags) 
#line 328
{ 
#line 329
return ::cudaHostAlloc(ptr, size, flags); 
#line 330
} 
#line 332
template< class T> static __inline ::cudaError_t 
#line 333
cudaHostAlloc(T **
#line 334
ptr, ::size_t 
#line 335
size, unsigned 
#line 336
flags) 
#line 338
{ 
#line 339
return ::cudaHostAlloc((void **)((void *)ptr), size, flags); 
#line 340
} 
#line 342
template< class T> static __inline ::cudaError_t 
#line 343
cudaHostGetDevicePointer(T **
#line 344
pDevice, void *
#line 345
pHost, unsigned 
#line 346
flags) 
#line 348
{ 
#line 349
return ::cudaHostGetDevicePointer((void **)((void *)pDevice), pHost, flags); 
#line 350
} 
#line 449
template< class T> static __inline ::cudaError_t 
#line 450
cudaMallocManaged(T **
#line 451
devPtr, ::size_t 
#line 452
size, unsigned 
#line 453
flags = 1) 
#line 455
{ 
#line 456
return ::cudaMallocManaged((void **)((void *)devPtr), size, flags); 
#line 457
} 
#line 528
template< class T> static __inline ::cudaError_t 
#line 529
cudaStreamAttachMemAsync(::cudaStream_t 
#line 530
stream, T *
#line 531
devPtr, ::size_t 
#line 532
length = 0, unsigned 
#line 533
flags = 4) 
#line 535
{ 
#line 536
return ::cudaStreamAttachMemAsync(stream, (void *)devPtr, length, flags); 
#line 537
} 
#line 539
template< class T> __inline ::cudaError_t 
#line 540
cudaMalloc(T **
#line 541
devPtr, ::size_t 
#line 542
size) 
#line 544
{ 
#line 545
return ::cudaMalloc((void **)((void *)devPtr), size); 
#line 546
} 
#line 548
template< class T> static __inline ::cudaError_t 
#line 549
cudaMallocHost(T **
#line 550
ptr, ::size_t 
#line 551
size, unsigned 
#line 552
flags = 0) 
#line 554
{ 
#line 555
return cudaMallocHost((void **)((void *)ptr), size, flags); 
#line 556
} 
#line 558
template< class T> static __inline ::cudaError_t 
#line 559
cudaMallocPitch(T **
#line 560
devPtr, ::size_t *
#line 561
pitch, ::size_t 
#line 562
width, ::size_t 
#line 563
height) 
#line 565
{ 
#line 566
return ::cudaMallocPitch((void **)((void *)devPtr), pitch, width, height); 
#line 567
} 
#line 604
template< class T> static __inline ::cudaError_t 
#line 605
cudaMemcpyToSymbol(const T &
#line 606
symbol, const void *
#line 607
src, ::size_t 
#line 608
count, ::size_t 
#line 609
offset = 0, ::cudaMemcpyKind 
#line 610
kind = cudaMemcpyHostToDevice) 
#line 612
{ 
#line 613
return ::cudaMemcpyToSymbol((const void *)(&symbol), src, count, offset, kind); 
#line 614
} 
#line 656
template< class T> static __inline ::cudaError_t 
#line 657
cudaMemcpyToSymbolAsync(const T &
#line 658
symbol, const void *
#line 659
src, ::size_t 
#line 660
count, ::size_t 
#line 661
offset = 0, ::cudaMemcpyKind 
#line 662
kind = cudaMemcpyHostToDevice, ::cudaStream_t 
#line 663
stream = 0) 
#line 665
{ 
#line 666
return ::cudaMemcpyToSymbolAsync((const void *)(&symbol), src, count, offset, kind, stream); 
#line 667
} 
#line 702
template< class T> static __inline ::cudaError_t 
#line 703
cudaMemcpyFromSymbol(void *
#line 704
dst, const T &
#line 705
symbol, ::size_t 
#line 706
count, ::size_t 
#line 707
offset = 0, ::cudaMemcpyKind 
#line 708
kind = cudaMemcpyDeviceToHost) 
#line 710
{ 
#line 711
return ::cudaMemcpyFromSymbol(dst, (const void *)(&symbol), count, offset, kind); 
#line 712
} 
#line 754
template< class T> static __inline ::cudaError_t 
#line 755
cudaMemcpyFromSymbolAsync(void *
#line 756
dst, const T &
#line 757
symbol, ::size_t 
#line 758
count, ::size_t 
#line 759
offset = 0, ::cudaMemcpyKind 
#line 760
kind = cudaMemcpyDeviceToHost, ::cudaStream_t 
#line 761
stream = 0) 
#line 763
{ 
#line 764
return ::cudaMemcpyFromSymbolAsync(dst, (const void *)(&symbol), count, offset, kind, stream); 
#line 765
} 
#line 787
template< class T> static __inline ::cudaError_t 
#line 788
cudaGetSymbolAddress(void **
#line 789
devPtr, const T &
#line 790
symbol) 
#line 792
{ 
#line 793
return ::cudaGetSymbolAddress(devPtr, (const void *)(&symbol)); 
#line 794
} 
#line 816
template< class T> static __inline ::cudaError_t 
#line 817
cudaGetSymbolSize(::size_t *
#line 818
size, const T &
#line 819
symbol) 
#line 821
{ 
#line 822
return ::cudaGetSymbolSize(size, (const void *)(&symbol)); 
#line 823
} 
#line 859
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 860
cudaBindTexture(::size_t *
#line 861
offset, const texture< T, dim, readMode>  &
#line 862
tex, const void *
#line 863
devPtr, const ::cudaChannelFormatDesc &
#line 864
desc, ::size_t 
#line 865
size = 4294967295U) 
#line 867
{ 
#line 868
return ::cudaBindTexture(offset, &tex, devPtr, &desc, size); 
#line 869
} 
#line 904
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 905
cudaBindTexture(::size_t *
#line 906
offset, const texture< T, dim, readMode>  &
#line 907
tex, const void *
#line 908
devPtr, ::size_t 
#line 909
size = 4294967295U) 
#line 911
{ 
#line 912
return cudaBindTexture(offset, tex, devPtr, (tex.channelDesc), size); 
#line 913
} 
#line 960
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 961
cudaBindTexture2D(::size_t *
#line 962
offset, const texture< T, dim, readMode>  &
#line 963
tex, const void *
#line 964
devPtr, const ::cudaChannelFormatDesc &
#line 965
desc, ::size_t 
#line 966
width, ::size_t 
#line 967
height, ::size_t 
#line 968
pitch) 
#line 970
{ 
#line 971
return ::cudaBindTexture2D(offset, &tex, devPtr, &desc, width, height, pitch); 
#line 972
} 
#line 1018
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 1019
cudaBindTexture2D(::size_t *
#line 1020
offset, const texture< T, dim, readMode>  &
#line 1021
tex, const void *
#line 1022
devPtr, ::size_t 
#line 1023
width, ::size_t 
#line 1024
height, ::size_t 
#line 1025
pitch) 
#line 1027
{ 
#line 1028
return ::cudaBindTexture2D(offset, &tex, devPtr, &(tex.channelDesc), width, height, pitch); 
#line 1029
} 
#line 1060
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 1061
cudaBindTextureToArray(const texture< T, dim, readMode>  &
#line 1062
tex, ::cudaArray_const_t 
#line 1063
array, const ::cudaChannelFormatDesc &
#line 1064
desc) 
#line 1066
{ 
#line 1067
return ::cudaBindTextureToArray(&tex, array, &desc); 
#line 1068
} 
#line 1098
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 1099
cudaBindTextureToArray(const texture< T, dim, readMode>  &
#line 1100
tex, ::cudaArray_const_t 
#line 1101
array) 
#line 1103
{ 
#line 1104
::cudaChannelFormatDesc desc; 
#line 1105
::cudaError_t err = ::cudaGetChannelDesc(&desc, array); 
#line 1107
return (err == (cudaSuccess)) ? cudaBindTextureToArray(tex, array, desc) : err; 
#line 1108
} 
#line 1139
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 1140
cudaBindTextureToMipmappedArray(const texture< T, dim, readMode>  &
#line 1141
tex, ::cudaMipmappedArray_const_t 
#line 1142
mipmappedArray, const ::cudaChannelFormatDesc &
#line 1143
desc) 
#line 1145
{ 
#line 1146
return ::cudaBindTextureToMipmappedArray(&tex, mipmappedArray, &desc); 
#line 1147
} 
#line 1177
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 1178
cudaBindTextureToMipmappedArray(const texture< T, dim, readMode>  &
#line 1179
tex, ::cudaMipmappedArray_const_t 
#line 1180
mipmappedArray) 
#line 1182
{ 
#line 1183
::cudaChannelFormatDesc desc; 
#line 1184
::cudaArray_t levelArray; 
#line 1185
::cudaError_t err = ::cudaGetMipmappedArrayLevel(&levelArray, mipmappedArray, 0); 
#line 1187
if (err != (cudaSuccess)) { 
#line 1188
return err; 
#line 1189
}  
#line 1190
err = ::cudaGetChannelDesc(&desc, levelArray); 
#line 1192
return (err == (cudaSuccess)) ? cudaBindTextureToMipmappedArray(tex, mipmappedArray, desc) : err; 
#line 1193
} 
#line 1216
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 1217
cudaUnbindTexture(const texture< T, dim, readMode>  &
#line 1218
tex) 
#line 1220
{ 
#line 1221
return ::cudaUnbindTexture(&tex); 
#line 1222
} 
#line 1250
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 1251
cudaGetTextureAlignmentOffset(::size_t *
#line 1252
offset, const texture< T, dim, readMode>  &
#line 1253
tex) 
#line 1255
{ 
#line 1256
return ::cudaGetTextureAlignmentOffset(offset, &tex); 
#line 1257
} 
#line 1302
template< class T> static __inline ::cudaError_t 
#line 1303
cudaFuncSetCacheConfig(T *
#line 1304
func, ::cudaFuncCache 
#line 1305
cacheConfig) 
#line 1307
{ 
#line 1308
return ::cudaFuncSetCacheConfig((const void *)func, cacheConfig); 
#line 1309
} 
#line 1311
template< class T> static __inline ::cudaError_t 
#line 1312
cudaFuncSetSharedMemConfig(T *
#line 1313
func, ::cudaSharedMemConfig 
#line 1314
config) 
#line 1316
{ 
#line 1317
return ::cudaFuncSetSharedMemConfig((const void *)func, config); 
#line 1318
} 
#line 1347
template< class T> __inline ::cudaError_t 
#line 1348
cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *
#line 1349
numBlocks, T 
#line 1350
func, int 
#line 1351
blockSize, ::size_t 
#line 1352
dynamicSMemSize) 
#line 1353
{ 
#line 1354
return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void *)func, blockSize, dynamicSMemSize, 0); 
#line 1355
} 
#line 1398
template< class T> __inline ::cudaError_t 
#line 1399
cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *
#line 1400
numBlocks, T 
#line 1401
func, int 
#line 1402
blockSize, ::size_t 
#line 1403
dynamicSMemSize, unsigned 
#line 1404
flags) 
#line 1405
{ 
#line 1406
return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void *)func, blockSize, dynamicSMemSize, flags); 
#line 1407
} 
#line 1412
class __cudaOccupancyB2DHelper { 
#line 1413
size_t n; 
#line 1415
public: __cudaOccupancyB2DHelper(size_t n_) : n(n_) { } 
#line 1416
size_t operator()(int) 
#line 1417
{ 
#line 1418
return n; 
#line 1419
} 
#line 1420
}; 
#line 1467
template< class UnaryFunction, class T> static __inline ::cudaError_t 
#line 1468
cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(int *
#line 1469
minGridSize, int *
#line 1470
blockSize, T 
#line 1471
func, UnaryFunction 
#line 1472
blockSizeToDynamicSMemSize, int 
#line 1473
blockSizeLimit = 0, unsigned 
#line 1474
flags = 0) 
#line 1475
{ 
#line 1476
::cudaError_t status; 
#line 1479
int device; 
#line 1480
::cudaFuncAttributes attr; 
#line 1483
int maxThreadsPerMultiProcessor; 
#line 1484
int warpSize; 
#line 1485
int devMaxThreadsPerBlock; 
#line 1486
int multiProcessorCount; 
#line 1487
int funcMaxThreadsPerBlock; 
#line 1488
int occupancyLimit; 
#line 1489
int granularity; 
#line 1492
int maxBlockSize = 0; 
#line 1493
int numBlocks = 0; 
#line 1494
int maxOccupancy = 0; 
#line 1497
int blockSizeToTryAligned; 
#line 1498
int blockSizeToTry; 
#line 1499
int blockSizeLimitAligned; 
#line 1500
int occupancyInBlocks; 
#line 1501
int occupancyInThreads; 
#line 1502
::size_t dynamicSMemSize; 
#line 1508
if (((!minGridSize) || (!blockSize)) || (!func)) { 
#line 1509
return cudaErrorInvalidValue; 
#line 1510
}  
#line 1516
status = ::cudaGetDevice(&device); 
#line 1517
if (status != (cudaSuccess)) { 
#line 1518
return status; 
#line 1519
}  
#line 1521
status = cudaDeviceGetAttribute(&maxThreadsPerMultiProcessor, cudaDevAttrMaxThreadsPerMultiProcessor, device); 
#line 1525
if (status != (cudaSuccess)) { 
#line 1526
return status; 
#line 1527
}  
#line 1529
status = cudaDeviceGetAttribute(&warpSize, cudaDevAttrWarpSize, device); 
#line 1533
if (status != (cudaSuccess)) { 
#line 1534
return status; 
#line 1535
}  
#line 1537
status = cudaDeviceGetAttribute(&devMaxThreadsPerBlock, cudaDevAttrMaxThreadsPerBlock, device); 
#line 1541
if (status != (cudaSuccess)) { 
#line 1542
return status; 
#line 1543
}  
#line 1545
status = cudaDeviceGetAttribute(&multiProcessorCount, cudaDevAttrMultiProcessorCount, device); 
#line 1549
if (status != (cudaSuccess)) { 
#line 1550
return status; 
#line 1551
}  
#line 1553
status = cudaFuncGetAttributes(&attr, func); 
#line 1554
if (status != (cudaSuccess)) { 
#line 1555
return status; 
#line 1556
}  
#line 1558
funcMaxThreadsPerBlock = (attr.maxThreadsPerBlock); 
#line 1564
occupancyLimit = maxThreadsPerMultiProcessor; 
#line 1565
granularity = warpSize; 
#line 1567
if (blockSizeLimit == 0) { 
#line 1568
blockSizeLimit = devMaxThreadsPerBlock; 
#line 1569
}  
#line 1571
if (devMaxThreadsPerBlock < blockSizeLimit) { 
#line 1572
blockSizeLimit = devMaxThreadsPerBlock; 
#line 1573
}  
#line 1575
if (funcMaxThreadsPerBlock < blockSizeLimit) { 
#line 1576
blockSizeLimit = funcMaxThreadsPerBlock; 
#line 1577
}  
#line 1579
blockSizeLimitAligned = (((blockSizeLimit + (granularity - 1)) / granularity) * granularity); 
#line 1581
for (blockSizeToTryAligned = blockSizeLimitAligned; blockSizeToTryAligned > 0; blockSizeToTryAligned -= granularity) { 
#line 1585
if (blockSizeLimit < blockSizeToTryAligned) { 
#line 1586
blockSizeToTry = blockSizeLimit; 
#line 1587
} else { 
#line 1588
blockSizeToTry = blockSizeToTryAligned; 
#line 1589
}  
#line 1591
dynamicSMemSize = blockSizeToDynamicSMemSize(blockSizeToTry); 
#line 1593
status = cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(&occupancyInBlocks, func, blockSizeToTry, dynamicSMemSize, flags); 
#line 1600
if (status != (cudaSuccess)) { 
#line 1601
return status; 
#line 1602
}  
#line 1604
occupancyInThreads = (blockSizeToTry * occupancyInBlocks); 
#line 1606
if (occupancyInThreads > maxOccupancy) { 
#line 1607
maxBlockSize = blockSizeToTry; 
#line 1608
numBlocks = occupancyInBlocks; 
#line 1609
maxOccupancy = occupancyInThreads; 
#line 1610
}  
#line 1614
if (occupancyLimit == maxOccupancy) { 
#line 1615
break; 
#line 1616
}  
#line 1617
}  
#line 1625
(*minGridSize) = (numBlocks * multiProcessorCount); 
#line 1626
(*blockSize) = maxBlockSize; 
#line 1628
return status; 
#line 1629
} 
#line 1662
template< class UnaryFunction, class T> static __inline ::cudaError_t 
#line 1663
cudaOccupancyMaxPotentialBlockSizeVariableSMem(int *
#line 1664
minGridSize, int *
#line 1665
blockSize, T 
#line 1666
func, UnaryFunction 
#line 1667
blockSizeToDynamicSMemSize, int 
#line 1668
blockSizeLimit = 0) 
#line 1669
{ 
#line 1670
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, blockSizeToDynamicSMemSize, blockSizeLimit, 0); 
#line 1671
} 
#line 1707
template< class T> static __inline ::cudaError_t 
#line 1708
cudaOccupancyMaxPotentialBlockSize(int *
#line 1709
minGridSize, int *
#line 1710
blockSize, T 
#line 1711
func, ::size_t 
#line 1712
dynamicSMemSize = 0, int 
#line 1713
blockSizeLimit = 0) 
#line 1714
{ 
#line 1715
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, ((::__cudaOccupancyB2DHelper)(dynamicSMemSize)), blockSizeLimit, 0); 
#line 1716
} 
#line 1766
template< class T> static __inline ::cudaError_t 
#line 1767
cudaOccupancyMaxPotentialBlockSizeWithFlags(int *
#line 1768
minGridSize, int *
#line 1769
blockSize, T 
#line 1770
func, ::size_t 
#line 1771
dynamicSMemSize = 0, int 
#line 1772
blockSizeLimit = 0, unsigned 
#line 1773
flags = 0) 
#line 1774
{ 
#line 1775
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, ((::__cudaOccupancyB2DHelper)(dynamicSMemSize)), blockSizeLimit, flags); 
#line 1776
} 
#line 1814
template< class T> static __inline ::cudaError_t 
#line 1815
cudaLaunch(T *
#line 1816
func) 
#line 1818
{ 
#line 1819
return ::cudaLaunch((const void *)func); 
#line 1820
} 
#line 1851
template< class T> __inline ::cudaError_t 
#line 1852
cudaFuncGetAttributes(::cudaFuncAttributes *
#line 1853
attr, T *
#line 1854
entry) 
#line 1856
{ 
#line 1857
return ::cudaFuncGetAttributes(attr, (const void *)entry); 
#line 1858
} 
#line 1880
template< class T, int dim> static __inline ::cudaError_t 
#line 1881
cudaBindSurfaceToArray(const surface< T, dim>  &
#line 1882
surf, ::cudaArray_const_t 
#line 1883
array, const ::cudaChannelFormatDesc &
#line 1884
desc) 
#line 1886
{ 
#line 1887
return ::cudaBindSurfaceToArray(&surf, array, &desc); 
#line 1888
} 
#line 1909
template< class T, int dim> static __inline ::cudaError_t 
#line 1910
cudaBindSurfaceToArray(const surface< T, dim>  &
#line 1911
surf, ::cudaArray_const_t 
#line 1912
array) 
#line 1914
{ 
#line 1915
::cudaChannelFormatDesc desc; 
#line 1916
::cudaError_t err = ::cudaGetChannelDesc(&desc, array); 
#line 1918
return (err == (cudaSuccess)) ? cudaBindSurfaceToArray(surf, array, desc) : err; 
#line 1919
} 
#line 1933 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
#pragma warning(pop)
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
__pragma( pack ( push, 8 )) extern "C" {
#line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
#pragma detect_mismatch("_CRT_STDIO_ISO_WIDE_SPECIFIERS", "0")
#line 72 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
__declspec(noinline) __inline unsigned __int64 *__cdecl __local_stdio_printf_options() 
#line 73
{ 
#line 74
static unsigned __int64 _OptionsStorage; 
#line 75
return &_OptionsStorage; 
#line 76
} 
#line 81
__declspec(noinline) __inline unsigned __int64 *__cdecl __local_stdio_scanf_options() 
#line 82
{ 
#line 83
static unsigned __int64 _OptionsStorage; 
#line 84
return &_OptionsStorage; 
#line 85
} 
#line 105
}__pragma( pack ( pop )) 
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__pragma( pack ( push, 8 )) extern "C" {
#line 28
typedef 
#line 25
struct _iobuf { 
#line 27
void *_Placeholder; 
#line 28
} FILE; 
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) FILE *__cdecl __acrt_iob_func(unsigned); 
#line 47
__declspec(dllimport) wint_t __cdecl fgetwc(FILE * _Stream); 
#line 52
__declspec(dllimport) wint_t __cdecl _fgetwchar(); 
#line 55
__declspec(dllimport) wint_t __cdecl fputwc(__wchar_t _Character, FILE * _Stream); 
#line 60
__declspec(dllimport) wint_t __cdecl _fputwchar(__wchar_t _Character); 
#line 65
__declspec(dllimport) wint_t __cdecl getwc(FILE * _Stream); 
#line 70
__declspec(dllimport) wint_t __cdecl getwchar(); 
#line 75
__declspec(dllimport) __wchar_t *__cdecl fgetws(__wchar_t * _Buffer, int _BufferCount, FILE * _Stream); 
#line 82
__declspec(dllimport) int __cdecl fputws(const __wchar_t * _Buffer, FILE * _Stream); 
#line 89
__declspec(dllimport) __wchar_t *__cdecl _getws_s(__wchar_t * _Buffer, size_t _BufferCount); 
#line 94
extern "C++" {template< size_t _Size> inline __wchar_t *__cdecl _getws_s(__wchar_t (&_Buffer)[_Size]) throw() { return _getws_s(_Buffer, _Size); } }
#line 101 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl putwc(__wchar_t _Character, FILE * _Stream); 
#line 107
__declspec(dllimport) wint_t __cdecl putwchar(__wchar_t _Character); 
#line 112
__declspec(dllimport) int __cdecl _putws(const __wchar_t * _Buffer); 
#line 117
__declspec(dllimport) wint_t __cdecl ungetwc(wint_t _Character, FILE * _Stream); 
#line 123
__declspec(dllimport) FILE *__cdecl _wfdopen(int _FileHandle, const __wchar_t * _Mode); 
#line 129
__declspec(dllimport) FILE *__cdecl _wfopen(const __wchar_t * _FileName, const __wchar_t * _Mode); 
#line 135
__declspec(dllimport) errno_t __cdecl _wfopen_s(FILE ** _Stream, const __wchar_t * _FileName, const __wchar_t * _Mode); 
#line 143
__declspec(dllimport) FILE *__cdecl _wfreopen(const __wchar_t * _FileName, const __wchar_t * _Mode, FILE * _OldStream); 
#line 150
__declspec(dllimport) errno_t __cdecl _wfreopen_s(FILE ** _Stream, const __wchar_t * _FileName, const __wchar_t * _Mode, FILE * _OldStream); 
#line 158
__declspec(dllimport) FILE *__cdecl _wfsopen(const __wchar_t * _FileName, const __wchar_t * _Mode, int _ShFlag); 
#line 164
__declspec(dllimport) void __cdecl _wperror(const __wchar_t * _ErrorMessage); 
#line 171
__declspec(dllimport) FILE *__cdecl _wpopen(const __wchar_t * _Command, const __wchar_t * _Mode); 
#line 178 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl _wremove(const __wchar_t * _FileName); 
#line 186
__declspec(dllimport) __declspec(allocator) __wchar_t *__cdecl _wtempnam(const __wchar_t * _Directory, const __wchar_t * _FilePrefix); 
#line 195
__declspec(dllimport) errno_t __cdecl _wtmpnam_s(__wchar_t * _Buffer, size_t _BufferCount); 
#line 200
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wtmpnam_s(__wchar_t (&_Buffer)[_Size]) throw() { return _wtmpnam_s(_Buffer, _Size); } }
#line 205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) __wchar_t *__cdecl _wtmpnam(__wchar_t * _Buffer); 
#line 219 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl _fgetwc_nolock(FILE * _Stream); 
#line 224
__declspec(dllimport) wint_t __cdecl _fputwc_nolock(__wchar_t _Character, FILE * _Stream); 
#line 230
__declspec(dllimport) wint_t __cdecl _getwc_nolock(FILE * _Stream); 
#line 235
__declspec(dllimport) wint_t __cdecl _putwc_nolock(__wchar_t _Character, FILE * _Stream); 
#line 241
__declspec(dllimport) wint_t __cdecl _ungetwc_nolock(wint_t _Character, FILE * _Stream); 
#line 267 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vfwprintf(unsigned __int64 _Options, FILE * _Stream, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 276
__declspec(dllimport) int __cdecl __stdio_common_vfwprintf_s(unsigned __int64 _Options, FILE * _Stream, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 285
__declspec(dllimport) int __cdecl __stdio_common_vfwprintf_p(unsigned __int64 _Options, FILE * _Stream, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 294
__inline int __cdecl _vfwprintf_l(FILE *const 
#line 295
_Stream, const __wchar_t *const 
#line 296
_Format, const _locale_t 
#line 297
_Locale, va_list 
#line 298
_ArgList) 
#line 303 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 304
return __stdio_common_vfwprintf(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 305
} 
#line 309 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vfwprintf(FILE *const 
#line 310
_Stream, const __wchar_t *const 
#line 311
_Format, va_list 
#line 312
_ArgList) 
#line 317 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 318
return _vfwprintf_l(_Stream, _Format, 0, _ArgList); 
#line 319
} 
#line 323 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vfwprintf_s_l(FILE *const 
#line 324
_Stream, const __wchar_t *const 
#line 325
_Format, const _locale_t 
#line 326
_Locale, va_list 
#line 327
_ArgList) 
#line 332 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 333
return __stdio_common_vfwprintf_s(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 334
} 
#line 340 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vfwprintf_s(FILE *const 
#line 341
_Stream, const __wchar_t *const 
#line 342
_Format, va_list 
#line 343
_ArgList) 
#line 348 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 349
return _vfwprintf_s_l(_Stream, _Format, 0, _ArgList); 
#line 350
} 
#line 356 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vfwprintf_p_l(FILE *const 
#line 357
_Stream, const __wchar_t *const 
#line 358
_Format, const _locale_t 
#line 359
_Locale, va_list 
#line 360
_ArgList) 
#line 365 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 366
return __stdio_common_vfwprintf_p(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 367
} 
#line 371 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vfwprintf_p(FILE *const 
#line 372
_Stream, const __wchar_t *const 
#line 373
_Format, va_list 
#line 374
_ArgList) 
#line 379 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 380
return _vfwprintf_p_l(_Stream, _Format, 0, _ArgList); 
#line 381
} 
#line 385 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwprintf_l(const __wchar_t *const 
#line 386
_Format, const _locale_t 
#line 387
_Locale, va_list 
#line 388
_ArgList) 
#line 393 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 394
return _vfwprintf_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 395
} 
#line 399 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vwprintf(const __wchar_t *const 
#line 400
_Format, va_list 
#line 401
_ArgList) 
#line 406 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 407
return _vfwprintf_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 408
} 
#line 412 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwprintf_s_l(const __wchar_t *const 
#line 413
_Format, const _locale_t 
#line 414
_Locale, va_list 
#line 415
_ArgList) 
#line 420 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 421
return _vfwprintf_s_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 422
} 
#line 428 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vwprintf_s(const __wchar_t *const 
#line 429
_Format, va_list 
#line 430
_ArgList) 
#line 435 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 436
return _vfwprintf_s_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 437
} 
#line 443 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwprintf_p_l(const __wchar_t *const 
#line 444
_Format, const _locale_t 
#line 445
_Locale, va_list 
#line 446
_ArgList) 
#line 451 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 452
return _vfwprintf_p_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 453
} 
#line 457 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwprintf_p(const __wchar_t *const 
#line 458
_Format, va_list 
#line 459
_ArgList) 
#line 464 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 465
return _vfwprintf_p_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 466
} 
#line 470 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwprintf_l(FILE *const 
#line 471
_Stream, const __wchar_t *const 
#line 472
_Format, const _locale_t 
#line 473
_Locale, ...) 
#line 478 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 479
int _Result; 
#line 480
va_list _ArgList; 
#line 481
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 482
_Result = _vfwprintf_l(_Stream, _Format, _Locale, _ArgList); 
#line 483
(void)(_ArgList = ((va_list)0)); 
#line 484
return _Result; 
#line 485
} 
#line 489 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl fwprintf(FILE *const 
#line 490
_Stream, const __wchar_t *const 
#line 491
_Format, ...) 
#line 496 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 497
int _Result; 
#line 498
va_list _ArgList; 
#line 499
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 500
_Result = _vfwprintf_l(_Stream, _Format, 0, _ArgList); 
#line 501
(void)(_ArgList = ((va_list)0)); 
#line 502
return _Result; 
#line 503
} 
#line 507 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwprintf_s_l(FILE *const 
#line 508
_Stream, const __wchar_t *const 
#line 509
_Format, const _locale_t 
#line 510
_Locale, ...) 
#line 515 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 516
int _Result; 
#line 517
va_list _ArgList; 
#line 518
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 519
_Result = _vfwprintf_s_l(_Stream, _Format, _Locale, _ArgList); 
#line 520
(void)(_ArgList = ((va_list)0)); 
#line 521
return _Result; 
#line 522
} 
#line 528 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl fwprintf_s(FILE *const 
#line 529
_Stream, const __wchar_t *const 
#line 530
_Format, ...) 
#line 535 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 536
int _Result; 
#line 537
va_list _ArgList; 
#line 538
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 539
_Result = _vfwprintf_s_l(_Stream, _Format, 0, _ArgList); 
#line 540
(void)(_ArgList = ((va_list)0)); 
#line 541
return _Result; 
#line 542
} 
#line 548 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwprintf_p_l(FILE *const 
#line 549
_Stream, const __wchar_t *const 
#line 550
_Format, const _locale_t 
#line 551
_Locale, ...) 
#line 556 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 557
int _Result; 
#line 558
va_list _ArgList; 
#line 559
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 560
_Result = _vfwprintf_p_l(_Stream, _Format, _Locale, _ArgList); 
#line 561
(void)(_ArgList = ((va_list)0)); 
#line 562
return _Result; 
#line 563
} 
#line 567 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwprintf_p(FILE *const 
#line 568
_Stream, const __wchar_t *const 
#line 569
_Format, ...) 
#line 574 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 575
int _Result; 
#line 576
va_list _ArgList; 
#line 577
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 578
_Result = _vfwprintf_p_l(_Stream, _Format, 0, _ArgList); 
#line 579
(void)(_ArgList = ((va_list)0)); 
#line 580
return _Result; 
#line 581
} 
#line 585 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wprintf_l(const __wchar_t *const 
#line 586
_Format, const _locale_t 
#line 587
_Locale, ...) 
#line 592 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 593
int _Result; 
#line 594
va_list _ArgList; 
#line 595
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 596
_Result = _vfwprintf_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 597
(void)(_ArgList = ((va_list)0)); 
#line 598
return _Result; 
#line 599
} 
#line 603 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl wprintf(const __wchar_t *const 
#line 604
_Format, ...) 
#line 609 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 610
int _Result; 
#line 611
va_list _ArgList; 
#line 612
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 613
_Result = _vfwprintf_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 614
(void)(_ArgList = ((va_list)0)); 
#line 615
return _Result; 
#line 616
} 
#line 620 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wprintf_s_l(const __wchar_t *const 
#line 621
_Format, const _locale_t 
#line 622
_Locale, ...) 
#line 627 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 628
int _Result; 
#line 629
va_list _ArgList; 
#line 630
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 631
_Result = _vfwprintf_s_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 632
(void)(_ArgList = ((va_list)0)); 
#line 633
return _Result; 
#line 634
} 
#line 640 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl wprintf_s(const __wchar_t *const 
#line 641
_Format, ...) 
#line 646 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 647
int _Result; 
#line 648
va_list _ArgList; 
#line 649
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 650
_Result = _vfwprintf_s_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 651
(void)(_ArgList = ((va_list)0)); 
#line 652
return _Result; 
#line 653
} 
#line 659 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wprintf_p_l(const __wchar_t *const 
#line 660
_Format, const _locale_t 
#line 661
_Locale, ...) 
#line 666 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 667
int _Result; 
#line 668
va_list _ArgList; 
#line 669
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 670
_Result = _vfwprintf_p_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 671
(void)(_ArgList = ((va_list)0)); 
#line 672
return _Result; 
#line 673
} 
#line 677 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wprintf_p(const __wchar_t *const 
#line 678
_Format, ...) 
#line 683 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 684
int _Result; 
#line 685
va_list _ArgList; 
#line 686
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 687
_Result = _vfwprintf_p_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 688
(void)(_ArgList = ((va_list)0)); 
#line 689
return _Result; 
#line 690
} 
#line 700 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vfwscanf(unsigned __int64 _Options, FILE * _Stream, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 709
__inline int __cdecl _vfwscanf_l(FILE *const 
#line 710
_Stream, const __wchar_t *const 
#line 711
_Format, const _locale_t 
#line 712
_Locale, va_list 
#line 713
_ArgList) 
#line 718 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 719
return __stdio_common_vfwscanf(*__local_stdio_scanf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 722
} 
#line 726 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vfwscanf(FILE *const 
#line 727
_Stream, const __wchar_t *const 
#line 728
_Format, va_list 
#line 729
_ArgList) 
#line 734 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 735
return _vfwscanf_l(_Stream, _Format, 0, _ArgList); 
#line 736
} 
#line 740 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vfwscanf_s_l(FILE *const 
#line 741
_Stream, const __wchar_t *const 
#line 742
_Format, const _locale_t 
#line 743
_Locale, va_list 
#line 744
_ArgList) 
#line 749 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 750
return __stdio_common_vfwscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Stream, _Format, _Locale, _ArgList); 
#line 753
} 
#line 759 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vfwscanf_s(FILE *const 
#line 760
_Stream, const __wchar_t *const 
#line 761
_Format, va_list 
#line 762
_ArgList) 
#line 767 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 768
return _vfwscanf_s_l(_Stream, _Format, 0, _ArgList); 
#line 769
} 
#line 774 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwscanf_l(const __wchar_t *const 
#line 775
_Format, const _locale_t 
#line 776
_Locale, va_list 
#line 777
_ArgList) 
#line 782 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 783
return _vfwscanf_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 784
} 
#line 788 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vwscanf(const __wchar_t *const 
#line 789
_Format, va_list 
#line 790
_ArgList) 
#line 795 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 796
return _vfwscanf_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 797
} 
#line 801 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwscanf_s_l(const __wchar_t *const 
#line 802
_Format, const _locale_t 
#line 803
_Locale, va_list 
#line 804
_ArgList) 
#line 809 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 810
return _vfwscanf_s_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 811
} 
#line 817 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vwscanf_s(const __wchar_t *const 
#line 818
_Format, va_list 
#line 819
_ArgList) 
#line 824 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 825
return _vfwscanf_s_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 826
} 
#line 832 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwscanf_l(FILE *const 
#line 833
_Stream, const __wchar_t *const 
#line 834
_Format, const _locale_t 
#line 835
_Locale, ...) 
#line 840 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 841
int _Result; 
#line 842
va_list _ArgList; 
#line 843
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 844
_Result = _vfwscanf_l(_Stream, _Format, _Locale, _ArgList); 
#line 845
(void)(_ArgList = ((va_list)0)); 
#line 846
return _Result; 
#line 847
} 
#line 851 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl fwscanf(FILE *const 
#line 852
_Stream, const __wchar_t *const 
#line 853
_Format, ...) 
#line 858 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 859
int _Result; 
#line 860
va_list _ArgList; 
#line 861
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 862
_Result = _vfwscanf_l(_Stream, _Format, 0, _ArgList); 
#line 863
(void)(_ArgList = ((va_list)0)); 
#line 864
return _Result; 
#line 865
} 
#line 869 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwscanf_s_l(FILE *const 
#line 870
_Stream, const __wchar_t *const 
#line 871
_Format, const _locale_t 
#line 872
_Locale, ...) 
#line 877 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 878
int _Result; 
#line 879
va_list _ArgList; 
#line 880
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 881
_Result = _vfwscanf_s_l(_Stream, _Format, _Locale, _ArgList); 
#line 882
(void)(_ArgList = ((va_list)0)); 
#line 883
return _Result; 
#line 884
} 
#line 890 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl fwscanf_s(FILE *const 
#line 891
_Stream, const __wchar_t *const 
#line 892
_Format, ...) 
#line 897 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 898
int _Result; 
#line 899
va_list _ArgList; 
#line 900
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 901
_Result = _vfwscanf_s_l(_Stream, _Format, 0, _ArgList); 
#line 902
(void)(_ArgList = ((va_list)0)); 
#line 903
return _Result; 
#line 904
} 
#line 910 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wscanf_l(const __wchar_t *const 
#line 911
_Format, const _locale_t 
#line 912
_Locale, ...) 
#line 917 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 918
int _Result; 
#line 919
va_list _ArgList; 
#line 920
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 921
_Result = _vfwscanf_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 922
(void)(_ArgList = ((va_list)0)); 
#line 923
return _Result; 
#line 924
} 
#line 928 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl wscanf(const __wchar_t *const 
#line 929
_Format, ...) 
#line 934 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 935
int _Result; 
#line 936
va_list _ArgList; 
#line 937
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 938
_Result = _vfwscanf_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 939
(void)(_ArgList = ((va_list)0)); 
#line 940
return _Result; 
#line 941
} 
#line 945 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wscanf_s_l(const __wchar_t *const 
#line 946
_Format, const _locale_t 
#line 947
_Locale, ...) 
#line 952 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 953
int _Result; 
#line 954
va_list _ArgList; 
#line 955
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 956
_Result = _vfwscanf_s_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 957
(void)(_ArgList = ((va_list)0)); 
#line 958
return _Result; 
#line 959
} 
#line 965 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl wscanf_s(const __wchar_t *const 
#line 966
_Format, ...) 
#line 971 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 972
int _Result; 
#line 973
va_list _ArgList; 
#line 974
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 975
_Result = _vfwscanf_s_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 976
(void)(_ArgList = ((va_list)0)); 
#line 977
return _Result; 
#line 978
} 
#line 1001 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vswprintf(unsigned __int64 _Options, __wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1012
__declspec(dllimport) int __cdecl __stdio_common_vswprintf_s(unsigned __int64 _Options, __wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1023
__declspec(dllimport) int __cdecl __stdio_common_vsnwprintf_s(unsigned __int64 _Options, __wchar_t * _Buffer, size_t _BufferCount, size_t _MaxCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1035
__declspec(dllimport) int __cdecl __stdio_common_vswprintf_p(unsigned __int64 _Options, __wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1046
__inline int __cdecl _vsnwprintf_l(__wchar_t *const 
#line 1047
_Buffer, const size_t 
#line 1048
_BufferCount, const __wchar_t *const 
#line 1049
_Format, const _locale_t 
#line 1050
_Locale, va_list 
#line 1051
_ArgList) 
#line 1056 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1057
const int _Result = __stdio_common_vswprintf((*__local_stdio_printf_options()) | (1Ui64 << 0), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1061
return (_Result < 0) ? -1 : _Result; 
#line 1062
} 
#line 1065 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(push)
#pragma warning(disable: 4793)
#line 1070
__inline int __cdecl _vsnwprintf_s_l(__wchar_t *const 
#line 1071
_Buffer, const size_t 
#line 1072
_BufferCount, const size_t 
#line 1073
_MaxCount, const __wchar_t *const 
#line 1074
_Format, const _locale_t 
#line 1075
_Locale, va_list 
#line 1076
_ArgList) 
#line 1081 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1082
const int _Result = __stdio_common_vsnwprintf_s(*__local_stdio_printf_options(), _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList); 
#line 1086
return (_Result < 0) ? -1 : _Result; 
#line 1087
} 
#line 1092 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vsnwprintf_s(__wchar_t *const 
#line 1093
_Buffer, const size_t 
#line 1094
_BufferCount, const size_t 
#line 1095
_MaxCount, const __wchar_t *const 
#line 1096
_Format, va_list 
#line 1097
_ArgList) 
#line 1102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1103
return _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList); 
#line 1104
} 
#line 1107 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwprintf(__wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, ...); __inline int __cdecl _vsnwprintf(__wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, va_list _Args); 
#line 1116 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(pop)
#line 1120
__inline int __cdecl _vsnwprintf(__wchar_t *
#line 1121
_Buffer, size_t 
#line 1122
_BufferCount, const __wchar_t *
#line 1123
_Format, va_list 
#line 1124
_ArgList) 
#line 1129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#pragma warning(push)
#pragma warning(disable: 4996)
return _vsnwprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#pragma warning(pop)
} 
#line 1137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {template< size_t _Size> inline int __cdecl _vsnwprintf_s(__wchar_t (&_Buffer)[_Size], ::size_t _BufferCount, const __wchar_t *_Format, ::va_list _ArgList) throw() { return _vsnwprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
#line 1148 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_c_l(__wchar_t *const 
#line 1149
_Buffer, const size_t 
#line 1150
_BufferCount, const __wchar_t *const 
#line 1151
_Format, const _locale_t 
#line 1152
_Locale, va_list 
#line 1153
_ArgList) 
#line 1158 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1159
const int _Result = __stdio_common_vswprintf(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1163
return (_Result < 0) ? -1 : _Result; 
#line 1164
} 
#line 1169 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_c(__wchar_t *const 
#line 1170
_Buffer, const size_t 
#line 1171
_BufferCount, const __wchar_t *const 
#line 1172
_Format, va_list 
#line 1173
_ArgList) 
#line 1178 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1179
return _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1180
} 
#line 1185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_l(__wchar_t *const 
#line 1186
_Buffer, const size_t 
#line 1187
_BufferCount, const __wchar_t *const 
#line 1188
_Format, const _locale_t 
#line 1189
_Locale, va_list 
#line 1190
_ArgList) 
#line 1195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#pragma warning(push)
#pragma warning(disable: 4996)
return _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#pragma warning(pop)
} 
#line 1205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl __vswprintf_l(__wchar_t *const 
#line 1206
_Buffer, const __wchar_t *const 
#line 1207
_Format, const _locale_t 
#line 1208
_Locale, va_list 
#line 1209
_ArgList) 
#line 1214 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1215
return _vswprintf_l(_Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 1216
} 
#line 1221 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf(__wchar_t *const 
#line 1222
_Buffer, const __wchar_t *const 
#line 1223
_Format, va_list 
#line 1224
_ArgList) 
#line 1229 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1230
return _vswprintf_l(_Buffer, (size_t)(-1), _Format, 0, _ArgList); 
#line 1231
} 
#line 1236 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vswprintf(__wchar_t *const 
#line 1237
_Buffer, const size_t 
#line 1238
_BufferCount, const __wchar_t *const 
#line 1239
_Format, va_list 
#line 1240
_ArgList) 
#line 1245 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1246
return _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1247
} 
#line 1252 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_s_l(__wchar_t *const 
#line 1253
_Buffer, const size_t 
#line 1254
_BufferCount, const __wchar_t *const 
#line 1255
_Format, const _locale_t 
#line 1256
_Locale, va_list 
#line 1257
_ArgList) 
#line 1262 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1263
const int _Result = __stdio_common_vswprintf_s(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1267
return (_Result < 0) ? -1 : _Result; 
#line 1268
} 
#line 1274 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vswprintf_s(__wchar_t *const 
#line 1275
_Buffer, const size_t 
#line 1276
_BufferCount, const __wchar_t *const 
#line 1277
_Format, va_list 
#line 1278
_ArgList) 
#line 1283 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1284
return _vswprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1285
} 
#line 1290 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {template< size_t _Size> inline int __cdecl vswprintf_s(__wchar_t (&_Buffer)[_Size], const __wchar_t *_Format, ::va_list _ArgList) throw() { return vswprintf_s(_Buffer, _Size, _Format, _ArgList); } }
#line 1300 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_p_l(__wchar_t *const 
#line 1301
_Buffer, const size_t 
#line 1302
_BufferCount, const __wchar_t *const 
#line 1303
_Format, const _locale_t 
#line 1304
_Locale, va_list 
#line 1305
_ArgList) 
#line 1310 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1311
const int _Result = __stdio_common_vswprintf_p(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1315
return (_Result < 0) ? -1 : _Result; 
#line 1316
} 
#line 1321 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_p(__wchar_t *const 
#line 1322
_Buffer, const size_t 
#line 1323
_BufferCount, const __wchar_t *const 
#line 1324
_Format, va_list 
#line 1325
_ArgList) 
#line 1330 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1331
return _vswprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1332
} 
#line 1337 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vscwprintf_l(const __wchar_t *const 
#line 1338
_Format, const _locale_t 
#line 1339
_Locale, va_list 
#line 1340
_ArgList) 
#line 1345 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1346
const int _Result = __stdio_common_vswprintf((*__local_stdio_printf_options()) | (1Ui64 << 1), 0, 0, _Format, _Locale, _ArgList); 
#line 1350
return (_Result < 0) ? -1 : _Result; 
#line 1351
} 
#line 1356 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vscwprintf(const __wchar_t *const 
#line 1357
_Format, va_list 
#line 1358
_ArgList) 
#line 1363 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1364
return _vscwprintf_l(_Format, 0, _ArgList); 
#line 1365
} 
#line 1370 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vscwprintf_p_l(const __wchar_t *const 
#line 1371
_Format, const _locale_t 
#line 1372
_Locale, va_list 
#line 1373
_ArgList) 
#line 1378 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1379
const int _Result = __stdio_common_vswprintf_p((*__local_stdio_printf_options()) | (1Ui64 << 1), 0, 0, _Format, _Locale, _ArgList); 
#line 1383
return (_Result < 0) ? -1 : _Result; 
#line 1384
} 
#line 1389 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vscwprintf_p(const __wchar_t *const 
#line 1390
_Format, va_list 
#line 1391
_ArgList) 
#line 1396 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1397
return _vscwprintf_p_l(_Format, 0, _ArgList); 
#line 1398
} 
#line 1403 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl __swprintf_l(__wchar_t *const 
#line 1404
_Buffer, const __wchar_t *const 
#line 1405
_Format, const _locale_t 
#line 1406
_Locale, ...) 
#line 1411 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1412
int _Result; 
#line 1413
va_list _ArgList; 
#line 1414
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1415
_Result = __vswprintf_l(_Buffer, _Format, _Locale, _ArgList); 
#line 1416
(void)(_ArgList = ((va_list)0)); 
#line 1417
return _Result; 
#line 1418
} 
#line 1423 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_l(__wchar_t *const 
#line 1424
_Buffer, const size_t 
#line 1425
_BufferCount, const __wchar_t *const 
#line 1426
_Format, const _locale_t 
#line 1427
_Locale, ...) 
#line 1432 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1433
int _Result; 
#line 1434
va_list _ArgList; 
#line 1435
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1436
_Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1437
(void)(_ArgList = ((va_list)0)); 
#line 1438
return _Result; 
#line 1439
} 
#line 1444 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf(__wchar_t *const 
#line 1445
_Buffer, const __wchar_t *const 
#line 1446
_Format, ...) 
#line 1451 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1452
int _Result; 
#line 1453
va_list _ArgList; 
#line 1454
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1455
_Result = __vswprintf_l(_Buffer, _Format, 0, _ArgList); 
#line 1456
(void)(_ArgList = ((va_list)0)); 
#line 1457
return _Result; 
#line 1458
} 
#line 1463 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl swprintf(__wchar_t *const 
#line 1464
_Buffer, const size_t 
#line 1465
_BufferCount, const __wchar_t *const 
#line 1466
_Format, ...) 
#line 1471 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1472
int _Result; 
#line 1473
va_list _ArgList; 
#line 1474
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1475
_Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1476
(void)(_ArgList = ((va_list)0)); 
#line 1477
return _Result; 
#line 1478
} 
#line 1481 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(push)
#line 1484
#pragma warning(disable:4793 4996)
#line 1486
__inline int __cdecl __swprintf_l(__wchar_t * _Buffer, const __wchar_t * _Format, _locale_t _Locale, ...); __inline int __cdecl __vswprintf_l(__wchar_t * _Buffer, const __wchar_t * _Format, _locale_t _Locale, va_list _Args); 
#line 1495 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf(__wchar_t * _Buffer, const __wchar_t * _Format, ...); __inline int __cdecl _vswprintf(__wchar_t * _Buffer, const __wchar_t * _Format, va_list _Args); 
#line 1502 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(pop)
#line 1506
__inline int __cdecl _swprintf_s_l(__wchar_t *const 
#line 1507
_Buffer, const size_t 
#line 1508
_BufferCount, const __wchar_t *const 
#line 1509
_Format, const _locale_t 
#line 1510
_Locale, ...) 
#line 1515 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1516
int _Result; 
#line 1517
va_list _ArgList; 
#line 1518
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1519
_Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1520
(void)(_ArgList = ((va_list)0)); 
#line 1521
return _Result; 
#line 1522
} 
#line 1528 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl swprintf_s(__wchar_t *const 
#line 1529
_Buffer, const size_t 
#line 1530
_BufferCount, const __wchar_t *const 
#line 1531
_Format, ...) 
#line 1536 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1537
int _Result; 
#line 1538
va_list _ArgList; 
#line 1539
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1540
_Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1541
(void)(_ArgList = ((va_list)0)); 
#line 1542
return _Result; 
#line 1543
} 
#line 1548 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {__pragma( warning(push)) __pragma( warning(disable: 4793)) template< size_t _Size> inline int __cdecl swprintf_s(__wchar_t (&_Buffer)[_Size], const __wchar_t *_Format, ...) throw() { ::va_list _ArgList; (void)(__vcrt_va_start_verify_argument_type< const __wchar_t *> (), ((void)__va_start(&_ArgList, _Format))); return vswprintf_s(_Buffer, _Size, _Format, _ArgList); } __pragma( warning(pop)) }
#line 1557 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_p_l(__wchar_t *const 
#line 1558
_Buffer, const size_t 
#line 1559
_BufferCount, const __wchar_t *const 
#line 1560
_Format, const _locale_t 
#line 1561
_Locale, ...) 
#line 1566 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1567
int _Result; 
#line 1568
va_list _ArgList; 
#line 1569
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1570
_Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1571
(void)(_ArgList = ((va_list)0)); 
#line 1572
return _Result; 
#line 1573
} 
#line 1578 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_p(__wchar_t *const 
#line 1579
_Buffer, const size_t 
#line 1580
_BufferCount, const __wchar_t *const 
#line 1581
_Format, ...) 
#line 1586 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1587
int _Result; 
#line 1588
va_list _ArgList; 
#line 1589
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1590
_Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1591
(void)(_ArgList = ((va_list)0)); 
#line 1592
return _Result; 
#line 1593
} 
#line 1598 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_c_l(__wchar_t *const 
#line 1599
_Buffer, const size_t 
#line 1600
_BufferCount, const __wchar_t *const 
#line 1601
_Format, const _locale_t 
#line 1602
_Locale, ...) 
#line 1607 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1608
int _Result; 
#line 1609
va_list _ArgList; 
#line 1610
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1611
_Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1612
(void)(_ArgList = ((va_list)0)); 
#line 1613
return _Result; 
#line 1614
} 
#line 1619 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_c(__wchar_t *const 
#line 1620
_Buffer, const size_t 
#line 1621
_BufferCount, const __wchar_t *const 
#line 1622
_Format, ...) 
#line 1627 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1628
int _Result; 
#line 1629
va_list _ArgList; 
#line 1630
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1631
_Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1632
(void)(_ArgList = ((va_list)0)); 
#line 1633
return _Result; 
#line 1634
} 
#line 1639 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwprintf_l(__wchar_t *const 
#line 1640
_Buffer, const size_t 
#line 1641
_BufferCount, const __wchar_t *const 
#line 1642
_Format, const _locale_t 
#line 1643
_Locale, ...) 
#line 1648 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1649
int _Result; 
#line 1650
va_list _ArgList; 
#line 1651
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1653
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#pragma warning(pop)
#line 1658
(void)(_ArgList = ((va_list)0)); 
#line 1659
return _Result; 
#line 1660
} 
#line 1665 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwprintf(__wchar_t *
#line 1666
_Buffer, size_t 
#line 1667
_BufferCount, const __wchar_t *
#line 1668
_Format, ...) 
#line 1673 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1674
int _Result; 
#line 1675
va_list _ArgList; 
#line 1676
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1678
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#pragma warning(pop)
#line 1683
(void)(_ArgList = ((va_list)0)); 
#line 1684
return _Result; 
#line 1685
} 
#line 1690 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwprintf_s_l(__wchar_t *const 
#line 1691
_Buffer, const size_t 
#line 1692
_BufferCount, const size_t 
#line 1693
_MaxCount, const __wchar_t *const 
#line 1694
_Format, const _locale_t 
#line 1695
_Locale, ...) 
#line 1700 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1701
int _Result; 
#line 1702
va_list _ArgList; 
#line 1703
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1704
_Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList); 
#line 1705
(void)(_ArgList = ((va_list)0)); 
#line 1706
return _Result; 
#line 1707
} 
#line 1712 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwprintf_s(__wchar_t *const 
#line 1713
_Buffer, const size_t 
#line 1714
_BufferCount, const size_t 
#line 1715
_MaxCount, const __wchar_t *const 
#line 1716
_Format, ...) 
#line 1721 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1722
int _Result; 
#line 1723
va_list _ArgList; 
#line 1724
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1725
_Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList); 
#line 1726
(void)(_ArgList = ((va_list)0)); 
#line 1727
return _Result; 
#line 1728
} 
#line 1731 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {__pragma( warning(push)) __pragma( warning(disable: 4793)) template< size_t _Size> inline int __cdecl _snwprintf_s(__wchar_t (&_Buffer)[_Size], ::size_t _BufferCount, const __wchar_t *_Format, ...) throw() { ::va_list _ArgList; (void)(__vcrt_va_start_verify_argument_type< const __wchar_t *> (), ((void)__va_start(&_ArgList, _Format))); return _vsnwprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } __pragma( warning(pop)) }
#line 1740 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _scwprintf_l(const __wchar_t *const 
#line 1741
_Format, const _locale_t 
#line 1742
_Locale, ...) 
#line 1747 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1748
int _Result; 
#line 1749
va_list _ArgList; 
#line 1750
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1751
_Result = _vscwprintf_l(_Format, _Locale, _ArgList); 
#line 1752
(void)(_ArgList = ((va_list)0)); 
#line 1753
return _Result; 
#line 1754
} 
#line 1759 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _scwprintf(const __wchar_t *const 
#line 1760
_Format, ...) 
#line 1765 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1766
int _Result; 
#line 1767
va_list _ArgList; 
#line 1768
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1769
_Result = _vscwprintf_l(_Format, 0, _ArgList); 
#line 1770
(void)(_ArgList = ((va_list)0)); 
#line 1771
return _Result; 
#line 1772
} 
#line 1777 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _scwprintf_p_l(const __wchar_t *const 
#line 1778
_Format, const _locale_t 
#line 1779
_Locale, ...) 
#line 1784 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1785
int _Result; 
#line 1786
va_list _ArgList; 
#line 1787
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1788
_Result = _vscwprintf_p_l(_Format, _Locale, _ArgList); 
#line 1789
(void)(_ArgList = ((va_list)0)); 
#line 1790
return _Result; 
#line 1791
} 
#line 1796 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _scwprintf_p(const __wchar_t *const 
#line 1797
_Format, ...) 
#line 1802 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1803
int _Result; 
#line 1804
va_list _ArgList; 
#line 1805
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1806
_Result = _vscwprintf_p_l(_Format, 0, _ArgList); 
#line 1807
(void)(_ArgList = ((va_list)0)); 
#line 1808
return _Result; 
#line 1809
} 
#line 1814 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(push)
#pragma warning(disable: 4141 4412 4793 4996 6054)
#line 1820
extern "C++" 
#line 1819
__declspec(deprecated("function has been changed to conform with the ISO C standard, adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) inline int 
#line 1820
swprintf(__wchar_t *const 
#line 1821
_Buffer, const __wchar_t *const 
#line 1822
_Format, ...) throw() 
#line 1824
{ 
#line 1825
int _Result; 
#line 1826
va_list _ArgList; 
#line 1827
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#pragma warning(suppress: 28719)
_Result = vswprintf(_Buffer, 2147483647, _Format, _ArgList); 
#line 1830
(void)(_ArgList = ((va_list)0)); 
#line 1831
return _Result; 
#line 1832
} 
#line 1835
extern "C++" 
#line 1834
__declspec(deprecated("function has been changed to conform with the ISO C standard, adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) inline int __cdecl 
#line 1835
vswprintf(__wchar_t *const 
#line 1836
_Buffer, const __wchar_t *const 
#line 1837
_Format, va_list 
#line 1838
_ArgList) throw() 
#line 1840
{ 
#pragma warning(suppress: 28719)
return vswprintf(_Buffer, 2147483647, _Format, _ArgList); 
#line 1843
} 
#line 1846
extern "C++" 
#line 1845
__declspec(deprecated("function has been changed to conform with the ISO C standard, adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) inline int 
#line 1846
_swprintf_l(__wchar_t *const 
#line 1847
_Buffer, const __wchar_t *const 
#line 1848
_Format, const _locale_t 
#line 1849
_Locale, ...) throw() 
#line 1851
{ 
#line 1852
int _Result; 
#line 1853
va_list _ArgList; 
#line 1854
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1855
_Result = _vswprintf_l(_Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 1856
(void)(_ArgList = ((va_list)0)); 
#line 1857
return _Result; 
#line 1858
} 
#line 1861
extern "C++" 
#line 1860
__declspec(deprecated("function has been changed to conform with the ISO C standard, adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) inline int __cdecl 
#line 1861
_vswprintf_l(__wchar_t *const 
#line 1862
_Buffer, const __wchar_t *const 
#line 1863
_Format, const _locale_t 
#line 1864
_Locale, va_list 
#line 1865
_ArgList) throw() 
#line 1867
{ 
#line 1868
return _vswprintf_l(_Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 1869
} 
#line 1873 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(pop)
#line 1890 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vswscanf(unsigned __int64 _Options, const __wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1901
__inline int __cdecl _vswscanf_l(const __wchar_t *const 
#line 1902
_Buffer, const __wchar_t *const 
#line 1903
_Format, const _locale_t 
#line 1904
_Locale, va_list 
#line 1905
_ArgList) 
#line 1910 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1911
return __stdio_common_vswscanf(*__local_stdio_scanf_options(), _Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 1914
} 
#line 1919 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vswscanf(const __wchar_t *
#line 1920
_Buffer, const __wchar_t *
#line 1921
_Format, va_list 
#line 1922
_ArgList) 
#line 1927 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1928
return _vswscanf_l(_Buffer, _Format, 0, _ArgList); 
#line 1929
} 
#line 1934 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswscanf_s_l(const __wchar_t *const 
#line 1935
_Buffer, const __wchar_t *const 
#line 1936
_Format, const _locale_t 
#line 1937
_Locale, va_list 
#line 1938
_ArgList) 
#line 1943 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1944
return __stdio_common_vswscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 1947
} 
#line 1954 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vswscanf_s(const __wchar_t *const 
#line 1955
_Buffer, const __wchar_t *const 
#line 1956
_Format, va_list 
#line 1957
_ArgList) 
#line 1962 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1963
return _vswscanf_s_l(_Buffer, _Format, 0, _ArgList); 
#line 1964
} 
#line 1969 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {template< size_t _Size> inline int __cdecl vswscanf_s(__wchar_t (&_Buffer)[_Size], const __wchar_t *_Format, ::va_list _Args) throw() { return vswscanf_s(_Buffer, _Size, _Format, _Args); } }
#line 1979 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vsnwscanf_l(const __wchar_t *const 
#line 1980
_Buffer, const size_t 
#line 1981
_BufferCount, const __wchar_t *const 
#line 1982
_Format, const _locale_t 
#line 1983
_Locale, va_list 
#line 1984
_ArgList) 
#line 1989 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1990
return __stdio_common_vswscanf(*__local_stdio_scanf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1993
} 
#line 1998 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vsnwscanf_s_l(const __wchar_t *const 
#line 1999
_Buffer, const size_t 
#line 2000
_BufferCount, const __wchar_t *const 
#line 2001
_Format, const _locale_t 
#line 2002
_Locale, va_list 
#line 2003
_ArgList) 
#line 2008 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2009
return __stdio_common_vswscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 2012
} 
#line 2017 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swscanf_l(const __wchar_t *const 
#line 2018
_Buffer, const __wchar_t *const 
#line 2019
_Format, _locale_t 
#line 2020
_Locale, ...) 
#line 2025 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2026
int _Result; 
#line 2027
va_list _ArgList; 
#line 2028
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2029
_Result = _vswscanf_l(_Buffer, _Format, _Locale, _ArgList); 
#line 2030
(void)(_ArgList = ((va_list)0)); 
#line 2031
return _Result; 
#line 2032
} 
#line 2037 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl swscanf(const __wchar_t *const 
#line 2038
_Buffer, const __wchar_t *const 
#line 2039
_Format, ...) 
#line 2044 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2045
int _Result; 
#line 2046
va_list _ArgList; 
#line 2047
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2048
_Result = _vswscanf_l(_Buffer, _Format, 0, _ArgList); 
#line 2049
(void)(_ArgList = ((va_list)0)); 
#line 2050
return _Result; 
#line 2051
} 
#line 2056 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swscanf_s_l(const __wchar_t *const 
#line 2057
_Buffer, const __wchar_t *const 
#line 2058
_Format, const _locale_t 
#line 2059
_Locale, ...) 
#line 2064 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2065
int _Result; 
#line 2066
va_list _ArgList; 
#line 2067
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2068
_Result = _vswscanf_s_l(_Buffer, _Format, _Locale, _ArgList); 
#line 2069
(void)(_ArgList = ((va_list)0)); 
#line 2070
return _Result; 
#line 2071
} 
#line 2078 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl swscanf_s(const __wchar_t *const 
#line 2079
_Buffer, const __wchar_t *const 
#line 2080
_Format, ...) 
#line 2085 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2086
int _Result; 
#line 2087
va_list _ArgList; 
#line 2088
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2089
_Result = _vswscanf_s_l(_Buffer, _Format, 0, _ArgList); 
#line 2090
(void)(_ArgList = ((va_list)0)); 
#line 2091
return _Result; 
#line 2092
} 
#line 2099 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwscanf_l(const __wchar_t *const 
#line 2100
_Buffer, const size_t 
#line 2101
_BufferCount, const __wchar_t *const 
#line 2102
_Format, const _locale_t 
#line 2103
_Locale, ...) 
#line 2108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2109
int _Result; 
#line 2110
va_list _ArgList; 
#line 2111
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2113
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#pragma warning(pop)
#line 2118
(void)(_ArgList = ((va_list)0)); 
#line 2119
return _Result; 
#line 2120
} 
#line 2125 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwscanf(const __wchar_t *const 
#line 2126
_Buffer, const size_t 
#line 2127
_BufferCount, const __wchar_t *const 
#line 2128
_Format, ...) 
#line 2133 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2134
int _Result; 
#line 2135
va_list _ArgList; 
#line 2136
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2138
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#pragma warning(pop)
#line 2143
(void)(_ArgList = ((va_list)0)); 
#line 2144
return _Result; 
#line 2145
} 
#line 2150 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwscanf_s_l(const __wchar_t *const 
#line 2151
_Buffer, const size_t 
#line 2152
_BufferCount, const __wchar_t *const 
#line 2153
_Format, const _locale_t 
#line 2154
_Locale, ...) 
#line 2159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2160
int _Result; 
#line 2161
va_list _ArgList; 
#line 2162
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2163
_Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 2164
(void)(_ArgList = ((va_list)0)); 
#line 2165
return _Result; 
#line 2166
} 
#line 2171 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwscanf_s(const __wchar_t *const 
#line 2172
_Buffer, const size_t 
#line 2173
_BufferCount, const __wchar_t *const 
#line 2174
_Format, ...) 
#line 2179 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2180
int _Result; 
#line 2181
va_list _ArgList; 
#line 2182
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2183
_Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 2184
(void)(_ArgList = ((va_list)0)); 
#line 2185
return _Result; 
#line 2186
} 
#line 2195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
}__pragma( pack ( pop )) 
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__pragma( pack ( push, 8 )) extern "C" {
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
typedef __int64 fpos_t; 
#line 73
__declspec(dllimport) errno_t __cdecl _get_stream_buffer_pointers(FILE * _Stream, char *** _Base, char *** _Pointer, int ** _Count); 
#line 89
__declspec(dllimport) errno_t __cdecl clearerr_s(FILE * _Stream); 
#line 94
__declspec(dllimport) errno_t __cdecl fopen_s(FILE ** _Stream, const char * _FileName, const char * _Mode); 
#line 102
__declspec(dllimport) size_t __cdecl fread_s(void * _Buffer, size_t _BufferSize, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 111
__declspec(dllimport) errno_t __cdecl freopen_s(FILE ** _Stream, const char * _FileName, const char * _Mode, FILE * _OldStream); 
#line 119
__declspec(dllimport) char *__cdecl gets_s(char * _Buffer, rsize_t _Size); 
#line 125
__declspec(dllimport) errno_t __cdecl tmpfile_s(FILE ** _Stream); 
#line 131
__declspec(dllimport) errno_t __cdecl tmpnam_s(char * _Buffer, rsize_t _Size); 
#line 138 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) void __cdecl clearerr(FILE * _Stream); 
#line 144
__declspec(dllimport) int __cdecl fclose(FILE * _Stream); 
#line 149
__declspec(dllimport) int __cdecl _fcloseall(); 
#line 152
__declspec(dllimport) FILE *__cdecl _fdopen(int _FileHandle, const char * _Mode); 
#line 158
__declspec(dllimport) int __cdecl feof(FILE * _Stream); 
#line 163
__declspec(dllimport) int __cdecl ferror(FILE * _Stream); 
#line 168
__declspec(dllimport) int __cdecl fflush(FILE * _Stream); 
#line 174
__declspec(dllimport) int __cdecl fgetc(FILE * _Stream); 
#line 179
__declspec(dllimport) int __cdecl _fgetchar(); 
#line 183
__declspec(dllimport) int __cdecl fgetpos(FILE * _Stream, fpos_t * _Position); 
#line 190
__declspec(dllimport) char *__cdecl fgets(char * _Buffer, int _MaxCount, FILE * _Stream); 
#line 197
__declspec(dllimport) int __cdecl _fileno(FILE * _Stream); 
#line 202
__declspec(dllimport) int __cdecl _flushall(); 
#line 205
__declspec(dllimport) FILE *__cdecl fopen(const char * _FileName, const char * _Mode); 
#line 213
__declspec(dllimport) int __cdecl fputc(int _Character, FILE * _Stream); 
#line 219
__declspec(dllimport) int __cdecl _fputchar(int _Character); 
#line 225
__declspec(dllimport) int __cdecl fputs(const char * _Buffer, FILE * _Stream); 
#line 231
__declspec(dllimport) size_t __cdecl fread(void * _Buffer, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 240
__declspec(dllimport) FILE *__cdecl freopen(const char * _FileName, const char * _Mode, FILE * _Stream); 
#line 247
__declspec(dllimport) FILE *__cdecl _fsopen(const char * _FileName, const char * _Mode, int _ShFlag); 
#line 255
__declspec(dllimport) int __cdecl fsetpos(FILE * _Stream, const fpos_t * _Position); 
#line 262
__declspec(dllimport) int __cdecl fseek(FILE * _Stream, long _Offset, int _Origin); 
#line 270
__declspec(dllimport) int __cdecl _fseeki64(FILE * _Stream, __int64 _Offset, int _Origin); 
#line 278
__declspec(dllimport) long __cdecl ftell(FILE * _Stream); 
#line 284
__declspec(dllimport) __int64 __cdecl _ftelli64(FILE * _Stream); 
#line 289
__declspec(dllimport) size_t __cdecl fwrite(const void * _Buffer, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 298
__declspec(dllimport) int __cdecl getc(FILE * _Stream); 
#line 303
__declspec(dllimport) int __cdecl getchar(); 
#line 306
__declspec(dllimport) int __cdecl _getmaxstdio(); 
#line 308
extern "C++" {template< size_t _Size> inline char *__cdecl gets_s(char (&_Buffer)[_Size]) throw() { return gets_s(_Buffer, _Size); } }
#line 313 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _getw(FILE * _Stream); 
#line 317
__declspec(dllimport) void __cdecl perror(const char * _ErrorMessage); 
#line 325
__declspec(dllimport) int __cdecl _pclose(FILE * _Stream); 
#line 330
__declspec(dllimport) FILE *__cdecl _popen(const char * _Command, const char * _Mode); 
#line 339 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl putc(int _Character, FILE * _Stream); 
#line 345
__declspec(dllimport) int __cdecl putchar(int _Character); 
#line 350
__declspec(dllimport) int __cdecl puts(const char * _Buffer); 
#line 356
__declspec(dllimport) int __cdecl _putw(int _Word, FILE * _Stream); 
#line 363
__declspec(dllimport) int __cdecl remove(const char * _FileName); 
#line 368
__declspec(dllimport) int __cdecl rename(const char * _OldFileName, const char * _NewFileName); 
#line 373
__declspec(dllimport) int __cdecl _unlink(const char * _FileName); 
#line 380
__declspec(dllimport) int __cdecl unlink(const char * _FileName); 
#line 388 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) void __cdecl rewind(FILE * _Stream); 
#line 393
__declspec(dllimport) int __cdecl _rmtmp(); 
#line 396
__declspec(dllimport) void __cdecl setbuf(FILE * _Stream, char * _Buffer); 
#line 402
__declspec(dllimport) int __cdecl _setmaxstdio(int _Maximum); 
#line 408
__declspec(dllimport) int __cdecl setvbuf(FILE * _Stream, char * _Buffer, int _Mode, size_t _Size); 
#line 421 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) __declspec(allocator) char *__cdecl _tempnam(const char * _DirectoryName, const char * _FilePrefix); 
#line 431 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) FILE *__cdecl tmpfile(); 
#line 433
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl tmpnam_s(char (&_Buffer)[_Size]) throw() { return tmpnam_s(_Buffer, _Size); } }
#line 438 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) char *__cdecl tmpnam(char * _Buffer); 
#line 446 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl ungetc(int _Character, FILE * _Stream); 
#line 458
__declspec(dllimport) void __cdecl _lock_file(FILE * _Stream); 
#line 462
__declspec(dllimport) void __cdecl _unlock_file(FILE * _Stream); 
#line 468
__declspec(dllimport) int __cdecl _fclose_nolock(FILE * _Stream); 
#line 474
__declspec(dllimport) int __cdecl _fflush_nolock(FILE * _Stream); 
#line 480
__declspec(dllimport) int __cdecl _fgetc_nolock(FILE * _Stream); 
#line 486
__declspec(dllimport) int __cdecl _fputc_nolock(int _Character, FILE * _Stream); 
#line 492
__declspec(dllimport) size_t __cdecl _fread_nolock(void * _Buffer, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 501
__declspec(dllimport) size_t __cdecl _fread_nolock_s(void * _Buffer, size_t _BufferSize, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 510
__declspec(dllimport) int __cdecl _fseek_nolock(FILE * _Stream, long _Offset, int _Origin); 
#line 517
__declspec(dllimport) int __cdecl _fseeki64_nolock(FILE * _Stream, __int64 _Offset, int _Origin); 
#line 524
__declspec(dllimport) long __cdecl _ftell_nolock(FILE * _Stream); 
#line 529
__declspec(dllimport) __int64 __cdecl _ftelli64_nolock(FILE * _Stream); 
#line 534
__declspec(dllimport) size_t __cdecl _fwrite_nolock(const void * _Buffer, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 542
__declspec(dllimport) int __cdecl _getc_nolock(FILE * _Stream); 
#line 547
__declspec(dllimport) int __cdecl _putc_nolock(int _Character, FILE * _Stream); 
#line 553
__declspec(dllimport) int __cdecl _ungetc_nolock(int _Character, FILE * _Stream); 
#line 583 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int *__cdecl __p__commode(); 
#line 603 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vfprintf(unsigned __int64 _Options, FILE * _Stream, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 611
__declspec(dllimport) int __cdecl __stdio_common_vfprintf_s(unsigned __int64 _Options, FILE * _Stream, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 620
__declspec(dllimport) int __cdecl __stdio_common_vfprintf_p(unsigned __int64 _Options, FILE * _Stream, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 629
__inline int __cdecl _vfprintf_l(FILE *const 
#line 630
_Stream, const char *const 
#line 631
_Format, const _locale_t 
#line 632
_Locale, va_list 
#line 633
_ArgList) 
#line 638 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 639
return __stdio_common_vfprintf(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 640
} 
#line 644 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vfprintf(FILE *const 
#line 645
_Stream, const char *const 
#line 646
_Format, va_list 
#line 647
_ArgList) 
#line 652 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 653
return _vfprintf_l(_Stream, _Format, 0, _ArgList); 
#line 654
} 
#line 658 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vfprintf_s_l(FILE *const 
#line 659
_Stream, const char *const 
#line 660
_Format, const _locale_t 
#line 661
_Locale, va_list 
#line 662
_ArgList) 
#line 667 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 668
return __stdio_common_vfprintf_s(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 669
} 
#line 675 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vfprintf_s(FILE *const 
#line 676
_Stream, const char *const 
#line 677
_Format, va_list 
#line 678
_ArgList) 
#line 683 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 684
return _vfprintf_s_l(_Stream, _Format, 0, _ArgList); 
#line 685
} 
#line 691 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vfprintf_p_l(FILE *const 
#line 692
_Stream, const char *const 
#line 693
_Format, const _locale_t 
#line 694
_Locale, va_list 
#line 695
_ArgList) 
#line 700 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 701
return __stdio_common_vfprintf_p(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 702
} 
#line 706 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vfprintf_p(FILE *const 
#line 707
_Stream, const char *const 
#line 708
_Format, va_list 
#line 709
_ArgList) 
#line 714 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 715
return _vfprintf_p_l(_Stream, _Format, 0, _ArgList); 
#line 716
} 
#line 720 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vprintf_l(const char *const 
#line 721
_Format, const _locale_t 
#line 722
_Locale, va_list 
#line 723
_ArgList) 
#line 728 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 729
return _vfprintf_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 730
} 
#line 734 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vprintf(const char *const 
#line 735
_Format, va_list 
#line 736
_ArgList) 
#line 741 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 742
return _vfprintf_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 743
} 
#line 747 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vprintf_s_l(const char *const 
#line 748
_Format, const _locale_t 
#line 749
_Locale, va_list 
#line 750
_ArgList) 
#line 755 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 756
return _vfprintf_s_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 757
} 
#line 763 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vprintf_s(const char *const 
#line 764
_Format, va_list 
#line 765
_ArgList) 
#line 770 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 771
return _vfprintf_s_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 772
} 
#line 778 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vprintf_p_l(const char *const 
#line 779
_Format, const _locale_t 
#line 780
_Locale, va_list 
#line 781
_ArgList) 
#line 786 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 787
return _vfprintf_p_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 788
} 
#line 792 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vprintf_p(const char *const 
#line 793
_Format, va_list 
#line 794
_ArgList) 
#line 799 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 800
return _vfprintf_p_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 801
} 
#line 805 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _fprintf_l(FILE *const 
#line 806
_Stream, const char *const 
#line 807
_Format, const _locale_t 
#line 808
_Locale, ...) 
#line 813 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 814
int _Result; 
#line 815
va_list _ArgList; 
#line 816
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 817
_Result = _vfprintf_l(_Stream, _Format, _Locale, _ArgList); 
#line 818
(void)(_ArgList = ((va_list)0)); 
#line 819
return _Result; 
#line 820
} 
#line 824 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl fprintf(FILE *const 
#line 825
_Stream, const char *const 
#line 826
_Format, ...) 
#line 831 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 832
int _Result; 
#line 833
va_list _ArgList; 
#line 834
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 835
_Result = _vfprintf_l(_Stream, _Format, 0, _ArgList); 
#line 836
(void)(_ArgList = ((va_list)0)); 
#line 837
return _Result; 
#line 838
} 
#line 841 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _set_printf_count_output(int _Value); 
#line 845
__declspec(dllimport) int __cdecl _get_printf_count_output(); 
#line 848
__inline int __cdecl _fprintf_s_l(FILE *const 
#line 849
_Stream, const char *const 
#line 850
_Format, const _locale_t 
#line 851
_Locale, ...) 
#line 856 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 857
int _Result; 
#line 858
va_list _ArgList; 
#line 859
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 860
_Result = _vfprintf_s_l(_Stream, _Format, _Locale, _ArgList); 
#line 861
(void)(_ArgList = ((va_list)0)); 
#line 862
return _Result; 
#line 863
} 
#line 869 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl fprintf_s(FILE *const 
#line 870
_Stream, const char *const 
#line 871
_Format, ...) 
#line 876 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 877
int _Result; 
#line 878
va_list _ArgList; 
#line 879
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 880
_Result = _vfprintf_s_l(_Stream, _Format, 0, _ArgList); 
#line 881
(void)(_ArgList = ((va_list)0)); 
#line 882
return _Result; 
#line 883
} 
#line 889 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _fprintf_p_l(FILE *const 
#line 890
_Stream, const char *const 
#line 891
_Format, const _locale_t 
#line 892
_Locale, ...) 
#line 897 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 898
int _Result; 
#line 899
va_list _ArgList; 
#line 900
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 901
_Result = _vfprintf_p_l(_Stream, _Format, _Locale, _ArgList); 
#line 902
(void)(_ArgList = ((va_list)0)); 
#line 903
return _Result; 
#line 904
} 
#line 908 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _fprintf_p(FILE *const 
#line 909
_Stream, const char *const 
#line 910
_Format, ...) 
#line 915 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 916
int _Result; 
#line 917
va_list _ArgList; 
#line 918
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 919
_Result = _vfprintf_p_l(_Stream, _Format, 0, _ArgList); 
#line 920
(void)(_ArgList = ((va_list)0)); 
#line 921
return _Result; 
#line 922
} 
#line 926 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _printf_l(const char *const 
#line 927
_Format, const _locale_t 
#line 928
_Locale, ...) 
#line 933 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 934
int _Result; 
#line 935
va_list _ArgList; 
#line 936
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 937
_Result = _vfprintf_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 938
(void)(_ArgList = ((va_list)0)); 
#line 939
return _Result; 
#line 940
} 
#line 944 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl printf(const char *const 
#line 945
_Format, ...) 
#line 950 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 951
int _Result; 
#line 952
va_list _ArgList; 
#line 953
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 954
_Result = _vfprintf_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 955
(void)(_ArgList = ((va_list)0)); 
#line 956
return _Result; 
#line 957
} 
#line 961 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _printf_s_l(const char *const 
#line 962
_Format, const _locale_t 
#line 963
_Locale, ...) 
#line 968 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 969
int _Result; 
#line 970
va_list _ArgList; 
#line 971
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 972
_Result = _vfprintf_s_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 973
(void)(_ArgList = ((va_list)0)); 
#line 974
return _Result; 
#line 975
} 
#line 981 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl printf_s(const char *const 
#line 982
_Format, ...) 
#line 987 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 988
int _Result; 
#line 989
va_list _ArgList; 
#line 990
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 991
_Result = _vfprintf_s_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 992
(void)(_ArgList = ((va_list)0)); 
#line 993
return _Result; 
#line 994
} 
#line 1000 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _printf_p_l(const char *const 
#line 1001
_Format, const _locale_t 
#line 1002
_Locale, ...) 
#line 1007 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1008
int _Result; 
#line 1009
va_list _ArgList; 
#line 1010
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1011
_Result = _vfprintf_p_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 1012
(void)(_ArgList = ((va_list)0)); 
#line 1013
return _Result; 
#line 1014
} 
#line 1018 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _printf_p(const char *const 
#line 1019
_Format, ...) 
#line 1024 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1025
int _Result; 
#line 1026
va_list _ArgList; 
#line 1027
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1028
_Result = _vfprintf_p_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 1029
(void)(_ArgList = ((va_list)0)); 
#line 1030
return _Result; 
#line 1031
} 
#line 1040 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vfscanf(unsigned __int64 _Options, FILE * _Stream, const char * _Format, _locale_t _Locale, va_list _Arglist); 
#line 1049
__inline int __cdecl _vfscanf_l(FILE *const 
#line 1050
_Stream, const char *const 
#line 1051
_Format, const _locale_t 
#line 1052
_Locale, va_list 
#line 1053
_ArgList) 
#line 1058 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1059
return __stdio_common_vfscanf(*__local_stdio_scanf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 1062
} 
#line 1066 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vfscanf(FILE *const 
#line 1067
_Stream, const char *const 
#line 1068
_Format, va_list 
#line 1069
_ArgList) 
#line 1074 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1075
return _vfscanf_l(_Stream, _Format, 0, _ArgList); 
#line 1076
} 
#line 1080 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vfscanf_s_l(FILE *const 
#line 1081
_Stream, const char *const 
#line 1082
_Format, const _locale_t 
#line 1083
_Locale, va_list 
#line 1084
_ArgList) 
#line 1089 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1090
return __stdio_common_vfscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Stream, _Format, _Locale, _ArgList); 
#line 1093
} 
#line 1100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vfscanf_s(FILE *const 
#line 1101
_Stream, const char *const 
#line 1102
_Format, va_list 
#line 1103
_ArgList) 
#line 1108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1109
return _vfscanf_s_l(_Stream, _Format, 0, _ArgList); 
#line 1110
} 
#line 1116 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vscanf_l(const char *const 
#line 1117
_Format, const _locale_t 
#line 1118
_Locale, va_list 
#line 1119
_ArgList) 
#line 1124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1125
return _vfscanf_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 1126
} 
#line 1130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vscanf(const char *const 
#line 1131
_Format, va_list 
#line 1132
_ArgList) 
#line 1137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1138
return _vfscanf_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 1139
} 
#line 1143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vscanf_s_l(const char *const 
#line 1144
_Format, const _locale_t 
#line 1145
_Locale, va_list 
#line 1146
_ArgList) 
#line 1151 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1152
return _vfscanf_s_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 1153
} 
#line 1159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vscanf_s(const char *const 
#line 1160
_Format, va_list 
#line 1161
_ArgList) 
#line 1166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1167
return _vfscanf_s_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 1168
} 
#line 1174 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _fscanf_l(FILE *const 
#line 1175
_Stream, const char *const 
#line 1176
_Format, const _locale_t 
#line 1177
_Locale, ...) 
#line 1182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1183
int _Result; 
#line 1184
va_list _ArgList; 
#line 1185
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1186
_Result = _vfscanf_l(_Stream, _Format, _Locale, _ArgList); 
#line 1187
(void)(_ArgList = ((va_list)0)); 
#line 1188
return _Result; 
#line 1189
} 
#line 1193 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl fscanf(FILE *const 
#line 1194
_Stream, const char *const 
#line 1195
_Format, ...) 
#line 1200 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1201
int _Result; 
#line 1202
va_list _ArgList; 
#line 1203
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1204
_Result = _vfscanf_l(_Stream, _Format, 0, _ArgList); 
#line 1205
(void)(_ArgList = ((va_list)0)); 
#line 1206
return _Result; 
#line 1207
} 
#line 1211 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _fscanf_s_l(FILE *const 
#line 1212
_Stream, const char *const 
#line 1213
_Format, const _locale_t 
#line 1214
_Locale, ...) 
#line 1219 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1220
int _Result; 
#line 1221
va_list _ArgList; 
#line 1222
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1223
_Result = _vfscanf_s_l(_Stream, _Format, _Locale, _ArgList); 
#line 1224
(void)(_ArgList = ((va_list)0)); 
#line 1225
return _Result; 
#line 1226
} 
#line 1232 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl fscanf_s(FILE *const 
#line 1233
_Stream, const char *const 
#line 1234
_Format, ...) 
#line 1239 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1240
int _Result; 
#line 1241
va_list _ArgList; 
#line 1242
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1243
_Result = _vfscanf_s_l(_Stream, _Format, 0, _ArgList); 
#line 1244
(void)(_ArgList = ((va_list)0)); 
#line 1245
return _Result; 
#line 1246
} 
#line 1252 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _scanf_l(const char *const 
#line 1253
_Format, const _locale_t 
#line 1254
_Locale, ...) 
#line 1259 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1260
int _Result; 
#line 1261
va_list _ArgList; 
#line 1262
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1263
_Result = _vfscanf_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 1264
(void)(_ArgList = ((va_list)0)); 
#line 1265
return _Result; 
#line 1266
} 
#line 1270 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl scanf(const char *const 
#line 1271
_Format, ...) 
#line 1276 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1277
int _Result; 
#line 1278
va_list _ArgList; 
#line 1279
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1280
_Result = _vfscanf_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 1281
(void)(_ArgList = ((va_list)0)); 
#line 1282
return _Result; 
#line 1283
} 
#line 1287 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _scanf_s_l(const char *const 
#line 1288
_Format, const _locale_t 
#line 1289
_Locale, ...) 
#line 1294 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1295
int _Result; 
#line 1296
va_list _ArgList; 
#line 1297
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1298
_Result = _vfscanf_s_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 1299
(void)(_ArgList = ((va_list)0)); 
#line 1300
return _Result; 
#line 1301
} 
#line 1307 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl scanf_s(const char *const 
#line 1308
_Format, ...) 
#line 1313 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1314
int _Result; 
#line 1315
va_list _ArgList; 
#line 1316
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1317
_Result = _vfscanf_s_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 1318
(void)(_ArgList = ((va_list)0)); 
#line 1319
return _Result; 
#line 1320
} 
#line 1333 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vsprintf(unsigned __int64 _Options, char * _Buffer, size_t _BufferCount, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1343
__declspec(dllimport) int __cdecl __stdio_common_vsprintf_s(unsigned __int64 _Options, char * _Buffer, size_t _BufferCount, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1353
__declspec(dllimport) int __cdecl __stdio_common_vsnprintf_s(unsigned __int64 _Options, char * _Buffer, size_t _BufferCount, size_t _MaxCount, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1364
__declspec(dllimport) int __cdecl __stdio_common_vsprintf_p(unsigned __int64 _Options, char * _Buffer, size_t _BufferCount, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1375
__inline int __cdecl _vsnprintf_l(char *const 
#line 1376
_Buffer, const size_t 
#line 1377
_BufferCount, const char *const 
#line 1378
_Format, const _locale_t 
#line 1379
_Locale, va_list 
#line 1380
_ArgList) 
#line 1385 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1386
const int _Result = __stdio_common_vsprintf((*__local_stdio_printf_options()) | (1Ui64 << 0), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1390
return (_Result < 0) ? -1 : _Result; 
#line 1391
} 
#line 1396 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsnprintf(char *const 
#line 1397
_Buffer, const size_t 
#line 1398
_BufferCount, const char *const 
#line 1399
_Format, va_list 
#line 1400
_ArgList) 
#line 1405 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#pragma warning(push)
#pragma warning(disable: 4996)
return _vsnprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#pragma warning(pop)
} 
#line 1426 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vsnprintf(char *const 
#line 1427
_Buffer, const size_t 
#line 1428
_BufferCount, const char *const 
#line 1429
_Format, va_list 
#line 1430
_ArgList) 
#line 1435 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1436
const int _Result = __stdio_common_vsprintf((*__local_stdio_printf_options()) | (1Ui64 << 1), _Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1440
return (_Result < 0) ? -1 : _Result; 
#line 1441
} 
#line 1446 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsprintf_l(char *const 
#line 1447
_Buffer, const char *const 
#line 1448
_Format, const _locale_t 
#line 1449
_Locale, va_list 
#line 1450
_ArgList) 
#line 1455 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#pragma warning(push)
#pragma warning(disable: 4996)
return _vsnprintf_l(_Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#pragma warning(pop)
} 
#line 1465 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vsprintf(char *const 
#line 1466
_Buffer, const char *const 
#line 1467
_Format, va_list 
#line 1468
_ArgList) 
#line 1473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#pragma warning(push)
#pragma warning(disable: 4996)
return _vsnprintf_l(_Buffer, (size_t)(-1), _Format, 0, _ArgList); 
#pragma warning(pop)
} 
#line 1483 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsprintf_s_l(char *const 
#line 1484
_Buffer, const size_t 
#line 1485
_BufferCount, const char *const 
#line 1486
_Format, const _locale_t 
#line 1487
_Locale, va_list 
#line 1488
_ArgList) 
#line 1493 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1494
const int _Result = __stdio_common_vsprintf_s(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1498
return (_Result < 0) ? -1 : _Result; 
#line 1499
} 
#line 1506 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vsprintf_s(char *const 
#line 1507
_Buffer, const size_t 
#line 1508
_BufferCount, const char *const 
#line 1509
_Format, va_list 
#line 1510
_ArgList) 
#line 1515 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1516
return _vsprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1517
} 
#line 1520 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
extern "C++" {template< size_t _Size> inline int __cdecl vsprintf_s(char (&_Buffer)[_Size], const char *_Format, ::va_list _ArgList) throw() { return vsprintf_s(_Buffer, _Size, _Format, _ArgList); } }
#line 1532 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsprintf_p_l(char *const 
#line 1533
_Buffer, const size_t 
#line 1534
_BufferCount, const char *const 
#line 1535
_Format, const _locale_t 
#line 1536
_Locale, va_list 
#line 1537
_ArgList) 
#line 1542 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1543
const int _Result = __stdio_common_vsprintf_p(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1547
return (_Result < 0) ? -1 : _Result; 
#line 1548
} 
#line 1553 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsprintf_p(char *const 
#line 1554
_Buffer, const size_t 
#line 1555
_BufferCount, const char *const 
#line 1556
_Format, va_list 
#line 1557
_ArgList) 
#line 1562 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1563
return _vsprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1564
} 
#line 1569 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsnprintf_s_l(char *const 
#line 1570
_Buffer, const size_t 
#line 1571
_BufferCount, const size_t 
#line 1572
_MaxCount, const char *const 
#line 1573
_Format, const _locale_t 
#line 1574
_Locale, va_list 
#line 1575
_ArgList) 
#line 1580 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1581
const int _Result = __stdio_common_vsnprintf_s(*__local_stdio_printf_options(), _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList); 
#line 1585
return (_Result < 0) ? -1 : _Result; 
#line 1586
} 
#line 1591 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsnprintf_s(char *const 
#line 1592
_Buffer, const size_t 
#line 1593
_BufferCount, const size_t 
#line 1594
_MaxCount, const char *const 
#line 1595
_Format, va_list 
#line 1596
_ArgList) 
#line 1601 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1602
return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList); 
#line 1603
} 
#line 1606 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
extern "C++" {template< size_t _Size> inline int __cdecl _vsnprintf_s(char (&_Buffer)[_Size], ::size_t _BufferCount, const char *_Format, ::va_list _ArgList) throw() { return _vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
#line 1619 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vsnprintf_s(char *const 
#line 1620
_Buffer, const size_t 
#line 1621
_BufferCount, const size_t 
#line 1622
_MaxCount, const char *const 
#line 1623
_Format, va_list 
#line 1624
_ArgList) 
#line 1629 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1630
return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList); 
#line 1631
} 
#line 1634 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
extern "C++" {template< size_t _Size> inline int __cdecl vsnprintf_s(char (&_Buffer)[_Size], ::size_t _BufferCount, const char *_Format, ::va_list _ArgList) throw() { return vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
#line 1646 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vscprintf_l(const char *const 
#line 1647
_Format, const _locale_t 
#line 1648
_Locale, va_list 
#line 1649
_ArgList) 
#line 1654 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1655
const int _Result = __stdio_common_vsprintf((*__local_stdio_printf_options()) | (1Ui64 << 1), 0, 0, _Format, _Locale, _ArgList); 
#line 1659
return (_Result < 0) ? -1 : _Result; 
#line 1660
} 
#line 1664 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vscprintf(const char *const 
#line 1665
_Format, va_list 
#line 1666
_ArgList) 
#line 1671 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1672
return _vscprintf_l(_Format, 0, _ArgList); 
#line 1673
} 
#line 1677 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vscprintf_p_l(const char *const 
#line 1678
_Format, const _locale_t 
#line 1679
_Locale, va_list 
#line 1680
_ArgList) 
#line 1685 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1686
const int _Result = __stdio_common_vsprintf_p((*__local_stdio_printf_options()) | (1Ui64 << 1), 0, 0, _Format, _Locale, _ArgList); 
#line 1690
return (_Result < 0) ? -1 : _Result; 
#line 1691
} 
#line 1695 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vscprintf_p(const char *const 
#line 1696
_Format, va_list 
#line 1697
_ArgList) 
#line 1702 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1703
return _vscprintf_p_l(_Format, 0, _ArgList); 
#line 1704
} 
#line 1708 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsnprintf_c_l(char *const 
#line 1709
_Buffer, const size_t 
#line 1710
_BufferCount, const char *const 
#line 1711
_Format, const _locale_t 
#line 1712
_Locale, va_list 
#line 1713
_ArgList) 
#line 1718 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1719
const int _Result = __stdio_common_vsprintf(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1723
return (_Result < 0) ? -1 : _Result; 
#line 1724
} 
#line 1729 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsnprintf_c(char *const 
#line 1730
_Buffer, const size_t 
#line 1731
_BufferCount, const char *const 
#line 1732
_Format, va_list 
#line 1733
_ArgList) 
#line 1738 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1739
return _vsnprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1740
} 
#line 1744 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _sprintf_l(char *const 
#line 1745
_Buffer, const char *const 
#line 1746
_Format, const _locale_t 
#line 1747
_Locale, ...) 
#line 1752 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1753
int _Result; 
#line 1754
va_list _ArgList; 
#line 1755
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1757
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = _vsprintf_l(_Buffer, _Format, _Locale, _ArgList); 
#pragma warning(pop)
#line 1762
(void)(_ArgList = ((va_list)0)); 
#line 1763
return _Result; 
#line 1764
} 
#line 1769 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl sprintf(char *const 
#line 1770
_Buffer, const char *const 
#line 1771
_Format, ...) 
#line 1776 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1777
int _Result; 
#line 1778
va_list _ArgList; 
#line 1779
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1781
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = _vsprintf_l(_Buffer, _Format, 0, _ArgList); 
#pragma warning(pop)
#line 1786
(void)(_ArgList = ((va_list)0)); 
#line 1787
return _Result; 
#line 1788
} 
#line 1791 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
#pragma warning(push)
#pragma warning(disable: 4996)
__inline int __cdecl sprintf(char * _Buffer, const char * _Format, ...); __inline int __cdecl vsprintf(char * _Buffer, const char * _Format, va_list _Args); 
#line 1799 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
#pragma warning(pop)
#line 1803
__inline int __cdecl _sprintf_s_l(char *const 
#line 1804
_Buffer, const size_t 
#line 1805
_BufferCount, const char *const 
#line 1806
_Format, const _locale_t 
#line 1807
_Locale, ...) 
#line 1812 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1813
int _Result; 
#line 1814
va_list _ArgList; 
#line 1815
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1816
_Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1817
(void)(_ArgList = ((va_list)0)); 
#line 1818
return _Result; 
#line 1819
} 
#line 1826 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl sprintf_s(char *const 
#line 1827
_Buffer, const size_t 
#line 1828
_BufferCount, const char *const 
#line 1829
_Format, ...) 
#line 1834 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1835
int _Result; 
#line 1836
va_list _ArgList; 
#line 1837
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1838
_Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1839
(void)(_ArgList = ((va_list)0)); 
#line 1840
return _Result; 
#line 1841
} 
#line 1846 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
extern "C++" {__pragma( warning(push)) __pragma( warning(disable: 4793)) template< size_t _Size> inline int __cdecl sprintf_s(char (&_Buffer)[_Size], const char *_Format, ...) throw() { ::va_list _ArgList; (void)(__vcrt_va_start_verify_argument_type< const char *> (), ((void)__va_start(&_ArgList, _Format))); return vsprintf_s(_Buffer, _Size, _Format, _ArgList); } __pragma( warning(pop)) }
#line 1854 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _sprintf_p_l(char *const 
#line 1855
_Buffer, const size_t 
#line 1856
_BufferCount, const char *const 
#line 1857
_Format, const _locale_t 
#line 1858
_Locale, ...) 
#line 1863 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1864
int _Result; 
#line 1865
va_list _ArgList; 
#line 1866
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1867
_Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1868
(void)(_ArgList = ((va_list)0)); 
#line 1869
return _Result; 
#line 1870
} 
#line 1875 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _sprintf_p(char *const 
#line 1876
_Buffer, const size_t 
#line 1877
_BufferCount, const char *const 
#line 1878
_Format, ...) 
#line 1883 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1884
int _Result; 
#line 1885
va_list _ArgList; 
#line 1886
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1887
_Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1888
(void)(_ArgList = ((va_list)0)); 
#line 1889
return _Result; 
#line 1890
} 
#line 1895 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf_l(char *const 
#line 1896
_Buffer, const size_t 
#line 1897
_BufferCount, const char *const 
#line 1898
_Format, const _locale_t 
#line 1899
_Locale, ...) 
#line 1904 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1905
int _Result; 
#line 1906
va_list _ArgList; 
#line 1907
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1909
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = _vsnprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#pragma warning(pop)
#line 1914
(void)(_ArgList = ((va_list)0)); 
#line 1915
return _Result; 
#line 1916
} 
#line 1932 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl snprintf(char *const 
#line 1933
_Buffer, const size_t 
#line 1934
_BufferCount, const char *const 
#line 1935
_Format, ...) 
#line 1940 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1941
int _Result; 
#line 1942
va_list _ArgList; 
#line 1943
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#pragma warning(suppress:28719)
_Result = vsnprintf(_Buffer, _BufferCount, _Format, _ArgList); 
#line 1946
(void)(_ArgList = ((va_list)0)); 
#line 1947
return _Result; 
#line 1948
} 
#line 1952 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf(char *const 
#line 1953
_Buffer, const size_t 
#line 1954
_BufferCount, const char *const 
#line 1955
_Format, ...) 
#line 1960 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1961
int _Result; 
#line 1962
va_list _ArgList; 
#line 1963
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#pragma warning(suppress:28719)
_Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList); 
#line 1966
(void)(_ArgList = ((va_list)0)); 
#line 1967
return _Result; 
#line 1968
} 
#line 1971 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf(char * _Buffer, size_t _BufferCount, const char * _Format, ...); __inline int __cdecl _vsnprintf(char * _Buffer, size_t _BufferCount, const char * _Format, va_list _Args); 
#line 1982 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf_c_l(char *const 
#line 1983
_Buffer, const size_t 
#line 1984
_BufferCount, const char *const 
#line 1985
_Format, const _locale_t 
#line 1986
_Locale, ...) 
#line 1991 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1992
int _Result; 
#line 1993
va_list _ArgList; 
#line 1994
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1995
_Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1996
(void)(_ArgList = ((va_list)0)); 
#line 1997
return _Result; 
#line 1998
} 
#line 2003 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf_c(char *const 
#line 2004
_Buffer, const size_t 
#line 2005
_BufferCount, const char *const 
#line 2006
_Format, ...) 
#line 2011 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2012
int _Result; 
#line 2013
va_list _ArgList; 
#line 2014
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2015
_Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 2016
(void)(_ArgList = ((va_list)0)); 
#line 2017
return _Result; 
#line 2018
} 
#line 2023 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf_s_l(char *const 
#line 2024
_Buffer, const size_t 
#line 2025
_BufferCount, const size_t 
#line 2026
_MaxCount, const char *const 
#line 2027
_Format, const _locale_t 
#line 2028
_Locale, ...) 
#line 2033 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2034
int _Result; 
#line 2035
va_list _ArgList; 
#line 2036
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2037
_Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList); 
#line 2038
(void)(_ArgList = ((va_list)0)); 
#line 2039
return _Result; 
#line 2040
} 
#line 2045 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf_s(char *const 
#line 2046
_Buffer, const size_t 
#line 2047
_BufferCount, const size_t 
#line 2048
_MaxCount, const char *const 
#line 2049
_Format, ...) 
#line 2054 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2055
int _Result; 
#line 2056
va_list _ArgList; 
#line 2057
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2058
_Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList); 
#line 2059
(void)(_ArgList = ((va_list)0)); 
#line 2060
return _Result; 
#line 2061
} 
#line 2064 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
extern "C++" {__pragma( warning(push)) __pragma( warning(disable: 4793)) template< size_t _Size> inline int __cdecl _snprintf_s(char (&_Buffer)[_Size], ::size_t _BufferCount, const char *_Format, ...) throw() { ::va_list _ArgList; (void)(__vcrt_va_start_verify_argument_type< const char *> (), ((void)__va_start(&_ArgList, _Format))); return _vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } __pragma( warning(pop)) }
#line 2073 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _scprintf_l(const char *const 
#line 2074
_Format, const _locale_t 
#line 2075
_Locale, ...) 
#line 2080 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2081
int _Result; 
#line 2082
va_list _ArgList; 
#line 2083
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2084
_Result = _vscprintf_l(_Format, _Locale, _ArgList); 
#line 2085
(void)(_ArgList = ((va_list)0)); 
#line 2086
return _Result; 
#line 2087
} 
#line 2091 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _scprintf(const char *const 
#line 2092
_Format, ...) 
#line 2097 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2098
int _Result; 
#line 2099
va_list _ArgList; 
#line 2100
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2101
_Result = _vscprintf_l(_Format, 0, _ArgList); 
#line 2102
(void)(_ArgList = ((va_list)0)); 
#line 2103
return _Result; 
#line 2104
} 
#line 2108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _scprintf_p_l(const char *const 
#line 2109
_Format, const _locale_t 
#line 2110
_Locale, ...) 
#line 2115 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2116
int _Result; 
#line 2117
va_list _ArgList; 
#line 2118
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2119
_Result = _vscprintf_p_l(_Format, _Locale, _ArgList); 
#line 2120
(void)(_ArgList = ((va_list)0)); 
#line 2121
return _Result; 
#line 2122
} 
#line 2126 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _scprintf_p(const char *const 
#line 2127
_Format, ...) 
#line 2132 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2133
int _Result; 
#line 2134
va_list _ArgList; 
#line 2135
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2136
_Result = _vscprintf_p(_Format, _ArgList); 
#line 2137
(void)(_ArgList = ((va_list)0)); 
#line 2138
return _Result; 
#line 2139
} 
#line 2147 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vsscanf(unsigned __int64 _Options, const char * _Buffer, size_t _BufferCount, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 2157
__inline int __cdecl _vsscanf_l(const char *const 
#line 2158
_Buffer, const char *const 
#line 2159
_Format, const _locale_t 
#line 2160
_Locale, va_list 
#line 2161
_ArgList) 
#line 2166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2167
return __stdio_common_vsscanf(*__local_stdio_scanf_options(), _Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 2170
} 
#line 2174 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vsscanf(const char *const 
#line 2175
_Buffer, const char *const 
#line 2176
_Format, va_list 
#line 2177
_ArgList) 
#line 2182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2183
return _vsscanf_l(_Buffer, _Format, 0, _ArgList); 
#line 2184
} 
#line 2188 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsscanf_s_l(const char *const 
#line 2189
_Buffer, const char *const 
#line 2190
_Format, const _locale_t 
#line 2191
_Locale, va_list 
#line 2192
_ArgList) 
#line 2197 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2198
return __stdio_common_vsscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 2201
} 
#line 2206 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
#pragma warning(push)
#pragma warning(disable:6530)
#line 2210
__inline int __cdecl vsscanf_s(const char *const 
#line 2211
_Buffer, const char *const 
#line 2212
_Format, va_list 
#line 2213
_ArgList) 
#line 2218 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2219
return _vsscanf_s_l(_Buffer, _Format, 0, _ArgList); 
#line 2220
} 
#line 2223 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
extern "C++" {template< size_t _Size> inline int __cdecl vsscanf_s(const char (&_Buffer)[_Size], const char *_Format, ::va_list _ArgList) throw() { return vsscanf_s(_Buffer, _Size, _Format, _ArgList); } }
#line 2230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
#pragma warning(pop)
#line 2235 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _sscanf_l(const char *const 
#line 2236
_Buffer, const char *const 
#line 2237
_Format, const _locale_t 
#line 2238
_Locale, ...) 
#line 2243 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2244
int _Result; 
#line 2245
va_list _ArgList; 
#line 2246
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2247
_Result = _vsscanf_l(_Buffer, _Format, _Locale, _ArgList); 
#line 2248
(void)(_ArgList = ((va_list)0)); 
#line 2249
return _Result; 
#line 2250
} 
#line 2254 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl sscanf(const char *const 
#line 2255
_Buffer, const char *const 
#line 2256
_Format, ...) 
#line 2261 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2262
int _Result; 
#line 2263
va_list _ArgList; 
#line 2264
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2265
_Result = _vsscanf_l(_Buffer, _Format, 0, _ArgList); 
#line 2266
(void)(_ArgList = ((va_list)0)); 
#line 2267
return _Result; 
#line 2268
} 
#line 2272 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _sscanf_s_l(const char *const 
#line 2273
_Buffer, const char *const 
#line 2274
_Format, const _locale_t 
#line 2275
_Locale, ...) 
#line 2280 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2281
int _Result; 
#line 2282
va_list _ArgList; 
#line 2283
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2284
_Result = _vsscanf_s_l(_Buffer, _Format, _Locale, _ArgList); 
#line 2285
(void)(_ArgList = ((va_list)0)); 
#line 2286
return _Result; 
#line 2287
} 
#line 2293 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl sscanf_s(const char *const 
#line 2294
_Buffer, const char *const 
#line 2295
_Format, ...) 
#line 2300 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2301
int _Result; 
#line 2302
va_list _ArgList; 
#line 2303
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2305
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = vsscanf_s(_Buffer, _Format, _ArgList); 
#pragma warning(pop)
#line 2310
(void)(_ArgList = ((va_list)0)); 
#line 2311
return _Result; 
#line 2312
} 
#line 2317 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
#pragma warning(push)
#pragma warning(disable:6530)
#line 2321
__inline int __cdecl _snscanf_l(const char *const 
#line 2322
_Buffer, const size_t 
#line 2323
_BufferCount, const char *const 
#line 2324
_Format, const _locale_t 
#line 2325
_Locale, ...) 
#line 2330 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2331
int _Result; 
#line 2332
va_list _ArgList; 
#line 2333
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2335
_Result = __stdio_common_vsscanf(*__local_stdio_scanf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 2339
(void)(_ArgList = ((va_list)0)); 
#line 2340
return _Result; 
#line 2341
} 
#line 2345 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _snscanf(const char *const 
#line 2346
_Buffer, const size_t 
#line 2347
_BufferCount, const char *const 
#line 2348
_Format, ...) 
#line 2353 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2354
int _Result; 
#line 2355
va_list _ArgList; 
#line 2356
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2358
_Result = __stdio_common_vsscanf(*__local_stdio_scanf_options(), _Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 2362
(void)(_ArgList = ((va_list)0)); 
#line 2363
return _Result; 
#line 2364
} 
#line 2369 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _snscanf_s_l(const char *const 
#line 2370
_Buffer, const size_t 
#line 2371
_BufferCount, const char *const 
#line 2372
_Format, const _locale_t 
#line 2373
_Locale, ...) 
#line 2378 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2379
int _Result; 
#line 2380
va_list _ArgList; 
#line 2381
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2383
_Result = __stdio_common_vsscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 2387
(void)(_ArgList = ((va_list)0)); 
#line 2388
return _Result; 
#line 2389
} 
#line 2393 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _snscanf_s(const char *const 
#line 2394
_Buffer, const size_t 
#line 2395
_BufferCount, const char *const 
#line 2396
_Format, ...) 
#line 2401 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2402
int _Result; 
#line 2403
va_list _ArgList; 
#line 2404
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2406
_Result = __stdio_common_vsscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 2410
(void)(_ArgList = ((va_list)0)); 
#line 2411
return _Result; 
#line 2412
} 
#line 2415 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
#pragma warning(pop)
#line 2438 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) char *__cdecl tempnam(const char * _Directory, const char * _FilePrefix); 
#line 2447 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl fcloseall(); 
#line 2448
__declspec(dllimport) FILE *__cdecl fdopen(int _FileHandle, const char * _Format); 
#line 2449
__declspec(dllimport) int __cdecl fgetchar(); 
#line 2450
__declspec(dllimport) int __cdecl fileno(FILE * _Stream); 
#line 2451
__declspec(dllimport) int __cdecl flushall(); 
#line 2452
__declspec(dllimport) int __cdecl fputchar(int _Ch); 
#line 2453
__declspec(dllimport) int __cdecl getw(FILE * _Stream); 
#line 2454
__declspec(dllimport) int __cdecl putw(int _Ch, FILE * _Stream); 
#line 2455
__declspec(dllimport) int __cdecl rmtmp(); 
#line 2461 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
}__pragma( pack ( pop )) 
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"
extern "C" { typedef FILE FILE; }
#line 35
namespace std { 
#line 36
using ::FILE;using ::_Mbstatet;
#line 38
using ::fpos_t;
#line 39
using ::clearerr;using ::fclose;using ::feof;
#line 40
using ::ferror;using ::fflush;using ::fgetc;
#line 41
using ::fgetpos;using ::fgets;using ::fopen;
#line 42
using ::fprintf;using ::fputc;using ::fputs;
#line 43
using ::fread;using ::freopen;using ::fscanf;
#line 44
using ::fseek;using ::fsetpos;using ::ftell;
#line 45
using ::fwrite;using ::getc;using ::getchar;
#line 46
using ::perror;
#line 47
using ::putc;using ::putchar;
#line 48
using ::printf;using ::puts;using ::remove;
#line 49
using ::rename;using ::rewind;using ::scanf;
#line 50
using ::setbuf;using ::setvbuf;using ::sprintf;
#line 51
using ::sscanf;using ::tmpfile;using ::tmpnam;
#line 52
using ::ungetc;using ::vfprintf;using ::vprintf;
#line 53
using ::vsprintf;
#line 55
using ::snprintf;using ::vsnprintf;
#line 56
using ::vfscanf;using ::vscanf;using ::vsscanf;
#line 57
}
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstring"
namespace std { 
#line 18
using ::memchr;using ::memcmp;
#line 19
using ::memcpy;using ::memmove;using ::memset;
#line 20
using ::strcat;using ::strchr;using ::strcmp;
#line 21
using ::strcoll;using ::strcpy;using ::strcspn;
#line 22
using ::strerror;using ::strlen;using ::strncat;
#line 23
using ::strncmp;using ::strncpy;using ::strpbrk;
#line 24
using ::strrchr;using ::strspn;using ::strstr;
#line 25
using ::strtok;using ::strxfrm;
#line 26
}
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstddef"
namespace std { 
#line 18
using ::ptrdiff_t;
#line 19
}
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstddef"
namespace std { 
#line 24
typedef double max_align_t; 
#line 25
}
#line 27
using std::max_align_t;
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\initializer_list"
#pragma warning(push,3)
#line 8
#pragma pack ( push, 8 )
#line 13
namespace std { 
#line 15
template < class _Elem >
 class initializer_list
 {
public :
 typedef _Elem value_type;
 typedef const _Elem & reference;
 typedef const _Elem & const_reference;
 typedef size_t size_type;

 typedef const _Elem * iterator;
 typedef const _Elem * const_iterator;

 constexpr initializer_list ( ) noexcept
  : _First ( 0 ), _Last ( 0 )
  {
  }

 constexpr initializer_list ( const _Elem * _First_arg,
  const _Elem * _Last_arg ) noexcept
  : _First ( _First_arg ), _Last ( _Last_arg )
  {
  }

 constexpr const _Elem * begin ( ) const noexcept
  {
  return ( _First );
  }

 constexpr const _Elem * end ( ) const noexcept
  {
  return ( _Last );
  }

 constexpr size_t size ( ) const noexcept
  {
  return ( ( size_t ) ( _Last - _First ) );
  }

private :
 const _Elem * _First;
 const _Elem * _Last;
 };
#line 59
template < class _Elem > inline
 constexpr const _Elem * begin ( initializer_list < _Elem > _Ilist ) noexcept
 {
 return ( _Ilist . begin ( ) );
 }
#line 66
template < class _Elem > inline
 constexpr const _Elem * end ( initializer_list < _Elem > _Ilist ) noexcept
 {
 return ( _Ilist . end ( ) );
 }
#line 71
}
#line 73
#pragma warning(pop)
#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
#pragma warning(push,3)
#line 74 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\initializer_list"
#pragma pack ( pop )
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
#pragma pack ( push, 8 )
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
namespace std { 
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template< bool , class 
#line 129
_Ty1, class 
#line 130
_Ty2> 
#line 131
struct _If { 
#line 133
typedef _Ty2 type; 
#line 134
}; 
#line 136
template< class _Ty1, class 
#line 137
_Ty2> 
#line 138
struct _If< true, _Ty1, _Ty2>  { 
#line 140
typedef _Ty1 type; 
#line 141
}; 
#line 143
template< class _Ty> 
#line 144
struct _Always_false { 
#line 146
static constexpr bool value = false; 
#line 147
}; 
#line 153
template< class _Arg, class 
#line 154
_Result> 
#line 155
struct unary_function { 
#line 157
typedef _Arg argument_type; 
#line 158
typedef _Result result_type; 
#line 159
}; 
#line 162
template< class _Arg1, class 
#line 163
_Arg2, class 
#line 164
_Result> 
#line 165
struct binary_function { 
#line 167
typedef _Arg1 first_argument_type; 
#line 168
typedef _Arg2 second_argument_type; 
#line 169
typedef _Result result_type; 
#line 170
}; 
#line 174 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template < class _Ty = void >
 struct plus
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef _Ty result_type;

 constexpr _Ty operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
  {
  return ( _Left + _Right );
  }
 };
#line 188
template < class _Ty = void >
 struct minus
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef _Ty result_type;

 constexpr _Ty operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
  {
  return ( _Left - _Right );
  }
 };
#line 202
template < class _Ty = void >
 struct multiplies
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef _Ty result_type;

 constexpr _Ty operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
  {
  return ( _Left * _Right );
  }
 };
#line 216
template < class _Ty = void >
 struct equal_to
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef bool result_type;

 constexpr bool operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
  {
  return ( _Left == _Right );
  }
 };
#line 230
template < class _Ty = void >
 struct less
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef bool result_type;

 constexpr bool operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
  {
  return ( _Left < _Right );
  }
 };
#line 245
template<> struct plus< void>  { 
#line 247
typedef int is_transparent; 
#line 249
template < class _Ty1,
  class _Ty2 >
  constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
  -> decltype ( static_cast < _Ty1 && > ( _Left )
   + static_cast < _Ty2 && > ( _Right ) )
  {
  return ( static_cast < _Ty1 && > ( _Left )
   + static_cast < _Ty2 && > ( _Right ) );
  }
#line 258
}; 
#line 262
template<> struct minus< void>  { 
#line 264
typedef int is_transparent; 
#line 266
template < class _Ty1,
  class _Ty2 >
  constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
  -> decltype ( static_cast < _Ty1 && > ( _Left )
   - static_cast < _Ty2 && > ( _Right ) )
  {
  return ( static_cast < _Ty1 && > ( _Left )
   - static_cast < _Ty2 && > ( _Right ) );
  }
#line 275
}; 
#line 279
template<> struct multiplies< void>  { 
#line 281
typedef int is_transparent; 
#line 283
template < class _Ty1,
  class _Ty2 >
  constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
  -> decltype ( static_cast < _Ty1 && > ( _Left )
   * static_cast < _Ty2 && > ( _Right ) )
  {
  return ( static_cast < _Ty1 && > ( _Left )
   * static_cast < _Ty2 && > ( _Right ) );
  }
#line 292
}; 
#line 296
template<> struct equal_to<>  { 
#line 298
typedef int is_transparent; 
#line 300
template < class _Ty1,
  class _Ty2 >
  constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
  -> decltype ( static_cast < _Ty1 && > ( _Left )
   == static_cast < _Ty2 && > ( _Right ) )
  {
  return ( static_cast < _Ty1 && > ( _Left )
   == static_cast < _Ty2 && > ( _Right ) );
  }
#line 309
}; 
#line 313
template<> struct less<>  { 
#line 315
typedef int is_transparent; 
#line 317
template < class _Ty1,
  class _Ty2 >
  constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
  -> decltype ( static_cast < _Ty1 && > ( _Left )
   < static_cast < _Ty2 && > ( _Right ) )
  {
  return ( static_cast < _Ty1 && > ( _Left )
   < static_cast < _Ty2 && > ( _Right ) );
  }
#line 326
}; 
#line 329
}
#line 333
namespace std { 
#line 335
inline size_t _Hash_seq(const unsigned char *_First, size_t _Count) 
#line 336
{ 
#line 338
static_assert((sizeof(size_t) == (8)), "This code is for 64-bit size_t.");
#line 339
const size_t _FNV_offset_basis = 14695981039346656037Ui64; 
#line 340
const size_t _FNV_prime = 1099511628211Ui64; 
#line 348 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
size_t _Val = _FNV_offset_basis; 
#line 349
for (size_t _Next = (0); _Next < _Count; ++_Next) 
#line 350
{ 
#line 351
_Val ^= ((size_t)(_First[_Next])); 
#line 352
_Val *= _FNV_prime; 
#line 353
}  
#line 354
return _Val; 
#line 355
} 
#line 358
template < class _Kty >
 struct _Bitwise_hash
 {
 typedef _Kty argument_type;
 typedef size_t result_type;

 size_t operator ( ) ( const _Kty & _Keyval ) const
  {
  return ( _Hash_seq ( ( const unsigned char * ) & _Keyval, sizeof ( _Kty ) ) );
  }
 };
#line 371
template< class _Kty> 
#line 372
struct hash : public _Bitwise_hash< _Kty>  { 
#line 375
static constexpr bool _Value = __is_enum(_Kty); 
#line 376
static_assert(_Value, "The C++ Standard doesn\'t provide a hash for this type.");
#line 378
}; 
#line 380
template<> struct hash< bool>  : public _Bitwise_hash< bool>  { 
#line 383
}; 
#line 386
template<> struct hash< char>  : public _Bitwise_hash< char>  { 
#line 389
}; 
#line 392
template<> struct hash< signed char>  : public _Bitwise_hash< signed char>  { 
#line 395
}; 
#line 398
template<> struct hash< unsigned char>  : public _Bitwise_hash< unsigned char>  { 
#line 401
}; 
#line 404
template<> struct hash< char16_t>  : public _Bitwise_hash< char16_t>  { 
#line 407
}; 
#line 410
template<> struct hash< char32_t>  : public _Bitwise_hash< char32_t>  { 
#line 413
}; 
#line 417
template<> struct hash< __wchar_t>  : public _Bitwise_hash< __wchar_t>  { 
#line 420
}; 
#line 424 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct hash< short>  : public _Bitwise_hash< short>  { 
#line 427
}; 
#line 430
template<> struct hash< unsigned short>  : public _Bitwise_hash< unsigned short>  { 
#line 433
}; 
#line 436
template<> struct hash< int>  : public _Bitwise_hash< int>  { 
#line 439
}; 
#line 442
template<> struct hash< unsigned>  : public _Bitwise_hash< unsigned>  { 
#line 445
}; 
#line 448
template<> struct hash< long>  : public _Bitwise_hash< long>  { 
#line 451
}; 
#line 454
template<> struct hash< unsigned long>  : public _Bitwise_hash< unsigned long>  { 
#line 457
}; 
#line 460
template<> struct hash< __int64>  : public _Bitwise_hash< __int64>  { 
#line 463
}; 
#line 466
template<> struct hash< unsigned __int64>  : public _Bitwise_hash< unsigned __int64>  { 
#line 469
}; 
#line 472
template<> struct hash< float>  : public _Bitwise_hash< float>  { 
#line 475
typedef float _Kty; 
#line 476
typedef std::_Bitwise_hash< float>  _Mybase; 
#line 478
size_t operator()(const _Kty &_Keyval) const 
#line 479
{ 
#line 480
return this->_Mybase::operator()((_Keyval == (0)) ? 0 : _Keyval); 
#line 482
} 
#line 483
}; 
#line 486
template<> struct hash< double>  : public _Bitwise_hash< double>  { 
#line 489
typedef double _Kty; 
#line 490
typedef std::_Bitwise_hash< double>  _Mybase; 
#line 492
size_t operator()(const _Kty &_Keyval) const 
#line 493
{ 
#line 494
return this->_Mybase::operator()((_Keyval == (0)) ? 0 : _Keyval); 
#line 496
} 
#line 497
}; 
#line 500
template<> struct hash< long double>  : public _Bitwise_hash< long double>  { 
#line 503
typedef long double _Kty; 
#line 504
typedef std::_Bitwise_hash< long double>  _Mybase; 
#line 506
size_t operator()(const _Kty &_Keyval) const 
#line 507
{ 
#line 508
return this->_Mybase::operator()((_Keyval == (0)) ? 0 : _Keyval); 
#line 510
} 
#line 511
}; 
#line 513
template< class _Ty> 
#line 514
struct hash< _Ty *>  : public _Bitwise_hash< _Ty *>  { 
#line 517
}; 
#line 518
}
#line 522 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
namespace std { 
#line 523
namespace tr1 { 
#line 524
using std::hash;
#line 525
}
#line 526
}
#line 633 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
namespace std { 
#line 635
template< class ..._Types> 
#line 636
struct _Arg_types { 
#line 638
}; 
#line 640
template< class _Ty1> 
#line 641
struct _Arg_types< _Ty1>  { 
#line 643
typedef _Ty1 argument_type; 
#line 644
}; 
#line 646
template< class _Ty1, class 
#line 647
_Ty2> 
#line 648
struct _Arg_types< _Ty1, _Ty2>  { 
#line 650
typedef _Ty1 first_argument_type; 
#line 651
typedef _Ty2 second_argument_type; 
#line 652
}; 
#line 655
template< class _Ty> 
#line 656
struct _Is_function { 
#line 658
typedef false_type _Bool_type; 
#line 659
static constexpr bool _Weird = false; 
#line 660
}; 
#line 673
template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...)>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = false; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...)>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = false; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...) const>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...) const>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...) volatile>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...) volatile>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...) const volatile>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...) const volatile>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...) &>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...) &>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...) const &>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...) const &>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...) volatile &>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...) volatile &>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...) const volatile &>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...) const volatile &>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...) &&>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...) &&>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...) const &&>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...) const &&>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...) volatile &&>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...) volatile &&>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...) const volatile &&>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...) const volatile &&>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; 
#line 686
template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...)>  { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = false; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...) const>  { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...) volatile>  { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...) const volatile>  { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...) &>  { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...) const &>  { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...) volatile &>  { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...) const volatile &>  { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...) &&>  { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...) const &&>  { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...) volatile &&>  { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...) const volatile &&>  { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; 
#line 689
template< class _Ty> 
#line 690
struct is_function : public _Is_function< _Ty> ::_Bool_type { 
#line 693
}; 
#line 696
template< class _Ty> constexpr bool 
#line 697
is_function_v = (is_function< _Ty> ::value); 
#line 722 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template < class _Ty > inline
 constexpr _Ty * addressof ( _Ty & _Val ) noexcept
 {
 return ( __builtin_addressof ( _Val ) );
 }
#line 731 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template < class _Ptrty > inline
 auto _Unfancy ( _Ptrty _Ptr )
 {
 return ( :: std :: addressof ( * _Ptr ) );
 }
#line 737
template < class _Ty > inline
 _Ty * _Unfancy ( _Ty * _Ptr )
 {
 return ( _Ptr );
 }
#line 743
}
#line 745
#pragma warning(pop)
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
#pragma warning(push,3)
#line 12
#pragma warning(disable: 4180 4296)
#line 746 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
#pragma pack ( pop )
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
#pragma pack ( push, 8 )
#line 14
namespace std { 
#line 15
template< class _Ty> 
#line 16
struct _Is_memfunptr { 
#line 18
typedef false_type _Bool_type; 
#line 19
}; 
#line 33
template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...)>  : public _Arg_types< _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...)>  : public _Arg_types< _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) const>  : public _Arg_types< const _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) const>  : public _Arg_types< const _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) volatile>  : public _Arg_types< volatile _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) volatile>  : public _Arg_types< volatile _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) const volatile>  : public _Arg_types< const volatile _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) const volatile>  : public _Arg_types< const volatile _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) &>  : public _Arg_types< _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) &>  : public _Arg_types< _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) const &>  : public _Arg_types< const _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) const &>  : public _Arg_types< const _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) volatile &>  : public _Arg_types< volatile _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) volatile &>  : public _Arg_types< volatile _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) const volatile &>  : public _Arg_types< const volatile _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) const volatile &>  : public _Arg_types< const volatile _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) &&>  : public _Arg_types< _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) &&>  : public _Arg_types< _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) const &&>  : public _Arg_types< const _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) const &&>  : public _Arg_types< const _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) volatile &&>  : public _Arg_types< volatile _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) volatile &&>  : public _Arg_types< volatile _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) const volatile &&>  : public _Arg_types< const volatile _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) const volatile &&>  : public _Arg_types< const volatile _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; 
#line 47
template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...)>  { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) const>  { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) volatile>  { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) const volatile>  { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) &>  { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) const &>  { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) volatile &>  { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) const volatile &>  { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) &&>  { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) const &&>  { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) volatile &&>  { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) const volatile &&>  { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; 
#line 51
template< class _Ty> 
#line 52
struct is_void : public false_type { 
#line 55
}; 
#line 64
template<> struct is_void< void>  : public true_type { }; template<> struct is_void< const void>  : public true_type { }; template<> struct is_void< volatile void>  : public true_type { }; template<> struct is_void< const volatile void>  : public true_type { }; 
#line 69
template< class _Ty> 
#line 70
struct add_const { 
#line 72
typedef const _Ty type; 
#line 73
}; 
#line 76
template< class _Ty> 
#line 77
struct add_volatile { 
#line 79
typedef volatile _Ty type; 
#line 80
}; 
#line 83
template< class _Ty> 
#line 84
struct add_cv { 
#line 86
typedef const volatile _Ty type; 
#line 87
}; 
#line 90
template< class _Ty, bool 
#line 91
 = _Is_function< _Ty> ::_Weird || is_void< _Ty> ::value> 
#line 92
struct _Add_reference { 
#line 94
typedef _Ty _Lvalue; 
#line 95
typedef _Ty _Rvalue; 
#line 96
}; 
#line 98
template< class _Ty> 
#line 99
struct _Add_reference< _Ty, false>  { 
#line 101
typedef _Ty &_Lvalue; 
#line 102
typedef _Ty &&_Rvalue; 
#line 103
}; 
#line 106
template< class _Ty> 
#line 107
struct add_lvalue_reference { 
#line 109
typedef typename _Add_reference< _Ty> ::_Lvalue type; 
#line 110
}; 
#line 113
template< class _Ty> 
#line 114
struct add_rvalue_reference { 
#line 116
typedef typename _Add_reference< _Ty> ::_Rvalue type; 
#line 117
}; 
#line 120
template< class _Ty> typename add_rvalue_reference< _Ty> ::type declval() noexcept; 
#line 125
template< class _Ty> 
#line 126
struct remove_extent { 
#line 128
typedef _Ty type; 
#line 129
}; 
#line 131
template< class _Ty, size_t _Ix> 
#line 132
struct remove_extent< _Ty [_Ix]>  { 
#line 134
typedef _Ty type; 
#line 135
}; 
#line 137
template< class _Ty> 
#line 138
struct remove_extent< _Ty []>  { 
#line 140
typedef _Ty type; 
#line 141
}; 
#line 144
template< class _Ty> 
#line 145
struct remove_all_extents { 
#line 147
typedef _Ty type; 
#line 148
}; 
#line 150
template< class _Ty, size_t _Ix> 
#line 151
struct remove_all_extents< _Ty [_Ix]>  { 
#line 153
typedef typename std::remove_all_extents< _Ty> ::type type; 
#line 154
}; 
#line 156
template< class _Ty> 
#line 157
struct remove_all_extents< _Ty []>  { 
#line 159
typedef typename std::remove_all_extents< _Ty> ::type type; 
#line 160
}; 
#line 163
template< class _Ty> 
#line 164
struct remove_pointer { 
#line 166
typedef _Ty type; 
#line 167
}; 
#line 176
template< class _Ty> struct remove_pointer< _Ty *>  { typedef _Ty type; }; template< class _Ty> struct remove_pointer< _Ty *const>  { typedef _Ty type; }; template< class _Ty> struct remove_pointer< _Ty *volatile>  { typedef _Ty type; }; template< class _Ty> struct remove_pointer< _Ty *const volatile>  { typedef _Ty type; }; 
#line 180
template< class _Ty, bool 
#line 181
 = _Is_function< _Ty> ::_Weird> 
#line 182
struct _Add_pointer { 
#line 184
typedef _Ty type; 
#line 185
}; 
#line 187
template< class _Ty> 
#line 188
struct _Add_pointer< _Ty, false>  { 
#line 190
typedef typename remove_reference< _Ty> ::type *type; 
#line 191
}; 
#line 193
template< class _Ty> 
#line 194
struct add_pointer { 
#line 196
typedef typename _Add_pointer< _Ty> ::type type; 
#line 197
}; 
#line 201
template< class _Ty> 
#line 202
struct is_array : public false_type { 
#line 205
}; 
#line 207
template< class _Ty, size_t _Nx> 
#line 208
struct is_array< _Ty [_Nx]>  : public true_type { 
#line 211
}; 
#line 213
template< class _Ty> 
#line 214
struct is_array< _Ty []>  : public true_type { 
#line 217
}; 
#line 220
template< class _Ty> 
#line 221
struct is_lvalue_reference : public false_type { 
#line 224
}; 
#line 226
template< class _Ty> 
#line 227
struct is_lvalue_reference< _Ty &>  : public true_type { 
#line 230
}; 
#line 233
template< class _Ty> 
#line 234
struct is_rvalue_reference : public false_type { 
#line 237
}; 
#line 239
template< class _Ty> 
#line 240
struct is_rvalue_reference< _Ty &&>  : public true_type { 
#line 243
}; 
#line 246
template< class _Ty> 
#line 247
struct is_reference : public _Cat_base< is_lvalue_reference< _Ty> ::value || is_rvalue_reference< _Ty> ::value>  { 
#line 251
}; 
#line 255
template< class _Ty, bool 
#line 256
_Pmf = _Is_memfunptr< _Ty> ::_Bool_type::value> 
#line 257
struct _Is_member_object_pointer : public false_type { 
#line 260
}; 
#line 262
template< class _Ty1, class 
#line 263
_Ty2> 
#line 264
struct _Is_member_object_pointer< _Ty1 _Ty2::*, false>  : public true_type { 
#line 267
typedef _Ty2 _Class_type; 
#line 268
}; 
#line 270
template< class _Ty> 
#line 271
struct is_member_object_pointer : public _Is_member_object_pointer< typename remove_cv< _Ty> ::type> ::type { 
#line 274
}; 
#line 277
template< class _Ty> 
#line 278
struct is_member_function_pointer : public _Is_memfunptr< typename remove_cv< _Ty> ::type> ::_Bool_type { 
#line 281
}; 
#line 284
template< class _Ty> 
#line 285
struct _Is_pointer : public false_type { 
#line 288
}; 
#line 290
template< class _Ty> 
#line 291
struct _Is_pointer< _Ty *>  : public _Cat_base< (!is_member_object_pointer< _Ty *> ::value) && (!is_member_function_pointer< _Ty *> ::value)>  { 
#line 295
}; 
#line 297
template< class _Ty> 
#line 298
struct is_pointer : public _Is_pointer< typename remove_cv< _Ty> ::type>  { 
#line 301
}; 
#line 305
template< class _Ty> 
#line 306
struct is_null_pointer : public _Cat_base< is_same< typename remove_cv< _Ty> ::type, std::nullptr_t> ::value>  { 
#line 309
}; 
#line 312
template< class _Ty> 
#line 313
struct is_union : public _Cat_base< __is_union(_Ty)>  { 
#line 316
}; 
#line 319
template< class _Ty> 
#line 320
struct is_class : public _Cat_base< __is_class(_Ty)>  { 
#line 323
}; 
#line 326
template< class _Ty> 
#line 327
struct is_fundamental : public _Cat_base< (is_arithmetic< _Ty> ::value || is_void< _Ty> ::value) || is_null_pointer< _Ty> ::value>  { 
#line 332
}; 
#line 335
template< class _Ty> 
#line 336
struct is_object : public _Cat_base< ((!is_function< _Ty> ::value) && (!is_reference< _Ty> ::value)) && (!is_void< _Ty> ::value)>  { 
#line 341
}; 
#line 345
template< class _From, class 
#line 346
_To> 
#line 347
struct is_convertible : public _Cat_base< __is_convertible_to(_From, _To)>  { 
#line 350
}; 
#line 353
template< class _Ty> 
#line 354
struct is_enum : public _Cat_base< __is_enum(_Ty)>  { 
#line 357
}; 
#line 360
template< class _Ty> 
#line 361
struct is_compound : public _Cat_base< !is_fundamental< _Ty> ::value>  { 
#line 364
}; 
#line 367
template< class _Ty> 
#line 368
struct is_member_pointer : public _Cat_base< is_member_object_pointer< _Ty> ::value || is_member_function_pointer< _Ty> ::value>  { 
#line 372
}; 
#line 375
template< class _Ty> 
#line 376
struct is_scalar : public _Cat_base< (((is_arithmetic< _Ty> ::value || is_enum< _Ty> ::value) || is_pointer< _Ty> ::value) || is_member_pointer< _Ty> ::value) || is_null_pointer< _Ty> ::value>  { 
#line 383
}; 
#line 386
template< class _Ty> 
#line 387
struct is_const : public false_type { 
#line 390
}; 
#line 392
template< class _Ty> 
#line 393
struct is_const< const _Ty>  : public true_type { 
#line 396
}; 
#line 399
template< class _Ty> 
#line 400
struct is_volatile : public false_type { 
#line 403
}; 
#line 405
template< class _Ty> 
#line 406
struct is_volatile< volatile _Ty>  : public true_type { 
#line 409
}; 
#line 412
template< class _Ty> 
#line 413
struct is_pod : public _Cat_base< __is_pod(_Ty)>  { 
#line 416
}; 
#line 419
template< class _Ty> 
#line 420
struct is_empty : public _Cat_base< __is_empty(_Ty)>  { 
#line 423
}; 
#line 426
template< class _Ty> 
#line 427
struct is_polymorphic : public _Cat_base< __is_polymorphic(_Ty)>  { 
#line 430
}; 
#line 433
template< class _Ty> 
#line 434
struct is_abstract : public _Cat_base< __is_abstract(_Ty)>  { 
#line 437
}; 
#line 440
template< class _Ty> 
#line 441
struct is_final : public _Cat_base< __is_final(_Ty)>  { 
#line 444
}; 
#line 447
template< class _Ty> 
#line 448
struct is_standard_layout : public _Cat_base< __is_standard_layout(_Ty)>  { 
#line 451
}; 
#line 454
template< class _Ty> 
#line 455
struct is_literal_type : public _Cat_base< __is_literal_type(_Ty)>  { 
#line 458
}; 
#line 461
template< class _Ty> 
#line 462
struct is_trivial : public _Cat_base< __is_trivial(_Ty)>  { 
#line 465
}; 
#line 468
template< class _Ty> 
#line 469
struct is_trivially_copyable : public _Cat_base< __is_trivially_copyable(_Ty)>  { 
#line 472
}; 
#line 475
template< class _Ty> 
#line 476
struct has_virtual_destructor : public _Cat_base< __has_virtual_destructor(_Ty)>  { 
#line 479
}; 
#line 484
template< class _Ty, class ...
#line 485
_Args> 
#line 486
struct is_constructible : public _Cat_base< __is_constructible(_Ty, _Args...)>  { 
#line 489
}; 
#line 492
template< class _Ty> 
#line 493
struct is_copy_constructible : public is_constructible< _Ty, typename add_lvalue_reference< typename add_const< _Ty> ::type> ::type> ::type { 
#line 501
}; 
#line 504
template< class _Ty> 
#line 505
struct is_default_constructible : public is_constructible< _Ty> ::type { 
#line 508
}; 
#line 511
template< class _Ty> 
#line 512
struct is_move_constructible : public is_constructible< _Ty, typename add_rvalue_reference< _Ty> ::type> ::type { 
#line 518
}; 
#line 521
template< class _To, class 
#line 522
_From> 
#line 523
struct is_assignable : public integral_constant< bool, __is_assignable(_To, _From)>  { 
#line 526
}; 
#line 529
template< class _Ty> 
#line 530
struct is_copy_assignable : public is_assignable< typename add_lvalue_reference< _Ty> ::type, typename add_lvalue_reference< typename add_const< _Ty> ::type> ::type> ::type { 
#line 538
}; 
#line 541
template< class _Ty> 
#line 542
struct is_move_assignable : public is_assignable< typename add_lvalue_reference< _Ty> ::type, typename add_rvalue_reference< _Ty> ::type> ::type { 
#line 548
}; 
#line 551
template< class _Ty> 
#line 552
struct is_destructible : public _Cat_base< __is_destructible(_Ty)>  { 
#line 555
}; 
#line 560
template< class _Ty, class ...
#line 561
_Args> 
#line 562
struct is_trivially_constructible : public _Cat_base< __is_trivially_constructible(_Ty, _Args...)>  { 
#line 565
}; 
#line 568
template< class _Ty> 
#line 569
struct is_trivially_copy_constructible : public is_trivially_constructible< _Ty, typename add_lvalue_reference< typename add_const< _Ty> ::type> ::type> ::type { 
#line 577
}; 
#line 580
template< class _Ty> 
#line 581
struct is_trivially_default_constructible : public is_trivially_constructible< _Ty> ::type { 
#line 584
}; 
#line 587
template< class _Ty> 
#line 588
struct is_trivially_move_constructible : public is_trivially_constructible< _Ty, typename add_rvalue_reference< _Ty> ::type> ::type { 
#line 594
}; 
#line 597
template< class _To, class 
#line 598
_From> 
#line 599
struct is_trivially_assignable : public _Cat_base< __is_trivially_assignable(_To, _From)>  { 
#line 602
}; 
#line 605
template< class _Ty> 
#line 606
struct is_trivially_copy_assignable : public is_trivially_assignable< typename add_lvalue_reference< _Ty> ::type, typename add_lvalue_reference< typename add_const< _Ty> ::type> ::type> ::type { 
#line 614
}; 
#line 617
template< class _Ty> 
#line 618
struct is_trivially_move_assignable : public is_trivially_assignable< typename add_lvalue_reference< _Ty> ::type, typename add_rvalue_reference< _Ty> ::type> ::type { 
#line 624
}; 
#line 627
template< class _Ty> 
#line 628
struct is_trivially_destructible : public _Cat_base< __has_trivial_destructor(_Ty)>  { 
#line 631
}; 
#line 636
template< class _Ty, class ...
#line 637
_Args> 
#line 638
struct is_nothrow_constructible : public _Cat_base< __is_nothrow_constructible(_Ty, _Args...)>  { 
#line 641
}; 
#line 644
template< class _Ty> 
#line 645
struct is_nothrow_copy_constructible : public is_nothrow_constructible< _Ty, typename add_lvalue_reference< typename add_const< _Ty> ::type> ::type> ::type { 
#line 653
}; 
#line 656
template< class _Ty> 
#line 657
struct is_nothrow_default_constructible : public is_nothrow_constructible< _Ty> ::type { 
#line 660
}; 
#line 663
template< class _Ty> 
#line 664
struct is_nothrow_move_constructible : public is_nothrow_constructible< _Ty, typename add_rvalue_reference< _Ty> ::type> ::type { 
#line 670
}; 
#line 673
template< class _To, class 
#line 674
_From> 
#line 675
struct is_nothrow_assignable : public _Cat_base< __is_nothrow_assignable(_To, _From)>  { 
#line 678
}; 
#line 681
template< class _Ty> 
#line 682
struct is_nothrow_copy_assignable : public is_nothrow_assignable< typename add_lvalue_reference< _Ty> ::type, typename add_lvalue_reference< typename add_const< _Ty> ::type> ::type> ::type { 
#line 690
}; 
#line 693
template< class _Ty> 
#line 694
struct is_nothrow_move_assignable : public is_nothrow_assignable< typename add_lvalue_reference< _Ty> ::type, typename add_rvalue_reference< _Ty> ::type> ::type { 
#line 700
}; 
#line 703
template< class _Ty> 
#line 704
struct is_nothrow_destructible : public _Cat_base< __is_nothrow_destructible(_Ty)>  { 
#line 707
}; 
#line 710
template< class _Ty, bool 
#line 711
 = is_integral< _Ty> ::value> 
#line 712
struct _Sign_base { 
#line 714
typedef typename remove_cv< _Ty> ::type _Uty; 
#line 715
typedef _Cat_base< (((typename remove_cv< _Ty> ::type)(-1)) < ((typename remove_cv< _Ty> ::type)0))>  _Signed; 
#line 716
typedef _Cat_base< (((typename remove_cv< _Ty> ::type)0) < ((typename remove_cv< _Ty> ::type)(-1)))>  _Unsigned; 
#line 717
}; 
#line 719
template< class _Ty> 
#line 720
struct _Sign_base< _Ty, false>  { 
#line 723
typedef is_floating_point< _Ty>  _Signed; 
#line 724
typedef false_type _Unsigned; 
#line 725
}; 
#line 727
template< class _Ty> 
#line 728
struct is_signed : public _Sign_base< _Ty> ::_Signed { 
#line 731
}; 
#line 734
template< class _Ty> 
#line 735
struct is_unsigned : public _Sign_base< _Ty> ::_Unsigned { 
#line 738
}; 
#line 741
template< class _Ty> 
#line 742
struct _Change_sign { 
#line 744
static_assert(((is_integral< _Ty> ::value || is_enum< _Ty> ::value) && (!is_same< _Ty, bool> ::value)), "make_signed<T>/make_unsigned<T> require that T shall be a (possibly cv-qualified) integral type or enumeration but not a bool ty" "pe.");
#line 767
typedef typename _If< is_same< _Ty, signed char> ::value || is_same< _Ty, unsigned char> ::value, signed char, typename _If< is_same< _Ty, short> ::value || is_same< _Ty, unsigned short> ::value, short, typename _If< is_same< _Ty, int> ::value || is_same< _Ty, unsigned> ::value, int, typename _If< is_same< _Ty, long> ::value || is_same< _Ty, unsigned long> ::value, long, typename _If< is_same< _Ty, __int64> ::value || is_same< _Ty, unsigned __int64> ::value, __int64, typename _If< sizeof(_Ty) == sizeof(signed char), signed char, typename _If< sizeof(_Ty) == sizeof(short), short, typename _If< sizeof(_Ty) == sizeof(int), int, typename _If< sizeof(_Ty) == sizeof(long), long, __int64> ::type> ::type> ::type> ::type> ::type> ::type> ::type> ::type> ::type _Signed; 
#line 776
typedef typename _If< is_same< typename _If< is_same< _Ty, signed char> ::value || is_same< _Ty, unsigned char> ::value, signed char, typename _If< is_same< _Ty, short> ::value || is_same< _Ty, unsigned short> ::value, short, typename _If< is_same< _Ty, int> ::value || is_same< _Ty, unsigned> ::value, int, typename _If< is_same< _Ty, long> ::value || is_same< _Ty, unsigned long> ::value, long, typename _If< is_same< _Ty, __int64> ::value || is_same< _Ty, unsigned __int64> ::value, __int64, typename _If< sizeof(_Ty) == sizeof(signed char), signed char, typename _If< sizeof(_Ty) == sizeof(short), short, typename _If< sizeof(_Ty) == sizeof(int), int, typename _If< sizeof(_Ty) == sizeof(long), long, __int64> ::type> ::type> ::type> ::type> ::type> ::type> ::type> ::type> ::type, signed char> ::value, unsigned char, typename _If< is_same< typename _If< is_same< _Ty, signed char> ::value || is_same< _Ty, unsigned char> ::value, signed char, typename _If< is_same< _Ty, short> ::value || is_same< _Ty, unsigned short> ::value, short, typename _If< is_same< _Ty, int> ::value || is_same< _Ty, unsigned> ::value, int, typename _If< is_same< _Ty, long> ::value || is_same< _Ty, unsigned long> ::value, long, typename _If< is_same< _Ty, __int64> ::value || is_same< _Ty, unsigned __int64> ::value, __int64, typename _If< sizeof(_Ty) == sizeof(signed char), signed char, typename _If< sizeof(_Ty) == sizeof(short), short, typename _If< sizeof(_Ty) == sizeof(int), int, typename _If< sizeof(_Ty) == sizeof(long), long, __int64> ::type> ::type> ::type> ::type> ::type> ::type> ::type> ::type> ::type, short> ::value, unsigned short, typename _If< is_same< typename _If< is_same< _Ty, signed char> ::value || is_same< _Ty, unsigned char> ::value, signed char, typename _If< is_same< _Ty, short> ::value || is_same< _Ty, unsigned short> ::value, short, typename _If< is_same< _Ty, int> ::value || is_same< _Ty, unsigned> ::value, int, typename _If< is_same< _Ty, long> ::value || is_same< _Ty, unsigned long> ::value, long, typename _If< is_same< _Ty, __int64> ::value || is_same< _Ty, unsigned __int64> ::value, __int64, typename _If< sizeof(_Ty) == sizeof(signed char), signed char, typename _If< sizeof(_Ty) == sizeof(short), short, typename _If< sizeof(_Ty) == sizeof(int), int, typename _If< sizeof(_Ty) == sizeof(long), long, __int64> ::type> ::type> ::type> ::type> ::type> ::type> ::type> ::type> ::type, int> ::value, unsigned, typename _If< is_same< typename _If< is_same< _Ty, signed char> ::value || is_same< _Ty, unsigned char> ::value, signed char, typename _If< is_same< _Ty, short> ::value || is_same< _Ty, unsigned short> ::value, short, typename _If< is_same< _Ty, int> ::value || is_same< _Ty, unsigned> ::value, int, typename _If< is_same< _Ty, long> ::value || is_same< _Ty, unsigned long> ::value, long, typename _If< is_same< _Ty, __int64> ::value || is_same< _Ty, unsigned __int64> ::value, __int64, typename _If< sizeof(_Ty) == sizeof(signed char), signed char, typename _If< sizeof(_Ty) == sizeof(short), short, typename _If< sizeof(_Ty) == sizeof(int), int, typename _If< sizeof(_Ty) == sizeof(long), long, __int64> ::type> ::type> ::type> ::type> ::type> ::type> ::type> ::type> ::type, long> ::value, unsigned long, unsigned __int64> ::type> ::type> ::type> ::type _Unsigned; 
#line 777
}; 
#line 779
template< class _Ty> 
#line 780
struct _Change_sign< const _Ty>  { 
#line 782
typedef const typename std::_Change_sign< _Ty> ::_Signed _Signed; 
#line 783
typedef const typename std::_Change_sign< _Ty> ::_Unsigned _Unsigned; 
#line 784
}; 
#line 786
template< class _Ty> 
#line 787
struct _Change_sign< volatile _Ty>  { 
#line 789
typedef volatile typename std::_Change_sign< _Ty> ::_Signed _Signed; 
#line 790
typedef volatile typename std::_Change_sign< _Ty> ::_Unsigned _Unsigned; 
#line 791
}; 
#line 793
template< class _Ty> 
#line 794
struct _Change_sign< const volatile _Ty>  { 
#line 796
typedef const volatile typename std::_Change_sign< _Ty> ::_Signed _Signed; 
#line 797
typedef const volatile typename std::_Change_sign< _Ty> ::_Unsigned _Unsigned; 
#line 798
}; 
#line 801
template< class _Ty> 
#line 802
struct make_signed { 
#line 804
typedef typename _Change_sign< _Ty> ::_Signed type; 
#line 805
}; 
#line 808
template< class _Ty> 
#line 809
struct make_unsigned { 
#line 811
typedef typename _Change_sign< _Ty> ::_Unsigned type; 
#line 812
}; 
#line 816
template< class _Ty> 
#line 817
struct alignment_of : public integral_constant< unsigned __int64, __alignof(_Ty)>  { 
#line 820
}; 
#line 827
template< class _Ty, size_t 
#line 828
_Len> 
#line 829
union _Align_type { 
#line 831
_Ty _Val; 
#line 832
char _Pad[_Len]; 
#line 833
}; 
#line 835
template< size_t _Len, size_t 
#line 836
_Align, class 
#line 837
_Ty, bool 
#line 838
_Ok> struct _Aligned; 
#line 841
template< size_t _Len, size_t 
#line 842
_Align, class 
#line 843
_Ty> 
#line 844
struct _Aligned< _Len, _Align, _Ty, true>  { 
#line 846
typedef _Align_type< _Ty, _Len>  type; 
#line 847
}; 
#line 849
template< size_t _Len, size_t 
#line 850
_Align> 
#line 851
struct _Aligned< _Len, _Align, double, false>  { 
#line 853
typedef _Align_type< double, _Len>  type; 
#line 854
}; 
#line 856
template< size_t _Len, size_t 
#line 857
_Align> 
#line 858
struct _Aligned< _Len, _Align, int, false>  { 
#line 860
typedef typename std::_Aligned< _Len, _Align, double, _Align <= integral_constant< unsigned __int64, 8Ui64> ::value> ::type type; 
#line 861
}; 
#line 863
template< size_t _Len, size_t 
#line 864
_Align> 
#line 865
struct _Aligned< _Len, _Align, short, false>  { 
#line 867
typedef typename std::_Aligned< _Len, _Align, int, _Align <= integral_constant< unsigned __int64, 4Ui64> ::value> ::type type; 
#line 868
}; 
#line 870
template< size_t _Len, size_t 
#line 871
_Align> 
#line 872
struct _Aligned< _Len, _Align, char, false>  { 
#line 874
typedef typename std::_Aligned< _Len, _Align, short, _Align <= integral_constant< unsigned __int64, 2Ui64> ::value> ::type type; 
#line 875
}; 
#line 877
template< size_t _Len, size_t 
#line 878
_Align = 8Ui64> 
#line 879
struct aligned_storage { 
#line 881
typedef typename _Aligned< _Len, _Align, char, _Align <= integral_constant< unsigned __int64, 1Ui64> ::value> ::type type; 
#line 882
}; 
#line 888
template< size_t ..._Vals> struct _Maximum; 
#line 892
template<> struct _Maximum< >  { 
#line 894
static constexpr size_t value = (0); 
#line 895
}; 
#line 897
template< size_t _Val> 
#line 898
struct _Maximum< _Val>  { 
#line 900
static constexpr size_t value = _Val; 
#line 901
}; 
#line 903
template< size_t _First, size_t 
#line 904
_Second, size_t ...
#line 905
_Rest> 
#line 906
struct _Maximum< _First, _Second, _Rest...>  : public _Maximum< (((_First) < _Second) ? _Second : _First), _Rest...>  { 
#line 909
}; 
#line 911
template< size_t _Len, class ...
#line 912
_Types> 
#line 913
struct aligned_union { 
#line 915
static constexpr size_t _Max_len = (_Maximum< _Len, sizeof(_Types)...> ::value); 
#line 917
static constexpr size_t alignment_value = (_Maximum< (alignment_of< _Types> ::value)...> ::value); 
#line 919
typedef typename aligned_storage< _Max_len, alignment_value> ::type type; 
#line 920
}; 
#line 923
template< class _Ty> 
#line 924
struct underlying_type { 
#line 926
typedef __underlying_type(_Ty) type; 
#line 927
}; 
#line 930
template< class _Ty> 
#line 931
struct rank : public integral_constant< unsigned __int64, 0Ui64>  { 
#line 934
}; 
#line 936
template< class _Ty, size_t _Ix> 
#line 937
struct rank< _Ty [_Ix]>  : public integral_constant< unsigned __int64, rank< _Ty> ::value + 1>  { 
#line 940
}; 
#line 942
template< class _Ty> 
#line 943
struct rank< _Ty []>  : public integral_constant< unsigned __int64, rank< _Ty> ::value + 1>  { 
#line 946
}; 
#line 949
template< class _Ty, unsigned _Nx> 
#line 950
struct _Extent : public integral_constant< unsigned __int64, 0Ui64>  { 
#line 953
}; 
#line 955
template< class _Ty, size_t _Ix> 
#line 956
struct _Extent< _Ty [_Ix], 0>  : public integral_constant< unsigned __int64, _Ix>  { 
#line 959
}; 
#line 961
template< class _Ty, unsigned _Nx, size_t _Ix> 
#line 962
struct _Extent< _Ty [_Ix], _Nx>  : public _Extent< _Ty, _Nx - (1)>  { 
#line 965
}; 
#line 967
template< class _Ty, unsigned _Nx> 
#line 968
struct _Extent< _Ty [], _Nx>  : public _Extent< _Ty, _Nx - (1)>  { 
#line 971
}; 
#line 973
template< class _Ty, unsigned _Nx = 0U> 
#line 974
struct extent : public _Extent< _Ty, _Nx>  { 
#line 977
}; 
#line 980
template< class _Base, class 
#line 981
_Der> 
#line 982
struct is_base_of : public _Cat_base< __is_base_of(_Base, _Der)>  { 
#line 985
}; 
#line 988
template< class _Ty> 
#line 989
struct decay { 
#line 991
typedef typename remove_reference< _Ty> ::type _Ty1; 
#line 997
typedef typename _If< is_array< typename remove_reference< _Ty> ::type> ::value, typename remove_extent< typename remove_reference< _Ty> ::type> ::type *, typename _If< is_function< typename remove_reference< _Ty> ::type> ::value, typename add_pointer< typename remove_reference< _Ty> ::type> ::type, typename remove_cv< typename remove_reference< _Ty> ::type> ::type> ::type> ::type type; 
#line 998
}; 
#line 1001
template< class ...> struct _Conjunction; 
#line 1004
template< bool , class 
#line 1005
_Lhs, class ...
#line 1006
_Traits> 
#line 1007
struct _Choose_conjunction { 
#line 1009
typedef _Lhs type; 
#line 1010
}; 
#line 1012
template< class _Lhs, class ...
#line 1013
_Traits> 
#line 1014
struct _Choose_conjunction< true, _Lhs, _Traits...>  { 
#line 1016
typedef typename _Conjunction< _Traits...> ::type type; 
#line 1017
}; 
#line 1020
template<> struct _Conjunction< >  { 
#line 1022
typedef true_type type; 
#line 1023
}; 
#line 1025
template< class _Trait> 
#line 1026
struct _Conjunction< _Trait>  { 
#line 1028
typedef _Trait type; 
#line 1029
}; 
#line 1031
template< class _Lhs, class ...
#line 1032
_Traits> 
#line 1033
struct _Conjunction< _Lhs, _Traits...>  { 
#line 1035
typedef typename _Choose_conjunction< _Lhs::value, _Lhs, _Traits...> ::type type; 
#line 1036
}; 
#line 1038
template< class ..._Traits> 
#line 1039
struct conjunction : public _Conjunction< _Traits...> ::type { 
#line 1044
}; 
#line 1047
template< class ...> struct _Disjunction; 
#line 1050
template< bool , class 
#line 1051
_Lhs, class ...
#line 1052
_Traits> 
#line 1053
struct _Choose_disjunction { 
#line 1055
typedef _Lhs type; 
#line 1056
}; 
#line 1058
template< class _Lhs, class ...
#line 1059
_Traits> 
#line 1060
struct _Choose_disjunction< false, _Lhs, _Traits...>  { 
#line 1062
typedef typename _Disjunction< _Traits...> ::type type; 
#line 1063
}; 
#line 1066
template<> struct _Disjunction< >  { 
#line 1068
typedef false_type type; 
#line 1069
}; 
#line 1071
template< class _Trait> 
#line 1072
struct _Disjunction< _Trait>  { 
#line 1074
typedef _Trait type; 
#line 1075
}; 
#line 1077
template< class _Lhs, class ...
#line 1078
_Traits> 
#line 1079
struct _Disjunction< _Lhs, _Traits...>  { 
#line 1081
typedef typename _Choose_disjunction< _Lhs::value, _Lhs, _Traits...> ::type type; 
#line 1082
}; 
#line 1084
template< class ..._Traits> 
#line 1085
struct disjunction : public _Disjunction< _Traits...> ::type { 
#line 1090
}; 
#line 1093
template< class _Trait> 
#line 1094
struct negation : public bool_constant< !_Trait::value>  { 
#line 1097
}; 
#line 1100
namespace tr1 { 
#line 1101
using std::add_const;
#line 1102
using std::add_cv;
#line 1103
using std::add_pointer;
#line 1104
using std::add_volatile;
#line 1105
using std::aligned_storage;
#line 1106
using std::alignment_of;
#line 1107
using std::conditional;
#line 1108
using std::decay;
#line 1109
using std::enable_if;
#line 1110
using std::extent;
#line 1111
using std::false_type;
#line 1112
using std::has_virtual_destructor;
#line 1113
using std::integral_constant;
#line 1114
using std::is_abstract;
#line 1115
using std::is_arithmetic;
#line 1116
using std::is_array;
#line 1117
using std::is_base_of;
#line 1118
using std::is_class;
#line 1119
using std::is_compound;
#line 1120
using std::is_const;
#line 1121
using std::is_convertible;
#line 1122
using std::is_empty;
#line 1123
using std::is_enum;
#line 1124
using std::is_floating_point;
#line 1125
using std::is_function;
#line 1126
using std::is_fundamental;
#line 1127
using std::is_integral;
#line 1128
using std::is_member_function_pointer;
#line 1129
using std::is_member_object_pointer;
#line 1130
using std::is_member_pointer;
#line 1131
using std::is_object;
#line 1132
using std::is_pod;
#line 1133
using std::is_pointer;
#line 1134
using std::is_polymorphic;
#line 1135
using std::is_reference;
#line 1136
using std::is_same;
#line 1137
using std::is_scalar;
#line 1138
using std::is_signed;
#line 1139
using std::is_union;
#line 1140
using std::is_unsigned;
#line 1141
using std::is_void;
#line 1142
using std::is_volatile;
#line 1143
using std::make_signed;
#line 1144
using std::make_unsigned;
#line 1145
using std::rank;
#line 1146
using std::remove_all_extents;
#line 1147
using std::remove_const;
#line 1148
using std::remove_cv;
#line 1149
using std::remove_extent;
#line 1150
using std::remove_pointer;
#line 1151
using std::remove_reference;
#line 1152
using std::remove_volatile;
#line 1153
using std::true_type;
#line 1154
}
#line 1158 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class ..._Ty> struct common_type; 
#line 1161
template< class _Ty> 
#line 1162
struct common_type< _Ty>  { 
#line 1164
typedef typename decay< _Ty> ::type type; 
#line 1165
}; 
#line 1167
template< class _Ty0, class 
#line 1168
_Ty1> 
#line 1169
struct common_type< _Ty0, _Ty1>  { 
#line 1175
typedef typename decay< decltype(((_Always_false< _Ty0> ::value) ? std::declval< _Ty0> () : std::declval< _Ty1> ()))> ::type type; 
#line 1176
}; 
#line 1178
template< class _Ty0, class 
#line 1179
_Ty1, class ...
#line 1180
_Ty> 
#line 1181
struct common_type< _Ty0, _Ty1, _Ty...>  { 
#line 1185
typedef typename std::common_type< typename std::common_type< _Ty0, _Ty1> ::type, _Ty...> ::type type; 
#line 1186
}; 
#line 1189
template < class _Ty,
 _Ty ... _Vals >
 struct integer_sequence
 {
 static_assert ( is_integral < _Ty > :: value,
  "integer_sequence<T, I...> requires T to be an integral type." );

 typedef integer_sequence < _Ty, _Vals ... > type;
 typedef _Ty value_type;

 static constexpr size_t size ( ) noexcept
  {
  return ( sizeof ... ( _Vals ) );
  }
 };
#line 1243
template< class _Ty, _Ty 
#line 1244
_Size> using make_integer_sequence = __make_integer_seq< integer_sequence, _Ty, _Size> ; 
#line 1248 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< size_t ..._Vals> using index_sequence = integer_sequence< unsigned __int64, _Vals...> ; 
#line 1251
template< size_t _Size> using make_index_sequence = make_integer_sequence< unsigned __int64, _Size> ; 
#line 1254
template< class ..._Types> using index_sequence_for = make_index_sequence< sizeof...(_Types)> ; 
#line 1259
template < class _Ty >
 struct identity
 {
 typedef _Ty type;

 const _Ty & operator ( ) ( const _Ty & _Left ) const
  {
  return ( _Left );
  }
 };
#line 1272 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr _Ty &&
#line 1273
forward(typename remove_reference< _Ty> ::type &
#line 1274
_Arg) noexcept 
#line 1275
{ 
#line 1276
return static_cast< _Ty &&>(_Arg); 
#line 1277
} 
#line 1279
template< class _Ty> constexpr _Ty &&
#line 1280
forward(typename remove_reference< _Ty> ::type &&
#line 1281
_Arg) noexcept 
#line 1282
{ 
#line 1283
static_assert((!is_lvalue_reference< _Ty> ::value), "bad forward call");
#line 1284
return static_cast< _Ty &&>(_Arg); 
#line 1285
} 
#line 1288
template< class _Ty> constexpr typename remove_reference< _Ty> ::type &&
#line 1290
move(_Ty &&_Arg) noexcept 
#line 1291
{ 
#line 1292
return static_cast< typename remove_reference< _Ty> ::type &&>(_Arg); 
#line 1293
} 
#line 1296
template < class _Ty > inline
 constexpr typename _If < ! is_nothrow_move_constructible < _Ty > :: value
  && is_copy_constructible < _Ty > :: value,
   const _Ty &, _Ty && > :: type
 move_if_noexcept ( _Ty & _Arg ) noexcept
 {
 return ( :: std :: move ( _Arg ) );
 }
#line 1306
template< class ...> 
#line 1307
struct _Param_tester { 
#line 1309
typedef void type; 
#line 1310
}; 
#line 1313
template< class ..._Types> using void_t = typename _Param_tester< _Types...> ::type; 
#line 1317
struct _Invoker_pmf_object { 
#line 1319
template < class _Decayed,
  class _Ty1,
  class ... _Types2 >
  static auto _Call ( _Decayed _Pmf, _Ty1 && _Arg1, _Types2 && ... _Args2 )
  -> decltype ( ( :: std :: forward < _Ty1 > ( _Arg1 ) .* _Pmf ) (
   :: std :: forward < _Types2 > ( _Args2 ) ... ) )
  {
  return ( ( :: std :: forward < _Ty1 > ( _Arg1 ) .* _Pmf ) (
   :: std :: forward < _Types2 > ( _Args2 ) ... ) );
  }
#line 1329
}; 
#line 1331
struct _Invoker_pmf_pointer { 
#line 1333
template < class _Decayed,
  class _Ty1,
  class ... _Types2 >
  static auto _Call ( _Decayed _Pmf, _Ty1 && _Arg1, _Types2 && ... _Args2 )
  -> decltype ( ( ( * :: std :: forward < _Ty1 > ( _Arg1 ) ) .* _Pmf ) (
   :: std :: forward < _Types2 > ( _Args2 ) ... ) )
  {
  return ( ( ( * :: std :: forward < _Ty1 > ( _Arg1 ) ) .* _Pmf ) (
   :: std :: forward < _Types2 > ( _Args2 ) ... ) );
  }
#line 1343
}; 
#line 1345
struct _Invoker_pmd_object { 
#line 1347
template < class _Decayed,
  class _Ty1 >
  static auto _Call ( _Decayed _Pmd, _Ty1 && _Arg1 )
  -> decltype ( :: std :: forward < _Ty1 > ( _Arg1 ) .* _Pmd )
  {
  return ( :: std :: forward < _Ty1 > ( _Arg1 ) .* _Pmd );
  }
#line 1354
}; 
#line 1356
struct _Invoker_pmd_pointer { 
#line 1358
template < class _Decayed,
  class _Ty1 >
  static auto _Call ( _Decayed _Pmd, _Ty1 && _Arg1 )
  -> decltype ( ( * :: std :: forward < _Ty1 > ( _Arg1 ) ) .* _Pmd )
  {
  return ( ( * :: std :: forward < _Ty1 > ( _Arg1 ) ) .* _Pmd );
  }
#line 1365
}; 
#line 1367
struct _Invoker_functor { 
#line 1369
template < class _Callable,
  class ... _Types >
  static auto _Call ( _Callable && _Obj, _Types && ... _Args )
  -> decltype ( :: std :: forward < _Callable > ( _Obj ) (
   :: std :: forward < _Types > ( _Args ) ... ) )
  {
  return ( :: std :: forward < _Callable > ( _Obj ) (
   :: std :: forward < _Types > ( _Args ) ... ) );
  }
#line 1378
}; 
#line 1380
template< class _Callable, class 
#line 1381
_Ty1, class 
#line 1382
_Decayed = typename decay< _Callable> ::type, bool 
#line 1383
_Is_pmf = is_member_function_pointer< _Decayed> ::value, bool 
#line 1384
_Is_pmd = is_member_object_pointer< _Decayed> ::value> struct _Invoker1; 
#line 1387
template< class _Callable, class 
#line 1388
_Ty1, class 
#line 1389
_Decayed> 
#line 1390
struct _Invoker1< _Callable, _Ty1, _Decayed, true, false>  : public _If< is_base_of< typename _Is_memfunptr< _Decayed> ::_Class_type, typename decay< _Ty1> ::type> ::value, _Invoker_pmf_object, _Invoker_pmf_pointer> ::type { 
#line 1397
}; 
#line 1399
template< class _Callable, class 
#line 1400
_Ty1, class 
#line 1401
_Decayed> 
#line 1402
struct _Invoker1< _Callable, _Ty1, _Decayed, false, true>  : public _If< is_base_of< typename _Is_member_object_pointer< _Decayed> ::_Class_type, typename decay< _Ty1> ::type> ::value, _Invoker_pmd_object, _Invoker_pmd_pointer> ::type { 
#line 1409
}; 
#line 1411
template< class _Callable, class 
#line 1412
_Ty1, class 
#line 1413
_Decayed> 
#line 1414
struct _Invoker1< _Callable, _Ty1, _Decayed, false, false>  : public _Invoker_functor { 
#line 1417
}; 
#line 1419
template< class _Callable, class ...
#line 1420
_Types> struct _Invoker; 
#line 1423
template< class _Callable> 
#line 1424
struct _Invoker< _Callable>  : public _Invoker_functor { 
#line 1427
}; 
#line 1429
template< class _Callable, class 
#line 1430
_Ty1, class ...
#line 1431
_Types2> 
#line 1432
struct _Invoker< _Callable, _Ty1, _Types2...>  : public _Invoker1< _Callable, _Ty1>  { 
#line 1435
}; 
#line 1437
template < class _Callable,
 class ... _Types > inline
 auto invoke ( _Callable && _Obj, _Types && ... _Args )
 -> decltype ( _Invoker < _Callable, _Types ... > :: _Call (
  :: std :: forward < _Callable > ( _Obj ), :: std :: forward < _Types > ( _Args ) ... ) )
 {
 return ( _Invoker < _Callable, _Types ... > :: _Call (
  :: std :: forward < _Callable > ( _Obj ), :: std :: forward < _Types > ( _Args ) ... ) );
 }
#line 1447
template< class _Rx, bool 
#line 1448
 = is_void< _Rx> ::value> 
#line 1449
struct _Forced { 
#line 1451
}; 
#line 1453
struct _Unforced { 
#line 1455
}; 
#line 1457
template < class _Cv_void,
 class ... _Valtys > inline
 void _Invoke_ret ( _Forced < _Cv_void, true >, _Valtys && ... _Vals )
 {
 :: std :: invoke ( :: std :: forward < _Valtys > ( _Vals ) ... );
 }
#line 1464
template < class _Rx,
 class ... _Valtys > inline
 _Rx _Invoke_ret ( _Forced < _Rx, false >, _Valtys && ... _Vals )
 {
 return ( :: std :: invoke ( :: std :: forward < _Valtys > ( _Vals ) ... ) );
 }
#line 1471
template < class ... _Valtys > inline
 auto _Invoke_ret ( _Forced < _Unforced, false >, _Valtys && ... _Vals )
 -> decltype ( :: std :: invoke ( :: std :: forward < _Valtys > ( _Vals ) ... ) )
 {
 return ( :: std :: invoke ( :: std :: forward < _Valtys > ( _Vals ) ... ) );
 }
#line 1479
struct _Unique_tag_result_of { 
#line 1481
}; 
#line 1483
template< class _Void, class ...
#line 1484
_Types> 
#line 1485
struct _Result_of { 
#line 1487
}; 
#line 1489
template< class ..._Types> 
#line 1490
struct _Result_of< void_t< _Unique_tag_result_of, decltype((std::invoke(std::declval< _Types> ()...)))> , _Types...>  { 
#line 1496
typedef decltype((std::invoke(std::declval< _Types> ()...))) type; 
#line 1497
}; 
#line 1499
template< class _Fty> 
#line 1500
struct result_of { 
#line 1502
static_assert((_Always_false< _Fty> ::value), "result_of<CallableType> is invalid; use result_of<CallableType(zero or more argument types)> instead.");
#line 1505
}; 
#line 1515
template< class _Fty, class ..._Args> struct result_of< _Fty __cdecl (_Args ...)>  : public _Result_of< void, _Fty, _Args...>  { }; template< class _Fty, class ..._Args> struct result_of< _Fty __vectorcall (_Args ...)>  : public _Result_of< void, _Fty, _Args...>  { }; 
#line 1519
template< class _Ty, class 
#line 1520
 = void> 
#line 1521
struct _Weak_result_type { 
#line 1523
}; 
#line 1525
template< class _Ty> 
#line 1526
struct _Weak_result_type< _Ty, void_t< typename _Ty::result_type> >  { 
#line 1529
typedef typename _Ty::result_type result_type; 
#line 1530
}; 
#line 1532
template< class _Ty, class 
#line 1533
 = void> 
#line 1534
struct _Weak_argument_type : public _Weak_result_type< _Ty>  { 
#line 1537
}; 
#line 1539
template< class _Ty> 
#line 1540
struct _Weak_argument_type< _Ty, void_t< typename _Ty::argument_type> >  : public _Weak_result_type< _Ty>  { 
#line 1544
typedef typename _Ty::argument_type argument_type; 
#line 1545
}; 
#line 1547
template< class _Ty, class 
#line 1548
 = void> 
#line 1549
struct _Weak_binary_args : public _Weak_argument_type< _Ty>  { 
#line 1552
}; 
#line 1554
template< class _Ty> 
#line 1555
struct _Weak_binary_args< _Ty, void_t< typename _Ty::first_argument_type, typename _Ty::second_argument_type> >  : public _Weak_argument_type< _Ty>  { 
#line 1560
typedef typename _Ty::first_argument_type first_argument_type; 
#line 1561
typedef typename _Ty::second_argument_type second_argument_type; 
#line 1562
}; 
#line 1564
template< class _Ty> 
#line 1565
struct _Weak_types { 
#line 1567
typedef _Is_function< typename remove_pointer< _Ty> ::type>  _Is_f_or_pf; 
#line 1568
typedef _Is_memfunptr< typename remove_cv< _Ty> ::type>  _Is_pmf; 
#line 1571
typedef typename _If< _Is_function< typename remove_pointer< _Ty> ::type> ::_Bool_type::value, _Is_function< typename remove_pointer< _Ty> ::type> , typename _If< _Is_memfunptr< typename remove_cv< _Ty> ::type> ::_Bool_type::value, _Is_memfunptr< typename remove_cv< _Ty> ::type> , _Weak_binary_args< _Ty> > ::type> ::type type; 
#line 1572
}; 
#line 1575
template < class _Ty >
 class reference_wrapper
  : public _Weak_types < _Ty > :: type
 {
public :
 static_assert ( is_object < _Ty > :: value || is_function < _Ty > :: value,
  "reference_wrapper<T> requires T to be an object type or a function type."
                       );

 typedef _Ty type;

 reference_wrapper ( _Ty & _Val ) noexcept
  : _Ptr ( :: std :: addressof ( _Val ) )
  {
  }

 operator _Ty & ( ) const noexcept
  {
  return ( * _Ptr );
  }

 _Ty & get ( ) const noexcept
  {
  return ( * _Ptr );
  }

 template < class ... _Types >
  auto operator ( ) ( _Types && ... _Args ) const
  -> decltype ( :: std :: invoke ( get ( ), :: std :: forward < _Types > ( _Args ) ... ) )
  {
  return ( :: std :: invoke ( get ( ), :: std :: forward < _Types > ( _Args ) ... ) );
  }

 reference_wrapper ( _Ty && ) = delete;

private :
 _Ty * _Ptr;
 };
#line 1615
template < class _Ty > inline
 reference_wrapper < _Ty >
  ref ( _Ty & _Val ) noexcept
 {
 return ( reference_wrapper < _Ty > ( _Val ) );
 }
#line 1622
template < class _Ty >
 void ref ( const _Ty && ) = delete;
#line 1625
template < class _Ty > inline
 reference_wrapper < _Ty >
  ref ( reference_wrapper < _Ty > _Val ) noexcept
 {
 return ( :: std :: ref ( _Val . get ( ) ) );
 }
#line 1632
template < class _Ty > inline
 reference_wrapper < const _Ty >
  cref ( const _Ty & _Val ) noexcept
 {
 return ( reference_wrapper < const _Ty > ( _Val ) );
 }
#line 1639
template < class _Ty >
 void cref ( const _Ty && ) = delete;
#line 1642
template < class _Ty > inline
 reference_wrapper < const _Ty >
  cref ( reference_wrapper < _Ty > _Val ) noexcept
 {
 return ( :: std :: cref ( _Val . get ( ) ) );
 }
#line 1650
template< class _Ty> 
#line 1651
struct _Unrefwrap_helper { 
#line 1653
typedef _Ty type; 
#line 1654
static constexpr bool _Is_refwrap = false; 
#line 1655
}; 
#line 1657
template< class _Ty> 
#line 1658
struct _Unrefwrap_helper< reference_wrapper< _Ty> >  { 
#line 1660
typedef _Ty &type; 
#line 1661
static constexpr bool _Is_refwrap = true; 
#line 1662
}; 
#line 1664
template< class _Ty> 
#line 1665
struct _Unrefwrap { 
#line 1667
typedef typename decay< _Ty> ::type _Ty1; 
#line 1668
typedef typename _Unrefwrap_helper< typename decay< _Ty> ::type> ::type type; 
#line 1669
static constexpr bool _Is_refwrap = (_Unrefwrap_helper< typename decay< _Ty> ::type> ::_Is_refwrap); 
#line 1670
}; 
#line 1673
namespace tr1 { 
#line 1674
using std::cref;
#line 1675
using std::ref;
#line 1676
using std::reference_wrapper;
#line 1677
using std::result_of;
#line 1678
}
#line 1682 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> struct _Is_swappable; 
#line 1686
template< class _Ty> struct _Is_nothrow_swappable; 
#line 1695 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template < class _Ty,
 class = void > inline

 void swap ( _Ty &, _Ty & )
  noexcept ( is_nothrow_move_constructible < _Ty > :: value && is_nothrow_move_assignable < _Ty > :: value );
#line 1702 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template < class _Ty,
 size_t _Size,
 class = typename enable_if < _Is_swappable < _Ty > :: value > :: type > inline
 void swap ( _Ty ( & ) [ _Size ], _Ty ( & ) [ _Size ] )
  noexcept ( _Is_nothrow_swappable < _Ty > :: value );
#line 1709
template< class _Ty1, class 
#line 1710
_Ty2, class 
#line 1711
 = void> 
#line 1712
struct _Swappable_with_helper : public false_type { 
#line 1715
}; 
#line 1717
struct _Swappable_with_helper_unique_type { }; 
#line 1718
template< class _Ty1, class 
#line 1719
_Ty2> 
#line 1720
struct _Swappable_with_helper< _Ty1, _Ty2, void_t< _Swappable_with_helper_unique_type, decltype((swap(std::declval< _Ty1> (), std::declval< _Ty2> ())))> >  : public true_type { 
#line 1725
}; 
#line 1728
template< class _Ty1, class 
#line 1729
_Ty2> 
#line 1730
struct _Is_swappable_with : public conjunction< _Swappable_with_helper< _Ty1, _Ty2> , _Swappable_with_helper< _Ty2, _Ty1> > ::type { 
#line 1736
}; 
#line 1739
template< class _Ty> 
#line 1740
struct _Is_swappable : public _Is_swappable_with< typename add_lvalue_reference< _Ty> ::type, typename add_lvalue_reference< _Ty> ::type> ::type { 
#line 1745
}; 
#line 1748
template< class _Ty1, class 
#line 1749
_Ty2> 
#line 1750
struct _Swap_cannot_throw { 
#line 1755
static constexpr bool value = (noexcept(swap(std::declval< _Ty1> (), std::declval< _Ty2> ())) && noexcept(swap(std::declval< _Ty2> (), std::declval< _Ty1> ()))); 
#line 1761 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using type = bool_constant< value> ; 
#line 1762
}; 
#line 1765
template< class _Ty1, class 
#line 1766
_Ty2> 
#line 1767
struct _Is_nothrow_swappable_with : public conjunction< _Is_swappable_with< _Ty1, _Ty2> , _Swap_cannot_throw< _Ty1, _Ty2> > ::type { 
#line 1773
}; 
#line 1776
template< class _Ty> 
#line 1777
struct _Is_nothrow_swappable : public _Is_nothrow_swappable_with< typename add_lvalue_reference< _Ty> ::type, typename add_lvalue_reference< _Ty> ::type> ::type { 
#line 1782
}; 
#line 1819 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> using remove_const_t = typename remove_const< _Ty> ::type; 
#line 1822
template< class _Ty> using remove_volatile_t = typename remove_volatile< _Ty> ::type; 
#line 1825
template< class _Ty> using remove_cv_t = typename remove_cv< _Ty> ::type; 
#line 1828
template< class _Ty> using add_const_t = typename add_const< _Ty> ::type; 
#line 1831
template< class _Ty> using add_volatile_t = typename add_volatile< _Ty> ::type; 
#line 1834
template< class _Ty> using add_cv_t = typename add_cv< _Ty> ::type; 
#line 1837
template< class _Ty> using remove_reference_t = typename remove_reference< _Ty> ::type; 
#line 1840
template< class _Ty> using add_lvalue_reference_t = typename add_lvalue_reference< _Ty> ::type; 
#line 1843
template< class _Ty> using add_rvalue_reference_t = typename add_rvalue_reference< _Ty> ::type; 
#line 1846
template< class _Ty> using make_signed_t = typename make_signed< _Ty> ::type; 
#line 1849
template< class _Ty> using make_unsigned_t = typename make_unsigned< _Ty> ::type; 
#line 1852
template< class _Ty> using remove_extent_t = typename remove_extent< _Ty> ::type; 
#line 1855
template< class _Ty> using remove_all_extents_t = typename remove_all_extents< _Ty> ::type; 
#line 1858
template< class _Ty> using remove_pointer_t = typename remove_pointer< _Ty> ::type; 
#line 1861
template< class _Ty> using add_pointer_t = typename add_pointer< _Ty> ::type; 
#line 1864
template< size_t _Len, size_t 
#line 1865
_Align = 8Ui64> using aligned_storage_t = typename aligned_storage< _Len, _Align> ::type; 
#line 1868
template< size_t _Len, class ...
#line 1869
_Types> using aligned_union_t = typename aligned_union< _Len, _Types...> ::type; 
#line 1872
template< class _Ty> using decay_t = typename decay< _Ty> ::type; 
#line 1875
template< bool _Test, class 
#line 1876
_Ty = void> using enable_if_t = typename enable_if< _Test, _Ty> ::type; 
#line 1879
template< bool _Test, class 
#line 1880
_Ty1, class 
#line 1881
_Ty2> using conditional_t = typename conditional< _Test, _Ty1, _Ty2> ::type; 
#line 1884
template< class ..._Ty> using common_type_t = typename common_type< _Ty...> ::type; 
#line 1887
template< class _Ty> using underlying_type_t = typename underlying_type< _Ty> ::type; 
#line 1890
template< class _Ty> using result_of_t = typename result_of< _Ty> ::type; 
#line 1895
template< class _Ty> constexpr bool 
#line 1896
is_void_v = (is_void< _Ty> ::value); 
#line 1897
template< class _Ty> constexpr bool 
#line 1898
is_null_pointer_v = (is_null_pointer< _Ty> ::value); 
#line 1899
template< class _Ty> constexpr bool 
#line 1900
is_array_v = (is_array< _Ty> ::value); 
#line 1901
template< class _Ty> constexpr bool 
#line 1902
is_pointer_v = (is_pointer< _Ty> ::value); 
#line 1903
template< class _Ty> constexpr bool 
#line 1904
is_lvalue_reference_v = (is_lvalue_reference< _Ty> ::value); 
#line 1905
template< class _Ty> constexpr bool 
#line 1906
is_rvalue_reference_v = (is_rvalue_reference< _Ty> ::value); 
#line 1907
template< class _Ty> constexpr bool 
#line 1908
is_member_object_pointer_v = (is_member_object_pointer< _Ty> ::value); 
#line 1909
template< class _Ty> constexpr bool 
#line 1910
is_member_function_pointer_v = (is_member_function_pointer< _Ty> ::value); 
#line 1911
template< class _Ty> constexpr bool 
#line 1912
is_enum_v = (is_enum< _Ty> ::value); 
#line 1913
template< class _Ty> constexpr bool 
#line 1914
is_union_v = (is_union< _Ty> ::value); 
#line 1915
template< class _Ty> constexpr bool 
#line 1916
is_class_v = (is_class< _Ty> ::value); 
#line 1917
template< class _Ty> constexpr bool 
#line 1918
is_reference_v = (is_reference< _Ty> ::value); 
#line 1919
template< class _Ty> constexpr bool 
#line 1920
is_fundamental_v = (is_fundamental< _Ty> ::value); 
#line 1921
template< class _Ty> constexpr bool 
#line 1922
is_object_v = (is_object< _Ty> ::value); 
#line 1923
template< class _Ty> constexpr bool 
#line 1924
is_scalar_v = (is_scalar< _Ty> ::value); 
#line 1925
template< class _Ty> constexpr bool 
#line 1926
is_compound_v = (is_compound< _Ty> ::value); 
#line 1927
template< class _Ty> constexpr bool 
#line 1928
is_member_pointer_v = (is_member_pointer< _Ty> ::value); 
#line 1929
template< class _Ty> constexpr bool 
#line 1930
is_const_v = (is_const< _Ty> ::value); 
#line 1931
template< class _Ty> constexpr bool 
#line 1932
is_volatile_v = (is_volatile< _Ty> ::value); 
#line 1933
template< class _Ty> constexpr bool 
#line 1934
is_trivial_v = (is_trivial< _Ty> ::value); 
#line 1935
template< class _Ty> constexpr bool 
#line 1936
is_trivially_copyable_v = (is_trivially_copyable< _Ty> ::value); 
#line 1937
template< class _Ty> constexpr bool 
#line 1938
is_standard_layout_v = (is_standard_layout< _Ty> ::value); 
#line 1939
template< class _Ty> constexpr bool 
#line 1940
is_pod_v = (is_pod< _Ty> ::value); 
#line 1941
template< class _Ty> constexpr bool 
#line 1942
is_literal_type_v = (is_literal_type< _Ty> ::value); 
#line 1943
template< class _Ty> constexpr bool 
#line 1944
is_empty_v = (is_empty< _Ty> ::value); 
#line 1945
template< class _Ty> constexpr bool 
#line 1946
is_polymorphic_v = (is_polymorphic< _Ty> ::value); 
#line 1947
template< class _Ty> constexpr bool 
#line 1948
is_abstract_v = (is_abstract< _Ty> ::value); 
#line 1949
template< class _Ty> constexpr bool 
#line 1950
is_final_v = (is_final< _Ty> ::value); 
#line 1951
template< class _Ty> constexpr bool 
#line 1952
is_signed_v = (is_signed< _Ty> ::value); 
#line 1953
template< class _Ty> constexpr bool 
#line 1954
is_unsigned_v = (is_unsigned< _Ty> ::value); 
#line 1955
template< class _Ty, class ...
#line 1956
_Args> constexpr bool 
#line 1957
is_constructible_v = (is_constructible< _Ty, _Args...> ::value); 
#line 1958
template< class _Ty> constexpr bool 
#line 1959
is_default_constructible_v = (is_default_constructible< _Ty> ::value); 
#line 1960
template< class _Ty> constexpr bool 
#line 1961
is_copy_constructible_v = (is_copy_constructible< _Ty> ::value); 
#line 1962
template< class _Ty> constexpr bool 
#line 1963
is_move_constructible_v = (is_move_constructible< _Ty> ::value); 
#line 1964
template< class _Ty, class 
#line 1965
_Uty> constexpr bool 
#line 1966
is_assignable_v = (is_assignable< _Ty, _Uty> ::value); 
#line 1967
template< class _Ty> constexpr bool 
#line 1968
is_copy_assignable_v = (is_copy_assignable< _Ty> ::value); 
#line 1969
template< class _Ty> constexpr bool 
#line 1970
is_move_assignable_v = (is_move_assignable< _Ty> ::value); 
#line 1978 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1979
is_destructible_v = (is_destructible< _Ty> ::value); 
#line 1980
template< class _Ty, class ...
#line 1981
_Args> constexpr bool 
#line 1982
is_trivially_constructible_v = (is_trivially_constructible< _Ty, _Args...> ::value); 
#line 1983
template< class _Ty> constexpr bool 
#line 1984
is_trivially_default_constructible_v = (is_trivially_default_constructible< _Ty> ::value); 
#line 1985
template< class _Ty> constexpr bool 
#line 1986
is_trivially_copy_constructible_v = (is_trivially_copy_constructible< _Ty> ::value); 
#line 1987
template< class _Ty> constexpr bool 
#line 1988
is_trivially_move_constructible_v = (is_trivially_move_constructible< _Ty> ::value); 
#line 1989
template< class _Ty, class 
#line 1990
_Uty> constexpr bool 
#line 1991
is_trivially_assignable_v = (is_trivially_assignable< _Ty, _Uty> ::value); 
#line 1992
template< class _Ty> constexpr bool 
#line 1993
is_trivially_copy_assignable_v = (is_trivially_copy_assignable< _Ty> ::value); 
#line 1994
template< class _Ty> constexpr bool 
#line 1995
is_trivially_move_assignable_v = (is_trivially_move_assignable< _Ty> ::value); 
#line 1996
template< class _Ty> constexpr bool 
#line 1997
is_trivially_destructible_v = (is_trivially_destructible< _Ty> ::value); 
#line 1998
template< class _Ty, class ...
#line 1999
_Args> constexpr bool 
#line 2000
is_nothrow_constructible_v = (is_nothrow_constructible< _Ty, _Args...> ::value); 
#line 2001
template< class _Ty> constexpr bool 
#line 2002
is_nothrow_default_constructible_v = (is_nothrow_default_constructible< _Ty> ::value); 
#line 2003
template< class _Ty> constexpr bool 
#line 2004
is_nothrow_copy_constructible_v = (is_nothrow_copy_constructible< _Ty> ::value); 
#line 2005
template< class _Ty> constexpr bool 
#line 2006
is_nothrow_move_constructible_v = (is_nothrow_move_constructible< _Ty> ::value); 
#line 2007
template< class _Ty, class 
#line 2008
_Uty> constexpr bool 
#line 2009
is_nothrow_assignable_v = (is_nothrow_assignable< _Ty, _Uty> ::value); 
#line 2010
template< class _Ty> constexpr bool 
#line 2011
is_nothrow_copy_assignable_v = (is_nothrow_copy_assignable< _Ty> ::value); 
#line 2012
template< class _Ty> constexpr bool 
#line 2013
is_nothrow_move_assignable_v = (is_nothrow_move_assignable< _Ty> ::value); 
#line 2021 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 2022
is_nothrow_destructible_v = (is_nothrow_destructible< _Ty> ::value); 
#line 2023
template< class _Ty> constexpr bool 
#line 2024
has_virtual_destructor_v = (has_virtual_destructor< _Ty> ::value); 
#line 2025
template< class _Ty> constexpr size_t 
#line 2026
alignment_of_v = (alignment_of< _Ty> ::value); 
#line 2027
template< class _Ty> constexpr size_t 
#line 2028
rank_v = (rank< _Ty> ::value); 
#line 2029
template< class _Ty, unsigned 
#line 2030
_Ix = 0U> constexpr size_t 
#line 2031
extent_v = (extent< _Ty, _Ix> ::value); 
#line 2032
template< class _Base, class 
#line 2033
_Derived> constexpr bool 
#line 2034
is_base_of_v = (is_base_of< _Base, _Derived> ::value); 
#line 2035
template< class _From, class 
#line 2036
_To> constexpr bool 
#line 2037
is_convertible_v = (is_convertible< _From, _To> ::value); 
#line 2038
template< class ..._Traits> constexpr bool 
#line 2039
conjunction_v = (conjunction< _Traits...> ::value); 
#line 2040
template< class ..._Traits> constexpr bool 
#line 2041
disjunction_v = (disjunction< _Traits...> ::value); 
#line 2042
template< class _Trait> constexpr bool 
#line 2043
negation_v = (negation< _Trait> ::value); 
#line 2046 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}
#line 2049
#pragma warning(pop)
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
#pragma warning(push,3)
#line 2050 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
#pragma pack ( pop )
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
#pragma pack ( push, 8 )
#line 14
namespace std { 
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
__declspec(dllimport) bool __cdecl uncaught_exception() noexcept; 
#line 34
__declspec(dllimport) int __cdecl uncaught_exceptions() noexcept; 
#line 36
}
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
__pragma( pack ( push, 8 )) extern "C" {
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
typedef 
#line 39
struct _heapinfo { 
#line 41
int *_pentry; 
#line 42
size_t _size; 
#line 43
int _useflag; 
#line 44
} _HEAPINFO; 
#line 54
void *__cdecl _alloca(size_t _Size); 
#line 60
__declspec(dllimport) intptr_t __cdecl _get_heap_handle(); 
#line 63
__declspec(dllimport) int __cdecl _heapmin(); 
#line 66
__declspec(dllimport) int __cdecl _heapwalk(_HEAPINFO * _EntryInfo); 
#line 70 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
__declspec(dllimport) int __cdecl _heapchk(); 
#line 71
__declspec(dllimport) int __cdecl _resetstkoflw(); 
#line 84 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
typedef char __static_assert_t[(sizeof(unsigned) <= (16)) != 0]; 
#line 87
#pragma warning(push)
#pragma warning(disable:6540)
#line 90
__inline void *_MarkAllocaS(void *_Ptr, unsigned _Marker) 
#line 91
{ 
#line 92
if (_Ptr) 
#line 93
{ 
#line 94
(*((unsigned *)_Ptr)) = _Marker; 
#line 95
_Ptr = (((char *)_Ptr) + 16); 
#line 96
}  
#line 97
return _Ptr; 
#line 98
} 
#line 100
__inline size_t _MallocaComputeSize(size_t _Size) 
#line 101
{ 
#line 102
size_t _MarkedSize = _Size + (16); 
#line 103
return (_MarkedSize > _Size) ? _MarkedSize : (0); 
#line 104
} 
#line 106
#pragma warning(pop)
#line 144 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
#pragma warning(push)
#pragma warning(disable: 6014)
__inline void __cdecl _freea(void *_Memory) 
#line 147
{ 
#line 148
unsigned _Marker; 
#line 149
if (_Memory) 
#line 150
{ 
#line 151
_Memory = (((char *)_Memory) - 16); 
#line 152
_Marker = (*((unsigned *)_Memory)); 
#line 153
if (_Marker == (56797)) 
#line 154
{ 
#line 155
free(_Memory); 
#line 156
}  
#line 163
}  
#line 164
} 
#line 177 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
}
#line 165 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
#pragma warning(pop)
#line 177 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
__pragma( pack ( pop )) 
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_terminate.h"
__pragma( pack ( push, 8 )) extern "C" {
#line 18
typedef void (__cdecl *terminate_handler)(void); 
#line 19
typedef void (__cdecl *terminate_function)(void); 
#line 28
__declspec(dllimport) __declspec(noreturn) void __cdecl abort(); 
#line 29
__declspec(dllimport) __declspec(noreturn) void __cdecl terminate() throw(); 
#line 33
__declspec(dllimport) terminate_handler __cdecl set_terminate(terminate_handler _NewTerminateHandler) throw(); 
#line 37
__declspec(dllimport) terminate_handler __cdecl _get_terminate(); 
#line 43 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_terminate.h"
}__pragma( pack ( pop )) 
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"
__pragma( pack ( push, 8 )) extern "C" {
#line 19
typedef void (__cdecl *unexpected_handler)(void); 
#line 20
typedef void (__cdecl *unexpected_function)(void); 
#line 27
struct _EXCEPTION_POINTERS; 
#line 31
__declspec(dllimport) __declspec(noreturn) void __cdecl unexpected() throw(...); 
#line 35
__declspec(dllimport) unexpected_handler __cdecl set_unexpected(unexpected_handler _NewUnexpectedHandler) throw(); 
#line 39
__declspec(dllimport) unexpected_handler __cdecl _get_unexpected(); 
#line 41
typedef void (__cdecl *_se_translator_function)(unsigned, _EXCEPTION_POINTERS *); 
#line 43
__declspec(dllimport) _se_translator_function __cdecl _set_se_translator(_se_translator_function _NewSETranslator); 
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"
class type_info; 
#line 51
__declspec(dllimport) int __cdecl _is_exception_typeof(const type_info & _Type, _EXCEPTION_POINTERS * _ExceptionPtr); 
#line 56
__declspec(dllimport) bool __cdecl __uncaught_exception(); 
#line 57
__declspec(dllimport) int __cdecl __uncaught_exceptions(); 
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"
}__pragma( pack ( pop )) 
#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
#pragma pack ( push, 8 )
#line 19
__pragma( pack ( push, 8 )) extern "C" {
#line 21
struct __std_exception_data { 
#line 23
const char *_What; 
#line 24
bool _DoFree; 
#line 25
}; 
#line 27
__declspec(dllimport) void __cdecl __std_exception_copy(const __std_exception_data * _From, __std_exception_data * _To); 
#line 32
__declspec(dllimport) void __cdecl __std_exception_destroy(__std_exception_data * _Data); 
#line 36
}__pragma( pack ( pop )) 
#line 40
namespace std { 
#line 42
class exception { 
#line 46
public: exception() throw() : _Data() 
#line 48
{ 
#line 49
} 
#line 51
explicit exception(const char *const _Message) throw() : _Data() 
#line 53
{ 
#line 54
__std_exception_data _InitData = {_Message, true}; 
#line 55
__std_exception_copy(&_InitData, &(_Data)); 
#line 56
} 
#line 58
exception(const char *const _Message, int) throw() : _Data() 
#line 60
{ 
#line 61
((_Data)._What) = _Message; 
#line 62
} 
#line 64
exception(const exception &_Other) throw() : _Data() 
#line 66
{ 
#line 67
__std_exception_copy(&(_Other._Data), &(_Data)); 
#line 68
} 
#line 70
exception &operator=(const exception &_Other) throw() 
#line 71
{ 
#line 72
if (this == (&_Other)) 
#line 73
{ 
#line 74
return *this; 
#line 75
}  
#line 77
__std_exception_destroy(&(_Data)); 
#line 78
__std_exception_copy(&(_Other._Data), &(_Data)); 
#line 79
return *this; 
#line 80
} 
#line 82
virtual ~exception() throw() 
#line 83
{ 
#line 84
__std_exception_destroy(&(_Data)); 
#line 85
} 
#line 87
virtual const char *what() const 
#line 88
{ 
#line 89
return ((_Data)._What) ? (_Data)._What : ("Unknown exception"); 
#line 90
} 
#line 94
private: __std_exception_data _Data; 
#line 95
}; 
#line 97
class bad_exception : public exception { 
#line 102
public: bad_exception() throw() : exception("bad exception", 1) 
#line 104
{ 
#line 105
} 
#line 106
}; 
#line 108
class bad_alloc : public exception { 
#line 113
public: bad_alloc() throw() : exception("bad allocation", 1) 
#line 115
{ 
#line 116
} 
#line 120
friend class bad_array_new_length; 
#line 122
private: bad_alloc(const char *const _Message) throw() : exception(_Message, 1) 
#line 124
{ 
#line 125
} 
#line 126
}; 
#line 128
class bad_array_new_length : public bad_alloc { 
#line 133
public: bad_array_new_length() throw() : bad_alloc("bad array new length") 
#line 135
{ 
#line 136
} 
#line 137
}; 
#line 139
}
#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
#pragma pack ( pop )
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
namespace std { 
#line 45
using ::set_terminate;using ::terminate_handler;using ::terminate;using ::set_unexpected;using ::unexpected_handler;using ::unexpected;
#line 47
typedef void (__cdecl *_Prhand)(const exception &); 
#line 50
inline terminate_handler __cdecl get_terminate() noexcept 
#line 51
{ 
#line 52
return _get_terminate(); 
#line 53
} 
#line 55
inline unexpected_handler __cdecl get_unexpected() noexcept 
#line 56
{ 
#line 57
return _get_unexpected(); 
#line 58
} 
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
}
#line 240 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
__declspec(dllimport) void __cdecl __ExceptionPtrCreate(void *); 
#line 241
__declspec(dllimport) void __cdecl __ExceptionPtrDestroy(void *); 
#line 242
__declspec(dllimport) void __cdecl __ExceptionPtrCopy(void *, const void *); 
#line 243
__declspec(dllimport) void __cdecl __ExceptionPtrAssign(void *, const void *); 
#line 244
__declspec(dllimport) bool __cdecl __ExceptionPtrCompare(const void *, const void *); 
#line 245
__declspec(dllimport) bool __cdecl __ExceptionPtrToBool(const void *); 
#line 246
__declspec(dllimport) void __cdecl __ExceptionPtrSwap(void *, void *); 
#line 247
__declspec(dllimport) void __cdecl __ExceptionPtrCurrentException(void *); 
#line 248
[[noreturn]] __declspec(dllimport) void __cdecl __ExceptionPtrRethrow(const void *); 
#line 249
__declspec(dllimport) void __cdecl __ExceptionPtrCopyException(void *, const void *, const void *); 
#line 252
namespace std { 
#line 254
class exception_ptr { 
#line 257
public: exception_ptr() throw() 
#line 258
{ 
#line 259
__ExceptionPtrCreate(this); 
#line 260
} 
#line 262
exception_ptr(nullptr_t) throw() 
#line 263
{ 
#line 264
__ExceptionPtrCreate(this); 
#line 265
} 
#line 267
~exception_ptr() throw() 
#line 268
{ 
#line 269
__ExceptionPtrDestroy(this); 
#line 270
} 
#line 272
exception_ptr(const exception_ptr &_Rhs) throw() 
#line 273
{ 
#line 274
__ExceptionPtrCopy(this, &_Rhs); 
#line 275
} 
#line 277
exception_ptr &operator=(const exception_ptr &_Rhs) throw() 
#line 278
{ 
#line 279
__ExceptionPtrAssign(this, &_Rhs); 
#line 280
return *this; 
#line 281
} 
#line 283
exception_ptr &operator=(nullptr_t) throw() 
#line 284
{ 
#line 285
exception_ptr _Ptr; 
#line 286
__ExceptionPtrAssign(this, &_Ptr); 
#line 287
return *this; 
#line 288
} 
#line 290
explicit operator bool() const throw() 
#line 291
{ 
#line 292
return __ExceptionPtrToBool(this); 
#line 293
} 
#line 295
[[noreturn]] void _RethrowException() const 
#line 296
{ 
#line 297
__ExceptionPtrRethrow(this); 
#line 298
} 
#line 300
static exception_ptr _Current_exception() throw() 
#line 301
{ 
#line 302
exception_ptr _Retval; 
#line 303
__ExceptionPtrCurrentException(&_Retval); 
#line 304
return _Retval; 
#line 305
} 
#line 307
static exception_ptr _Copy_exception(void *_Except, const void *_Ptr) 
#line 308
{ 
#line 309
exception_ptr _Retval = 0; 
#line 310
if (!_Ptr) 
#line 311
{ 
#line 313
return _Retval; 
#line 314
}  
#line 315
__ExceptionPtrCopyException(&_Retval, _Except, _Ptr); 
#line 316
return _Retval; 
#line 317
} 
#line 320
private: void *_Data1; 
#line 321
void *_Data2; 
#line 322
}; 
#line 324
inline void swap(exception_ptr &_Lhs, exception_ptr &_Rhs) throw() 
#line 325
{ 
#line 326
__ExceptionPtrSwap(&_Lhs, &_Rhs); 
#line 327
} 
#line 329
inline bool operator==(const exception_ptr &_Lhs, const exception_ptr &_Rhs) throw() 
#line 330
{ 
#line 331
return __ExceptionPtrCompare(&_Lhs, &_Rhs); 
#line 332
} 
#line 334
inline bool operator==(nullptr_t, const exception_ptr &_Rhs) throw() 
#line 335
{ 
#line 336
return !_Rhs; 
#line 337
} 
#line 339
inline bool operator==(const exception_ptr &_Lhs, nullptr_t) throw() 
#line 340
{ 
#line 341
return !_Lhs; 
#line 342
} 
#line 344
inline bool operator!=(const exception_ptr &_Lhs, const exception_ptr &_Rhs) throw() 
#line 345
{ 
#line 346
return !((_Lhs == _Rhs)); 
#line 347
} 
#line 349
inline bool operator!=(nullptr_t _Lhs, const exception_ptr &_Rhs) throw() 
#line 350
{ 
#line 351
return !((_Lhs == _Rhs)); 
#line 352
} 
#line 354
inline bool operator!=(const exception_ptr &_Lhs, nullptr_t _Rhs) throw() 
#line 355
{ 
#line 356
return !((_Lhs == _Rhs)); 
#line 357
} 
#line 359
inline exception_ptr current_exception() noexcept 
#line 360
{ 
#line 361
return exception_ptr::_Current_exception(); 
#line 362
} 
#line 364
[[noreturn]] inline void rethrow_exception(exception_ptr _Ptr) 
#line 365
{ 
#line 366
_Ptr._RethrowException(); 
#line 367
} 
#line 369
template< class _Ex> void *__GetExceptionInfo(_Ex); 
#line 371
template < class _Ex > exception_ptr make_exception_ptr ( _Ex _Except ) noexcept
 {
 return exception_ptr :: _Copy_exception ( :: std :: addressof ( _Except ), __GetExceptionInfo ( _Except ) );
 }
#line 377
class nested_exception { 
#line 380
public: nested_exception() noexcept : _Exc(::std::current_exception()) 
#line 382
{ 
#line 383
} 
#line 385
nested_exception(const nested_exception &) noexcept = default;
#line 386
nested_exception &operator=(const nested_exception &) noexcept = default;
#line 387
virtual ~nested_exception() noexcept = default;
#line 389
[[noreturn]] void rethrow_nested() const 
#line 390
{ 
#line 391
if ((_Exc)) { 
#line 392
::std::rethrow_exception(_Exc); } else { 
#line 394
::std::terminate(); }  
#line 395
} 
#line 397
exception_ptr nested_ptr() const noexcept 
#line 398
{ 
#line 399
return _Exc; 
#line 400
} 
#line 403
private: exception_ptr _Exc; 
#line 404
}; 
#line 407
template < class _Ty,
 class _Uty >
 struct _With_nested
  : _Uty, nested_exception
 {
 explicit _With_nested ( _Ty && _Arg )
  : _Uty ( :: std :: forward < _Ty > ( _Arg ) ), nested_exception ( )
  {
  }
 };
#line 418
template < class _Ty >
 [ [ noreturn ] ] inline void _Throw_with_nested ( _Ty && _Arg, true_type )
 {
 typedef typename remove_reference < _Ty > :: type _Uty;
 typedef _With_nested < _Ty, _Uty > _Glued;

 throw _Glued ( :: std :: forward < _Ty > ( _Arg ) );
 }
#line 427
template < class _Ty >
 [ [ noreturn ] ] inline void _Throw_with_nested ( _Ty && _Arg, false_type )
 {
 typedef typename decay < _Ty > :: type _Decayed;

 throw _Decayed ( :: std :: forward < _Ty > ( _Arg ) );
 }
#line 435
template < class _Ty >
 [ [ noreturn ] ] inline void throw_with_nested ( _Ty && _Arg )
 {
 typedef typename remove_reference < _Ty > :: type _Uty;

 integral_constant < bool,
  is_class < _Uty > :: value
  && ! is_base_of < nested_exception, _Uty > :: value
  && ! is_final < _Uty > :: value > _Tag;

 _Throw_with_nested ( :: std :: forward < _Ty > ( _Arg ), _Tag );
 }
#line 449
template < class _Ty > inline
 void _Rethrow_if_nested ( const _Ty * _Ptr, true_type )
 {
 const auto _Nested = dynamic_cast < const nested_exception * > ( _Ptr );

 if ( _Nested )
  _Nested -> rethrow_nested ( );
 }
#line 458
template < class _Ty > inline
 void _Rethrow_if_nested ( const _Ty *, false_type )
 {
 }
#line 463
template < class _Ty > inline
 void rethrow_if_nested ( const _Ty & _Arg )
 {
 integral_constant < bool,
  is_polymorphic < _Ty > :: value
  && ( ! is_base_of < nested_exception, _Ty > :: value
   || is_convertible < _Ty *, nested_exception * > :: value ) > _Tag;

 _Rethrow_if_nested ( :: std :: addressof ( _Arg ), _Tag );
 }
#line 473
}
#line 476
#pragma warning(pop)
#pragma pack ( pop )
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef signed char int8_t; 
#line 18
typedef short int16_t; 
#line 19
typedef int int32_t; 
#line 20
typedef __int64 int64_t; 
#line 21
typedef unsigned char uint8_t; 
#line 22
typedef unsigned short uint16_t; 
#line 23
typedef unsigned uint32_t; 
#line 24
typedef unsigned __int64 uint64_t; 
#line 26
typedef signed char int_least8_t; 
#line 27
typedef short int_least16_t; 
#line 28
typedef int int_least32_t; 
#line 29
typedef __int64 int_least64_t; 
#line 30
typedef unsigned char uint_least8_t; 
#line 31
typedef unsigned short uint_least16_t; 
#line 32
typedef unsigned uint_least32_t; 
#line 33
typedef unsigned __int64 uint_least64_t; 
#line 35
typedef signed char int_fast8_t; 
#line 36
typedef int int_fast16_t; 
#line 37
typedef int int_fast32_t; 
#line 38
typedef __int64 int_fast64_t; 
#line 39
typedef unsigned char uint_fast8_t; 
#line 40
typedef unsigned uint_fast16_t; 
#line 41
typedef unsigned uint_fast32_t; 
#line 42
typedef unsigned __int64 uint_fast64_t; 
#line 44
typedef __int64 intmax_t; 
#line 45
typedef unsigned __int64 uintmax_t; 
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
namespace std { 
#line 18
using ::int8_t;using ::int16_t;
#line 19
using ::int32_t;using ::int64_t;
#line 20
using ::uint8_t;using ::uint16_t;
#line 21
using ::uint32_t;using ::uint64_t;
#line 23
using ::int_least8_t;using ::int_least16_t;
#line 24
using ::int_least32_t;using ::int_least64_t;
#line 25
using ::uint_least8_t;using ::uint_least16_t;
#line 26
using ::uint_least32_t;using ::uint_least64_t;
#line 28
using ::int_fast8_t;using ::int_fast16_t;
#line 29
using ::int_fast32_t;using ::int_fast64_t;
#line 30
using ::uint_fast8_t;using ::uint_fast16_t;
#line 31
using ::uint_fast32_t;using ::uint_fast64_t;
#line 33
using ::intmax_t;using ::intptr_t;
#line 34
using ::uintmax_t;using ::uintptr_t;
#line 37
namespace tr1 { 
#line 38
using ::int8_t;using ::int16_t;
#line 39
using ::int32_t;using ::int64_t;
#line 40
using ::uint8_t;using ::uint16_t;
#line 41
using ::uint32_t;using ::uint64_t;
#line 43
using ::int_least8_t;using ::int_least16_t;
#line 44
using ::int_least32_t;using ::int_least64_t;
#line 45
using ::uint_least8_t;using ::uint_least16_t;
#line 46
using ::uint_least32_t;using ::uint_least64_t;
#line 48
using ::int_fast8_t;using ::int_fast16_t;
#line 49
using ::int_fast32_t;using ::int_fast64_t;
#line 50
using ::uint_fast8_t;using ::uint_fast16_t;
#line 51
using ::uint_fast32_t;using ::uint_fast64_t;
#line 53
using ::intmax_t;using ::intptr_t;
#line 54
using ::uintmax_t;using ::uintptr_t;
#line 55
}
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
}
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
#pragma warning(push,3)
#line 8
#pragma pack ( push, 8 )
#line 16
extern "C" {
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
void __cdecl _Feraise(int); 
#line 41
typedef 
#line 36
union { 
#line 37
unsigned short _Word[8]; 
#line 38
float _Float; 
#line 39
double _Double; 
#line 40
long double _Long_double; 
#line 41
} _Dconst; 
#line 44
__declspec(dllimport) double __cdecl _Cosh(double, double); 
#line 45
__declspec(dllimport) short __cdecl _Dtest(double *); 
#line 46
__declspec(dllimport) double __cdecl _Sinh(double, double); 
#line 48
__declspec(dllimport) short __cdecl _Exp(double *, double, short); 
#line 49
__declspec(dllimport) extern _Dconst _Denorm, _Hugeval, _Inf, 
#line 50
_Nan, _Snan; 
#line 53
__declspec(dllimport) float __cdecl _FCosh(float, float); 
#line 54
__declspec(dllimport) short __cdecl _FDtest(float *); 
#line 55
__declspec(dllimport) float __cdecl _FSinh(float, float); 
#line 57
__declspec(dllimport) short __cdecl _FExp(float *, float, short); 
#line 58
__declspec(dllimport) extern _Dconst _FDenorm, _FInf, _FNan, _FSnan; 
#line 61
__declspec(dllimport) long double __cdecl _LCosh(long double, long double); 
#line 62
__declspec(dllimport) short __cdecl _LDtest(long double *); 
#line 63
__declspec(dllimport) long double __cdecl _LSinh(long double, long double); 
#line 65
__declspec(dllimport) short __cdecl _LExp(long double *, long double, short); 
#line 66
__declspec(dllimport) extern _Dconst _LDenorm, _LInf, _LNan, _LSnan; 
#line 70
}
#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
#pragma warning(pop)
#pragma pack ( pop )
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
__pragma( pack ( push, 8 )) extern "C" {
#line 226 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
__declspec(dllimport) unsigned __cdecl _clearfp(); 
#line 228
#pragma warning(push)
#pragma warning(disable: 4141)
#line 232
__declspec(dllimport) unsigned __cdecl _controlfp(unsigned _NewValue, unsigned _Mask); 
#line 237
#pragma warning(pop)
#line 240
__declspec(dllimport) void __cdecl _set_controlfp(unsigned _NewValue, unsigned _Mask); 
#line 246
__declspec(dllimport) errno_t __cdecl _controlfp_s(unsigned * _CurrentState, unsigned _NewValue, unsigned _Mask); 
#line 253
__declspec(dllimport) unsigned __cdecl _statusfp(); 
#line 256
__declspec(dllimport) void __cdecl _fpreset(); 
#line 272
__declspec(dllimport) unsigned __cdecl _control87(unsigned _NewValue, unsigned _Mask); 
#line 289
__declspec(dllimport) int *__cdecl __fpecode(); 
#line 294
__declspec(dllimport) int __cdecl __fpe_flt_rounds(); 
#line 307
__declspec(dllimport) double __cdecl _copysign(double _Number, double _Sign); 
#line 308
__declspec(dllimport) double __cdecl _chgsign(double _X); 
#line 309
__declspec(dllimport) double __cdecl _scalb(double _X, long _Y); 
#line 310
__declspec(dllimport) double __cdecl _logb(double _X); 
#line 311
__declspec(dllimport) double __cdecl _nextafter(double _X, double _Y); 
#line 312
__declspec(dllimport) int __cdecl _finite(double _X); 
#line 313
__declspec(dllimport) int __cdecl _isnan(double _X); 
#line 314
__declspec(dllimport) int __cdecl _fpclass(double _X); 
#line 317
__declspec(dllimport) float __cdecl _scalbf(float _X, long _Y); 
#line 334 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
__declspec(dllimport) void __cdecl fpreset(); 
#line 401 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
}__pragma( pack ( pop )) 
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__pragma( pack ( push, 8 )) extern "C" {
#line 26
__declspec(dllimport) errno_t __cdecl _cgetws_s(__wchar_t * _Buffer, size_t _BufferCount, size_t * _SizeRead); 
#line 32
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _cgetws_s(__wchar_t (&_Buffer)[_Size], ::size_t *_SizeRead) throw() { return _cgetws_s(_Buffer, _Size, _SizeRead); } }
#line 40 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__declspec(dllimport) int __cdecl _cputws(const __wchar_t * _Buffer); 
#line 44
__declspec(dllimport) wint_t __cdecl _getwch(); 
#line 45
__declspec(dllimport) wint_t __cdecl _getwche(); 
#line 46
__declspec(dllimport) wint_t __cdecl _putwch(__wchar_t _Character); 
#line 47
__declspec(dllimport) wint_t __cdecl _ungetwch(wint_t _Character); 
#line 49
__declspec(dllimport) wint_t __cdecl _getwch_nolock(); 
#line 50
__declspec(dllimport) wint_t __cdecl _getwche_nolock(); 
#line 51
__declspec(dllimport) wint_t __cdecl _putwch_nolock(__wchar_t _Character); 
#line 52
__declspec(dllimport) wint_t __cdecl _ungetwch_nolock(wint_t _Character); 
#line 62
__declspec(dllimport) int __cdecl __conio_common_vcwprintf(unsigned __int64 _Options, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 70
__declspec(dllimport) int __cdecl __conio_common_vcwprintf_s(unsigned __int64 _Options, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 78
__declspec(dllimport) int __cdecl __conio_common_vcwprintf_p(unsigned __int64 _Options, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 86
__inline int __cdecl _vcwprintf_l(const __wchar_t *const 
#line 87
_Format, const _locale_t 
#line 88
_Locale, va_list 
#line 89
_ArgList) 
#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 95
return __conio_common_vcwprintf(*__local_stdio_printf_options(), _Format, _Locale, _ArgList); 
#line 96
} 
#line 100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwprintf(const __wchar_t *const 
#line 101
_Format, va_list 
#line 102
_ArgList) 
#line 107 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 108
return _vcwprintf_l(_Format, 0, _ArgList); 
#line 109
} 
#line 113 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwprintf_s_l(const __wchar_t *const 
#line 114
_Format, const _locale_t 
#line 115
_Locale, va_list 
#line 116
_ArgList) 
#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 122
return __conio_common_vcwprintf_s(*__local_stdio_printf_options(), _Format, _Locale, _ArgList); 
#line 123
} 
#line 127 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwprintf_s(const __wchar_t *const 
#line 128
_Format, va_list 
#line 129
_ArgList) 
#line 134 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 135
return _vcwprintf_s_l(_Format, 0, _ArgList); 
#line 136
} 
#line 140 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwprintf_p_l(const __wchar_t *const 
#line 141
_Format, const _locale_t 
#line 142
_Locale, va_list 
#line 143
_ArgList) 
#line 148 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 149
return __conio_common_vcwprintf_p(*__local_stdio_printf_options(), _Format, _Locale, _ArgList); 
#line 150
} 
#line 154 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwprintf_p(const __wchar_t *const 
#line 155
_Format, va_list 
#line 156
_ArgList) 
#line 161 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 162
return _vcwprintf_p_l(_Format, 0, _ArgList); 
#line 163
} 
#line 167 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwprintf_l(const __wchar_t *const 
#line 168
_Format, const _locale_t 
#line 169
_Locale, ...) 
#line 174 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 175
int _Result; 
#line 176
va_list _ArgList; 
#line 177
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 178
_Result = _vcwprintf_l(_Format, _Locale, _ArgList); 
#line 179
(void)(_ArgList = ((va_list)0)); 
#line 180
return _Result; 
#line 181
} 
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwprintf(const __wchar_t *const 
#line 186
_Format, ...) 
#line 191 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 192
int _Result; 
#line 193
va_list _ArgList; 
#line 194
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 195
_Result = _vcwprintf_l(_Format, 0, _ArgList); 
#line 196
(void)(_ArgList = ((va_list)0)); 
#line 197
return _Result; 
#line 198
} 
#line 202 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwprintf_s_l(const __wchar_t *const 
#line 203
_Format, const _locale_t 
#line 204
_Locale, ...) 
#line 209 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 210
int _Result; 
#line 211
va_list _ArgList; 
#line 212
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 213
_Result = _vcwprintf_s_l(_Format, _Locale, _ArgList); 
#line 214
(void)(_ArgList = ((va_list)0)); 
#line 215
return _Result; 
#line 216
} 
#line 220 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwprintf_s(const __wchar_t *const 
#line 221
_Format, ...) 
#line 226 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 227
int _Result; 
#line 228
va_list _ArgList; 
#line 229
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 230
_Result = _vcwprintf_s_l(_Format, 0, _ArgList); 
#line 231
(void)(_ArgList = ((va_list)0)); 
#line 232
return _Result; 
#line 233
} 
#line 237 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwprintf_p_l(const __wchar_t *const 
#line 238
_Format, const _locale_t 
#line 239
_Locale, ...) 
#line 244 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 245
int _Result; 
#line 246
va_list _ArgList; 
#line 247
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 248
_Result = _vcwprintf_p_l(_Format, _Locale, _ArgList); 
#line 249
(void)(_ArgList = ((va_list)0)); 
#line 250
return _Result; 
#line 251
} 
#line 255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwprintf_p(const __wchar_t *const 
#line 256
_Format, ...) 
#line 261 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 262
int _Result; 
#line 263
va_list _ArgList; 
#line 264
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 265
_Result = _vcwprintf_p_l(_Format, 0, _ArgList); 
#line 266
(void)(_ArgList = ((va_list)0)); 
#line 267
return _Result; 
#line 268
} 
#line 279 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__declspec(dllimport) int __cdecl __conio_common_vcwscanf(unsigned __int64 _Options, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 287
__inline int __cdecl _vcwscanf_l(const __wchar_t *const 
#line 288
_Format, const _locale_t 
#line 289
_Locale, va_list 
#line 290
_ArgList) 
#line 295 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 296
return __conio_common_vcwscanf(*__local_stdio_scanf_options(), _Format, _Locale, _ArgList); 
#line 299
} 
#line 303 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwscanf(const __wchar_t *const 
#line 304
_Format, va_list 
#line 305
_ArgList) 
#line 310 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#pragma warning(push)
#pragma warning(disable: 4996)
return _vcwscanf_l(_Format, 0, _ArgList); 
#pragma warning(pop)
} 
#line 319 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwscanf_s_l(const __wchar_t *const 
#line 320
_Format, const _locale_t 
#line 321
_Locale, va_list 
#line 322
_ArgList) 
#line 327 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 328
return __conio_common_vcwscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Format, _Locale, _ArgList); 
#line 331
} 
#line 335 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwscanf_s(const __wchar_t *const 
#line 336
_Format, va_list 
#line 337
_ArgList) 
#line 342 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 343
return _vcwscanf_s_l(_Format, 0, _ArgList); 
#line 344
} 
#line 348 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwscanf_l(const __wchar_t *const 
#line 349
_Format, const _locale_t 
#line 350
_Locale, ...) 
#line 355 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 356
int _Result; 
#line 357
va_list _ArgList; 
#line 358
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 360
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = _vcwscanf_l(_Format, _Locale, _ArgList); 
#pragma warning(pop)
#line 365
(void)(_ArgList = ((va_list)0)); 
#line 366
return _Result; 
#line 367
} 
#line 371 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwscanf(const __wchar_t *const 
#line 372
_Format, ...) 
#line 377 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 378
int _Result; 
#line 379
va_list _ArgList; 
#line 380
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 382
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = _vcwscanf_l(_Format, 0, _ArgList); 
#pragma warning(pop)
#line 387
(void)(_ArgList = ((va_list)0)); 
#line 388
return _Result; 
#line 389
} 
#line 393 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwscanf_s_l(const __wchar_t *const 
#line 394
_Format, const _locale_t 
#line 395
_Locale, ...) 
#line 400 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 401
int _Result; 
#line 402
va_list _ArgList; 
#line 403
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 404
_Result = _vcwscanf_s_l(_Format, _Locale, _ArgList); 
#line 405
(void)(_ArgList = ((va_list)0)); 
#line 406
return _Result; 
#line 407
} 
#line 411 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwscanf_s(const __wchar_t *const 
#line 412
_Format, ...) 
#line 417 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 418
int _Result; 
#line 419
va_list _ArgList; 
#line 420
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 421
_Result = _vcwscanf_s_l(_Format, 0, _ArgList); 
#line 422
(void)(_ArgList = ((va_list)0)); 
#line 423
return _Result; 
#line 424
} 
#line 431 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
}__pragma( pack ( pop )) 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__pragma( pack ( push, 8 )) extern "C" {
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) const unsigned short *__cdecl __pctype_func(); 
#line 32
__declspec(dllimport) const wctype_t *__cdecl __pwctype_func(); 
#line 63 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl iswalnum(wint_t _C); 
#line 64
__declspec(dllimport) int __cdecl iswalpha(wint_t _C); 
#line 65
__declspec(dllimport) int __cdecl iswascii(wint_t _C); 
#line 66
__declspec(dllimport) int __cdecl iswblank(wint_t _C); 
#line 67
__declspec(dllimport) int __cdecl iswcntrl(wint_t _C); 
#line 70
__declspec(dllimport) int __cdecl iswdigit(wint_t _C); 
#line 72
__declspec(dllimport) int __cdecl iswgraph(wint_t _C); 
#line 73
__declspec(dllimport) int __cdecl iswlower(wint_t _C); 
#line 74
__declspec(dllimport) int __cdecl iswprint(wint_t _C); 
#line 75
__declspec(dllimport) int __cdecl iswpunct(wint_t _C); 
#line 76
__declspec(dllimport) int __cdecl iswspace(wint_t _C); 
#line 77
__declspec(dllimport) int __cdecl iswupper(wint_t _C); 
#line 78
__declspec(dllimport) int __cdecl iswxdigit(wint_t _C); 
#line 79
__declspec(dllimport) int __cdecl __iswcsymf(wint_t _C); 
#line 80
__declspec(dllimport) int __cdecl __iswcsym(wint_t _C); 
#line 82
__declspec(dllimport) int __cdecl _iswalnum_l(wint_t _C, _locale_t _Locale); 
#line 83
__declspec(dllimport) int __cdecl _iswalpha_l(wint_t _C, _locale_t _Locale); 
#line 84
__declspec(dllimport) int __cdecl _iswblank_l(wint_t _C, _locale_t _Locale); 
#line 85
__declspec(dllimport) int __cdecl _iswcntrl_l(wint_t _C, _locale_t _Locale); 
#line 86
__declspec(dllimport) int __cdecl _iswdigit_l(wint_t _C, _locale_t _Locale); 
#line 87
__declspec(dllimport) int __cdecl _iswgraph_l(wint_t _C, _locale_t _Locale); 
#line 88
__declspec(dllimport) int __cdecl _iswlower_l(wint_t _C, _locale_t _Locale); 
#line 89
__declspec(dllimport) int __cdecl _iswprint_l(wint_t _C, _locale_t _Locale); 
#line 90
__declspec(dllimport) int __cdecl _iswpunct_l(wint_t _C, _locale_t _Locale); 
#line 91
__declspec(dllimport) int __cdecl _iswspace_l(wint_t _C, _locale_t _Locale); 
#line 92
__declspec(dllimport) int __cdecl _iswupper_l(wint_t _C, _locale_t _Locale); 
#line 93
__declspec(dllimport) int __cdecl _iswxdigit_l(wint_t _C, _locale_t _Locale); 
#line 94
__declspec(dllimport) int __cdecl _iswcsymf_l(wint_t _C, _locale_t _Locale); 
#line 95
__declspec(dllimport) int __cdecl _iswcsym_l(wint_t _C, _locale_t _Locale); 
#line 98
__declspec(dllimport) wint_t __cdecl towupper(wint_t _C); 
#line 99
__declspec(dllimport) wint_t __cdecl towlower(wint_t _C); 
#line 100
__declspec(dllimport) int __cdecl iswctype(wint_t _C, wctype_t _Type); 
#line 102
__declspec(dllimport) wint_t __cdecl _towupper_l(wint_t _C, _locale_t _Locale); 
#line 103
__declspec(dllimport) wint_t __cdecl _towlower_l(wint_t _C, _locale_t _Locale); 
#line 104
__declspec(dllimport) int __cdecl _iswctype_l(wint_t _C, wctype_t _Type, _locale_t _Locale); 
#line 108
__declspec(dllimport) int __cdecl isleadbyte(int _C); 
#line 109
__declspec(dllimport) int __cdecl _isleadbyte_l(int _C, _locale_t _Locale); 
#line 111
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using iswctype instea" "d. See online help for details.")) __declspec(dllimport) int __cdecl is_wctype(wint_t _C, wctype_t _Type); 
#line 199 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
}__pragma( pack ( pop )) 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wdirect.h"
__pragma( pack ( push, 8 )) extern "C" {
#line 22
__declspec(dllimport) __declspec(allocator) __wchar_t *__cdecl _wgetcwd(__wchar_t * _DstBuf, int _SizeInWords); 
#line 29
__declspec(dllimport) __declspec(allocator) __wchar_t *__cdecl _wgetdcwd(int _Drive, __wchar_t * _DstBuf, int _SizeInWords); 
#line 41
__declspec(dllimport) int __cdecl _wchdir(const __wchar_t * _Path); 
#line 46
__declspec(dllimport) int __cdecl _wmkdir(const __wchar_t * _Path); 
#line 51
__declspec(dllimport) int __cdecl _wrmdir(const __wchar_t * _Path); 
#line 57
}__pragma( pack ( pop )) 
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__pragma( pack ( push, 8 )) extern "C" {
#line 18
#pragma warning(push)
#pragma warning(disable:4820)
#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
typedef unsigned long _fsize_t; 
#line 38
struct _wfinddata32_t { 
#line 40
unsigned attrib; 
#line 41
__time32_t time_create; 
#line 42
__time32_t time_access; 
#line 43
__time32_t time_write; 
#line 44
_fsize_t size; 
#line 45
__wchar_t name[260]; 
#line 46
}; 
#line 48
struct _wfinddata32i64_t { 
#line 50
unsigned attrib; 
#line 51
__time32_t time_create; 
#line 52
__time32_t time_access; 
#line 53
__time32_t time_write; 
#line 54
__int64 size; 
#line 55
__wchar_t name[260]; 
#line 56
}; 
#line 58
struct _wfinddata64i32_t { 
#line 60
unsigned attrib; 
#line 61
__time64_t time_create; 
#line 62
__time64_t time_access; 
#line 63
__time64_t time_write; 
#line 64
_fsize_t size; 
#line 65
__wchar_t name[260]; 
#line 66
}; 
#line 68
struct _wfinddata64_t { 
#line 70
unsigned attrib; 
#line 71
__time64_t time_create; 
#line 72
__time64_t time_access; 
#line 73
__time64_t time_write; 
#line 74
__int64 size; 
#line 75
__wchar_t name[260]; 
#line 76
}; 
#line 98 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) int __cdecl _waccess(const __wchar_t * _FileName, int _AccessMode); 
#line 104
__declspec(dllimport) errno_t __cdecl _waccess_s(const __wchar_t * _FileName, int _AccessMode); 
#line 110
__declspec(dllimport) int __cdecl _wchmod(const __wchar_t * _FileName, int _Mode); 
#line 116
__declspec(dllimport) int __cdecl _wcreat(const __wchar_t * _FileName, int _PermissionMode); 
#line 123
__declspec(dllimport) intptr_t __cdecl _wfindfirst32(const __wchar_t * _FileName, _wfinddata32_t * _FindData); 
#line 130
__declspec(dllimport) int __cdecl _wfindnext32(intptr_t _FindHandle, _wfinddata32_t * _FindData); 
#line 135
__declspec(dllimport) int __cdecl _wunlink(const __wchar_t * _FileName); 
#line 140
__declspec(dllimport) int __cdecl _wrename(const __wchar_t * _OldFileName, const __wchar_t * _NewFileName); 
#line 145
__declspec(dllimport) errno_t __cdecl _wmktemp_s(__wchar_t * _TemplateName, size_t _SizeInWords); 
#line 150
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wmktemp_s(__wchar_t (&_TemplateName)[_Size]) throw() { return _wmktemp_s(_TemplateName, _Size); } }
#line 156 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) __wchar_t *__cdecl _wmktemp(__wchar_t * _TemplateName); 
#line 163 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) intptr_t __cdecl _wfindfirst32i64(const __wchar_t * _FileName, _wfinddata32i64_t * _FindData); 
#line 170
__declspec(dllimport) intptr_t __cdecl _wfindfirst64i32(const __wchar_t * _FileName, _wfinddata64i32_t * _FindData); 
#line 177
__declspec(dllimport) intptr_t __cdecl _wfindfirst64(const __wchar_t * _FileName, _wfinddata64_t * _FindData); 
#line 184
__declspec(dllimport) int __cdecl _wfindnext32i64(intptr_t _FindHandle, _wfinddata32i64_t * _FindData); 
#line 191
__declspec(dllimport) int __cdecl _wfindnext64i32(intptr_t _FindHandle, _wfinddata64i32_t * _FindData); 
#line 198
__declspec(dllimport) int __cdecl _wfindnext64(intptr_t _FindHandle, _wfinddata64_t * _FindData); 
#line 204
__declspec(dllimport) errno_t __cdecl _wsopen_s(int * _FileHandle, const __wchar_t * _FileName, int _OpenFlag, int _ShareFlag, int _PermissionFlag); 
#line 212
__declspec(dllimport) errno_t __cdecl _wsopen_dispatch(const __wchar_t * _FileName, int _OFlag, int _ShFlag, int _PMode, int * _PFileHandle, int _BSecure); 
#line 227
extern "C++" inline int __cdecl _wopen(const __wchar_t *
#line 228
_FileName, int 
#line 229
_OFlag, int 
#line 230
_PMode = 0) 
#line 232
{ 
#line 233
int _FileHandle; 
#line 235
const errno_t _Result = _wsopen_dispatch(_FileName, _OFlag, 64, _PMode, &_FileHandle, 0); 
#line 236
return (_Result) ? -1 : _FileHandle; 
#line 237
} 
#line 240
extern "C++" inline int __cdecl _wsopen(const __wchar_t *
#line 241
_FileName, int 
#line 242
_OFlag, int 
#line 243
_ShFlag, int 
#line 244
_PMode = 0) 
#line 246
{ 
#line 247
int _FileHandle; 
#line 249
const errno_t _Result = _wsopen_dispatch(_FileName, _OFlag, _ShFlag, _PMode, &_FileHandle, 0); 
#line 250
return (_Result) ? -1 : _FileHandle; 
#line 251
} 
#line 277 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
}
#line 273 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
#pragma warning(pop)
#line 277 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__pragma( pack ( pop )) 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"
__pragma( pack ( push, 8 )) extern "C" {
#line 19
__declspec(dllimport) intptr_t __cdecl _wexecl(const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 24
__declspec(dllimport) intptr_t __cdecl _wexecle(const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 29
__declspec(dllimport) intptr_t __cdecl _wexeclp(const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 34
__declspec(dllimport) intptr_t __cdecl _wexeclpe(const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 39
__declspec(dllimport) intptr_t __cdecl _wexecv(const __wchar_t * _FileName, const __wchar_t *const * _ArgList); 
#line 44
__declspec(dllimport) intptr_t __cdecl _wexecve(const __wchar_t * _FileName, const __wchar_t *const * _ArgList, const __wchar_t *const * _Env); 
#line 50
__declspec(dllimport) intptr_t __cdecl _wexecvp(const __wchar_t * _FileName, const __wchar_t *const * _ArgList); 
#line 55
__declspec(dllimport) intptr_t __cdecl _wexecvpe(const __wchar_t * _FileName, const __wchar_t *const * _ArgList, const __wchar_t *const * _Env); 
#line 61
__declspec(dllimport) intptr_t __cdecl _wspawnl(int _Mode, const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 67
__declspec(dllimport) intptr_t __cdecl _wspawnle(int _Mode, const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 73
__declspec(dllimport) intptr_t __cdecl _wspawnlp(int _Mode, const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 79
__declspec(dllimport) intptr_t __cdecl _wspawnlpe(int _Mode, const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 85
__declspec(dllimport) intptr_t __cdecl _wspawnv(int _Mode, const __wchar_t * _FileName, const __wchar_t *const * _ArgList); 
#line 91
__declspec(dllimport) intptr_t __cdecl _wspawnve(int _Mode, const __wchar_t * _FileName, const __wchar_t *const * _ArgList, const __wchar_t *const * _Env); 
#line 98
__declspec(dllimport) intptr_t __cdecl _wspawnvp(int _Mode, const __wchar_t * _FileName, const __wchar_t *const * _ArgList); 
#line 104
__declspec(dllimport) intptr_t __cdecl _wspawnvpe(int _Mode, const __wchar_t * _FileName, const __wchar_t *const * _ArgList, const __wchar_t *const * _Env); 
#line 111
__declspec(dllimport) int __cdecl _wsystem(const __wchar_t * _Command); 
#line 119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"
}__pragma( pack ( pop )) 
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/types.h"
typedef unsigned short _ino_t; 
#line 18
typedef _ino_t ino_t; 
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/types.h"
typedef unsigned _dev_t; 
#line 30
typedef _dev_t dev_t; 
#line 39 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/types.h"
typedef long _off_t; 
#line 42
typedef _off_t off_t; 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__pragma( pack ( push, 8 )) extern "C" {
#line 17
#pragma warning(push)
#pragma warning(disable:4820)
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
struct _stat32 { 
#line 29
_dev_t st_dev; 
#line 30
_ino_t st_ino; 
#line 31
unsigned short st_mode; 
#line 32
short st_nlink; 
#line 33
short st_uid; 
#line 34
short st_gid; 
#line 35
_dev_t st_rdev; 
#line 36
_off_t st_size; 
#line 37
__time32_t st_atime; 
#line 38
__time32_t st_mtime; 
#line 39
__time32_t st_ctime; 
#line 40
}; 
#line 42
struct _stat32i64 { 
#line 44
_dev_t st_dev; 
#line 45
_ino_t st_ino; 
#line 46
unsigned short st_mode; 
#line 47
short st_nlink; 
#line 48
short st_uid; 
#line 49
short st_gid; 
#line 50
_dev_t st_rdev; 
#line 51
__int64 st_size; 
#line 52
__time32_t st_atime; 
#line 53
__time32_t st_mtime; 
#line 54
__time32_t st_ctime; 
#line 55
}; 
#line 57
struct _stat64i32 { 
#line 59
_dev_t st_dev; 
#line 60
_ino_t st_ino; 
#line 61
unsigned short st_mode; 
#line 62
short st_nlink; 
#line 63
short st_uid; 
#line 64
short st_gid; 
#line 65
_dev_t st_rdev; 
#line 66
_off_t st_size; 
#line 67
__time64_t st_atime; 
#line 68
__time64_t st_mtime; 
#line 69
__time64_t st_ctime; 
#line 70
}; 
#line 72
struct _stat64 { 
#line 74
_dev_t st_dev; 
#line 75
_ino_t st_ino; 
#line 76
unsigned short st_mode; 
#line 77
short st_nlink; 
#line 78
short st_uid; 
#line 79
short st_gid; 
#line 80
_dev_t st_rdev; 
#line 81
__int64 st_size; 
#line 82
__time64_t st_atime; 
#line 83
__time64_t st_mtime; 
#line 84
__time64_t st_ctime; 
#line 85
}; 
#line 90
struct stat { 
#line 92
_dev_t st_dev; 
#line 93
_ino_t st_ino; 
#line 94
unsigned short st_mode; 
#line 95
short st_nlink; 
#line 96
short st_uid; 
#line 97
short st_gid; 
#line 98
_dev_t st_rdev; 
#line 99
_off_t st_size; 
#line 100
time_t st_atime; 
#line 101
time_t st_mtime; 
#line 102
time_t st_ctime; 
#line 103
}; 
#line 157 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__declspec(dllimport) int __cdecl _fstat32(int _FileHandle, struct _stat32 * _Stat); 
#line 162
__declspec(dllimport) int __cdecl _fstat32i64(int _FileHandle, struct _stat32i64 * _Stat); 
#line 167
__declspec(dllimport) int __cdecl _fstat64i32(int _FileHandle, struct _stat64i32 * _Stat); 
#line 172
__declspec(dllimport) int __cdecl _fstat64(int _FileHandle, struct _stat64 * _Stat); 
#line 177
__declspec(dllimport) int __cdecl _stat32(const char * _FileName, struct _stat32 * _Stat); 
#line 182
__declspec(dllimport) int __cdecl _stat32i64(const char * _FileName, struct _stat32i64 * _Stat); 
#line 187
__declspec(dllimport) int __cdecl _stat64i32(const char * _FileName, struct _stat64i32 * _Stat); 
#line 192
__declspec(dllimport) int __cdecl _stat64(const char * _FileName, struct _stat64 * _Stat); 
#line 197
__declspec(dllimport) int __cdecl _wstat32(const __wchar_t * _FileName, struct _stat32 * _Stat); 
#line 202
__declspec(dllimport) int __cdecl _wstat32i64(const __wchar_t * _FileName, struct _stat32i64 * _Stat); 
#line 207
__declspec(dllimport) int __cdecl _wstat64i32(const __wchar_t * _FileName, struct _stat64i32 * _Stat); 
#line 212
__declspec(dllimport) int __cdecl _wstat64(const __wchar_t * _FileName, struct _stat64 * _Stat); 
#line 236
static __inline int __cdecl fstat(const int _FileHandle, struct stat *const _Stat) 
#line 237
{ 
#line 238
typedef char __static_assert_t[(sizeof(struct stat) == sizeof(struct _stat64i32)) != 0]; 
#line 239
return _fstat64i32(_FileHandle, (struct _stat64i32 *)_Stat); 
#line 240
} 
#line 241
static __inline int __cdecl stat(const char *const _FileName, struct stat *const _Stat) 
#line 242
{ 
#line 243
typedef char __static_assert_t[(sizeof(struct stat) == sizeof(struct _stat64i32)) != 0]; 
#line 244
return _stat64i32(_FileName, (struct _stat64i32 *)_Stat); 
#line 245
} 
#line 256 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
}
#line 252 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
#pragma warning(pop)
#line 256 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__pragma( pack ( pop )) 
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__pragma( pack ( push, 8 )) extern "C" {
#line 37
typedef __wchar_t _Wint_t; 
#line 42
__declspec(dllimport) __wchar_t *__cdecl _wsetlocale(int _Category, const __wchar_t * _Locale); 
#line 48
__declspec(dllimport) _locale_t __cdecl _wcreate_locale(int _Category, const __wchar_t * _Locale); 
#line 55
__declspec(dllimport) wint_t __cdecl btowc(int _Ch); 
#line 59
__declspec(dllimport) size_t __cdecl mbrlen(const char * _Ch, size_t _SizeInBytes, mbstate_t * _State); 
#line 65
__declspec(dllimport) size_t __cdecl mbrtowc(__wchar_t * _DstCh, const char * _SrcCh, size_t _SizeInBytes, mbstate_t * _State); 
#line 73
__declspec(dllimport) errno_t __cdecl mbsrtowcs_s(size_t * _Retval, __wchar_t * _Dst, size_t _Size, const char ** _PSrc, size_t _N, mbstate_t * _State); 
#line 82
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl mbsrtowcs_s(::size_t *_Retval, __wchar_t (&_Dest)[_Size], const char **_PSource, ::size_t _Count, ::mbstate_t *_State) throw() { return mbsrtowcs_s(_Retval, _Dest, _Size, _PSource, _Count, _State); } }
#line 92 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__declspec(dllimport) size_t __cdecl mbsrtowcs(__wchar_t * _Dest, const char ** _PSrc, size_t _Count, mbstate_t * _State); 
#line 101 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__declspec(dllimport) errno_t __cdecl wcrtomb_s(size_t * _Retval, char * _Dst, size_t _SizeInBytes, __wchar_t _Ch, mbstate_t * _State); 
#line 109
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl wcrtomb_s(::size_t *_Retval, char (&_Dest)[_Size], __wchar_t _Source, ::mbstate_t *_State) throw() { return wcrtomb_s(_Retval, _Dest, _Size, _Source, _State); } }
#line 118 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__declspec(dllimport) size_t __cdecl wcrtomb(char * _Dest, __wchar_t _Source, mbstate_t * _State); 
#line 126 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__declspec(dllimport) errno_t __cdecl wcsrtombs_s(size_t * _Retval, char * _Dst, size_t _SizeInBytes, const __wchar_t ** _Src, size_t _Size, mbstate_t * _State); 
#line 135
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl wcsrtombs_s(::size_t *_Retval, char (&_Dest)[_Size], const __wchar_t **_PSrc, ::size_t _Count, ::mbstate_t *_State) throw() { return wcsrtombs_s(_Retval, _Dest, _Size, _PSrc, _Count, _State); } }
#line 145 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__declspec(dllimport) size_t __cdecl wcsrtombs(char * _Dest, const __wchar_t ** _PSource, size_t _Count, mbstate_t * _State); 
#line 153 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__declspec(dllimport) int __cdecl wctob(wint_t _WCh); 
#line 164
errno_t __cdecl wmemcpy_s(__wchar_t * _S1, rsize_t _N1, const __wchar_t * _S2, rsize_t _N); 
#line 172
errno_t __cdecl wmemmove_s(__wchar_t * _S1, rsize_t _N1, const __wchar_t * _S2, rsize_t _N); 
#line 181 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__inline int __cdecl fwide(FILE *
#line 182
_F, int 
#line 183
_M) 
#line 185
{ 
#line 186
(void)_F; 
#line 187
return _M; 
#line 188
} 
#line 190
__inline int __cdecl mbsinit(const mbstate_t *
#line 191
_P) 
#line 193
{ 
#line 194
return (_P == (0)) || ((_P->_Wchar) == (0)); 
#line 195
} 
#line 197
__inline const __wchar_t *__cdecl wmemchr(const __wchar_t *
#line 198
_S, __wchar_t 
#line 199
_C, size_t 
#line 200
_N) 
#line 202
{ 
#line 203
for (; (0) < _N; (++_S), (--_N)) { 
#line 204
if ((*_S) == _C) { 
#line 205
return (const __wchar_t *)_S; }  }  
#line 207
return 0; 
#line 208
} 
#line 210
__inline int __cdecl wmemcmp(const __wchar_t *
#line 211
_S1, const __wchar_t *
#line 212
_S2, size_t 
#line 213
_N) 
#line 215
{ 
#line 216
for (; (0) < _N; ((++_S1), (++_S2)), (--_N)) { 
#line 217
if ((*_S1) != (*_S2)) { 
#line 218
return ((*_S1) < (*_S2)) ? -1 : 1; }  }  
#line 220
return 0; 
#line 221
} 
#line 226
__inline __wchar_t *__cdecl wmemcpy(__wchar_t *
#line 227
_S1, const __wchar_t *
#line 228
_S2, size_t 
#line 229
_N) 
#line 231
{ 
#pragma warning(push)
#pragma warning(disable : 4995 4996 6386)
return (__wchar_t *)memcpy(_S1, _S2, _N * sizeof(__wchar_t)); 
#pragma warning(pop)
} 
#line 239
__inline __wchar_t *__cdecl wmemmove(__wchar_t *
#line 240
_S1, const __wchar_t *
#line 241
_S2, size_t 
#line 242
_N) 
#line 244
{ 
#pragma warning(push)
#pragma warning(disable : 4996 6386)
return (__wchar_t *)memmove(_S1, _S2, _N * sizeof(__wchar_t)); 
#pragma warning(pop)
} 
#line 253
__inline __wchar_t *__cdecl wmemset(__wchar_t *
#line 254
_S, __wchar_t 
#line 255
_C, size_t 
#line 256
_N) 
#line 258
{ 
#line 259
__wchar_t *_Su = _S; 
#line 260
for (; (0) < _N; (++_Su), (--_N)) 
#line 261
{ 
#line 262
(*_Su) = _C; 
#line 263
}  
#line 264
return _S; 
#line 265
} 
#line 269
extern "C++" inline __wchar_t *__cdecl wmemchr(__wchar_t *
#line 270
_S, __wchar_t 
#line 271
_C, size_t 
#line 272
_N) 
#line 274
{ 
#line 275
const __wchar_t *const _SC = _S; 
#line 276
return const_cast< __wchar_t *>(wmemchr(_SC, _C, _N)); 
#line 277
} 
#line 285 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
}__pragma( pack ( pop )) 
#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
extern "C" { typedef mbstate_t _Mbstatet; }
#line 19
namespace std { 
#line 22
using ::mbstate_t;using ::tm;using ::wint_t;
#line 24
using ::btowc;using ::fgetwc;using ::fgetws;using ::fputwc;
#line 25
using ::fputws;using ::fwide;using ::fwprintf;
#line 26
using ::fwscanf;using ::getwc;using ::getwchar;
#line 27
using ::mbrlen;using ::mbrtowc;using ::mbsrtowcs;
#line 28
using ::mbsinit;using ::putwc;using ::putwchar;
#line 29
using ::swprintf;using ::swscanf;using ::ungetwc;
#line 30
using ::vfwprintf;using ::vswprintf;using ::vwprintf;
#line 31
using ::wcrtomb;using ::wprintf;using ::wscanf;
#line 32
using ::wcsrtombs;using ::wcstol;using ::wcscat;
#line 33
using ::wcschr;using ::wcscmp;using ::wcscoll;
#line 34
using ::wcscpy;using ::wcscspn;using ::wcslen;
#line 35
using ::wcsncat;using ::wcsncmp;using ::wcsncpy;
#line 36
using ::wcspbrk;using ::wcsrchr;using ::wcsspn;
#line 37
using ::wcstod;using ::wcstoul;using ::wcsstr;
#line 38
using ::wcstok;using ::wcsxfrm;using ::wctob;
#line 39
using ::wmemchr;using ::wmemcmp;using ::wmemcpy;
#line 40
using ::wmemmove;using ::wmemset;using ::wcsftime;
#line 42
using ::vfwscanf;using ::vswscanf;using ::vwscanf;
#line 43
using ::wcstof;using ::wcstold;
#line 44
using ::wcstoll;using ::wcstoull;
#line 45
}
#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
#pragma warning(push,3)
#line 13
#pragma pack ( push, 8 )
#line 18
namespace std { 
#line 57
typedef 
#line 53
enum { 
#line 54
denorm_indeterminate = (-1), 
#line 55
denorm_absent = 0, 
#line 56
denorm_present
#line 57
} float_denorm_style; 
#line 67
typedef 
#line 61
enum { 
#line 62
round_indeterminate = (-1), 
#line 63
round_toward_zero = 0, 
#line 64
round_to_nearest, 
#line 65
round_toward_infinity, 
#line 66
round_toward_neg_infinity
#line 67
} float_round_style; 
#line 70
struct _Num_base { 
#line 72
static constexpr float_denorm_style has_denorm = ((float_denorm_style)denorm_absent); 
#line 73
static constexpr bool has_denorm_loss = ((bool)false); 
#line 74
static constexpr bool has_infinity = ((bool)false); 
#line 75
static constexpr bool has_quiet_NaN = ((bool)false); 
#line 76
static constexpr bool has_signaling_NaN = ((bool)false); 
#line 77
static constexpr bool is_bounded = ((bool)false); 
#line 78
static constexpr bool is_exact = ((bool)false); 
#line 79
static constexpr bool is_iec559 = ((bool)false); 
#line 80
static constexpr bool is_integer = ((bool)false); 
#line 81
static constexpr bool is_modulo = ((bool)false); 
#line 82
static constexpr bool is_signed = ((bool)false); 
#line 83
static constexpr bool is_specialized = ((bool)false); 
#line 84
static constexpr bool tinyness_before = ((bool)false); 
#line 85
static constexpr bool traps = ((bool)false); 
#line 86
static constexpr float_round_style round_style = ((float_round_style)round_toward_zero); 
#line 87
static constexpr int digits = ((int)0); 
#line 88
static constexpr int digits10 = ((int)0); 
#line 90
static constexpr int max_digits10 = ((int)0); 
#line 92
static constexpr int max_exponent = ((int)0); 
#line 93
static constexpr int max_exponent10 = ((int)0); 
#line 94
static constexpr int min_exponent = ((int)0); 
#line 95
static constexpr int min_exponent10 = ((int)0); 
#line 96
static constexpr int radix = ((int)0); 
#line 97
}; 
#line 100
template < class _Ty >
 class numeric_limits
  : public _Num_base
 {
public :
 static constexpr _Ty ( min ) ( ) noexcept
  {
  return ( _Ty ( ) );
  }

 static constexpr _Ty ( max ) ( ) noexcept
  {
  return ( _Ty ( ) );
  }

 static constexpr _Ty lowest ( ) noexcept
  {
  return ( _Ty ( ) );
  }

 static constexpr _Ty epsilon ( ) noexcept
  {
  return ( _Ty ( ) );
  }

 static constexpr _Ty round_error ( ) noexcept
  {
  return ( _Ty ( ) );
  }

 static constexpr _Ty denorm_min ( ) noexcept
  {
  return ( _Ty ( ) );
  }

 static constexpr _Ty infinity ( ) noexcept
  {
  return ( _Ty ( ) );
  }

 static constexpr _Ty quiet_NaN ( ) noexcept
  {
  return ( _Ty ( ) );
  }

 static constexpr _Ty signaling_NaN ( ) noexcept
  {
  return ( _Ty ( ) );
  }
 };
#line 151
template< class _Ty> 
#line 152
class numeric_limits< const _Ty>  : public numeric_limits< _Ty>  { 
#line 155
}; 
#line 157
template< class _Ty> 
#line 158
class numeric_limits< volatile _Ty>  : public numeric_limits< _Ty>  { 
#line 161
}; 
#line 163
template< class _Ty> 
#line 164
class numeric_limits< const volatile _Ty>  : public numeric_limits< _Ty>  { 
#line 167
}; 
#line 170
struct _Num_int_base : public _Num_base { 
#line 173
static constexpr bool is_bounded = ((bool)true); 
#line 174
static constexpr bool is_exact = ((bool)true); 
#line 175
static constexpr bool is_integer = ((bool)true); 
#line 176
static constexpr bool is_modulo = ((bool)true); 
#line 177
static constexpr bool is_specialized = ((bool)true); 
#line 178
static constexpr int radix = ((int)2); 
#line 179
}; 
#line 182
struct _Num_float_base : public _Num_base { 
#line 185
static constexpr float_denorm_style has_denorm = ((float_denorm_style)denorm_present); 
#line 186
static constexpr bool has_denorm_loss = ((bool)true); 
#line 187
static constexpr bool has_infinity = ((bool)true); 
#line 188
static constexpr bool has_quiet_NaN = ((bool)true); 
#line 189
static constexpr bool has_signaling_NaN = ((bool)true); 
#line 190
static constexpr bool is_bounded = ((bool)true); 
#line 191
static constexpr bool is_exact = ((bool)false); 
#line 192
static constexpr bool is_iec559 = ((bool)true); 
#line 193
static constexpr bool is_integer = ((bool)false); 
#line 194
static constexpr bool is_modulo = ((bool)false); 
#line 195
static constexpr bool is_signed = ((bool)true); 
#line 196
static constexpr bool is_specialized = ((bool)true); 
#line 197
static constexpr bool tinyness_before = ((bool)true); 
#line 198
static constexpr bool traps = ((bool)false); 
#line 199
static constexpr float_round_style round_style = ((float_round_style)round_to_nearest); 
#line 200
static constexpr int radix = ((int)2); 
#line 201
}; 
#line 204
template<> class numeric_limits< char>  : public _Num_int_base { 
#line 208
public: typedef char _Ty; 
#line 210
static constexpr _Ty min() noexcept 
#line 211
{ 
#line 212
return -128; 
#line 213
} 
#line 215
static constexpr _Ty max() noexcept 
#line 216
{ 
#line 217
return 127; 
#line 218
} 
#line 220
static constexpr _Ty lowest() noexcept 
#line 221
{ 
#line 222
return min(); 
#line 223
} 
#line 225
static constexpr _Ty epsilon() noexcept 
#line 226
{ 
#line 227
return 0; 
#line 228
} 
#line 230
static constexpr _Ty round_error() noexcept 
#line 231
{ 
#line 232
return 0; 
#line 233
} 
#line 235
static constexpr _Ty denorm_min() noexcept 
#line 236
{ 
#line 237
return 0; 
#line 238
} 
#line 240
static constexpr _Ty infinity() noexcept 
#line 241
{ 
#line 242
return 0; 
#line 243
} 
#line 245
static constexpr _Ty quiet_NaN() noexcept 
#line 246
{ 
#line 247
return 0; 
#line 248
} 
#line 250
static constexpr _Ty signaling_NaN() noexcept 
#line 251
{ 
#line 252
return 0; 
#line 253
} 
#line 255
static constexpr bool is_signed = ((bool)((-128) != 0)); 
#line 256
static constexpr int digits = ((int)(8 - (((-128) != 0) ? 1 : 0))); 
#line 257
static constexpr int digits10 = ((int)(((8 - (((-128) != 0) ? 1 : 0)) * 301L) / (1000))); 
#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 262
template<> class numeric_limits< __wchar_t>  : public _Num_int_base { 
#line 266
public: typedef __wchar_t _Ty; 
#line 268
static constexpr _Ty min() noexcept 
#line 269
{ 
#line 270
return (_Ty)0; 
#line 271
} 
#line 273
static constexpr _Ty max() noexcept 
#line 274
{ 
#line 275
return (_Ty)65535; 
#line 276
} 
#line 278
static constexpr _Ty lowest() noexcept 
#line 279
{ 
#line 280
return min(); 
#line 281
} 
#line 283
static constexpr _Ty epsilon() noexcept 
#line 284
{ 
#line 285
return 0; 
#line 286
} 
#line 288
static constexpr _Ty round_error() noexcept 
#line 289
{ 
#line 290
return 0; 
#line 291
} 
#line 293
static constexpr _Ty denorm_min() noexcept 
#line 294
{ 
#line 295
return 0; 
#line 296
} 
#line 298
static constexpr _Ty infinity() noexcept 
#line 299
{ 
#line 300
return 0; 
#line 301
} 
#line 303
static constexpr _Ty quiet_NaN() noexcept 
#line 304
{ 
#line 305
return 0; 
#line 306
} 
#line 308
static constexpr _Ty signaling_NaN() noexcept 
#line 309
{ 
#line 310
return 0; 
#line 311
} 
#line 313
static constexpr bool is_signed = ((bool)(0 != 0)); 
#line 314
static constexpr int digits = ((int)(((8) * sizeof(__wchar_t)) - ((0 != 0) ? 1 : 0))); 
#line 316 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits10 = ((int)(((((8) * sizeof(__wchar_t)) - ((0 != 0) ? 1 : 0)) * (301L)) / (1000))); 
#line 318 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 321
template<> class numeric_limits< bool>  : public _Num_int_base { 
#line 325
public: typedef bool _Ty; 
#line 327
static constexpr _Ty min() noexcept 
#line 328
{ 
#line 329
return false; 
#line 330
} 
#line 332
static constexpr _Ty max() noexcept 
#line 333
{ 
#line 334
return true; 
#line 335
} 
#line 337
static constexpr _Ty lowest() noexcept 
#line 338
{ 
#line 339
return min(); 
#line 340
} 
#line 342
static constexpr _Ty epsilon() noexcept 
#line 343
{ 
#line 344
return 0; 
#line 345
} 
#line 347
static constexpr _Ty round_error() noexcept 
#line 348
{ 
#line 349
return 0; 
#line 350
} 
#line 352
static constexpr _Ty denorm_min() noexcept 
#line 353
{ 
#line 354
return 0; 
#line 355
} 
#line 357
static constexpr _Ty infinity() noexcept 
#line 358
{ 
#line 359
return 0; 
#line 360
} 
#line 362
static constexpr _Ty quiet_NaN() noexcept 
#line 363
{ 
#line 364
return 0; 
#line 365
} 
#line 367
static constexpr _Ty signaling_NaN() noexcept 
#line 368
{ 
#line 369
return 0; 
#line 370
} 
#line 372
static constexpr bool is_modulo = ((bool)false); 
#line 373
static constexpr bool is_signed = ((bool)false); 
#line 374
static constexpr int digits = ((int)1); 
#line 375
static constexpr int digits10 = ((int)0); 
#line 376
}; 
#line 379
template<> class numeric_limits< signed char>  : public _Num_int_base { 
#line 383
public: typedef signed char _Ty; 
#line 385
static constexpr _Ty min() noexcept 
#line 386
{ 
#line 387
return -128; 
#line 388
} 
#line 390
static constexpr _Ty max() noexcept 
#line 391
{ 
#line 392
return 127; 
#line 393
} 
#line 395
static constexpr _Ty lowest() noexcept 
#line 396
{ 
#line 397
return min(); 
#line 398
} 
#line 400
static constexpr _Ty epsilon() noexcept 
#line 401
{ 
#line 402
return 0; 
#line 403
} 
#line 405
static constexpr _Ty round_error() noexcept 
#line 406
{ 
#line 407
return 0; 
#line 408
} 
#line 410
static constexpr _Ty denorm_min() noexcept 
#line 411
{ 
#line 412
return 0; 
#line 413
} 
#line 415
static constexpr _Ty infinity() noexcept 
#line 416
{ 
#line 417
return 0; 
#line 418
} 
#line 420
static constexpr _Ty quiet_NaN() noexcept 
#line 421
{ 
#line 422
return 0; 
#line 423
} 
#line 425
static constexpr _Ty signaling_NaN() noexcept 
#line 426
{ 
#line 427
return 0; 
#line 428
} 
#line 430
static constexpr bool is_signed = ((bool)true); 
#line 431
static constexpr int digits = ((int)(8 - 1)); 
#line 432
static constexpr int digits10 = ((int)(((8 - 1) * 301L) / (1000))); 
#line 433
}; 
#line 436
template<> class numeric_limits< unsigned char>  : public _Num_int_base { 
#line 440
public: typedef unsigned char _Ty; 
#line 442
static constexpr _Ty min() noexcept 
#line 443
{ 
#line 444
return 0; 
#line 445
} 
#line 447
static constexpr _Ty max() noexcept 
#line 448
{ 
#line 449
return 255; 
#line 450
} 
#line 452
static constexpr _Ty lowest() noexcept 
#line 453
{ 
#line 454
return min(); 
#line 455
} 
#line 457
static constexpr _Ty epsilon() noexcept 
#line 458
{ 
#line 459
return 0; 
#line 460
} 
#line 462
static constexpr _Ty round_error() noexcept 
#line 463
{ 
#line 464
return 0; 
#line 465
} 
#line 467
static constexpr _Ty denorm_min() noexcept 
#line 468
{ 
#line 469
return 0; 
#line 470
} 
#line 472
static constexpr _Ty infinity() noexcept 
#line 473
{ 
#line 474
return 0; 
#line 475
} 
#line 477
static constexpr _Ty quiet_NaN() noexcept 
#line 478
{ 
#line 479
return 0; 
#line 480
} 
#line 482
static constexpr _Ty signaling_NaN() noexcept 
#line 483
{ 
#line 484
return 0; 
#line 485
} 
#line 487
static constexpr bool is_signed = ((bool)false); 
#line 488
static constexpr int digits = ((int)8); 
#line 489
static constexpr int digits10 = ((int)(((8) * 301L) / (1000))); 
#line 490
}; 
#line 493
template<> class numeric_limits< short>  : public _Num_int_base { 
#line 497
public: typedef short _Ty; 
#line 499
static constexpr _Ty min() noexcept 
#line 500
{ 
#line 501
return -32768; 
#line 502
} 
#line 504
static constexpr _Ty max() noexcept 
#line 505
{ 
#line 506
return 32767; 
#line 507
} 
#line 509
static constexpr _Ty lowest() noexcept 
#line 510
{ 
#line 511
return min(); 
#line 512
} 
#line 514
static constexpr _Ty epsilon() noexcept 
#line 515
{ 
#line 516
return 0; 
#line 517
} 
#line 519
static constexpr _Ty round_error() noexcept 
#line 520
{ 
#line 521
return 0; 
#line 522
} 
#line 524
static constexpr _Ty denorm_min() noexcept 
#line 525
{ 
#line 526
return 0; 
#line 527
} 
#line 529
static constexpr _Ty infinity() noexcept 
#line 530
{ 
#line 531
return 0; 
#line 532
} 
#line 534
static constexpr _Ty quiet_NaN() noexcept 
#line 535
{ 
#line 536
return 0; 
#line 537
} 
#line 539
static constexpr _Ty signaling_NaN() noexcept 
#line 540
{ 
#line 541
return 0; 
#line 542
} 
#line 544
static constexpr bool is_signed = ((bool)true); 
#line 545
static constexpr int digits = ((int)(((8) * sizeof(short)) - (1))); 
#line 546
static constexpr int digits10 = ((int)(((((8) * sizeof(short)) - (1)) * (301L)) / (1000))); 
#line 548 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 552
template<> class numeric_limits< unsigned short>  : public _Num_int_base { 
#line 556
public: typedef unsigned short _Ty; 
#line 558
static constexpr _Ty min() noexcept 
#line 559
{ 
#line 560
return 0; 
#line 561
} 
#line 563
static constexpr _Ty max() noexcept 
#line 564
{ 
#line 565
return 65535; 
#line 566
} 
#line 568
static constexpr _Ty lowest() noexcept 
#line 569
{ 
#line 570
return min(); 
#line 571
} 
#line 573
static constexpr _Ty epsilon() noexcept 
#line 574
{ 
#line 575
return 0; 
#line 576
} 
#line 578
static constexpr _Ty round_error() noexcept 
#line 579
{ 
#line 580
return 0; 
#line 581
} 
#line 583
static constexpr _Ty denorm_min() noexcept 
#line 584
{ 
#line 585
return 0; 
#line 586
} 
#line 588
static constexpr _Ty infinity() noexcept 
#line 589
{ 
#line 590
return 0; 
#line 591
} 
#line 593
static constexpr _Ty quiet_NaN() noexcept 
#line 594
{ 
#line 595
return 0; 
#line 596
} 
#line 598
static constexpr _Ty signaling_NaN() noexcept 
#line 599
{ 
#line 600
return 0; 
#line 601
} 
#line 603
static constexpr bool is_signed = ((bool)false); 
#line 604
static constexpr int digits = ((int)((8) * sizeof(unsigned short))); 
#line 605
static constexpr int digits10 = ((int)((((8) * sizeof(unsigned short)) * (301L)) / (1000))); 
#line 607 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 611 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
template<> class numeric_limits< char16_t>  : public _Num_int_base { 
#line 615
public: typedef char16_t _Ty; 
#line 617
static constexpr _Ty min() noexcept 
#line 618
{ 
#line 619
return 0; 
#line 620
} 
#line 622
static constexpr _Ty max() noexcept 
#line 623
{ 
#line 624
return 65535; 
#line 625
} 
#line 627
static constexpr _Ty lowest() noexcept 
#line 628
{ 
#line 629
return min(); 
#line 630
} 
#line 632
static constexpr _Ty epsilon() noexcept 
#line 633
{ 
#line 634
return 0; 
#line 635
} 
#line 637
static constexpr _Ty round_error() noexcept 
#line 638
{ 
#line 639
return 0; 
#line 640
} 
#line 642
static constexpr _Ty denorm_min() noexcept 
#line 643
{ 
#line 644
return 0; 
#line 645
} 
#line 647
static constexpr _Ty infinity() noexcept 
#line 648
{ 
#line 649
return 0; 
#line 650
} 
#line 652
static constexpr _Ty quiet_NaN() noexcept 
#line 653
{ 
#line 654
return 0; 
#line 655
} 
#line 657
static constexpr _Ty signaling_NaN() noexcept 
#line 658
{ 
#line 659
return 0; 
#line 660
} 
#line 662
static constexpr bool is_signed = ((bool)false); 
#line 663
static constexpr int digits = ((int)((8) * sizeof(char16_t))); 
#line 664
static constexpr int digits10 = ((int)((((8) * sizeof(char16_t)) * (301L)) / (1000))); 
#line 666 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 669
template<> class numeric_limits< int>  : public _Num_int_base { 
#line 673
public: typedef int _Ty; 
#line 675
static constexpr _Ty min() noexcept 
#line 676
{ 
#line 677
return (-2147483647) - 1; 
#line 678
} 
#line 680
static constexpr _Ty max() noexcept 
#line 681
{ 
#line 682
return 2147483647; 
#line 683
} 
#line 685
static constexpr _Ty lowest() noexcept 
#line 686
{ 
#line 687
return min(); 
#line 688
} 
#line 690
static constexpr _Ty epsilon() noexcept 
#line 691
{ 
#line 692
return 0; 
#line 693
} 
#line 695
static constexpr _Ty round_error() noexcept 
#line 696
{ 
#line 697
return 0; 
#line 698
} 
#line 700
static constexpr _Ty denorm_min() noexcept 
#line 701
{ 
#line 702
return 0; 
#line 703
} 
#line 705
static constexpr _Ty infinity() noexcept 
#line 706
{ 
#line 707
return 0; 
#line 708
} 
#line 710
static constexpr _Ty quiet_NaN() noexcept 
#line 711
{ 
#line 712
return 0; 
#line 713
} 
#line 715
static constexpr _Ty signaling_NaN() noexcept 
#line 716
{ 
#line 717
return 0; 
#line 718
} 
#line 720
static constexpr bool is_signed = ((bool)true); 
#line 721
static constexpr int digits = ((int)(((8) * sizeof(int)) - (1))); 
#line 722
static constexpr int digits10 = ((int)(((((8) * sizeof(int)) - (1)) * (301L)) / (1000))); 
#line 724 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 727
template<> class numeric_limits< unsigned>  : public _Num_int_base { 
#line 731
public: typedef unsigned _Ty; 
#line 733
static constexpr _Ty min() noexcept 
#line 734
{ 
#line 735
return 0; 
#line 736
} 
#line 738
static constexpr _Ty max() noexcept 
#line 739
{ 
#line 740
return 4294967295U; 
#line 741
} 
#line 743
static constexpr _Ty lowest() noexcept 
#line 744
{ 
#line 745
return min(); 
#line 746
} 
#line 748
static constexpr _Ty epsilon() noexcept 
#line 749
{ 
#line 750
return 0; 
#line 751
} 
#line 753
static constexpr _Ty round_error() noexcept 
#line 754
{ 
#line 755
return 0; 
#line 756
} 
#line 758
static constexpr _Ty denorm_min() noexcept 
#line 759
{ 
#line 760
return 0; 
#line 761
} 
#line 763
static constexpr _Ty infinity() noexcept 
#line 764
{ 
#line 765
return 0; 
#line 766
} 
#line 768
static constexpr _Ty quiet_NaN() noexcept 
#line 769
{ 
#line 770
return 0; 
#line 771
} 
#line 773
static constexpr _Ty signaling_NaN() noexcept 
#line 774
{ 
#line 775
return 0; 
#line 776
} 
#line 778
static constexpr bool is_signed = ((bool)false); 
#line 779
static constexpr int digits = ((int)((8) * sizeof(unsigned))); 
#line 780
static constexpr int digits10 = ((int)((((8) * sizeof(unsigned)) * (301L)) / (1000))); 
#line 782 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 785
template<> class numeric_limits< long>  : public _Num_int_base { 
#line 789
public: typedef long _Ty; 
#line 791
static constexpr _Ty min() noexcept 
#line 792
{ 
#line 793
return (-2147483647L) - (1); 
#line 794
} 
#line 796
static constexpr _Ty max() noexcept 
#line 797
{ 
#line 798
return 2147483647L; 
#line 799
} 
#line 801
static constexpr _Ty lowest() noexcept 
#line 802
{ 
#line 803
return min(); 
#line 804
} 
#line 806
static constexpr _Ty epsilon() noexcept 
#line 807
{ 
#line 808
return 0; 
#line 809
} 
#line 811
static constexpr _Ty round_error() noexcept 
#line 812
{ 
#line 813
return 0; 
#line 814
} 
#line 816
static constexpr _Ty denorm_min() noexcept 
#line 817
{ 
#line 818
return 0; 
#line 819
} 
#line 821
static constexpr _Ty infinity() noexcept 
#line 822
{ 
#line 823
return 0; 
#line 824
} 
#line 826
static constexpr _Ty quiet_NaN() noexcept 
#line 827
{ 
#line 828
return 0; 
#line 829
} 
#line 831
static constexpr _Ty signaling_NaN() noexcept 
#line 832
{ 
#line 833
return 0; 
#line 834
} 
#line 836
static constexpr bool is_signed = ((bool)true); 
#line 837
static constexpr int digits = ((int)(((8) * sizeof(long)) - (1))); 
#line 838
static constexpr int digits10 = ((int)(((((8) * sizeof(long)) - (1)) * (301L)) / (1000))); 
#line 840 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 843
template<> class numeric_limits< unsigned long>  : public _Num_int_base { 
#line 847
public: typedef unsigned long _Ty; 
#line 849
static constexpr _Ty min() noexcept 
#line 850
{ 
#line 851
return 0; 
#line 852
} 
#line 854
static constexpr _Ty max() noexcept 
#line 855
{ 
#line 856
return 4294967295UL; 
#line 857
} 
#line 859
static constexpr _Ty lowest() noexcept 
#line 860
{ 
#line 861
return min(); 
#line 862
} 
#line 864
static constexpr _Ty epsilon() noexcept 
#line 865
{ 
#line 866
return 0; 
#line 867
} 
#line 869
static constexpr _Ty round_error() noexcept 
#line 870
{ 
#line 871
return 0; 
#line 872
} 
#line 874
static constexpr _Ty denorm_min() noexcept 
#line 875
{ 
#line 876
return 0; 
#line 877
} 
#line 879
static constexpr _Ty infinity() noexcept 
#line 880
{ 
#line 881
return 0; 
#line 882
} 
#line 884
static constexpr _Ty quiet_NaN() noexcept 
#line 885
{ 
#line 886
return 0; 
#line 887
} 
#line 889
static constexpr _Ty signaling_NaN() noexcept 
#line 890
{ 
#line 891
return 0; 
#line 892
} 
#line 894
static constexpr bool is_signed = ((bool)false); 
#line 895
static constexpr int digits = ((int)((8) * sizeof(unsigned long))); 
#line 896
static constexpr int digits10 = ((int)((((8) * sizeof(unsigned long)) * (301L)) / (1000))); 
#line 898 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 901
template<> class numeric_limits< char32_t>  : public _Num_int_base { 
#line 905
public: typedef char32_t _Ty; 
#line 907
static constexpr _Ty min() noexcept 
#line 908
{ 
#line 909
return 0; 
#line 910
} 
#line 912
static constexpr _Ty max() noexcept 
#line 913
{ 
#line 914
return 4294967295U; 
#line 915
} 
#line 917
static constexpr _Ty lowest() noexcept 
#line 918
{ 
#line 919
return min(); 
#line 920
} 
#line 922
static constexpr _Ty epsilon() noexcept 
#line 923
{ 
#line 924
return 0; 
#line 925
} 
#line 927
static constexpr _Ty round_error() noexcept 
#line 928
{ 
#line 929
return 0; 
#line 930
} 
#line 932
static constexpr _Ty denorm_min() noexcept 
#line 933
{ 
#line 934
return 0; 
#line 935
} 
#line 937
static constexpr _Ty infinity() noexcept 
#line 938
{ 
#line 939
return 0; 
#line 940
} 
#line 942
static constexpr _Ty quiet_NaN() noexcept 
#line 943
{ 
#line 944
return 0; 
#line 945
} 
#line 947
static constexpr _Ty signaling_NaN() noexcept 
#line 948
{ 
#line 949
return 0; 
#line 950
} 
#line 952
static constexpr bool is_signed = ((bool)false); 
#line 953
static constexpr int digits = ((int)((8) * sizeof(char32_t))); 
#line 954
static constexpr int digits10 = ((int)((((8) * sizeof(char32_t)) * (301L)) / (1000))); 
#line 956 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 959
template<> class numeric_limits< __int64>  : public _Num_int_base { 
#line 963
public: typedef __int64 _Ty; 
#line 965
static constexpr _Ty min() noexcept 
#line 966
{ 
#line 967
return (-9223372036854775807i64) - (1); 
#line 968
} 
#line 970
static constexpr _Ty max() noexcept 
#line 971
{ 
#line 972
return 9223372036854775807i64; 
#line 973
} 
#line 975
static constexpr _Ty lowest() noexcept 
#line 976
{ 
#line 977
return min(); 
#line 978
} 
#line 980
static constexpr _Ty epsilon() noexcept 
#line 981
{ 
#line 982
return 0; 
#line 983
} 
#line 985
static constexpr _Ty round_error() noexcept 
#line 986
{ 
#line 987
return 0; 
#line 988
} 
#line 990
static constexpr _Ty denorm_min() noexcept 
#line 991
{ 
#line 992
return 0; 
#line 993
} 
#line 995
static constexpr _Ty infinity() noexcept 
#line 996
{ 
#line 997
return 0; 
#line 998
} 
#line 1000
static constexpr _Ty quiet_NaN() noexcept 
#line 1001
{ 
#line 1002
return 0; 
#line 1003
} 
#line 1005
static constexpr _Ty signaling_NaN() noexcept 
#line 1006
{ 
#line 1007
return 0; 
#line 1008
} 
#line 1010
static constexpr bool is_signed = ((bool)true); 
#line 1011
static constexpr int digits = ((int)(((8) * sizeof(__int64)) - (1))); 
#line 1012
static constexpr int digits10 = ((int)(((((8) * sizeof(__int64)) - (1)) * (301L)) / (1000))); 
#line 1014 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 1017
template<> class numeric_limits< unsigned __int64>  : public _Num_int_base { 
#line 1021
public: typedef unsigned __int64 _Ty; 
#line 1023
static constexpr _Ty min() noexcept 
#line 1024
{ 
#line 1025
return 0; 
#line 1026
} 
#line 1028
static constexpr _Ty max() noexcept 
#line 1029
{ 
#line 1030
return 18446744073709551615Ui64; 
#line 1031
} 
#line 1033
static constexpr _Ty lowest() noexcept 
#line 1034
{ 
#line 1035
return min(); 
#line 1036
} 
#line 1038
static constexpr _Ty epsilon() noexcept 
#line 1039
{ 
#line 1040
return 0; 
#line 1041
} 
#line 1043
static constexpr _Ty round_error() noexcept 
#line 1044
{ 
#line 1045
return 0; 
#line 1046
} 
#line 1048
static constexpr _Ty denorm_min() noexcept 
#line 1049
{ 
#line 1050
return 0; 
#line 1051
} 
#line 1053
static constexpr _Ty infinity() noexcept 
#line 1054
{ 
#line 1055
return 0; 
#line 1056
} 
#line 1058
static constexpr _Ty quiet_NaN() noexcept 
#line 1059
{ 
#line 1060
return 0; 
#line 1061
} 
#line 1063
static constexpr _Ty signaling_NaN() noexcept 
#line 1064
{ 
#line 1065
return 0; 
#line 1066
} 
#line 1068
static constexpr bool is_signed = ((bool)false); 
#line 1069
static constexpr int digits = ((int)((8) * sizeof(unsigned __int64))); 
#line 1070
static constexpr int digits10 = ((int)((((8) * sizeof(unsigned __int64)) * (301L)) / (1000))); 
#line 1072 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 1075
template<> class numeric_limits< float>  : public _Num_float_base { 
#line 1079
public: typedef float _Ty; 
#line 1081
static constexpr _Ty min() noexcept 
#line 1082
{ 
#line 1083
return (1.175494351e-038F); 
#line 1084
} 
#line 1086
static constexpr _Ty max() noexcept 
#line 1087
{ 
#line 1088
return (3.402823466e+038F); 
#line 1089
} 
#line 1091
static constexpr _Ty lowest() noexcept 
#line 1092
{ 
#line 1093
return -max(); 
#line 1094
} 
#line 1096
static constexpr _Ty epsilon() noexcept 
#line 1097
{ 
#line 1098
return (1.192092896e-007F); 
#line 1099
} 
#line 1101
static constexpr _Ty round_error() noexcept 
#line 1102
{ 
#line 1103
return (0.5F); 
#line 1104
} 
#line 1106
static constexpr _Ty denorm_min() noexcept 
#line 1107
{ 
#line 1108
return (1.401298464e-045F); 
#line 1109
} 
#line 1111
static constexpr _Ty infinity() noexcept 
#line 1112
{ 
#line 1113
return __builtin_huge_valf(); 
#line 1114
} 
#line 1116
static constexpr _Ty quiet_NaN() noexcept 
#line 1117
{ 
#line 1118
return __builtin_nanf("0"); 
#line 1119
} 
#line 1121
static constexpr _Ty signaling_NaN() noexcept 
#line 1122
{ 
#line 1123
return __builtin_nansf("1"); 
#line 1124
} 
#line 1126
static constexpr int digits = ((int)24); 
#line 1127
static constexpr int digits10 = ((int)6); 
#line 1129
static constexpr int max_digits10 = ((int)((2) + (((24) * 301L) / (1000)))); 
#line 1131
static constexpr int max_exponent = ((int)((int)128)); 
#line 1132
static constexpr int max_exponent10 = ((int)((int)38)); 
#line 1133
static constexpr int min_exponent = ((int)((int)(-125))); 
#line 1134
static constexpr int min_exponent10 = ((int)((int)(-37))); 
#line 1135
}; 
#line 1138
template<> class numeric_limits< double>  : public _Num_float_base { 
#line 1142
public: typedef double _Ty; 
#line 1144
static constexpr _Ty min() noexcept 
#line 1145
{ 
#line 1146
return (2.2250738585072014e-308); 
#line 1147
} 
#line 1149
static constexpr _Ty max() noexcept 
#line 1150
{ 
#line 1151
return (1.7976931348623157e+308); 
#line 1152
} 
#line 1154
static constexpr _Ty lowest() noexcept 
#line 1155
{ 
#line 1156
return -max(); 
#line 1157
} 
#line 1159
static constexpr _Ty epsilon() noexcept 
#line 1160
{ 
#line 1161
return (2.2204460492503131e-016); 
#line 1162
} 
#line 1164
static constexpr _Ty round_error() noexcept 
#line 1165
{ 
#line 1166
return (0.5); 
#line 1167
} 
#line 1169
static constexpr _Ty denorm_min() noexcept 
#line 1170
{ 
#line 1171
return (4.9406564584124654e-324); 
#line 1172
} 
#line 1174
static constexpr _Ty infinity() noexcept 
#line 1175
{ 
#line 1176
return __builtin_huge_val(); 
#line 1177
} 
#line 1179
static constexpr _Ty quiet_NaN() noexcept 
#line 1180
{ 
#line 1181
return __builtin_nan("0"); 
#line 1182
} 
#line 1184
static constexpr _Ty signaling_NaN() noexcept 
#line 1185
{ 
#line 1186
return __builtin_nans("1"); 
#line 1187
} 
#line 1189
static constexpr int digits = ((int)53); 
#line 1190
static constexpr int digits10 = ((int)15); 
#line 1192
static constexpr int max_digits10 = ((int)((2) + (((53) * 301L) / (1000)))); 
#line 1194
static constexpr int max_exponent = ((int)((int)1024)); 
#line 1195
static constexpr int max_exponent10 = ((int)((int)308)); 
#line 1196
static constexpr int min_exponent = ((int)((int)(-1021))); 
#line 1197
static constexpr int min_exponent10 = ((int)((int)(-307))); 
#line 1198
}; 
#line 1201
template<> class numeric_limits< long double>  : public _Num_float_base { 
#line 1205
public: typedef long double _Ty; 
#line 1207
static constexpr _Ty min() noexcept 
#line 1208
{ 
#line 1209
return (2.2250738585072014e-308); 
#line 1210
} 
#line 1212
static constexpr _Ty max() noexcept 
#line 1213
{ 
#line 1214
return (1.7976931348623157e+308); 
#line 1215
} 
#line 1217
static constexpr _Ty lowest() noexcept 
#line 1218
{ 
#line 1219
return -max(); 
#line 1220
} 
#line 1222
static constexpr _Ty epsilon() noexcept 
#line 1223
{ 
#line 1224
return (2.2204460492503131e-016); 
#line 1225
} 
#line 1227
static constexpr _Ty round_error() noexcept 
#line 1228
{ 
#line 1229
return (0.5L); 
#line 1230
} 
#line 1232
static constexpr _Ty denorm_min() noexcept 
#line 1233
{ 
#line 1234
return (4.9406564584124654e-324); 
#line 1235
} 
#line 1237
static constexpr _Ty infinity() noexcept 
#line 1238
{ 
#line 1239
return __builtin_huge_val(); 
#line 1240
} 
#line 1242
static constexpr _Ty quiet_NaN() noexcept 
#line 1243
{ 
#line 1244
return __builtin_nan("0"); 
#line 1245
} 
#line 1247
static constexpr _Ty signaling_NaN() noexcept 
#line 1248
{ 
#line 1249
return __builtin_nans("1"); 
#line 1250
} 
#line 1252
static constexpr int digits = ((int)53); 
#line 1253
static constexpr int digits10 = ((int)15); 
#line 1255
static constexpr int max_digits10 = ((int)((2) + (((53) * 301L) / (1000)))); 
#line 1257
static constexpr int max_exponent = ((int)((int)1024)); 
#line 1258
static constexpr int max_exponent10 = ((int)((int)308)); 
#line 1259
static constexpr int min_exponent = ((int)((int)(-1021))); 
#line 1260
static constexpr int min_exponent10 = ((int)((int)(-307))); 
#line 1261
}; 
#line 1481 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}
#line 1483
#pragma warning(pop)
#pragma pack ( pop )
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
extern "C++" {
#line 17
#pragma warning(push)
#pragma warning(disable: 4985)
#line 15
#pragma pack ( push, 8 )
#line 25
namespace std { 
#line 27
struct nothrow_t { }; 
#line 29
extern const nothrow_t nothrow; 
#line 30
}
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
__declspec(allocator) void *__cdecl operator new(size_t _Size); 
#line 39
__declspec(allocator) void *__cdecl operator new(size_t _Size, const std::nothrow_t &) throw(); 
#line 45
__declspec(allocator) void *__cdecl operator new[](size_t _Size); 
#line 50
__declspec(allocator) void *__cdecl operator new[](size_t _Size, const std::nothrow_t &) throw(); 
#line 55
void __cdecl operator delete(void * _Block) throw(); 
#line 59
void __cdecl operator delete(void * _Block, const std::nothrow_t &) throw(); 
#line 64
void __cdecl operator delete[](void * _Block) throw(); 
#line 68
void __cdecl operator delete[](void * _Block, const std::nothrow_t &) throw(); 
#line 73
void __cdecl operator delete(void * _Block, size_t _Size) throw(); 
#line 78
void __cdecl operator delete[](void * _Block, size_t _Size) throw(); 
#line 86
inline void *__cdecl operator new(size_t _Size, void *_Where) throw() 
#line 87
{ 
#line 88
(void)_Size; 
#line 89
return _Where; 
#line 90
} 
#line 92
inline void __cdecl operator delete(void *, void *) throw() 
#line 93
{ 
#line 95
} 
#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
inline void *__cdecl operator new[](size_t _Size, void *_Where) throw() 
#line 102
{ 
#line 103
(void)_Size; 
#line 104
return _Where; 
#line 105
} 
#line 107
inline void __cdecl operator delete[](void *, void *) throw() 
#line 108
{ 
#line 109
} 
#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
}
#line 114
#pragma warning(pop)
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\new"
#pragma warning(push,3)
#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
#pragma pack ( pop )
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\new"
#pragma pack ( push, 8 )
#line 17
namespace std { 
#line 22
typedef void (__cdecl *new_handler)(void); 
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\new"
__declspec(dllimport) new_handler __cdecl set_new_handler(new_handler) noexcept; 
#line 29
__declspec(dllimport) new_handler __cdecl get_new_handler() noexcept; 
#line 31
}
#line 34
#pragma warning(pop)
#pragma pack ( pop )
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new_debug.h"
extern "C++" {
#line 15
#pragma pack ( push, 8 )
#line 23
__declspec(allocator) void *__cdecl operator new(size_t _Size, int _BlockUse, const char * _FileName, int _LineNumber); 
#line 31
__declspec(allocator) void *__cdecl operator new[](size_t _Size, int _BlockUse, const char * _FileName, int _LineNumber); 
#line 38
void __cdecl operator delete(void * _Block, int _BlockUse, const char * _FileName, int _LineNumber) throw(); 
#line 45
void __cdecl operator delete[](void * _Block, int _BlockUse, const char * _FileName, int _LineNumber) throw(); 
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new_debug.h"
}
#line 56
#pragma pack ( pop )
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__pragma( pack ( push, 8 )) extern "C" {
#line 18
typedef void *_HFILE; 
#line 44
typedef int (__cdecl *_CRT_REPORT_HOOK)(int, char *, int *); 
#line 45
typedef int (__cdecl *_CRT_REPORT_HOOKW)(int, __wchar_t *, int *); 
#line 51
typedef int (__cdecl *_CRT_ALLOC_HOOK)(int, void *, size_t, int, long, const unsigned char *, int); 
#line 107
typedef void (__cdecl *_CRT_DUMP_CLIENT)(void *, size_t); 
#line 113
struct _CrtMemBlockHeader; 
#line 122
typedef 
#line 115
struct _CrtMemState { 
#line 117
_CrtMemBlockHeader *pBlockHeader; 
#line 118
size_t lCounts[5]; 
#line 119
size_t lSizes[5]; 
#line 120
size_t lHighWaterCount; 
#line 121
size_t lTotalCount; 
#line 122
} _CrtMemState; 
#line 808 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
}
#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
#pragma warning(push,3)
#line 808 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__pragma( pack ( pop )) 
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
#pragma pack ( push, 8 )
#line 18
namespace std { 
#line 21
typedef _Longlong streamoff; 
#line 22
typedef _Longlong streamsize; 
#line 31
__declspec(dllimport) extern const streamoff _BADOFF; 
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template < class _Statetype >
 class fpos
 {
 typedef fpos < _Statetype > _Myt;

public :
  fpos ( streamoff _Off = 0 )
  : _Myoff ( _Off ), _Fpos ( 0 ), _Mystate ( )
  {
  }

  fpos ( _Statetype _State, fpos_t _Fileposition )
  : _Myoff ( 0 ), _Fpos ( _Fileposition ), _Mystate ( _State )
  {
  }

 _Statetype state ( ) const
  {
  return ( _Mystate );
  }

 void state ( _Statetype _State )
  {
  _Mystate = _State;
  }

 fpos_t seekpos ( ) const
  {
  return ( _Fpos );
  }

  operator streamoff ( ) const
  {
  return ( ( streamoff ) ( _Myoff + ( ( long long ) ( _Fpos ) ) ) );
  }

 streamoff operator - ( const _Myt & _Right ) const
  {
  return ( ( streamoff ) * this - ( streamoff ) _Right );
  }

 _Myt & operator += ( streamoff _Off )
  {
  _Myoff += _Off;
  return ( * this );
  }

 _Myt & operator -= ( streamoff _Off )
  {
  _Myoff -= _Off;
  return ( * this );
  }

 _Myt operator + ( streamoff _Off ) const
  {
  _Myt _Tmp = * this;
  return ( _Tmp += _Off );
  }

 _Myt operator - ( streamoff _Off ) const
  {
  _Myt _Tmp = * this;
  return ( _Tmp -= _Off );
  }

 bool operator == ( const _Myt & _Right ) const
  {
  return ( ( streamoff ) * this == ( streamoff ) _Right );
  }

 bool operator == ( streamoff _Right ) const
  {
  return ( ( streamoff ) * this == _Right );
  }

 bool operator != ( const _Myt & _Right ) const
  {
  return ( ! ( * this == _Right ) );
  }

private :
 streamoff _Myoff;
 fpos_t _Fpos;
 _Statetype _Mystate;
 };
#line 126
typedef fpos< _Mbstatet>  streampos; 
#line 128
typedef streampos wstreampos; 
#line 131
template < class _Elem,
 class _Int_type >
 struct _Char_traits
 {
 typedef _Elem char_type;
 typedef _Int_type int_type;
 typedef streampos pos_type;
 typedef streamoff off_type;
 typedef _Mbstatet state_type;

 static int __cdecl compare (
    const _Elem * _First1,
    const _Elem * _First2, size_t _Count )
  {
  for (; 0 < _Count; -- _Count, ++ _First1, ++ _First2 )
   if ( ! eq ( * _First1, * _First2 ) )
    return ( lt ( * _First1, * _First2 ) ? - 1 : + 1 );
  return ( 0 );
  }

 static size_t __cdecl length ( const _Elem * _First )
  {
  size_t _Count;
  for ( _Count = 0; ! eq ( * _First, _Elem ( ) ); ++ _First )
   ++ _Count;
  return ( _Count );
  }

 static _Elem * __cdecl copy (
    _Elem * _First1,
    const _Elem * _First2, size_t _Count )
  {
  _Elem * _Next = _First1;
  for (; 0 < _Count; -- _Count, ++ _Next, ++ _First2 )
   assign ( * _Next, * _First2 );
  return ( _First1 );
  }

 static _Elem * __cdecl _Copy_s (
    _Elem * _First1, size_t _Dest_size,
    const _Elem * _First2, size_t _Count )
  {
  { if ( ! ( _Count <= _Dest_size ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo_noreturn ( ); return ( 0 ); } };
  return ( copy ( _First1, _First2, _Count ) );
  }

 static const _Elem * __cdecl find (
    const _Elem * _First,
  size_t _Count, const _Elem & _Ch )
  {
  for (; 0 < _Count; -- _Count, ++ _First )
   if ( eq ( * _First, _Ch ) )
    return ( _First );
  return ( 0 );
  }

 static _Elem * __cdecl move (
    _Elem * _First1,
    const _Elem * _First2, size_t _Count )
  {
  _Elem * _Next = _First1;
  if ( _First2 < _Next && _Next < _First2 + _Count )
   for ( _Next += _Count, _First2 += _Count; 0 < _Count; -- _Count )
    assign ( * -- _Next, * -- _First2 );
  else
   for (; 0 < _Count; -- _Count, ++ _Next, ++ _First2 )
    assign ( * _Next, * _First2 );
  return ( _First1 );
  }

 static _Elem * __cdecl assign (
    _Elem * _First,
  size_t _Count, _Elem _Ch )
  {
  _Elem * _Next = _First;
  for (; 0 < _Count; -- _Count, ++ _Next )
   assign ( * _Next, _Ch );
  return ( _First );
  }

 static void __cdecl assign ( _Elem & _Left, const _Elem & _Right ) noexcept
  {
  _Left = _Right;
  }

 static constexpr bool __cdecl eq ( const _Elem & _Left,
  const _Elem & _Right ) noexcept
  {
  return ( _Left == _Right );
  }

 static constexpr bool __cdecl lt ( const _Elem & _Left,
  const _Elem & _Right ) noexcept
  {
  return ( _Left < _Right );
  }

 static constexpr _Elem __cdecl to_char_type (
  const int_type & _Meta ) noexcept
  {
  return ( ( _Elem ) _Meta );
  }

 static constexpr int_type __cdecl to_int_type (
  const _Elem & _Ch ) noexcept
  {
  return ( ( int_type ) _Ch );
  }

 static constexpr bool __cdecl eq_int_type ( const int_type & _Left,
  const int_type & _Right ) noexcept
  {
  return ( _Left == _Right );
  }

 static constexpr int_type __cdecl not_eof (
  const int_type & _Meta ) noexcept
  {
  return ( _Meta != eof ( ) ? ( int_type ) _Meta : ( int_type ) ! eof ( ) );
  }

 static constexpr int_type __cdecl eof ( ) noexcept
  {
  return ( ( int_type ) ( - 1 ) );
  }
 };
#line 259
template< class _Elem> 
#line 260
struct char_traits : public _Char_traits< _Elem, long>  { 
#line 263
}; 
#line 267
template<> struct char_traits< char16_t>  : public _Char_traits< char16_t, unsigned short>  { 
#line 270
}; 
#line 272
typedef streampos u16streampos; 
#line 276
template<> struct char_traits< char32_t>  : public _Char_traits< char32_t, unsigned>  { 
#line 279
}; 
#line 281
typedef streampos u32streampos; 
#line 285
template<> struct char_traits< __wchar_t>  { 
#line 287
typedef __wchar_t _Elem; 
#line 288
typedef _Elem char_type; 
#line 289
typedef wint_t int_type; 
#line 290
typedef streampos pos_type; 
#line 291
typedef streamoff off_type; 
#line 292
typedef _Mbstatet state_type; 
#line 294
static int __cdecl compare(const _Elem *_First1, const _Elem *_First2, size_t 
#line 295
_Count) 
#line 296
{ 
#line 297
return (_Count == (0)) ? 0 : ::wmemcmp(_First1, _First2, _Count); 
#line 299
} 
#line 301
static size_t __cdecl length(const _Elem *_First) 
#line 302
{ 
#line 303
return ((*_First) == 0) ? 0 : ::wcslen(_First); 
#line 305
} 
#line 307
static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2, size_t 
#line 308
_Count) 
#line 309
{ 
#line 310
return (_Count == (0)) ? _First1 : ((_Elem *)::wmemcpy(_First1, _First2, _Count)); 
#line 312
} 
#line 314
static _Elem *__cdecl _Copy_s(_Elem *
#line 315
_First1, size_t _Size_in_words, const _Elem *
#line 316
_First2, size_t _Count) 
#line 317
{ 
#line 318
if ((0) < _Count) { 
#line 319
::wmemcpy_s(_First1, _Size_in_words, _First2, _Count); }  
#line 320
return _First1; 
#line 321
} 
#line 323
static const _Elem *__cdecl find(const _Elem *_First, size_t _Count, const _Elem &
#line 324
_Ch) 
#line 325
{ 
#line 326
return (_Count == (0)) ? (const _Elem *)0 : ((const _Elem *)::wmemchr(_First, _Ch, _Count)); 
#line 328
} 
#line 330
static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2, size_t 
#line 331
_Count) 
#line 332
{ 
#line 333
return (_Count == (0)) ? _First1 : ((_Elem *)::wmemmove(_First1, _First2, _Count)); 
#line 335
} 
#line 337
static _Elem *__cdecl assign(_Elem *_First, size_t _Count, _Elem 
#line 338
_Ch) 
#line 339
{ 
#line 340
return (_Elem *)::wmemset(_First, _Ch, _Count); 
#line 341
} 
#line 343
static void __cdecl assign(_Elem &_Left, const _Elem &_Right) noexcept 
#line 344
{ 
#line 345
_Left = _Right; 
#line 346
} 
#line 348
static constexpr bool __cdecl eq(const _Elem &_Left, const _Elem &
#line 349
_Right) noexcept 
#line 350
{ 
#line 351
return _Left == _Right; 
#line 352
} 
#line 354
static constexpr bool __cdecl lt(const _Elem &_Left, const _Elem &
#line 355
_Right) noexcept 
#line 356
{ 
#line 357
return _Left < _Right; 
#line 358
} 
#line 360
static constexpr _Elem __cdecl to_char_type(const int_type &
#line 361
_Meta) noexcept 
#line 362
{ 
#line 363
return _Meta; 
#line 364
} 
#line 366
static constexpr int_type __cdecl to_int_type(const _Elem &
#line 367
_Ch) noexcept 
#line 368
{ 
#line 369
return _Ch; 
#line 370
} 
#line 372
static constexpr bool __cdecl eq_int_type(const int_type &_Left, const int_type &
#line 373
_Right) noexcept 
#line 374
{ 
#line 375
return _Left == _Right; 
#line 376
} 
#line 378
static constexpr int_type __cdecl not_eof(const int_type &
#line 379
_Meta) noexcept 
#line 380
{ 
#line 381
return (_Meta != (eof())) ? _Meta : (!(eof())); 
#line 382
} 
#line 384
static constexpr int_type __cdecl eof() noexcept 
#line 385
{ 
#line 386
return (wint_t)65535; 
#line 387
} 
#line 388
}; 
#line 393
template<> struct char_traits< unsigned short>  { 
#line 395
typedef unsigned short _Elem; 
#line 396
typedef _Elem char_type; 
#line 397
typedef wint_t int_type; 
#line 398
typedef streampos pos_type; 
#line 399
typedef streamoff off_type; 
#line 400
typedef _Mbstatet state_type; 
#line 402
static int __cdecl compare(const _Elem *_First1, const _Elem *_First2, size_t 
#line 403
_Count) 
#line 404
{ 
#line 405
return (_Count == (0)) ? 0 : ::wmemcmp((const __wchar_t *)_First1, (const __wchar_t *)_First2, _Count); 
#line 408
} 
#line 410
static size_t __cdecl length(const _Elem *_First) 
#line 411
{ 
#line 412
return ((*_First) == 0) ? 0 : ::wcslen((const __wchar_t *)_First); 
#line 414
} 
#line 416
static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2, size_t 
#line 417
_Count) 
#line 418
{ 
#line 419
return (_Count == (0)) ? _First1 : ((_Elem *)::wmemcpy((__wchar_t *)_First1, (const __wchar_t *)_First2, _Count)); 
#line 422
} 
#line 424
static _Elem *__cdecl _Copy_s(_Elem *
#line 425
_First1, size_t _Size_in_words, const _Elem *
#line 426
_First2, size_t _Count) 
#line 427
{ 
#line 428
if ((0) < _Count) { 
#line 429
::wmemcpy_s((__wchar_t *)_First1, _Size_in_words, (const __wchar_t *)_First2, _Count); }  
#line 431 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return _First1; 
#line 432
} 
#line 434
static const _Elem *__cdecl find(const _Elem *_First, size_t _Count, const _Elem &
#line 435
_Ch) 
#line 436
{ 
#line 437
return (_Count == (0)) ? (const _Elem *)0 : ((const _Elem *)::wmemchr((const __wchar_t *)_First, _Ch, _Count)); 
#line 440
} 
#line 442
static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2, size_t 
#line 443
_Count) 
#line 444
{ 
#line 445
return (_Count == (0)) ? _First1 : ((_Elem *)::wmemmove((__wchar_t *)_First1, (const __wchar_t *)_First2, _Count)); 
#line 448
} 
#line 450
static _Elem *__cdecl assign(_Elem *_First, size_t _Count, _Elem 
#line 451
_Ch) 
#line 452
{ 
#line 453
return (_Elem *)::wmemset((__wchar_t *)_First, _Ch, _Count); 
#line 454
} 
#line 456
static void __cdecl assign(_Elem &_Left, const _Elem &_Right) noexcept 
#line 457
{ 
#line 458
_Left = _Right; 
#line 459
} 
#line 461
static constexpr bool __cdecl eq(const _Elem &_Left, const _Elem &
#line 462
_Right) noexcept 
#line 463
{ 
#line 464
return _Left == _Right; 
#line 465
} 
#line 467
static constexpr bool __cdecl lt(const _Elem &_Left, const _Elem &
#line 468
_Right) noexcept 
#line 469
{ 
#line 470
return _Left < _Right; 
#line 471
} 
#line 473
static constexpr _Elem __cdecl to_char_type(const int_type &_Meta) noexcept 
#line 475
{ 
#line 476
return _Meta; 
#line 477
} 
#line 479
static constexpr int_type __cdecl to_int_type(const _Elem &_Ch) noexcept 
#line 481
{ 
#line 482
return _Ch; 
#line 483
} 
#line 485
static constexpr bool __cdecl eq_int_type(const int_type &_Left, const int_type &
#line 486
_Right) noexcept 
#line 487
{ 
#line 488
return _Left == _Right; 
#line 489
} 
#line 491
static constexpr int_type __cdecl not_eof(const int_type &_Meta) noexcept 
#line 493
{ 
#line 494
return (_Meta != (eof())) ? _Meta : (!(eof())); 
#line 495
} 
#line 497
static constexpr int_type __cdecl eof() noexcept 
#line 498
{ 
#line 499
return (wint_t)65535; 
#line 500
} 
#line 501
}; 
#line 505 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template<> struct char_traits< char>  { 
#line 507
typedef char _Elem; 
#line 508
typedef _Elem char_type; 
#line 509
typedef int int_type; 
#line 510
typedef streampos pos_type; 
#line 511
typedef streamoff off_type; 
#line 512
typedef _Mbstatet state_type; 
#line 514
static int __cdecl compare(const _Elem *_First1, const _Elem *_First2, size_t 
#line 515
_Count) 
#line 516
{ 
#line 517
return (_Count == (0)) ? 0 : ::memcmp(_First1, _First2, _Count); 
#line 519
} 
#line 521
static size_t __cdecl length(const _Elem *_First) 
#line 522
{ 
#line 523
return ((*_First) == 0) ? 0 : ::strlen(_First); 
#line 525
} 
#line 527
static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2, size_t 
#line 528
_Count) 
#line 529
{ 
#line 530
return (_Count == (0)) ? _First1 : ((_Elem *)::memcpy(_First1, _First2, _Count)); 
#line 532
} 
#line 534
static _Elem *__cdecl _Copy_s(_Elem *
#line 535
_First1, size_t _Size_in_bytes, const _Elem *
#line 536
_First2, size_t _Count) 
#line 537
{ 
#line 538
if ((0) < _Count) { 
#line 539
::memcpy_s(_First1, _Size_in_bytes, _First2, _Count); }  
#line 540
return _First1; 
#line 541
} 
#line 543
static const _Elem *__cdecl find(const _Elem *_First, size_t _Count, const _Elem &
#line 544
_Ch) 
#line 545
{ 
#line 546
return (_Count == (0)) ? (const _Elem *)0 : ((const _Elem *)::memchr(_First, _Ch, _Count)); 
#line 548
} 
#line 550
static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2, size_t 
#line 551
_Count) 
#line 552
{ 
#line 553
return (_Count == (0)) ? _First1 : ((_Elem *)::memmove(_First1, _First2, _Count)); 
#line 555
} 
#line 557
static _Elem *__cdecl assign(_Elem *_First, size_t _Count, _Elem 
#line 558
_Ch) 
#line 559
{ 
#line 560
return (_Elem *)::memset(_First, _Ch, _Count); 
#line 561
} 
#line 563
static void __cdecl assign(_Elem &_Left, const _Elem &_Right) noexcept 
#line 564
{ 
#line 565
_Left = _Right; 
#line 566
} 
#line 568
static constexpr bool __cdecl eq(const _Elem &_Left, const _Elem &
#line 569
_Right) noexcept 
#line 570
{ 
#line 571
return _Left == _Right; 
#line 572
} 
#line 574
static constexpr bool __cdecl lt(const _Elem &_Left, const _Elem &
#line 575
_Right) noexcept 
#line 576
{ 
#line 577
return ((unsigned char)_Left) < ((unsigned char)_Right); 
#line 578
} 
#line 580
static constexpr _Elem __cdecl to_char_type(const int_type &
#line 581
_Meta) noexcept 
#line 582
{ 
#line 583
return (_Elem)_Meta; 
#line 584
} 
#line 586
static constexpr int_type __cdecl to_int_type(const _Elem &
#line 587
_Ch) noexcept 
#line 588
{ 
#line 589
return (unsigned char)_Ch; 
#line 590
} 
#line 592
static constexpr bool __cdecl eq_int_type(const int_type &_Left, const int_type &
#line 593
_Right) noexcept 
#line 594
{ 
#line 595
return _Left == _Right; 
#line 596
} 
#line 598
static constexpr int_type __cdecl not_eof(const int_type &
#line 599
_Meta) noexcept 
#line 600
{ 
#line 601
return (_Meta != eof()) ? _Meta : (!(eof())); 
#line 602
} 
#line 604
static constexpr int_type __cdecl eof() noexcept 
#line 605
{ 
#line 606
return -1; 
#line 607
} 
#line 608
}; 
#line 611
template < class _Ty >
 class allocator;
#line 613
class ios_base; 
#line 614
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class basic_ios;
#line 617
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class istreambuf_iterator;
#line 620
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class ostreambuf_iterator;
#line 623
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class basic_streambuf;
#line 626
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class basic_istream;
#line 629
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class basic_ostream;
#line 632
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class basic_iostream;
#line 635
template < class _Elem,
 class _Traits = char_traits < _Elem >,
 class _Alloc = allocator < _Elem > >
 class basic_stringbuf;
#line 639
template < class _Elem,
 class _Traits = char_traits < _Elem >,
 class _Alloc = allocator < _Elem > >
 class basic_istringstream;
#line 643
template < class _Elem,
 class _Traits = char_traits < _Elem >,
 class _Alloc = allocator < _Elem > >
 class basic_ostringstream;
#line 647
template < class _Elem,
 class _Traits = char_traits < _Elem >,
 class _Alloc = allocator < _Elem > >
 class basic_stringstream;
#line 651
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class basic_filebuf;
#line 654
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class basic_ifstream;
#line 657
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class basic_ofstream;
#line 660
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class basic_fstream;
#line 665
template < class _Elem,
 class _InIt >
 class num_get;
#line 668
template < class _Elem,
 class _OutIt >
 class num_put;
#line 671
template< class _Elem> class collate; 
#line 676 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_ios< char, char_traits< char> >  ios; 
#line 677
typedef basic_streambuf< char, char_traits< char> >  streambuf; 
#line 678
typedef basic_istream< char, char_traits< char> >  istream; 
#line 679
typedef basic_ostream< char, char_traits< char> >  ostream; 
#line 680
typedef basic_iostream< char, char_traits< char> >  iostream; 
#line 682
typedef basic_stringbuf< char, char_traits< char> , allocator< char> >  stringbuf; 
#line 684
typedef basic_istringstream< char, char_traits< char> , allocator< char> >  istringstream; 
#line 686
typedef basic_ostringstream< char, char_traits< char> , allocator< char> >  ostringstream; 
#line 688
typedef basic_stringstream< char, char_traits< char> , allocator< char> >  stringstream; 
#line 689
typedef basic_filebuf< char, char_traits< char> >  filebuf; 
#line 690
typedef basic_ifstream< char, char_traits< char> >  ifstream; 
#line 691
typedef basic_ofstream< char, char_traits< char> >  ofstream; 
#line 692
typedef basic_fstream< char, char_traits< char> >  fstream; 
#line 695
typedef basic_ios< __wchar_t, char_traits< __wchar_t> >  wios; 
#line 697
typedef basic_streambuf< __wchar_t, char_traits< __wchar_t> >  wstreambuf; 
#line 698
typedef basic_istream< __wchar_t, char_traits< __wchar_t> >  wistream; 
#line 699
typedef basic_ostream< __wchar_t, char_traits< __wchar_t> >  wostream; 
#line 700
typedef basic_iostream< __wchar_t, char_traits< __wchar_t> >  wiostream; 
#line 702
typedef basic_stringbuf< __wchar_t, char_traits< __wchar_t> , allocator< __wchar_t> >  wstringbuf; 
#line 704
typedef basic_istringstream< __wchar_t, char_traits< __wchar_t> , allocator< __wchar_t> >  wistringstream; 
#line 706
typedef basic_ostringstream< __wchar_t, char_traits< __wchar_t> , allocator< __wchar_t> >  wostringstream; 
#line 708
typedef basic_stringstream< __wchar_t, char_traits< __wchar_t> , allocator< __wchar_t> >  wstringstream; 
#line 709
typedef basic_filebuf< __wchar_t, char_traits< __wchar_t> >  wfilebuf; 
#line 710
typedef basic_ifstream< __wchar_t, char_traits< __wchar_t> >  wifstream; 
#line 711
typedef basic_ofstream< __wchar_t, char_traits< __wchar_t> >  wofstream; 
#line 712
typedef basic_fstream< __wchar_t, char_traits< __wchar_t> >  wfstream; 
#line 738
typedef num_get< char, istreambuf_iterator< char, char_traits< char> > >  numget; 
#line 740
typedef num_get< __wchar_t, istreambuf_iterator< __wchar_t, char_traits< __wchar_t> > >  wnumget; 
#line 742
typedef num_put< char, ostreambuf_iterator< char, char_traits< char> > >  numput; 
#line 744
typedef num_put< __wchar_t, ostreambuf_iterator< __wchar_t, char_traits< __wchar_t> > >  wnumput; 
#line 745
typedef collate< char>  ncollate; 
#line 746
typedef collate< __wchar_t>  wcollate; 
#line 748 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
}
#line 751
#pragma warning(pop)
#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
#pragma warning(push,3)
#line 15
#pragma warning(disable: 4180 4512)
#line 752 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
#pragma pack ( pop )
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
#pragma pack ( push, 8 )
#line 17
namespace std { 
#line 19
template < class _FwdIt1,
 class _FwdIt2 > inline
 void iter_swap ( _FwdIt1 _Left, _FwdIt2 _Right )
 {
 swap ( * _Left, * _Right );
 }
#line 27
template < class _Ty,
 size_t _Size,
 class > inline
 void swap ( _Ty ( & _Left ) [ _Size ], _Ty ( & _Right ) [ _Size ] )
  noexcept ( _Is_nothrow_swappable < _Ty > :: value )
 {
 if ( & _Left != & _Right )
  {
  _Ty * _First1 = _Left;
  _Ty * _Last1 = _First1 + _Size;
  _Ty * _First2 = _Right;
  for (; _First1 != _Last1; ++ _First1, ++ _First2 )
   :: std :: iter_swap ( _First1, _First2 );
  }
 }
#line 43
template < class _Ty,
 class > inline
 void swap ( _Ty & _Left, _Ty & _Right )
  noexcept ( is_nothrow_move_constructible < _Ty > :: value && is_nothrow_move_assignable < _Ty > :: value )

 {
 _Ty _Tmp = :: std :: move ( _Left );
 _Left = :: std :: move ( _Right );
 _Right = :: std :: move ( _Tmp );
 }
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty > inline
 void _Swap_adl ( _Ty & _Left, _Ty & _Right )
  noexcept ( _Is_nothrow_swappable < _Ty > :: value )
 {
 swap ( _Left, _Right );
 }
#line 63
struct piecewise_construct_t { 
#line 65
}; 
#line 67
constexpr piecewise_construct_t piecewise_construct{}; 
#line 70
template< class ...> class tuple; 
#line 73
template < class _Ty1,
 class _Ty2 >
 struct pair
 {
 typedef pair < _Ty1, _Ty2 > _Myt;
 typedef _Ty1 first_type;
 typedef _Ty2 second_type;

 template < class _Uty1 = _Ty1,
  class _Uty2 = _Ty2,
  class = enable_if_t < is_default_constructible < _Uty1 > :: value
      && is_default_constructible < _Uty2 > :: value > >
  constexpr pair ( )
  : first ( ), second ( )
  {
  }

 template < class _Uty1 = _Ty1,
  class _Uty2 = _Ty2,
  class = enable_if_t < is_copy_constructible < _Uty1 > :: value
      && is_copy_constructible < _Uty2 > :: value >,
  enable_if_t < is_convertible < const _Uty1 &, _Uty1 > :: value
    && is_convertible < const _Uty2 &, _Uty2 > :: value, int > = 0 >
  constexpr pair ( const _Ty1 & _Val1, const _Ty2 & _Val2 )
  : first ( _Val1 ), second ( _Val2 )
  {
  }

 template < class _Uty1 = _Ty1,
  class _Uty2 = _Ty2,
  class = enable_if_t < is_copy_constructible < _Uty1 > :: value
      && is_copy_constructible < _Uty2 > :: value >,
  enable_if_t < ! is_convertible < const _Uty1 &, _Uty1 > :: value
    || ! is_convertible < const _Uty2 &, _Uty2 > :: value, int > = 0 >
  constexpr explicit pair ( const _Ty1 & _Val1, const _Ty2 & _Val2 )
  : first ( _Val1 ), second ( _Val2 )
  {
  }

 pair ( const pair & ) = default;
 pair ( pair && ) = default;

 template < class _Other1,
  class _Other2,
  class = enable_if_t < is_constructible < _Ty1, const _Other1 & > :: value
      && is_constructible < _Ty2, const _Other2 & > :: value >,
  enable_if_t < is_convertible < const _Other1 &, _Ty1 > :: value
    && is_convertible < const _Other2 &, _Ty2 > :: value, int > = 0 >
  constexpr pair ( const pair < _Other1, _Other2 > & _Right )
  : first ( _Right . first ), second ( _Right . second )
  {
  }

 template < class _Other1,
  class _Other2,
  class = enable_if_t < is_constructible < _Ty1, const _Other1 & > :: value
      && is_constructible < _Ty2, const _Other2 & > :: value >,
  enable_if_t < ! is_convertible < const _Other1 &, _Ty1 > :: value
    || ! is_convertible < const _Other2 &, _Ty2 > :: value, int > = 0 >
  constexpr explicit pair ( const pair < _Other1, _Other2 > & _Right )
  : first ( _Right . first ), second ( _Right . second )
  {
  }

 template < class _Other1,
  class _Other2 >
  _Myt & operator = ( const pair < _Other1, _Other2 > & _Right )
  {
  first = _Right . first;
  second = _Right . second;
  return ( * this );
  }

 template < class _Tuple1,
  class _Tuple2,
  size_t ... _Indexes1,
  size_t ... _Indexes2 > inline
  pair ( _Tuple1 & _Val1,
   _Tuple2 & _Val2,
   integer_sequence < size_t, _Indexes1 ... >,
   integer_sequence < size_t, _Indexes2 ... > );

 template < class ... _Types1,
  class ... _Types2 > inline
  pair ( piecewise_construct_t,
   tuple < _Types1 ... > _Val1,
   tuple < _Types2 ... > _Val2 );

 template < class _Other1,
  class _Other2,
  class = enable_if_t < is_constructible < _Ty1, _Other1 > :: value
      && is_constructible < _Ty2, _Other2 > :: value >,
  enable_if_t < is_convertible < _Other1, _Ty1 > :: value
    && is_convertible < _Other2, _Ty2 > :: value, int > = 0 >
  constexpr pair ( _Other1 && _Val1, _Other2 && _Val2 )
   noexcept ( ( is_nothrow_constructible < _Ty1, _Other1 > :: value && is_nothrow_constructible < _Ty2, _Other2 > :: value ) )

  : first ( :: std :: forward < _Other1 > ( _Val1 ) ),
    second ( :: std :: forward < _Other2 > ( _Val2 ) )
  {
  }

 template < class _Other1,
  class _Other2,
  class = enable_if_t < is_constructible < _Ty1, _Other1 > :: value
      && is_constructible < _Ty2, _Other2 > :: value >,
  enable_if_t < ! is_convertible < _Other1, _Ty1 > :: value
    || ! is_convertible < _Other2, _Ty2 > :: value, int > = 0 >
  constexpr explicit pair ( _Other1 && _Val1, _Other2 && _Val2 )
   noexcept ( ( is_nothrow_constructible < _Ty1, _Other1 > :: value && is_nothrow_constructible < _Ty2, _Other2 > :: value ) )

  : first ( :: std :: forward < _Other1 > ( _Val1 ) ),
    second ( :: std :: forward < _Other2 > ( _Val2 ) )
  {
  }

 template < class _Other1,
  class _Other2,
  class = enable_if_t < is_constructible < _Ty1, _Other1 > :: value
      && is_constructible < _Ty2, _Other2 > :: value >,
  enable_if_t < is_convertible < _Other1, _Ty1 > :: value
    && is_convertible < _Other2, _Ty2 > :: value, int > = 0 >
  constexpr pair ( pair < _Other1, _Other2 > && _Right )
   noexcept ( ( is_nothrow_constructible < _Ty1, _Other1 > :: value && is_nothrow_constructible < _Ty2, _Other2 > :: value ) )

  : first ( :: std :: forward < _Other1 > ( _Right . first ) ),
   second ( :: std :: forward < _Other2 > ( _Right . second ) )
  {
  }

 template < class _Other1,
  class _Other2,
  class = enable_if_t < is_constructible < _Ty1, _Other1 > :: value
      && is_constructible < _Ty2, _Other2 > :: value >,
  enable_if_t < ! is_convertible < _Other1, _Ty1 > :: value
    || ! is_convertible < _Other2, _Ty2 > :: value, int > = 0 >
  constexpr explicit pair ( pair < _Other1, _Other2 > && _Right )
   noexcept ( ( is_nothrow_constructible < _Ty1, _Other1 > :: value && is_nothrow_constructible < _Ty2, _Other2 > :: value ) )

  : first ( :: std :: forward < _Other1 > ( _Right . first ) ),
   second ( :: std :: forward < _Other2 > ( _Right . second ) )
  {
  }

 template < class _Other1,
  class _Other2 >
  _Myt & operator = ( pair < _Other1, _Other2 > && _Right )
  {
  first = :: std :: forward < _Other1 > ( _Right . first );
  second = :: std :: forward < _Other2 > ( _Right . second );
  return ( * this );
  }

 _Myt & operator = ( _Myt && _Right )
  noexcept ( ( is_nothrow_move_assignable < _Ty1 > :: value && is_nothrow_move_assignable < _Ty2 > :: value ) )

  {
  first = :: std :: forward < _Ty1 > ( _Right . first );
  second = :: std :: forward < _Ty2 > ( _Right . second );
  return ( * this );
  }

 _Myt & operator = ( const _Myt & _Right )
  {
  first = _Right . first;
  second = _Right . second;
  return ( * this );
  }

 _Ty1 first;
 _Ty2 second;

 void swap ( _Myt & _Right )
  noexcept ( _Is_nothrow_swappable < _Ty1 > :: value && _Is_nothrow_swappable < _Ty2 > :: value )

  {
  if ( this != & _Right )
   {
   _Swap_adl ( first, _Right . first );
   _Swap_adl ( second, _Right . second );
   }
  }
 };
#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty1,
 class _Ty2,
 class = enable_if_t < _Is_swappable < _Ty1 > :: value && _Is_swappable < _Ty2 > :: value > > inline
 void swap ( pair < _Ty1, _Ty2 > & _Left, pair < _Ty1, _Ty2 > & _Right )
  noexcept ( noexcept ( _Left . swap ( _Right ) ) )
 {
 _Left . swap ( _Right );
 }
#line 268
template < class _Ty1,
 class _Ty2 > inline
 constexpr bool operator == ( const pair < _Ty1, _Ty2 > & _Left,
  const pair < _Ty1, _Ty2 > & _Right )
 {
 return ( _Left . first == _Right . first && _Left . second == _Right . second );
 }
#line 276
template < class _Ty1,
 class _Ty2 > inline
 constexpr bool operator != ( const pair < _Ty1, _Ty2 > & _Left,
  const pair < _Ty1, _Ty2 > & _Right )
 {
 return ( ! ( _Left == _Right ) );
 }
#line 284
template < class _Ty1,
 class _Ty2 > inline
 constexpr bool operator < ( const pair < _Ty1, _Ty2 > & _Left,
  const pair < _Ty1, _Ty2 > & _Right )
 {
 return ( _Left . first < _Right . first ||
  ( ! ( _Right . first < _Left . first ) && _Left . second < _Right . second ) );
 }
#line 293
template < class _Ty1,
 class _Ty2 > inline
 constexpr bool operator > ( const pair < _Ty1, _Ty2 > & _Left,
  const pair < _Ty1, _Ty2 > & _Right )
 {
 return ( _Right < _Left );
 }
#line 301
template < class _Ty1,
 class _Ty2 > inline
 constexpr bool operator <= ( const pair < _Ty1, _Ty2 > & _Left,
  const pair < _Ty1, _Ty2 > & _Right )
 {
 return ( ! ( _Right < _Left ) );
 }
#line 309
template < class _Ty1,
 class _Ty2 > inline
 constexpr bool operator >= ( const pair < _Ty1, _Ty2 > & _Left,
  const pair < _Ty1, _Ty2 > & _Right )
 {
 return ( ! ( _Left < _Right ) );
 }
#line 319
template < class _Ty1,
 class _Ty2 > inline
 constexpr pair < typename _Unrefwrap < _Ty1 > :: type,
  typename _Unrefwrap < _Ty2 > :: type >
  make_pair ( _Ty1 && _Val1, _Ty2 && _Val2 )
 {
 typedef pair < typename _Unrefwrap < _Ty1 > :: type,
  typename _Unrefwrap < _Ty2 > :: type > _Mypair;
 return ( _Mypair ( :: std :: forward < _Ty1 > ( _Val1 ),
  :: std :: forward < _Ty2 > ( _Val2 ) ) );
 }
#line 332
namespace rel_ops { 
#line 334
template < class _Ty > inline
 bool operator != ( const _Ty & _Left, const _Ty & _Right )
 {
 return ( ! ( _Left == _Right ) );
 }
#line 340
template < class _Ty > inline
 bool operator > ( const _Ty & _Left, const _Ty & _Right )
 {
 return ( _Right < _Left );
 }
#line 346
template < class _Ty > inline
 bool operator <= ( const _Ty & _Left, const _Ty & _Right )
 {
 return ( ! ( _Right < _Left ) );
 }
#line 352
template < class _Ty > inline
 bool operator >= ( const _Ty & _Left, const _Ty & _Right )
 {
 return ( ! ( _Left < _Right ) );
 }
#line 357
}
#line 358
}
#line 360
namespace std { 
#line 361
template< class _Ty, size_t 
#line 362
_Size> class array; 
#line 366
template< class _Tuple> struct tuple_size; 
#line 369
template< class _Ty, size_t 
#line 370
_Size> 
#line 371
struct tuple_size< array< _Ty, _Size> >  : public integral_constant< unsigned __int64, _Size>  { 
#line 374
}; 
#line 376
template< class _Ty1, class 
#line 377
_Ty2> 
#line 378
struct tuple_size< pair< _Ty1, _Ty2> >  : public integral_constant< unsigned __int64, 2Ui64>  { 
#line 381
}; 
#line 383
template< class ..._Types> 
#line 384
struct tuple_size< tuple< _Types...> >  : public integral_constant< unsigned __int64, sizeof...(_Types)>  { 
#line 387
}; 
#line 390
template< class _Tuple> 
#line 391
struct tuple_size< const _Tuple>  : public tuple_size< _Tuple>  { 
#line 394
}; 
#line 396
template< class _Tuple> 
#line 397
struct tuple_size< volatile _Tuple>  : public tuple_size< _Tuple>  { 
#line 400
}; 
#line 402
template< class _Tuple> 
#line 403
struct tuple_size< const volatile _Tuple>  : public tuple_size< _Tuple>  { 
#line 406
}; 
#line 409
template< class _Ty> constexpr size_t 
#line 410
tuple_size_v = (tuple_size< _Ty> ::value); 
#line 414 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template< size_t _Index, class 
#line 415
_Tuple> struct tuple_element; 
#line 418
template< size_t _Idx, class 
#line 419
_Ty, size_t 
#line 420
_Size> 
#line 421
struct tuple_element< _Idx, array< _Ty, _Size> >  { 
#line 423
static_assert((_Idx < _Size), "array index out of bounds");
#line 425
typedef _Ty type; 
#line 426
}; 
#line 428
template< class _Ty1, class 
#line 429
_Ty2> 
#line 430
struct tuple_element< 0, pair< _Ty1, _Ty2> >  { 
#line 432
typedef _Ty1 type; 
#line 433
}; 
#line 435
template< class _Ty1, class 
#line 436
_Ty2> 
#line 437
struct tuple_element< 1, pair< _Ty1, _Ty2> >  { 
#line 439
typedef _Ty2 type; 
#line 440
}; 
#line 442
template< size_t _Index> 
#line 443
struct tuple_element< _Index, tuple< > >  { 
#line 445
static_assert((_Always_false< integral_constant< unsigned __int64, _Index> > ::value), "tuple index out of bounds");
#line 447
}; 
#line 449
template< class _This, class ...
#line 450
_Rest> 
#line 451
struct tuple_element< 0, tuple< _This, _Rest...> >  { 
#line 453
typedef _This type; 
#line 454
typedef tuple< _This, _Rest...>  _Ttype; 
#line 455
}; 
#line 457
template< size_t _Index, class 
#line 458
_This, class ...
#line 459
_Rest> 
#line 460
struct tuple_element< _Index, tuple< _This, _Rest...> >  : public tuple_element< _Index - (1), tuple< _Rest...> >  { 
#line 463
}; 
#line 466
template< size_t _Index, class 
#line 467
_Tuple> 
#line 468
struct tuple_element< _Index, const _Tuple>  : public tuple_element< _Index, _Tuple>  { 
#line 471
typedef ::std::tuple_element< _Index, _Tuple>  _Mybase; 
#line 472
typedef typename add_const< typename ::std::tuple_element< _Index, _Tuple> ::type> ::type type; 
#line 473
}; 
#line 475
template< size_t _Index, class 
#line 476
_Tuple> 
#line 477
struct tuple_element< _Index, volatile _Tuple>  : public tuple_element< _Index, _Tuple>  { 
#line 480
typedef ::std::tuple_element< _Index, _Tuple>  _Mybase; 
#line 481
typedef typename add_volatile< typename ::std::tuple_element< _Index, _Tuple> ::type> ::type type; 
#line 482
}; 
#line 484
template< size_t _Index, class 
#line 485
_Tuple> 
#line 486
struct tuple_element< _Index, const volatile _Tuple>  : public tuple_element< _Index, _Tuple>  { 
#line 489
typedef ::std::tuple_element< _Index, _Tuple>  _Mybase; 
#line 490
typedef typename add_cv< typename ::std::tuple_element< _Index, _Tuple> ::type> ::type type; 
#line 491
}; 
#line 493
template< size_t _Index, class 
#line 494
_Tuple> using tuple_element_t = typename tuple_element< _Index, _Tuple> ::type; 
#line 498
template < class _Ret,
 class _Pair > inline
 constexpr _Ret _Pair_get ( _Pair & _Pr,
  integral_constant < size_t, 0 > ) noexcept
 {
 return ( _Pr . first );
 }
#line 506
template < class _Ret,
 class _Pair > inline
 constexpr _Ret _Pair_get ( _Pair & _Pr,
  integral_constant < size_t, 1 > ) noexcept
 {
 return ( _Pr . second );
 }
#line 514
template < size_t _Idx,
 class _Ty1,
 class _Ty2 > inline
 constexpr typename tuple_element < _Idx, pair < _Ty1, _Ty2 > > :: type &
  get ( pair < _Ty1, _Ty2 > & _Pr ) noexcept
 {
 typedef typename tuple_element < _Idx, pair < _Ty1, _Ty2 > > :: type & _Rtype;
 return ( _Pair_get < _Rtype > ( _Pr, integral_constant < size_t, _Idx > ( ) ) );
 }
#line 524
template < class _Ty1,
 class _Ty2 > inline
 constexpr _Ty1 & get ( pair < _Ty1, _Ty2 > & _Pr ) noexcept
 {
 return ( :: std :: get < 0 > ( _Pr ) );
 }
#line 531
template < class _Ty2,
 class _Ty1 > inline
 constexpr _Ty2 & get ( pair < _Ty1, _Ty2 > & _Pr ) noexcept
 {
 return ( :: std :: get < 1 > ( _Pr ) );
 }
#line 538
template < size_t _Idx,
 class _Ty1,
 class _Ty2 > inline
 constexpr const typename tuple_element < _Idx, pair < _Ty1, _Ty2 > > :: type &
  get ( const pair < _Ty1, _Ty2 > & _Pr ) noexcept
 {
 typedef const typename tuple_element < _Idx, pair < _Ty1, _Ty2 > > :: type &
  _Ctype;
 return ( _Pair_get < _Ctype > ( _Pr, integral_constant < size_t, _Idx > ( ) ) );
 }
#line 549
template < class _Ty1,
 class _Ty2 > inline
 constexpr const _Ty1 & get ( const pair < _Ty1, _Ty2 > & _Pr ) noexcept
 {
 return ( :: std :: get < 0 > ( _Pr ) );
 }
#line 556
template < class _Ty2,
 class _Ty1 > inline
 constexpr const _Ty2 & get ( const pair < _Ty1, _Ty2 > & _Pr ) noexcept
 {
 return ( :: std :: get < 1 > ( _Pr ) );
 }
#line 563
template < size_t _Idx,
 class _Ty1,
 class _Ty2 > inline
 constexpr typename tuple_element < _Idx, pair < _Ty1, _Ty2 > > :: type &&
  get ( pair < _Ty1, _Ty2 > && _Pr ) noexcept
 {
 typedef typename tuple_element < _Idx, pair < _Ty1, _Ty2 > > :: type && _RRtype;
 return ( :: std :: forward < _RRtype > ( :: std :: get < _Idx > ( _Pr ) ) );
 }
#line 573
template < class _Ty1,
 class _Ty2 > inline
 constexpr _Ty1 && get ( pair < _Ty1, _Ty2 > && _Pr ) noexcept
 {
 return ( :: std :: get < 0 > ( :: std :: move ( _Pr ) ) );
 }
#line 580
template < class _Ty2,
 class _Ty1 > inline
 constexpr _Ty2 && get ( pair < _Ty1, _Ty2 > && _Pr ) noexcept
 {
 return ( :: std :: get < 1 > ( :: std :: move ( _Pr ) ) );
 }
#line 588
template < class _Ty,
 class _Other = _Ty > inline
 _Ty exchange ( _Ty & _Val, _Other && _New_val )
 {
 _Ty _Old_val = :: std :: move ( _Val );
 _Val = :: std :: forward < _Other > ( _New_val );
 return ( _Old_val );
 }
#line 598
template < class _Ty > inline
 constexpr add_const_t < _Ty > & as_const ( _Ty & _Val ) noexcept
 {
 return ( _Val );
 }
#line 604
template < class _Ty >
 void as_const ( const _Ty && ) = delete;
#line 606
}
#line 609
namespace std { 
#line 610
namespace tr1 { 
#line 611
using std::get;
#line 612
using std::tuple_element;
#line 613
using std::tuple_size;
#line 614
}
#line 615
}
#line 619 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
#pragma warning(pop)
#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
#pragma warning(push,3)
#line 620 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
#pragma pack ( pop )
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
#pragma pack ( push, 8 )
#line 15
namespace std { 
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Container_proxy; 
#line 37
struct _Container_base12; 
#line 38
struct _Iterator_base12; 
#line 40
struct _Container_base0 { 
#line 42
void _Orphan_all() 
#line 43
{ 
#line 44
} 
#line 46
void _Swap_all(_Container_base0 &) 
#line 47
{ 
#line 48
} 
#line 49
}; 
#line 51
struct _Iterator_base0 { 
#line 53
void _Adopt(const void *) 
#line 54
{ 
#line 55
} 
#line 57
const _Container_base0 *_Getcont() const 
#line 58
{ 
#line 59
return 0; 
#line 60
} 
#line 61
}; 
#line 64
struct _Container_proxy { 
#line 66
_Container_proxy() : _Mycont((0)), _Myfirstiter((0)) 
#line 68
{ 
#line 69
} 
#line 71
const _Container_base12 *_Mycont; 
#line 72
_Iterator_base12 *_Myfirstiter; 
#line 73
}; 
#line 75
struct _Container_base12 { 
#line 78
_Container_base12() : _Myproxy((0)) 
#line 80
{ 
#line 81
} 
#line 83
_Container_base12(const _Container_base12 &) : _Myproxy((0)) 
#line 85
{ 
#line 86
} 
#line 88
_Container_base12 &operator=(const _Container_base12 &) 
#line 89
{ 
#line 90
return *this; 
#line 91
} 
#line 93
~_Container_base12() noexcept 
#line 94
{ 
#line 95
this->_Orphan_all(); 
#line 96
} 
#line 98
_Iterator_base12 **_Getpfirst() const 
#line 99
{ 
#line 100
return ((_Myproxy) == (0)) ? 0 : (&((_Myproxy)->_Myfirstiter)); 
#line 101
} 
#line 103
inline void _Orphan_all(); 
#line 104
inline void _Swap_all(_Container_base12 &); 
#line 106
_Container_proxy *_Myproxy; 
#line 107
}; 
#line 109
struct _Iterator_base12 { 
#line 112
_Iterator_base12() : _Myproxy((0)), _Mynextiter((0)) 
#line 114
{ 
#line 115
} 
#line 117
_Iterator_base12(const _Iterator_base12 &_Right) : _Myproxy((0)), _Mynextiter((0)) 
#line 119
{ 
#line 120
((*this) = _Right); 
#line 121
} 
#line 123
_Iterator_base12 &operator=(const _Iterator_base12 &_Right) 
#line 124
{ 
#line 125
if ((_Myproxy) == (_Right._Myproxy)) { 
#line 126
; } else { 
#line 127
if ((_Right._Myproxy) != (0)) { 
#line 128
this->_Adopt((_Right._Myproxy)->_Mycont); } else 
#line 130
{ 
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}  }  
#line 137
return *this; 
#line 138
} 
#line 140
~_Iterator_base12() noexcept 
#line 141
{ 
#line 146 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 148
void _Adopt(const _Container_base12 *_Parent) 
#line 149
{ 
#line 150
if (_Parent == (0)) 
#line 151
{ 
#line 156 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} else 
#line 158
{ 
#line 159
_Container_proxy *_Parent_proxy = _Parent->_Myproxy; 
#line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
(_Myproxy) = _Parent_proxy; 
#line 174 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}  
#line 175
} 
#line 177
void _Clrcont() 
#line 178
{ 
#line 179
(_Myproxy) = (0); 
#line 180
} 
#line 182
const _Container_base12 *_Getcont() const 
#line 183
{ 
#line 184
return ((_Myproxy) == (0)) ? 0 : ((_Myproxy)->_Mycont); 
#line 185
} 
#line 187
_Iterator_base12 **_Getpnext() 
#line 188
{ 
#line 189
return &(_Mynextiter); 
#line 190
} 
#line 192
void _Orphan_me() 
#line 193
{ 
#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 209
_Container_proxy *_Myproxy; 
#line 210
_Iterator_base12 *_Mynextiter; 
#line 211
}; 
#line 214
inline void _Container_base12::_Orphan_all() 
#line 215
{ 
#line 227 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 229
inline void _Container_base12::_Swap_all(_Container_base12 &_Right) 
#line 230
{ 
#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Container_proxy *_Temp = _Myproxy; 
#line 236
(_Myproxy) = (_Right._Myproxy); 
#line 237
(_Right._Myproxy) = _Temp; 
#line 239
if ((_Myproxy) != (0)) { 
#line 240
((_Myproxy)->_Mycont) = ((_Container_base12 *)this); }  
#line 241
if ((_Right._Myproxy) != (0)) { 
#line 242
((_Right._Myproxy)->_Mycont) = ((_Container_base12 *)(&_Right)); }  
#line 243
} 
#line 246
typedef _Container_base0 _Container_base; 
#line 247
typedef _Iterator_base0 _Iterator_base; 
#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Zero_then_variadic_args_t { 
#line 257
}; 
#line 259
struct _One_then_variadic_args_t { 
#line 261
}; 
#line 263
template < class _Ty1,
 class _Ty2,
 bool = is_empty < _Ty1 > :: value && ! is_final < _Ty1 > :: value >
 class _Compressed_pair final
  : private _Ty1

 {
private :
 _Ty2 _Myval2;

 typedef _Ty1 _Mybase;

public :
 template < class ... _Other2 >
  constexpr explicit _Compressed_pair ( _Zero_then_variadic_args_t,
   _Other2 && ... _Val2 )
  : _Ty1 ( ), _Myval2 ( :: std :: forward < _Other2 > ( _Val2 ) ... )
  {
  }

 template < class _Other1,
  class ... _Other2 >
  _Compressed_pair ( _One_then_variadic_args_t,
   _Other1 && _Val1, _Other2 && ... _Val2 )
  : _Ty1 ( :: std :: forward < _Other1 > ( _Val1 ) ),
   _Myval2 ( :: std :: forward < _Other2 > ( _Val2 ) ... )
  {
  }


 _Ty1 & _Get_first ( ) noexcept
  {
  return ( * this );
  }

 const _Ty1 & _Get_first ( ) const noexcept
  {
  return ( * this );
  }

 volatile _Ty1 & _Get_first ( ) volatile noexcept
  {
  return ( * this );
  }

 const volatile _Ty1 & _Get_first ( ) const volatile noexcept
  {
  return ( * this );
  }

 _Ty2 & _Get_second ( ) noexcept
  {
  return ( _Myval2 );
  }

 const _Ty2 & _Get_second ( ) const noexcept
  {
  return ( _Myval2 );
  }

 volatile _Ty2 & _Get_second ( ) volatile noexcept
  {
  return ( _Myval2 );
  }

 const volatile _Ty2 & _Get_second ( ) const volatile noexcept
  {
  return ( _Myval2 );
  }
 };
#line 334
template < class _Ty1,
 class _Ty2 >
 class _Compressed_pair < _Ty1, _Ty2, false > final

 {
private :
 _Ty1 _Myval1;
 _Ty2 _Myval2;

public :
 template < class ... _Other2 >
  constexpr explicit _Compressed_pair ( _Zero_then_variadic_args_t,
   _Other2 && ... _Val2 )
  : _Myval1 ( ), _Myval2 ( :: std :: forward < _Other2 > ( _Val2 ) ... )
  {
  }

 template < class _Other1,
  class ... _Other2 >
  _Compressed_pair ( _One_then_variadic_args_t,
   _Other1 && _Val1, _Other2 && ... _Val2 )
  : _Myval1 ( :: std :: forward < _Other1 > ( _Val1 ) ),
   _Myval2 ( :: std :: forward < _Other2 > ( _Val2 ) ... )
  {
  }


 _Ty1 & _Get_first ( ) noexcept
  {
  return ( _Myval1 );
  }

 const _Ty1 & _Get_first ( ) const noexcept
  {
  return ( _Myval1 );
  }

 volatile _Ty1 & _Get_first ( ) volatile noexcept
  {
  return ( _Myval1 );
  }

 const volatile _Ty1 & _Get_first ( ) const volatile noexcept
  {
  return ( _Myval1 );
  }

 _Ty2 & _Get_second ( ) noexcept
  {
  return ( _Myval2 );
  }

 const _Ty2 & _Get_second ( ) const noexcept
  {
  return ( _Myval2 );
  }

 volatile _Ty2 & _Get_second ( ) volatile noexcept
  {
  return ( _Myval2 );
  }

 const volatile _Ty2 & _Get_second ( ) const volatile noexcept
  {
  return ( _Myval2 );
  }
 };
#line 403
template< class _Ty, class 
#line 404
 = void> 
#line 405
struct _Is_checked_helper : public false_type { 
#line 408
}; 
#line 410
template< class _Ty> 
#line 411
struct _Is_checked_helper< _Ty, void_t< typename _Ty::_Unchecked_type> >  : public true_type { 
#line 415
}; 
#line 418
template < class _Iter > inline
 typename _Is_checked_helper < _Iter > :: type _Is_checked ( _Iter )
 {
 return { };
 }
#line 425
template < class _Iter > inline
 _Iter _Unchecked ( _Iter _Src )
 {
 return ( _Src );
 }
#line 437
template < class _Iter > inline
 decltype ( _Unchecked ( :: std :: declval < _Iter > ( ) ) ) _Unchecked_idl0 ( _Iter _Src )
 {
 return ( _Unchecked ( _Src ) );
 }
#line 454 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Iter,
 class _UIter > inline
 _Iter & _Rechecked ( _Iter & _Dest, _UIter _Src )
 {
 _Dest = _Src;
 return ( _Dest );
 }
#line 506 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct input_iterator_tag { 
#line 508
}; 
#line 510
struct _Mutable_iterator_tag { 
#line 512
}; 
#line 514
struct output_iterator_tag : public _Mutable_iterator_tag { 
#line 517
}; 
#line 519
struct forward_iterator_tag : public input_iterator_tag, public _Mutable_iterator_tag { 
#line 522
}; 
#line 524
struct bidirectional_iterator_tag : public forward_iterator_tag { 
#line 527
}; 
#line 529
struct random_access_iterator_tag : public bidirectional_iterator_tag { 
#line 532
}; 
#line 535
struct _General_ptr_iterator_tag { 
#line 537
}; 
#line 539
struct _Trivially_copyable_ptr_iterator_tag : public _General_ptr_iterator_tag { 
#line 542
}; 
#line 544
struct _Really_trivial_ptr_iterator_tag : public _Trivially_copyable_ptr_iterator_tag { 
#line 547
}; 
#line 550
struct _Any_tag { 
#line 552
constexpr _Any_tag() noexcept = default;
#line 553
template < class _Ty >
  constexpr _Any_tag ( _Ty && ) noexcept { }
#line 555
}; 
#line 558
template< class _Category, class 
#line 559
_Ty, class 
#line 560
_Diff = ptrdiff_t, class 
#line 561
_Pointer = _Ty *, class 
#line 562
_Reference = _Ty &> 
#line 563
struct iterator { 
#line 565
typedef _Category iterator_category; 
#line 566
typedef _Ty value_type; 
#line 567
typedef _Diff difference_type; 
#line 569
typedef _Pointer pointer; 
#line 570
typedef _Reference reference; 
#line 571
}; 
#line 573
template< class _Category, class 
#line 574
_Ty, class 
#line 575
_Diff, class 
#line 576
_Pointer, class 
#line 577
_Reference, class 
#line 578
_Base> 
#line 579
struct _Iterator012 : public _Base { 
#line 582
typedef _Category iterator_category; 
#line 583
typedef _Ty value_type; 
#line 584
typedef _Diff difference_type; 
#line 586
typedef _Pointer pointer; 
#line 587
typedef _Reference reference; 
#line 588
}; 
#line 591
typedef iterator< output_iterator_tag, void, void, void, void>  _Outit; 
#line 594
template< class , class 
#line 595
 = void> 
#line 596
struct _Iterator_traits_base { 
#line 598
}; 
#line 600
template< class _Iter> 
#line 601
struct _Iterator_traits_base< _Iter, void_t< typename _Iter::iterator_category, typename _Iter::value_type, typename _Iter::difference_type, typename _Iter::pointer, typename _Iter::reference> >  { 
#line 609
typedef typename _Iter::iterator_category iterator_category; 
#line 610
typedef typename _Iter::value_type value_type; 
#line 611
typedef typename _Iter::difference_type difference_type; 
#line 613
typedef typename _Iter::pointer pointer; 
#line 614
typedef typename _Iter::reference reference; 
#line 615
}; 
#line 617
template< class _Iter> 
#line 618
struct iterator_traits : public _Iterator_traits_base< _Iter>  { 
#line 621
}; 
#line 623
template< class _Ty> 
#line 624
struct iterator_traits< _Ty *>  { 
#line 626
typedef random_access_iterator_tag iterator_category; 
#line 627
typedef _Ty value_type; 
#line 628
typedef ptrdiff_t difference_type; 
#line 630
typedef _Ty *pointer; 
#line 631
typedef _Ty &reference; 
#line 632
}; 
#line 634
template< class _Ty> 
#line 635
struct iterator_traits< const _Ty *>  { 
#line 637
typedef random_access_iterator_tag iterator_category; 
#line 638
typedef _Ty value_type; 
#line 639
typedef ptrdiff_t difference_type; 
#line 641
typedef const _Ty *pointer; 
#line 642
typedef const _Ty &reference; 
#line 643
}; 
#line 646
template< class _Iter> using _Iter_value_t = typename iterator_traits< _Iter> ::value_type; 
#line 650
template< class _Iter> using _Iter_diff_t = typename iterator_traits< _Iter> ::difference_type; 
#line 654
template< class _Iter> using _Iter_cat_t = typename iterator_traits< _Iter> ::iterator_category; 
#line 658
template< class _Ty, class 
#line 659
 = void> 
#line 660
struct _Is_iterator : public false_type { 
#line 663
}; 
#line 665
template< class _Ty> 
#line 666
struct _Is_iterator< _Ty, void_t< typename iterator_traits< _Ty> ::iterator_category> >  : public true_type { 
#line 671
}; 
#line 676
template < class _Iter,
 class _Diff > inline
 auto _Unchecked_n ( _Iter _Src, _Diff )
 {
 return ( _Unchecked ( _Src ) );
 }
#line 712 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Ty1, class 
#line 713
_Ty2> 
#line 714
struct _Is_same_size : public bool_constant< sizeof(_Ty1) == sizeof(_Ty2)>  { 
#line 717
}; 
#line 720
template< class _Elem, bool 
#line 721
_Is_enum = is_enum< _Elem> ::value> 
#line 722
struct _Unwrap_enum { 
#line 724
typedef underlying_type_t< _Elem>  type; 
#line 725
}; 
#line 727
template< class _Elem> 
#line 728
struct _Unwrap_enum< _Elem, false>  { 
#line 730
typedef _Elem type; 
#line 731
}; 
#line 734
template< class _Ty1, class 
#line 735
_Ty2> 
#line 736
struct _Both_or_neither_bool : public bool_constant< is_same< bool, _Ty1> ::value == is_same< bool, _Ty2> ::value>  { 
#line 739
}; 
#line 742
template< class _Source, class 
#line 743
_Dest> 
#line 744
struct _Ptr_cat_helper { 
#line 746
typedef typename _Unwrap_enum< _Source> ::type _USource; 
#line 747
typedef typename _Unwrap_enum< _Dest> ::type _UDest; 
#line 759
typedef conditional_t< conjunction< _Is_same_size< typename _Unwrap_enum< _Source> ::type, typename _Unwrap_enum< _Dest> ::type> , is_integral< typename _Unwrap_enum< _Source> ::type> , is_integral< typename _Unwrap_enum< _Dest> ::type> , _Both_or_neither_bool< typename _Unwrap_enum< _Source> ::type, typename _Unwrap_enum< _Dest> ::type> , negation< is_volatile< _Source> > , negation< is_volatile< _Dest> > > ::value, _Really_trivial_ptr_iterator_tag, _General_ptr_iterator_tag>  type; 
#line 760
}; 
#line 762
template< class _Elem> 
#line 763
struct _Ptr_cat_helper< _Elem, _Elem>  { 
#line 770
typedef conditional_t< is_trivially_copyable< _Elem> ::value, conditional_t< is_trivial< _Elem> ::value, _Really_trivial_ptr_iterator_tag, _Trivially_copyable_ptr_iterator_tag> , _General_ptr_iterator_tag>  type; 
#line 771
}; 
#line 773
template< class _Anything> 
#line 774
struct _Ptr_cat_helper< _Anything *, const _Anything *>  { 
#line 776
typedef _Really_trivial_ptr_iterator_tag type; 
#line 777
}; 
#line 779
template < class _Source,
 class _Dest > inline
 _General_ptr_iterator_tag _Ptr_copy_cat ( const _Source &, const _Dest & )
 {
 return { };
 }
#line 786
template < class _Source,
 class _Dest > inline
 conditional_t < is_trivially_assignable < _Dest &, _Source & > :: value,
  typename _Ptr_cat_helper < remove_const_t < _Source >, _Dest > :: type,
  _General_ptr_iterator_tag >
  _Ptr_copy_cat ( _Source * const &, _Dest * const & )
 {
 return { };
 }
#line 796
template < class _Source,
 class _Dest > inline
 _General_ptr_iterator_tag _Ptr_move_cat ( const _Source &, const _Dest & )
 {
 return { };
 }
#line 803
template < class _Source,
 class _Dest > inline
 conditional_t < is_trivially_assignable < _Dest &, _Source > :: value,
  typename _Ptr_cat_helper < remove_const_t < _Source >, _Dest > :: type,
  _General_ptr_iterator_tag >
  _Ptr_move_cat ( _Source * const &, _Dest * const & )
 {
 return { };
 }
#line 1057 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _Diff > inline
 void _Advance1 ( _InIt & _Where, _Diff _Off, input_iterator_tag )
 {





 for (; 0 < _Off; -- _Off )
  ++ _Where;
 }
#line 1070 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _BidIt,
 class _Diff > inline
 void _Advance1 ( _BidIt & _Where, _Diff _Off, bidirectional_iterator_tag )
 {
 for (; 0 < _Off; -- _Off )
  ++ _Where;
 for (; _Off < 0; ++ _Off )
  -- _Where;
 }
#line 1080
template < class _RanIt,
 class _Diff > inline
 void _Advance1 ( _RanIt & _Where, _Diff _Off, random_access_iterator_tag )
 {
 _Where += _Off;
 }
#line 1087
template < class _InIt,
 class _Diff > inline
 void advance ( _InIt & _Where, _Diff _Off )
 {

 _Advance1 ( _Where, _Off, _Iter_cat_t < remove_const_t < _InIt >> ( ) );
 }
#line 1096
template < class _InIt > inline
 _Iter_diff_t < _InIt >
  _Distance1 ( _InIt _First, _InIt _Last, input_iterator_tag )
 {
 _Iter_diff_t < _InIt > _Off = 0;
 for (; _First != _Last; ++ _First )
  ++ _Off;

 return ( _Off );
 }
#line 1107
template < class _RanIt > inline
 _Iter_diff_t < _RanIt >
  _Distance1 ( _RanIt _First, _RanIt _Last, random_access_iterator_tag )
 {








 return ( _Last - _First );
 }
#line 1122 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt > inline
 _Iter_diff_t < _InIt >
  distance ( _InIt _First, _InIt _Last )
 {
 return ( _Distance1 ( _First, _Last, _Iter_cat_t < _InIt > ( ) ) );
 }
#line 1130
template < class _InIt > inline
 _InIt next ( _InIt _First, _Iter_diff_t < _InIt > _Off = 1 )
 {
 static_assert ( is_base_of < input_iterator_tag,
  typename iterator_traits < _InIt > :: iterator_category > :: value,
  "next requires input iterator" );

 :: std :: advance ( _First, _Off );
 return ( _First );
 }
#line 1142
template < class _BidIt > inline
 _BidIt prev ( _BidIt _First, _Iter_diff_t < _BidIt > _Off = 1 )
 {
 static_assert ( is_base_of < bidirectional_iterator_tag,
  typename iterator_traits < _BidIt > :: iterator_category > :: value,
  "prev requires bidirectional iterator" );

 :: std :: advance ( _First, - _Off );
 return ( _First );
 }
#line 1154
template < class _Ty >
 struct pointer_traits;
#line 1157
template < class _RanIt >
 class reverse_iterator
  : public iterator <
   typename iterator_traits < _RanIt > :: iterator_category,
   typename iterator_traits < _RanIt > :: value_type,
   typename iterator_traits < _RanIt > :: difference_type,
   typename iterator_traits < _RanIt > :: pointer,
   typename iterator_traits < _RanIt > :: reference >
 {
 typedef reverse_iterator < _RanIt > _Myt;

public :
 typedef typename iterator_traits < _RanIt > :: difference_type difference_type;
 typedef typename iterator_traits < _RanIt > :: pointer pointer;
 typedef typename iterator_traits < _RanIt > :: reference reference;
 typedef _RanIt iterator_type;

 reverse_iterator ( )
  : current ( )
  {
  }

 explicit reverse_iterator ( _RanIt _Right )
  : current ( _Right )
  {
  }

 template < class _Other >
  reverse_iterator ( const reverse_iterator < _Other > & _Right )
  : current ( _Right . base ( ) )
  {
  }

 template < class _Other >
  _Myt & operator = ( const reverse_iterator < _Other > & _Right )
  {
  current = _Right . base ( );
  return ( * this );
  }

 _RanIt base ( ) const
  {
  return ( current );
  }

 reference operator * ( ) const
  {
  _RanIt _Tmp = current;
  return ( * -- _Tmp );
  }

 pointer operator -> ( ) const
  {
  return ( pointer_traits < pointer > :: pointer_to ( * * this ) );
  }

 _Myt & operator ++ ( )
  {
  -- current;
  return ( * this );
  }

 _Myt operator ++ ( int )
  {
  _Myt _Tmp = * this;
  -- current;
  return ( _Tmp );
  }

 _Myt & operator -- ( )
  {
  ++ current;
  return ( * this );
  }

 _Myt operator -- ( int )
  {
  _Myt _Tmp = * this;
  ++ current;
  return ( _Tmp );
  }



 _Myt & operator += ( difference_type _Off )
  {
  current -= _Off;
  return ( * this );
  }

 _Myt operator + ( difference_type _Off ) const
  {
  return ( _Myt ( current - _Off ) );
  }

 _Myt & operator -= ( difference_type _Off )
  {
  current += _Off;
  return ( * this );
  }

 _Myt operator - ( difference_type _Off ) const
  {
  return ( _Myt ( current + _Off ) );
  }

 reference operator [ ] ( difference_type _Off ) const
  {
  return ( * ( * this + _Off ) );
  }

protected :
 _RanIt current;
 };
#line 1272
template< class _RanIt> 
#line 1273
struct _Is_checked_helper< reverse_iterator< _RanIt> , void>  : public _Is_checked_helper< _RanIt>  { 
#line 1276
}; 
#line 1279
template < class _RanIt > inline
 reverse_iterator < _RanIt > operator + (
  typename reverse_iterator < _RanIt > :: difference_type _Off,
  const reverse_iterator < _RanIt > & _Right )
 {
 return ( _Right + _Off );
 }
#line 1287
template < class _RanIt1,
 class _RanIt2 >
 auto inline operator - ( const reverse_iterator < _RanIt1 > & _Left,
  const reverse_iterator < _RanIt2 > & _Right )
   -> decltype ( _Right . base ( ) - _Left . base ( ) )
 {
 return ( _Right . base ( ) - _Left . base ( ) );
 }
#line 1296
template < class _RanIt1,
 class _RanIt2 > inline
 bool operator == ( const reverse_iterator < _RanIt1 > & _Left,
  const reverse_iterator < _RanIt2 > & _Right )
 {
 return ( _Left . base ( ) == _Right . base ( ) );
 }
#line 1304
template < class _RanIt1,
 class _RanIt2 > inline
 bool operator != ( const reverse_iterator < _RanIt1 > & _Left,
  const reverse_iterator < _RanIt2 > & _Right )
 {
 return ( ! ( _Left == _Right ) );
 }
#line 1312
template < class _RanIt1,
 class _RanIt2 > inline
 bool operator < ( const reverse_iterator < _RanIt1 > & _Left,
  const reverse_iterator < _RanIt2 > & _Right )
 {
 return ( _Right . base ( ) < _Left . base ( ) );
 }
#line 1320
template < class _RanIt1,
 class _RanIt2 > inline
 bool operator > ( const reverse_iterator < _RanIt1 > & _Left,
  const reverse_iterator < _RanIt2 > & _Right )
 {
 return ( _Right < _Left );
 }
#line 1328
template < class _RanIt1,
 class _RanIt2 > inline
 bool operator <= ( const reverse_iterator < _RanIt1 > & _Left,
  const reverse_iterator < _RanIt2 > & _Right )
 {
 return ( ! ( _Right < _Left ) );
 }
#line 1336
template < class _RanIt1,
 class _RanIt2 > inline
 bool operator >= ( const reverse_iterator < _RanIt1 > & _Left,
  const reverse_iterator < _RanIt2 > & _Right )
 {
 return ( ! ( _Left < _Right ) );
 }
#line 1345
template < class _RanIt > inline
 reverse_iterator < _RanIt > make_reverse_iterator ( _RanIt _Iter )
 {
 return ( reverse_iterator < _RanIt > ( _Iter ) );
 }
#line 1353
template < class _Container >
 auto inline begin ( _Container & _Cont ) -> decltype ( _Cont . begin ( ) )
 {
 return ( _Cont . begin ( ) );
 }
#line 1359
template < class _Container >
 auto inline begin ( const _Container & _Cont ) -> decltype ( _Cont . begin ( ) )
 {
 return ( _Cont . begin ( ) );
 }
#line 1365
template < class _Container >
 auto inline end ( _Container & _Cont ) -> decltype ( _Cont . end ( ) )
 {
 return ( _Cont . end ( ) );
 }
#line 1371
template < class _Container >
 auto inline end ( const _Container & _Cont ) -> decltype ( _Cont . end ( ) )
 {
 return ( _Cont . end ( ) );
 }
#line 1377
template < class _Ty,
 size_t _Size > inline
 constexpr _Ty * begin ( _Ty ( & _Array ) [ _Size ] ) noexcept
 {
 return ( _Array );
 }
#line 1384
template < class _Ty,
 size_t _Size > inline
 constexpr _Ty * end ( _Ty ( & _Array ) [ _Size ] ) noexcept
 {
 return ( _Array + _Size );
 }
#line 1392
template < class _Container >
 constexpr auto inline cbegin ( const _Container & _Cont )
  noexcept ( noexcept ( :: std :: begin ( _Cont ) ) )
  -> decltype ( :: std :: begin ( _Cont ) )
 {
 return ( :: std :: begin ( _Cont ) );
 }
#line 1400
template < class _Container >
 constexpr auto inline cend ( const _Container & _Cont )
  noexcept ( noexcept ( :: std :: end ( _Cont ) ) )
  -> decltype ( :: std :: end ( _Cont ) )
 {
 return ( :: std :: end ( _Cont ) );
 }
#line 1409
template < class _Container >
 auto inline rbegin ( _Container & _Cont ) -> decltype ( _Cont . rbegin ( ) )
 {
 return ( _Cont . rbegin ( ) );
 }
#line 1415
template < class _Container >
 auto inline rbegin ( const _Container & _Cont ) -> decltype ( _Cont . rbegin ( ) )
 {
 return ( _Cont . rbegin ( ) );
 }
#line 1421
template < class _Container >
 auto inline rend ( _Container & _Cont ) -> decltype ( _Cont . rend ( ) )
 {
 return ( _Cont . rend ( ) );
 }
#line 1427
template < class _Container >
 auto inline rend ( const _Container & _Cont ) -> decltype ( _Cont . rend ( ) )
 {
 return ( _Cont . rend ( ) );
 }
#line 1433
template < class _Ty,
 size_t _Size > inline
 reverse_iterator < _Ty * > rbegin ( _Ty ( & _Array ) [ _Size ] )
 {
 return ( reverse_iterator < _Ty * > ( _Array + _Size ) );
 }
#line 1440
template < class _Ty,
 size_t _Size > inline
 reverse_iterator < _Ty * > rend ( _Ty ( & _Array ) [ _Size ] )
 {
 return ( reverse_iterator < _Ty * > ( _Array ) );
 }
#line 1447
template < class _Elem > inline
 reverse_iterator < const _Elem * >
  rbegin ( :: std :: initializer_list < _Elem > _Ilist )
 {
 return ( reverse_iterator < const _Elem * > ( _Ilist . end ( ) ) );
 }
#line 1454
template < class _Elem > inline
 reverse_iterator < const _Elem * >
  rend ( :: std :: initializer_list < _Elem > _Ilist )
 {
 return ( reverse_iterator < const _Elem * > ( _Ilist . begin ( ) ) );
 }
#line 1462
template < class _Container >
 auto inline crbegin ( const _Container & _Cont )
  -> decltype ( :: std :: rbegin ( _Cont ) )
 {
 return ( :: std :: rbegin ( _Cont ) );
 }
#line 1469
template < class _Container >
 auto inline crend ( const _Container & _Cont )
  -> decltype ( :: std :: rend ( _Cont ) )
 {
 return ( :: std :: rend ( _Cont ) );
 }
#line 1477
template < class _Container >
 constexpr auto inline size ( const _Container & _Cont )
  -> decltype ( _Cont . size ( ) )
 {
 return ( _Cont . size ( ) );
 }
#line 1484
template < class _Ty,
 size_t _Size > inline
 constexpr size_t size ( const _Ty ( & ) [ _Size ] ) noexcept
 {
 return ( _Size );
 }
#line 1491
template < class _Container >
 constexpr auto inline empty ( const _Container & _Cont )
  -> decltype ( _Cont . empty ( ) )
 {
 return ( _Cont . empty ( ) );
 }
#line 1498
template < class _Ty,
 size_t _Size > inline
 constexpr bool empty ( const _Ty ( & ) [ _Size ] ) noexcept
 {
 return ( false );
 }
#line 1505
template < class _Elem > inline
 constexpr bool empty (
  :: std :: initializer_list < _Elem > _Ilist ) noexcept
 {
 return ( _Ilist . size ( ) == 0 );
 }
#line 1512
template < class _Container >
 constexpr auto inline data ( _Container & _Cont )
  -> decltype ( _Cont . data ( ) )
 {
 return ( _Cont . data ( ) );
 }
#line 1519
template < class _Container >
 constexpr auto inline data ( const _Container & _Cont )
  -> decltype ( _Cont . data ( ) )
 {
 return ( _Cont . data ( ) );
 }
#line 1526
template < class _Ty,
 size_t _Size > inline
 constexpr _Ty * data ( _Ty ( & _Array ) [ _Size ] ) noexcept
 {
 return ( _Array );
 }
#line 1533
template < class _Elem > inline
 constexpr const _Elem * data (
  :: std :: initializer_list < _Elem > _Ilist ) noexcept
 {
 return ( _Ilist . begin ( ) );
 }
#line 1541
template < class _Ty,
 size_t _Size >
 class _Array_const_iterator
  : public _Iterator012 < random_access_iterator_tag,
   _Ty,
   ptrdiff_t,
   const _Ty *,
   const _Ty &,
   _Iterator_base >
 {
public :
 typedef _Array_const_iterator < _Ty, _Size > _Myiter;
 typedef random_access_iterator_tag iterator_category;

 typedef _Ty value_type;
 typedef size_t size_type;
 typedef ptrdiff_t difference_type;
 typedef const _Ty * pointer;
 typedef const _Ty & reference;
 enum { _EEN_SIZE = _Size };

 _Array_const_iterator ( )
  : _Ptr ( 0 )
  {
  }

 explicit _Array_const_iterator ( pointer _Parg, size_t _Off = 0 )
  : _Ptr ( _Parg + _Off )
  {
  }

 typedef pointer _Unchecked_type;

 _Myiter & _Rechecked ( _Unchecked_type _Right )
  {
  _Ptr = _Right;
  return ( * this );
  }

 _Unchecked_type _Unchecked ( ) const
  {
  return ( _Ptr );
  }

 reference operator * ( ) const
  {
  return ( * _Ptr );
  }

 pointer operator -> ( ) const
  {
  return ( pointer_traits < pointer > :: pointer_to ( * * this ) );
  }

 _Myiter & operator ++ ( )
  {
  ++ _Ptr;
  return ( * this );
  }

 _Myiter operator ++ ( int )
  {
  _Myiter _Tmp = * this;
  ++ * this;
  return ( _Tmp );
  }

 _Myiter & operator -- ( )
  {
  -- _Ptr;
  return ( * this );
  }

 _Myiter operator -- ( int )
  {
  _Myiter _Tmp = * this;
  -- * this;
  return ( _Tmp );
  }

 _Myiter & operator += ( difference_type _Off )
  {
  _Ptr += _Off;
  return ( * this );
  }

 _Myiter operator + ( difference_type _Off ) const
  {
  _Myiter _Tmp = * this;
  return ( _Tmp += _Off );
  }

 _Myiter & operator -= ( difference_type _Off )
  {
  return ( * this += - _Off );
  }

 _Myiter operator - ( difference_type _Off ) const
  {
  _Myiter _Tmp = * this;
  return ( _Tmp -= _Off );
  }

 difference_type operator - ( const _Myiter & _Right ) const
  {
  return ( _Ptr - _Right . _Ptr );
  }

 reference operator [ ] ( difference_type _Off ) const
  {
  return ( * ( * this + _Off ) );
  }

 bool operator == ( const _Myiter & _Right ) const
  {
  return ( _Ptr == _Right . _Ptr );
  }

 bool operator != ( const _Myiter & _Right ) const
  {
  return ( ! ( * this == _Right ) );
  }

 bool operator < ( const _Myiter & _Right ) const
  {
  return ( _Ptr < _Right . _Ptr );
  }

 bool operator > ( const _Myiter & _Right ) const
  {
  return ( _Right < * this );
  }

 bool operator <= ( const _Myiter & _Right ) const
  {
  return ( ! ( _Right < * this ) );
  }

 bool operator >= ( const _Myiter & _Right ) const
  {
  return ( ! ( * this < _Right ) );
  }

 pointer _Ptr;











































































































































































































 };
#line 1890 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty,
 size_t _Size > inline
 typename _Array_const_iterator < _Ty, _Size > :: _Unchecked_type
  _Unchecked ( _Array_const_iterator < _Ty, _Size > _Iter )
 {
 return ( _Iter . _Unchecked ( ) );
 }
#line 1898
template < class _Ty,
 size_t _Size > inline
 _Array_const_iterator < _Ty, _Size > &
  _Rechecked ( _Array_const_iterator < _Ty, _Size > & _Iter,
   typename _Array_const_iterator < _Ty, _Size >
    :: _Unchecked_type _Right )
 {
 return ( _Iter . _Rechecked ( _Right ) );
 }
#line 1908
template < class _Ty,
 size_t _Size > inline
 _Array_const_iterator < _Ty, _Size > operator + (
  typename _Array_const_iterator < _Ty, _Size > :: difference_type _Off,
  _Array_const_iterator < _Ty, _Size > _Next )
 {
 return ( _Next += _Off );
 }
#line 1918
template < class _Ty,
 size_t _Size >
 class _Array_iterator
  : public _Array_const_iterator < _Ty, _Size >
 {
public :
 typedef _Array_iterator < _Ty, _Size > _Myiter;
 typedef _Array_const_iterator < _Ty, _Size > _Mybase;
 typedef random_access_iterator_tag iterator_category;

 typedef _Ty value_type;
 typedef size_t size_type;
 typedef ptrdiff_t difference_type;
 typedef _Ty * pointer;
 typedef _Ty & reference;

 _Array_iterator ( )
  {
  }

 explicit _Array_iterator ( pointer _Parg, size_t _Off = 0 )
  : _Mybase ( _Parg, _Off )
  {
  }
 enum { _EEN_SIZE = _Size };
 typedef pointer _Unchecked_type;

 _Myiter & _Rechecked ( _Unchecked_type _Right )
  {
  ( ( _Mybase * ) this ) -> _Rechecked ( _Right );
  return ( * this );
  }

 _Unchecked_type _Unchecked ( ) const
  {
  return ( ( pointer ) ( ( _Mybase * ) this ) -> _Unchecked ( ) );
  }

 reference operator * ( ) const
  {
  return ( ( reference ) * * ( _Mybase * ) this );
  }

 pointer operator -> ( ) const
  {
  return ( pointer_traits < pointer > :: pointer_to ( * * this ) );
  }

 _Myiter & operator ++ ( )
  {
  ++ * ( _Mybase * ) this;
  return ( * this );
  }

 _Myiter operator ++ ( int )
  {
  _Myiter _Tmp = * this;
  ++ * this;
  return ( _Tmp );
  }

 _Myiter & operator -- ( )
  {
  -- * ( _Mybase * ) this;
  return ( * this );
  }

 _Myiter operator -- ( int )
  {
  _Myiter _Tmp = * this;
  -- * this;
  return ( _Tmp );
  }

 _Myiter & operator += ( difference_type _Off )
  {
  * ( _Mybase * ) this += _Off;
  return ( * this );
  }

 _Myiter operator + ( difference_type _Off ) const
  {
  _Myiter _Tmp = * this;
  return ( _Tmp += _Off );
  }

 _Myiter & operator -= ( difference_type _Off )
  {
  return ( * this += - _Off );
  }

 _Myiter operator - ( difference_type _Off ) const
  {
  _Myiter _Tmp = * this;
  return ( _Tmp -= _Off );
  }

 difference_type operator - ( const _Mybase & _Right ) const
  {
  return ( * ( _Mybase * ) this - _Right );
  }

 reference operator [ ] ( difference_type _Off ) const
  {
  return ( * ( * this + _Off ) );
  }
 };
#line 2026
template < class _Ty,
 size_t _Size > inline
 typename _Array_iterator < _Ty, _Size > :: _Unchecked_type
  _Unchecked ( _Array_iterator < _Ty, _Size > _Iter )
 {
 return ( _Iter . _Unchecked ( ) );
 }
#line 2034
template < class _Ty,
 size_t _Size > inline
 _Array_iterator < _Ty, _Size > &
  _Rechecked ( _Array_iterator < _Ty, _Size > & _Iter,
   typename _Array_iterator < _Ty, _Size >
    :: _Unchecked_type _Right )
 {
 return ( _Iter . _Rechecked ( _Right ) );
 }
#line 2044
template < class _Ty,
 size_t _Size > inline
 _Array_iterator < _Ty, _Size > operator + (
  typename _Array_iterator < _Ty, _Size > :: difference_type _Off,
  _Array_iterator < _Ty, _Size > _Next )
 {
 return ( _Next += _Off );
 }
#line 2054
template < class _RanIt >
 class move_iterator
 {
public :
 typedef move_iterator < _RanIt > _Myt;
 typedef typename iterator_traits < _RanIt > :: iterator_category
  iterator_category;
 typedef typename iterator_traits < _RanIt > :: value_type
  value_type;
 typedef typename iterator_traits < _RanIt > :: difference_type
  difference_type;
 typedef _RanIt pointer;
 typedef typename iterator_traits < _RanIt > :: reference _Ref0;
 typedef conditional_t < is_reference < _Ref0 > :: value,
  remove_reference_t < _Ref0 > &&, _Ref0 > reference;
 typedef _RanIt iterator_type;

 move_iterator ( )
  : current ( )
  {
  }

 explicit move_iterator ( iterator_type _Right )
  : current ( _Right )
  {
  }

 template < class _RanIt2 >
  move_iterator ( const move_iterator < _RanIt2 > & _Right )
  : current ( _Right . base ( ) )
  {
  }

 template < class _RanIt2 >
  _Myt & operator = ( const move_iterator < _RanIt2 > & _Right )
  {
  current = _Right . base ( );
  return ( * this );
  }

 _RanIt base ( ) const
  {
  return ( current );
  }

 reference operator * ( ) const
  {
  return ( static_cast < reference > ( * current ) );
  }

 pointer operator -> ( ) const
  {
  return ( current );
  }

 _Myt & operator ++ ( )
  {
  ++ current;
  return ( * this );
  }

 _Myt operator ++ ( int )
  {
  _Myt _Tmp = * this;
  ++ current;
  return ( _Tmp );
  }

 _Myt & operator -- ( )
  {
  -- current;
  return ( * this );
  }

 _Myt operator -- ( int )
  {
  _Myt _Tmp = * this;
  -- current;
  return ( _Tmp );
  }

 template < class _RanIt2 >
  bool _Equal ( const move_iterator < _RanIt2 > & _Right ) const
  {
  return ( current == _Right . base ( ) );
  }



 _Myt & operator += ( difference_type _Off )
  {
  current += _Off;
  return ( * this );
  }

 _Myt operator + ( difference_type _Off ) const
  {
  return ( _Myt ( current + _Off ) );
  }

 _Myt & operator -= ( difference_type _Off )
  {
  current -= _Off;
  return ( * this );
  }

 _Myt operator - ( difference_type _Off ) const
  {
  return ( _Myt ( current - _Off ) );
  }

 reference operator [ ] ( difference_type _Off ) const
  {
  return ( :: std :: move ( current [ _Off ] ) );
  }

 template < class _RanIt2 >
  bool _Less ( const move_iterator < _RanIt2 > & _Right ) const
  {
  return ( current < _Right . base ( ) );
  }

 difference_type operator - ( const _Myt & _Right ) const
  {
  return ( current - _Right . base ( ) );
  }

protected :
 iterator_type current;
 };
#line 2185
template< class _RanIt> 
#line 2186
struct _Is_checked_helper< move_iterator< _RanIt> , void>  : public _Is_checked_helper< _RanIt>  { 
#line 2189
}; 
#line 2192
template < class _RanIt,
 class _Diff > inline
 move_iterator < _RanIt >
  operator + ( _Diff _Off,
  const move_iterator < _RanIt > & _Right )
 {
 return ( _Right + _Off );
 }
#line 2201
template < class _RanIt1,
 class _RanIt2 >
 auto inline operator - (
  move_iterator < _RanIt1 > & _Left,
  const move_iterator < _RanIt2 > & _Right )
   -> decltype ( _Left . base ( ) - _Right . base ( ) )
 {
 return ( _Left . base ( ) - _Right . base ( ) );
 }
#line 2211
template < class _RanIt1,
 class _RanIt2 > inline
 bool operator == (
  const move_iterator < _RanIt1 > & _Left,
  const move_iterator < _RanIt2 > & _Right )
 {
 return ( _Left . _Equal ( _Right ) );
 }
#line 2220
template < class _RanIt1,
 class _RanIt2 > inline
 bool operator != (
  const move_iterator < _RanIt1 > & _Left,
  const move_iterator < _RanIt2 > & _Right )
 {
 return ( ! ( _Left == _Right ) );
 }
#line 2229
template < class _RanIt1,
 class _RanIt2 > inline
 bool operator < (
  const move_iterator < _RanIt1 > & _Left,
  const move_iterator < _RanIt2 > & _Right )
 {
 return ( _Left . _Less ( _Right ) );
 }
#line 2238
template < class _RanIt1,
 class _RanIt2 > inline
 bool operator > (
  const move_iterator < _RanIt1 > & _Left,
  const move_iterator < _RanIt2 > & _Right )
 {
 return ( _Right < _Left );
 }
#line 2247
template < class _RanIt1,
 class _RanIt2 > inline
 bool operator <= (
  const move_iterator < _RanIt1 > & _Left,
  const move_iterator < _RanIt2 > & _Right )
 {
 return ( ! ( _Right < _Left ) );
 }
#line 2256
template < class _RanIt1,
 class _RanIt2 > inline
 bool operator >= (
  const move_iterator < _RanIt1 > & _Left,
  const move_iterator < _RanIt2 > & _Right )
 {
 return ( ! ( _Left < _Right ) );
 }
#line 2266
template < class _RanIt > inline
 move_iterator < _RanIt > make_move_iterator ( _RanIt _Iter )
 {
 return ( move_iterator < _RanIt > ( _Iter ) );
 }
#line 2273
template < class _Traits >
 struct _Char_traits_eq
 {
 typedef typename _Traits :: char_type _Elem;

 bool operator ( ) ( _Elem _Left, _Elem _Right ) const
  {
  return ( _Traits :: eq ( _Left, _Right ) );
  }
 };
#line 2285
template < class _Traits >
 struct _Char_traits_lt
 {
 typedef typename _Traits :: char_type _Elem;

 bool operator ( ) ( _Elem _Left, _Elem _Right ) const
  {
  return ( _Traits :: lt ( _Left, _Right ) );
  }
 };
#line 2297
template < class _InIt,
 class _OutIt > inline
 _OutIt _Copy_memmove ( _InIt _First, _InIt _Last,
  _OutIt _Dest )
 {
 const char * const _First_ch = reinterpret_cast < const char * > ( _First );
 const char * const _Last_ch = reinterpret_cast < const char * > ( _Last );
 char * const _Dest_ch = reinterpret_cast < char * > ( _Dest );
 const size_t _Count = _Last_ch - _First_ch;
 :: memmove ( _Dest_ch, _First_ch, _Count );
 return ( reinterpret_cast < _OutIt > ( _Dest_ch + _Count ) );
 }
#line 2310
template < class _InIt,
 class _OutIt > inline
 _OutIt _Copy_unchecked1 ( _InIt _First, _InIt _Last,
  _OutIt _Dest, _General_ptr_iterator_tag )
 {
 for (; _First != _Last; ++ _Dest, ( void ) ++ _First )
  * _Dest = * _First;
 return ( _Dest );
 }
#line 2320
template < class _InIt,
 class _OutIt > inline
 _OutIt _Copy_unchecked1 ( _InIt _First, _InIt _Last,
  _OutIt _Dest, _Trivially_copyable_ptr_iterator_tag )
 {
 return ( _Copy_memmove ( _First, _Last, _Dest ) );
 }
#line 2328
template < class _InIt,
 class _OutIt > inline
 _OutIt _Copy_unchecked ( _InIt _First, _InIt _Last,
  _OutIt _Dest )
 {

 return ( _Copy_unchecked1 ( _First, _Last,
  _Dest, _Ptr_copy_cat ( _First, _Dest ) ) );
 }
#line 2338
template < class _InIt,
 class _OutIt > inline
 _OutIt _Copy_no_deprecate1 ( _InIt _First, _InIt _Last,
  _OutIt _Dest, input_iterator_tag, _Any_tag )
 {
 return ( _Rechecked ( _Dest,
  _Copy_unchecked ( _First, _Last, _Unchecked_idl0 ( _Dest ) ) ) );
 }
#line 2347
template < class _InIt,
 class _OutIt > inline
 _OutIt _Copy_no_deprecate1 ( _InIt _First, _InIt _Last,
  _OutIt _Dest, random_access_iterator_tag, random_access_iterator_tag )
 {
 ;
 return ( _Rechecked ( _Dest,
  _Copy_unchecked ( _First, _Last, _Unchecked ( _Dest ) ) ) );
 }
#line 2357
template < class _InIt,
 class _OutIt > inline
 _OutIt _Copy_no_deprecate ( _InIt _First, _InIt _Last,
  _OutIt _Dest )
 {
 ;
 return ( _Copy_no_deprecate1 ( _Unchecked ( _First ), _Unchecked ( _Last ),
  _Dest, _Iter_cat_t < _InIt > ( ), _Iter_cat_t < _OutIt > ( ) ) );
 }
#line 2367
template < class _InIt,
 class _OutIt > inline
 _OutIt copy ( _InIt _First, _InIt _Last,
  _OutIt _Dest )
 {
 struct _Unchecked_iterators { static void _Deprecate ( false_type ) { } static void _Deprecate ( true_type ) { } }; ( _Unchecked_iterators :: _Deprecate ( _Is_checked ( _Dest ) ) );
 return ( _Copy_no_deprecate ( _First, _Last, _Dest ) );
 }
#line 2390 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _Diff,
 class _OutIt > inline
 _OutIt _Copy_n_unchecked2 ( _InIt _First, _Diff _Count,
  _OutIt _Dest, input_iterator_tag )
 {
 if ( 0 < _Count )
  {
  * _Dest = * _First;
  while ( 0 < -- _Count )
   * ++ _Dest = * ++ _First;
  return ( ++ _Dest );
  }

 return ( _Dest );
 }
#line 2407
template < class _InIt,
 class _Diff,
 class _OutIt > inline
 _OutIt _Copy_n_unchecked2 ( _InIt _First, _Diff _Count,
  _OutIt _Dest, forward_iterator_tag )
 {
 for (; 0 < _Count; -- _Count, ( void ) ++ _Dest, ++ _First )
  * _Dest = * _First;
 return ( _Dest );
 }
#line 2418
template < class _InIt,
 class _Diff,
 class _OutIt > inline
 _OutIt _Copy_n_unchecked1 ( _InIt _First, _Diff _Count,
  _OutIt _Dest, _General_ptr_iterator_tag )
 {


 return ( _Copy_n_unchecked2 ( _First, _Count,
  _Dest, _Iter_cat_t < _InIt > ( ) ) );
 }
#line 2430
template < class _InIt,
 class _Diff,
 class _OutIt > inline
 _OutIt _Copy_n_unchecked1 ( _InIt _First, _Diff _Count,
  _OutIt _Dest, _Trivially_copyable_ptr_iterator_tag )
 {
 if ( 0 < _Count )
  return ( _Copy_memmove ( _First, _First + _Count, _Dest ) );
 return ( _Dest );
 }
#line 2441
template < class _InIt,
 class _Diff,
 class _OutIt > inline
 _OutIt _Copy_n_unchecked ( _InIt _First, _Diff _Count,
  _OutIt _Dest )
 {
 return ( _Copy_n_unchecked1 ( _First, _Count,
  _Dest, _Ptr_copy_cat ( _First, _Dest ) ) );
 }
#line 2451
template < class _InIt,
 class _Diff,
 class _OutIt > inline
 _OutIt copy_n ( _InIt _First, _Diff _Count,
  _OutIt _Dest )
 {

 struct _Unchecked_iterators { static void _Deprecate ( false_type ) { } static void _Deprecate ( true_type ) { } }; ( _Unchecked_iterators :: _Deprecate ( _Is_checked ( _Dest ) ) );
 return ( _Rechecked ( _Dest,
  _Copy_n_unchecked ( _Unchecked_n ( _First, _Count ), _Count, _Unchecked_n ( _Dest, _Count ) ) ) );
 }
#line 2504 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 _Copy_backward_memmove ( _BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest )
 {
 const char * const _First_ch = reinterpret_cast < const char * > ( _First );
 const char * const _Last_ch = reinterpret_cast < const char * > ( _Last );
 char * const _Dest_ch = reinterpret_cast < char * > ( _Dest );
 const size_t _Count = _Last_ch - _First_ch;
 return ( static_cast < _BidIt2 > (
  :: memmove ( _Dest_ch - _Count, _First_ch, _Count ) ) );
 }
#line 2517
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 _Copy_backward_unchecked1 ( _BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, _General_ptr_iterator_tag )
 {
 while ( _First != _Last )
  * -- _Dest = * -- _Last;
 return ( _Dest );
 }
#line 2527
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 _Copy_backward_unchecked1 ( _BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, _Trivially_copyable_ptr_iterator_tag )
 {
 return ( _Copy_backward_memmove ( _First, _Last, _Dest ) );
 }
#line 2535
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 _Copy_backward_unchecked ( _BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest )
 {
 return ( _Copy_backward_unchecked1 ( _First, _Last,
  _Dest, _Ptr_copy_cat ( _First, _Dest ) ) );
 }
#line 2544
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 _Copy_backward1 ( _BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, input_iterator_tag, _Any_tag )
 {
 return ( _Rechecked ( _Dest,
  _Copy_backward_unchecked ( _First, _Last, _Unchecked_idl0 ( _Dest ) ) ) );
 }
#line 2553
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 _Copy_backward1 ( _BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, random_access_iterator_tag, random_access_iterator_tag )
 {
 ;
 return ( _Rechecked ( _Dest,
  _Copy_backward_unchecked ( _First, _Last, _Unchecked ( _Dest ) ) ) );
 }
#line 2563
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 copy_backward ( _BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest )
 {
 struct _Unchecked_iterators { static void _Deprecate ( false_type ) { } static void _Deprecate ( true_type ) { } }; ( _Unchecked_iterators :: _Deprecate ( _Is_checked ( _Dest ) ) );
 ;
 return ( _Copy_backward1 ( _Unchecked ( _First ), _Unchecked ( _Last ),
  _Dest, _Iter_cat_t < _BidIt1 > ( ), _Iter_cat_t < _BidIt2 > ( ) ) );
 }
#line 2575
template < class _InIt,
 class _OutIt > inline
 _OutIt _Move_unchecked1 ( _InIt _First, _InIt _Last,
  _OutIt _Dest, _General_ptr_iterator_tag )
 {
 for (; _First != _Last; ++ _Dest, ( void ) ++ _First )
  * _Dest = :: std :: move ( * _First );
 return ( _Dest );
 }
#line 2585
template < class _InIt,
 class _OutIt > inline
 _OutIt _Move_unchecked1 ( _InIt _First, _InIt _Last,
  _OutIt _Dest, _Trivially_copyable_ptr_iterator_tag )
 {
 return ( _Copy_memmove ( _First, _Last, _Dest ) );
 }
#line 2593
template < class _InIt,
 class _OutIt > inline
 _OutIt _Move_unchecked ( _InIt _First, _InIt _Last,
  _OutIt _Dest )
 {
 return ( _Move_unchecked1 ( _First, _Last,
  _Dest, _Ptr_move_cat ( _First, _Dest ) ) );
 }
#line 2602
template < class _InIt,
 class _OutIt > inline
 _OutIt _Move_no_deprecate1 ( _InIt _First, _InIt _Last,
  _OutIt _Dest, input_iterator_tag, _Any_tag )
 {
 return ( _Rechecked ( _Dest,
  _Move_unchecked ( _First, _Last, _Unchecked_idl0 ( _Dest ) ) ) );
 }
#line 2611
template < class _InIt,
 class _OutIt > inline
 _OutIt _Move_no_deprecate1 ( _InIt _First, _InIt _Last,
  _OutIt _Dest, random_access_iterator_tag, random_access_iterator_tag )
 {
 ;
 return ( _Rechecked ( _Dest,
  _Move_unchecked ( _First, _Last, _Unchecked ( _Dest ) ) ) );
 }
#line 2621
template < class _InIt,
 class _OutIt > inline
 _OutIt _Move_no_deprecate ( _InIt _First, _InIt _Last,
  _OutIt _Dest )
 {
 ;
 return ( _Move_no_deprecate1 ( _Unchecked ( _First ), _Unchecked ( _Last ),
  _Dest, _Iter_cat_t < _InIt > ( ), _Iter_cat_t < _OutIt > ( ) ) );
 }
#line 2631
template< class _InIt, class 
#line 2632
_OutIt> inline _OutIt 
#line 2633
move(_InIt _First, _InIt _Last, _OutIt 
#line 2634
_Dest) 
#line 2635
{ 
#line 2636
struct _Unchecked_iterators { static void _Deprecate(std::false_type) { } static void _Deprecate(std::true_type) { } }; _Unchecked_iterators::_Deprecate(_Is_checked(_Dest)); 
#line 2637
return _Move_no_deprecate(_First, _Last, _Dest); 
#line 2638
} 
#line 2654 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 _Move_backward_unchecked1 ( _BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, _General_ptr_iterator_tag )
 {
 while ( _First != _Last )
  * -- _Dest = :: std :: move ( * -- _Last );
 return ( _Dest );
 }
#line 2664
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 _Move_backward_unchecked1 ( _BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, _Trivially_copyable_ptr_iterator_tag )
 {
 return ( _Copy_backward_memmove ( _First, _Last, _Dest ) );
 }
#line 2672
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 _Move_backward_unchecked ( _BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest )
 {
 return ( _Move_backward_unchecked1 ( _First, _Last,
  _Dest, _Ptr_move_cat ( _First, _Dest ) ) );
 }
#line 2681
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 _Move_backward1 ( _BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, input_iterator_tag, _Any_tag )
 {
 return ( _Rechecked ( _Dest,
  _Move_backward_unchecked ( _First, _Last, _Unchecked_idl0 ( _Dest ) ) ) );
 }
#line 2690
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 _Move_backward1 ( _BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, random_access_iterator_tag, random_access_iterator_tag )
 {
 ;
 return ( _Rechecked ( _Dest,
  _Move_backward_unchecked ( _First, _Last, _Unchecked ( _Dest ) ) ) );
 }
#line 2700
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 move_backward ( _BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest )
 {
 struct _Unchecked_iterators { static void _Deprecate ( false_type ) { } static void _Deprecate ( true_type ) { } }; ( _Unchecked_iterators :: _Deprecate ( _Is_checked ( _Dest ) ) );
 ;
 return ( _Move_backward1 ( _Unchecked ( _First ), _Unchecked ( _Last ),
  _Dest, _Iter_cat_t < _BidIt1 > ( ), _Iter_cat_t < _BidIt2 > ( ) ) );
 }
#line 2712
template< class _Ty> 
#line 2713
struct _Is_character : public false_type { 
#line 2716
}; 
#line 2719
template<> struct _Is_character< char>  : public true_type { 
#line 2722
}; 
#line 2725
template<> struct _Is_character< signed char>  : public true_type { 
#line 2728
}; 
#line 2731
template<> struct _Is_character< unsigned char>  : public true_type { 
#line 2734
}; 
#line 2736
template< class _FwdIt, class 
#line 2737
_Ty> 
#line 2738
struct _Fill_memset_is_safe_helper { 
#line 2740
typedef _Iter_value_t< _FwdIt>  _Value_type; 
#line 2750
typedef typename conjunction< is_pointer< _FwdIt> , disjunction< conjunction< _Is_character< _Ty> , _Is_character< _Iter_value_t< _FwdIt> > > , conjunction< is_same< bool, _Ty> , is_same< bool, _Iter_value_t< _FwdIt> > > > > ::type type; 
#line 2751
}; 
#line 2753
template < class _FwdIt,
 class _Ty > inline
 typename _Fill_memset_is_safe_helper < _FwdIt, _Ty > :: type
 _Fill_memset_is_safe ( const _FwdIt &, const _Ty & )
 {
 return { };
 }
#line 2761
template < class _FwdIt,
 class _Ty > inline
 void _Fill_unchecked1 ( _FwdIt _First, _FwdIt _Last, const _Ty & _Val, false_type )
 {
 for (; _First != _Last; ++ _First )
  * _First = _Val;
 }
#line 2769
template < class _FwdIt,
 class _Ty > inline
 void _Fill_unchecked1 ( _FwdIt _First, _FwdIt _Last, const _Ty & _Val, true_type )
 {
 :: memset ( _First, _Val, _Last - _First );
 }
#line 2776
template < class _FwdIt,
 class _Ty > inline
 void _Fill_unchecked ( _FwdIt _First, _FwdIt _Last, const _Ty & _Val )
 {
 _Fill_unchecked1 ( _First, _Last, _Val, _Fill_memset_is_safe ( _First, _Val ) );
 }
#line 2783
template < class _FwdIt,
 class _Ty > inline
 void fill ( _FwdIt _First, _FwdIt _Last, const _Ty & _Val )
 {
 ;
 _Fill_unchecked ( _Unchecked ( _First ), _Unchecked ( _Last ), _Val );
 }
#line 2792
template < class _OutIt,
 class _Diff,
 class _Ty > inline
 _OutIt _Fill_n_unchecked1 ( _OutIt _Dest, _Diff _Count, const _Ty & _Val, false_type )
 {
 for (; 0 < _Count; -- _Count, ( void ) ++ _Dest )
  * _Dest = _Val;
 return ( _Dest );
 }
#line 2802
template < class _OutIt,
 class _Diff,
 class _Ty > inline
 _OutIt _Fill_n_unchecked1 ( _OutIt _Dest, _Diff _Count, const _Ty & _Val, true_type )
 {
 if ( 0 < _Count )
  {
  :: memset ( _Dest, _Val, _Count );
  return ( _Dest + _Count );
  }

 return ( _Dest );
 }
#line 2816
template < class _OutIt,
 class _Diff,
 class _Ty > inline
 _OutIt _Fill_n_unchecked ( _OutIt _Dest, _Diff _Count, const _Ty & _Val )
 {

 return ( _Fill_n_unchecked1 ( _Dest, _Count, _Val, _Fill_memset_is_safe ( _Dest, _Val ) ) );
 }
#line 2825
template < class _OutIt,
 class _Diff,
 class _Ty > inline
 _OutIt fill_n ( _OutIt _Dest, _Diff _Count, const _Ty & _Val )
 {
 return ( _Rechecked ( _Dest,
  _Fill_n_unchecked ( _Unchecked_n ( _Dest, _Count ), _Count, _Val ) ) );
 }
#line 2835
template< class _Elem1, class 
#line 2836
_Elem2> 
#line 2837
struct _Value_equality_is_bitwise_equality : public bool_constant< (static_cast< _Elem1>(-1)) == (static_cast< _Elem2>(-1))>  { 
#line 2843
}; 
#line 2845
template< class _Elem1, class 
#line 2846
_Elem2, class 
#line 2847
_Pr> 
#line 2848
struct _Equal_memcmp_is_safe_helper : public false_type { 
#line 2852
}; 
#line 2854
template< class _Elem1, class 
#line 2855
_Elem2> 
#line 2856
struct _Equal_memcmp_is_safe_helper< _Elem1, _Elem2, equal_to<> >  : public conjunction< _Is_same_size< _Elem1, _Elem2> , is_integral< _Elem1> , is_integral< _Elem2> , negation< is_same< bool, _Elem1> > , negation< is_same< bool, _Elem2> > , negation< is_volatile< _Elem1> > , negation< is_volatile< _Elem2> > , _Value_equality_is_bitwise_equality< _Elem1, _Elem2> > ::type { 
#line 2870
}; 
#line 2872
template< class _Elem1, class 
#line 2873
_Elem2> 
#line 2874
struct _Equal_memcmp_is_safe_helper< _Elem1 *, _Elem2 *, equal_to<> >  : public is_same< remove_cv_t< _Elem1> , remove_cv_t< _Elem2> > ::type { 
#line 2877
}; 
#line 2879
template< class _Elem> 
#line 2880
struct _Equal_memcmp_is_safe_helper< _Elem, _Elem, _Char_traits_eq< char_traits< _Elem> > >  : public _Equal_memcmp_is_safe_helper< _Elem, _Elem, equal_to<> > ::type { 
#line 2883
}; 
#line 2885
template< class _Elem> 
#line 2886
struct _Equal_memcmp_is_safe_helper< _Elem, _Elem, equal_to< _Elem> >  : public _Equal_memcmp_is_safe_helper< _Elem, _Elem, equal_to<> > ::type { 
#line 2890
}; 
#line 2892
template < class _Iter1,
 class _Iter2,
 class _Pr > inline
 false_type _Equal_memcmp_is_safe ( const _Iter1 &, const _Iter2 &, const _Pr & )
 {
 return { };
 }
#line 2900
template < class _Obj1,
 class _Obj2,
 class _Pr > inline
 typename _Equal_memcmp_is_safe_helper <
  remove_const_t < _Obj1 >,
  remove_const_t < _Obj2 >,
  _Pr > :: type
  _Equal_memcmp_is_safe ( _Obj1 * const &, _Obj2 * const &, const _Pr & )
 {
 return { };
 }
#line 2912
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool _Equal_unchecked1 ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr & _Pred, false_type )
 {
 for (; _First1 != _Last1; ++ _First1, ( void ) ++ _First2 )
  if ( ! _Pred ( * _First1, * _First2 ) )
   return ( false );
 return ( true );
 }
#line 2924
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool _Equal_unchecked1 ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr &, true_type )
 {
 const char * const _First1_ch = reinterpret_cast < const char * > ( _First1 );
 const char * const _First2_ch = reinterpret_cast < const char * > ( _First2 );
 const size_t _Count = reinterpret_cast < const char * > ( _Last1 ) - _First1_ch;
 return ( :: memcmp ( _First1_ch, _First2_ch, _Count ) == 0 );
 }
#line 2936
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool _Equal_unchecked ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr & _Pred )
 {
 return ( _Equal_unchecked1 ( _First1, _Last1, _First2, _Pred,
  _Equal_memcmp_is_safe ( _First1, _First2, _Pred ) ) );
 }
#line 2946
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool _Equal_no_deprecate1 ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr & _Pred, input_iterator_tag, input_iterator_tag )
 {
 return ( _Equal_unchecked ( _First1, _Last1, _Unchecked_idl0 ( _First2 ), _Pred ) );
 }
#line 2955
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool _Equal_no_deprecate1 ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr & _Pred, random_access_iterator_tag, random_access_iterator_tag )
 {
 ;
 return ( _Equal_unchecked ( _First1, _Last1, _Unchecked ( _First2 ), _Pred ) );
 }
#line 2965
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool _Equal_no_deprecate ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr & _Pred )
 {
 ;
 ;
 return ( _Equal_no_deprecate1 ( _Unchecked ( _First1 ), _Unchecked ( _Last1 ),
  _First2, _Pred, _Iter_cat_t < _InIt1 > ( ), _Iter_cat_t < _InIt2 > ( ) ) );
 }
#line 2977
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool equal ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr _Pred )
 {
 struct _Unchecked_iterators { static void _Deprecate ( false_type ) { } static void _Deprecate ( true_type ) { } }; ( _Unchecked_iterators :: _Deprecate ( _Is_checked ( _First2 ) ) );
 return ( _Equal_no_deprecate ( _First1, _Last1, _First2, _Pred ) );
 }
#line 3002 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt1,
 class _InIt2 > inline
 bool equal ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2 )
 {
 return ( :: std :: equal ( _First1, _Last1, _First2,
  equal_to < > ( ) ) );
 }
#line 3024 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool _Equal_unchecked ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr & _Pred,
   input_iterator_tag, input_iterator_tag )
 {

 ;
 for (; _First1 != _Last1 && _First2 != _Last2; ++ _First1, ( void ) ++ _First2 )
  if ( ! _Pred ( * _First1, * _First2 ) )
   return ( false );
 return ( _First1 == _Last1 && _First2 == _Last2 );
 }
#line 3039
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool _Equal_unchecked ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr & _Pred,
   random_access_iterator_tag, random_access_iterator_tag )
 {

 if ( _Last1 - _First1 != _Last2 - _First2 )
  return ( false );
 ;
 return ( _Equal_unchecked ( _First1, _Last1, _First2, _Pred ) );
 }
#line 3053
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool equal ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr _Pred )
 {
 ;
 ;
 return ( _Equal_unchecked ( _Unchecked ( _First1 ), _Unchecked ( _Last1 ),
  _Unchecked ( _First2 ), _Unchecked ( _Last2 ), _Pred,
   _Iter_cat_t < _InIt1 > ( ), _Iter_cat_t < _InIt2 > ( ) ) );
 }
#line 3067
template < class _InIt1,
 class _InIt2 > inline
 bool equal ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2 )
 {
 return ( :: std :: equal ( _First1, _Last1, _First2, _Last2,
  equal_to < > ( ) ) );
 }
#line 3077
template< class _Elem1, class 
#line 3078
_Elem2, class 
#line 3079
_FTy> 
#line 3080
struct _Lex_compare_check_element_types_helper : public conjunction< _Is_character< _Elem1> , _Is_character< _Elem2> , _Is_character< _FTy> , is_unsigned< _FTy> > ::type { 
#line 3088
}; 
#line 3090
template< class _Elem1, class 
#line 3091
_Elem2> 
#line 3092
struct _Lex_compare_check_element_types_helper< _Elem1, _Elem2, void>  : public conjunction< _Is_character< _Elem1> , _Is_character< _Elem2> , is_unsigned< _Elem1> , is_unsigned< _Elem2> > ::type { 
#line 3100
}; 
#line 3102
template< class _Memcmp_pr> 
#line 3103
struct _Lex_compare_optimize { 
#line 3105
}; 
#line 3107
template< class _Memcmp_pr, class 
#line 3108
_Obj1, class 
#line 3109
_Obj2, class 
#line 3110
_FTy> using _Lex_compare_check_element_types = _Lex_compare_optimize< conditional_t< _Lex_compare_check_element_types_helper< remove_const_t< _Obj1> , remove_const_t< _Obj2> , _FTy> ::value, _Memcmp_pr, void> > ; 
#line 3115
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 _Lex_compare_optimize < void > _Lex_compare_memcmp_classify ( const _InIt1 &, const _InIt2 &, const _Pr & )
 {

 return { };
 }
#line 3124
template < class _Obj1,
 class _Obj2,
 class _FTy > inline
 _Lex_compare_check_element_types < less < int >, _Obj1, _Obj2, _FTy >
  _Lex_compare_memcmp_classify ( _Obj1 * const &, _Obj2 * const &, const less < _FTy > & )
 {
 return { };
 }
#line 3133
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool _Lex_compare_unchecked1 ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr & _Pred, _Lex_compare_optimize < void > )
 {
 for (; _First1 != _Last1 && _First2 != _Last2; ++ _First1, ( void ) ++ _First2 )
  {
  if ( _Pred ( * _First1, * _First2 ) )
   return ( true );
  else if ( _Pred ( * _First2, * _First1 ) )
   return ( false );
  }

 return ( _First1 == _Last1 && _First2 != _Last2 );
 }
#line 3150
template < class _InIt1,
 class _InIt2,
 class _Pr,
 class _Memcmp_pr > inline
 bool _Lex_compare_unchecked1 ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr &, _Lex_compare_optimize < _Memcmp_pr > )
 {
 const size_t _Num1 = _Last1 - _First1;
 const size_t _Num2 = _Last2 - _First2;
 const int _Ans = :: memcmp ( _First1, _First2, _Num1 < _Num2 ? _Num1 : _Num2 );
 return ( _Memcmp_pr { } ( _Ans, 0 ) || _Ans == 0 && _Num1 < _Num2 );
 }
#line 3163
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool _Lex_compare_unchecked ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr & _Pred )
 {
 return ( _Lex_compare_unchecked1 ( _First1, _Last1, _First2, _Last2, _Pred,
  _Lex_compare_memcmp_classify ( _First1, _First2, _Pred ) ) );
 }
#line 3173
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool lexicographical_compare ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr _Pred )
 {
 ;
 ;
 ;
 return ( _Lex_compare_unchecked ( _Unchecked ( _First1 ), _Unchecked ( _Last1 ),
  _Unchecked ( _First2 ), _Unchecked ( _Last2 ), _Pred ) );
 }
#line 3187
template < class _InIt1,
 class _InIt2 > inline
 bool lexicographical_compare ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2 )
 {
 return ( :: std :: lexicographical_compare ( _First1, _Last1,
  _First2, _Last2, less < > ( ) ) );
 }
#line 3197
template < class _Ty > inline
 bool _Within_limits ( const _Ty & _Val, true_type, true_type, _Any_tag )
 {
 return ( ( - 128 ) <= _Val && _Val <= 127 );
 }
#line 3203
template < class _Ty > inline
 bool _Within_limits ( const _Ty & _Val, true_type, false_type, true_type )
 {
 return ( _Val <= 127 || static_cast < _Ty > ( ( - 128 ) ) <= _Val );
 }
#line 3209
template < class _Ty > inline
 bool _Within_limits ( const _Ty & _Val, true_type, false_type, false_type )
 {
 return ( _Val <= 127 );
 }
#line 3215
template < class _Ty > inline
 bool _Within_limits ( const _Ty & _Val, false_type, true_type, _Any_tag )
 {
 return ( 0 <= _Val && _Val <= 255 );
 }
#line 3221
template < class _Ty > inline
 bool _Within_limits ( const _Ty & _Val, false_type, false_type, _Any_tag )
 {
 return ( _Val <= 255 );
 }
#line 3227
template < class _InIt,
 class _Ty > inline
 bool _Within_limits ( _InIt, const _Ty & _Val )
 {
 typedef typename remove_pointer < _InIt > :: type _Elem;
 return ( _Within_limits ( _Val, is_signed < _Elem > ( ), is_signed < _Ty > ( ),
  integral_constant < bool, - 1 == static_cast < _Ty > ( - 1 ) > ( ) ) );
 }
#line 3236
template < class _InIt > inline
 bool _Within_limits ( _InIt, const bool & )
 {
 return ( true );
 }
#line 3242
template < class _InIt,
 class _Ty > inline
 _InIt _Find_unchecked1 ( _InIt _First, _InIt _Last, const _Ty & _Val, true_type )
 {
 if ( ! _Within_limits ( _First, _Val ) )
  return ( _Last );
 _First = static_cast < _InIt > ( :: memchr (
  _First, static_cast < unsigned char > ( _Val ), _Last - _First ) );
 return ( _First ? _First : _Last );
 }
#line 3253
template < class _InIt,
 class _Ty > inline
 _InIt _Find_unchecked1 ( _InIt _First, _InIt _Last, const _Ty & _Val, false_type )
 {
 for (; _First != _Last; ++ _First )
  if ( * _First == _Val )
   break;
 return ( _First );
 }
#line 3263
template < class _InIt,
 class _Ty > inline
 _InIt _Find_unchecked ( _InIt _First, _InIt _Last, const _Ty & _Val )
 {

 typedef integral_constant < bool,
  ( is_same < _InIt, char * > :: value
  || is_same < _InIt, signed char * > :: value
  || is_same < _InIt, unsigned char * > :: value
  || is_same < _InIt, const char * > :: value
  || is_same < _InIt, const signed char * > :: value
  || is_same < _InIt, const unsigned char * > :: value )
  && is_integral < _Ty > :: value
 > _Memchr_opt;
 return ( _Find_unchecked1 ( _First, _Last, _Val, _Memchr_opt ( ) ) );
 }
#line 3280
template < class _InIt,
 class _Ty > inline
 _InIt find ( _InIt _First, _InIt _Last, const _Ty & _Val )
 {
 ;
 return ( _Rechecked ( _First,
  _Find_unchecked ( _Unchecked ( _First ), _Unchecked ( _Last ), _Val ) ) );
 }
#line 3290
template < class _InIt,
 class _Ty,
 class _Pr > inline
 _InIt _Find_pr ( _InIt _First, _InIt _Last, const _Ty & _Val, _Pr & _Pred )
 {
 for (; _First != _Last; ++ _First )
  if ( _Pred ( * _First, _Val ) )
   break;
 return ( _First );
 }
#line 3302
template < class _InIt,
 class _Ty > inline
 _Iter_diff_t < _InIt >
  _Count_unchecked ( _InIt _First, _InIt _Last, const _Ty & _Val )
 {
 _Iter_diff_t < _InIt > _Count = 0;

 for (; _First != _Last; ++ _First )
  if ( * _First == _Val )
   ++ _Count;
 return ( _Count );
 }
#line 3315
template < class _InIt,
 class _Ty > inline
 _Iter_diff_t < _InIt >
  count ( _InIt _First, _InIt _Last, const _Ty & _Val )
 {
 ;
 return ( _Count_unchecked ( _Unchecked ( _First ), _Unchecked ( _Last ), _Val ) );
 }
#line 3325
template < class _InIt,
 class _Ty,
 class _Pr > inline
 _Iter_diff_t < _InIt >
  _Count_pr ( _InIt _First, _InIt _Last, const _Ty & _Val, _Pr & _Pred )
 {
 _Iter_diff_t < _InIt > _Count = 0;

 for (; _First != _Last; ++ _First )
  if ( _Pred ( * _First, _Val ) )
   ++ _Count;
 return ( _Count );
 }
#line 3340
template < class _FwdIt1,
 class _FwdIt2,
 class _Pr > inline
 void _Trim_matching_suffixes ( _FwdIt1 &, _FwdIt2 &, _Pr &,
  forward_iterator_tag, forward_iterator_tag )
 {
 }
#line 3348
template < class _FwdIt1,
 class _FwdIt2,
 class _Pr > inline
 void _Trim_matching_suffixes ( _FwdIt1 & _Last1, _FwdIt2 & _Last2, _Pr & _Pred,
  bidirectional_iterator_tag, bidirectional_iterator_tag )
 {

 while ( _Pred ( * -- _Last1, * -- _Last2 ) )
  ;
 ++ _Last1;
 ++ _Last2;
 }
#line 3362
template < class _FwdIt1,
 class _FwdIt2,
 class _Pr > inline
 bool _Check_match_counts ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr & _Pred )
 {
 _Trim_matching_suffixes ( _Last1, _Last2, _Pred,
  _Iter_cat_t < _FwdIt1 > ( ), _Iter_cat_t < _FwdIt2 > ( ) );
 for ( _FwdIt1 _Next1 = _First1; _Next1 != _Last1; ++ _Next1 )
  if ( _Next1 == _Find_pr ( _First1, _Next1, * _Next1, _Pred ) )
   {
   _Iter_diff_t < _FwdIt2 > _Count2 = _Count_pr ( _First2, _Last2, * _Next1, _Pred );
   if ( _Count2 == 0 )
    return ( false );
   _FwdIt1 _Skip1 = :: std :: next ( _Next1 );
   _Iter_diff_t < _FwdIt1 > _Count1 = _Count_pr ( _Skip1, _Last1, * _Next1, _Pred ) + 1;
   if ( _Count2 != _Count1 )
    return ( false );
   }

 return ( true );
 }
#line 3386
template < class _FwdIt1,
 class _FwdIt2,
 class _Pr > inline
 bool _Is_permutation_unchecked ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _Pr & _Pred )
 {
 for (; _First1 != _Last1; ++ _First1, ( void ) ++ _First2 )
  if ( ! _Pred ( * _First1, * _First2 ) )
   {
   _FwdIt2 _Last2 = :: std :: next ( _First2,
    :: std :: distance ( _First1, _Last1 ) );
   return ( _Check_match_counts ( _First1, _Last1,
    _First2, _Last2, _Pred ) );
   }

 return ( true );
 }
#line 3404
template < class _FwdIt1,
 class _FwdIt2,
 class _Pr > inline
 bool _Is_permutation_no_deprecate1 ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _Pr & _Pred, forward_iterator_tag, forward_iterator_tag )
 {
 return ( _Is_permutation_unchecked ( _First1, _Last1, _Unchecked_idl0 ( _First2 ), _Pred ) );
 }
#line 3413
template < class _FwdIt1,
 class _FwdIt2,
 class _Pr > inline
 bool _Is_permutation_no_deprecate1 ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _Pr & _Pred, random_access_iterator_tag, random_access_iterator_tag )
 {
 ;
 return ( _Is_permutation_unchecked ( _First1, _Last1, _Unchecked ( _First2 ), _Pred ) );
 }
#line 3423
template < class _FwdIt1,
 class _FwdIt2,
 class _Pr > inline
 bool _Is_permutation_no_deprecate ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _Pr & _Pred )
 {
 ;
 ;
 return ( _Is_permutation_no_deprecate1 ( _Unchecked ( _First1 ), _Unchecked ( _Last1 ),
  _First2, _Pred, _Iter_cat_t < _FwdIt1 > ( ), _Iter_cat_t < _FwdIt2 > ( ) ) );
 }
#line 3435
template < class _FwdIt1,
 class _FwdIt2,
 class _Pr > inline
 bool is_permutation ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _Pr _Pred )
 {
 struct _Unchecked_iterators { static void _Deprecate ( false_type ) { } static void _Deprecate ( true_type ) { } }; ( _Unchecked_iterators :: _Deprecate ( _Is_checked ( _First2 ) ) );
 return ( _Is_permutation_no_deprecate ( _First1, _Last1, _First2, _Pred ) );
 }
#line 3460 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt1,
 class _FwdIt2 > inline
 bool is_permutation ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2 )
 {
 return ( :: std :: is_permutation ( _First1, _Last1,
  _First2, equal_to < > ( ) ) );
 }
#line 3482 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt1,
 class _FwdIt2,
 class _Pr > inline
 bool _Is_permutation_unchecked ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr & _Pred,
  forward_iterator_tag, forward_iterator_tag )
 {

 ;
 for (; _First1 != _Last1 && _First2 != _Last2; ++ _First1, ( void ) ++ _First2 )
  if ( ! _Pred ( * _First1, * _First2 ) )
   {
   if ( :: std :: distance ( _First1, _Last1 )
    != :: std :: distance ( _First2, _Last2 ) )
    return ( false );
   else
    return ( _Check_match_counts ( _First1, _Last1,
     _First2, _Last2, _Pred ) );
   }

 return ( _First1 == _Last1 && _First2 == _Last2 );
 }
#line 3505
template < class _FwdIt1,
 class _FwdIt2,
 class _Pr > inline
 bool _Is_permutation_unchecked ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr & _Pred,
  random_access_iterator_tag, random_access_iterator_tag )
 {

 if ( _Last1 - _First1 != _Last2 - _First2 )
  return ( false );
 ;
 return ( _Is_permutation_unchecked ( _First1, _Last1, _First2, _Pred ) );
 }
#line 3519
template < class _FwdIt1,
 class _FwdIt2,
 class _Pr > inline
 bool is_permutation ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred )
 {

 ;
 ;
 return ( _Is_permutation_unchecked ( _Unchecked ( _First1 ), _Unchecked ( _Last1 ),
  _Unchecked ( _First2 ), _Unchecked ( _Last2 ), _Pred,
  _Iter_cat_t < _FwdIt1 > ( ), _Iter_cat_t < _FwdIt2 > ( ) ) );
 }
#line 3534
template < class _FwdIt1,
 class _FwdIt2 > inline
 bool is_permutation ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2 )
 {
 return ( :: std :: is_permutation ( _First1, _Last1,
  _First2, _Last2, equal_to < > ( ) ) );
 }
#line 3544
template < class _BidIt > inline
 void _Reverse_unchecked ( _BidIt _First, _BidIt _Last )
 {
 for (; _First != _Last && _First != -- _Last; ++ _First )
  :: std :: iter_swap ( _First, _Last );
 }
#line 3551
template < class _BidIt > inline
 void reverse ( _BidIt _First, _BidIt _Last )
 {
 ;
 _Reverse_unchecked ( _Unchecked ( _First ), _Unchecked ( _Last ) );
 }
#line 3559
template < class _FwdIt > inline
 _FwdIt _Rotate_unchecked1 ( _FwdIt _First, _FwdIt _Mid, _FwdIt _Last,
  forward_iterator_tag )
 {
 for ( _FwdIt _Next = _Mid, _Res = _Last;; )
  {
  :: std :: iter_swap ( _First, _Next );
  if ( ++ _First == _Mid )
   {
   if ( ++ _Next == _Last )
    return ( _Res == _Last ? _Mid : _Res );
   else
    _Mid = _Next;
   }
  else if ( ++ _Next == _Last )
   {
   if ( _Res == _Last )
    _Res = _First;
   _Next = _Mid;
   }
  }
 }
#line 3582
template < class _BidIt > inline
 pair < _BidIt, _BidIt > _Reverse_until_sentinel_unchecked (
  _BidIt _First, _BidIt _Sentinel, _BidIt _Last )
 {
 while ( _First != _Sentinel && _Last != _Sentinel )
  :: std :: iter_swap ( _First ++, -- _Last );
 return ( :: std :: make_pair ( _First, _Last ) );
 }
#line 3591
template < class _BidIt > inline
 _BidIt _Rotate_unchecked1 ( _BidIt _First, _BidIt _Mid, _BidIt _Last,
  bidirectional_iterator_tag )
 {
 _Reverse_unchecked ( _First, _Mid );
 _Reverse_unchecked ( _Mid, _Last );
 pair < _BidIt, _BidIt > _Tmp = _Reverse_until_sentinel_unchecked ( _First, _Mid, _Last );
 _Reverse_unchecked ( _Tmp . first, _Tmp . second );
 return ( _Mid != _Tmp . first ? _Tmp . first : _Tmp . second );
 }
#line 3602
template < class _RanIt > inline
 _RanIt _Rotate_unchecked1 ( _RanIt _First, _RanIt _Mid, _RanIt _Last,
  random_access_iterator_tag )
 {
 _Reverse_unchecked ( _First, _Mid );
 _Reverse_unchecked ( _Mid, _Last );
 _Reverse_unchecked ( _First, _Last );
 return ( _First + ( _Last - _Mid ) );
 }
#line 3612
template < class _FwdIt > inline
 _FwdIt _Rotate_unchecked ( _FwdIt _First, _FwdIt _Mid, _FwdIt _Last )
 {
 if ( _First == _Mid )
  return ( _Last );
 if ( _Mid == _Last )
  return ( _First );
 return ( _Rotate_unchecked1 ( _First, _Mid, _Last, _Iter_cat_t < _FwdIt > ( ) ) );
 }
#line 3622
template < class _FwdIt > inline
 _FwdIt rotate ( _FwdIt _First, _FwdIt _Mid, _FwdIt _Last )
 {
 ;
 ;
 return ( _Rechecked ( _First,
  _Rotate_unchecked ( _Unchecked ( _First ), _Unchecked ( _Mid ),
  _Unchecked ( _Last ) ) ) );
 }
#line 3633
template < class _Diff,
 class _Urng >
 class _Rng_from_urng
 {
public :
 typedef typename make_unsigned < _Diff > :: type _Ty0;
 typedef typename _Urng :: result_type _Ty1;

 typedef typename _If < sizeof ( _Ty1 ) < sizeof ( _Ty0 ),
  _Ty0, _Ty1 > :: type _Udiff;


 explicit _Rng_from_urng ( _Urng & _Func )
  : _Ref ( _Func ), _Bits ( 8 * sizeof ( _Udiff ) ), _Bmask ( _Udiff ( - 1 ) )
  {
  for (; ( _Urng :: max ) ( ) - ( _Urng :: min ) ( ) < _Bmask; _Bmask >>= 1 )
   -- _Bits;
  }

 _Diff operator ( ) ( _Diff _Index )
  {
  for (;; )
   {
   _Udiff _Ret = 0;
   _Udiff _Mask = 0;

   while ( _Mask < _Udiff ( _Index - 1 ) )
    {
    _Ret <<= _Bits - 1;
    _Ret <<= 1;
    _Ret |= _Get_bits ( );
    _Mask <<= _Bits - 1;
    _Mask <<= 1;
    _Mask |= _Bmask;
    }


   if ( _Ret / _Index < _Mask / _Index
    || _Mask % _Index == _Udiff ( _Index - 1 ) )
    return ( _Ret % _Index );
   }
  }

 _Udiff _Get_all_bits ( )
  {
  _Udiff _Ret = 0;

  for ( size_t _Num = 0; _Num < 8 * sizeof ( _Udiff );
   _Num += _Bits )
   {
   _Ret <<= _Bits - 1;
   _Ret <<= 1;
   _Ret |= _Get_bits ( );
   }

  return ( _Ret );
  }

 _Rng_from_urng ( const _Rng_from_urng & ) = delete;
 _Rng_from_urng & operator = ( const _Rng_from_urng & ) = delete;

private :
 _Udiff _Get_bits ( )
  {
  for (;; )
   {
   _Udiff _Val = _Ref ( ) - ( _Urng :: min ) ( );

   if ( _Val <= _Bmask )
    return ( _Val );
   }
  }

 _Urng & _Ref;
 size_t _Bits;
 _Udiff _Bmask;
 };
#line 3712
template < class _Elem >
 class __declspec ( dllimport ) _Yarn
 {
public :
 typedef _Yarn < _Elem > _Myt;

  _Yarn ( )
  : _Myptr ( 0 ), _Nul ( 0 )
  {
  }

  _Yarn ( const _Myt & _Right )
  : _Myptr ( 0 ), _Nul ( 0 )
  {
  * this = _Right;
  }

  _Yarn ( const _Elem * _Right )
  : _Myptr ( 0 ), _Nul ( 0 )
  {
  * this = _Right;
  }

 _Myt & operator = ( const _Myt & _Right )
  {
  return ( * this = _Right . _Myptr );
  }

 _Myt & operator = ( const _Elem * _Right )
  {
  if ( _Myptr != _Right )
   {
   _Tidy ( );

   if ( _Right != 0 )
    {
    const _Elem * _Ptr = _Right;
    while ( * _Ptr != ( _Elem ) 0 )
     ++ _Ptr;
    size_t _Count = ( ( const char * ) ++ _Ptr - ( const char * ) _Right );






    _Myptr = ( _Elem * ) :: malloc ( _Count );


    if ( _Myptr != 0 )
     :: memcpy ( _Myptr, _Right, _Count );
    }
   }

  return ( * this );
  }

  ~ _Yarn ( ) noexcept
  {
  _Tidy ( );
  }

 bool empty ( ) const
  {
  return ( _Myptr == 0 );
  }

 const _Elem * c_str ( ) const
  {
  return ( _Myptr != 0 ? _Myptr : & _Nul );
  }

 bool _Empty ( ) const
  {
  return ( _Myptr == 0 );
  }

 const _Elem * _C_str ( ) const
  {
  return ( _Myptr != 0 ? _Myptr : & _Nul );
  }

private :
 void _Tidy ( )
  {
  if ( _Myptr != 0 )





   :: free ( _Myptr );


  _Myptr = 0;
  }

 _Elem * _Myptr;
 _Elem _Nul;
 };
#line 3814 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Ty, class 
#line 3815
_Alloc> 
#line 3816
struct _Has_allocator_type { 
#line 3818
template< class _Uty> static auto _Fn(int)->is_convertible< _Alloc, typename _Uty::allocator_type> ; 
#line 3822
template< class _Uty> static auto _Fn(_Wrap_int)->false_type; 
#line 3826
typedef decltype((_Fn< _Ty> (0))) type; 
#line 3827
}; 
#line 3830
struct allocator_arg_t { 
#line 3832
}; 
#line 3834
constexpr allocator_arg_t allocator_arg{}; 
#line 3836
[[noreturn]] __declspec(dllimport) void __cdecl _Xbad_alloc(); 
#line 3837
[[noreturn]] __declspec(dllimport) void __cdecl _Xinvalid_argument(const char *); 
#line 3838
[[noreturn]] __declspec(dllimport) void __cdecl _Xlength_error(const char *); 
#line 3839
[[noreturn]] __declspec(dllimport) void __cdecl _Xout_of_range(const char *); 
#line 3840
[[noreturn]] __declspec(dllimport) void __cdecl _Xoverflow_error(const char *); 
#line 3841
[[noreturn]] __declspec(dllimport) void __cdecl _Xruntime_error(const char *); 
#line 3842
}
#line 3844
namespace std { 
#line 3846
template< class _Ty, class 
#line 3847
_Alloc> 
#line 3848
struct uses_allocator : public _Has_allocator_type< _Ty, _Alloc> ::type { 
#line 3851
}; 
#line 3854
template< class _Ty, class 
#line 3855
_Alloc> constexpr bool 
#line 3856
uses_allocator_v = (uses_allocator< _Ty, _Alloc> ::value); 
#line 3858 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}
#line 3860
#pragma warning(pop)
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
#pragma warning(push,3)
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
#pragma warning(disable: 4100)
#line 3861 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
#pragma pack ( pop )
#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
#pragma pack ( push, 8 )
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
namespace std { 
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
__declspec(allocator) inline void *_Allocate(size_t _Count, size_t _Sz, bool 
#line 47
_Try_aligned_allocation = true) 
#line 48
{ 
#line 49
void *_Ptr = (0); 
#line 51
if (_Count == (0)) { 
#line 52
return _Ptr; }  
#line 55
if ((((size_t)(-1)) / _Sz) < _Count) { 
#line 56
_Xbad_alloc(); }  
#line 57
const size_t _User_size = _Count * _Sz; 
#line 60
if (_Try_aligned_allocation && ((4096) <= _User_size)) 
#line 62
{ 
#line 63
static_assert((sizeof(void *) < (32)), "Big allocations should at least match vector register size");
#line 65
const size_t _Block_size = ((sizeof(void *) + (32)) - (1)) + _User_size; 
#line 66
if (_Block_size <= _User_size) { 
#line 67
_Xbad_alloc(); }  
#line 68
const uintptr_t _Ptr_container = reinterpret_cast< uintptr_t>(::operator new(_Block_size)); 
#line 70
{ if (!(_Ptr_container != (0))) { (void)0; ::_invalid_parameter_noinfo_noreturn(); }  ; } ; 
#line 71
_Ptr = (reinterpret_cast< void *>((_Ptr_container + ((sizeof(void *) + (32)) - (1))) & (~(32 - 1)))); 
#line 73
((static_cast< uintptr_t *>(_Ptr))[-1]) = _Ptr_container; 
#line 78
} else 
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
{ 
#line 83
_Ptr = ::operator new(_User_size); 
#line 84
{ if (!(_Ptr != (0))) { (void)0; ::_invalid_parameter_noinfo_noreturn(); }  ; } ; 
#line 85
}  
#line 86
return _Ptr; 
#line 87
} 
#line 91
inline void _Deallocate(void *_Ptr, size_t _Count, size_t _Sz) 
#line 92
{ 
#line 94
{ if (!(_Count <= (((size_t)(-1)) / _Sz))) { (void)0; ::_invalid_parameter_noinfo_noreturn(); }  ; } ; 
#line 95
const size_t _User_size = _Count * _Sz; 
#line 96
if ((4096) <= _User_size) 
#line 97
{ 
#line 98
const uintptr_t _Ptr_user = reinterpret_cast< uintptr_t>(_Ptr); 
#line 99
{ if (!((_Ptr_user & (32 - 1)) == (0))) { (void)0; ::_invalid_parameter_noinfo_noreturn(); }  ; } ; 
#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *); 
#line 102
const uintptr_t _Ptr_container = *(reinterpret_cast< uintptr_t *>(_Ptr_ptr)); 
#line 114
{ if (!(_Ptr_container < _Ptr_user)) { (void)0; ::_invalid_parameter_noinfo_noreturn(); }  ; } ; 
#line 121
{ if (!(sizeof(void *) <= (_Ptr_user - _Ptr_container))) { (void)0; ::_invalid_parameter_noinfo_noreturn(); }  ; } ; 
#line 125 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
{ if (!((_Ptr_user - _Ptr_container) <= ((sizeof(void *) + (32)) - (1)))) { (void)0; ::_invalid_parameter_noinfo_noreturn(); }  ; } ; 
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Ptr = (reinterpret_cast< void *>(_Ptr_container)); 
#line 129
}  
#line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
::operator delete(_Ptr); 
#line 133
} 
#line 136
template < class _Ty1,
 class _Ty2 > inline
 void _Construct ( _Ty1 * _Ptr, _Ty2 && _Val )
 {
 void * _Vptr = _Ptr;
 :: new ( _Vptr ) _Ty1 ( :: std :: forward < _Ty2 > ( _Val ) );
 }
#line 144
template < class _Ty1 > inline
 void _Construct ( _Ty1 * _Ptr )
 {
 void * _Vptr = _Ptr;

 :: new ( _Vptr ) _Ty1 ( );
 }
#line 153
template< class _Alty> 
#line 154
struct _Is_simple_alloc : public _Cat_base< ((((is_same< typename _Alty::size_type, unsigned __int64> ::value && is_same< typename _Alty::difference_type, __int64> ::value) && is_same< typename _Alty::pointer, typename _Alty::value_type *> ::value) && is_same< typename _Alty::const_pointer, const typename _Alty::value_type *> ::value) && is_same< typename _Alty::reference, typename _Alty::value_type &> ::value) && is_same< typename _Alty::const_reference, const typename _Alty::value_type &> ::value>  { 
#line 166
}; 
#line 169
template< class _Value_type> 
#line 170
struct _Simple_types { 
#line 172
typedef _Value_type value_type; 
#line 173
typedef size_t size_type; 
#line 174
typedef ptrdiff_t difference_type; 
#line 175
typedef value_type *pointer; 
#line 176
typedef const value_type *const_pointer; 
#line 177
typedef value_type &reference; 
#line 178
typedef const value_type &const_reference; 
#line 179
}; 
#line 182
template< class _Alty, class 
#line 183
_Pointer> 
#line 184
struct _Get_voidptr { 
#line 186
typedef typename _Alty::template rebind< void> ::other _Alvoid; 
#line 187
typedef typename _Alvoid::pointer type; 
#line 188
}; 
#line 190
template< class _Alty, class 
#line 191
_Ty> 
#line 192
struct _Get_voidptr< _Alty, _Ty *>  { 
#line 194
typedef void *type; 
#line 195
}; 
#line 198
template< class _Ty> struct _Get_first_parameter; 
#line 201
template< template< class , class ...>  class _Ty, class 
#line 202
_First, class ...
#line 203
_Rest> 
#line 204
struct _Get_first_parameter< _Ty< _First, _Rest...> >  { 
#line 206
typedef _First type; 
#line 207
}; 
#line 210
template< class _Newfirst, class 
#line 211
_Ty> struct _Replace_first_parameter; 
#line 214
template< class _Newfirst, 
#line 215
template< class , class ...>  class _Ty, class 
#line 216
_First, class ...
#line 217
_Rest> 
#line 218
struct _Replace_first_parameter< _Newfirst, _Ty< _First, _Rest...> >  { 
#line 220
typedef _Ty< _Newfirst, _Rest...>  type; 
#line 221
}; 
#line 224
template< class _Ty> 
#line 225
struct _Get_element_type { 
#line 226
template< class _Uty> static auto _Fn(int)->_Identity< typename _Uty::element_type> ; template< class _Uty> static auto _Fn(_Wrap_int)->_Identity< typename _Get_first_parameter< _Uty> ::type> ; typedef decltype((_Fn< _Ty> (0))) _Decltype; typedef typename _Decltype::type type; }; 
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Ty> 
#line 231
struct _Get_ptr_difference_type { 
#line 232
template< class _Uty> static auto _Fn(int)->_Identity< typename _Uty::difference_type> ; template< class _Uty> static auto _Fn(_Wrap_int)->_Identity< __int64> ; typedef decltype((_Fn< _Ty> (0))) _Decltype; typedef typename _Decltype::type type; }; 
#line 236 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Ty, class 
#line 237
_Other> 
#line 238
struct _Get_rebind_type { 
#line 239
template< class _Uty> static auto _Fn(int)->_Identity< typename _Uty::template rebind< _Other> ::other> ; template< class _Uty> static auto _Fn(_Wrap_int)->_Identity< typename _Replace_first_parameter< _Other, _Uty> ::type> ; typedef decltype((_Fn< _Ty> (0))) _Decltype; typedef typename _Decltype::type type; }; 
#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Ty >
 struct pointer_traits
 {
 typedef typename _Get_element_type < _Ty > :: type element_type;
 typedef _Ty pointer;
 typedef typename _Get_ptr_difference_type < _Ty > :: type difference_type;

 template < class _Other >
  using rebind = typename _Get_rebind_type < _Ty, _Other > :: type;

 typedef typename _If < is_void < element_type > :: value,
  char &,
  typename add_lvalue_reference < element_type > :: type > :: type _Reftype;

 static pointer pointer_to ( _Reftype _Val )
  {
  return ( _Ty :: pointer_to ( _Val ) );
  }
 };
#line 264
template < class _Ty >
 struct pointer_traits < _Ty * >
 {
 typedef _Ty element_type;
 typedef _Ty * pointer;
 typedef ptrdiff_t difference_type;

 template < class _Other >
  using rebind = _Other *;

 typedef typename _If < is_void < _Ty > :: value,
  char &,
  typename add_lvalue_reference < _Ty > :: type > :: type _Reftype;

 static pointer pointer_to ( _Reftype _Val )
  {
  return ( :: std :: addressof ( _Val ) );
  }
 };
#line 286
template < class _Ptrty > inline
 void _Destroy ( _Ptrty _Ptr )
 {
 typedef typename pointer_traits < _Ptrty > :: element_type _Ty;
 _Ptr -> ~ _Ty ( );
 }
#line 294
template < class _Ptrty > inline
 auto _Const_cast ( _Ptrty _Ptr )
 {
 using _Elem = typename pointer_traits < _Ptrty > :: element_type;
 using _Modifiable = remove_const_t < _Elem >;
 using _Dest = typename pointer_traits < _Ptrty > :: template rebind < _Modifiable >;

 return ( pointer_traits < _Dest > :: pointer_to ( const_cast < _Modifiable & > ( * _Ptr ) ) );
 }
#line 304
template < class _Ty > inline
 auto _Const_cast ( _Ty * _Ptr )
 {
 return ( const_cast < remove_const_t < _Ty > * > ( _Ptr ) );
 }
#line 312
template< class _Ty> 
#line 313
struct _Get_pointer_type { 
#line 314
template< class _Uty> static auto _Fn(int)->_Identity< typename _Uty::pointer> ; template< class _Uty> static auto _Fn(_Wrap_int)->_Identity< typename _Ty::value_type *> ; typedef decltype((_Fn< _Ty> (0))) _Decltype; typedef typename _Decltype::type type; }; 
#line 318 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Ty> 
#line 319
struct _Get_const_pointer_type { 
#line 320
template< class _Uty> static auto _Fn(int)->_Identity< typename _Uty::const_pointer> ; template< class _Uty> static auto _Fn(_Wrap_int)->_Identity< typename pointer_traits< typename _Get_pointer_type< _Ty> ::type> ::template rebind< const typename _Ty::value_type> > ; typedef decltype((_Fn< _Ty> (0))) _Decltype; typedef typename _Decltype::type type; }; 
#line 325 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Ty> 
#line 326
struct _Get_void_pointer_type { 
#line 327
template< class _Uty> static auto _Fn(int)->_Identity< typename _Uty::void_pointer> ; template< class _Uty> static auto _Fn(_Wrap_int)->_Identity< typename pointer_traits< typename _Get_pointer_type< _Ty> ::type> ::template rebind< void> > ; typedef decltype((_Fn< _Ty> (0))) _Decltype; typedef typename _Decltype::type type; }; 
#line 332 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Ty> 
#line 333
struct _Get_const_void_pointer_type { 
#line 334
template< class _Uty> static auto _Fn(int)->_Identity< typename _Uty::const_void_pointer> ; template< class _Uty> static auto _Fn(_Wrap_int)->_Identity< typename pointer_traits< typename _Get_pointer_type< _Ty> ::type> ::template rebind< const void> > ; typedef decltype((_Fn< _Ty> (0))) _Decltype; typedef typename _Decltype::type type; }; 
#line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Ty> 
#line 340
struct _Get_difference_type { 
#line 341
template< class _Uty> static auto _Fn(int)->_Identity< typename _Uty::difference_type> ; template< class _Uty> static auto _Fn(_Wrap_int)->_Identity< typename _Get_ptr_difference_type< typename _Get_pointer_type< _Ty> ::type> ::type> ; typedef decltype((_Fn< _Ty> (0))) _Decltype; typedef typename _Decltype::type type; }; 
#line 346 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Ty> 
#line 347
struct _Get_size_type { 
#line 348
template< class _Uty> static auto _Fn(int)->_Identity< typename _Uty::size_type> ; template< class _Uty> static auto _Fn(_Wrap_int)->_Identity< typename make_unsigned< typename _Get_difference_type< _Ty> ::type> ::type> ; typedef decltype((_Fn< _Ty> (0))) _Decltype; typedef typename _Decltype::type type; }; 
#line 353 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Ty> 
#line 354
struct _Get_propagate_on_container_copy { 
#line 355
template< class _Uty> static auto _Fn(int)->_Identity< typename _Uty::propagate_on_container_copy_assignment> ; template< class _Uty> static auto _Fn(_Wrap_int)->_Identity< integral_constant< bool, false> > ; typedef decltype((_Fn< _Ty> (0))) _Decltype; typedef typename _Decltype::type type; }; 
#line 359 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Ty> 
#line 360
struct _Get_propagate_on_container_move { 
#line 361
template< class _Uty> static auto _Fn(int)->_Identity< typename _Uty::propagate_on_container_move_assignment> ; template< class _Uty> static auto _Fn(_Wrap_int)->_Identity< integral_constant< bool, false> > ; typedef decltype((_Fn< _Ty> (0))) _Decltype; typedef typename _Decltype::type type; }; 
#line 365 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Ty> 
#line 366
struct _Get_propagate_on_container_swap { 
#line 367
template< class _Uty> static auto _Fn(int)->_Identity< typename _Uty::propagate_on_container_swap> ; template< class _Uty> static auto _Fn(_Wrap_int)->_Identity< integral_constant< bool, false> > ; typedef decltype((_Fn< _Ty> (0))) _Decltype; typedef typename _Decltype::type type; }; 
#line 371 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Ty> 
#line 372
struct _Get_is_always_equal { 
#line 373
template< class _Uty> static auto _Fn(int)->_Identity< typename _Uty::is_always_equal> ; template< class _Uty> static auto _Fn(_Wrap_int)->_Identity< typename is_empty< _Ty> ::type> ; typedef decltype((_Fn< _Ty> (0))) _Decltype; typedef typename _Decltype::type type; }; 
#line 377 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Ty> class allocator; 
#line 379
template < class _Alloc >
 struct _Wrap_alloc;
#line 382
template< class _Alloc> 
#line 383
struct _Unwrap_alloc { 
#line 385
typedef _Alloc type; 
#line 386
}; 
#line 388
template< class _Alloc> 
#line 389
struct _Unwrap_alloc< _Wrap_alloc< _Alloc> >  { 
#line 391
typedef _Alloc type; 
#line 392
}; 
#line 396
template< class _Alloc> using _Unwrap_alloc_t = typename _Unwrap_alloc< _Alloc> ::type; 
#line 401
template< class _Alloc, class 
#line 402
 = void> 
#line 403
struct _Is_default_allocator : public false_type { 
#line 406
}; 
#line 408
template< class _Ty> 
#line 409
struct _Is_default_allocator< allocator< _Ty> , typename allocator< _Ty> ::_Not_user_specialized>  : public true_type { 
#line 412
}; 
#line 415
struct _Alloc_allocate { 
#line 419
template < class _Alloc,
  class _Size_type,
  class _Const_void_pointer >
  static auto _Fn ( int, _Alloc & _Al,
   _Size_type _Count,
   _Const_void_pointer _Hint )
   -> decltype ( _Al . allocate ( _Count, _Hint ) )
  {
  return ( _Al . allocate ( _Count, _Hint ) );
  }
#line 430
template < class _Alloc,
  class _Size_type,
  class _Const_void_pointer >
  static auto _Fn ( _Wrap_int, _Alloc & _Al,
   _Size_type _Count,
   _Const_void_pointer )
   -> decltype ( _Al . allocate ( _Count ) )
  {
  return ( _Al . allocate ( _Count ) );
  }
#line 440
}; 
#line 443
struct _Has_no_alloc_construct_tag { 
#line 445
}; 
#line 447
template< class _Void, class ...
#line 448
_Types> 
#line 449
struct _Has_no_alloc_construct : public true_type { 
#line 452
}; 
#line 454
template< class _Alloc, class 
#line 455
_Ptr, class ...
#line 456
_Args> 
#line 457
struct _Has_no_alloc_construct< void_t< _Has_no_alloc_construct_tag, decltype(((std::declval< _Alloc &> ().construct(std::declval< _Ptr> (), std::declval< _Args> ()...))))> , _Alloc, _Ptr, _Args...>  : public false_type { 
#line 464
}; 
#line 466
template< class _Alloc, class 
#line 467
_Ptr, class ...
#line 468
_Args> using _Uses_default_construct = disjunction< _Is_default_allocator< _Alloc> , _Has_no_alloc_construct< void, _Alloc, _Ptr, _Args...> > ; 
#line 473
template< class _Alloc, class 
#line 474
_Ptr, class ...
#line 475
_Args> using _Uses_default_construct_t = typename disjunction< _Is_default_allocator< _Alloc> , _Has_no_alloc_construct< void, _Alloc, _Ptr, _Args...> > ::type; 
#line 480
struct _Has_no_alloc_destroy_tag { 
#line 482
}; 
#line 484
template< class _Alloc, class 
#line 485
_Ptr, class 
#line 486
 = void> 
#line 487
struct _Has_no_alloc_destroy : public true_type { 
#line 490
}; 
#line 492
template< class _Alloc, class 
#line 493
_Ptr> 
#line 494
struct _Has_no_alloc_destroy< _Alloc, _Ptr, void_t< _Has_no_alloc_destroy_tag, decltype(((std::declval< _Alloc &> ().destroy(std::declval< _Ptr> ()))))> >  : public false_type { 
#line 499
}; 
#line 501
template< class _Alloc, class 
#line 502
_Ptr> using _Uses_default_destroy = disjunction< _Is_default_allocator< _Alloc> , _Has_no_alloc_destroy< _Alloc, _Ptr> > ; 
#line 507
template< class _Alloc, class 
#line 508
_Ptr> using _Uses_default_destroy_t = typename disjunction< _Is_default_allocator< _Alloc> , _Has_no_alloc_destroy< _Alloc, _Ptr> > ::type; 
#line 513
struct _Alloc_max_size { 
#line 515
template < class _Ty >
  static auto _Fn ( int, const _Ty & _Al ) noexcept
   -> decltype ( _Al . max_size ( ) )
  {
  return ( _Al . max_size ( ) );
  }
#line 522
template < class _Ty >
  static auto _Fn ( _Wrap_int, const _Ty & ) noexcept
   -> typename _Get_size_type < _Ty > :: type
  {
  return ( ( numeric_limits < typename _Get_size_type < _Ty > :: type > :: max ) ( )
   / sizeof ( typename _Ty :: value_type ) );
  }
#line 529
}; 
#line 532
struct _Alloc_select { 
#line 536
template < class _Ty >
  static auto _Fn ( int, const _Ty & _Al )
   -> decltype ( ( _Ty ) _Al . select_on_container_copy_construction ( ) )
  {
  return ( _Al . select_on_container_copy_construction ( ) );
  }
#line 543
template < class _Ty >
  static auto _Fn ( _Wrap_int, const _Ty & _Al )
   -> _Ty
  {
  return ( _Al );
  }
#line 549
}; 
#line 552
template < class _Alloc >
 struct allocator_traits
 {
 typedef _Alloc allocator_type;
 typedef typename _Alloc :: value_type value_type;

 typedef typename _Get_pointer_type < _Alloc > :: type
  pointer;
 typedef typename _Get_const_pointer_type < _Alloc > :: type
  const_pointer;
 typedef typename _Get_void_pointer_type < _Alloc > :: type
  void_pointer;
 typedef typename _Get_const_void_pointer_type < _Alloc > :: type
  const_void_pointer;

 typedef typename _Get_size_type < _Alloc > :: type size_type;
 typedef typename _Get_difference_type < _Alloc > :: type difference_type;

 typedef typename _Get_propagate_on_container_copy < _Alloc > :: type
  propagate_on_container_copy_assignment;
 typedef typename _Get_propagate_on_container_move < _Alloc > :: type
  propagate_on_container_move_assignment;
 typedef typename _Get_propagate_on_container_swap < _Alloc > :: type
  propagate_on_container_swap;
 typedef typename _Get_is_always_equal < _Alloc > :: type
  is_always_equal;

 template < class _Other >
  using rebind_alloc = typename _Get_rebind_type < _Alloc, _Other > :: type;

 template < class _Other >
  using rebind_traits = allocator_traits < rebind_alloc < _Other > >;

 static __declspec ( allocator ) pointer allocate ( _Alloc & _Al, size_type _Count )
  {
  return ( _Al . allocate ( _Count ) );
  }

 static __declspec ( allocator ) pointer allocate ( _Alloc & _Al, size_type _Count,
  const_void_pointer _Hint )
  {
  return ( _Alloc_allocate :: _Fn ( 0, _Al, _Count, _Hint ) );
  }

 static void deallocate ( _Alloc & _Al,
  pointer _Ptr, size_type _Count )
  {
  _Al . deallocate ( _Ptr, _Count );
  }

 template < class _Ty,
  class ... _Types >
  static void _Construct1 ( true_type, _Alloc &, _Ty * _Ptr,
   _Types && ... _Args )
  {
  :: new ( static_cast < void * > ( _Ptr ) )
   _Ty ( :: std :: forward < _Types > ( _Args ) ... );
  }

 template < class _Ty,
  class ... _Types >
  static void _Construct1 ( false_type, _Alloc & _Al, _Ty * _Ptr,
   _Types && ... _Args )
  {
  _Al . construct ( _Ptr, :: std :: forward < _Types > ( _Args ) ... );
  }

 template < class _Ty,
  class ... _Types >
  static void construct ( _Alloc & _Al, _Ty * _Ptr,
   _Types && ... _Args )
  {
  _Construct1 ( _Uses_default_construct_t < _Unwrap_alloc_t < _Alloc >, _Ty *, _Types ... > ( ),
   _Al, _Ptr, :: std :: forward < _Types > ( _Args ) ... );
  }

 template < class _Ty >
  static void _Destroy1 ( _Alloc &, _Ty * _Ptr, true_type )
  {
  _Ptr -> ~ _Ty ( );
  }

 template < class _Ty >
  static void _Destroy1 ( _Alloc & _Al, _Ty * _Ptr, false_type )
  {
  _Al . destroy ( _Ptr );
  }

 template < class _Ty >
  static void destroy ( _Alloc & _Al, _Ty * _Ptr )
  {
  _Destroy1 ( _Al, _Ptr, _Uses_default_destroy_t < _Unwrap_alloc_t < _Alloc >, _Ty * > ( ) );
  }

 static size_type max_size ( const _Alloc & _Al ) noexcept
  {
  return ( _Alloc_max_size :: _Fn ( 0, _Al ) );
  }

 static _Alloc select_on_container_copy_construction (
  const _Alloc & _Al )
  {
  return ( _Alloc_select :: _Fn ( 0, _Al ) );
  }
 };
#line 659
template < class _Ty >
 class allocator
 {
public :
 static_assert ( ! is_const < _Ty > :: value,
  "The C++ Standard forbids containers of const elements because allocator<const T> is ill-formed."
                                             );

 typedef void _Not_user_specialized;

 typedef _Ty value_type;

 typedef value_type * pointer;
 typedef const value_type * const_pointer;

 typedef value_type & reference;
 typedef const value_type & const_reference;

 typedef size_t size_type;
 typedef ptrdiff_t difference_type;

 typedef true_type propagate_on_container_move_assignment;
 typedef true_type is_always_equal;

 template < class _Other >
  struct rebind
  {
  typedef allocator < _Other > other;
  };

 pointer address ( reference _Val ) const noexcept
  {
  return ( :: std :: addressof ( _Val ) );
  }

 const_pointer address ( const_reference _Val ) const noexcept
  {
  return ( :: std :: addressof ( _Val ) );
  }

 allocator ( ) noexcept
  {
  }

 allocator ( const allocator < _Ty > & ) noexcept
  {
  }

 template < class _Other >
  allocator ( const allocator < _Other > & ) noexcept
  {
  }

 template < class _Other >
  allocator < _Ty > & operator = ( const allocator < _Other > & )
  {
  return ( * this );
  }

 void deallocate ( pointer _Ptr, size_type _Count )
  {
  _Deallocate ( _Ptr, _Count, sizeof ( _Ty ) );
  }

 __declspec ( allocator ) pointer allocate ( size_type _Count )
  {
  return ( static_cast < pointer > ( _Allocate ( _Count, sizeof ( _Ty ) ) ) );
  }

 __declspec ( allocator ) pointer allocate ( size_type _Count, const void * )
  {
  return ( allocate ( _Count ) );
  }

 template < class _Objty,
  class ... _Types >
  void construct ( _Objty * _Ptr, _Types && ... _Args )
  {
  :: new ( ( void * ) _Ptr ) _Objty ( :: std :: forward < _Types > ( _Args ) ... );
  }


 template < class _Uty >
  void destroy ( _Uty * _Ptr )
  {
  _Ptr -> ~ _Uty ( );
  }

 size_t max_size ( ) const noexcept
  {
  return ( ( size_t ) ( - 1 ) / sizeof ( _Ty ) );
  }
 };
#line 755
#pragma pack(8)
template<> 
#line 755
class allocator< void>  { 
#line 758
public: typedef void _Not_user_specialized; 
#line 760
typedef void value_type; 
#line 762
typedef void *pointer; 
#line 763
typedef const void *const_pointer; 
#line 765
template< class _Other> 
#line 766
struct rebind { 
#line 768
typedef std::allocator< _Other>  other; 
#line 769
}; 
#line 771
allocator() noexcept 
#line 772
{ 
#line 773
} 
#line 775
allocator(const std::allocator< void>  &) noexcept 
#line 776
{ 
#line 777
} 
#line 779
template < class _Other >
  allocator ( const allocator < _Other > & ) noexcept
  {
  }
#line 784
template < class _Other >
  allocator < void > & operator = ( const allocator < _Other > & )
  {
  return ( * this );
  }
#line 789
}; 
#pragma pack(8)
template < class _Ty,
 class _Other > inline
 bool operator == ( const allocator < _Ty > &,
  const allocator < _Other > & ) noexcept
 {
 return ( true );
 }
#line 799
template < class _Ty,
 class _Other > inline
 bool operator != ( const allocator < _Ty > & _Left,
  const allocator < _Other > & _Right ) noexcept
 {
 return ( false );
 }
#line 808
template < class _Ty >
 struct allocator_traits < allocator < _Ty > >
 {
 typedef allocator < _Ty > _Alloc;

 typedef _Alloc allocator_type;
 typedef _Ty value_type;

 typedef value_type * pointer;
 typedef const value_type * const_pointer;
 typedef void * void_pointer;
 typedef const void * const_void_pointer;

 typedef size_t size_type;
 typedef ptrdiff_t difference_type;

 typedef false_type propagate_on_container_copy_assignment;
 typedef true_type propagate_on_container_move_assignment;
 typedef false_type propagate_on_container_swap;
 typedef true_type is_always_equal;

 template < class _Other >
  using rebind_alloc = allocator < _Other >;

 template < class _Other >
  using rebind_traits = allocator_traits < allocator < _Other > >;

 static __declspec ( allocator ) pointer allocate ( _Alloc & _Al, size_type _Count )
  {
  return ( _Al . allocate ( _Count ) );
  }

 static __declspec ( allocator ) pointer allocate ( _Alloc & _Al, size_type _Count,
  const_void_pointer _Hint )
  {
  return ( _Al . allocate ( _Count, _Hint ) );
  }

 static void deallocate ( _Alloc & _Al,
  pointer _Ptr, size_type _Count )
  {
  _Al . deallocate ( _Ptr, _Count );
  }

 template < class _Objty,
  class ... _Types >
  static void construct ( _Alloc & _Al, _Objty * _Ptr,
   _Types && ... _Args )
  {
  _Al . construct ( _Ptr, :: std :: forward < _Types > ( _Args ) ... );
  }


 template < class _Uty >
  static void destroy ( _Alloc & _Al, _Uty * _Ptr )
  {
  _Al . destroy ( _Ptr );
  }

 static size_type max_size ( const _Alloc & _Al ) noexcept
  {
  return ( _Al . max_size ( ) );
  }

 static _Alloc select_on_container_copy_construction (
  const _Alloc & _Al )
  {
  return ( _Al );
  }
 };
#line 880
template < class _Alloc >
 struct _Wrap_alloc
  : public _Alloc
 {
 typedef _Alloc _Mybase;
 typedef allocator_traits < _Alloc > _Mytraits;

 typedef typename _Mytraits :: value_type value_type;

 typedef typename _Mytraits :: pointer pointer;
 typedef typename _Mytraits :: const_pointer const_pointer;
 typedef typename _Mytraits :: void_pointer void_pointer;
 typedef typename _Mytraits :: const_void_pointer const_void_pointer;

 typedef typename _If < is_void < value_type > :: value,
  int, value_type > :: type & reference;
 typedef typename _If < is_void < const value_type > :: value,
  const int, const value_type > :: type & const_reference;

 typedef typename _Mytraits :: size_type size_type;
 typedef typename _Mytraits :: difference_type difference_type;

 typedef typename _Mytraits :: propagate_on_container_copy_assignment
  propagate_on_container_copy_assignment;
 typedef typename _Mytraits :: propagate_on_container_move_assignment
  propagate_on_container_move_assignment;
 typedef typename _Mytraits :: propagate_on_container_swap
  propagate_on_container_swap;
 typedef typename _Mytraits :: is_always_equal
  is_always_equal;

 _Wrap_alloc select_on_container_copy_construction ( _Nil = _Nil ( ) ) const
  {
  return ( _Mytraits :: select_on_container_copy_construction ( * this ) );
  }

 template < class _Other >
  struct rebind
  {
  typedef typename _Mytraits :: template rebind_alloc < _Other >
   _Other_alloc;
  typedef _Wrap_alloc < _Other_alloc > other;
  };

 pointer address ( reference _Val ) const
  {
  return ( pointer_traits < pointer > :: pointer_to ( _Val ) );
  }

 const_pointer address ( const_reference _Val ) const
  {
  return ( pointer_traits < const_pointer > :: pointer_to ( _Val ) );
  }

 _Wrap_alloc ( ) noexcept ( is_nothrow_default_constructible < _Alloc > :: value )
  : _Mybase ( )
  {
  }

 _Wrap_alloc ( const _Wrap_alloc & _Right ) noexcept
  : _Mybase ( _Right )
  {
  }

 _Wrap_alloc ( _Wrap_alloc && _Right ) noexcept
  : _Mybase ( :: std :: move ( _Right ) )
  {
  }

 template < class _Other >
  _Wrap_alloc ( _Other && _Right ) noexcept
  : _Mybase ( :: std :: forward < _Other > ( _Right ) )
  {
  }

 _Wrap_alloc & operator = ( const _Wrap_alloc & _Right )
  {
  _Mybase :: operator = ( _Right );
  return ( * this );
  }

 _Wrap_alloc & operator = ( _Wrap_alloc && _Right )
  {
  _Mybase :: operator = ( :: std :: move ( _Right ) );
  return ( * this );
  }

 template < class _Other >
  _Wrap_alloc & operator = ( _Other && _Right )
  {
  _Mybase :: operator = ( :: std :: forward < _Other > ( _Right ) );
  return ( * this );
  }

 __declspec ( allocator ) pointer allocate ( size_type _Count )
  {
  return ( _Mybase :: allocate ( _Count ) );
  }

 __declspec ( allocator ) pointer allocate ( size_type _Count,
  const_void_pointer _Hint, _Nil = _Nil ( ) )
  {
  return ( _Mytraits :: allocate ( * this, _Count, _Hint ) );
  }

 void deallocate ( pointer _Ptr, size_type _Count )
  {
  _Mybase :: deallocate ( _Ptr, _Count );
  }

 template < class _Ty,
  class ... _Types >
  void construct ( _Ty * _Ptr,
   _Types && ... _Args )
  {
  _Mytraits :: construct ( * this, _Ptr,
   :: std :: forward < _Types > ( _Args ) ... );
  }


 template < class _Ty >
  void destroy ( _Ty * _Ptr )
  {
  _Mytraits :: destroy ( * this, _Ptr );
  }

 size_type max_size ( _Nil = _Nil ( ) ) const noexcept
  {
  return ( _Mytraits :: max_size ( * this ) );
  }
 };
#line 1012
template < class _Ty,
 class _Other > inline
 bool operator == ( const _Wrap_alloc < _Ty > & _Left,
  const _Wrap_alloc < _Other > & _Right ) noexcept
 {
 return ( static_cast < const _Ty & > ( _Left )
  == static_cast < const _Other & > ( _Right ) );
 }
#line 1021
template < class _Ty,
 class _Other > inline
 bool operator != ( const _Wrap_alloc < _Ty > & _Left,
  const _Wrap_alloc < _Other > & _Right ) noexcept
 {
 return ( ! ( _Left == _Right ) );
 }
#line 1030
template < class _Alty > inline
 void _Pocca ( _Alty & _Left, const _Alty & _Right, true_type ) noexcept
 {
 _Left = _Right;
 }
#line 1036
template < class _Alty > inline
 void _Pocca ( _Alty &, const _Alty &, false_type ) noexcept
 {
 }
#line 1041
template < class _Alty > inline
 void _Pocca ( _Alty & _Left, const _Alty & _Right ) noexcept
 {
 typename _Alty :: propagate_on_container_copy_assignment _Tag;
 _Pocca ( _Left, _Right, _Tag );
 }
#line 1049
template < class _Alty > inline
 void _Pocma ( _Alty & _Left, _Alty & _Right, true_type ) noexcept
 {
 _Left = :: std :: move ( _Right );
 }
#line 1055
template < class _Alty > inline
 void _Pocma ( _Alty &, _Alty &, false_type ) noexcept
 {
 }
#line 1060
template < class _Alty > inline
 void _Pocma ( _Alty & _Left, _Alty & _Right ) noexcept
 {
 typename _Alty :: propagate_on_container_move_assignment _Tag;
 _Pocma ( _Left, _Right, _Tag );
 }
#line 1068
template < class _Alty > inline
 void _Pocs ( _Alty & _Left, _Alty & _Right, true_type ) noexcept
 {
 _Swap_adl ( _Left, _Right );
 }
#line 1074
template < class _Alty > inline
 void _Pocs ( _Alty & _Left, _Alty & _Right, false_type ) noexcept
 {
 if ( _Left != _Right )
  {



  :: std :: terminate ( );

  }
 }
#line 1087 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Alty > inline
 void _Pocs ( _Alty & _Left, _Alty & _Right ) noexcept
 {
 typename _Alty :: propagate_on_container_swap _Tag;
 _Pocs ( _Left, _Right, _Tag );
 }
#line 1096
template < class _Alloc,
 class _Ptr = typename _Wrap_alloc < _Alloc > :: pointer > inline
 void _Destroy_range1 ( _Ptr _First, _Ptr _Last, _Wrap_alloc < _Alloc > & _Al, false_type )
 {
 for (; _First != _Last; ++ _First )
  _Al . destroy ( _Unfancy ( _First ) );
 }
#line 1104
template < class _Alloc,
 class _Ptr = typename _Wrap_alloc < _Alloc > :: pointer > inline
 void _Destroy_range1 ( _Ptr, _Ptr, _Wrap_alloc < _Alloc > &, true_type )
 {

 }
#line 1111
template < class _Alloc,
 class _Ptr = typename _Wrap_alloc < _Alloc > :: pointer > inline
 void _Destroy_range ( _Ptr _First, _Ptr _Last, _Wrap_alloc < _Alloc > & _Al )
 {


 typedef typename _Alloc :: value_type _Val;
 _Destroy_range1 ( _First, _Last, _Al, typename conjunction <
  is_trivially_destructible < _Val >,
  _Uses_default_destroy < _Alloc, _Val * >> :: type ( ) );
 }
#line 1125
template < class _FwdIt > inline
 void _Destroy_range1 ( _FwdIt _First, _FwdIt _Last, false_type )
 {
 for (; _First != _Last; ++ _First )
  _Destroy ( _First );
 }
#line 1132
template < class _FwdIt > inline
 void _Destroy_range1 ( _FwdIt, _FwdIt, true_type )
 {

 }
#line 1138
template < class _FwdIt > inline
 void _Destroy_range ( _FwdIt _First, _FwdIt _Last )
 {


 _Destroy_range1 ( _First, _Last, is_trivially_destructible < _Iter_value_t < _FwdIt >> ( ) );
 }
#line 1145
}
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
#pragma warning(push,3)
#line 8
#pragma pack ( push, 8 )
#line 13
namespace std { 
#line 22
typedef 
#line 15
enum memory_order { 
#line 16
memory_order_relaxed, 
#line 17
memory_order_consume, 
#line 18
memory_order_acquire, 
#line 19
memory_order_release, 
#line 20
memory_order_acq_rel, 
#line 21
memory_order_seq_cst
#line 22
} memory_order; 
#line 24
typedef _Uint32t _Uint4_t; 
#line 25
typedef _Uint4_t _Atomic_integral_t; 
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
typedef long _Atomic_flag_t; 
#line 52
typedef _Atomic_integral_t _Atomic_counter_t; 
#line 55
inline _Atomic_integral_t _Get_atomic_count(const _Atomic_counter_t &_Counter) 
#line 56
{ 
#line 57
return _Counter; 
#line 58
} 
#line 60
inline void _Init_atomic_counter(_Atomic_counter_t &_Counter, _Atomic_integral_t 
#line 61
_Value) 
#line 62
{ 
#line 63
_Counter = _Value; 
#line 64
} 
#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
extern "C" {
#line 76
__declspec(dllimport) void __cdecl _Lock_shared_ptr_spin_lock(); 
#line 77
__declspec(dllimport) void __cdecl _Unlock_shared_ptr_spin_lock(); 
#line 78
}
#line 79
}
#line 81
#pragma warning(pop)
#pragma pack ( pop )
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
__pragma( pack ( push, 8 )) extern "C" {
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
typedef 
#line 48
struct __declspec(align(16)) _SETJMP_FLOAT128 { 
#line 50
unsigned __int64 Part[2]; 
#line 51
} SETJMP_FLOAT128; 
#line 54
typedef SETJMP_FLOAT128 _JBTYPE; 
#line 83
typedef 
#line 56
struct _JUMP_BUFFER { 
#line 58
unsigned __int64 Frame; 
#line 59
unsigned __int64 Rbx; 
#line 60
unsigned __int64 Rsp; 
#line 61
unsigned __int64 Rbp; 
#line 62
unsigned __int64 Rsi; 
#line 63
unsigned __int64 Rdi; 
#line 64
unsigned __int64 R12; 
#line 65
unsigned __int64 R13; 
#line 66
unsigned __int64 R14; 
#line 67
unsigned __int64 R15; 
#line 68
unsigned __int64 Rip; 
#line 69
unsigned long MxCsr; 
#line 70
unsigned short FpCsr; 
#line 71
unsigned short Spare; 
#line 73
SETJMP_FLOAT128 Xmm6; 
#line 74
SETJMP_FLOAT128 Xmm7; 
#line 75
SETJMP_FLOAT128 Xmm8; 
#line 76
SETJMP_FLOAT128 Xmm9; 
#line 77
SETJMP_FLOAT128 Xmm10; 
#line 78
SETJMP_FLOAT128 Xmm11; 
#line 79
SETJMP_FLOAT128 Xmm12; 
#line 80
SETJMP_FLOAT128 Xmm13; 
#line 81
SETJMP_FLOAT128 Xmm14; 
#line 82
SETJMP_FLOAT128 Xmm15; 
#line 83
} _JUMP_BUFFER; 
#line 145 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
typedef _JBTYPE jmp_buf[16]; 
#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
int __cdecl _setjmp(jmp_buf _Buf); 
#line 162
#pragma warning(push)
#pragma warning(disable:4987)
__declspec(noreturn) void __cdecl longjmp(jmp_buf _Buf, int _Value) throw(...); 
#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
}
#line 168 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
#pragma warning(pop)
#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
__pragma( pack ( pop )) 
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"
extern "C" {
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"
typedef 
#line 34
union __declspec(intrin_type) __declspec(align(8)) __m64 { 
#line 36
unsigned __int64 m64_u64; 
#line 37
float m64_f32[2]; 
#line 38
char m64_i8[8]; 
#line 39
short m64_i16[4]; 
#line 40
int m64_i32[2]; 
#line 41
__int64 m64_i64; 
#line 42
unsigned char m64_u8[8]; 
#line 43
unsigned short m64_u16[4]; 
#line 44
unsigned m64_u32[2]; 
#line 45
} __m64; 
#line 186 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"
}
#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
typedef 
#line 65
union __declspec(intrin_type) __declspec(align(16)) __m128 { 
#line 66
float m128_f32[4]; 
#line 67
unsigned __int64 m128_u64[2]; 
#line 68
char m128_i8[16]; 
#line 69
short m128_i16[8]; 
#line 70
int m128_i32[4]; 
#line 71
__int64 m128_i64[2]; 
#line 72
unsigned char m128_u8[16]; 
#line 73
unsigned short m128_u16[8]; 
#line 74
unsigned m128_u32[4]; 
#line 75
} __m128; 
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern "C" {
#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_add_ss(__m128 _A, __m128 _B); 
#line 197
extern __m128 _mm_add_ps(__m128 _A, __m128 _B); 
#line 198
extern __m128 _mm_sub_ss(__m128 _A, __m128 _B); 
#line 199
extern __m128 _mm_sub_ps(__m128 _A, __m128 _B); 
#line 200
extern __m128 _mm_mul_ss(__m128 _A, __m128 _B); 
#line 201
extern __m128 _mm_mul_ps(__m128 _A, __m128 _B); 
#line 202
extern __m128 _mm_div_ss(__m128 _A, __m128 _B); 
#line 203
extern __m128 _mm_div_ps(__m128 _A, __m128 _B); 
#line 204
extern __m128 _mm_sqrt_ss(__m128 _A); 
#line 205
extern __m128 _mm_sqrt_ps(__m128 _A); 
#line 206
extern __m128 _mm_rcp_ss(__m128 _A); 
#line 207
extern __m128 _mm_rcp_ps(__m128 _A); 
#line 208
extern __m128 _mm_rsqrt_ss(__m128 _A); 
#line 209
extern __m128 _mm_rsqrt_ps(__m128 _A); 
#line 210
extern __m128 _mm_min_ss(__m128 _A, __m128 _B); 
#line 211
extern __m128 _mm_min_ps(__m128 _A, __m128 _B); 
#line 212
extern __m128 _mm_max_ss(__m128 _A, __m128 _B); 
#line 213
extern __m128 _mm_max_ps(__m128 _A, __m128 _B); 
#line 219
extern __m128 _mm_and_ps(__m128 _A, __m128 _B); 
#line 220
extern __m128 _mm_andnot_ps(__m128 _A, __m128 _B); 
#line 221
extern __m128 _mm_or_ps(__m128 _A, __m128 _B); 
#line 222
extern __m128 _mm_xor_ps(__m128 _A, __m128 _B); 
#line 228
extern __m128 _mm_cmpeq_ss(__m128 _A, __m128 _B); 
#line 229
extern __m128 _mm_cmpeq_ps(__m128 _A, __m128 _B); 
#line 230
extern __m128 _mm_cmplt_ss(__m128 _A, __m128 _B); 
#line 231
extern __m128 _mm_cmplt_ps(__m128 _A, __m128 _B); 
#line 232
extern __m128 _mm_cmple_ss(__m128 _A, __m128 _B); 
#line 233
extern __m128 _mm_cmple_ps(__m128 _A, __m128 _B); 
#line 234
extern __m128 _mm_cmpgt_ss(__m128 _A, __m128 _B); 
#line 235
extern __m128 _mm_cmpgt_ps(__m128 _A, __m128 _B); 
#line 236
extern __m128 _mm_cmpge_ss(__m128 _A, __m128 _B); 
#line 237
extern __m128 _mm_cmpge_ps(__m128 _A, __m128 _B); 
#line 238
extern __m128 _mm_cmpneq_ss(__m128 _A, __m128 _B); 
#line 239
extern __m128 _mm_cmpneq_ps(__m128 _A, __m128 _B); 
#line 240
extern __m128 _mm_cmpnlt_ss(__m128 _A, __m128 _B); 
#line 241
extern __m128 _mm_cmpnlt_ps(__m128 _A, __m128 _B); 
#line 242
extern __m128 _mm_cmpnle_ss(__m128 _A, __m128 _B); 
#line 243
extern __m128 _mm_cmpnle_ps(__m128 _A, __m128 _B); 
#line 244
extern __m128 _mm_cmpngt_ss(__m128 _A, __m128 _B); 
#line 245
extern __m128 _mm_cmpngt_ps(__m128 _A, __m128 _B); 
#line 246
extern __m128 _mm_cmpnge_ss(__m128 _A, __m128 _B); 
#line 247
extern __m128 _mm_cmpnge_ps(__m128 _A, __m128 _B); 
#line 248
extern __m128 _mm_cmpord_ss(__m128 _A, __m128 _B); 
#line 249
extern __m128 _mm_cmpord_ps(__m128 _A, __m128 _B); 
#line 250
extern __m128 _mm_cmpunord_ss(__m128 _A, __m128 _B); 
#line 251
extern __m128 _mm_cmpunord_ps(__m128 _A, __m128 _B); 
#line 252
extern int _mm_comieq_ss(__m128 _A, __m128 _B); 
#line 253
extern int _mm_comilt_ss(__m128 _A, __m128 _B); 
#line 254
extern int _mm_comile_ss(__m128 _A, __m128 _B); 
#line 255
extern int _mm_comigt_ss(__m128 _A, __m128 _B); 
#line 256
extern int _mm_comige_ss(__m128 _A, __m128 _B); 
#line 257
extern int _mm_comineq_ss(__m128 _A, __m128 _B); 
#line 258
extern int _mm_ucomieq_ss(__m128 _A, __m128 _B); 
#line 259
extern int _mm_ucomilt_ss(__m128 _A, __m128 _B); 
#line 260
extern int _mm_ucomile_ss(__m128 _A, __m128 _B); 
#line 261
extern int _mm_ucomigt_ss(__m128 _A, __m128 _B); 
#line 262
extern int _mm_ucomige_ss(__m128 _A, __m128 _B); 
#line 263
extern int _mm_ucomineq_ss(__m128 _A, __m128 _B); 
#line 269
extern int _mm_cvt_ss2si(__m128 _A); 
#line 270
extern int _mm_cvtt_ss2si(__m128 _A); 
#line 271
extern __m128 _mm_cvt_si2ss(__m128, int); 
#line 272
extern float _mm_cvtss_f32(__m128 _A); 
#line 287 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __int64 _mm_cvtss_si64(__m128 _A); 
#line 288
extern __int64 _mm_cvttss_si64(__m128 _A); 
#line 289
extern __m128 _mm_cvtsi64_ss(__m128 _A, __int64 _B); 
#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_shuffle_ps(__m128 _A, __m128 _B, unsigned _Imm8); 
#line 297
extern __m128 _mm_unpackhi_ps(__m128 _A, __m128 _B); 
#line 298
extern __m128 _mm_unpacklo_ps(__m128 _A, __m128 _B); 
#line 299
extern __m128 _mm_loadh_pi(__m128, const __m64 *); 
#line 300
extern __m128 _mm_movehl_ps(__m128, __m128); 
#line 301
extern __m128 _mm_movelh_ps(__m128, __m128); 
#line 302
extern void _mm_storeh_pi(__m64 *, __m128); 
#line 303
extern __m128 _mm_loadl_pi(__m128, const __m64 *); 
#line 304
extern void _mm_storel_pi(__m64 *, __m128); 
#line 305
extern int _mm_movemask_ps(__m128 _A); 
#line 331 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_set_ss(float _A); 
#line 332
extern __m128 _mm_set_ps1(float _A); 
#line 333
extern __m128 _mm_set_ps(float _A, float _B, float _C, float _D); 
#line 334
extern __m128 _mm_setr_ps(float _A, float _B, float _C, float _D); 
#line 335
extern __m128 _mm_setzero_ps(); 
#line 336
extern __m128 _mm_load_ss(const float * _A); 
#line 337
extern __m128 _mm_load_ps1(const float * _A); 
#line 338
extern __m128 _mm_load_ps(const float * _A); 
#line 339
extern __m128 _mm_loadr_ps(const float * _A); 
#line 340
extern __m128 _mm_loadu_ps(const float * _A); 
#line 341
extern void _mm_store_ss(float * _V, __m128 _A); 
#line 342
extern void _mm_store_ps1(float * _V, __m128 _A); 
#line 343
extern void _mm_store_ps(float * _V, __m128 _A); 
#line 344
extern void _mm_storer_ps(float * _V, __m128 _A); 
#line 345
extern void _mm_storeu_ps(float * _V, __m128 _A); 
#line 346
extern void _mm_prefetch(const char * _A, int _Sel); 
#line 350 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern void _mm_stream_ps(float *, __m128); 
#line 351
extern __m128 _mm_move_ss(__m128 _A, __m128 _B); 
#line 353
extern void _mm_sfence(); 
#line 354
extern unsigned _mm_getcsr(); 
#line 355
extern void _mm_setcsr(unsigned); 
#line 509 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
}
#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
typedef 
#line 44
union __declspec(intrin_type) __declspec(align(16)) __m128i { 
#line 45
char m128i_i8[16]; 
#line 46
short m128i_i16[8]; 
#line 47
int m128i_i32[4]; 
#line 48
__int64 m128i_i64[2]; 
#line 49
unsigned char m128i_u8[16]; 
#line 50
unsigned short m128i_u16[8]; 
#line 51
unsigned m128i_u32[4]; 
#line 52
unsigned __int64 m128i_u64[2]; 
#line 53
} __m128i; 
#line 57
typedef 
#line 55
struct __declspec(intrin_type) __declspec(align(16)) __m128d { 
#line 56
double m128d_f64[2]; 
#line 57
} __m128d; 
#line 69
extern "C" {
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_add_sd(__m128d _A, __m128d _B); 
#line 78
extern __m128d _mm_add_pd(__m128d _A, __m128d _B); 
#line 79
extern __m128d _mm_sub_sd(__m128d _A, __m128d _B); 
#line 80
extern __m128d _mm_sub_pd(__m128d _A, __m128d _B); 
#line 81
extern __m128d _mm_mul_sd(__m128d _A, __m128d _B); 
#line 82
extern __m128d _mm_mul_pd(__m128d _A, __m128d _B); 
#line 83
extern __m128d _mm_sqrt_sd(__m128d _A, __m128d _B); 
#line 84
extern __m128d _mm_sqrt_pd(__m128d _A); 
#line 85
extern __m128d _mm_div_sd(__m128d _A, __m128d _B); 
#line 86
extern __m128d _mm_div_pd(__m128d _A, __m128d _B); 
#line 87
extern __m128d _mm_min_sd(__m128d _A, __m128d _B); 
#line 88
extern __m128d _mm_min_pd(__m128d _A, __m128d _B); 
#line 89
extern __m128d _mm_max_sd(__m128d _A, __m128d _B); 
#line 90
extern __m128d _mm_max_pd(__m128d _A, __m128d _B); 
#line 96
extern __m128d _mm_and_pd(__m128d _A, __m128d _B); 
#line 97
extern __m128d _mm_andnot_pd(__m128d _A, __m128d _B); 
#line 98
extern __m128d _mm_or_pd(__m128d _A, __m128d _B); 
#line 99
extern __m128d _mm_xor_pd(__m128d _A, __m128d _B); 
#line 105
extern __m128d _mm_cmpeq_sd(__m128d _A, __m128d _B); 
#line 106
extern __m128d _mm_cmpeq_pd(__m128d _A, __m128d _B); 
#line 107
extern __m128d _mm_cmplt_sd(__m128d _A, __m128d _B); 
#line 108
extern __m128d _mm_cmplt_pd(__m128d _A, __m128d _B); 
#line 109
extern __m128d _mm_cmple_sd(__m128d _A, __m128d _B); 
#line 110
extern __m128d _mm_cmple_pd(__m128d _A, __m128d _B); 
#line 111
extern __m128d _mm_cmpgt_sd(__m128d _A, __m128d _B); 
#line 112
extern __m128d _mm_cmpgt_pd(__m128d _A, __m128d _B); 
#line 113
extern __m128d _mm_cmpge_sd(__m128d _A, __m128d _B); 
#line 114
extern __m128d _mm_cmpge_pd(__m128d _A, __m128d _B); 
#line 115
extern __m128d _mm_cmpneq_sd(__m128d _A, __m128d _B); 
#line 116
extern __m128d _mm_cmpneq_pd(__m128d _A, __m128d _B); 
#line 117
extern __m128d _mm_cmpnlt_sd(__m128d _A, __m128d _B); 
#line 118
extern __m128d _mm_cmpnlt_pd(__m128d _A, __m128d _B); 
#line 119
extern __m128d _mm_cmpnle_sd(__m128d _A, __m128d _B); 
#line 120
extern __m128d _mm_cmpnle_pd(__m128d _A, __m128d _B); 
#line 121
extern __m128d _mm_cmpngt_sd(__m128d _A, __m128d _B); 
#line 122
extern __m128d _mm_cmpngt_pd(__m128d _A, __m128d _B); 
#line 123
extern __m128d _mm_cmpnge_sd(__m128d _A, __m128d _B); 
#line 124
extern __m128d _mm_cmpnge_pd(__m128d _A, __m128d _B); 
#line 125
extern __m128d _mm_cmpord_pd(__m128d _A, __m128d _B); 
#line 126
extern __m128d _mm_cmpord_sd(__m128d _A, __m128d _B); 
#line 127
extern __m128d _mm_cmpunord_pd(__m128d _A, __m128d _B); 
#line 128
extern __m128d _mm_cmpunord_sd(__m128d _A, __m128d _B); 
#line 129
extern int _mm_comieq_sd(__m128d _A, __m128d _B); 
#line 130
extern int _mm_comilt_sd(__m128d _A, __m128d _B); 
#line 131
extern int _mm_comile_sd(__m128d _A, __m128d _B); 
#line 132
extern int _mm_comigt_sd(__m128d _A, __m128d _B); 
#line 133
extern int _mm_comige_sd(__m128d _A, __m128d _B); 
#line 134
extern int _mm_comineq_sd(__m128d _A, __m128d _B); 
#line 135
extern int _mm_ucomieq_sd(__m128d _A, __m128d _B); 
#line 136
extern int _mm_ucomilt_sd(__m128d _A, __m128d _B); 
#line 137
extern int _mm_ucomile_sd(__m128d _A, __m128d _B); 
#line 138
extern int _mm_ucomigt_sd(__m128d _A, __m128d _B); 
#line 139
extern int _mm_ucomige_sd(__m128d _A, __m128d _B); 
#line 140
extern int _mm_ucomineq_sd(__m128d _A, __m128d _B); 
#line 146
extern __m128d _mm_cvtepi32_pd(__m128i _A); 
#line 147
extern __m128i _mm_cvtpd_epi32(__m128d _A); 
#line 148
extern __m128i _mm_cvttpd_epi32(__m128d _A); 
#line 149
extern __m128 _mm_cvtepi32_ps(__m128i _A); 
#line 150
extern __m128i _mm_cvtps_epi32(__m128 _A); 
#line 151
extern __m128i _mm_cvttps_epi32(__m128 _A); 
#line 152
extern __m128 _mm_cvtpd_ps(__m128d _A); 
#line 153
extern __m128d _mm_cvtps_pd(__m128 _A); 
#line 154
extern __m128 _mm_cvtsd_ss(__m128 _A, __m128d _B); 
#line 155
extern __m128d _mm_cvtss_sd(__m128d _A, __m128 _B); 
#line 157
extern int _mm_cvtsd_si32(__m128d _A); 
#line 158
extern int _mm_cvttsd_si32(__m128d _A); 
#line 159
extern __m128d _mm_cvtsi32_sd(__m128d _A, int _B); 
#line 171 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_unpackhi_pd(__m128d _A, __m128d _B); 
#line 172
extern __m128d _mm_unpacklo_pd(__m128d _A, __m128d _B); 
#line 173
extern int _mm_movemask_pd(__m128d _A); 
#line 174
extern __m128d _mm_shuffle_pd(__m128d _A, __m128d _B, int _I); 
#line 180
extern __m128d _mm_load_pd(const double * _Dp); 
#line 181
extern __m128d _mm_load1_pd(const double * _Dp); 
#line 182
extern __m128d _mm_loadr_pd(const double * _Dp); 
#line 183
extern __m128d _mm_loadu_pd(const double * _Dp); 
#line 184
extern __m128d _mm_load_sd(const double * _Dp); 
#line 185
extern __m128d _mm_loadh_pd(__m128d _A, const double * _Dp); 
#line 186
extern __m128d _mm_loadl_pd(__m128d _A, const double * _Dp); 
#line 192
extern __m128d _mm_set_sd(double _W); 
#line 193
extern __m128d _mm_set1_pd(double _A); 
#line 194
extern __m128d _mm_set_pd(double _Z, double _Y); 
#line 195
extern __m128d _mm_setr_pd(double _Y, double _Z); 
#line 196
extern __m128d _mm_setzero_pd(); 
#line 197
extern __m128d _mm_move_sd(__m128d _A, __m128d _B); 
#line 203
extern void _mm_store_sd(double * _Dp, __m128d _A); 
#line 204
extern void _mm_store1_pd(double * _Dp, __m128d _A); 
#line 205
extern void _mm_store_pd(double * _Dp, __m128d _A); 
#line 206
extern void _mm_storeu_pd(double * _Dp, __m128d _A); 
#line 207
extern void _mm_storer_pd(double * _Dp, __m128d _A); 
#line 208
extern void _mm_storeh_pd(double * _Dp, __m128d _A); 
#line 209
extern void _mm_storel_pd(double * _Dp, __m128d _A); 
#line 215
extern __m128i _mm_add_epi8(__m128i _A, __m128i _B); 
#line 216
extern __m128i _mm_add_epi16(__m128i _A, __m128i _B); 
#line 217
extern __m128i _mm_add_epi32(__m128i _A, __m128i _B); 
#line 221 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_add_epi64(__m128i _A, __m128i _B); 
#line 222
extern __m128i _mm_adds_epi8(__m128i _A, __m128i _B); 
#line 223
extern __m128i _mm_adds_epi16(__m128i _A, __m128i _B); 
#line 224
extern __m128i _mm_adds_epu8(__m128i _A, __m128i _B); 
#line 225
extern __m128i _mm_adds_epu16(__m128i _A, __m128i _B); 
#line 226
extern __m128i _mm_avg_epu8(__m128i _A, __m128i _B); 
#line 227
extern __m128i _mm_avg_epu16(__m128i _A, __m128i _B); 
#line 228
extern __m128i _mm_madd_epi16(__m128i _A, __m128i _B); 
#line 229
extern __m128i _mm_max_epi16(__m128i _A, __m128i _B); 
#line 230
extern __m128i _mm_max_epu8(__m128i _A, __m128i _B); 
#line 231
extern __m128i _mm_min_epi16(__m128i _A, __m128i _B); 
#line 232
extern __m128i _mm_min_epu8(__m128i _A, __m128i _B); 
#line 233
extern __m128i _mm_mulhi_epi16(__m128i _A, __m128i _B); 
#line 234
extern __m128i _mm_mulhi_epu16(__m128i _A, __m128i _B); 
#line 235
extern __m128i _mm_mullo_epi16(__m128i _A, __m128i _B); 
#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_mul_epu32(__m128i _A, __m128i _B); 
#line 240
extern __m128i _mm_sad_epu8(__m128i _A, __m128i _B); 
#line 241
extern __m128i _mm_sub_epi8(__m128i _A, __m128i _B); 
#line 242
extern __m128i _mm_sub_epi16(__m128i _A, __m128i _B); 
#line 243
extern __m128i _mm_sub_epi32(__m128i _A, __m128i _B); 
#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_sub_epi64(__m128i _A, __m128i _B); 
#line 248
extern __m128i _mm_subs_epi8(__m128i _A, __m128i _B); 
#line 249
extern __m128i _mm_subs_epi16(__m128i _A, __m128i _B); 
#line 250
extern __m128i _mm_subs_epu8(__m128i _A, __m128i _B); 
#line 251
extern __m128i _mm_subs_epu16(__m128i _A, __m128i _B); 
#line 257
extern __m128i _mm_and_si128(__m128i _A, __m128i _B); 
#line 258
extern __m128i _mm_andnot_si128(__m128i _A, __m128i _B); 
#line 259
extern __m128i _mm_or_si128(__m128i _A, __m128i _B); 
#line 260
extern __m128i _mm_xor_si128(__m128i _A, __m128i _B); 
#line 266
extern __m128i _mm_slli_si128(__m128i _A, int _Imm); 
#line 267
extern __m128i _mm_slli_epi16(__m128i _A, int _Count); 
#line 268
extern __m128i _mm_sll_epi16(__m128i _A, __m128i _Count); 
#line 269
extern __m128i _mm_slli_epi32(__m128i _A, int _Count); 
#line 270
extern __m128i _mm_sll_epi32(__m128i _A, __m128i _Count); 
#line 271
extern __m128i _mm_slli_epi64(__m128i _A, int _Count); 
#line 272
extern __m128i _mm_sll_epi64(__m128i _A, __m128i _Count); 
#line 273
extern __m128i _mm_srai_epi16(__m128i _A, int _Count); 
#line 274
extern __m128i _mm_sra_epi16(__m128i _A, __m128i _Count); 
#line 275
extern __m128i _mm_srai_epi32(__m128i _A, int _Count); 
#line 276
extern __m128i _mm_sra_epi32(__m128i _A, __m128i _Count); 
#line 277
extern __m128i _mm_srli_si128(__m128i _A, int _Imm); 
#line 278
extern __m128i _mm_srli_epi16(__m128i _A, int _Count); 
#line 279
extern __m128i _mm_srl_epi16(__m128i _A, __m128i _Count); 
#line 280
extern __m128i _mm_srli_epi32(__m128i _A, int _Count); 
#line 281
extern __m128i _mm_srl_epi32(__m128i _A, __m128i _Count); 
#line 282
extern __m128i _mm_srli_epi64(__m128i _A, int _Count); 
#line 283
extern __m128i _mm_srl_epi64(__m128i _A, __m128i _Count); 
#line 289
extern __m128i _mm_cmpeq_epi8(__m128i _A, __m128i _B); 
#line 290
extern __m128i _mm_cmpeq_epi16(__m128i _A, __m128i _B); 
#line 291
extern __m128i _mm_cmpeq_epi32(__m128i _A, __m128i _B); 
#line 292
extern __m128i _mm_cmpgt_epi8(__m128i _A, __m128i _B); 
#line 293
extern __m128i _mm_cmpgt_epi16(__m128i _A, __m128i _B); 
#line 294
extern __m128i _mm_cmpgt_epi32(__m128i _A, __m128i _B); 
#line 295
extern __m128i _mm_cmplt_epi8(__m128i _A, __m128i _B); 
#line 296
extern __m128i _mm_cmplt_epi16(__m128i _A, __m128i _B); 
#line 297
extern __m128i _mm_cmplt_epi32(__m128i _A, __m128i _B); 
#line 303
extern __m128i _mm_cvtsi32_si128(int _A); 
#line 304
extern int _mm_cvtsi128_si32(__m128i _A); 
#line 310
extern __m128i _mm_packs_epi16(__m128i _A, __m128i _B); 
#line 311
extern __m128i _mm_packs_epi32(__m128i _A, __m128i _B); 
#line 312
extern __m128i _mm_packus_epi16(__m128i _A, __m128i _B); 
#line 313
extern int _mm_extract_epi16(__m128i _A, int _Imm); 
#line 314
extern __m128i _mm_insert_epi16(__m128i _A, int _B, int _Imm); 
#line 315
extern int _mm_movemask_epi8(__m128i _A); 
#line 316
extern __m128i _mm_shuffle_epi32(__m128i _A, int _Imm); 
#line 317
extern __m128i _mm_shufflehi_epi16(__m128i _A, int _Imm); 
#line 318
extern __m128i _mm_shufflelo_epi16(__m128i _A, int _Imm); 
#line 319
extern __m128i _mm_unpackhi_epi8(__m128i _A, __m128i _B); 
#line 320
extern __m128i _mm_unpackhi_epi16(__m128i _A, __m128i _B); 
#line 321
extern __m128i _mm_unpackhi_epi32(__m128i _A, __m128i _B); 
#line 322
extern __m128i _mm_unpackhi_epi64(__m128i _A, __m128i _B); 
#line 323
extern __m128i _mm_unpacklo_epi8(__m128i _A, __m128i _B); 
#line 324
extern __m128i _mm_unpacklo_epi16(__m128i _A, __m128i _B); 
#line 325
extern __m128i _mm_unpacklo_epi32(__m128i _A, __m128i _B); 
#line 326
extern __m128i _mm_unpacklo_epi64(__m128i _A, __m128i _B); 
#line 332
extern __m128i _mm_load_si128(const __m128i * _P); 
#line 333
extern __m128i _mm_loadu_si128(const __m128i * _P); 
#line 334
extern __m128i _mm_loadl_epi64(const __m128i * _P); 
#line 343 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_set_epi64x(__int64 _I1, __int64 _I0); 
#line 344
extern __m128i _mm_set_epi32(int _I3, int _I2, int _I1, int _I0); 
#line 345
extern __m128i _mm_set_epi16(short _W7, short _W6, short _W5, short _W4, short _W3, short _W2, short _W1, short _W0); 
#line 347
extern __m128i _mm_set_epi8(char _B15, char _B14, char _B13, char _B12, char _B11, char _B10, char _B9, char _B8, char _B7, char _B6, char _B5, char _B4, char _B3, char _B2, char _B1, char _B0); 
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_set1_epi64x(__int64 i); 
#line 355
extern __m128i _mm_set1_epi32(int _I); 
#line 356
extern __m128i _mm_set1_epi16(short _W); 
#line 357
extern __m128i _mm_set1_epi8(char _B); 
#line 358
extern __m128i _mm_setl_epi64(__m128i _Q); 
#line 362 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_setr_epi32(int _I0, int _I1, int _I2, int _I3); 
#line 363
extern __m128i _mm_setr_epi16(short _W0, short _W1, short _W2, short _W3, short _W4, short _W5, short _W6, short _W7); 
#line 365
extern __m128i _mm_setr_epi8(char _B15, char _B14, char _B13, char _B12, char _B11, char _B10, char _B9, char _B8, char _B7, char _B6, char _B5, char _B4, char _B3, char _B2, char _B1, char _B0); 
#line 369
extern __m128i _mm_setzero_si128(); 
#line 375
extern void _mm_store_si128(__m128i * _P, __m128i _B); 
#line 376
extern void _mm_storeu_si128(__m128i * _P, __m128i _B); 
#line 377
extern void _mm_storel_epi64(__m128i * _P, __m128i _Q); 
#line 378
extern void _mm_maskmoveu_si128(__m128i _D, __m128i _N, char * _P); 
#line 384
extern __m128i _mm_move_epi64(__m128i _Q); 
#line 394 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern void _mm_stream_pd(double * _Dp, __m128d _A); 
#line 395
extern void _mm_stream_si128(__m128i * _P, __m128i _A); 
#line 396
extern void _mm_clflush(const void * _P); 
#line 397
extern void _mm_lfence(); 
#line 398
extern void _mm_mfence(); 
#line 399
extern void _mm_stream_si32(int * _P, int _I); 
#line 400
extern void _mm_pause(); 
#line 406
extern double _mm_cvtsd_f64(__m128d _A); 
#line 414
extern __m128 _mm_castpd_ps(__m128d); 
#line 415
extern __m128i _mm_castpd_si128(__m128d); 
#line 416
extern __m128d _mm_castps_pd(__m128); 
#line 417
extern __m128i _mm_castps_si128(__m128); 
#line 418
extern __m128 _mm_castsi128_ps(__m128i); 
#line 419
extern __m128d _mm_castsi128_pd(__m128i); 
#line 426
extern __int64 _mm_cvtsd_si64(__m128d); 
#line 427
extern __int64 _mm_cvttsd_si64(__m128d); 
#line 428
extern __m128d _mm_cvtsi64_sd(__m128d, __int64); 
#line 429
extern __m128i _mm_cvtsi64_si128(__int64); 
#line 430
extern __int64 _mm_cvtsi128_si64(__m128i); 
#line 436 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
}
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"
extern "C" {
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"
extern __m128 _mm_addsub_ps(__m128, __m128); 
#line 67
extern __m128 _mm_hadd_ps(__m128, __m128); 
#line 68
extern __m128 _mm_hsub_ps(__m128, __m128); 
#line 69
extern __m128 _mm_movehdup_ps(__m128); 
#line 70
extern __m128 _mm_moveldup_ps(__m128); 
#line 76
extern __m128d _mm_addsub_pd(__m128d, __m128d); 
#line 77
extern __m128d _mm_hadd_pd(__m128d, __m128d); 
#line 78
extern __m128d _mm_hsub_pd(__m128d, __m128d); 
#line 79
extern __m128d _mm_loaddup_pd(const double *); 
#line 80
extern __m128d _mm_movedup_pd(__m128d); 
#line 85
extern __m128i _mm_lddqu_si128(const __m128i *); 
#line 93
extern void _mm_monitor(const void *, unsigned, unsigned); 
#line 98
extern void _mm_mwait(unsigned, unsigned); 
#line 101
}
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
extern "C" {
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
extern __m128i _mm_hadd_epi16(__m128i, __m128i); 
#line 46
extern __m128i _mm_hadd_epi32(__m128i, __m128i); 
#line 47
extern __m128i _mm_hadds_epi16(__m128i, __m128i); 
#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
extern __m128i _mm_hsub_epi16(__m128i, __m128i); 
#line 64
extern __m128i _mm_hsub_epi32(__m128i, __m128i); 
#line 65
extern __m128i _mm_hsubs_epi16(__m128i, __m128i); 
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
extern __m128i _mm_maddubs_epi16(__m128i, __m128i); 
#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
extern __m128i _mm_mulhrs_epi16(__m128i, __m128i); 
#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
extern __m128i _mm_shuffle_epi8(__m128i, __m128i); 
#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
extern __m128i _mm_sign_epi8(__m128i, __m128i); 
#line 110
extern __m128i _mm_sign_epi16(__m128i, __m128i); 
#line 111
extern __m128i _mm_sign_epi32(__m128i, __m128i); 
#line 122 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
extern __m128i _mm_alignr_epi8(__m128i, __m128i, int); 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
extern __m128i _mm_abs_epi8(__m128i); 
#line 132
extern __m128i _mm_abs_epi16(__m128i); 
#line 133
extern __m128i _mm_abs_epi32(__m128i); 
#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
}
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern "C" {
#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_blend_epi16(__m128i, __m128i, const int); 
#line 90
extern __m128i _mm_blendv_epi8(__m128i, __m128i, __m128i mask); 
#line 95
extern __m128 _mm_blend_ps(__m128, __m128, const int); 
#line 96
extern __m128 _mm_blendv_ps(__m128, __m128, __m128); 
#line 101
extern __m128d _mm_blend_pd(__m128d, __m128d, const int); 
#line 102
extern __m128d _mm_blendv_pd(__m128d, __m128d, __m128d); 
#line 107
extern __m128 _mm_dp_ps(__m128, __m128, const int); 
#line 108
extern __m128d _mm_dp_pd(__m128d, __m128d, const int); 
#line 113
extern __m128i _mm_cmpeq_epi64(__m128i, __m128i); 
#line 117
extern __m128i _mm_min_epi8(__m128i, __m128i); 
#line 118
extern __m128i _mm_max_epi8(__m128i, __m128i); 
#line 120
extern __m128i _mm_min_epu16(__m128i, __m128i); 
#line 121
extern __m128i _mm_max_epu16(__m128i, __m128i); 
#line 123
extern __m128i _mm_min_epi32(__m128i, __m128i); 
#line 124
extern __m128i _mm_max_epi32(__m128i, __m128i); 
#line 125
extern __m128i _mm_min_epu32(__m128i, __m128i); 
#line 126
extern __m128i _mm_max_epu32(__m128i, __m128i); 
#line 131
extern __m128i _mm_mullo_epi32(__m128i, __m128i); 
#line 136
extern __m128i _mm_mul_epi32(__m128i, __m128i); 
#line 141
extern int _mm_testz_si128(__m128i, __m128i); 
#line 146
extern int _mm_testc_si128(__m128i, __m128i); 
#line 152
extern int _mm_testnzc_si128(__m128i, __m128i); 
#line 160
extern __m128 _mm_insert_ps(__m128, __m128, const int); 
#line 170
extern int _mm_extract_ps(__m128, const int); 
#line 188
extern __m128i _mm_insert_epi8(__m128i, int, const int); 
#line 189
extern __m128i _mm_insert_epi32(__m128i, int, const int); 
#line 192
extern __m128i _mm_insert_epi64(__m128i, __int64, const int); 
#line 197 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern int _mm_extract_epi8(__m128i, const int); 
#line 198
extern int _mm_extract_epi32(__m128i, const int); 
#line 201
extern __int64 _mm_extract_epi64(__m128i, const int); 
#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_minpos_epu16(__m128i); 
#line 211
extern __m128d _mm_round_pd(__m128d, int); 
#line 212
extern __m128d _mm_round_sd(__m128d, __m128d, int); 
#line 216
extern __m128 _mm_round_ps(__m128, int); 
#line 217
extern __m128 _mm_round_ss(__m128, __m128, int); 
#line 221
extern __m128i _mm_cvtepi8_epi32(__m128i); 
#line 222
extern __m128i _mm_cvtepi16_epi32(__m128i); 
#line 223
extern __m128i _mm_cvtepi8_epi64(__m128i); 
#line 224
extern __m128i _mm_cvtepi32_epi64(__m128i); 
#line 225
extern __m128i _mm_cvtepi16_epi64(__m128i); 
#line 226
extern __m128i _mm_cvtepi8_epi16(__m128i); 
#line 230
extern __m128i _mm_cvtepu8_epi32(__m128i); 
#line 231
extern __m128i _mm_cvtepu16_epi32(__m128i); 
#line 232
extern __m128i _mm_cvtepu8_epi64(__m128i); 
#line 233
extern __m128i _mm_cvtepu32_epi64(__m128i); 
#line 234
extern __m128i _mm_cvtepu16_epi64(__m128i); 
#line 235
extern __m128i _mm_cvtepu8_epi16(__m128i); 
#line 241
extern __m128i _mm_packus_epi32(__m128i, __m128i); 
#line 247
extern __m128i _mm_mpsadbw_epu8(__m128i, __m128i, const int); 
#line 253
extern __m128i _mm_stream_load_si128(const __m128i *); 
#line 256
}
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern "C" {
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern __m128i _mm_cmpistrm(__m128i, __m128i, const int); 
#line 84
extern int _mm_cmpistri(__m128i, __m128i, const int); 
#line 86
extern __m128i _mm_cmpestrm(__m128i, int, __m128i, int, const int); 
#line 87
extern int _mm_cmpestri(__m128i, int, __m128i, int, const int); 
#line 93
extern int _mm_cmpistrz(__m128i, __m128i, const int); 
#line 94
extern int _mm_cmpistrc(__m128i, __m128i, const int); 
#line 95
extern int _mm_cmpistrs(__m128i, __m128i, const int); 
#line 96
extern int _mm_cmpistro(__m128i, __m128i, const int); 
#line 97
extern int _mm_cmpistra(__m128i, __m128i, const int); 
#line 99
extern int _mm_cmpestrz(__m128i, int, __m128i, int, const int); 
#line 100
extern int _mm_cmpestrc(__m128i, int, __m128i, int, const int); 
#line 101
extern int _mm_cmpestrs(__m128i, int, __m128i, int, const int); 
#line 102
extern int _mm_cmpestro(__m128i, int, __m128i, int, const int); 
#line 103
extern int _mm_cmpestra(__m128i, int, __m128i, int, const int); 
#line 110
extern __m128i _mm_cmpgt_epi64(__m128i, __m128i); 
#line 116
extern int _mm_popcnt_u32(unsigned); 
#line 119
extern __int64 _mm_popcnt_u64(unsigned __int64); 
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern unsigned _mm_crc32_u8(unsigned, unsigned char); 
#line 127
extern unsigned _mm_crc32_u16(unsigned, unsigned short); 
#line 128
extern unsigned _mm_crc32_u32(unsigned, unsigned); 
#line 131
extern unsigned __int64 _mm_crc32_u64(unsigned __int64, unsigned __int64); 
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
}
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\wmmintrin.h"
extern "C" {
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\wmmintrin.h"
extern __m128i _mm_aesdec_si128(__m128i, __m128i); 
#line 48
extern __m128i _mm_aesdeclast_si128(__m128i, __m128i); 
#line 54
extern __m128i _mm_aesenc_si128(__m128i, __m128i); 
#line 60
extern __m128i _mm_aesenclast_si128(__m128i, __m128i); 
#line 66
extern __m128i _mm_aesimc_si128(__m128i); 
#line 73
extern __m128i _mm_aeskeygenassist_si128(__m128i, const int); 
#line 81
extern __m128i _mm_clmulepi64_si128(__m128i, __m128i, const int); 
#line 86
}
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern "C" {
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
typedef 
#line 37
union __declspec(intrin_type) __declspec(align(32)) __m256 { 
#line 38
float m256_f32[8]; 
#line 39
} __m256; 
#line 43
typedef 
#line 41
struct __declspec(intrin_type) __declspec(align(32)) __m256d { 
#line 42
double m256d_f64[4]; 
#line 43
} __m256d; 
#line 54
typedef 
#line 45
union __declspec(intrin_type) __declspec(align(32)) __m256i { 
#line 46
char m256i_i8[32]; 
#line 47
short m256i_i16[16]; 
#line 48
int m256i_i32[8]; 
#line 49
__int64 m256i_i64[4]; 
#line 50
unsigned char m256i_u8[32]; 
#line 51
unsigned short m256i_u16[16]; 
#line 52
unsigned m256i_u32[8]; 
#line 53
unsigned __int64 m256i_u64[4]; 
#line 54
} __m256i; 
#line 106
extern __m256d __cdecl _mm256_add_pd(__m256d, __m256d); 
#line 116
extern __m256 __cdecl _mm256_add_ps(__m256, __m256); 
#line 129
extern __m256d __cdecl _mm256_addsub_pd(__m256d, __m256d); 
#line 142
extern __m256 __cdecl _mm256_addsub_ps(__m256, __m256); 
#line 151
extern __m256d __cdecl _mm256_and_pd(__m256d, __m256d); 
#line 160
extern __m256 __cdecl _mm256_and_ps(__m256, __m256); 
#line 169
extern __m256d __cdecl _mm256_andnot_pd(__m256d, __m256d); 
#line 178
extern __m256 __cdecl _mm256_andnot_ps(__m256, __m256); 
#line 192
extern __m256d __cdecl _mm256_blend_pd(__m256d, __m256d, const int); 
#line 206
extern __m256 __cdecl _mm256_blend_ps(__m256, __m256, const int); 
#line 216
extern __m256d __cdecl _mm256_blendv_pd(__m256d, __m256d, __m256d); 
#line 226
extern __m256 __cdecl _mm256_blendv_ps(__m256, __m256, __m256); 
#line 235
extern __m256d __cdecl _mm256_div_pd(__m256d, __m256d); 
#line 244
extern __m256 __cdecl _mm256_div_ps(__m256, __m256); 
#line 259
extern __m256 __cdecl _mm256_dp_ps(__m256, __m256, const int); 
#line 268
extern __m256d __cdecl _mm256_hadd_pd(__m256d, __m256d); 
#line 277
extern __m256 __cdecl _mm256_hadd_ps(__m256, __m256); 
#line 286
extern __m256d __cdecl _mm256_hsub_pd(__m256d, __m256d); 
#line 295
extern __m256 __cdecl _mm256_hsub_ps(__m256, __m256); 
#line 304
extern __m256d __cdecl _mm256_max_pd(__m256d, __m256d); 
#line 313
extern __m256 __cdecl _mm256_max_ps(__m256, __m256); 
#line 322
extern __m256d __cdecl _mm256_min_pd(__m256d, __m256d); 
#line 331
extern __m256 __cdecl _mm256_min_ps(__m256, __m256); 
#line 341
extern __m256d __cdecl _mm256_mul_pd(__m256d, __m256d); 
#line 351
extern __m256 __cdecl _mm256_mul_ps(__m256, __m256); 
#line 360
extern __m256d __cdecl _mm256_or_pd(__m256d, __m256d); 
#line 369
extern __m256 __cdecl _mm256_or_ps(__m256, __m256); 
#line 381
extern __m256d __cdecl _mm256_shuffle_pd(__m256d, __m256d, const int); 
#line 394
extern __m256 __cdecl _mm256_shuffle_ps(__m256, __m256, const int); 
#line 403
extern __m256d __cdecl _mm256_sub_pd(__m256d, __m256d); 
#line 413
extern __m256 __cdecl _mm256_sub_ps(__m256, __m256); 
#line 422
extern __m256d __cdecl _mm256_xor_pd(__m256d, __m256d); 
#line 431
extern __m256 __cdecl _mm256_xor_ps(__m256, __m256); 
#line 447
extern __m128d __cdecl _mm_cmp_pd(__m128d, __m128d, const int); 
#line 448
extern __m256d __cdecl _mm256_cmp_pd(__m256d, __m256d, const int); 
#line 464
extern __m128 __cdecl _mm_cmp_ps(__m128, __m128, const int); 
#line 465
extern __m256 __cdecl _mm256_cmp_ps(__m256, __m256, const int); 
#line 478
extern __m128d __cdecl _mm_cmp_sd(__m128d, __m128d, const int); 
#line 484
extern int __cdecl _mm_comi_sd(__m128d, __m128d, const int); 
#line 497
extern __m128 __cdecl _mm_cmp_ss(__m128, __m128, const int); 
#line 503
extern int __cdecl _mm_comi_ss(__m128, __m128, const int); 
#line 512
extern __m256d __cdecl _mm256_cvtepi32_pd(__m128i); 
#line 521
extern __m256 __cdecl _mm256_cvtepi32_ps(__m256i); 
#line 531
extern __m128 __cdecl _mm256_cvtpd_ps(__m256d); 
#line 540
extern __m256i __cdecl _mm256_cvtps_epi32(__m256); 
#line 550
extern __m256d __cdecl _mm256_cvtps_pd(__m128); 
#line 563
extern __m128i __cdecl _mm256_cvttpd_epi32(__m256d); 
#line 572
extern __m128i __cdecl _mm256_cvtpd_epi32(__m256d); 
#line 585
extern __m256i __cdecl _mm256_cvttps_epi32(__m256); 
#line 593
extern __m128 __cdecl _mm256_extractf128_ps(__m256, const int); 
#line 594
extern __m128d __cdecl _mm256_extractf128_pd(__m256d, const int); 
#line 595
extern __m128i __cdecl _mm256_extractf128_si256(__m256i, const int); 
#line 602
extern void __cdecl _mm256_zeroall(); 
#line 610
extern void __cdecl _mm256_zeroupper(); 
#line 620
extern __m256 __cdecl _mm256_permutevar_ps(__m256, __m256i); 
#line 621
extern __m128 __cdecl _mm_permutevar_ps(__m128, __m128i); 
#line 631
extern __m256 __cdecl _mm256_permute_ps(__m256, int); 
#line 632
extern __m128 __cdecl _mm_permute_ps(__m128, int); 
#line 642
extern __m256d __cdecl _mm256_permutevar_pd(__m256d, __m256i); 
#line 643
extern __m128d __cdecl _mm_permutevar_pd(__m128d, __m128i); 
#line 653
extern __m256d __cdecl _mm256_permute_pd(__m256d, int); 
#line 654
extern __m128d __cdecl _mm_permute_pd(__m128d, int); 
#line 663
extern __m256 __cdecl _mm256_permute2f128_ps(__m256, __m256, int); 
#line 664
extern __m256d __cdecl _mm256_permute2f128_pd(__m256d, __m256d, int); 
#line 665
extern __m256i __cdecl _mm256_permute2f128_si256(__m256i, __m256i, int); 
#line 674
extern __m256 __cdecl _mm256_broadcast_ss(const float *); 
#line 675
extern __m128 __cdecl _mm_broadcast_ss(const float *); 
#line 683
extern __m256d __cdecl _mm256_broadcast_sd(const double *); 
#line 691
extern __m256 __cdecl _mm256_broadcast_ps(const __m128 *); 
#line 692
extern __m256d __cdecl _mm256_broadcast_pd(const __m128d *); 
#line 702
extern __m256 __cdecl _mm256_insertf128_ps(__m256, __m128, int); 
#line 703
extern __m256d __cdecl _mm256_insertf128_pd(__m256d, __m128d, int); 
#line 704
extern __m256i __cdecl _mm256_insertf128_si256(__m256i, __m128i, int); 
#line 713
extern __m256d __cdecl _mm256_load_pd(const double *); 
#line 714
extern void __cdecl _mm256_store_pd(double *, __m256d); 
#line 723
extern __m256 __cdecl _mm256_load_ps(const float *); 
#line 724
extern void __cdecl _mm256_store_ps(float *, __m256); 
#line 733
extern __m256d __cdecl _mm256_loadu_pd(const double *); 
#line 734
extern void __cdecl _mm256_storeu_pd(double *, __m256d); 
#line 743
extern __m256 __cdecl _mm256_loadu_ps(const float *); 
#line 744
extern void __cdecl _mm256_storeu_ps(float *, __m256); 
#line 753
extern __m256i __cdecl _mm256_load_si256(const __m256i *); 
#line 754
extern void __cdecl _mm256_store_si256(__m256i *, __m256i); 
#line 763
extern __m256i __cdecl _mm256_loadu_si256(const __m256i *); 
#line 764
extern void __cdecl _mm256_storeu_si256(__m256i *, __m256i); 
#line 836
extern __m256d __cdecl _mm256_maskload_pd(const double *, __m256i); 
#line 837
extern void __cdecl _mm256_maskstore_pd(double *, __m256i, __m256d); 
#line 838
extern __m128d __cdecl _mm_maskload_pd(const double *, __m128i); 
#line 839
extern void __cdecl _mm_maskstore_pd(double *, __m128i, __m128d); 
#line 859
extern __m256 __cdecl _mm256_maskload_ps(const float *, __m256i); 
#line 860
extern void __cdecl _mm256_maskstore_ps(float *, __m256i, __m256); 
#line 861
extern __m128 __cdecl _mm_maskload_ps(const float *, __m128i); 
#line 862
extern void __cdecl _mm_maskstore_ps(float *, __m128i, __m128); 
#line 870
extern __m256 __cdecl _mm256_movehdup_ps(__m256); 
#line 878
extern __m256 __cdecl _mm256_moveldup_ps(__m256); 
#line 886
extern __m256d __cdecl _mm256_movedup_pd(__m256d); 
#line 896
extern __m256i __cdecl _mm256_lddqu_si256(const __m256i *); 
#line 904
extern void __cdecl _mm256_stream_si256(__m256i *, __m256i); 
#line 913
extern void __cdecl _mm256_stream_pd(double *, __m256d); 
#line 922
extern void __cdecl _mm256_stream_ps(float *, __m256); 
#line 932
extern __m256 __cdecl _mm256_rcp_ps(__m256); 
#line 943
extern __m256 __cdecl _mm256_rsqrt_ps(__m256); 
#line 952
extern __m256d __cdecl _mm256_sqrt_pd(__m256d); 
#line 961
extern __m256 __cdecl _mm256_sqrt_ps(__m256); 
#line 974
extern __m256d __cdecl _mm256_round_pd(__m256d, int); 
#line 989
extern __m256 __cdecl _mm256_round_ps(__m256, int); 
#line 999
extern __m256d __cdecl _mm256_unpackhi_pd(__m256d, __m256d); 
#line 1007
extern __m256 __cdecl _mm256_unpackhi_ps(__m256, __m256); 
#line 1015
extern __m256d __cdecl _mm256_unpacklo_pd(__m256d, __m256d); 
#line 1023
extern __m256 __cdecl _mm256_unpacklo_ps(__m256, __m256); 
#line 1033
extern int __cdecl _mm256_testz_si256(__m256i, __m256i); 
#line 1037
extern int __cdecl _mm256_testc_si256(__m256i, __m256i); 
#line 1041
extern int __cdecl _mm256_testnzc_si256(__m256i, __m256i); 
#line 1056
extern int __cdecl _mm256_testz_pd(__m256d, __m256d); 
#line 1057
extern int __cdecl _mm256_testc_pd(__m256d, __m256d); 
#line 1058
extern int __cdecl _mm256_testnzc_pd(__m256d, __m256d); 
#line 1059
extern int __cdecl _mm_testz_pd(__m128d, __m128d); 
#line 1060
extern int __cdecl _mm_testc_pd(__m128d, __m128d); 
#line 1061
extern int __cdecl _mm_testnzc_pd(__m128d, __m128d); 
#line 1074
extern int __cdecl _mm256_testz_ps(__m256, __m256); 
#line 1075
extern int __cdecl _mm256_testc_ps(__m256, __m256); 
#line 1076
extern int __cdecl _mm256_testnzc_ps(__m256, __m256); 
#line 1077
extern int __cdecl _mm_testz_ps(__m128, __m128); 
#line 1078
extern int __cdecl _mm_testc_ps(__m128, __m128); 
#line 1079
extern int __cdecl _mm_testnzc_ps(__m128, __m128); 
#line 1088
extern int __cdecl _mm256_movemask_pd(__m256d); 
#line 1097
extern int __cdecl _mm256_movemask_ps(__m256); 
#line 1102
extern __m256d __cdecl _mm256_setzero_pd(); 
#line 1103
extern __m256 __cdecl _mm256_setzero_ps(); 
#line 1104
extern __m256i __cdecl _mm256_setzero_si256(); 
#line 1109
extern __m256d __cdecl _mm256_set_pd(double, double, double, double); 
#line 1110
extern __m256 __cdecl _mm256_set_ps(float, float, float, float, float, float, float, float); 
#line 1112
extern __m256i __cdecl _mm256_set_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char); 
#line 1120
extern __m256i __cdecl _mm256_set_epi16(short, short, short, short, short, short, short, short, short, short, short, short, short, short, short, short); 
#line 1124
extern __m256i __cdecl _mm256_set_epi32(int, int, int, int, int, int, int, int); 
#line 1126
extern __m256i __cdecl _mm256_set_epi64x(__int64, __int64, __int64, __int64); 
#line 1138
extern __m256d __cdecl _mm256_setr_pd(double, double, double, double); 
#line 1139
extern __m256 __cdecl _mm256_setr_ps(float, float, float, float, float, float, float, float); 
#line 1141
extern __m256i __cdecl _mm256_setr_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char); 
#line 1149
extern __m256i __cdecl _mm256_setr_epi16(short, short, short, short, short, short, short, short, short, short, short, short, short, short, short, short); 
#line 1153
extern __m256i __cdecl _mm256_setr_epi32(int, int, int, int, int, int, int, int); 
#line 1155
extern __m256i __cdecl _mm256_setr_epi64x(__int64, __int64, __int64, __int64); 
#line 1164
extern __m256d __cdecl _mm256_set1_pd(double); 
#line 1165
extern __m256 __cdecl _mm256_set1_ps(float); 
#line 1166
extern __m256i __cdecl _mm256_set1_epi8(char); 
#line 1167
extern __m256i __cdecl _mm256_set1_epi16(short); 
#line 1168
extern __m256i __cdecl _mm256_set1_epi32(int); 
#line 1169
extern __m256i __cdecl _mm256_set1_epi64x(__int64); 
#line 1177
extern __m256 __cdecl _mm256_castpd_ps(__m256d); 
#line 1178
extern __m256d __cdecl _mm256_castps_pd(__m256); 
#line 1179
extern __m256i __cdecl _mm256_castps_si256(__m256); 
#line 1180
extern __m256i __cdecl _mm256_castpd_si256(__m256d); 
#line 1181
extern __m256 __cdecl _mm256_castsi256_ps(__m256i); 
#line 1182
extern __m256d __cdecl _mm256_castsi256_pd(__m256i); 
#line 1183
extern __m128 __cdecl _mm256_castps256_ps128(__m256); 
#line 1184
extern __m128d __cdecl _mm256_castpd256_pd128(__m256d); 
#line 1185
extern __m128i __cdecl _mm256_castsi256_si128(__m256i); 
#line 1186
extern __m256 __cdecl _mm256_castps128_ps256(__m128); 
#line 1187
extern __m256d __cdecl _mm256_castpd128_pd256(__m128d); 
#line 1188
extern __m256i __cdecl _mm256_castsi128_si256(__m128i); 
#line 1195
extern __m128 __cdecl _mm_cvtph_ps(__m128i); 
#line 1196
extern __m256 __cdecl _mm256_cvtph_ps(__m128i); 
#line 1197
extern __m128i __cdecl _mm_cvtps_ph(__m128, const int); 
#line 1198
extern __m128i __cdecl _mm256_cvtps_ph(__m256, int); 
#line 1219
extern unsigned __int64 __cdecl _xgetbv(unsigned); 
#line 1222
extern void __cdecl _xsetbv(unsigned, unsigned __int64); 
#line 1229
extern void __cdecl _xsave(void *, unsigned __int64); 
#line 1231
extern void __cdecl _xsave64(void *, unsigned __int64); 
#line 1239 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _xsaveopt(void *, unsigned __int64); 
#line 1241
extern void __cdecl _xsaveopt64(void *, unsigned __int64); 
#line 1248 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _xsavec(void *, unsigned __int64); 
#line 1250
extern void __cdecl _xsavec64(void *, unsigned __int64); 
#line 1258 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _xrstor(const void *, unsigned __int64); 
#line 1260
extern void __cdecl _xrstor64(const void *, unsigned __int64); 
#line 1268 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _xsaves(void *, unsigned __int64); 
#line 1270
extern void __cdecl _xsaves64(void *, unsigned __int64); 
#line 1278 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _xrstors(const void *, unsigned __int64); 
#line 1280
extern void __cdecl _xrstors64(const void *, unsigned __int64); 
#line 1287 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _fxsave(void *); 
#line 1289
extern void __cdecl _fxsave64(void *); 
#line 1296 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _fxrstor(const void *); 
#line 1298
extern void __cdecl _fxrstor64(const void *); 
#line 1307 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _rdrand16_step(unsigned short *); 
#line 1308
extern int __cdecl _rdrand32_step(unsigned *); 
#line 1310
extern int __cdecl _rdrand64_step(unsigned __int64 *); 
#line 1317 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned __cdecl _readfsbase_u32(); 
#line 1318
extern unsigned __cdecl _readgsbase_u32(); 
#line 1319
extern unsigned __int64 __cdecl _readfsbase_u64(); 
#line 1320
extern unsigned __int64 __cdecl _readgsbase_u64(); 
#line 1325
extern void __cdecl _writefsbase_u32(unsigned); 
#line 1326
extern void __cdecl _writegsbase_u32(unsigned); 
#line 1327
extern void __cdecl _writefsbase_u64(unsigned __int64); 
#line 1328
extern void __cdecl _writegsbase_u64(unsigned __int64); 
#line 1334 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_fmadd_ps(__m128, __m128, __m128); 
#line 1335
extern __m128d __cdecl _mm_fmadd_pd(__m128d, __m128d, __m128d); 
#line 1336
extern __m128 __cdecl _mm_fmadd_ss(__m128, __m128, __m128); 
#line 1337
extern __m128d __cdecl _mm_fmadd_sd(__m128d, __m128d, __m128d); 
#line 1338
extern __m128 __cdecl _mm_fmsub_ps(__m128, __m128, __m128); 
#line 1339
extern __m128d __cdecl _mm_fmsub_pd(__m128d, __m128d, __m128d); 
#line 1340
extern __m128 __cdecl _mm_fmsub_ss(__m128, __m128, __m128); 
#line 1341
extern __m128d __cdecl _mm_fmsub_sd(__m128d, __m128d, __m128d); 
#line 1342
extern __m128 __cdecl _mm_fnmadd_ps(__m128, __m128, __m128); 
#line 1343
extern __m128d __cdecl _mm_fnmadd_pd(__m128d, __m128d, __m128d); 
#line 1344
extern __m128 __cdecl _mm_fnmadd_ss(__m128, __m128, __m128); 
#line 1345
extern __m128d __cdecl _mm_fnmadd_sd(__m128d, __m128d, __m128d); 
#line 1346
extern __m128 __cdecl _mm_fnmsub_ps(__m128, __m128, __m128); 
#line 1347
extern __m128d __cdecl _mm_fnmsub_pd(__m128d, __m128d, __m128d); 
#line 1348
extern __m128 __cdecl _mm_fnmsub_ss(__m128, __m128, __m128); 
#line 1349
extern __m128d __cdecl _mm_fnmsub_sd(__m128d, __m128d, __m128d); 
#line 1351
extern __m256 __cdecl _mm256_fmadd_ps(__m256, __m256, __m256); 
#line 1352
extern __m256d __cdecl _mm256_fmadd_pd(__m256d, __m256d, __m256d); 
#line 1353
extern __m256 __cdecl _mm256_fmsub_ps(__m256, __m256, __m256); 
#line 1354
extern __m256d __cdecl _mm256_fmsub_pd(__m256d, __m256d, __m256d); 
#line 1355
extern __m256 __cdecl _mm256_fnmadd_ps(__m256, __m256, __m256); 
#line 1356
extern __m256d __cdecl _mm256_fnmadd_pd(__m256d, __m256d, __m256d); 
#line 1357
extern __m256 __cdecl _mm256_fnmsub_ps(__m256, __m256, __m256); 
#line 1358
extern __m256d __cdecl _mm256_fnmsub_pd(__m256d, __m256d, __m256d); 
#line 1364
extern __m128 __cdecl _mm_fmaddsub_ps(__m128, __m128, __m128); 
#line 1365
extern __m128d __cdecl _mm_fmaddsub_pd(__m128d, __m128d, __m128d); 
#line 1366
extern __m128 __cdecl _mm_fmsubadd_ps(__m128, __m128, __m128); 
#line 1367
extern __m128d __cdecl _mm_fmsubadd_pd(__m128d, __m128d, __m128d); 
#line 1369
extern __m256 __cdecl _mm256_fmaddsub_ps(__m256, __m256, __m256); 
#line 1370
extern __m256d __cdecl _mm256_fmaddsub_pd(__m256d, __m256d, __m256d); 
#line 1371
extern __m256 __cdecl _mm256_fmsubadd_ps(__m256, __m256, __m256); 
#line 1372
extern __m256d __cdecl _mm256_fmsubadd_pd(__m256d, __m256d, __m256d); 
#line 1378
extern __m256i __cdecl _mm256_cmpeq_epi8(__m256i, __m256i); 
#line 1379
extern __m256i __cdecl _mm256_cmpeq_epi16(__m256i, __m256i); 
#line 1380
extern __m256i __cdecl _mm256_cmpeq_epi32(__m256i, __m256i); 
#line 1381
extern __m256i __cdecl _mm256_cmpeq_epi64(__m256i, __m256i); 
#line 1383
extern __m256i __cdecl _mm256_cmpgt_epi8(__m256i, __m256i); 
#line 1384
extern __m256i __cdecl _mm256_cmpgt_epi16(__m256i, __m256i); 
#line 1385
extern __m256i __cdecl _mm256_cmpgt_epi32(__m256i, __m256i); 
#line 1386
extern __m256i __cdecl _mm256_cmpgt_epi64(__m256i, __m256i); 
#line 1392
extern __m256i __cdecl _mm256_max_epi8(__m256i, __m256i); 
#line 1393
extern __m256i __cdecl _mm256_max_epi16(__m256i, __m256i); 
#line 1394
extern __m256i __cdecl _mm256_max_epi32(__m256i, __m256i); 
#line 1395
extern __m256i __cdecl _mm256_max_epu8(__m256i, __m256i); 
#line 1396
extern __m256i __cdecl _mm256_max_epu16(__m256i, __m256i); 
#line 1397
extern __m256i __cdecl _mm256_max_epu32(__m256i, __m256i); 
#line 1399
extern __m256i __cdecl _mm256_min_epi8(__m256i, __m256i); 
#line 1400
extern __m256i __cdecl _mm256_min_epi16(__m256i, __m256i); 
#line 1401
extern __m256i __cdecl _mm256_min_epi32(__m256i, __m256i); 
#line 1402
extern __m256i __cdecl _mm256_min_epu8(__m256i, __m256i); 
#line 1403
extern __m256i __cdecl _mm256_min_epu16(__m256i, __m256i); 
#line 1404
extern __m256i __cdecl _mm256_min_epu32(__m256i, __m256i); 
#line 1410
extern __m256i __cdecl _mm256_and_si256(__m256i, __m256i); 
#line 1411
extern __m256i __cdecl _mm256_andnot_si256(__m256i, __m256i); 
#line 1412
extern __m256i __cdecl _mm256_or_si256(__m256i, __m256i); 
#line 1413
extern __m256i __cdecl _mm256_xor_si256(__m256i, __m256i); 
#line 1419
extern __m256i __cdecl _mm256_abs_epi8(__m256i); 
#line 1420
extern __m256i __cdecl _mm256_abs_epi16(__m256i); 
#line 1421
extern __m256i __cdecl _mm256_abs_epi32(__m256i); 
#line 1423
extern __m256i __cdecl _mm256_add_epi8(__m256i, __m256i); 
#line 1424
extern __m256i __cdecl _mm256_add_epi16(__m256i, __m256i); 
#line 1425
extern __m256i __cdecl _mm256_add_epi32(__m256i, __m256i); 
#line 1426
extern __m256i __cdecl _mm256_add_epi64(__m256i, __m256i); 
#line 1428
extern __m256i __cdecl _mm256_adds_epi8(__m256i, __m256i); 
#line 1429
extern __m256i __cdecl _mm256_adds_epi16(__m256i, __m256i); 
#line 1430
extern __m256i __cdecl _mm256_adds_epu8(__m256i, __m256i); 
#line 1431
extern __m256i __cdecl _mm256_adds_epu16(__m256i, __m256i); 
#line 1433
extern __m256i __cdecl _mm256_sub_epi8(__m256i, __m256i); 
#line 1434
extern __m256i __cdecl _mm256_sub_epi16(__m256i, __m256i); 
#line 1435
extern __m256i __cdecl _mm256_sub_epi32(__m256i, __m256i); 
#line 1436
extern __m256i __cdecl _mm256_sub_epi64(__m256i, __m256i); 
#line 1438
extern __m256i __cdecl _mm256_subs_epi8(__m256i, __m256i); 
#line 1439
extern __m256i __cdecl _mm256_subs_epi16(__m256i, __m256i); 
#line 1440
extern __m256i __cdecl _mm256_subs_epu8(__m256i, __m256i); 
#line 1441
extern __m256i __cdecl _mm256_subs_epu16(__m256i, __m256i); 
#line 1443
extern __m256i __cdecl _mm256_avg_epu8(__m256i, __m256i); 
#line 1444
extern __m256i __cdecl _mm256_avg_epu16(__m256i, __m256i); 
#line 1446
extern __m256i __cdecl _mm256_hadd_epi16(__m256i, __m256i); 
#line 1447
extern __m256i __cdecl _mm256_hadd_epi32(__m256i, __m256i); 
#line 1448
extern __m256i __cdecl _mm256_hadds_epi16(__m256i, __m256i); 
#line 1450
extern __m256i __cdecl _mm256_hsub_epi16(__m256i, __m256i); 
#line 1451
extern __m256i __cdecl _mm256_hsub_epi32(__m256i, __m256i); 
#line 1452
extern __m256i __cdecl _mm256_hsubs_epi16(__m256i, __m256i); 
#line 1454
extern __m256i __cdecl _mm256_madd_epi16(__m256i, __m256i); 
#line 1455
extern __m256i __cdecl _mm256_maddubs_epi16(__m256i, __m256i); 
#line 1457
extern __m256i __cdecl _mm256_mulhi_epi16(__m256i, __m256i); 
#line 1458
extern __m256i __cdecl _mm256_mulhi_epu16(__m256i, __m256i); 
#line 1460
extern __m256i __cdecl _mm256_mullo_epi16(__m256i, __m256i); 
#line 1461
extern __m256i __cdecl _mm256_mullo_epi32(__m256i, __m256i); 
#line 1463
extern __m256i __cdecl _mm256_mul_epu32(__m256i, __m256i); 
#line 1464
extern __m256i __cdecl _mm256_mul_epi32(__m256i, __m256i); 
#line 1466
extern __m256i __cdecl _mm256_sign_epi8(__m256i, __m256i); 
#line 1467
extern __m256i __cdecl _mm256_sign_epi16(__m256i, __m256i); 
#line 1468
extern __m256i __cdecl _mm256_sign_epi32(__m256i, __m256i); 
#line 1470
extern __m256i __cdecl _mm256_mulhrs_epi16(__m256i, __m256i); 
#line 1472
extern __m256i __cdecl _mm256_sad_epu8(__m256i, __m256i); 
#line 1473
extern __m256i __cdecl _mm256_mpsadbw_epu8(__m256i, __m256i, const int); 
#line 1479
extern __m256i __cdecl _mm256_slli_si256(__m256i, const int); 
#line 1481
extern __m256i __cdecl _mm256_srli_si256(__m256i, const int); 
#line 1484
extern __m256i __cdecl _mm256_sll_epi16(__m256i, __m128i); 
#line 1485
extern __m256i __cdecl _mm256_sll_epi32(__m256i, __m128i); 
#line 1486
extern __m256i __cdecl _mm256_sll_epi64(__m256i, __m128i); 
#line 1488
extern __m256i __cdecl _mm256_slli_epi16(__m256i, int); 
#line 1489
extern __m256i __cdecl _mm256_slli_epi32(__m256i, int); 
#line 1490
extern __m256i __cdecl _mm256_slli_epi64(__m256i, int); 
#line 1492
extern __m256i __cdecl _mm256_sllv_epi32(__m256i, __m256i); 
#line 1493
extern __m256i __cdecl _mm256_sllv_epi64(__m256i, __m256i); 
#line 1495
extern __m128i __cdecl _mm_sllv_epi32(__m128i, __m128i); 
#line 1496
extern __m128i __cdecl _mm_sllv_epi64(__m128i, __m128i); 
#line 1498
extern __m256i __cdecl _mm256_sra_epi16(__m256i, __m128i); 
#line 1499
extern __m256i __cdecl _mm256_sra_epi32(__m256i, __m128i); 
#line 1501
extern __m256i __cdecl _mm256_srai_epi16(__m256i, int); 
#line 1502
extern __m256i __cdecl _mm256_srai_epi32(__m256i, int); 
#line 1504
extern __m256i __cdecl _mm256_srav_epi32(__m256i, __m256i); 
#line 1506
extern __m128i __cdecl _mm_srav_epi32(__m128i, __m128i); 
#line 1508
extern __m256i __cdecl _mm256_srl_epi16(__m256i, __m128i); 
#line 1509
extern __m256i __cdecl _mm256_srl_epi32(__m256i, __m128i); 
#line 1510
extern __m256i __cdecl _mm256_srl_epi64(__m256i, __m128i); 
#line 1512
extern __m256i __cdecl _mm256_srli_epi16(__m256i, int); 
#line 1513
extern __m256i __cdecl _mm256_srli_epi32(__m256i, int); 
#line 1514
extern __m256i __cdecl _mm256_srli_epi64(__m256i, int); 
#line 1516
extern __m256i __cdecl _mm256_srlv_epi32(__m256i, __m256i); 
#line 1517
extern __m256i __cdecl _mm256_srlv_epi64(__m256i, __m256i); 
#line 1519
extern __m128i __cdecl _mm_srlv_epi32(__m128i, __m128i); 
#line 1520
extern __m128i __cdecl _mm_srlv_epi64(__m128i, __m128i); 
#line 1526
extern __m128i __cdecl _mm_blend_epi32(__m128i, __m128i, const int); 
#line 1528
extern __m256i __cdecl _mm256_blend_epi32(__m256i, __m256i, const int); 
#line 1530
extern __m256i __cdecl _mm256_alignr_epi8(__m256i, __m256i, const int); 
#line 1532
extern __m256i __cdecl _mm256_blendv_epi8(__m256i, __m256i, __m256i); 
#line 1533
extern __m256i __cdecl _mm256_blend_epi16(__m256i, __m256i, const int); 
#line 1535
extern __m256i __cdecl _mm256_packs_epi16(__m256i, __m256i); 
#line 1536
extern __m256i __cdecl _mm256_packs_epi32(__m256i, __m256i); 
#line 1537
extern __m256i __cdecl _mm256_packus_epi16(__m256i, __m256i); 
#line 1538
extern __m256i __cdecl _mm256_packus_epi32(__m256i, __m256i); 
#line 1540
extern __m256i __cdecl _mm256_unpackhi_epi8(__m256i, __m256i); 
#line 1541
extern __m256i __cdecl _mm256_unpackhi_epi16(__m256i, __m256i); 
#line 1542
extern __m256i __cdecl _mm256_unpackhi_epi32(__m256i, __m256i); 
#line 1543
extern __m256i __cdecl _mm256_unpackhi_epi64(__m256i, __m256i); 
#line 1545
extern __m256i __cdecl _mm256_unpacklo_epi8(__m256i, __m256i); 
#line 1546
extern __m256i __cdecl _mm256_unpacklo_epi16(__m256i, __m256i); 
#line 1547
extern __m256i __cdecl _mm256_unpacklo_epi32(__m256i, __m256i); 
#line 1548
extern __m256i __cdecl _mm256_unpacklo_epi64(__m256i, __m256i); 
#line 1550
extern __m256i __cdecl _mm256_shuffle_epi8(__m256i, __m256i); 
#line 1551
extern __m256i __cdecl _mm256_shuffle_epi32(__m256i, const int); 
#line 1553
extern __m256i __cdecl _mm256_shufflehi_epi16(__m256i, const int); 
#line 1554
extern __m256i __cdecl _mm256_shufflelo_epi16(__m256i, const int); 
#line 1556
extern __m128i __cdecl _mm256_extracti128_si256(__m256i, const int); 
#line 1557
extern __m256i __cdecl _mm256_inserti128_si256(__m256i, __m128i, const int); 
#line 1563
extern __m128 __cdecl _mm_broadcastss_ps(__m128); 
#line 1564
extern __m128d __cdecl _mm_broadcastsd_pd(__m128d); 
#line 1566
extern __m128i __cdecl _mm_broadcastb_epi8(__m128i); 
#line 1567
extern __m128i __cdecl _mm_broadcastw_epi16(__m128i); 
#line 1568
extern __m128i __cdecl _mm_broadcastd_epi32(__m128i); 
#line 1569
extern __m128i __cdecl _mm_broadcastq_epi64(__m128i); 
#line 1571
extern __m256 __cdecl _mm256_broadcastss_ps(__m128); 
#line 1572
extern __m256d __cdecl _mm256_broadcastsd_pd(__m128d); 
#line 1574
extern __m256i __cdecl _mm256_broadcastb_epi8(__m128i); 
#line 1575
extern __m256i __cdecl _mm256_broadcastw_epi16(__m128i); 
#line 1576
extern __m256i __cdecl _mm256_broadcastd_epi32(__m128i); 
#line 1577
extern __m256i __cdecl _mm256_broadcastq_epi64(__m128i); 
#line 1579
extern __m256i __cdecl _mm256_broadcastsi128_si256(__m128i); 
#line 1586
extern __m256i __cdecl _mm256_cvtepi8_epi16(__m128i); 
#line 1587
extern __m256i __cdecl _mm256_cvtepi8_epi32(__m128i); 
#line 1588
extern __m256i __cdecl _mm256_cvtepi8_epi64(__m128i); 
#line 1589
extern __m256i __cdecl _mm256_cvtepi16_epi32(__m128i); 
#line 1590
extern __m256i __cdecl _mm256_cvtepi16_epi64(__m128i); 
#line 1591
extern __m256i __cdecl _mm256_cvtepi32_epi64(__m128i); 
#line 1593
extern __m256i __cdecl _mm256_cvtepu8_epi16(__m128i); 
#line 1594
extern __m256i __cdecl _mm256_cvtepu8_epi32(__m128i); 
#line 1595
extern __m256i __cdecl _mm256_cvtepu8_epi64(__m128i); 
#line 1596
extern __m256i __cdecl _mm256_cvtepu16_epi32(__m128i); 
#line 1597
extern __m256i __cdecl _mm256_cvtepu16_epi64(__m128i); 
#line 1598
extern __m256i __cdecl _mm256_cvtepu32_epi64(__m128i); 
#line 1605
extern int __cdecl _mm256_movemask_epi8(__m256i); 
#line 1611
extern __m128i __cdecl _mm_maskload_epi32(const int *, __m128i); 
#line 1613
extern __m128i __cdecl _mm_maskload_epi64(const __int64 *, __m128i); 
#line 1616
extern void __cdecl _mm_maskstore_epi32(int *, __m128i, __m128i); 
#line 1619
extern void __cdecl _mm_maskstore_epi64(__int64 *, __m128i, __m128i); 
#line 1623
extern __m256i __cdecl _mm256_maskload_epi32(const int *, __m256i); 
#line 1625
extern __m256i __cdecl _mm256_maskload_epi64(const __int64 *, __m256i); 
#line 1628
extern void __cdecl _mm256_maskstore_epi32(int *, __m256i, __m256i); 
#line 1631
extern void __cdecl _mm256_maskstore_epi64(__int64 *, __m256i, __m256i); 
#line 1639
extern __m256i __cdecl _mm256_permutevar8x32_epi32(__m256i, __m256i); 
#line 1640
extern __m256 __cdecl _mm256_permutevar8x32_ps(__m256, __m256i); 
#line 1642
extern __m256i __cdecl _mm256_permute4x64_epi64(__m256i, const int); 
#line 1643
extern __m256d __cdecl _mm256_permute4x64_pd(__m256d, const int); 
#line 1645
extern __m256i __cdecl _mm256_permute2x128_si256(__m256i, __m256i, const int); 
#line 1651
extern __m256i __cdecl _mm256_stream_load_si256(const __m256i *); 
#line 1658
extern __m256d __cdecl _mm256_mask_i32gather_pd(__m256d, const double *, __m128i, __m256d, const int); 
#line 1663
extern __m256 __cdecl _mm256_mask_i32gather_ps(__m256, const float *, __m256i, __m256, const int); 
#line 1668
extern __m256d __cdecl _mm256_mask_i64gather_pd(__m256d, const double *, __m256i, __m256d, const int); 
#line 1673
extern __m128 __cdecl _mm256_mask_i64gather_ps(__m128, const float *, __m256i, __m128, const int); 
#line 1679
extern __m128d __cdecl _mm_mask_i32gather_pd(__m128d, const double *, __m128i, __m128d, const int); 
#line 1684
extern __m128 __cdecl _mm_mask_i32gather_ps(__m128, const float *, __m128i, __m128, const int); 
#line 1689
extern __m128d __cdecl _mm_mask_i64gather_pd(__m128d, const double *, __m128i, __m128d, const int); 
#line 1694
extern __m128 __cdecl _mm_mask_i64gather_ps(__m128, const float *, __m128i, __m128, const int); 
#line 1701
extern __m256i __cdecl _mm256_mask_i32gather_epi32(__m256i, const int *, __m256i, __m256i, const int); 
#line 1706
extern __m256i __cdecl _mm256_mask_i32gather_epi64(__m256i, const __int64 *, __m128i, __m256i, const int); 
#line 1711
extern __m128i __cdecl _mm256_mask_i64gather_epi32(__m128i, const int *, __m256i, __m128i, const int); 
#line 1716
extern __m256i __cdecl _mm256_mask_i64gather_epi64(__m256i, const __int64 *, __m256i, __m256i, const int); 
#line 1722
extern __m128i __cdecl _mm_mask_i32gather_epi32(__m128i, const int *, __m128i, __m128i, const int); 
#line 1727
extern __m128i __cdecl _mm_mask_i32gather_epi64(__m128i, const __int64 *, __m128i, __m128i, const int); 
#line 1732
extern __m128i __cdecl _mm_mask_i64gather_epi32(__m128i, const int *, __m128i, __m128i, const int); 
#line 1737
extern __m128i __cdecl _mm_mask_i64gather_epi64(__m128i, const __int64 *, __m128i, __m128i, const int); 
#line 1747
extern __m256d __cdecl _mm256_i32gather_pd(const double *, __m128i, const int); 
#line 1750
extern __m256 __cdecl _mm256_i32gather_ps(const float *, __m256i, const int); 
#line 1753
extern __m256d __cdecl _mm256_i64gather_pd(const double *, __m256i, const int); 
#line 1756
extern __m128 __cdecl _mm256_i64gather_ps(const float *, __m256i, const int); 
#line 1760
extern __m128d __cdecl _mm_i32gather_pd(const double *, __m128i, const int); 
#line 1763
extern __m128 __cdecl _mm_i32gather_ps(const float *, __m128i, const int); 
#line 1766
extern __m128d __cdecl _mm_i64gather_pd(const double *, __m128i, const int); 
#line 1769
extern __m128 __cdecl _mm_i64gather_ps(const float *, __m128i, const int); 
#line 1773
extern __m256i __cdecl _mm256_i32gather_epi32(const int *, __m256i, const int); 
#line 1776
extern __m256i __cdecl _mm256_i32gather_epi64(const __int64 *, __m128i, const int); 
#line 1779
extern __m128i __cdecl _mm256_i64gather_epi32(const int *, __m256i, const int); 
#line 1782
extern __m256i __cdecl _mm256_i64gather_epi64(const __int64 *, __m256i, const int); 
#line 1786
extern __m128i __cdecl _mm_i32gather_epi32(const int *, __m128i, const int); 
#line 1789
extern __m128i __cdecl _mm_i32gather_epi64(const __int64 *, __m128i, const int); 
#line 1792
extern __m128i __cdecl _mm_i64gather_epi32(const int *, __m128i, const int); 
#line 1795
extern __m128i __cdecl _mm_i64gather_epi64(const __int64 *, __m128i, const int); 
#line 1805
extern unsigned _bextr_u32(unsigned, unsigned, unsigned); 
#line 1808
extern unsigned _blsi_u32(unsigned); 
#line 1809
extern unsigned _blsmsk_u32(unsigned); 
#line 1810
extern unsigned _blsr_u32(unsigned); 
#line 1811
extern unsigned _bzhi_u32(unsigned, unsigned); 
#line 1813
extern unsigned _mulx_u32(unsigned, unsigned, unsigned *); 
#line 1816
extern unsigned _pdep_u32(unsigned, unsigned); 
#line 1818
extern unsigned _pext_u32(unsigned, unsigned); 
#line 1820
extern unsigned _rorx_u32(unsigned, const unsigned); 
#line 1822
extern int _sarx_i32(int, unsigned); 
#line 1824
extern unsigned _shlx_u32(unsigned, unsigned); 
#line 1826
extern unsigned _shrx_u32(unsigned, unsigned); 
#line 1830
extern unsigned __int64 _bextr_u64(unsigned __int64, unsigned, unsigned); 
#line 1833
extern unsigned __int64 _blsi_u64(unsigned __int64); 
#line 1834
extern unsigned __int64 _blsmsk_u64(unsigned __int64); 
#line 1835
extern unsigned __int64 _blsr_u64(unsigned __int64); 
#line 1836
extern unsigned __int64 _bzhi_u64(unsigned __int64, unsigned); 
#line 1838
extern unsigned __int64 _mulx_u64(unsigned __int64, unsigned __int64, unsigned __int64 *); 
#line 1841
extern unsigned __int64 _pdep_u64(unsigned __int64, unsigned __int64); 
#line 1843
extern unsigned __int64 _pext_u64(unsigned __int64, unsigned __int64); 
#line 1845
extern unsigned __int64 _rorx_u64(unsigned __int64, const unsigned); 
#line 1847
extern __int64 _sarx_i64(__int64, unsigned); 
#line 1849
extern unsigned __int64 _shlx_u64(unsigned __int64, unsigned); 
#line 1851
extern unsigned __int64 _shrx_u64(unsigned __int64, unsigned); 
#line 1862 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned _lzcnt_u32(unsigned); 
#line 1864
extern unsigned __int64 _lzcnt_u64(unsigned __int64); 
#line 1874 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned _tzcnt_u32(unsigned); 
#line 1876
extern unsigned __int64 _tzcnt_u64(unsigned __int64); 
#line 1884 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _invpcid(unsigned, void *); 
#line 1887
extern void _Store_HLERelease(volatile long *, long); 
#line 1888
extern void _StorePointer_HLERelease(void *volatile *, void *); 
#line 1890
extern long _InterlockedExchange_HLEAcquire(volatile long *, long); 
#line 1891
extern long _InterlockedExchange_HLERelease(volatile long *, long); 
#line 1892
extern void *_InterlockedExchangePointer_HLEAcquire(void *volatile *, void *); 
#line 1893
extern void *_InterlockedExchangePointer_HLERelease(void *volatile *, void *); 
#line 1895
extern long _InterlockedCompareExchange_HLEAcquire(volatile long *, long, long); 
#line 1896
extern long _InterlockedCompareExchange_HLERelease(volatile long *, long, long); 
#line 1897
extern __int64 _InterlockedCompareExchange64_HLEAcquire(volatile __int64 *, __int64, __int64); 
#line 1898
extern __int64 _InterlockedCompareExchange64_HLERelease(volatile __int64 *, __int64, __int64); 
#line 1899
extern void *_InterlockedCompareExchangePointer_HLEAcquire(void *volatile *, void *, void *); 
#line 1900
extern void *_InterlockedCompareExchangePointer_HLERelease(void *volatile *, void *, void *); 
#line 1902
extern long _InterlockedExchangeAdd_HLEAcquire(volatile long *, long); 
#line 1903
extern long _InterlockedExchangeAdd_HLERelease(volatile long *, long); 
#line 1905
extern long _InterlockedAnd_HLEAcquire(volatile long *, long); 
#line 1906
extern long _InterlockedAnd_HLERelease(volatile long *, long); 
#line 1907
extern long _InterlockedOr_HLEAcquire(volatile long *, long); 
#line 1908
extern long _InterlockedOr_HLERelease(volatile long *, long); 
#line 1909
extern long _InterlockedXor_HLEAcquire(volatile long *, long); 
#line 1910
extern long _InterlockedXor_HLERelease(volatile long *, long); 
#line 1912
extern unsigned char _interlockedbittestandset_HLEAcquire(long *, long); 
#line 1913
extern unsigned char _interlockedbittestandset_HLERelease(long *, long); 
#line 1914
extern unsigned char _interlockedbittestandreset_HLEAcquire(long *, long); 
#line 1915
extern unsigned char _interlockedbittestandreset_HLERelease(long *, long); 
#line 1918
extern void _Store64_HLERelease(volatile __int64 *, __int64); 
#line 1919
extern __int64 _InterlockedExchange64_HLEAcquire(volatile __int64 *, __int64); 
#line 1920
extern __int64 _InterlockedExchange64_HLERelease(volatile __int64 *, __int64); 
#line 1922
extern __int64 _InterlockedExchangeAdd64_HLEAcquire(volatile __int64 *, __int64); 
#line 1923
extern __int64 _InterlockedExchangeAdd64_HLERelease(volatile __int64 *, __int64); 
#line 1925
extern __int64 _InterlockedAnd64_HLEAcquire(volatile __int64 *, __int64); 
#line 1926
extern __int64 _InterlockedAnd64_HLERelease(volatile __int64 *, __int64); 
#line 1927
extern __int64 _InterlockedOr64_HLEAcquire(volatile __int64 *, __int64); 
#line 1928
extern __int64 _InterlockedOr64_HLERelease(volatile __int64 *, __int64); 
#line 1929
extern __int64 _InterlockedXor64_HLEAcquire(volatile __int64 *, __int64); 
#line 1930
extern __int64 _InterlockedXor64_HLERelease(volatile __int64 *, __int64); 
#line 1932
extern unsigned char _interlockedbittestandset64_HLEAcquire(__int64 *, __int64); 
#line 1933
extern unsigned char _interlockedbittestandset64_HLERelease(__int64 *, __int64); 
#line 1934
extern unsigned char _interlockedbittestandreset64_HLEAcquire(__int64 *, __int64); 
#line 1935
extern unsigned char _interlockedbittestandreset64_HLERelease(__int64 *, __int64); 
#line 1948 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned __cdecl _xbegin(); 
#line 1949
extern void __cdecl _xend(); 
#line 1950
extern void __cdecl _xabort(const unsigned); 
#line 1951
extern unsigned char __cdecl _xtest(); 
#line 1960
extern int __cdecl _rdseed16_step(unsigned short *); 
#line 1961
extern int __cdecl _rdseed32_step(unsigned *); 
#line 1963
extern int __cdecl _rdseed64_step(unsigned __int64 *); 
#line 1975 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned char __cdecl _addcarryx_u32(unsigned char, unsigned, unsigned, unsigned *); 
#line 1982
extern unsigned char __cdecl _addcarryx_u64(unsigned char, unsigned __int64, unsigned __int64, unsigned __int64 *); 
#line 1992 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned short __cdecl _load_be_u16(const void *); 
#line 1993
extern unsigned __cdecl _load_be_u32(const void *); 
#line 1994
extern unsigned __int64 __cdecl _load_be_u64(const void *); 
#line 2002
extern void __cdecl _store_be_u16(void *, unsigned short); 
#line 2003
extern void __cdecl _store_be_u32(void *, unsigned); 
#line 2004
extern void __cdecl _store_be_u64(void *, unsigned __int64); 
#line 2012
extern __m128i __cdecl _mm_sha1msg1_epu32(__m128i, __m128i); 
#line 2013
extern __m128i __cdecl _mm_sha1msg2_epu32(__m128i, __m128i); 
#line 2014
extern __m128i __cdecl _mm_sha1nexte_epu32(__m128i, __m128i); 
#line 2015
extern __m128i __cdecl _mm_sha1rnds4_epu32(__m128i, __m128i, const int); 
#line 2017
extern __m128i __cdecl _mm_sha256msg1_epu32(__m128i, __m128i); 
#line 2018
extern __m128i __cdecl _mm_sha256msg2_epu32(__m128i, __m128i); 
#line 2019
extern __m128i __cdecl _mm_sha256rnds2_epu32(__m128i, __m128i, __m128i); 
#line 2024
extern void *__cdecl _bnd_set_ptr_bounds(const void *, size_t); 
#line 2025
extern void *__cdecl _bnd_narrow_ptr_bounds(const void *, const void *, size_t); 
#line 2026
extern void *__cdecl _bnd_copy_ptr_bounds(const void *, const void *); 
#line 2027
extern void *__cdecl _bnd_init_ptr_bounds(const void *); 
#line 2028
extern void __cdecl _bnd_store_ptr_bounds(const void **, const void *); 
#line 2029
extern void __cdecl _bnd_chk_ptr_lbounds(const void *); 
#line 2030
extern void __cdecl _bnd_chk_ptr_ubounds(const void *); 
#line 2031
extern void __cdecl _bnd_chk_ptr_bounds(const void *, size_t); 
#line 2032
extern void *__cdecl _bnd_load_ptr_bounds(const void **, const void *); 
#line 2033
extern const void *__cdecl _bnd_get_ptr_lbound(const void *); 
#line 2034
extern const void *__cdecl _bnd_get_ptr_ubound(const void *); 
#line 2037
}
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
extern "C" {
#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128 _mm_macc_ps(__m128, __m128, __m128); 
#line 128
__m128d _mm_macc_pd(__m128d, __m128d, __m128d); 
#line 129
__m128 _mm_macc_ss(__m128, __m128, __m128); 
#line 130
__m128d _mm_macc_sd(__m128d, __m128d, __m128d); 
#line 131
__m128 _mm_maddsub_ps(__m128, __m128, __m128); 
#line 132
__m128d _mm_maddsub_pd(__m128d, __m128d, __m128d); 
#line 133
__m128 _mm_msubadd_ps(__m128, __m128, __m128); 
#line 134
__m128d _mm_msubadd_pd(__m128d, __m128d, __m128d); 
#line 135
__m128 _mm_msub_ps(__m128, __m128, __m128); 
#line 136
__m128d _mm_msub_pd(__m128d, __m128d, __m128d); 
#line 137
__m128 _mm_msub_ss(__m128, __m128, __m128); 
#line 138
__m128d _mm_msub_sd(__m128d, __m128d, __m128d); 
#line 139
__m128 _mm_nmacc_ps(__m128, __m128, __m128); 
#line 140
__m128d _mm_nmacc_pd(__m128d, __m128d, __m128d); 
#line 141
__m128 _mm_nmacc_ss(__m128, __m128, __m128); 
#line 142
__m128d _mm_nmacc_sd(__m128d, __m128d, __m128d); 
#line 143
__m128 _mm_nmsub_ps(__m128, __m128, __m128); 
#line 144
__m128d _mm_nmsub_pd(__m128d, __m128d, __m128d); 
#line 145
__m128 _mm_nmsub_ss(__m128, __m128, __m128); 
#line 146
__m128d _mm_nmsub_sd(__m128d, __m128d, __m128d); 
#line 149
__m128i _mm_maccs_epi16(__m128i, __m128i, __m128i); 
#line 150
__m128i _mm_macc_epi16(__m128i, __m128i, __m128i); 
#line 151
__m128i _mm_maccsd_epi16(__m128i, __m128i, __m128i); 
#line 152
__m128i _mm_maccd_epi16(__m128i, __m128i, __m128i); 
#line 153
__m128i _mm_maccs_epi32(__m128i, __m128i, __m128i); 
#line 154
__m128i _mm_macc_epi32(__m128i, __m128i, __m128i); 
#line 155
__m128i _mm_maccslo_epi32(__m128i, __m128i, __m128i); 
#line 156
__m128i _mm_macclo_epi32(__m128i, __m128i, __m128i); 
#line 157
__m128i _mm_maccshi_epi32(__m128i, __m128i, __m128i); 
#line 158
__m128i _mm_macchi_epi32(__m128i, __m128i, __m128i); 
#line 159
__m128i _mm_maddsd_epi16(__m128i, __m128i, __m128i); 
#line 160
__m128i _mm_maddd_epi16(__m128i, __m128i, __m128i); 
#line 163
__m128i _mm_haddw_epi8(__m128i); 
#line 164
__m128i _mm_haddd_epi8(__m128i); 
#line 165
__m128i _mm_haddq_epi8(__m128i); 
#line 166
__m128i _mm_haddd_epi16(__m128i); 
#line 167
__m128i _mm_haddq_epi16(__m128i); 
#line 168
__m128i _mm_haddq_epi32(__m128i); 
#line 169
__m128i _mm_haddw_epu8(__m128i); 
#line 170
__m128i _mm_haddd_epu8(__m128i); 
#line 171
__m128i _mm_haddq_epu8(__m128i); 
#line 172
__m128i _mm_haddd_epu16(__m128i); 
#line 173
__m128i _mm_haddq_epu16(__m128i); 
#line 174
__m128i _mm_haddq_epu32(__m128i); 
#line 175
__m128i _mm_hsubw_epi8(__m128i); 
#line 176
__m128i _mm_hsubd_epi16(__m128i); 
#line 177
__m128i _mm_hsubq_epi32(__m128i); 
#line 180
__m128i _mm_cmov_si128(__m128i, __m128i, __m128i); 
#line 181
__m128i _mm_perm_epi8(__m128i, __m128i, __m128i); 
#line 184
__m128i _mm_rot_epi8(__m128i, __m128i); 
#line 185
__m128i _mm_rot_epi16(__m128i, __m128i); 
#line 186
__m128i _mm_rot_epi32(__m128i, __m128i); 
#line 187
__m128i _mm_rot_epi64(__m128i, __m128i); 
#line 188
__m128i _mm_roti_epi8(__m128i, int); 
#line 189
__m128i _mm_roti_epi16(__m128i, int); 
#line 190
__m128i _mm_roti_epi32(__m128i, int); 
#line 191
__m128i _mm_roti_epi64(__m128i, int); 
#line 192
__m128i _mm_shl_epi8(__m128i, __m128i); 
#line 193
__m128i _mm_shl_epi16(__m128i, __m128i); 
#line 194
__m128i _mm_shl_epi32(__m128i, __m128i); 
#line 195
__m128i _mm_shl_epi64(__m128i, __m128i); 
#line 196
__m128i _mm_sha_epi8(__m128i, __m128i); 
#line 197
__m128i _mm_sha_epi16(__m128i, __m128i); 
#line 198
__m128i _mm_sha_epi32(__m128i, __m128i); 
#line 199
__m128i _mm_sha_epi64(__m128i, __m128i); 
#line 203
__m128i _mm_com_epu8(__m128i, __m128i, int); 
#line 204
__m128i _mm_com_epu16(__m128i, __m128i, int); 
#line 205
__m128i _mm_com_epu32(__m128i, __m128i, int); 
#line 206
__m128i _mm_com_epu64(__m128i, __m128i, int); 
#line 207
__m128i _mm_com_epi8(__m128i, __m128i, int); 
#line 208
__m128i _mm_com_epi16(__m128i, __m128i, int); 
#line 209
__m128i _mm_com_epi32(__m128i, __m128i, int); 
#line 210
__m128i _mm_com_epi64(__m128i, __m128i, int); 
#line 214
__m128 _mm_frcz_ps(__m128); 
#line 215
__m128d _mm_frcz_pd(__m128d); 
#line 216
__m128 _mm_frcz_ss(__m128, __m128); 
#line 217
__m128d _mm_frcz_sd(__m128d, __m128d); 
#line 226
__m128 _mm_permute2_ps(__m128, __m128, __m128i, int); 
#line 227
__m128d _mm_permute2_pd(__m128d, __m128d, __m128i, int); 
#line 231
__m256 _mm256_macc_ps(__m256, __m256, __m256); 
#line 232
__m256d _mm256_macc_pd(__m256d, __m256d, __m256d); 
#line 233
__m256 _mm256_maddsub_ps(__m256, __m256, __m256); 
#line 234
__m256d _mm256_maddsub_pd(__m256d, __m256d, __m256d); 
#line 235
__m256 _mm256_msubadd_ps(__m256, __m256, __m256); 
#line 236
__m256d _mm256_msubadd_pd(__m256d, __m256d, __m256d); 
#line 237
__m256 _mm256_msub_ps(__m256, __m256, __m256); 
#line 238
__m256d _mm256_msub_pd(__m256d, __m256d, __m256d); 
#line 239
__m256 _mm256_nmacc_ps(__m256, __m256, __m256); 
#line 240
__m256d _mm256_nmacc_pd(__m256d, __m256d, __m256d); 
#line 241
__m256 _mm256_nmsub_ps(__m256, __m256, __m256); 
#line 242
__m256d _mm256_nmsub_pd(__m256d, __m256d, __m256d); 
#line 243
__m256i _mm256_cmov_si256(__m256i, __m256i, __m256i); 
#line 244
__m256 _mm256_frcz_ps(__m256); 
#line 245
__m256d _mm256_frcz_pd(__m256d); 
#line 246
__m256 _mm256_permute2_ps(__m256, __m256, __m256i, int); 
#line 247
__m256d _mm256_permute2_pd(__m256d, __m256d, __m256i, int); 
#line 250
void __llwpcb(void *); 
#line 251
void *__slwpcb(); 
#line 252
void __lwpval32(unsigned, unsigned, unsigned); 
#line 253
unsigned char __lwpins32(unsigned, unsigned, unsigned); 
#line 255
void __lwpval64(unsigned __int64, unsigned, unsigned); 
#line 256
unsigned char __lwpins64(unsigned __int64, unsigned, unsigned); 
#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned _bextr_u32(unsigned, unsigned, unsigned); 
#line 261
unsigned _andn_u32(unsigned, unsigned); 
#line 262
unsigned _tzcnt_u32(unsigned); 
#line 263
unsigned _lzcnt_u32(unsigned); 
#line 264
unsigned _blsr_u32(unsigned); 
#line 265
unsigned _blsmsk_u32(unsigned); 
#line 266
unsigned _blsi_u32(unsigned); 
#line 268
unsigned __int64 _bextr_u64(unsigned __int64, unsigned, unsigned); 
#line 269
unsigned __int64 _andn_u64(unsigned __int64, unsigned __int64); 
#line 270
unsigned __int64 _tzcnt_u64(unsigned __int64); 
#line 271
unsigned __int64 _lzcnt_u64(unsigned __int64); 
#line 272
unsigned __int64 _blsr_u64(unsigned __int64); 
#line 273
unsigned __int64 _blsmsk_u64(unsigned __int64); 
#line 274
unsigned __int64 _blsi_u64(unsigned __int64); 
#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned _bextri_u32(unsigned, unsigned); 
#line 279
unsigned _blcfill_u32(unsigned); 
#line 280
unsigned _blsfill_u32(unsigned); 
#line 281
unsigned _blcs_u32(unsigned); 
#line 282
unsigned _tzmsk_u32(unsigned); 
#line 283
unsigned _blcic_u32(unsigned); 
#line 284
unsigned _blsic_u32(unsigned); 
#line 285
unsigned _t1mskc_u32(unsigned); 
#line 286
unsigned _blcmsk_u32(unsigned); 
#line 287
unsigned _blci_u32(unsigned); 
#line 289
unsigned __int64 _bextri_u64(unsigned __int64, unsigned); 
#line 290
unsigned __int64 _blcfill_u64(unsigned __int64); 
#line 291
unsigned __int64 _blsfill_u64(unsigned __int64); 
#line 292
unsigned __int64 _blcs_u64(unsigned __int64); 
#line 293
unsigned __int64 _tzmsk_u64(unsigned __int64); 
#line 294
unsigned __int64 _blcic_u64(unsigned __int64); 
#line 295
unsigned __int64 _blsic_u64(unsigned __int64); 
#line 296
unsigned __int64 _t1mskc_u64(unsigned __int64); 
#line 297
unsigned __int64 _blcmsk_u64(unsigned __int64); 
#line 298
unsigned __int64 _blci_u64(unsigned __int64); 
#line 301 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
void _mm_monitorx(const void *, unsigned, unsigned); 
#line 302
void _mm_mwaitx(unsigned, unsigned, unsigned); 
#line 304
void _mm_clzero(const void *); 
#line 307
}
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
extern "C" {
#line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void *_AddressOfReturnAddress(); 
#line 130
unsigned char _BitScanForward(unsigned long * _Index, unsigned long _Mask); 
#line 131
unsigned char _BitScanForward64(unsigned long * _Index, unsigned __int64 _Mask); 
#line 133
unsigned char _BitScanReverse(unsigned long * _Index, unsigned long _Mask); 
#line 134
unsigned char _BitScanReverse64(unsigned long * _Index, unsigned __int64 _Mask); 
#line 159
long _InterlockedAnd(volatile long * _Value, long _Mask); 
#line 160
short _InterlockedAnd16(volatile short * _Value, short _Mask); 
#line 163
short _InterlockedAnd16_np(volatile short * _Value, short _Mask); 
#line 165
__int64 _InterlockedAnd64(volatile __int64 * _Value, __int64 _Mask); 
#line 168
__int64 _InterlockedAnd64_np(volatile __int64 * _Value, __int64 _Mask); 
#line 170
char _InterlockedAnd8(volatile char * _Value, char _Mask); 
#line 173
char _InterlockedAnd8_np(volatile char * _Value, char _Mask); 
#line 177
long _InterlockedAnd_np(volatile long * _Value, long _Mask); 
#line 179
long _InterlockedCompareExchange(volatile long * _Destination, long _Exchange, long _Comparand); 
#line 181
unsigned char _InterlockedCompareExchange128(volatile __int64 * _Destination, __int64 _ExchangeHigh, __int64 _ExchangeLow, __int64 * _ComparandResult); 
#line 184
unsigned char _InterlockedCompareExchange128_np(volatile __int64 * _Destination, __int64 _ExchangeHigh, __int64 _ExchangeLow, __int64 * _ComparandResult); 
#line 186
short _InterlockedCompareExchange16(volatile short * _Destination, short _Exchange, short _Comparand); 
#line 189
short _InterlockedCompareExchange16_np(volatile short * _Destination, short _Exchange, short _Comparand); 
#line 191
__int64 _InterlockedCompareExchange64(volatile __int64 * _Destination, __int64 _Exchange, __int64 _Comparand); 
#line 194
__int64 _InterlockedCompareExchange64_np(volatile __int64 * _Destination, __int64 _Exchange, __int64 _Comparand); 
#line 196
char _InterlockedCompareExchange8(volatile char * _Destination, char _Exchange, char _Comparand); 
#line 200
void *_InterlockedCompareExchangePointer(void *volatile * _Destination, void * _Exchange, void * _Comparand); 
#line 203
void *_InterlockedCompareExchangePointer_np(void *volatile * _Destination, void * _Exchange, void * _Comparand); 
#line 207
long _InterlockedCompareExchange_np(volatile long * _Destination, long _Exchange, long _Comparand); 
#line 209
long _InterlockedDecrement(volatile long * _Addend); 
#line 211
short _InterlockedDecrement16(volatile short * _Addend); 
#line 215
__int64 _InterlockedDecrement64(volatile __int64 * _Addend); 
#line 222
long _InterlockedExchange(volatile long * _Target, long _Value); 
#line 224
short _InterlockedExchange16(volatile short * _Target, short _Value); 
#line 228
__int64 _InterlockedExchange64(volatile __int64 * _Target, __int64 _Value); 
#line 232
char _InterlockedExchange8(volatile char * _Target, char _Value); 
#line 236
long _InterlockedExchangeAdd(volatile long * _Addend, long _Value); 
#line 237
short _InterlockedExchangeAdd16(volatile short * _Addend, short _Value); 
#line 241
__int64 _InterlockedExchangeAdd64(volatile __int64 * _Addend, __int64 _Value); 
#line 245
char _InterlockedExchangeAdd8(volatile char * _Addend, char _Value); 
#line 252
void *_InterlockedExchangePointer(void *volatile * _Target, void * _Value); 
#line 259
long _InterlockedIncrement(volatile long * _Addend); 
#line 261
short _InterlockedIncrement16(volatile short * _Addend); 
#line 265
__int64 _InterlockedIncrement64(volatile __int64 * _Addend); 
#line 272
long _InterlockedOr(volatile long * _Value, long _Mask); 
#line 273
short _InterlockedOr16(volatile short * _Value, short _Mask); 
#line 276
short _InterlockedOr16_np(volatile short * _Value, short _Mask); 
#line 278
__int64 _InterlockedOr64(volatile __int64 * _Value, __int64 _Mask); 
#line 281
__int64 _InterlockedOr64_np(volatile __int64 * _Value, __int64 _Mask); 
#line 283
char _InterlockedOr8(volatile char * _Value, char _Mask); 
#line 286
char _InterlockedOr8_np(volatile char * _Value, char _Mask); 
#line 290
long _InterlockedOr_np(volatile long * _Value, long _Mask); 
#line 292
long _InterlockedXor(volatile long * _Value, long _Mask); 
#line 293
short _InterlockedXor16(volatile short * _Value, short _Mask); 
#line 296
short _InterlockedXor16_np(volatile short * _Value, short _Mask); 
#line 298
__int64 _InterlockedXor64(volatile __int64 * _Value, __int64 _Mask); 
#line 301
__int64 _InterlockedXor64_np(volatile __int64 * _Value, __int64 _Mask); 
#line 303
char _InterlockedXor8(volatile char * _Value, char _Mask); 
#line 306
char _InterlockedXor8_np(volatile char * _Value, char _Mask); 
#line 310
long _InterlockedXor_np(volatile long * _Value, long _Mask); 
#line 320
void _ReadBarrier(); 
#line 327
void _ReadWriteBarrier(); 
#line 328
void *_ReturnAddress(); 
#line 330
void _WriteBarrier(); 
#line 340
void __addgsbyte(unsigned long, unsigned char); 
#line 341
void __addgsdword(unsigned long, unsigned long); 
#line 342
void __addgsqword(unsigned long, unsigned __int64); 
#line 343
void __addgsword(unsigned long, unsigned short); 
#line 348
void __code_seg(const char *); 
#line 349
void __cpuid(int [4], int); 
#line 350
void __cpuidex(int [4], int, int); 
#line 351
void __cdecl __debugbreak(); 
#line 353
__int64 __emul(int, int); 
#line 354
unsigned __int64 __emulu(unsigned, unsigned); 
#line 355
__declspec(noreturn) void __fastfail(unsigned); 
#line 356
void __faststorefence(); 
#line 357
unsigned __getcallerseflags(); 
#line 358
void __halt(); 
#line 361
unsigned char __inbyte(unsigned short); 
#line 362
void __inbytestring(unsigned short, unsigned char *, unsigned long); 
#line 366
void __incgsbyte(unsigned long); 
#line 367
void __incgsdword(unsigned long); 
#line 368
void __incgsqword(unsigned long); 
#line 369
void __incgsword(unsigned long); 
#line 374
unsigned long __indword(unsigned short); 
#line 375
void __indwordstring(unsigned short, unsigned long *, unsigned long); 
#line 376
void __int2c(); 
#line 377
void __invlpg(void *); 
#line 378
unsigned short __inword(unsigned short); 
#line 379
void __inwordstring(unsigned short, unsigned short *, unsigned long); 
#line 389
void __lidt(void *); 
#line 390
unsigned __int64 __ll_lshift(unsigned __int64, int); 
#line 391
__int64 __ll_rshift(__int64, int); 
#line 392
unsigned __lzcnt(unsigned); 
#line 393
unsigned short __lzcnt16(unsigned short); 
#line 394
unsigned __int64 __lzcnt64(unsigned __int64); 
#line 395
void __movsb(unsigned char *, const unsigned char *, size_t); 
#line 396
void __movsd(unsigned long *, const unsigned long *, size_t); 
#line 397
void __movsq(unsigned __int64 *, const unsigned __int64 *, size_t); 
#line 398
void __movsw(unsigned short *, const unsigned short *, size_t); 
#line 399
__int64 __mulh(__int64, __int64); 
#line 400
void __nop(); 
#line 401
void __nvreg_restore_fence(); 
#line 402
void __nvreg_save_fence(); 
#line 403
void __outbyte(unsigned short, unsigned char); 
#line 404
void __outbytestring(unsigned short, unsigned char *, unsigned long); 
#line 405
void __outdword(unsigned short, unsigned long); 
#line 406
void __outdwordstring(unsigned short, unsigned long *, unsigned long); 
#line 407
void __outword(unsigned short, unsigned short); 
#line 408
void __outwordstring(unsigned short, unsigned short *, unsigned long); 
#line 409
unsigned __popcnt(unsigned); 
#line 410
unsigned short __popcnt16(unsigned short); 
#line 411
unsigned __int64 __popcnt64(unsigned __int64); 
#line 415
unsigned __int64 __rdtsc(); 
#line 416
unsigned __int64 __rdtscp(unsigned *); 
#line 417
unsigned __int64 __readcr0(); 
#line 419
unsigned __int64 __readcr2(); 
#line 421
unsigned __int64 __readcr3(); 
#line 423
unsigned __int64 __readcr4(); 
#line 425
unsigned __int64 __readcr8(); 
#line 427
unsigned __int64 __readdr(unsigned); 
#line 429
unsigned __int64 __readeflags(); 
#line 435
unsigned char __readgsbyte(unsigned long); 
#line 436
unsigned long __readgsdword(unsigned long); 
#line 437
unsigned __int64 __readgsqword(unsigned long); 
#line 438
unsigned short __readgsword(unsigned long); 
#line 439
unsigned __int64 __readmsr(unsigned long); 
#line 440
unsigned __int64 __readpmc(unsigned long); 
#line 445
unsigned long __segmentlimit(unsigned long); 
#line 447
unsigned __int64 __shiftleft128(unsigned __int64 _LowPart, unsigned __int64 _HighPart, unsigned char _Shift); 
#line 448
unsigned __int64 __shiftright128(unsigned __int64 _LowPart, unsigned __int64 _HighPart, unsigned char _Shift); 
#line 449
void __sidt(void *); 
#line 451
void __stosb(unsigned char *, unsigned char, size_t); 
#line 452
void __stosd(unsigned long *, unsigned long, size_t); 
#line 453
void __stosq(unsigned __int64 *, unsigned __int64, size_t); 
#line 454
void __stosw(unsigned short *, unsigned short, size_t); 
#line 455
void __svm_clgi(); 
#line 456
void __svm_invlpga(void *, int); 
#line 457
void __svm_skinit(int); 
#line 458
void __svm_stgi(); 
#line 459
void __svm_vmload(size_t); 
#line 460
void __svm_vmrun(size_t); 
#line 461
void __svm_vmsave(size_t); 
#line 467
void __ud2(); 
#line 468
unsigned __int64 __ull_rshift(unsigned __int64, int); 
#line 469
unsigned __int64 __umulh(unsigned __int64, unsigned __int64); 
#line 470
void __vmx_off(); 
#line 471
unsigned char __vmx_on(unsigned __int64 *); 
#line 472
unsigned char __vmx_vmclear(unsigned __int64 *); 
#line 473
unsigned char __vmx_vmlaunch(); 
#line 474
unsigned char __vmx_vmptrld(unsigned __int64 *); 
#line 475
void __vmx_vmptrst(unsigned __int64 *); 
#line 476
unsigned char __vmx_vmread(size_t, size_t *); 
#line 477
unsigned char __vmx_vmresume(); 
#line 478
unsigned char __vmx_vmwrite(size_t, size_t); 
#line 479
void __wbinvd(); 
#line 482
void __writecr0(unsigned __int64); 
#line 484
void __writecr3(unsigned __int64); 
#line 486
void __writecr4(unsigned __int64); 
#line 488
void __writecr8(unsigned __int64); 
#line 490
void __writedr(unsigned, unsigned __int64); 
#line 492
void __writeeflags(unsigned __int64); 
#line 498
void __writegsbyte(unsigned long, unsigned char); 
#line 499
void __writegsdword(unsigned long, unsigned long); 
#line 500
void __writegsqword(unsigned long, unsigned __int64); 
#line 501
void __writegsword(unsigned long, unsigned short); 
#line 502
void __writemsr(unsigned long, unsigned __int64); 
#line 508
unsigned char _bittest(const long *, long); 
#line 509
unsigned char _bittest64(const __int64 *, __int64); 
#line 510
unsigned char _bittestandcomplement(long *, long); 
#line 511
unsigned char _bittestandcomplement64(__int64 *, __int64); 
#line 512
unsigned char _bittestandreset(long *, long); 
#line 513
unsigned char _bittestandreset64(__int64 *, __int64); 
#line 514
unsigned char _bittestandset(long *, long); 
#line 515
unsigned char _bittestandset64(__int64 *, __int64); 
#line 516
unsigned __int64 __cdecl _byteswap_uint64(unsigned __int64); 
#line 517
unsigned long __cdecl _byteswap_ulong(unsigned long); 
#line 518
unsigned short __cdecl _byteswap_ushort(unsigned short); 
#line 519
void __cdecl _disable(); 
#line 520
void __cdecl _enable(); 
#line 521
unsigned char _interlockedbittestandreset(volatile long *, long); 
#line 522
unsigned char _interlockedbittestandreset64(volatile __int64 *, __int64); 
#line 529
unsigned char _interlockedbittestandset(volatile long *, long); 
#line 530
unsigned char _interlockedbittestandset64(volatile __int64 *, __int64); 
#line 547
unsigned long __cdecl _lrotl(unsigned long, int); 
#line 548
unsigned long __cdecl _lrotr(unsigned long, int); 
#line 609
void _m_prefetch(void *); 
#line 610
void _m_prefetchw(const volatile void *); 
#line 646
__m128i _mm_abs_epi16(__m128i); 
#line 647
__m128i _mm_abs_epi32(__m128i); 
#line 648
__m128i _mm_abs_epi8(__m128i); 
#line 652
__m128i _mm_add_epi16(__m128i, __m128i); 
#line 653
__m128i _mm_add_epi32(__m128i, __m128i); 
#line 654
__m128i _mm_add_epi64(__m128i, __m128i); 
#line 655
__m128i _mm_add_epi8(__m128i, __m128i); 
#line 656
__m128d _mm_add_pd(__m128d, __m128d); 
#line 657
__m128 _mm_add_ps(__m128, __m128); 
#line 658
__m128d _mm_add_sd(__m128d, __m128d); 
#line 660
__m128 _mm_add_ss(__m128, __m128); 
#line 661
__m128i _mm_adds_epi16(__m128i, __m128i); 
#line 662
__m128i _mm_adds_epi8(__m128i, __m128i); 
#line 663
__m128i _mm_adds_epu16(__m128i, __m128i); 
#line 664
__m128i _mm_adds_epu8(__m128i, __m128i); 
#line 665
__m128d _mm_addsub_pd(__m128d, __m128d); 
#line 666
__m128 _mm_addsub_ps(__m128, __m128); 
#line 667
__m128i _mm_alignr_epi8(__m128i, __m128i, int); 
#line 669
__m128d _mm_and_pd(__m128d, __m128d); 
#line 670
__m128 _mm_and_ps(__m128, __m128); 
#line 671
__m128i _mm_and_si128(__m128i, __m128i); 
#line 672
__m128d _mm_andnot_pd(__m128d, __m128d); 
#line 673
__m128 _mm_andnot_ps(__m128, __m128); 
#line 674
__m128i _mm_andnot_si128(__m128i, __m128i); 
#line 675
__m128i _mm_avg_epu16(__m128i, __m128i); 
#line 676
__m128i _mm_avg_epu8(__m128i, __m128i); 
#line 677
__m128i _mm_blend_epi16(__m128i, __m128i, int); 
#line 678
__m128d _mm_blend_pd(__m128d, __m128d, int); 
#line 679
__m128 _mm_blend_ps(__m128, __m128, int); 
#line 680
__m128i _mm_blendv_epi8(__m128i, __m128i, __m128i); 
#line 681
__m128d _mm_blendv_pd(__m128d, __m128d, __m128d); 
#line 682
__m128 _mm_blendv_ps(__m128, __m128, __m128); 
#line 683
void _mm_clflush(const void *); 
#line 684
void _mm_clflushopt(const void *); 
#line 685
void _mm_clwb(const void *); 
#line 686
void _mm_clzero(const void *); 
#line 687
__m128i _mm_cmpeq_epi16(__m128i, __m128i); 
#line 688
__m128i _mm_cmpeq_epi32(__m128i, __m128i); 
#line 689
__m128i _mm_cmpeq_epi64(__m128i, __m128i); 
#line 690
__m128i _mm_cmpeq_epi8(__m128i, __m128i); 
#line 691
__m128d _mm_cmpeq_pd(__m128d, __m128d); 
#line 692
__m128 _mm_cmpeq_ps(__m128, __m128); 
#line 693
__m128d _mm_cmpeq_sd(__m128d, __m128d); 
#line 694
__m128 _mm_cmpeq_ss(__m128, __m128); 
#line 695
int _mm_cmpestra(__m128i, int, __m128i, int, int); 
#line 696
int _mm_cmpestrc(__m128i, int, __m128i, int, int); 
#line 697
int _mm_cmpestri(__m128i, int, __m128i, int, int); 
#line 698
__m128i _mm_cmpestrm(__m128i, int, __m128i, int, int); 
#line 699
int _mm_cmpestro(__m128i, int, __m128i, int, int); 
#line 700
int _mm_cmpestrs(__m128i, int, __m128i, int, int); 
#line 701
int _mm_cmpestrz(__m128i, int, __m128i, int, int); 
#line 702
__m128d _mm_cmpge_pd(__m128d, __m128d); 
#line 703
__m128 _mm_cmpge_ps(__m128, __m128); 
#line 704
__m128d _mm_cmpge_sd(__m128d, __m128d); 
#line 705
__m128 _mm_cmpge_ss(__m128, __m128); 
#line 706
__m128i _mm_cmpgt_epi16(__m128i, __m128i); 
#line 707
__m128i _mm_cmpgt_epi32(__m128i, __m128i); 
#line 708
__m128i _mm_cmpgt_epi64(__m128i, __m128i); 
#line 709
__m128i _mm_cmpgt_epi8(__m128i, __m128i); 
#line 710
__m128d _mm_cmpgt_pd(__m128d, __m128d); 
#line 711
__m128 _mm_cmpgt_ps(__m128, __m128); 
#line 712
__m128d _mm_cmpgt_sd(__m128d, __m128d); 
#line 713
__m128 _mm_cmpgt_ss(__m128, __m128); 
#line 714
int _mm_cmpistra(__m128i, __m128i, int); 
#line 715
int _mm_cmpistrc(__m128i, __m128i, int); 
#line 716
int _mm_cmpistri(__m128i, __m128i, int); 
#line 717
__m128i _mm_cmpistrm(__m128i, __m128i, int); 
#line 718
int _mm_cmpistro(__m128i, __m128i, int); 
#line 719
int _mm_cmpistrs(__m128i, __m128i, int); 
#line 720
int _mm_cmpistrz(__m128i, __m128i, int); 
#line 721
__m128d _mm_cmple_pd(__m128d, __m128d); 
#line 722
__m128 _mm_cmple_ps(__m128, __m128); 
#line 723
__m128d _mm_cmple_sd(__m128d, __m128d); 
#line 724
__m128 _mm_cmple_ss(__m128, __m128); 
#line 725
__m128i _mm_cmplt_epi16(__m128i, __m128i); 
#line 726
__m128i _mm_cmplt_epi32(__m128i, __m128i); 
#line 727
__m128i _mm_cmplt_epi8(__m128i, __m128i); 
#line 728
__m128d _mm_cmplt_pd(__m128d, __m128d); 
#line 729
__m128 _mm_cmplt_ps(__m128, __m128); 
#line 730
__m128d _mm_cmplt_sd(__m128d, __m128d); 
#line 731
__m128 _mm_cmplt_ss(__m128, __m128); 
#line 732
__m128d _mm_cmpneq_pd(__m128d, __m128d); 
#line 733
__m128 _mm_cmpneq_ps(__m128, __m128); 
#line 734
__m128d _mm_cmpneq_sd(__m128d, __m128d); 
#line 735
__m128 _mm_cmpneq_ss(__m128, __m128); 
#line 736
__m128d _mm_cmpnge_pd(__m128d, __m128d); 
#line 737
__m128 _mm_cmpnge_ps(__m128, __m128); 
#line 738
__m128d _mm_cmpnge_sd(__m128d, __m128d); 
#line 739
__m128 _mm_cmpnge_ss(__m128, __m128); 
#line 740
__m128d _mm_cmpngt_pd(__m128d, __m128d); 
#line 741
__m128 _mm_cmpngt_ps(__m128, __m128); 
#line 742
__m128d _mm_cmpngt_sd(__m128d, __m128d); 
#line 743
__m128 _mm_cmpngt_ss(__m128, __m128); 
#line 744
__m128d _mm_cmpnle_pd(__m128d, __m128d); 
#line 745
__m128 _mm_cmpnle_ps(__m128, __m128); 
#line 746
__m128d _mm_cmpnle_sd(__m128d, __m128d); 
#line 747
__m128 _mm_cmpnle_ss(__m128, __m128); 
#line 748
__m128d _mm_cmpnlt_pd(__m128d, __m128d); 
#line 749
__m128 _mm_cmpnlt_ps(__m128, __m128); 
#line 750
__m128d _mm_cmpnlt_sd(__m128d, __m128d); 
#line 751
__m128 _mm_cmpnlt_ss(__m128, __m128); 
#line 752
__m128d _mm_cmpord_pd(__m128d, __m128d); 
#line 753
__m128 _mm_cmpord_ps(__m128, __m128); 
#line 754
__m128d _mm_cmpord_sd(__m128d, __m128d); 
#line 755
__m128 _mm_cmpord_ss(__m128, __m128); 
#line 756
__m128d _mm_cmpunord_pd(__m128d, __m128d); 
#line 757
__m128 _mm_cmpunord_ps(__m128, __m128); 
#line 758
__m128d _mm_cmpunord_sd(__m128d, __m128d); 
#line 759
__m128 _mm_cmpunord_ss(__m128, __m128); 
#line 760
int _mm_comieq_sd(__m128d, __m128d); 
#line 761
int _mm_comieq_ss(__m128, __m128); 
#line 762
int _mm_comige_sd(__m128d, __m128d); 
#line 763
int _mm_comige_ss(__m128, __m128); 
#line 764
int _mm_comigt_sd(__m128d, __m128d); 
#line 765
int _mm_comigt_ss(__m128, __m128); 
#line 766
int _mm_comile_sd(__m128d, __m128d); 
#line 767
int _mm_comile_ss(__m128, __m128); 
#line 768
int _mm_comilt_sd(__m128d, __m128d); 
#line 769
int _mm_comilt_ss(__m128, __m128); 
#line 770
int _mm_comineq_sd(__m128d, __m128d); 
#line 771
int _mm_comineq_ss(__m128, __m128); 
#line 772
unsigned _mm_crc32_u16(unsigned, unsigned short); 
#line 773
unsigned _mm_crc32_u32(unsigned, unsigned); 
#line 774
unsigned __int64 _mm_crc32_u64(unsigned __int64, unsigned __int64); 
#line 775
unsigned _mm_crc32_u8(unsigned, unsigned char); 
#line 778
__m128 _mm_cvt_si2ss(__m128, int); 
#line 779
int _mm_cvt_ss2si(__m128); 
#line 780
__m128i _mm_cvtepi16_epi32(__m128i); 
#line 781
__m128i _mm_cvtepi16_epi64(__m128i); 
#line 782
__m128i _mm_cvtepi32_epi64(__m128i); 
#line 783
__m128d _mm_cvtepi32_pd(__m128i); 
#line 784
__m128 _mm_cvtepi32_ps(__m128i); 
#line 785
__m128i _mm_cvtepi8_epi16(__m128i); 
#line 786
__m128i _mm_cvtepi8_epi32(__m128i); 
#line 787
__m128i _mm_cvtepi8_epi64(__m128i); 
#line 788
__m128i _mm_cvtepu16_epi32(__m128i); 
#line 789
__m128i _mm_cvtepu16_epi64(__m128i); 
#line 790
__m128i _mm_cvtepu32_epi64(__m128i); 
#line 791
__m128i _mm_cvtepu8_epi16(__m128i); 
#line 792
__m128i _mm_cvtepu8_epi32(__m128i); 
#line 793
__m128i _mm_cvtepu8_epi64(__m128i); 
#line 794
__m128i _mm_cvtpd_epi32(__m128d); 
#line 796
__m128 _mm_cvtpd_ps(__m128d); 
#line 798
__m128i _mm_cvtps_epi32(__m128); 
#line 799
__m128d _mm_cvtps_pd(__m128); 
#line 800
int _mm_cvtsd_si32(__m128d); 
#line 801
__int64 _mm_cvtsd_si64(__m128d); 
#line 802
__int64 _mm_cvtsd_si64x(__m128d); 
#line 803
__m128 _mm_cvtsd_ss(__m128, __m128d); 
#line 804
int _mm_cvtsi128_si32(__m128i); 
#line 805
__int64 _mm_cvtsi128_si64(__m128i); 
#line 806
__int64 _mm_cvtsi128_si64x(__m128i); 
#line 807
__m128d _mm_cvtsi32_sd(__m128d, int); 
#line 808
__m128i _mm_cvtsi32_si128(int); 
#line 809
__m128d _mm_cvtsi64_sd(__m128d, __int64); 
#line 810
__m128i _mm_cvtsi64_si128(__int64); 
#line 811
__m128 _mm_cvtsi64_ss(__m128, __int64); 
#line 812
__m128d _mm_cvtsi64x_sd(__m128d, __int64); 
#line 813
__m128i _mm_cvtsi64x_si128(__int64); 
#line 814
__m128 _mm_cvtsi64x_ss(__m128, __int64); 
#line 815
__m128d _mm_cvtss_sd(__m128d, __m128); 
#line 816
__int64 _mm_cvtss_si64(__m128); 
#line 817
__int64 _mm_cvtss_si64x(__m128); 
#line 819
int _mm_cvtt_ss2si(__m128); 
#line 820
__m128i _mm_cvttpd_epi32(__m128d); 
#line 822
__m128i _mm_cvttps_epi32(__m128); 
#line 823
int _mm_cvttsd_si32(__m128d); 
#line 824
__int64 _mm_cvttsd_si64(__m128d); 
#line 825
__int64 _mm_cvttsd_si64x(__m128d); 
#line 826
__int64 _mm_cvttss_si64(__m128); 
#line 827
__int64 _mm_cvttss_si64x(__m128); 
#line 828
__m128d _mm_div_pd(__m128d, __m128d); 
#line 829
__m128 _mm_div_ps(__m128, __m128); 
#line 830
__m128d _mm_div_sd(__m128d, __m128d); 
#line 831
__m128 _mm_div_ss(__m128, __m128); 
#line 832
__m128d _mm_dp_pd(__m128d, __m128d, int); 
#line 833
__m128 _mm_dp_ps(__m128, __m128, int); 
#line 834
int _mm_extract_epi16(__m128i, int); 
#line 835
int _mm_extract_epi32(__m128i, int); 
#line 836
__int64 _mm_extract_epi64(__m128i, int); 
#line 837
int _mm_extract_epi8(__m128i, int); 
#line 838
int _mm_extract_ps(__m128, int); 
#line 839
__m128i _mm_extract_si64(__m128i, __m128i); 
#line 840
__m128i _mm_extracti_si64(__m128i, int, int); 
#line 841
unsigned _mm_getcsr(); 
#line 842
__m128i _mm_hadd_epi16(__m128i, __m128i); 
#line 843
__m128i _mm_hadd_epi32(__m128i, __m128i); 
#line 844
__m128d _mm_hadd_pd(__m128d, __m128d); 
#line 847
__m128 _mm_hadd_ps(__m128, __m128); 
#line 848
__m128i _mm_hadds_epi16(__m128i, __m128i); 
#line 850
__m128i _mm_hsub_epi16(__m128i, __m128i); 
#line 851
__m128i _mm_hsub_epi32(__m128i, __m128i); 
#line 852
__m128d _mm_hsub_pd(__m128d, __m128d); 
#line 855
__m128 _mm_hsub_ps(__m128, __m128); 
#line 856
__m128i _mm_hsubs_epi16(__m128i, __m128i); 
#line 858
__m128i _mm_insert_epi16(__m128i, int, int); 
#line 859
__m128i _mm_insert_epi32(__m128i, int, int); 
#line 860
__m128i _mm_insert_epi64(__m128i, __int64, int); 
#line 861
__m128i _mm_insert_epi8(__m128i, int, int); 
#line 862
__m128 _mm_insert_ps(__m128, __m128, int); 
#line 863
__m128i _mm_insert_si64(__m128i, __m128i); 
#line 864
__m128i _mm_inserti_si64(__m128i, __m128i, int, int); 
#line 865
__m128i _mm_lddqu_si128(const __m128i *); 
#line 866
void _mm_lfence(); 
#line 867
__m128d _mm_load1_pd(const double *); 
#line 868
__m128d _mm_load_pd(const double *); 
#line 869
__m128 _mm_load_ps(const float *); 
#line 870
__m128 _mm_load_ps1(const float *); 
#line 871
__m128d _mm_load_sd(const double *); 
#line 872
__m128i _mm_load_si128(const __m128i *); 
#line 873
__m128 _mm_load_ss(const float *); 
#line 874
__m128d _mm_loaddup_pd(const double *); 
#line 875
__m128d _mm_loadh_pd(__m128d, const double *); 
#line 876
__m128 _mm_loadh_pi(__m128, const __m64 *); 
#line 877
__m128i _mm_loadl_epi64(const __m128i *); 
#line 878
__m128d _mm_loadl_pd(__m128d, const double *); 
#line 879
__m128 _mm_loadl_pi(__m128, const __m64 *); 
#line 880
__m128d _mm_loadr_pd(const double *); 
#line 881
__m128 _mm_loadr_ps(const float *); 
#line 882
__m128d _mm_loadu_pd(const double *); 
#line 883
__m128 _mm_loadu_ps(const float *); 
#line 884
__m128i _mm_loadu_si128(const __m128i *); 
#line 885
__m128i _mm_madd_epi16(__m128i, __m128i); 
#line 886
__m128i _mm_maddubs_epi16(__m128i, __m128i); 
#line 888
void _mm_maskmoveu_si128(__m128i, __m128i, char *); 
#line 889
__m128i _mm_max_epi16(__m128i, __m128i); 
#line 890
__m128i _mm_max_epi32(__m128i, __m128i); 
#line 891
__m128i _mm_max_epi8(__m128i, __m128i); 
#line 892
__m128i _mm_max_epu16(__m128i, __m128i); 
#line 893
__m128i _mm_max_epu32(__m128i, __m128i); 
#line 894
__m128i _mm_max_epu8(__m128i, __m128i); 
#line 895
__m128d _mm_max_pd(__m128d, __m128d); 
#line 896
__m128 _mm_max_ps(__m128, __m128); 
#line 897
__m128d _mm_max_sd(__m128d, __m128d); 
#line 898
__m128 _mm_max_ss(__m128, __m128); 
#line 899
void _mm_mfence(); 
#line 900
__m128i _mm_min_epi16(__m128i, __m128i); 
#line 901
__m128i _mm_min_epi32(__m128i, __m128i); 
#line 902
__m128i _mm_min_epi8(__m128i, __m128i); 
#line 903
__m128i _mm_min_epu16(__m128i, __m128i); 
#line 904
__m128i _mm_min_epu32(__m128i, __m128i); 
#line 905
__m128i _mm_min_epu8(__m128i, __m128i); 
#line 906
__m128d _mm_min_pd(__m128d, __m128d); 
#line 907
__m128 _mm_min_ps(__m128, __m128); 
#line 908
__m128d _mm_min_sd(__m128d, __m128d); 
#line 909
__m128 _mm_min_ss(__m128, __m128); 
#line 910
__m128i _mm_minpos_epu16(__m128i); 
#line 911
void _mm_monitor(const void *, unsigned, unsigned); 
#line 912
__m128i _mm_move_epi64(__m128i); 
#line 913
__m128d _mm_move_sd(__m128d, __m128d); 
#line 914
__m128 _mm_move_ss(__m128, __m128); 
#line 915
__m128d _mm_movedup_pd(__m128d); 
#line 916
__m128 _mm_movehdup_ps(__m128); 
#line 917
__m128 _mm_movehl_ps(__m128, __m128); 
#line 918
__m128 _mm_moveldup_ps(__m128); 
#line 919
__m128 _mm_movelh_ps(__m128, __m128); 
#line 920
int _mm_movemask_epi8(__m128i); 
#line 921
int _mm_movemask_pd(__m128d); 
#line 922
int _mm_movemask_ps(__m128); 
#line 925
__m128i _mm_mpsadbw_epu8(__m128i, __m128i, int); 
#line 926
__m128i _mm_mul_epi32(__m128i, __m128i); 
#line 927
__m128i _mm_mul_epu32(__m128i, __m128i); 
#line 928
__m128d _mm_mul_pd(__m128d, __m128d); 
#line 929
__m128 _mm_mul_ps(__m128, __m128); 
#line 930
__m128d _mm_mul_sd(__m128d, __m128d); 
#line 931
__m128 _mm_mul_ss(__m128, __m128); 
#line 933
__m128i _mm_mulhi_epi16(__m128i, __m128i); 
#line 934
__m128i _mm_mulhi_epu16(__m128i, __m128i); 
#line 935
__m128i _mm_mulhrs_epi16(__m128i, __m128i); 
#line 937
__m128i _mm_mullo_epi16(__m128i, __m128i); 
#line 938
__m128i _mm_mullo_epi32(__m128i, __m128i); 
#line 939
void _mm_mwait(unsigned, unsigned); 
#line 940
__m128d _mm_or_pd(__m128d, __m128d); 
#line 941
__m128 _mm_or_ps(__m128, __m128); 
#line 942
__m128i _mm_or_si128(__m128i, __m128i); 
#line 943
__m128i _mm_packs_epi16(__m128i, __m128i); 
#line 944
__m128i _mm_packs_epi32(__m128i, __m128i); 
#line 945
__m128i _mm_packus_epi16(__m128i, __m128i); 
#line 946
__m128i _mm_packus_epi32(__m128i, __m128i); 
#line 947
void _mm_pause(); 
#line 948
int _mm_popcnt_u32(unsigned); 
#line 949
__int64 _mm_popcnt_u64(unsigned __int64); 
#line 950
void _mm_prefetch(const char *, int); 
#line 951
__m128 _mm_rcp_ps(__m128); 
#line 952
__m128 _mm_rcp_ss(__m128); 
#line 953
__m128d _mm_round_pd(__m128d, int); 
#line 954
__m128 _mm_round_ps(__m128, int); 
#line 955
__m128d _mm_round_sd(__m128d, __m128d, int); 
#line 956
__m128 _mm_round_ss(__m128, __m128, int); 
#line 957
__m128 _mm_rsqrt_ps(__m128); 
#line 958
__m128 _mm_rsqrt_ss(__m128); 
#line 959
__m128i _mm_sad_epu8(__m128i, __m128i); 
#line 960
__m128i _mm_set1_epi16(short); 
#line 961
__m128i _mm_set1_epi32(int); 
#line 963
__m128i _mm_set1_epi64x(__int64); 
#line 964
__m128i _mm_set1_epi8(char); 
#line 965
__m128d _mm_set1_pd(double); 
#line 969
__m128i _mm_set_epi16(short, short, short, short, short, short, short, short); 
#line 970
__m128i _mm_set_epi32(int, int, int, int); 
#line 972
__m128i _mm_set_epi64x(__int64, __int64); 
#line 973
__m128i _mm_set_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char); 
#line 974
__m128d _mm_set_pd(double, double); 
#line 978
__m128 _mm_set_ps(float, float, float, float); 
#line 979
__m128 _mm_set_ps1(float); 
#line 980
__m128d _mm_set_sd(double); 
#line 981
__m128 _mm_set_ss(float); 
#line 982
void _mm_setcsr(unsigned); 
#line 983
__m128i _mm_setl_epi64(__m128i); 
#line 984
__m128i _mm_setr_epi16(short, short, short, short, short, short, short, short); 
#line 985
__m128i _mm_setr_epi32(int, int, int, int); 
#line 987
__m128i _mm_setr_epi64x(__int64, __int64); 
#line 988
__m128i _mm_setr_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char); 
#line 989
__m128d _mm_setr_pd(double, double); 
#line 993
__m128 _mm_setr_ps(float, float, float, float); 
#line 994
__m128d _mm_setzero_pd(); 
#line 995
__m128 _mm_setzero_ps(); 
#line 996
__m128i _mm_setzero_si128(); 
#line 998
void _mm_sfence(); 
#line 999
__m128i _mm_shuffle_epi32(__m128i, int); 
#line 1000
__m128i _mm_shuffle_epi8(__m128i, __m128i); 
#line 1001
__m128d _mm_shuffle_pd(__m128d, __m128d, int); 
#line 1003
__m128 _mm_shuffle_ps(__m128, __m128, unsigned); 
#line 1004
__m128i _mm_shufflehi_epi16(__m128i, int); 
#line 1005
__m128i _mm_shufflelo_epi16(__m128i, int); 
#line 1006
__m128i _mm_sign_epi16(__m128i, __m128i); 
#line 1007
__m128i _mm_sign_epi32(__m128i, __m128i); 
#line 1008
__m128i _mm_sign_epi8(__m128i, __m128i); 
#line 1012
__m128i _mm_sll_epi16(__m128i, __m128i); 
#line 1013
__m128i _mm_sll_epi32(__m128i, __m128i); 
#line 1014
__m128i _mm_sll_epi64(__m128i, __m128i); 
#line 1015
__m128i _mm_slli_epi16(__m128i, int); 
#line 1016
__m128i _mm_slli_epi32(__m128i, int); 
#line 1017
__m128i _mm_slli_epi64(__m128i, int); 
#line 1018
__m128i _mm_slli_si128(__m128i, int); 
#line 1019
__m128d _mm_sqrt_pd(__m128d); 
#line 1020
__m128 _mm_sqrt_ps(__m128); 
#line 1021
__m128d _mm_sqrt_sd(__m128d, __m128d); 
#line 1022
__m128 _mm_sqrt_ss(__m128); 
#line 1023
__m128i _mm_sra_epi16(__m128i, __m128i); 
#line 1024
__m128i _mm_sra_epi32(__m128i, __m128i); 
#line 1025
__m128i _mm_srai_epi16(__m128i, int); 
#line 1026
__m128i _mm_srai_epi32(__m128i, int); 
#line 1027
__m128i _mm_srl_epi16(__m128i, __m128i); 
#line 1028
__m128i _mm_srl_epi32(__m128i, __m128i); 
#line 1029
__m128i _mm_srl_epi64(__m128i, __m128i); 
#line 1030
__m128i _mm_srli_epi16(__m128i, int); 
#line 1031
__m128i _mm_srli_epi32(__m128i, int); 
#line 1032
__m128i _mm_srli_epi64(__m128i, int); 
#line 1033
__m128i _mm_srli_si128(__m128i, int); 
#line 1034
void _mm_store1_pd(double *, __m128d); 
#line 1035
void _mm_store_pd(double *, __m128d); 
#line 1036
void _mm_store_ps(float *, __m128); 
#line 1037
void _mm_store_ps1(float *, __m128); 
#line 1038
void _mm_store_sd(double *, __m128d); 
#line 1039
void _mm_store_si128(__m128i *, __m128i); 
#line 1040
void _mm_store_ss(float *, __m128); 
#line 1041
void _mm_storeh_pd(double *, __m128d); 
#line 1042
void _mm_storeh_pi(__m64 *, __m128); 
#line 1043
void _mm_storel_epi64(__m128i *, __m128i); 
#line 1044
void _mm_storel_pd(double *, __m128d); 
#line 1045
void _mm_storel_pi(__m64 *, __m128); 
#line 1046
void _mm_storer_pd(double *, __m128d); 
#line 1047
void _mm_storer_ps(float *, __m128); 
#line 1048
void _mm_storeu_pd(double *, __m128d); 
#line 1049
void _mm_storeu_ps(float *, __m128); 
#line 1050
void _mm_storeu_si128(__m128i *, __m128i); 
#line 1051
__m128i _mm_stream_load_si128(const __m128i *); 
#line 1052
void _mm_stream_pd(double *, __m128d); 
#line 1054
void _mm_stream_ps(float *, __m128); 
#line 1055
void _mm_stream_sd(double *, __m128d); 
#line 1056
void _mm_stream_si128(__m128i *, __m128i); 
#line 1057
void _mm_stream_si32(int *, int); 
#line 1058
void _mm_stream_si64x(__int64 *, __int64); 
#line 1059
void _mm_stream_ss(float *, __m128); 
#line 1060
__m128i _mm_sub_epi16(__m128i, __m128i); 
#line 1061
__m128i _mm_sub_epi32(__m128i, __m128i); 
#line 1062
__m128i _mm_sub_epi64(__m128i, __m128i); 
#line 1063
__m128i _mm_sub_epi8(__m128i, __m128i); 
#line 1064
__m128d _mm_sub_pd(__m128d, __m128d); 
#line 1065
__m128 _mm_sub_ps(__m128, __m128); 
#line 1066
__m128d _mm_sub_sd(__m128d, __m128d); 
#line 1068
__m128 _mm_sub_ss(__m128, __m128); 
#line 1069
__m128i _mm_subs_epi16(__m128i, __m128i); 
#line 1070
__m128i _mm_subs_epi8(__m128i, __m128i); 
#line 1071
__m128i _mm_subs_epu16(__m128i, __m128i); 
#line 1072
__m128i _mm_subs_epu8(__m128i, __m128i); 
#line 1073
int _mm_testc_si128(__m128i, __m128i); 
#line 1074
int _mm_testnzc_si128(__m128i, __m128i); 
#line 1075
int _mm_testz_si128(__m128i, __m128i); 
#line 1076
int _mm_ucomieq_sd(__m128d, __m128d); 
#line 1077
int _mm_ucomieq_ss(__m128, __m128); 
#line 1078
int _mm_ucomige_sd(__m128d, __m128d); 
#line 1079
int _mm_ucomige_ss(__m128, __m128); 
#line 1080
int _mm_ucomigt_sd(__m128d, __m128d); 
#line 1081
int _mm_ucomigt_ss(__m128, __m128); 
#line 1082
int _mm_ucomile_sd(__m128d, __m128d); 
#line 1083
int _mm_ucomile_ss(__m128, __m128); 
#line 1084
int _mm_ucomilt_sd(__m128d, __m128d); 
#line 1085
int _mm_ucomilt_ss(__m128, __m128); 
#line 1086
int _mm_ucomineq_sd(__m128d, __m128d); 
#line 1087
int _mm_ucomineq_ss(__m128, __m128); 
#line 1088
__m128i _mm_unpackhi_epi16(__m128i, __m128i); 
#line 1089
__m128i _mm_unpackhi_epi32(__m128i, __m128i); 
#line 1090
__m128i _mm_unpackhi_epi64(__m128i, __m128i); 
#line 1091
__m128i _mm_unpackhi_epi8(__m128i, __m128i); 
#line 1092
__m128d _mm_unpackhi_pd(__m128d, __m128d); 
#line 1093
__m128 _mm_unpackhi_ps(__m128, __m128); 
#line 1094
__m128i _mm_unpacklo_epi16(__m128i, __m128i); 
#line 1095
__m128i _mm_unpacklo_epi32(__m128i, __m128i); 
#line 1096
__m128i _mm_unpacklo_epi64(__m128i, __m128i); 
#line 1097
__m128i _mm_unpacklo_epi8(__m128i, __m128i); 
#line 1098
__m128d _mm_unpacklo_pd(__m128d, __m128d); 
#line 1099
__m128 _mm_unpacklo_ps(__m128, __m128); 
#line 1100
__m128d _mm_xor_pd(__m128d, __m128d); 
#line 1101
__m128 _mm_xor_ps(__m128, __m128); 
#line 1102
__m128i _mm_xor_si128(__m128i, __m128i); 
#line 1103
__int64 _mul128(__int64 _Multiplier, __int64 _Multiplicand, __int64 * _HighProduct); 
#line 1104
unsigned __cdecl _rotl(unsigned _Value, int _Shift); 
#line 1105
unsigned short __cdecl _rotl16(unsigned short _Value, unsigned char _Shift); 
#line 1106
unsigned __int64 __cdecl _rotl64(unsigned __int64 _Value, int _Shift); 
#line 1107
unsigned char __cdecl _rotl8(unsigned char _Value, unsigned char _Shift); 
#line 1108
unsigned __cdecl _rotr(unsigned _Value, int _Shift); 
#line 1109
unsigned short __cdecl _rotr16(unsigned short _Value, unsigned char _Shift); 
#line 1110
unsigned __int64 __cdecl _rotr64(unsigned __int64 _Value, int _Shift); 
#line 1111
unsigned char __cdecl _rotr8(unsigned char _Value, unsigned char _Shift); 
#line 1112
int __cdecl _setjmp(jmp_buf); 
#line 1113
int __cdecl _setjmpex(jmp_buf); 
#line 1114
unsigned __int64 _umul128(unsigned __int64 _Multiplier, unsigned __int64 _Multiplicand, unsigned __int64 * _HighProduct); 
#line 1115
void _rsm(); 
#line 1116
void _lgdt(void *); 
#line 1117
void _sgdt(void *); 
#line 1118
void _clac(); 
#line 1119
void _stac(); 
#line 1120
unsigned char __cdecl _addcarry_u8(unsigned char, unsigned char, unsigned char, unsigned char *); 
#line 1121
unsigned char __cdecl _subborrow_u8(unsigned char, unsigned char, unsigned char, unsigned char *); 
#line 1122
unsigned char __cdecl _addcarry_u16(unsigned char, unsigned short, unsigned short, unsigned short *); 
#line 1123
unsigned char __cdecl _subborrow_u16(unsigned char, unsigned short, unsigned short, unsigned short *); 
#line 1124
unsigned char __cdecl _addcarry_u32(unsigned char, unsigned, unsigned, unsigned *); 
#line 1125
unsigned char __cdecl _subborrow_u32(unsigned char, unsigned, unsigned, unsigned *); 
#line 1126
unsigned char __cdecl _addcarry_u64(unsigned char, unsigned __int64, unsigned __int64, unsigned __int64 *); 
#line 1127
unsigned char __cdecl _subborrow_u64(unsigned char, unsigned __int64, unsigned __int64, unsigned __int64 *); 
#line 1128
void _mm_monitorx(const void *, unsigned, unsigned); 
#line 1129
void _mm_mwaitx(unsigned, unsigned, unsigned); 
#line 1132
}
#line 1168 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
#pragma warning(pop)
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
#pragma warning(push,3)
#line 1169 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
#pragma pack ( pop )
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
#pragma pack ( push, 8 )
#line 13
namespace std { 
#pragma warning(disable: 4127)
#line 16
#pragma warning(disable: 4251)
#line 18
template < class _Elem,
 class _Traits = char_traits < _Elem >,
 class _Ax = allocator < _Elem > >
 class basic_string;
#line 24
template < class _Mystr >
 class _String_const_iterator
  : public _Iterator012 < random_access_iterator_tag,
   typename _Mystr :: value_type,
   typename _Mystr :: difference_type,
   typename _Mystr :: const_pointer,
   typename _Mystr :: const_reference,
   _Iterator_base >
 {
public :
 typedef _String_const_iterator < _Mystr > _Myiter;
 typedef random_access_iterator_tag iterator_category;

 typedef typename _Mystr :: value_type value_type;
 typedef typename _Mystr :: difference_type difference_type;
 typedef typename _Mystr :: const_pointer pointer;
 typedef typename _Mystr :: const_reference reference;

 _String_const_iterator ( )
  : _Ptr ( )
  {
  }

 _String_const_iterator ( pointer _Parg, const _Container_base * _Pstring )
  : _Ptr ( _Parg )
  {
  this -> _Adopt ( _Pstring );
  }

 typedef pointer _Unchecked_type;

 _Myiter & _Rechecked ( _Unchecked_type _Right )
  {
  _Ptr = _Right;
  return ( * this );
  }

 _Unchecked_type _Unchecked ( ) const
  {
  return ( _Ptr );
  }

 reference operator * ( ) const
  {




















  ;

  return ( * _Ptr );
  }

 pointer operator -> ( ) const
  {
  return ( pointer_traits < pointer > :: pointer_to ( * * this ) );
  }

 _Myiter & operator ++ ( )
  {

















  ++ _Ptr;
  return ( * this );
  }

 _Myiter operator ++ ( int )
  {
  _Myiter _Tmp = * this;
  ++ * this;
  return ( _Tmp );
  }

 _Myiter & operator -- ( )
  {

















  -- _Ptr;
  return ( * this );
  }

 _Myiter operator -- ( int )
  {
  _Myiter _Tmp = * this;
  -- * this;
  return ( _Tmp );
  }

 _Myiter & operator += ( difference_type _Off )
  {



























  _Ptr += _Off;
  return ( * this );
  }

 _Myiter operator + ( difference_type _Off ) const
  {
  _Myiter _Tmp = * this;
  return ( _Tmp += _Off );
  }

 _Myiter & operator -= ( difference_type _Off )
  {
  return ( * this += - _Off );
  }

 _Myiter operator - ( difference_type _Off ) const
  {
  _Myiter _Tmp = * this;
  return ( _Tmp -= _Off );
  }

 difference_type operator - ( const _Myiter & _Right ) const
  {
  _Compat ( _Right );
  return ( _Ptr - _Right . _Ptr );
  }

 reference operator [ ] ( difference_type _Off ) const
  {
  return ( * ( * this + _Off ) );
  }

 bool operator == ( const _Myiter & _Right ) const
  {
  _Compat ( _Right );
  return ( _Ptr == _Right . _Ptr );
  }

 bool operator != ( const _Myiter & _Right ) const
  {
  return ( ! ( * this == _Right ) );
  }

 bool operator < ( const _Myiter & _Right ) const
  {
  _Compat ( _Right );
  return ( _Ptr < _Right . _Ptr );
  }

 bool operator > ( const _Myiter & _Right ) const
  {
  return ( _Right < * this );
  }

 bool operator <= ( const _Myiter & _Right ) const
  {
  return ( ! ( _Right < * this ) );
  }

 bool operator >= ( const _Myiter & _Right ) const
  {
  return ( ! ( * this < _Right ) );
  }


















 void _Compat ( const _Myiter & ) const
  {
  }


 pointer _Ptr;
 };
#line 276 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Mystr > inline
 typename _String_const_iterator < _Mystr > :: _Unchecked_type
  _Unchecked ( _String_const_iterator < _Mystr > _Iter )
 {
 return ( _Iter . _Unchecked ( ) );
 }
#line 283
template < class _Mystr > inline
 _String_const_iterator < _Mystr >
  _Rechecked ( _String_const_iterator < _Mystr > & _Iter,
   typename _String_const_iterator < _Mystr >
    :: _Unchecked_type _Right )
 {
 return ( _Iter . _Rechecked ( _Right ) );
 }
#line 292
template < class _Mystr > inline
 _String_const_iterator < _Mystr > operator + (
  typename _String_const_iterator < _Mystr >
   :: difference_type _Off,
  _String_const_iterator < _Mystr > _Next )
 {
 return ( _Next += _Off );
 }
#line 302
template < class _Mystr >
 class _String_iterator
  : public _String_const_iterator < _Mystr >
 {
public :
 typedef _String_iterator < _Mystr > _Myiter;
 typedef _String_const_iterator < _Mystr > _Mybase;
 typedef random_access_iterator_tag iterator_category;

 typedef typename _Mystr :: value_type value_type;
 typedef typename _Mystr :: difference_type difference_type;
 typedef typename _Mystr :: pointer pointer;
 typedef typename _Mystr :: reference reference;

 _String_iterator ( )
  {
  }

 _String_iterator ( pointer _Parg, const _Container_base * _Pstring )
  : _Mybase ( _Parg, _Pstring )
  {
  }

 typedef pointer _Unchecked_type;

 _Myiter & _Rechecked ( _Unchecked_type _Right )
  {
  this -> _Ptr = _Right;
  return ( * this );
  }

 _Unchecked_type _Unchecked ( ) const
  {
  return ( _Const_cast ( this -> _Ptr ) );
  }

 reference operator * ( ) const
  {
  return ( ( reference ) * * ( _Mybase * ) this );
  }

 pointer operator -> ( ) const
  {
  return ( pointer_traits < pointer > :: pointer_to ( * * this ) );
  }

 _Myiter & operator ++ ( )
  {
  ++ * ( _Mybase * ) this;
  return ( * this );
  }

 _Myiter operator ++ ( int )
  {
  _Myiter _Tmp = * this;
  ++ * this;
  return ( _Tmp );
  }

 _Myiter & operator -- ( )
  {
  -- * ( _Mybase * ) this;
  return ( * this );
  }

 _Myiter operator -- ( int )
  {
  _Myiter _Tmp = * this;
  -- * this;
  return ( _Tmp );
  }

 _Myiter & operator += ( difference_type _Off )
  {
  * ( _Mybase * ) this += _Off;
  return ( * this );
  }

 _Myiter operator + ( difference_type _Off ) const
  {
  _Myiter _Tmp = * this;
  return ( _Tmp += _Off );
  }

 _Myiter & operator -= ( difference_type _Off )
  {
  return ( * this += - _Off );
  }

 _Myiter operator - ( difference_type _Off ) const
  {
  _Myiter _Tmp = * this;
  return ( _Tmp -= _Off );
  }

 difference_type operator - ( const _Mybase & _Right ) const
  {
  return ( * ( _Mybase * ) this - _Right );
  }

 reference operator [ ] ( difference_type _Off ) const
  {
  return ( * ( * this + _Off ) );
  }
 };
#line 408
template < class _Mystr > inline
 typename _String_iterator < _Mystr > :: _Unchecked_type
  _Unchecked ( _String_iterator < _Mystr > _Iter )
 {
 return ( _Iter . _Unchecked ( ) );
 }
#line 415
template < class _Mystr > inline
 _String_iterator < _Mystr >
  _Rechecked ( _String_iterator < _Mystr > & _Iter,
   typename _String_iterator < _Mystr >
    :: _Unchecked_type _Right )
 {
 return ( _Iter . _Rechecked ( _Right ) );
 }
#line 424
template < class _Mystr > inline
 _String_iterator < _Mystr > operator + (
  typename _String_iterator < _Mystr >
   :: difference_type _Off,
  _String_iterator < _Mystr > _Next )
 {
 return ( _Next += _Off );
 }
#line 434
template< class _Value_type, class 
#line 435
_Size_type, class 
#line 436
_Difference_type, class 
#line 437
_Pointer, class 
#line 438
_Const_pointer, class 
#line 439
_Reference, class 
#line 440
_Const_reference> 
#line 441
struct _String_iter_types { 
#line 443
typedef _Value_type value_type; 
#line 444
typedef _Size_type size_type; 
#line 445
typedef _Difference_type difference_type; 
#line 446
typedef _Pointer pointer; 
#line 447
typedef _Const_pointer const_pointer; 
#line 448
typedef _Reference reference; 
#line 449
typedef _Const_reference const_reference; 
#line 450
}; 
#line 452
template< class _Ty, class 
#line 453
_Alloc0> 
#line 454
struct _String_base_types { 
#line 456
typedef _Alloc0 _Alloc; 
#line 457
typedef _String_base_types _Myt; 
#line 459
typedef _Wrap_alloc< _Alloc0>  _Alty0; 
#line 460
typedef typename _Wrap_alloc< _Alloc0> ::template rebind< _Ty> ::other _Alty; 
#line 472
typedef typename _If< _Is_simple_alloc< typename _Wrap_alloc< _Alloc0> ::template rebind< _Ty> ::other> ::value, _Simple_types< typename _Alty::value_type> , _String_iter_types< typename _Alty::value_type, typename _Alty::size_type, typename _Alty::difference_type, typename _Alty::pointer, typename _Alty::const_pointer, typename _Alty::reference, typename _Alty::const_reference> > ::type _Val_types; 
#line 473
}; 
#line 476
template < class _Val_types >
 class _String_val
  : public _Container_base
 {
public :
 typedef _String_val < _Val_types > _Myt;

 typedef typename _Val_types :: value_type value_type;
 typedef typename _Val_types :: size_type size_type;
 typedef typename _Val_types :: difference_type difference_type;
 typedef typename _Val_types :: pointer pointer;
 typedef typename _Val_types :: const_pointer const_pointer;
 typedef typename _Val_types :: reference reference;
 typedef typename _Val_types :: const_reference const_reference;

 typedef _String_iterator < _Myt > iterator;
 typedef _String_const_iterator < _Myt > const_iterator;

 _String_val ( )
  : _Bx ( ),
  _Mysize ( 0 ),
  _Myres ( 0 )
  {
  }

 enum
  {
  _BUF_SIZE = 16 / sizeof ( value_type ) < 1 ? 1
   : 16 / sizeof ( value_type ) };
 enum
  {
  _ALLOC_MASK = sizeof ( value_type ) <= 1 ? 15
   : sizeof ( value_type ) <= 2 ? 7
   : sizeof ( value_type ) <= 4 ? 3
   : sizeof ( value_type ) <= 8 ? 1 : 0 };

 value_type * _Myptr ( )
  {
  return ( this -> _BUF_SIZE <= _Myres
   ? _Unfancy ( _Bx . _Ptr )
   : _Bx . _Buf );
  }

 const value_type * _Myptr ( ) const
  {
  return ( this -> _BUF_SIZE <= _Myres
   ? _Unfancy ( _Bx . _Ptr )
   : _Bx . _Buf );
  }

 union _Bxty
  {
  _Bxty ( )
   {
   }

  ~ _Bxty ( ) noexcept
   {
   }

  value_type _Buf [ _BUF_SIZE ];
  pointer _Ptr;
  char _Alias [ _BUF_SIZE ];
  } _Bx;

 size_type _Mysize;
 size_type _Myres;
 };
#line 546
template < class _Alloc_types >
 class _String_alloc
 {
public :
 typedef _String_alloc < _Alloc_types > _Myt;
 typedef typename _Alloc_types :: _Alloc _Alloc;
 typedef typename _Alloc_types :: _Alty _Alty;
 typedef typename _Alloc_types :: _Val_types _Val_types;

 typedef typename _Val_types :: value_type value_type;
 typedef typename _Val_types :: size_type size_type;
 typedef typename _Val_types :: difference_type difference_type;
 typedef typename _Val_types :: pointer pointer;
 typedef typename _Val_types :: const_pointer const_pointer;
 typedef typename _Val_types :: reference reference;
 typedef typename _Val_types :: const_reference const_reference;

 typedef _String_iterator < _String_val < _Val_types > > iterator;
 typedef _String_const_iterator < _String_val < _Val_types > > const_iterator;

 enum
  {
  _BUF_SIZE = _String_val < _Val_types > :: _BUF_SIZE
  };

 enum
  {
  _ALLOC_MASK = _String_val < _Val_types > :: _ALLOC_MASK
  };

 value_type * _Myptr ( )
  {
  return ( _Get_data ( ) . _Myptr ( ) );
  }

 const value_type * _Myptr ( ) const
  {
  return ( _Get_data ( ) . _Myptr ( ) );
  }


 _String_alloc ( )
  : _Mypair ( _Zero_then_variadic_args_t ( ) )
  {
  }

 template < class _Any_alloc,
  class = enable_if_t < ! is_same < decay_t < _Any_alloc >, _Myt > :: value > >
  _String_alloc ( _Any_alloc && _Al )
  : _Mypair ( _One_then_variadic_args_t ( ),
   :: std :: forward < _Any_alloc > ( _Al ) )
  {
  }

 void _Copy_alloc ( const _Alty & _Al )
  {
  _Pocca ( _Getal ( ), _Al );
  }

 void _Move_alloc ( _Alty & _Al )
  {
  _Pocma ( _Getal ( ), _Al );
  }







































































 void _Orphan_all ( )
  {
  _Get_data ( ) . _Orphan_all ( );
  }

 void _Swap_all ( _Myt & _Right )
  {
  _Get_data ( ) . _Swap_all ( _Right . _Get_data ( ) );
  }

 _Alty & _Getal ( ) noexcept
  {
  return ( _Mypair . _Get_first ( ) );
  }

 const _Alty & _Getal ( ) const noexcept
  {
  return ( _Mypair . _Get_first ( ) );
  }

 _String_val < _Val_types > & _Get_data ( ) noexcept
  {
  return ( _Mypair . _Get_second ( ) );
  }

 const _String_val < _Val_types > & _Get_data ( ) const noexcept
  {
  return ( _Mypair . _Get_second ( ) );
  }

 typedef typename _String_val < _Val_types > :: _Bxty _Bxty;

 _Bxty & _Bx ( ) noexcept
  {
  return ( _Get_data ( ) . _Bx );
  }

 const _Bxty & _Bx ( ) const noexcept
  {
  return ( _Get_data ( ) . _Bx );
  }

 size_type & _Mysize ( ) noexcept
  {
  return ( _Get_data ( ) . _Mysize );
  }

 const size_type & _Mysize ( ) const noexcept
  {
  return ( _Get_data ( ) . _Mysize );
  }

 size_type & _Myres ( ) noexcept
  {
  return ( _Get_data ( ) . _Myres );
  }

 const size_type & _Myres ( ) const noexcept
  {
  return ( _Get_data ( ) . _Myres );
  }

private :
 _Compressed_pair < _Alty, _String_val < _Val_types > > _Mypair;
 };
#line 747 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc >
 class basic_string
  : public _String_alloc < _String_base_types < _Elem, _Alloc > >
 {
public :
 typedef basic_string < _Elem, _Traits, _Alloc > _Myt;
 typedef _String_alloc < _String_base_types < _Elem, _Alloc > > _Mybase;
 typedef _Traits traits_type;
 typedef _Alloc allocator_type;

 typedef typename _Mybase :: _Alty _Alty;

 typedef typename _Mybase :: value_type value_type;
 typedef typename _Mybase :: size_type size_type;
 typedef typename _Mybase :: difference_type difference_type;
 typedef typename _Mybase :: pointer pointer;
 typedef typename _Mybase :: const_pointer const_pointer;
 typedef typename _Mybase :: reference reference;
 typedef typename _Mybase :: const_reference const_reference;

 typedef typename _Mybase :: iterator iterator;
 typedef typename _Mybase :: const_iterator const_iterator;

 typedef :: std :: reverse_iterator < iterator > reverse_iterator;
 typedef :: std :: reverse_iterator < const_iterator > const_reverse_iterator;

 basic_string ( const _Myt & _Right )

  : _Mybase ( _Right . _Getal ( ) . select_on_container_copy_construction ( ) )


  {
  _Tidy ( );
  assign ( _Right, 0, npos );
  }

 basic_string ( const _Myt & _Right, const _Alloc & _Al )
  : _Mybase ( _Al )
  {
  _Tidy ( );
  assign ( _Right, 0, npos );
  }

 basic_string ( ) noexcept ( is_nothrow_default_constructible < _Alloc > :: value )
  : _Mybase ( )
  {
  _Tidy ( );
  }

 explicit basic_string ( const _Alloc & _Al ) noexcept
  : _Mybase ( _Al )
  {
  _Tidy ( );
  }

 basic_string ( const _Myt & _Right, size_type _Roff,
  size_type _Count = npos )
  : _Mybase ( _Right . _Getal ( ) )
  {
  _Tidy ( );
  assign ( _Right, _Roff, _Count );
  }

 basic_string ( const _Myt & _Right, size_type _Roff, size_type _Count,
  const _Alloc & _Al )
  : _Mybase ( _Al )
  {
  _Tidy ( );
  assign ( _Right, _Roff, _Count );
  }

 basic_string ( const _Elem * _Ptr, size_type _Count )
  : _Mybase ( )
  {
  _Tidy ( );
  assign ( _Ptr, _Count );
  }

 basic_string ( const _Elem * _Ptr, size_type _Count, const _Alloc & _Al )
  : _Mybase ( _Al )
  {
  _Tidy ( );
  assign ( _Ptr, _Count );
  }

 basic_string ( const _Elem * _Ptr )
  : _Mybase ( )
  {
  _Tidy ( );
  assign ( _Ptr );
  }

 basic_string ( const _Elem * _Ptr, const _Alloc & _Al )
  : _Mybase ( _Al )
  {
  _Tidy ( );
  assign ( _Ptr );
  }

 basic_string ( size_type _Count, _Elem _Ch )
  : _Mybase ( )
  {
  _Tidy ( );
  assign ( _Count, _Ch );
  }

 basic_string ( size_type _Count, _Elem _Ch, const _Alloc & _Al )
  : _Mybase ( _Al )
  {
  _Tidy ( );
  assign ( _Count, _Ch );
  }

 template < class _Iter,
  class = typename enable_if < _Is_iterator < _Iter > :: value,
   void > :: type >
  basic_string ( _Iter _First, _Iter _Last, const _Alloc & _Al = _Alloc ( ) )
  : _Mybase ( _Al )
  {
  ;
  _Tidy ( );
  _Construct ( _Unchecked ( _First ), _Unchecked ( _Last ), _Iter_cat_t < _Iter > ( ) );
  }

 template < class _Iter >
  void _Construct ( _Iter _First,
   _Iter _Last, input_iterator_tag )
  {
  try {
  for (; _First != _Last; ++ _First )
   append ( ( size_type ) 1, ( _Elem ) * _First );
  } catch ( ... ) {
  _Tidy ( true );
  throw;
  }
  }

 template < class _Iter >
  void _Construct ( _Iter _First,
   _Iter _Last, forward_iterator_tag )
  {
  size_type _Count = :: std :: distance ( _First, _Last );
  reserve ( _Count );
  _Construct ( _First, _Last, input_iterator_tag ( ) );
  }

 void _Construct ( _Elem * _First,
  _Elem * _Last, random_access_iterator_tag )
  {
  if ( _First != _Last )
   assign ( _First, _Last - _First );
  }

 void _Construct ( const _Elem * _First,
  const _Elem * _Last, random_access_iterator_tag )
  {
  if ( _First != _Last )
   assign ( _First, _Last - _First );
  }

 basic_string ( _Myt && _Right ) noexcept
  : _Mybase ( :: std :: move ( _Right . _Getal ( ) ) )
  {
  _Tidy ( );
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  }

 basic_string ( _Myt && _Right, const _Alloc & _Al )
  : _Mybase ( _Al )
  {
  if ( this -> _Getal ( ) != _Right . _Getal ( ) )
   assign ( _Right . begin ( ), _Right . end ( ) );
  else
   _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  }

 _Myt & operator = ( _Myt && _Right )
  noexcept ( _Alty :: propagate_on_container_move_assignment :: value || _Alty :: is_always_equal :: value )

  {
  if ( this != & _Right )
   {
   _Tidy ( true );

   if ( _Alty :: propagate_on_container_move_assignment :: value
    && this -> _Getal ( ) != _Right . _Getal ( ) )
    this -> _Move_alloc ( _Right . _Getal ( ) );

   if ( this -> _Getal ( ) != _Right . _Getal ( ) )
    assign ( _Right . begin ( ), _Right . end ( ) );
   else
    _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
   }
  return ( * this );
  }

 _Myt & assign ( _Myt && _Right ) noexcept
  {
  if ( this == & _Right )
   ;
  else if ( get_allocator ( ) != _Right . get_allocator ( )
   && this -> _BUF_SIZE <= _Right . _Myres ( ) )
   * this = _Right;
  else
   {
   _Tidy ( true );
   _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
   }
  return ( * this );
  }

 void _Assign_rv ( _Myt && _Right )
  {
  if ( _Right . _Myres ( ) < this -> _BUF_SIZE )
   _Traits :: move ( this -> _Bx ( ) . _Buf, _Right . _Bx ( ) . _Buf,
    _Right . _Mysize ( ) + 1 );
  else
   {
   this -> _Getal ( ) . construct ( :: std :: addressof ( this -> _Bx ( ) . _Ptr ), _Right . _Bx ( ) . _Ptr );
   _Right . _Bx ( ) . _Ptr = pointer ( );
   }
  this -> _Mysize ( ) = _Right . _Mysize ( );
  this -> _Myres ( ) = _Right . _Myres ( );
  _Right . _Tidy ( );
  }

 basic_string ( :: std :: initializer_list < _Elem > _Ilist,
  const _Alloc & _Al = allocator_type ( ) )
  : _Mybase ( _Al )
  {
  _Tidy ( );
  assign ( _Ilist . begin ( ), _Ilist . end ( ) );
  }

 _Myt & operator = ( :: std :: initializer_list < _Elem > _Ilist )
  {
  return ( assign ( _Ilist . begin ( ), _Ilist . end ( ) ) );
  }

 _Myt & operator += ( :: std :: initializer_list < _Elem > _Ilist )
  {
  return ( append ( _Ilist . begin ( ), _Ilist . end ( ) ) );
  }

 _Myt & assign ( :: std :: initializer_list < _Elem > _Ilist )
  {
  return ( assign ( _Ilist . begin ( ), _Ilist . end ( ) ) );
  }

 _Myt & append ( :: std :: initializer_list < _Elem > _Ilist )
  {
  return ( append ( _Ilist . begin ( ), _Ilist . end ( ) ) );
  }

 iterator insert ( const_iterator _Where,
  :: std :: initializer_list < _Elem > _Ilist )
  {
  return ( insert ( _Where, _Ilist . begin ( ), _Ilist . end ( ) ) );
  }

 _Myt & replace ( const_iterator _First, const_iterator _Last,
  :: std :: initializer_list < _Elem > _Ilist )
  {
  return ( replace ( _First, _Last, _Ilist . begin ( ), _Ilist . end ( ) ) );
  }

 ~ basic_string ( ) noexcept
  {
  _Tidy ( true );
  }

  static const size_type npos;

 _Myt & operator = ( const _Myt & _Right )
  {
  if ( this != & _Right )
   {
   if ( this -> _Getal ( ) != _Right . _Getal ( )
    && _Alty :: propagate_on_container_copy_assignment :: value )
    {
    _Tidy ( true );
    this -> _Copy_alloc ( _Right . _Getal ( ) );
    }

   assign ( _Right );
   }
  return ( * this );
  }

 _Myt & operator = ( const _Elem * _Ptr )
  {
  return ( assign ( _Ptr ) );
  }

 _Myt & operator = ( _Elem _Ch )
  {
  return ( assign ( 1, _Ch ) );
  }

 _Myt & operator += ( const _Myt & _Right )
  {
  return ( append ( _Right ) );
  }

 _Myt & operator += ( const _Elem * _Ptr )
  {
  return ( append ( _Ptr ) );
  }

 _Myt & operator += ( _Elem _Ch )
  {
  return ( append ( ( size_type ) 1, _Ch ) );
  }

 _Myt & append ( const _Myt & _Right )
  {
  return ( append ( _Right, 0, npos ) );
  }

 _Myt & append ( const _Myt & _Right,
  size_type _Roff, size_type _Count = npos )
  {
  _Right . _Check_offset ( _Roff );
  _Count = _Right . _Clamp_suffix_size ( _Roff, _Count );
  if ( npos - this -> _Mysize ( ) <= _Count )
   _Xlen ( );

  const size_type _Num = this -> _Mysize ( ) + _Count;
  if ( 0 < _Count && _Grow ( _Num ) )
   {
   _Traits :: copy ( this -> _Myptr ( ) + this -> _Mysize ( ),
    _Right . _Myptr ( ) + _Roff, _Count );
   _Eos ( _Num );
   }
  return ( * this );
  }

 _Myt & append ( const _Elem * _Ptr, size_type _Count )
  {
  ;
  if ( _Inside ( _Ptr ) )
   return ( append ( * this,
    _Ptr - this -> _Myptr ( ), _Count ) );
  if ( npos - this -> _Mysize ( ) <= _Count )
   _Xlen ( );

  const size_type _Num = this -> _Mysize ( ) + _Count;
  if ( 0 < _Count && _Grow ( _Num ) )
   {
   _Traits :: copy ( this -> _Myptr ( ) + this -> _Mysize ( ), _Ptr, _Count );
   _Eos ( _Num );
   }
  return ( * this );
  }

 _Myt & append ( const _Elem * _Ptr )
  {
  ;
  return ( append ( _Ptr, _Traits :: length ( _Ptr ) ) );
  }

 _Myt & append ( size_type _Count, _Elem _Ch )
  {
  if ( npos - this -> _Mysize ( ) <= _Count )
   _Xlen ( );

  const size_type _Num = this -> _Mysize ( ) + _Count;
  if ( 0 < _Count && _Grow ( _Num ) )
   {
   _Chassign ( this -> _Mysize ( ), _Count, _Ch );
   _Eos ( _Num );
   }
  return ( * this );
  }

 template < class _Iter >
  typename enable_if < _Is_iterator < _Iter > :: value,
   _Myt & > :: type
  append ( _Iter _First, _Iter _Last )
  {
  return ( replace ( end ( ), end ( ), _First, _Last ) );
  }

 _Myt & append ( const_pointer _First, const_pointer _Last )
  {
  return ( replace ( end ( ), end ( ), _First, _Last ) );
  }

 _Myt & append ( const_iterator _First, const_iterator _Last )
  {
  return ( replace ( end ( ), end ( ), _First, _Last ) );
  }

 _Myt & assign ( const _Myt & _Right )
  {
  return ( assign ( _Right, 0, npos ) );
  }

 _Myt & assign ( const _Myt & _Right,
  size_type _Roff, size_type _Count = npos )
  {
  _Right . _Check_offset ( _Roff );
  _Count = _Right . _Clamp_suffix_size ( _Roff, _Count );

  if ( this == & _Right )
   erase ( ( size_type ) ( _Roff + _Count ) ), erase ( 0, _Roff );
  else if ( _Grow ( _Count ) )
   {
   _Traits :: copy ( this -> _Myptr ( ),
    _Right . _Myptr ( ) + _Roff, _Count );
   _Eos ( _Count );
   }
  return ( * this );
  }

 _Myt & assign ( const _Elem * _Ptr, size_type _Count )
  {
  ;
  if ( _Inside ( _Ptr ) )
   return ( assign ( * this,
    _Ptr - this -> _Myptr ( ), _Count ) );

  if ( _Grow ( _Count ) )
   {
   _Traits :: copy ( this -> _Myptr ( ), _Ptr, _Count );
   _Eos ( _Count );
   }
  return ( * this );
  }

 _Myt & assign ( const _Elem * _Ptr )
  {
  ;
  return ( assign ( _Ptr, _Traits :: length ( _Ptr ) ) );
  }

 _Myt & assign ( size_type _Count, _Elem _Ch )
  {
  if ( _Count == npos )
   _Xlen ( );

  if ( _Grow ( _Count ) )
   {
   _Chassign ( 0, _Count, _Ch );
   _Eos ( _Count );
   }
  return ( * this );
  }

 template < class _Iter >
  typename enable_if < _Is_iterator < _Iter > :: value,
   _Myt & > :: type
  assign ( _Iter _First, _Iter _Last )
  {
  return ( replace ( begin ( ), end ( ), _First, _Last ) );
  }

 _Myt & assign ( const_pointer _First, const_pointer _Last )
  {
  return ( replace ( begin ( ), end ( ), _First, _Last ) );
  }

 _Myt & assign ( const_iterator _First, const_iterator _Last )
  {
  return ( replace ( begin ( ), end ( ), _First, _Last ) );
  }

 _Myt & insert ( size_type _Off, const _Myt & _Right )
  {
  return ( insert ( _Off, _Right, 0, npos ) );
  }

 _Myt & insert ( size_type _Off,
  const _Myt & _Right, size_type _Roff, size_type _Count = npos )
  {
  _Check_offset ( _Off );
  _Right . _Check_offset ( _Roff );
  _Count = _Right . _Clamp_suffix_size ( _Roff, _Count );
  if ( npos - this -> _Mysize ( ) <= _Count )
   _Xlen ( );

  const size_type _Num = this -> _Mysize ( ) + _Count;
  if ( 0 < _Count && _Grow ( _Num ) )
   {
   _Traits :: move ( this -> _Myptr ( ) + _Off + _Count,
    this -> _Myptr ( ) + _Off,
    this -> _Mysize ( ) - _Off );
   if ( this == & _Right )
    _Traits :: move ( this -> _Myptr ( ) + _Off,
     this -> _Myptr ( ) + ( _Off < _Roff ? _Roff + _Count : _Roff ),
      _Count );
   else
    _Traits :: copy ( this -> _Myptr ( ) + _Off,
     _Right . _Myptr ( ) + _Roff, _Count );
   _Eos ( _Num );
   }
  return ( * this );
  }

 _Myt & insert ( size_type _Off,
  const _Elem * _Ptr, size_type _Count )
  {
  ;
  if ( _Inside ( _Ptr ) )
   return ( insert ( _Off, * this,
    _Ptr - this -> _Myptr ( ), _Count ) );
  _Check_offset ( _Off );
  if ( npos - this -> _Mysize ( ) <= _Count )
   _Xlen ( );
  const size_type _Num = this -> _Mysize ( ) + _Count;
  if ( 0 < _Count && _Grow ( _Num ) )
   {
   _Traits :: move ( this -> _Myptr ( ) + _Off + _Count,
    this -> _Myptr ( ) + _Off,
    this -> _Mysize ( ) - _Off );
   _Traits :: copy ( this -> _Myptr ( ) + _Off, _Ptr, _Count );
   _Eos ( _Num );
   }
  return ( * this );
  }

 _Myt & insert ( size_type _Off, const _Elem * _Ptr )
  {
  ;
  return ( insert ( _Off, _Ptr, _Traits :: length ( _Ptr ) ) );
  }

 _Myt & insert ( size_type _Off,
  size_type _Count, _Elem _Ch )
  {
  _Check_offset ( _Off );
  if ( npos - this -> _Mysize ( ) <= _Count )
   _Xlen ( );
  const size_type _Num = this -> _Mysize ( ) + _Count;
  if ( 0 < _Count && _Grow ( _Num ) )
   {
   _Traits :: move ( this -> _Myptr ( ) + _Off + _Count,
    this -> _Myptr ( ) + _Off,
    this -> _Mysize ( ) - _Off );
   _Chassign ( _Off, _Count, _Ch );
   _Eos ( _Num );
   }
  return ( * this );
  }

 iterator insert ( const_iterator _Where )
  {
  return ( insert ( _Where, _Elem ( ) ) );
  }

 iterator insert ( const_iterator _Where, _Elem _Ch )
  {
  size_type _Off = _Where - begin ( );
  insert ( _Off, 1, _Ch );
  return ( begin ( ) + _Off );
  }

 iterator insert ( const_iterator _Where, size_type _Count, _Elem _Ch )
  {
  size_type _Off = _Where - begin ( );
  insert ( _Off, _Count, _Ch );
  return ( begin ( ) + _Off );
  }

 template < class _Iter >
  typename enable_if < _Is_iterator < _Iter > :: value,
   iterator > :: type
  insert ( const_iterator _Where, _Iter _First, _Iter _Last )
  {
  size_type _Off = _Where - begin ( );
  replace ( _Where, _Where, _First, _Last );
  return ( begin ( ) + _Off );
  }

 iterator insert ( const_iterator _Where,
  const_pointer _First, const_pointer _Last )
  {
  size_type _Off = _Where - begin ( );
  replace ( _Where, _Where, _First, _Last );
  return ( begin ( ) + _Off );
  }

 iterator insert ( const_iterator _Where,
  const_iterator _First, const_iterator _Last )
  {
  size_type _Off = _Where - begin ( );
  replace ( _Where, _Where, _First, _Last );
  return ( begin ( ) + _Off );
  }

 _Myt & erase ( size_type _Off = 0 )
  {
  _Check_offset ( _Off );
  _Eos ( _Off );
  return ( * this );
  }

 _Myt & erase ( size_type _Off, size_type _Count )
  {
  _Check_offset ( _Off );
  if ( this -> _Mysize ( ) - _Off <= _Count )
   _Eos ( _Off );
  else if ( 0 < _Count )
   {
   value_type * _Ptr = this -> _Myptr ( ) + _Off;
   size_type _Newsize = this -> _Mysize ( ) - _Count;
   _Traits :: move ( _Ptr, _Ptr + _Count, _Newsize - _Off );
   _Eos ( _Newsize );
   }
  return ( * this );
  }

 iterator erase ( const_iterator _Where )
  {
  size_type _Count = _Where - begin ( );
  erase ( _Count, 1 );
  return ( begin ( ) + _Count );
  }

 iterator erase ( const_iterator _First, const_iterator _Last )
  {
  ;
  size_type _Count = _First - begin ( );
  erase ( _Count, _Last - _First );
  return ( begin ( ) + _Count );
  }

 void clear ( ) noexcept
  {
  _Eos ( 0 );
  }

 _Myt & replace ( size_type _Off, size_type _N0, const _Myt & _Right )
  {
  return ( replace ( _Off, _N0, _Right, 0, npos ) );
  }

 _Myt & replace ( size_type _Off,
  size_type _N0, const _Myt & _Right, size_type _Roff,
   size_type _Count = npos )
  {
  _Check_offset ( _Off );
  _Right . _Check_offset ( _Roff );
  _N0 = _Clamp_suffix_size ( _Off, _N0 );
  _Count = _Right . _Clamp_suffix_size ( _Roff, _Count );
  if ( npos - _Count <= this -> _Mysize ( ) - _N0 )
   _Xlen ( );

  const size_type _Nm = this -> _Mysize ( ) - _N0 - _Off;
  const size_type _Newsize = this -> _Mysize ( ) + _Count - _N0;
  if ( this -> _Mysize ( ) < _Newsize )
   _Grow ( _Newsize );

  if ( _Count == _N0 )
   {
   _Traits :: move ( this -> _Myptr ( ) + _Off,
    _Right . _Myptr ( ) + _Roff, _Count );
   }
  else if ( this != & _Right )
   {
   _Traits :: move ( this -> _Myptr ( ) + _Off + _Count,
    this -> _Myptr ( ) + _Off + _N0, _Nm );
   _Traits :: copy ( this -> _Myptr ( ) + _Off,
    _Right . _Myptr ( ) + _Roff, _Count );
   }
  else if ( _Count < _N0 )
   {
   _Traits :: move ( this -> _Myptr ( ) + _Off,
    this -> _Myptr ( ) + _Roff, _Count );
   _Traits :: move ( this -> _Myptr ( ) + _Off + _Count,
    this -> _Myptr ( ) + _Off + _N0, _Nm );
   }
  else if ( _Roff <= _Off )
   {
   _Traits :: move ( this -> _Myptr ( ) + _Off + _Count,
    this -> _Myptr ( ) + _Off + _N0, _Nm );
   _Traits :: move ( this -> _Myptr ( ) + _Off,
    this -> _Myptr ( ) + _Roff, _Count );
   }
  else if ( _Off + _N0 <= _Roff )
   {
   _Traits :: move ( this -> _Myptr ( ) + _Off + _Count,
    this -> _Myptr ( ) + _Off + _N0, _Nm );
   _Traits :: move ( this -> _Myptr ( ) + _Off,
    this -> _Myptr ( ) + ( _Roff + _Count - _N0 ),
    _Count );
   }
  else
   {
   _Traits :: move ( this -> _Myptr ( ) + _Off,
    this -> _Myptr ( ) + _Roff, _N0 );
   _Traits :: move ( this -> _Myptr ( ) + _Off + _Count,
    this -> _Myptr ( ) + _Off + _N0, _Nm );
   _Traits :: move ( this -> _Myptr ( ) + _Off + _N0,
    this -> _Myptr ( ) + _Roff + _Count,
    _Count - _N0 );
   }

  _Eos ( _Newsize );
  return ( * this );
  }

 _Myt & replace ( size_type _Off,
  size_type _N0, const _Elem * _Ptr, size_type _Count )
  {
  ;
  if ( _Inside ( _Ptr ) )
   return ( replace ( _Off, _N0, * this,
    _Ptr - this -> _Myptr ( ),
    _Count ) );
  _Check_offset ( _Off );
  _N0 = _Clamp_suffix_size ( _Off, _N0 );
  if ( npos - _Count <= this -> _Mysize ( ) - _N0 )
   _Xlen ( );
  size_type _Nm = this -> _Mysize ( ) - _N0 - _Off;

  if ( _Count < _N0 )
   _Traits :: move ( this -> _Myptr ( ) + _Off + _Count,
    this -> _Myptr ( ) + _Off + _N0,
    _Nm );
  const size_type _Num = this -> _Mysize ( ) + _Count - _N0;
  if ( ( 0 < _Count || 0 < _N0 )
   && _Grow ( _Num ) )
   {
   if ( _N0 < _Count )
    _Traits :: move ( this -> _Myptr ( ) + _Off + _Count,
     this -> _Myptr ( ) + _Off + _N0, _Nm );
   _Traits :: copy ( this -> _Myptr ( ) + _Off, _Ptr, _Count );
   _Eos ( _Num );
   }
  return ( * this );
  }

 _Myt & replace ( size_type _Off, size_type _N0, const _Elem * _Ptr )
  {
  ;
  return ( replace ( _Off, _N0, _Ptr, _Traits :: length ( _Ptr ) ) );
  }

 _Myt & replace ( size_type _Off,
  size_type _N0, size_type _Count, _Elem _Ch )
  {
  _Check_offset ( _Off );
  _N0 = _Clamp_suffix_size ( _Off, _N0 );
  if ( npos - _Count <= this -> _Mysize ( ) - _N0 )
   _Xlen ( );
  size_type _Nm = this -> _Mysize ( ) - _N0 - _Off;

  if ( _Count < _N0 )
   _Traits :: move ( this -> _Myptr ( ) + _Off + _Count,
    this -> _Myptr ( ) + _Off + _N0,
    _Nm );
  const size_type _Num = this -> _Mysize ( ) + _Count - _N0;
  if ( ( 0 < _Count || 0 < _N0 )
   && _Grow ( _Num ) )
   {
   if ( _N0 < _Count )
    _Traits :: move ( this -> _Myptr ( ) + _Off + _Count,
     this -> _Myptr ( ) + _Off + _N0, _Nm );
   _Chassign ( _Off, _Count, _Ch );
   _Eos ( _Num );
   }
  return ( * this );
  }

 _Myt & replace ( const_iterator _First, const_iterator _Last,
  const _Myt & _Right )
  {
  return ( replace ( _First - begin ( ), _Last - _First, _Right ) );
  }

 _Myt & replace ( const_iterator _First, const_iterator _Last,
  const _Elem * _Ptr, size_type _Count )
  {
  return ( replace ( _First - begin ( ), _Last - _First, _Ptr, _Count ) );
  }

 _Myt & replace ( const_iterator _First, const_iterator _Last,
  const _Elem * _Ptr )
  {
  return ( replace ( _First - begin ( ), _Last - _First, _Ptr ) );
  }

 _Myt & replace ( const_iterator _First, const_iterator _Last,
  size_type _Count, _Elem _Ch )
  {
  return ( replace ( _First - begin ( ), _Last - _First, _Count, _Ch ) );
  }

 template < class _Iter >
  typename enable_if < _Is_iterator < _Iter > :: value,
   _Myt & > :: type
  replace ( const_iterator _First, const_iterator _Last,
   _Iter _First2, _Iter _Last2 )
  {
  _Myt _Right ( _First2, _Last2 );
  replace ( _First, _Last, _Right );
  return ( * this );
  }

 _Myt & replace ( const_iterator _First, const_iterator _Last,
  const_pointer _First2, const_pointer _Last2 )
  {
  if ( _First2 == _Last2 )
   erase ( _First - begin ( ), _Last - _First );
  else
   replace ( _First - begin ( ), _Last - _First,
    & * _First2, _Last2 - _First2 );
  return ( * this );
  }

 _Myt & replace ( const_iterator _First, const_iterator _Last,
  pointer _First2, pointer _Last2 )
  {
  if ( _First2 == _Last2 )
   erase ( _First - begin ( ), _Last - _First );
  else
   replace ( _First - begin ( ), _Last - _First,
    & * _First2, _Last2 - _First2 );
  return ( * this );
  }

 _Myt & replace ( const_iterator _First, const_iterator _Last,
  const_iterator _First2, const_iterator _Last2 )
  {
  if ( _First2 == _Last2 )
   erase ( _First - begin ( ), _Last - _First );
  else
   replace ( _First - begin ( ), _Last - _First,
    & * _First2, _Last2 - _First2 );
  return ( * this );
  }

 _Myt & replace ( const_iterator _First, const_iterator _Last,
  iterator _First2, iterator _Last2 )
  {
  if ( _First2 == _Last2 )
   erase ( _First - begin ( ), _Last - _First );
  else
   replace ( _First - begin ( ), _Last - _First,
    & * _First2, _Last2 - _First2 );
  return ( * this );
  }

 iterator begin ( ) noexcept
  {
  auto _Mydata = & this -> _Get_data ( );
  return ( iterator ( this -> _Getal ( ) . address ( * _Mydata -> _Myptr ( ) ), _Mydata ) );
  }

 const_iterator begin ( ) const noexcept
  {
  auto _Mydata = & this -> _Get_data ( );
  return ( const_iterator ( this -> _Getal ( ) . address ( * _Mydata -> _Myptr ( ) ), _Mydata ) );
  }

 iterator end ( ) noexcept
  {
  auto _Mydata = & this -> _Get_data ( );
  return ( iterator ( this -> _Getal ( ) . address ( * _Mydata -> _Myptr ( ) ) + _Mydata -> _Mysize, _Mydata ) );
  }

 const_iterator end ( ) const noexcept
  {
  auto _Mydata = & this -> _Get_data ( );
  return ( const_iterator ( this -> _Getal ( ) . address ( * _Mydata -> _Myptr ( ) ) + _Mydata -> _Mysize, _Mydata ) );
  }

 reverse_iterator rbegin ( ) noexcept
  {
  return ( reverse_iterator ( end ( ) ) );
  }

 const_reverse_iterator rbegin ( ) const noexcept
  {
  return ( const_reverse_iterator ( end ( ) ) );
  }

 reverse_iterator rend ( ) noexcept
  {
  return ( reverse_iterator ( begin ( ) ) );
  }

 const_reverse_iterator rend ( ) const noexcept
  {
  return ( const_reverse_iterator ( begin ( ) ) );
  }

 const_iterator cbegin ( ) const noexcept
  {
  return ( begin ( ) );
  }

 const_iterator cend ( ) const noexcept
  {
  return ( end ( ) );
  }

 const_reverse_iterator crbegin ( ) const noexcept
  {
  return ( rbegin ( ) );
  }

 const_reverse_iterator crend ( ) const noexcept
  {
  return ( rend ( ) );
  }

 void shrink_to_fit ( )
  {
  if ( ( size ( ) | this -> _ALLOC_MASK ) < capacity ( ) )
   {
   _Myt _Tmp ( * this );
   swap ( _Tmp );
   }
  }

 reference at ( size_type _Off )
  {
  _Check_offset_exclusive ( _Off );
  return ( this -> _Myptr ( ) [ _Off ] );
  }

 const_reference at ( size_type _Off ) const
  {
  _Check_offset_exclusive ( _Off );
  return ( this -> _Myptr ( ) [ _Off ] );
  }

 reference operator [ ] ( size_type _Off )
  {








  return ( this -> _Myptr ( ) [ _Off ] );
  }

 const_reference operator [ ] ( size_type _Off ) const
  {








  return ( this -> _Myptr ( ) [ _Off ] );
  }

 void push_back ( _Elem _Ch )
  {
  auto & _Dx = this -> _Get_data ( );
  auto & _Sz = _Dx . _Mysize;
  if ( _Sz == _Dx . _Myres )
   _Grow ( _Sz + 1 );
  auto _Ptr = _Dx . _Myptr ( );
  _Traits :: assign ( _Ptr [ _Sz ], _Ch );
  ++ _Sz;
  _Traits :: assign ( _Ptr [ _Sz ], _Elem ( ) );
  }

 void pop_back ( )
  {
  erase ( this -> _Mysize ( ) - 1 );
  }

 reference front ( )
  {
  return ( * begin ( ) );
  }

 const_reference front ( ) const
  {
  return ( * begin ( ) );
  }

 reference back ( )
  {
  return ( * ( end ( ) - 1 ) );
  }

 const_reference back ( ) const
  {
  return ( * ( end ( ) - 1 ) );
  }

 const _Elem * c_str ( ) const noexcept
  {
  return ( this -> _Myptr ( ) );
  }

 const _Elem * data ( ) const noexcept
  {
  return ( this -> _Myptr ( ) );
  }








 size_type length ( ) const noexcept
  {
  return ( this -> _Mysize ( ) );
  }

 size_type size ( ) const noexcept
  {
  return ( this -> _Mysize ( ) );
  }

 size_type max_size ( ) const noexcept
  {
  const size_type _Num = this -> _Getal ( ) . max_size ( );
  return ( _Num <= 1 ? 1 : _Num - 1 );
  }

 void resize ( size_type _Newsize )
  {
  resize ( _Newsize, _Elem ( ) );
  }

 void resize ( size_type _Newsize, _Elem _Ch )
  {
  if ( _Newsize <= this -> _Mysize ( ) )
   _Eos ( _Newsize );
  else
   append ( _Newsize - this -> _Mysize ( ), _Ch );
  }

 size_type capacity ( ) const noexcept
  {
  return ( this -> _Myres ( ) );
  }

 void reserve ( size_type _Newcap = 0 )
  {
  if ( this -> _Mysize ( ) <= _Newcap && this -> _Myres ( ) != _Newcap )
   {
   size_type _Size = this -> _Mysize ( );
   if ( _Grow ( _Newcap, true ) )
    _Eos ( _Size );
   }
  }

 bool empty ( ) const noexcept
  {
  return ( this -> _Mysize ( ) == 0 );
  }


 size_type copy ( _Elem * _Ptr,
  size_type _Count, size_type _Off = 0 ) const
  {
  ;
  _Check_offset ( _Off );
  _Count = _Clamp_suffix_size ( _Off, _Count );
  _Traits :: copy ( _Ptr, this -> _Myptr ( ) + _Off, _Count );
  return ( _Count );
  }

 size_type _Copy_s ( _Elem * _Dest, size_type _Dest_size,
  size_type _Count, size_type _Off = 0 ) const
  {
  ;
  _Check_offset ( _Off );
  _Count = _Clamp_suffix_size ( _Off, _Count );
  _Traits :: _Copy_s ( _Dest, _Dest_size, this -> _Myptr ( ) + _Off, _Count );
  return ( _Count );
  }

 void _Swap_bx ( _Myt & _Right )
  {
  if ( this -> _BUF_SIZE <= this -> _Myres ( ) )
   if ( this -> _BUF_SIZE <= _Right . _Myres ( ) )
    _Swap_adl ( this -> _Bx ( ) . _Ptr, _Right . _Bx ( ) . _Ptr );
   else
    {
    pointer _Ptr = this -> _Bx ( ) . _Ptr;
    this -> _Getal ( ) . destroy ( :: std :: addressof ( this -> _Bx ( ) . _Ptr ) );
    _Traits :: copy ( this -> _Bx ( ) . _Buf,
     _Right . _Bx ( ) . _Buf, _Right . _Mysize ( ) + 1 );
    this -> _Getal ( ) . construct ( :: std :: addressof ( _Right . _Bx ( ) . _Ptr ), _Ptr );
    }
  else
   if ( _Right . _Myres ( ) < this -> _BUF_SIZE )
    :: std :: swap ( this -> _Bx ( ) . _Buf, _Right . _Bx ( ) . _Buf );
   else
    {
    pointer _Ptr = _Right . _Bx ( ) . _Ptr;
    this -> _Getal ( ) . destroy ( :: std :: addressof ( _Right . _Bx ( ) . _Ptr ) );
    _Traits :: copy ( _Right . _Bx ( ) . _Buf,
     this -> _Bx ( ) . _Buf, this -> _Mysize ( ) + 1 );
    this -> _Getal ( ) . construct ( :: std :: addressof ( this -> _Bx ( ) . _Ptr ), _Ptr );
    }
  }

 void swap ( _Myt & _Right )
  noexcept ( _Alty :: propagate_on_container_swap :: value || _Alty :: is_always_equal :: value )

  {
  if ( this != & _Right )
   {
   _Pocs ( this -> _Getal ( ), _Right . _Getal ( ) );
   this -> _Swap_all ( _Right );
   _Swap_bx ( _Right );
   :: std :: swap ( this -> _Mysize ( ), _Right . _Mysize ( ) );
   :: std :: swap ( this -> _Myres ( ), _Right . _Myres ( ) );
   }
  }

 size_type find ( const _Myt & _Right, size_type _Off = 0 ) const noexcept
  {
  return ( find ( _Right . _Myptr ( ), _Off, _Right . size ( ) ) );
  }

 size_type find ( const _Elem * _Ptr,
  size_type _Off, size_type _Count ) const
  {
  ;
  if ( _Count == 0 && _Off <= this -> _Mysize ( ) )
   return ( _Off );

  size_type _Nm;
  if ( _Off < this -> _Mysize ( ) && _Count <= ( _Nm = this -> _Mysize ( ) - _Off ) )
   {
   const _Elem * _Uptr, * _Vptr;
   for ( _Nm -= _Count - 1, _Vptr = this -> _Myptr ( ) + _Off;
    ( _Uptr = _Traits :: find ( _Vptr, _Nm, * _Ptr ) ) != 0;
    _Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1 )
    if ( _Traits :: compare ( _Uptr, _Ptr, _Count ) == 0 )
     return ( _Uptr - this -> _Myptr ( ) );
   }

  return ( npos );
  }

 size_type find ( const _Elem * _Ptr, size_type _Off = 0 ) const
  {
  ;
  return ( find ( _Ptr, _Off, _Traits :: length ( _Ptr ) ) );
  }

 size_type find ( _Elem _Ch, size_type _Off = 0 ) const
  {
  return ( find ( ( const _Elem * ) & _Ch, _Off, 1 ) );
  }

 size_type rfind ( const _Myt & _Right, size_type _Off = npos ) const noexcept
  {
  return ( rfind ( _Right . _Myptr ( ), _Off, _Right . size ( ) ) );
  }

 size_type rfind ( const _Elem * _Ptr,
  size_type _Off, size_type _Count ) const
  {
  ;
  if ( _Count == 0 )
   return ( _Off < this -> _Mysize ( ) ? _Off
    : this -> _Mysize ( ) );
  if ( _Count <= this -> _Mysize ( ) )
   {
   const _Elem * _Uptr = this -> _Myptr ( ) +
    ( _Off < this -> _Mysize ( ) - _Count ? _Off
     : this -> _Mysize ( ) - _Count );
   for (;; -- _Uptr )
    if ( _Traits :: eq ( * _Uptr, * _Ptr )
     && _Traits :: compare ( _Uptr, _Ptr, _Count ) == 0 )
     return ( _Uptr - this -> _Myptr ( ) );
    else if ( _Uptr == this -> _Myptr ( ) )
     break;
   }

  return ( npos );
  }

 size_type rfind ( const _Elem * _Ptr, size_type _Off = npos ) const
  {
  ;
  return ( rfind ( _Ptr, _Off, _Traits :: length ( _Ptr ) ) );
  }

 size_type rfind ( _Elem _Ch, size_type _Off = npos ) const
  {
  return ( rfind ( ( const _Elem * ) & _Ch, _Off, 1 ) );
  }

 size_type find_first_of ( const _Myt & _Right,
  size_type _Off = 0 ) const noexcept
  {
  return ( find_first_of ( _Right . _Myptr ( ), _Off, _Right . size ( ) ) );
  }

 size_type find_first_of ( const _Elem * _Ptr,
  size_type _Off, size_type _Count ) const
  {
  ;
  if ( 0 < _Count && _Off < this -> _Mysize ( ) )
   {
   const _Elem * const _Vptr = this -> _Myptr ( ) + this -> _Mysize ( );
   for ( const _Elem * _Uptr = this -> _Myptr ( ) + _Off;
    _Uptr < _Vptr; ++ _Uptr )
    if ( _Traits :: find ( _Ptr, _Count, * _Uptr ) != 0 )
     return ( _Uptr - this -> _Myptr ( ) );
   }

  return ( npos );
  }

 size_type find_first_of ( const _Elem * _Ptr,
  size_type _Off = 0 ) const
  {
  ;
  return ( find_first_of ( _Ptr, _Off, _Traits :: length ( _Ptr ) ) );
  }

 size_type find_first_of ( _Elem _Ch,
  size_type _Off = 0 ) const
  {
  return ( find ( ( const _Elem * ) & _Ch, _Off, 1 ) );
  }

 size_type find_last_of ( const _Myt & _Right,
  size_type _Off = npos ) const noexcept
  {
  return ( find_last_of ( _Right . _Myptr ( ), _Off, _Right . size ( ) ) );
  }

 size_type find_last_of ( const _Elem * _Ptr,
  size_type _Off, size_type _Count ) const
  {
  ;
  if ( 0 < _Count && 0 < this -> _Mysize ( ) )
   {
   const _Elem * _Uptr = this -> _Myptr ( )
    + ( _Off < this -> _Mysize ( ) ? _Off : this -> _Mysize ( ) - 1 );
   for (;; -- _Uptr )
    if ( _Traits :: find ( _Ptr, _Count, * _Uptr ) != 0 )
     return ( _Uptr - this -> _Myptr ( ) );
    else if ( _Uptr == this -> _Myptr ( ) )
     break;
   }

  return ( npos );
  }

 size_type find_last_of ( const _Elem * _Ptr,
  size_type _Off = npos ) const
  {
  ;
  return ( find_last_of ( _Ptr, _Off, _Traits :: length ( _Ptr ) ) );
  }

 size_type find_last_of ( _Elem _Ch,
  size_type _Off = npos ) const
  {
  return ( rfind ( ( const _Elem * ) & _Ch, _Off, 1 ) );
  }

 size_type find_first_not_of ( const _Myt & _Right,
  size_type _Off = 0 ) const noexcept
  {
  return ( find_first_not_of ( _Right . _Myptr ( ), _Off,
   _Right . size ( ) ) );
  }

 size_type find_first_not_of ( const _Elem * _Ptr,
  size_type _Off, size_type _Count ) const
  {
  ;
  if ( _Off < this -> _Mysize ( ) )
   {
   const _Elem * const _Vptr = this -> _Myptr ( ) + this -> _Mysize ( );
   for ( const _Elem * _Uptr = this -> _Myptr ( ) + _Off;
    _Uptr < _Vptr; ++ _Uptr )
    if ( _Traits :: find ( _Ptr, _Count, * _Uptr ) == 0 )
     return ( _Uptr - this -> _Myptr ( ) );
   }
  return ( npos );
  }

 size_type find_first_not_of ( const _Elem * _Ptr,
  size_type _Off = 0 ) const
  {
  ;
  return ( find_first_not_of ( _Ptr, _Off, _Traits :: length ( _Ptr ) ) );
  }

 size_type find_first_not_of ( _Elem _Ch,
  size_type _Off = 0 ) const
  {
  return ( find_first_not_of ( ( const _Elem * ) & _Ch, _Off, 1 ) );
  }

 size_type find_last_not_of ( const _Myt & _Right,
  size_type _Off = npos ) const noexcept
  {
  return ( find_last_not_of ( _Right . _Myptr ( ), _Off, _Right . size ( ) ) );
  }

 size_type find_last_not_of ( const _Elem * _Ptr,
  size_type _Off, size_type _Count ) const
  {
  ;
  if ( 0 < this -> _Mysize ( ) )
   {
   const _Elem * _Uptr = this -> _Myptr ( )
    + ( _Off < this -> _Mysize ( ) ? _Off : this -> _Mysize ( ) - 1 );
   for (;; -- _Uptr )
    if ( _Traits :: find ( _Ptr, _Count, * _Uptr ) == 0 )
     return ( _Uptr - this -> _Myptr ( ) );
    else if ( _Uptr == this -> _Myptr ( ) )
     break;
   }
  return ( npos );
  }

 size_type find_last_not_of ( const _Elem * _Ptr,
  size_type _Off = npos ) const
  {
  ;
  return ( find_last_not_of ( _Ptr, _Off, _Traits :: length ( _Ptr ) ) );
  }

 size_type find_last_not_of ( _Elem _Ch,
  size_type _Off = npos ) const
  {
  return ( find_last_not_of ( ( const _Elem * ) & _Ch, _Off, 1 ) );
  }

 _Myt substr ( size_type _Off = 0, size_type _Count = npos ) const
  {
  return ( _Myt ( * this, _Off, _Count, get_allocator ( ) ) );
  }

 static int _Traits_compare ( const _Elem * const _Left, const size_type _Left_size,
  const _Elem * const _Right, const size_type _Right_size )
  {
  const size_type _Min_size = _Left_size < _Right_size ? _Left_size : _Right_size;
  const int _Ans = _Traits :: compare ( _Left, _Right, _Min_size );

  if ( _Ans != 0 )
   return ( _Ans );

  if ( _Left_size < _Right_size )
   return ( - 1 );

  if ( _Left_size > _Right_size )
   return ( 1 );

  return ( 0 );
  }

 size_type _Clamp_suffix_size ( const size_type _Off, const size_type _Size ) const
  {
  const size_type _Max_effective_size = this -> _Mysize ( ) - _Off;
  if ( _Size <= _Max_effective_size )
   return ( _Size );
  else
   return ( _Max_effective_size );
  }

 int compare ( const _Myt & _Right ) const noexcept
  {
  return ( _Traits_compare ( this -> _Myptr ( ), this -> _Mysize ( ),
   _Right . _Myptr ( ), _Right . _Mysize ( ) ) );
  }

 int compare ( size_type _Off,
  size_type _N0, const _Myt & _Right ) const
  {
  _Check_offset ( _Off );
  return ( _Traits_compare ( this -> _Myptr ( ) + _Off, _Clamp_suffix_size ( _Off, _N0 ),
   _Right . _Myptr ( ), _Right . _Mysize ( ) ) );
  }

 int compare ( size_type _Off,
  size_type _N0, const _Myt & _Right,
  size_type _Roff, size_type _Count = npos ) const
  {
  _Check_offset ( _Off );
  _Right . _Check_offset ( _Roff );
  return ( _Traits_compare ( this -> _Myptr ( ) + _Off, _Clamp_suffix_size ( _Off, _N0 ),
   _Right . _Myptr ( ) + _Roff, _Right . _Clamp_suffix_size ( _Roff, _Count ) ) );
  }

 int compare ( const _Elem * _Ptr ) const
  {
  ;
  return ( _Traits_compare ( this -> _Myptr ( ), this -> _Mysize ( ),
   _Ptr, _Traits :: length ( _Ptr ) ) );
  }

 int compare ( size_type _Off, size_type _N0, const _Elem * _Ptr ) const
  {
  ;
  _Check_offset ( _Off );
  return ( _Traits_compare ( this -> _Myptr ( ) + _Off, _Clamp_suffix_size ( _Off, _N0 ),
   _Ptr, _Traits :: length ( _Ptr ) ) );
  }

 int compare ( size_type _Off,
  size_type _N0, const _Elem * _Ptr, size_type _Count ) const
  {
  ;
  _Check_offset ( _Off );
  return ( _Traits_compare ( this -> _Myptr ( ) + _Off, _Clamp_suffix_size ( _Off, _N0 ),
   _Ptr, _Count ) );
  }

 allocator_type get_allocator ( ) const noexcept
  {
  allocator_type _Ret ( this -> _Getal ( ) );
  return ( _Ret );
  }

 void _Chassign ( size_type _Off, size_type _Count, _Elem _Ch )
  {
  if ( _Count == 1 )
   _Traits :: assign ( * ( this -> _Myptr ( ) + _Off ), _Ch );
  else
   _Traits :: assign ( this -> _Myptr ( ) + _Off, _Count, _Ch );
  }

 void _Copy ( size_type _Newsize, size_type _Oldlen )
  {
  size_type _Newres = _Newsize | this -> _ALLOC_MASK;
  if ( max_size ( ) < _Newres )
   _Newres = _Newsize;
  else if ( this -> _Myres ( ) / 2 <= _Newres / 3 )
   ;
  else if ( this -> _Myres ( ) <= max_size ( ) - this -> _Myres ( ) / 2 )
   _Newres = this -> _Myres ( )
    + this -> _Myres ( ) / 2;
  else
   _Newres = max_size ( );

  pointer _Ptr;
  try {
   _Ptr = this -> _Getal ( ) . allocate ( _Newres + 1 );
  } catch ( ... ) {
   _Newres = _Newsize;
   try {
    _Ptr = this -> _Getal ( ) . allocate ( _Newres + 1 );
   } catch ( ... ) {
   _Tidy ( true );
   throw;
   }
  }

  if ( 0 < _Oldlen )
   _Traits :: copy ( _Unfancy ( _Ptr ), this -> _Myptr ( ),
    _Oldlen );
  _Tidy ( true );
  this -> _Getal ( ) . construct ( :: std :: addressof ( this -> _Bx ( ) . _Ptr ), _Ptr );
  this -> _Myres ( ) = _Newres;
  _Eos ( _Oldlen );
  }

 void _Eos ( size_type _Newsize )
  {
  auto & _Dx = this -> _Get_data ( );
  _Traits :: assign ( _Dx . _Myptr ( ) [ _Dx . _Mysize = _Newsize ], _Elem ( ) );
  }

 bool _Grow ( size_type _Newsize,
  bool _Trim = false )
  {
  if ( max_size ( ) < _Newsize )
   _Xlen ( );
  if ( this -> _Myres ( ) < _Newsize )
   _Copy ( _Newsize, this -> _Mysize ( ) );
  else if ( _Trim && _Newsize < this -> _BUF_SIZE )
   _Tidy ( true,
    _Newsize < this -> _Mysize ( ) ? _Newsize : this -> _Mysize ( ) );
  else if ( _Newsize == 0 )
   _Eos ( 0 );
  return ( 0 < _Newsize );
  }

 bool _Inside ( const _Elem * _Ptr )
  {
  if ( _Ptr == nullptr_t { } || _Ptr < this -> _Myptr ( )
   || this -> _Myptr ( ) + this -> _Mysize ( ) <= _Ptr )
   return ( false );
  else
   return ( true );
  }

 void _Tidy ( bool _Built = false,
  size_type _Newsize = 0 )
  {
  if ( ! _Built )
   ;
  else if ( this -> _BUF_SIZE <= this -> _Myres ( ) )
   {
   pointer _Ptr = this -> _Bx ( ) . _Ptr;
   this -> _Getal ( ) . destroy ( :: std :: addressof ( this -> _Bx ( ) . _Ptr ) );
   if ( 0 < _Newsize )
    _Traits :: copy ( this -> _Bx ( ) . _Buf,
     _Unfancy ( _Ptr ), _Newsize );
   this -> _Getal ( ) . deallocate ( _Ptr, this -> _Myres ( ) + 1 );
   }
  this -> _Myres ( ) = this -> _BUF_SIZE - 1;
  _Eos ( _Newsize );
  }

 [ [ noreturn ] ] void _Xlen ( ) const
  {
  _Xlength_error ( "string too long" );
  }

 void _Check_offset ( const size_type _Off ) const
  {
  if ( this -> _Mysize ( ) < _Off )
   _Xran ( );
  }

 void _Check_offset_exclusive ( const size_type _Off ) const
  {
  if ( this -> _Mysize ( ) <= _Off )
   _Xran ( );
  }

 [ [ noreturn ] ] void _Xran ( ) const
  {
  _Xout_of_range ( "invalid string position" );
  }
 };
#line 2288 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template< class _Elem, class 
#line 2289
_Traits, class 
#line 2290
_Alloc> const typename basic_string< _Elem, _Traits, _Alloc> ::size_type 
#line 2292
basic_string< _Elem, _Traits, _Alloc> ::npos = ((typename ::std::basic_string< _Elem, _Traits, typename _String_base_types< _Elem, _Alloc> ::_Alloc> ::size_type)(-1)); 
#line 2297
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 void swap ( basic_string < _Elem, _Traits, _Alloc > & _Left,
  basic_string < _Elem, _Traits, _Alloc > & _Right )
   noexcept ( noexcept ( _Left . swap ( _Right ) ) )
 {
 _Left . swap ( _Right );
 }
#line 2307
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_string < _Elem, _Traits, _Alloc > operator + (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 basic_string < _Elem, _Traits, _Alloc > _Ans;
 _Ans . reserve ( _Left . size ( ) + _Right . size ( ) );
 _Ans += _Left;
 _Ans += _Right;
 return ( _Ans );
 }
#line 2321
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_string < _Elem, _Traits, _Alloc > operator + (
  const _Elem * _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 basic_string < _Elem, _Traits, _Alloc > _Ans;
 _Ans . reserve ( _Traits :: length ( _Left ) + _Right . size ( ) );
 _Ans += _Left;
 _Ans += _Right;
 return ( _Ans );
 }
#line 2335
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_string < _Elem, _Traits, _Alloc > operator + (
  const _Elem _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 basic_string < _Elem, _Traits, _Alloc > _Ans;
 _Ans . reserve ( 1 + _Right . size ( ) );
 _Ans += _Left;
 _Ans += _Right;
 return ( _Ans );
 }
#line 2349
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_string < _Elem, _Traits, _Alloc > operator + (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const _Elem * _Right )
 {
 basic_string < _Elem, _Traits, _Alloc > _Ans;
 _Ans . reserve ( _Left . size ( ) + _Traits :: length ( _Right ) );
 _Ans += _Left;
 _Ans += _Right;
 return ( _Ans );
 }
#line 2363
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_string < _Elem, _Traits, _Alloc > operator + (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const _Elem _Right )
 {
 basic_string < _Elem, _Traits, _Alloc > _Ans;
 _Ans . reserve ( _Left . size ( ) + 1 );
 _Ans += _Left;
 _Ans += _Right;
 return ( _Ans );
 }
#line 2377
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_string < _Elem, _Traits, _Alloc > operator + (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  basic_string < _Elem, _Traits, _Alloc > && _Right )
 {
 return ( :: std :: move ( _Right . insert ( 0, _Left ) ) );
 }
#line 2387
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_string < _Elem, _Traits, _Alloc > operator + (
  basic_string < _Elem, _Traits, _Alloc > && _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 return ( :: std :: move ( _Left . append ( _Right ) ) );
 }
#line 2397
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_string < _Elem, _Traits, _Alloc > operator + (
  basic_string < _Elem, _Traits, _Alloc > && _Left,
  basic_string < _Elem, _Traits, _Alloc > && _Right )
 {
 if ( _Right . size ( ) <= _Left . capacity ( ) - _Left . size ( )
  || _Right . capacity ( ) - _Right . size ( ) < _Left . size ( ) )
  return ( :: std :: move ( _Left . append ( _Right ) ) );
 else
  return ( :: std :: move ( _Right . insert ( 0, _Left ) ) );
 }
#line 2411
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_string < _Elem, _Traits, _Alloc > operator + (
  const _Elem * _Left,
  basic_string < _Elem, _Traits, _Alloc > && _Right )
 {
 return ( :: std :: move ( _Right . insert ( 0, _Left ) ) );
 }
#line 2421
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_string < _Elem, _Traits, _Alloc > operator + (
  const _Elem _Left,
  basic_string < _Elem, _Traits, _Alloc > && _Right )
 {
 typedef typename basic_string < _Elem, _Traits, _Alloc > :: size_type
  size_type;
 return ( :: std :: move ( _Right . insert ( ( size_type ) 0, ( size_type ) 1, _Left ) ) );
 }
#line 2433
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_string < _Elem, _Traits, _Alloc > operator + (
  basic_string < _Elem, _Traits, _Alloc > && _Left,
  const _Elem * _Right )
 {
 return ( :: std :: move ( _Left . append ( _Right ) ) );
 }
#line 2443
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_string < _Elem, _Traits, _Alloc > operator + (
  basic_string < _Elem, _Traits, _Alloc > && _Left,
  const _Elem _Right )
 {
 return ( :: std :: move ( _Left . append ( 1, _Right ) ) );
 }
#line 2453
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator == (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept
 {
 return ( _Left . compare ( _Right ) == 0 );
 }
#line 2463
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator == (
  const _Elem * _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 return ( _Right . compare ( _Left ) == 0 );
 }
#line 2473
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator == (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const _Elem * _Right )
 {
 return ( _Left . compare ( _Right ) == 0 );
 }
#line 2483
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator != (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept
 {
 return ( ! ( _Left == _Right ) );
 }
#line 2493
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator != (
  const _Elem * _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 return ( ! ( _Left == _Right ) );
 }
#line 2503
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator != (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const _Elem * _Right )
 {
 return ( ! ( _Left == _Right ) );
 }
#line 2513
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator < (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept
 {
 return ( _Left . compare ( _Right ) < 0 );
 }
#line 2523
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator < (
  const _Elem * _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 return ( _Right . compare ( _Left ) > 0 );
 }
#line 2533
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator < (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const _Elem * _Right )
 {
 return ( _Left . compare ( _Right ) < 0 );
 }
#line 2543
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator > (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept
 {
 return ( _Right < _Left );
 }
#line 2553
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator > (
  const _Elem * _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 return ( _Right < _Left );
 }
#line 2563
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator > (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const _Elem * _Right )
 {
 return ( _Right < _Left );
 }
#line 2573
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator <= (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept
 {
 return ( ! ( _Right < _Left ) );
 }
#line 2583
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator <= (
  const _Elem * _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 return ( ! ( _Right < _Left ) );
 }
#line 2593
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator <= (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const _Elem * _Right )
 {
 return ( ! ( _Right < _Left ) );
 }
#line 2603
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator >= (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept
 {
 return ( ! ( _Left < _Right ) );
 }
#line 2613
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator >= (
  const _Elem * _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 return ( ! ( _Left < _Right ) );
 }
#line 2623
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator >= (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const _Elem * _Right )
 {
 return ( ! ( _Left < _Right ) );
 }
#line 2634
typedef basic_string< char, char_traits< char> , allocator< char> >  string; 
#line 2636
typedef basic_string< __wchar_t, char_traits< __wchar_t> , allocator< __wchar_t> >  wstring; 
#line 2639
template < class _Elem,
 class _Traits,
 class _Alloc >
 struct hash < basic_string < _Elem, _Traits, _Alloc > >
 {
 typedef basic_string < _Elem, _Traits, _Alloc > argument_type;
 typedef size_t result_type;

 size_t operator ( ) ( const argument_type & _Keyval ) const
  {
  return ( _Hash_seq ( ( const unsigned char * ) _Keyval . c_str ( ),
   _Keyval . size ( ) * sizeof ( _Elem ) ) );
  }
 };
#line 2655
typedef basic_string< char16_t, char_traits< char16_t> , allocator< char16_t> >  u16string; 
#line 2657
typedef basic_string< char32_t, char_traits< char32_t> , allocator< char32_t> >  u32string; 
#line 2658
}
#line 2661
#pragma warning(pop)
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
#pragma warning(push,3)
#line 2662 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
#pragma pack ( pop )
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
#pragma pack ( push, 8 )
#line 13
namespace std { 
#line 15
class logic_error : public exception { 
#line 19
public: typedef exception _Mybase; 
#line 21
explicit logic_error(const string &_Message) : _Mybase(_Message.c_str()) 
#line 23
{ 
#line 24
} 
#line 26
explicit logic_error(const char *_Message) : _Mybase(_Message) 
#line 28
{ 
#line 29
} 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
}; 
#line 43
class domain_error : public logic_error { 
#line 47
public: typedef logic_error _Mybase; 
#line 49
explicit domain_error(const string &_Message) : _Mybase(_Message.c_str()) 
#line 51
{ 
#line 52
} 
#line 54
explicit domain_error(const char *_Message) : _Mybase(_Message) 
#line 56
{ 
#line 57
} 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
}; 
#line 71
class invalid_argument : public logic_error { 
#line 75
public: typedef logic_error _Mybase; 
#line 77
explicit invalid_argument(const string &_Message) : _Mybase(_Message.c_str()) 
#line 79
{ 
#line 80
} 
#line 82
explicit invalid_argument(const char *_Message) : _Mybase(_Message) 
#line 84
{ 
#line 85
} 
#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
}; 
#line 99
class length_error : public logic_error { 
#line 103
public: typedef logic_error _Mybase; 
#line 105
explicit length_error(const string &_Message) : _Mybase(_Message.c_str()) 
#line 107
{ 
#line 108
} 
#line 110
explicit length_error(const char *_Message) : _Mybase(_Message) 
#line 112
{ 
#line 113
} 
#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
}; 
#line 127
class out_of_range : public logic_error { 
#line 131
public: typedef logic_error _Mybase; 
#line 133
explicit out_of_range(const string &_Message) : _Mybase(_Message.c_str()) 
#line 135
{ 
#line 136
} 
#line 138
explicit out_of_range(const char *_Message) : _Mybase(_Message) 
#line 140
{ 
#line 141
} 
#line 152 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
}; 
#line 155
class runtime_error : public exception { 
#line 159
public: typedef exception _Mybase; 
#line 161
explicit runtime_error(const string &_Message) : _Mybase(_Message.c_str()) 
#line 163
{ 
#line 164
} 
#line 166
explicit runtime_error(const char *_Message) : _Mybase(_Message) 
#line 168
{ 
#line 169
} 
#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
}; 
#line 183
class overflow_error : public runtime_error { 
#line 187
public: typedef runtime_error _Mybase; 
#line 189
explicit overflow_error(const string &_Message) : _Mybase(_Message.c_str()) 
#line 191
{ 
#line 192
} 
#line 194
explicit overflow_error(const char *_Message) : _Mybase(_Message) 
#line 196
{ 
#line 197
} 
#line 208 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
}; 
#line 211
class underflow_error : public runtime_error { 
#line 215
public: typedef runtime_error _Mybase; 
#line 217
explicit underflow_error(const string &_Message) : _Mybase(_Message.c_str()) 
#line 219
{ 
#line 220
} 
#line 222
explicit underflow_error(const char *_Message) : _Mybase(_Message) 
#line 224
{ 
#line 225
} 
#line 236 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
}; 
#line 239
class range_error : public runtime_error { 
#line 243
public: typedef runtime_error _Mybase; 
#line 245
explicit range_error(const string &_Message) : _Mybase(_Message.c_str()) 
#line 247
{ 
#line 248
} 
#line 250
explicit range_error(const char *_Message) : _Mybase(_Message) 
#line 252
{ 
#line 253
} 
#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
}; 
#line 265
}
#line 267
#pragma warning(pop)
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\typeinfo"
#pragma warning(push,3)
#line 27
#pragma warning(disable: 4275)
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
#pragma pack ( pop )
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\typeinfo"
#pragma pack ( push, 8 )
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
#pragma pack ( push, 8 )
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
struct __type_info_node; 
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
extern __type_info_node __type_info_root_node; 
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
__pragma( pack ( push, 8 )) extern "C" {
#line 35
#pragma warning(push)
#pragma warning(disable: 4510 4512 4610)
struct __std_type_info_data { 
#line 39
const char *_UndecoratedName; 
#line 40
const char _DecoratedName[1]; 
#line 41
}; 
#pragma warning(pop)
#line 44
__declspec(dllimport) int __cdecl __std_type_info_compare(const __std_type_info_data * _Lhs, const __std_type_info_data * _Rhs); 
#line 49
__declspec(dllimport) size_t __cdecl __std_type_info_hash(const __std_type_info_data * _Data); 
#line 53
__declspec(dllimport) const char *__cdecl __std_type_info_name(__std_type_info_data * _Data, __type_info_node * _RootNode); 
#line 58
}__pragma( pack ( pop )) 
#line 62
class type_info { 
#line 66
public: type_info(const type_info &) = delete;
#line 67
type_info &operator=(const type_info &) = delete;
#line 69
size_t hash_code() const throw() 
#line 70
{ 
#line 71
return __std_type_info_hash(&(_Data)); 
#line 72
} 
#line 74
bool operator==(const type_info &_Other) const throw() 
#line 75
{ 
#line 76
return __std_type_info_compare(&(_Data), &(_Other._Data)) == 0; 
#line 77
} 
#line 79
bool operator!=(const type_info &_Other) const throw() 
#line 80
{ 
#line 81
return __std_type_info_compare(&(_Data), &(_Other._Data)) != 0; 
#line 82
} 
#line 84
bool before(const type_info &_Other) const throw() 
#line 85
{ 
#line 86
return __std_type_info_compare(&(_Data), &(_Other._Data)) < 0; 
#line 87
} 
#line 89
const char *name() const throw() 
#line 90
{ 
#line 94
return __std_type_info_name(&(_Data), &__type_info_root_node); 
#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
} 
#line 98
const char *raw_name() const throw() 
#line 99
{ 
#line 100
return (_Data)._DecoratedName; 
#line 101
} 
#line 103
virtual ~type_info() throw(); 
#line 107
private: mutable __std_type_info_data _Data; 
#line 108
}; 
#line 110
namespace std { 
#line 111
using ::type_info;
#line 112
}
#line 116
namespace std { 
#line 118
class bad_cast : public exception { 
#line 123
public: bad_cast() throw() : exception("bad cast", 1) 
#line 125
{ 
#line 126
} 
#line 128
static bad_cast __construct_from_string_literal(const char *const _Message) throw() 
#line 129
{ 
#line 130
return bad_cast(_Message, 1); 
#line 131
} 
#line 135
private: bad_cast(const char *const _Message, int) throw() : exception(_Message, 1) 
#line 137
{ 
#line 138
} 
#line 139
}; 
#line 141
class bad_typeid : public exception { 
#line 146
public: bad_typeid() throw() : exception("bad typeid", 1) 
#line 148
{ 
#line 149
} 
#line 151
static bad_typeid __construct_from_string_literal(const char *const _Message) throw() 
#line 152
{ 
#line 153
return bad_typeid(_Message, 1); 
#line 154
} 
#line 158
friend class __non_rtti_object; 
#line 160
private: bad_typeid(const char *const _Message, int) throw() : exception(_Message, 1) 
#line 162
{ 
#line 163
} 
#line 164
}; 
#line 166
class __non_rtti_object : public bad_typeid { 
#line 171
public: static __non_rtti_object __construct_from_string_literal(const char *const _Message) throw() 
#line 172
{ 
#line 173
return __non_rtti_object(_Message, 1); 
#line 174
} 
#line 178
private: __non_rtti_object(const char *const _Message, int) throw() : bad_typeid(_Message, 1) 
#line 180
{ 
#line 181
} 
#line 182
}; 
#line 184
}
#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\typeinfo"
#pragma warning(pop)
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
#pragma pack ( pop )
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\typeinfo"
#pragma pack ( pop )
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__pragma( pack ( push, 8 )) extern "C" {
#line 24
__declspec(dllimport) int __cdecl _isctype(int _C, int _Type); 
#line 25
__declspec(dllimport) int __cdecl _isctype_l(int _C, int _Type, _locale_t _Locale); 
#line 26
__declspec(dllimport) int __cdecl isalpha(int _C); 
#line 27
__declspec(dllimport) int __cdecl _isalpha_l(int _C, _locale_t _Locale); 
#line 28
__declspec(dllimport) int __cdecl isupper(int _C); 
#line 29
__declspec(dllimport) int __cdecl _isupper_l(int _C, _locale_t _Locale); 
#line 30
__declspec(dllimport) int __cdecl islower(int _C); 
#line 31
__declspec(dllimport) int __cdecl _islower_l(int _C, _locale_t _Locale); 
#line 34
__declspec(dllimport) int __cdecl isdigit(int _C); 
#line 36
__declspec(dllimport) int __cdecl _isdigit_l(int _C, _locale_t _Locale); 
#line 37
__declspec(dllimport) int __cdecl isxdigit(int _C); 
#line 38
__declspec(dllimport) int __cdecl _isxdigit_l(int _C, _locale_t _Locale); 
#line 41
__declspec(dllimport) int __cdecl isspace(int _C); 
#line 43
__declspec(dllimport) int __cdecl _isspace_l(int _C, _locale_t _Locale); 
#line 44
__declspec(dllimport) int __cdecl ispunct(int _C); 
#line 45
__declspec(dllimport) int __cdecl _ispunct_l(int _C, _locale_t _Locale); 
#line 46
__declspec(dllimport) int __cdecl isblank(int _C); 
#line 47
__declspec(dllimport) int __cdecl _isblank_l(int _C, _locale_t _Locale); 
#line 48
__declspec(dllimport) int __cdecl isalnum(int _C); 
#line 49
__declspec(dllimport) int __cdecl _isalnum_l(int _C, _locale_t _Locale); 
#line 50
__declspec(dllimport) int __cdecl isprint(int _C); 
#line 51
__declspec(dllimport) int __cdecl _isprint_l(int _C, _locale_t _Locale); 
#line 52
__declspec(dllimport) int __cdecl isgraph(int _C); 
#line 53
__declspec(dllimport) int __cdecl _isgraph_l(int _C, _locale_t _Locale); 
#line 54
__declspec(dllimport) int __cdecl iscntrl(int _C); 
#line 55
__declspec(dllimport) int __cdecl _iscntrl_l(int _C, _locale_t _Locale); 
#line 58
__declspec(dllimport) int __cdecl toupper(int _C); 
#line 61
__declspec(dllimport) int __cdecl tolower(int _C); 
#line 63
__declspec(dllimport) int __cdecl _tolower(int _C); 
#line 64
__declspec(dllimport) int __cdecl _tolower_l(int _C, _locale_t _Locale); 
#line 65
__declspec(dllimport) int __cdecl _toupper(int _C); 
#line 66
__declspec(dllimport) int __cdecl _toupper_l(int _C, _locale_t _Locale); 
#line 68
__declspec(dllimport) int __cdecl __isascii(int _C); 
#line 69
__declspec(dllimport) int __cdecl __toascii(int _C); 
#line 70
__declspec(dllimport) int __cdecl __iscsymf(int _C); 
#line 71
__declspec(dllimport) int __cdecl __iscsym(int _C); 
#line 144 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__inline __crt_locale_data_public *__cdecl __acrt_get_locale_data_prefix(const volatile void *const _LocalePointers) 
#line 145
{ 
#line 146
const _locale_t _TypedLocalePointers = (_locale_t)_LocalePointers; 
#line 147
return (__crt_locale_data_public *)(_TypedLocalePointers->locinfo); 
#line 148
} 
#line 154
__inline int __cdecl _chvalidchk_l(const int 
#line 155
_C, const int 
#line 156
_Mask, const _locale_t 
#line 157
_Locale) 
#line 159
{ 
#line 163
if (_Locale) 
#line 164
{ 
#line 165
return ((__acrt_get_locale_data_prefix(_Locale)->_locale_pctype)[_C]) & _Mask; 
#line 166
}  
#line 168
return (__pctype_func()[_C]) & _Mask; 
#line 170 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
} 
#line 175
__inline int __cdecl _ischartype_l(const int 
#line 176
_C, const int 
#line 177
_Mask, const _locale_t 
#line 178
_Locale) 
#line 180
{ 
#line 181
if (_Locale && ((__acrt_get_locale_data_prefix(_Locale)->_locale_mb_cur_max) > 1)) 
#line 182
{ 
#line 183
return _isctype_l(_C, _Mask, _Locale); 
#line 184
}  
#line 186
return _chvalidchk_l(_C, _Mask, _Locale); 
#line 187
} 
#line 234 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
}__pragma( pack ( pop )) 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__pragma( pack ( push, 8 )) extern "C" {
#line 29
struct lconv { 
#line 31
char *decimal_point; 
#line 32
char *thousands_sep; 
#line 33
char *grouping; 
#line 34
char *int_curr_symbol; 
#line 35
char *currency_symbol; 
#line 36
char *mon_decimal_point; 
#line 37
char *mon_thousands_sep; 
#line 38
char *mon_grouping; 
#line 39
char *positive_sign; 
#line 40
char *negative_sign; 
#line 41
char int_frac_digits; 
#line 42
char frac_digits; 
#line 43
char p_cs_precedes; 
#line 44
char p_sep_by_space; 
#line 45
char n_cs_precedes; 
#line 46
char n_sep_by_space; 
#line 47
char p_sign_posn; 
#line 48
char n_sign_posn; 
#line 49
__wchar_t *_W_decimal_point; 
#line 50
__wchar_t *_W_thousands_sep; 
#line 51
__wchar_t *_W_int_curr_symbol; 
#line 52
__wchar_t *_W_currency_symbol; 
#line 53
__wchar_t *_W_mon_decimal_point; 
#line 54
__wchar_t *_W_mon_thousands_sep; 
#line 55
__wchar_t *_W_positive_sign; 
#line 56
__wchar_t *_W_negative_sign; 
#line 57
}; 
#line 79
__declspec(dllimport) void __cdecl _lock_locales(); 
#line 80
__declspec(dllimport) void __cdecl _unlock_locales(); 
#line 83
__declspec(dllimport) int __cdecl _configthreadlocale(int _Flag); 
#line 88
__declspec(dllimport) char *__cdecl setlocale(int _Category, const char * _Locale); 
#line 94
__declspec(dllimport) lconv *__cdecl localeconv(); 
#line 97
__declspec(dllimport) _locale_t __cdecl _get_current_locale(); 
#line 100
__declspec(dllimport) _locale_t __cdecl _create_locale(int _Category, const char * _Locale); 
#line 105
__declspec(dllimport) void __cdecl _free_locale(_locale_t _Locale); 
#line 111
__declspec(dllimport) __wchar_t *__cdecl _wsetlocale(int _Category, const __wchar_t * _Locale); 
#line 117
__declspec(dllimport) _locale_t __cdecl _wcreate_locale(int _Category, const __wchar_t * _Locale); 
#line 124
__declspec(dllimport) __wchar_t **__cdecl ___lc_locale_name_func(); 
#line 125
__declspec(dllimport) unsigned __cdecl ___lc_codepage_func(); 
#line 126
__declspec(dllimport) unsigned __cdecl ___lc_collate_cp_func(); 
#line 130
}
#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
#pragma warning(push,3)
#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__pragma( pack ( pop )) 
#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
#pragma pack ( push, 8 )
#line 19
extern "C" {
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
typedef 
#line 56
struct _Collvec { 
#line 58
unsigned _Page; 
#line 59
__wchar_t *_LocaleName; 
#line 60
} _Collvec; 
#line 68
typedef 
#line 62
struct _Ctypevec { 
#line 64
unsigned _Page; 
#line 65
const short *_Table; 
#line 66
int _Delfl; 
#line 67
__wchar_t *_LocaleName; 
#line 68
} _Ctypevec; 
#line 76
typedef 
#line 70
struct _Cvtvec { 
#line 72
unsigned _Page; 
#line 73
unsigned _Mbcurmax; 
#line 74
int _Isclocale; 
#line 75
unsigned char _Isleadbyte[32]; 
#line 76
} _Cvtvec; 
#line 79
__declspec(dllimport) _Collvec __cdecl _Getcoll(); 
#line 80
__declspec(dllimport) _Ctypevec __cdecl _Getctype(); 
#line 81
__declspec(dllimport) _Cvtvec __cdecl _Getcvt(); 
#line 82
__declspec(dllimport) int __cdecl _Getdateorder(); 
#line 93
__declspec(dllimport) int __cdecl _Mbrtowc(__wchar_t *, const char *, size_t, mbstate_t *, const _Cvtvec *); 
#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) float __cdecl _Stof(const char *, char **, long); 
#line 99
__declspec(dllimport) double __cdecl _Stod(const char *, char **, long); 
#line 101
__declspec(dllimport) long double __cdecl _Stold(const char *, char **, long); 
#line 104
__declspec(dllimport) int __cdecl _Strcoll(const char *, const char *, const char *, const char *, const _Collvec *); 
#line 106
__declspec(dllimport) size_t __cdecl _Strxfrm(char * _String1, char * _End1, const char *, const char *, const _Collvec *); 
#line 109
__declspec(dllimport) int __cdecl _Tolower(int, const _Ctypevec *); 
#line 110
__declspec(dllimport) int __cdecl _Toupper(int, const _Ctypevec *); 
#line 111
__declspec(dllimport) int __cdecl _Wcrtomb(char *, __wchar_t, mbstate_t *, const _Cvtvec *); 
#line 113
__declspec(dllimport) int __cdecl _Wcscoll(const __wchar_t *, const __wchar_t *, const __wchar_t *, const __wchar_t *, const _Collvec *); 
#line 115
__declspec(dllimport) size_t __cdecl _Wcsxfrm(__wchar_t * _String1, __wchar_t * _End1, const __wchar_t *, const __wchar_t *, const _Collvec *); 
#line 119
__declspec(dllimport) short __cdecl _Getwctype(__wchar_t, const _Ctypevec *); 
#line 120
__declspec(dllimport) const __wchar_t *__cdecl _Getwctypes(const __wchar_t *, const __wchar_t *, short *, const _Ctypevec *); 
#line 122
__declspec(dllimport) __wchar_t __cdecl _Towlower(__wchar_t, const _Ctypevec *); 
#line 123
__declspec(dllimport) __wchar_t __cdecl _Towupper(__wchar_t, const _Ctypevec *); 
#line 127
}
#line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
extern "C" {
#line 135
__declspec(dllimport) char *__cdecl _Getdays(); 
#line 139
__declspec(dllimport) char *__cdecl _Getmonths(); 
#line 141
__declspec(dllimport) void *__cdecl _Gettnames(); 
#line 144
__declspec(dllimport) size_t __cdecl _Strftime(char *, size_t _Maxsize, const char *, const tm *, void *); 
#line 150
__declspec(dllimport) __wchar_t *__cdecl _W_Getdays(); 
#line 154
__declspec(dllimport) __wchar_t *__cdecl _W_Getmonths(); 
#line 156
__declspec(dllimport) void *__cdecl _W_Gettnames(); 
#line 159
__declspec(dllimport) size_t __cdecl _Wcsftime(__wchar_t *, size_t _Maxsize, const __wchar_t *, const tm *, void *); 
#line 162
}
#line 172
__declspec(dllimport) _locale_t __cdecl _GetLocaleForCP(unsigned); 
#line 176 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
#pragma warning(pop)
#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
#pragma warning(push,3)
#line 15
#pragma warning(disable: 4412)
#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
#pragma pack ( pop )
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
#pragma pack ( push, 8 )
#line 17
namespace std { 
#line 19
class __declspec(dllimport) _Timevec { 
#line 22
public: _Timevec(void *_Ptr = 0) : _Timeptr(_Ptr) 
#line 24
{ 
#line 25
} 
#line 27
_Timevec(const _Timevec &_Right) 
#line 28
{ 
#line 29
((*this) = _Right); 
#line 30
} 
#line 32
~_Timevec() noexcept 
#line 33
{ 
#line 34
free(_Timeptr); 
#line 35
} 
#line 37
_Timevec &operator=(const _Timevec &_Right) 
#line 38
{ 
#line 39
(_Timeptr) = (_Right._Timeptr); 
#line 40
(((_Timevec *)(&_Right))->_Timeptr) = (0); 
#line 41
return *this; 
#line 42
} 
#line 44
void *_Getptr() const 
#line 45
{ 
#line 46
return _Timeptr; 
#line 47
} 
#line 50
private: void *_Timeptr; 
#line 51
}; 
#line 54
class __declspec(dllimport) _Locinfo { 
#line 57
public: typedef ::_Collvec _Collvec; 
#line 58
typedef ::_Ctypevec _Ctypevec; 
#line 59
typedef ::_Cvtvec _Cvtvec; 
#line 60
typedef std::_Timevec _Timevec; 
#line 62
static void __cdecl _Locinfo_ctor(_Locinfo *, const char *); 
#line 64
static void __cdecl _Locinfo_ctor(_Locinfo *, int, const char *); 
#line 66
static void __cdecl _Locinfo_dtor(_Locinfo *); 
#line 68
static _Locinfo &__cdecl _Locinfo_Addcats(_Locinfo *, int, const char *); 
#line 71
_Locinfo(const char *_Pch = "C") : _Lock(0) 
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 77
if (_Pch == (0)) { 
#line 78
throw ((runtime_error)("bad locale name")); }  
#line 79
_Locinfo_ctor(this, _Pch); 
#line 80
} 
#line 82
_Locinfo(int _Cat, const char *_Pch) : _Lock(0) 
#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 88
if (_Pch == (0)) { 
#line 89
throw ((runtime_error)("bad locale name")); }  
#line 90
_Locinfo_ctor(this, _Cat, _Pch); 
#line 91
} 
#line 93
~_Locinfo() noexcept 
#line 94
{ 
#line 95
_Locinfo_dtor(this); 
#line 96
} 
#line 98
_Locinfo &_Addcats(int _Cat, const char *_Pch) 
#line 99
{ 
#line 100
if (_Pch == (0)) { 
#line 101
throw ((runtime_error)("bad locale name")); }  
#line 102
return _Locinfo_Addcats(this, _Cat, _Pch); 
#line 103
} 
#line 105
const char *_Getname() const 
#line 106
{ 
#line 107
return (_Newlocname)._C_str(); 
#line 108
} 
#line 110
_Collvec _Getcoll() const 
#line 111
{ 
#line 112
return ::_Getcoll(); 
#line 113
} 
#line 115
_Ctypevec _Getctype() const 
#line 116
{ 
#line 117
return ::_Getctype(); 
#line 118
} 
#line 120
_Cvtvec _Getcvt() const 
#line 121
{ 
#line 122
return ::_Getcvt(); 
#line 123
} 
#line 125
const lconv *_Getlconv() const 
#line 126
{ 
#line 127
return localeconv(); 
#line 128
} 
#line 130
_Timevec _Gettnames() const 
#line 131
{ 
#line 132
return ((_Timevec)(::_Gettnames())); 
#line 133
} 
#line 135
const char *_Getdays() const 
#line 136
{ 
#line 137
const char *_Ptr = ::_Getdays(); 
#line 139
if (_Ptr != (0)) 
#line 140
{ 
#line 141
((((_Locinfo *)this)->_Days) = _Ptr); 
#line 142
free((void *)_Ptr); 
#line 143
}  
#line 144
return (!(_Days)._Empty()) ? (_Days)._C_str() : (":Sun:Sunday:Mon:Monday:Tue:Tuesday:Wed:Wednesday:Thu:Thursday:Fri:Friday:Sat:Saturday"); 
#line 147
} 
#line 149
const char *_Getmonths() const 
#line 150
{ 
#line 151
const char *_Ptr = ::_Getmonths(); 
#line 153
if (_Ptr != (0)) 
#line 154
{ 
#line 155
((((_Locinfo *)this)->_Months) = _Ptr); 
#line 156
free((void *)_Ptr); 
#line 157
}  
#line 158
return (!(_Months)._Empty()) ? (_Months)._C_str() : (":Jan:January:Feb:February:Mar:March:Apr:April:May:May:Jun:June:Jul:July:Aug:August:Sep:September:Oct:October:Nov:November:Dec:De" "cember"); 
#line 163
} 
#line 165
const char *_Getfalse() const 
#line 166
{ 
#line 167
return "false"; 
#line 168
} 
#line 170
const char *_Gettrue() const 
#line 171
{ 
#line 172
return "true"; 
#line 173
} 
#line 175
int _Getdateorder() const 
#line 176
{ 
#line 177
return ::_Getdateorder(); 
#line 178
} 
#line 180
_Timevec _W_Gettnames() const 
#line 181
{ 
#line 182
return ((_Timevec)(::_W_Gettnames())); 
#line 183
} 
#line 185
const unsigned short *_W_Getdays() const 
#line 186
{ 
#line 187
const __wchar_t *_Ptr = ::_W_Getdays(); 
#line 189
if (_Ptr != (0)) 
#line 190
{ 
#line 191
((((_Locinfo *)this)->_W_Days) = _Ptr); 
#line 192
free((void *)_Ptr); 
#line 193
}  
#line 194
return (const unsigned short *)((!(_W_Days)._Empty()) ? (_W_Days)._C_str() : (L"\x3a\x53\x75\x6e\x3a\x53\x75\x6e\x64\x61\x79\x3a\x4d\x6f\x6e\x3a\x4d\x6f\x6e\x64\x61\x79\x3a\x54\x75\x65\x3a\x54\x75\x65\x73\x64" L"\x61\x79\x3a\x57\x65\x64\x3a\x57\x65\x64\x6e\x65\x73\x64\x61\x79\x3a\x54\x68\x75\x3a\x54\x68\x75\x72\x73\x64\x61\x79\x3a\x46\x72" L"\x69\x3a\x46\x72\x69\x64\x61\x79\x3a\x53\x61\x74\x3a\x53\x61\x74\x75\x72\x64\x61\x79")); 
#line 198
} 
#line 200
const unsigned short *_W_Getmonths() const 
#line 201
{ 
#line 202
const __wchar_t *_Ptr = ::_W_Getmonths(); 
#line 204
if (_Ptr != (0)) 
#line 205
{ 
#line 206
((((_Locinfo *)this)->_W_Months) = _Ptr); 
#line 207
free((void *)_Ptr); 
#line 208
}  
#line 209
return (const unsigned short *)((!(_W_Months)._Empty()) ? (_W_Months)._C_str() : (L"\x3a\x4a\x61\x6e\x3a\x4a\x61\x6e\x75\x61\x72\x79\x3a\x46\x65\x62\x3a\x46\x65\x62\x72\x75\x61\x72\x79\x3a\x4d\x61\x72\x3a\x4d\x61" L"\x72\x63\x68\x3a\x41\x70\x72\x3a\x41\x70\x72\x69\x6c\x3a\x4d\x61\x79\x3a\x4d\x61\x79\x3a\x4a\x75\x6e\x3a\x4a\x75\x6e\x65\x3a\x4a" L"\x75\x6c\x3a\x4a\x75\x6c\x79\x3a\x41\x75\x67\x3a\x41\x75\x67\x75\x73\x74\x3a\x53\x65\x70\x3a\x53\x65\x70\x74\x65\x6d\x62\x65\x72" L"\x3a\x4f\x63\x74\x3a\x4f\x63\x74\x6f\x62\x65\x72\x3a\x4e\x6f\x76\x3a\x4e\x6f\x76\x65\x6d\x62\x65\x72\x3a\x44\x65\x63\x3a\x44\x65" L"\x63\x65\x6d\x62\x65\x72")); 
#line 215
} 
#line 217
_Locinfo(const _Locinfo &) = delete;
#line 218
_Locinfo &operator=(const _Locinfo &) = delete;
#line 225
private: _Lockit _Lock; 
#line 228 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Yarn< char>  _Days; 
#line 229
_Yarn< char>  _Months; 
#line 230
_Yarn< __wchar_t>  _W_Days; 
#line 231
_Yarn< __wchar_t>  _W_Months; 
#line 232
_Yarn< char>  _Oldlocname; 
#line 233
_Yarn< char>  _Newlocname; 
#line 234
}; 
#line 237
template < class _Elem > inline
 int __cdecl _LStrcoll ( const _Elem * _First1, const _Elem * _Last1,
  const _Elem * _First2, const _Elem * _Last2,
   const _Locinfo :: _Collvec * )
 {
 for (; _First1 != _Last1 && _First2 != _Last2; ++ _First1, ++ _First2 )
  if ( * _First1 < * _First2 )
   return ( - 1 );
  else if ( * _First2 < * _First1 )
   return ( + 1 );
 return ( _First2 != _Last2 ? - 1 : _First1 != _Last1 ? + 1 : 0 );
 }
#line 251
template<> inline int __cdecl _LStrcoll(const char *_First1, const char *_Last1, const char *
#line 252
_First2, const char *_Last2, const _Locinfo::_Collvec *
#line 253
_Vector) 
#line 254
{ 
#line 255
return _Strcoll(_First1, _Last1, _First2, _Last2, _Vector); 
#line 256
} 
#line 259
template<> inline int __cdecl _LStrcoll(const __wchar_t *_First1, const __wchar_t *_Last1, const __wchar_t *
#line 260
_First2, const __wchar_t *_Last2, const _Locinfo::_Collvec *
#line 261
_Vector) 
#line 262
{ 
#line 263
return _Wcscoll(_First1, _Last1, _First2, _Last2, _Vector); 
#line 264
} 
#line 267
template < class _Elem > inline
 size_t __cdecl _LStrxfrm ( _Elem * _First1, _Elem * _Last1,
  const _Elem * _First2, const _Elem * _Last2,
   const _Locinfo :: _Collvec * )
 {
 size_t _Count = _Last2 - _First2;
 if ( _Count <= ( size_t ) ( _Last1 - _First1 ) )
  :: memcpy_s ( ( _First1 ), ( ( _Last1 - _First1 ) * sizeof ( _Elem ) ), ( _First2 ), ( _Count * sizeof ( _Elem ) ) );

 return ( _Count );
 }
#line 280 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
template<> inline size_t __cdecl _LStrxfrm(char *
#line 281
_First1, char *_Last1, const char *
#line 282
_First2, const char *_Last2, const _Locinfo::_Collvec *
#line 283
_Vector) 
#line 284
{ 
#line 285
return _Strxfrm(_First1, _Last1, _First2, _Last2, _Vector); 
#line 286
} 
#line 289
template<> inline size_t __cdecl _LStrxfrm(__wchar_t *
#line 290
_First1, __wchar_t *_Last1, const __wchar_t *
#line 291
_First2, const __wchar_t *_Last2, const _Locinfo::_Collvec *
#line 292
_Vector) 
#line 293
{ 
#line 294
return _Wcsxfrm(_First1, _Last1, _First2, _Last2, _Vector); 
#line 295
} 
#line 296
}
#line 298
#pragma warning(pop)
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xfacet"
#pragma warning(push,3)
#line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
#pragma pack ( pop )
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xfacet"
#pragma pack ( push, 8 )
#line 18
namespace std { 
#line 20
class __declspec(dllimport) _Facet_base { 
#line 23
public: virtual ~_Facet_base() noexcept 
#line 24
{ 
#line 25
} 
#line 28
virtual void _Incref() = 0; 
#line 31
virtual _Facet_base *_Decref() = 0; 
#line 32
}; 
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xfacet"
void __cdecl _Facet_Register(_Facet_base *); 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xfacet"
}
#line 42
#pragma warning(pop)
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
#pragma warning(push,3)
#line 19
#pragma warning(disable: 4412 28197)
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xfacet"
#pragma pack ( pop )
#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
#pragma pack ( push, 8 )
#line 21
namespace std { 
#line 23
template< class _Dummy> 
#line 24
class _Locbase { 
#line 27
public: static const int collate = ((1 << 1) >> 1); 
#line 28
static const int ctype = ((1 << 2) >> 1); 
#line 29
static const int monetary = ((1 << 3) >> 1); 
#line 30
static const int numeric = ((1 << 4) >> 1); 
#line 31
static const int time = ((1 << 5) >> 1); 
#line 32
static const int messages = ((1 << 6) >> 1); 
#line 33
static const int all = (((1 << (6 + 1)) >> 1) - 1); 
#line 34
static const int none = 0; 
#line 35
}; 
#line 37
template< class _Dummy> const int 
#line 38
_Locbase< _Dummy> ::collate; 
#line 39
template< class _Dummy> const int 
#line 40
_Locbase< _Dummy> ::ctype; 
#line 41
template< class _Dummy> const int 
#line 42
_Locbase< _Dummy> ::monetary; 
#line 43
template< class _Dummy> const int 
#line 44
_Locbase< _Dummy> ::numeric; 
#line 45
template< class _Dummy> const int 
#line 46
_Locbase< _Dummy> ::time; 
#line 47
template< class _Dummy> const int 
#line 48
_Locbase< _Dummy> ::messages; 
#line 49
template< class _Dummy> const int 
#line 50
_Locbase< _Dummy> ::all; 
#line 51
template< class _Dummy> const int 
#line 52
_Locbase< _Dummy> ::none; 
#line 55
class locale; 
#line 56
template < class _Facet >
 const _Facet & __cdecl use_facet ( const locale & );
#line 58
template< class _Elem> class collate; 
#line 61
struct __declspec(dllimport) _Crt_new_delete { 
#line 96
}; 
#line 98
class locale : public _Locbase< int> , public _Crt_new_delete { 
#line 102
public: typedef int category; 
#line 105
class __declspec(dllimport) id { 
#line 108
public: id(size_t _Val = 0) : _Id(_Val) 
#line 110
{ 
#line 111
} 
#line 113
operator size_t() 
#line 114
{ 
#line 115
if ((_Id) == (0)) 
#line 116
{ 
#line 117
{ _Lockit _Lock(0); 
#line 118
if ((_Id) == (0)) { 
#line 119
(_Id) = (++_Id_cnt); }  
#line 120
} 
#line 121
}  
#line 122
return _Id; 
#line 123
} 
#line 126
private: size_t _Id; 
#line 128
static int _Id_cnt; 
#line 131
public: id(const id &) = delete;
#line 132
id &operator=(const id &) = delete;
#line 133
}; 
#line 135
class _Locimp; 
#line 138
class __declspec(dllimport) facet : public _Facet_base, public _Crt_new_delete { 
#line 142
public: static size_t __cdecl _Getcat(const facet ** = 0, const locale * = 0) 
#line 144
{ 
#line 145
return (size_t)(-1); 
#line 146
} 
#line 148
virtual void _Incref() 
#line 149
{ 
#line 150
_InterlockedIncrement(reinterpret_cast< volatile long *>(&(_Myrefs))); 
#line 151
} 
#line 153
virtual _Facet_base *_Decref() 
#line 154
{ 
#line 155
if (_InterlockedDecrement(reinterpret_cast< volatile long *>(&(_Myrefs))) == (0)) { 
#line 156
return this; } else { 
#line 158
return 0; }  
#line 159
} 
#line 162
private: _Atomic_counter_t _Myrefs; 
#line 165
protected: explicit facet(size_t _Initrefs = 0) 
#line 166
{ 
#line 167
_Init_atomic_counter(_Myrefs, (_Atomic_integral_t)_Initrefs); 
#line 168
} 
#line 170
virtual ~facet() noexcept 
#line 171
{ 
#line 172
} 
#line 175
public: facet(const facet &) = delete;
#line 176
facet &operator=(const facet &) = delete;
#line 177
}; 
#line 180
#pragma warning(push)
#pragma warning(disable: 4275)
#line 183
class __declspec(dllimport) _Locimp : public facet { 
#line 187
protected: virtual ~_Locimp() noexcept 
#line 188
{ 
#line 189
_Locimp_dtor(this); 
#line 190
} 
#line 194
private: static _Locimp *__cdecl _New_Locimp(bool _Transparent = false); 
#line 196
static _Locimp *__cdecl _New_Locimp(const _Locimp & _Right); 
#line 199
static void __cdecl _Locimp_dtor(_Locimp *); 
#line 201
static void __cdecl _Locimp_Addfac(_Locimp *, facet *, size_t); 
#line 203
static void __cdecl _Locimp_ctor(_Locimp *, const _Locimp &); 
#line 205
friend class locale; 
#line 207
_Locimp(bool _Transparent) : facet(1), _Facetvec((0)), _Facetcount((0)), _Catmask(none), _Xparent(_Transparent), _Name("*") 
#line 211
{ 
#line 212
} 
#line 214
_Locimp(const _Locimp &_Right) : facet(1), _Facetvec((0)), _Facetcount(_Right._Facetcount), _Catmask(_Right._Catmask), _Xparent(_Right._Xparent), _Name((_Right._Name).c_str()) 
#line 218
{ 
#line 219
_Locimp_ctor(this, _Right); 
#line 220
} 
#line 222
void _Addfac(facet *_Pfacet, size_t _Id) 
#line 223
{ 
#line 224
_Locimp_Addfac(this, _Pfacet, _Id); 
#line 225
} 
#line 227
static _Locimp *__cdecl _Makeloc(const _Locinfo &, category, _Locimp *, const locale *); 
#line 230
static void __cdecl _Makewloc(const _Locinfo &, category, _Locimp *, const locale *); 
#line 234
static void __cdecl _Makeushloc(const _Locinfo &, category, _Locimp *, const locale *); 
#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static void __cdecl _Makexloc(const _Locinfo &, category, _Locimp *, const locale *); 
#line 241
facet **_Facetvec; 
#line 242
size_t _Facetcount; 
#line 243
category _Catmask; 
#line 244
bool _Xparent; 
#line 245
_Yarn< char>  _Name; 
#line 247
static _Locimp *_Clocptr; 
#line 250
public: _Locimp &operator=(const _Locimp &) = delete;
#line 251
}; 
#line 253
#pragma warning(pop)
#line 255
template < class _Elem,
  class _Traits,
  class _Alloc >
  bool operator ( ) ( const basic_string < _Elem, _Traits, _Alloc > & _Left,
   const basic_string < _Elem, _Traits, _Alloc > & _Right ) const
  {
  const :: std :: collate < _Elem > & _Coll_fac =
   use_facet < :: std :: collate < _Elem > > ( * this );

  return ( _Coll_fac . compare ( _Left . c_str ( ), _Left . c_str ( ) + _Left . size ( ),
   _Right . c_str ( ), _Right . c_str ( ) + _Right . size ( ) ) < 0 );
  }
#line 268
template < class _Facet >
  locale combine ( const locale & _Loc ) const
  {
  _Facet * _Facptr;

  try {
   _Facptr = ( _Facet * ) & use_facet < _Facet > ( _Loc );
  } catch ( ... ) {
   _Xruntime_error ( "locale::combine facet missing" );
  }

  _Locimp * _Newimp = _Locimp :: _New_Locimp ( * _Ptr );
  _Newimp -> _Addfac ( _Facptr, _Facet :: id );
  _Newimp -> _Catmask = none;
  _Newimp -> _Name = "*";
  return ( locale ( _Newimp ) );
  }
#line 286
template < class _Facet >
  locale ( const locale & _Loc, const _Facet * _Facptr )
   : _Ptr ( _Locimp :: _New_Locimp ( * _Loc . _Ptr ) )
  {
  if ( _Facptr != 0 )
   {
   _Ptr -> _Addfac ( ( _Facet * ) _Facptr, _Facet :: id );
   _Ptr -> _Catmask = none;
   _Ptr -> _Name = "*";
   }
  }
#line 298
locale(_Uninitialized) 
#line 299
{ 
#line 300
} 
#line 323 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
locale(const locale &_Right) noexcept : _Ptr(_Right._Ptr) 
#line 325
{ 
#line 326
(_Ptr)->_Incref(); 
#line 327
} 
#line 329
locale() noexcept : _Ptr(_Init(true)) 
#line 331
{ 
#line 332
} 
#line 335
locale(const locale &_Loc, const locale &_Other, category 
#line 336
_Cat) : _Ptr(_Locimp::_New_Locimp(*(_Loc._Ptr))) 
#line 338
{ 
#line 339
if (_Cat != none) 
#line 340
{ 
#line 341
try { 
#line 342
{ _Locinfo _Lobj; 
#line 343
_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, &_Other); 
#line 344
_Lobj._Addcats((_Loc._Ptr)->_Catmask, (_Loc.name()).c_str()); 
#line 346
_Lobj._Addcats((_Other._Ptr)->_Catmask, (_Other.name()).c_str()); 
#line 348
((_Ptr)->_Catmask) = (((_Loc._Ptr)->_Catmask) | ((_Other._Ptr)->_Catmask)); 
#line 350
(((_Ptr)->_Name) = (_Lobj._Getname())); 
#line 351
} 
#line 352
} catch (...) { 
#line 353
delete (_Ptr)->_Decref(); 
#line 354
throw; 
#line 355
}  
#line 356
}  
#line 357
} 
#line 360
private: void _Construct(const string &_Str, category 
#line 361
_Cat) 
#line 362
{ 
#line 363
bool _Bad = false; 
#line 364
_Init(); 
#line 365
if (_Cat != none) 
#line 366
{ 
#line 367
try { 
#line 368
{ _Locinfo _Lobj(_Cat, _Str.c_str()); 
#line 369
if (this->_Badname(_Lobj)) { 
#line 370
_Bad = true; } else 
#line 372
{ 
#line 373
_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0); 
#line 374
((_Ptr)->_Catmask) = _Cat; 
#line 375
(((_Ptr)->_Name) = (_Str.c_str())); 
#line 376
}  
#line 377
} 
#line 378
} catch (...) { 
#line 379
delete (_Ptr)->_Decref(); 
#line 380
throw; 
#line 381
}  
#line 382
}  
#line 384
if (_Bad) 
#line 385
{ 
#line 386
delete (_Ptr)->_Decref(); 
#line 387
_Xruntime_error("bad locale name"); 
#line 388
}  
#line 389
} 
#line 392
public: explicit locale(const char *_Locname, category 
#line 393
_Cat = all) : _Ptr(_Locimp::_New_Locimp()) 
#line 395
{ 
#line 398
if (_Locname == (0)) { 
#line 399
_Xruntime_error("bad locale name"); }  
#line 400
this->_Construct(_Locname, _Cat); 
#line 401
} 
#line 403
locale(const locale &_Loc, const char *_Locname, category 
#line 404
_Cat) : _Ptr(_Locimp::_New_Locimp(*(_Loc._Ptr))) 
#line 406
{ 
#line 409
if (_Locname == (0)) { 
#line 410
_Xruntime_error("bad locale name"); }  
#line 411
this->_Construct(_Locname, _Cat); 
#line 412
} 
#line 414
explicit locale(const string &_Str, category 
#line 415
_Cat = all) : _Ptr(_Locimp::_New_Locimp()) 
#line 417
{ 
#line 418
this->_Construct(_Str, _Cat); 
#line 419
} 
#line 421
locale(const locale &_Loc, const string &_Str, category 
#line 422
_Cat) : _Ptr(_Locimp::_New_Locimp(*(_Loc._Ptr))) 
#line 424
{ 
#line 425
this->_Construct(_Str, _Cat); 
#line 426
} 
#line 429 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
~locale() noexcept 
#line 430
{ 
#line 431
if ((_Ptr) != (0)) { 
#line 432
delete (_Ptr)->_Decref(); }  
#line 433
} 
#line 435
locale &operator=(const locale &_Right) noexcept 
#line 436
{ 
#line 437
if ((_Ptr) != (_Right._Ptr)) 
#line 438
{ 
#line 439
delete (_Ptr)->_Decref(); 
#line 440
(_Ptr) = (_Right._Ptr); 
#line 441
(_Ptr)->_Incref(); 
#line 442
}  
#line 443
return *this; 
#line 444
} 
#line 447 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
string name() const 
#line 448
{ 
#line 449
return (((_Ptr) == (0)) ? string() : ((_Ptr)->_Name).c_str()); 
#line 450
} 
#line 452
const char *c_str() const 
#line 453
{ 
#line 454
return ((_Ptr) == (0)) ? "" : ((_Ptr)->_Name).c_str(); 
#line 455
} 
#line 457
const facet *_Getfacet(size_t _Id) const 
#line 458
{ 
#line 459
const facet *_Facptr = (_Id < ((_Ptr)->_Facetcount)) ? ((_Ptr)->_Facetvec)[_Id] : (0); 
#line 461
if ((_Facptr != (0)) || (!((_Ptr)->_Xparent))) { 
#line 462
return _Facptr; } else 
#line 464
{ 
#line 465
_Locimp *_Ptr0 = _Getgloballocale(); 
#line 466
return (_Id < (_Ptr0->_Facetcount)) ? (_Ptr0->_Facetvec)[_Id] : (0); 
#line 469
}  
#line 470
} 
#line 472
bool operator==(const locale &_Loc) const 
#line 473
{ 
#line 474
return ((_Ptr) == (_Loc._Ptr)) || (((this->name()).compare("*") != 0) && ((this->name()).compare(_Loc.name()) == 0)); 
#line 477
} 
#line 479
bool operator!=(const locale &_Right) const 
#line 480
{ 
#line 481
return !((*this) == _Right); 
#line 482
} 
#line 484
__declspec(dllimport) static const locale &__cdecl 
#line 485
classic(); 
#line 487
__declspec(dllimport) static locale __cdecl 
#line 488
global(const locale &); 
#line 490
__declspec(dllimport) static locale __cdecl 
#line 491
empty(); 
#line 494
private: locale(_Locimp *_Ptrimp) : _Ptr(_Ptrimp) 
#line 496
{ 
#line 497
} 
#line 499
__declspec(dllimport) static _Locimp *__cdecl 
#line 500
_Init(bool _Do_incref = false); 
#line 501
__declspec(dllimport) static _Locimp *__cdecl 
#line 502
_Getgloballocale(); 
#line 503
__declspec(dllimport) static void __cdecl 
#line 504
_Setgloballocale(void *); 
#line 506
bool _Badname(const _Locinfo &_Lobj) 
#line 507
{ 
#line 508
return ::strcmp(_Lobj._Getname(), "*") == 0; 
#line 509
} 
#line 511
_Locimp *_Ptr; 
#line 512
}; 
#line 535 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template< class _Facet> 
#line 536
struct _Facetptr { 
#line 538
static const locale::facet *_Psave; 
#line 539
}; 
#line 541
template< class _Facet> const locale::facet *
#line 543
_Facetptr< _Facet> ::_Psave = (0); 
#line 550
template < class _Facet > inline
 const _Facet & __cdecl use_facet ( const locale & _Loc )

 {





 { :: std :: _Lockit _Lock ( 0 );
  const locale :: facet * _Psave =
   _Facetptr < _Facet > :: _Psave;

  size_t _Id = _Facet :: id;
  const locale :: facet * _Pf = _Loc . _Getfacet ( _Id );

  if ( _Pf != 0 )
   ;
  else if ( _Psave != 0 )
   _Pf = _Psave;
  else if ( _Facet :: _Getcat ( & _Psave, & _Loc ) == ( size_t ) ( - 1 ) )



   throw :: std :: bad_cast ( );





  else
   {
   _Pf = _Psave;
   _Facetptr < _Facet > :: _Psave = _Psave;

   locale :: facet * _Pfmod = ( _Facet * ) _Psave;
   _Pfmod -> _Incref ( );





   _Facet_Register ( _Pfmod );

   }

  return ( ( const _Facet & ) ( * _Pf ) );
 }

 }
#line 602 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template < class _Elem,
 class _InIt > inline
 int __cdecl _Getloctxt ( _InIt & _First, _InIt & _Last, size_t _Numfields,
  const _Elem * _Ptr )
 {
 for ( size_t _Off = 0; _Ptr [ _Off ] != ( _Elem ) 0; ++ _Off )
  if ( _Ptr [ _Off ] == _Ptr [ 0 ] )
   ++ _Numfields;
 string _Str ( _Numfields, '\000' );

 int _Ans = - 2;
 for ( size_t _Column = 1;; ++ _Column, ( void ) ++ _First, _Ans = - 1 )
  {
  bool _Prefix = false;
  size_t _Off = 0;
  size_t _Field = 0;

  for (; _Field < _Numfields; ++ _Field )
   {
   for (; _Ptr [ _Off ] != ( _Elem ) 0 && _Ptr [ _Off ] != _Ptr [ 0 ]; ++ _Off )
    ;

   if ( _Str [ _Field ] != '\000' )
    _Off += _Str [ _Field ];
   else if ( _Ptr [ _Off += _Column ] == _Ptr [ 0 ]
    || _Ptr [ _Off ] == ( _Elem ) 0 )
    {
    _Str [ _Field ] = ( char ) ( _Column < 127
     ? _Column : 127 );
    _Ans = ( int ) _Field;
    }
   else if ( _First == _Last || _Ptr [ _Off ] != * _First )
    _Str [ _Field ] = ( char ) ( _Column < 127
     ? _Column : 127 );
   else
    _Prefix = true;
   }

  if ( ! _Prefix || _First == _Last )
   break;
  }
 return ( _Ans );
 }
#line 650
template < class _Elem > inline
 char __cdecl _Maklocbyte ( _Elem _Char,
  const _Locinfo :: _Cvtvec & )
 {
 return ( ( char ) ( unsigned char ) _Char );
 }
#line 658
template<> inline char __cdecl _Maklocbyte(__wchar_t _Char, const _Locinfo::_Cvtvec &
#line 659
_Cvt) 
#line 660
{ 
#line 661
char _Byte = '\000'; 
#line 662
mbstate_t _Mbst1 = {}; 
#line 663
_Wcrtomb(&_Byte, _Char, &_Mbst1, &_Cvt); 
#line 664
return _Byte; 
#line 665
} 
#line 669
template<> inline char __cdecl _Maklocbyte(unsigned short _Char, const _Locinfo::_Cvtvec &
#line 670
_Cvt) 
#line 671
{ 
#line 672
char _Byte = '\000'; 
#line 673
mbstate_t _Mbst1 = {}; 
#line 674
_Wcrtomb(&_Byte, (__wchar_t)_Char, &_Mbst1, &_Cvt); 
#line 675
return _Byte; 
#line 676
} 
#line 683 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template < class _Elem > inline
 _Elem __cdecl _Maklocchr ( char _Byte, _Elem *,
  const _Locinfo :: _Cvtvec & )
 {
 return ( ( _Elem ) ( unsigned char ) _Byte );
 }
#line 691
template<> inline __wchar_t __cdecl _Maklocchr(char _Byte, __wchar_t *, const _Locinfo::_Cvtvec &
#line 692
_Cvt) 
#line 693
{ 
#line 694
__wchar_t _Wc = L'\x0'; 
#line 695
mbstate_t _Mbst1 = {}; 
#line 696
_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst1, &_Cvt); 
#line 697
return _Wc; 
#line 698
} 
#line 702
template<> inline unsigned short __cdecl _Maklocchr(char _Byte, unsigned short *, const _Locinfo::_Cvtvec &
#line 703
_Cvt) 
#line 704
{ 
#line 705
unsigned short _Wc = ((unsigned short)0); 
#line 706
mbstate_t _Mbst1 = {}; 
#line 707
_Mbrtowc((__wchar_t *)(&_Wc), &_Byte, 1, &_Mbst1, &_Cvt); 
#line 708
return _Wc; 
#line 709
} 
#line 716 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template < class _Elem > inline
 _Elem * __cdecl _Maklocstr ( const char * _Ptr, _Elem *,
  const _Locinfo :: _Cvtvec & )
 {
 size_t _Count = :: strlen ( _Ptr ) + 1;

 _Elem * _Ptrdest = ( _Elem * ) calloc ( _Count, sizeof ( _Elem ) );


 if ( ! _Ptrdest )
  _Xbad_alloc ( );

 #pragma warning(push)
 #pragma warning(disable: 6011)
 for ( _Elem * _Ptrnext = _Ptrdest; 0 < _Count; -- _Count, ++ _Ptrnext, ++ _Ptr )
  * _Ptrnext = ( _Elem ) ( unsigned char ) * _Ptr;
 #pragma warning(pop)

 return ( _Ptrdest );
 }
#line 738 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template<> inline __wchar_t *__cdecl _Maklocstr(const char *_Ptr, __wchar_t *, const _Locinfo::_Cvtvec &
#line 739
_Cvt) 
#line 740
{ 
#line 741
size_t _Count, _Count1; 
#line 742
size_t _Wchars; 
#line 743
const char *_Ptr1; 
#line 744
int _Bytes; 
#line 745
__wchar_t _Wc; 
#line 746
mbstate_t _Mbst1 = {}; 
#line 748
_Count1 = (::strlen(_Ptr) + (1)); 
#line 749
for (((_Count = _Count1), (_Wchars = (0))), (_Ptr1 = _Ptr); (0) < _Count; ((_Count -= _Bytes), (_Ptr1 += _Bytes)), (++_Wchars)) { 
#line 751
if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0) { 
#line 752
break; }  }  
#line 753
++_Wchars; 
#line 755
__wchar_t *_Ptrdest = (__wchar_t *)calloc(_Wchars, sizeof(__wchar_t)); 
#line 758 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (!_Ptrdest) { 
#line 759
_Xbad_alloc(); }  
#line 760
__wchar_t *_Ptrnext = _Ptrdest; 
#line 761
mbstate_t _Mbst2 = {}; 
#line 763
#pragma warning(push)
#pragma warning(disable: 6011)
for (; (0) < _Wchars; (((_Count -= _Bytes), (_Ptr += _Bytes)), (--_Wchars)), (++_Ptrnext)) { 
#line 767
if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0) { 
#line 768
break; }  }  
#line 769
(*_Ptrnext) = L'\x0'; 
#pragma warning(pop)
#line 772
return _Ptrdest; 
#line 773
} 
#line 777
template<> inline unsigned short *__cdecl _Maklocstr(const char *_Ptr, unsigned short *, const _Locinfo::_Cvtvec &
#line 778
_Cvt) 
#line 779
{ 
#line 780
size_t _Count, _Count1; 
#line 781
size_t _Wchars; 
#line 782
const char *_Ptr1; 
#line 783
int _Bytes; 
#line 784
unsigned short _Wc; 
#line 785
mbstate_t _Mbst1 = {}; 
#line 787
_Count1 = (::strlen(_Ptr) + (1)); 
#line 788
for (((_Count = _Count1), (_Wchars = (0))), (_Ptr1 = _Ptr); (0) < _Count; ((_Count -= _Bytes), (_Ptr1 += _Bytes)), (++_Wchars)) { 
#line 790
if ((_Bytes = _Mbrtowc((__wchar_t *)(&_Wc), _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0) { 
#line 792
break; }  }  
#line 793
++_Wchars; 
#line 795
__wchar_t *_Ptrdest = (__wchar_t *)calloc(_Wchars, sizeof(__wchar_t)); 
#line 798 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (!_Ptrdest) { 
#line 799
_Xbad_alloc(); }  
#line 801
__wchar_t *_Ptrnext = _Ptrdest; 
#line 802
mbstate_t _Mbst2 = {}; 
#line 803
for (; (0) < _Wchars; (((_Count -= _Bytes), (_Ptr += _Bytes)), (--_Wchars)), (++_Ptrnext)) { 
#line 805
if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0) { 
#line 806
break; }  }  
#line 807
(*_Ptrnext) = L'\x0'; 
#line 808
return (unsigned short *)_Ptrdest; 
#line 809
} 
#line 813 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
#pragma warning(push)
#pragma warning(disable: 4275)
#line 816
class __declspec(dllimport) codecvt_base : public locale::facet { 
#line 821
public: enum { 
#line 822
ok, partial, error, noconv}; 
#line 823
typedef int result; 
#line 825
codecvt_base(size_t _Refs = 0) : locale::facet(_Refs) 
#line 827
{ 
#line 828
} 
#line 830
bool always_noconv() const noexcept 
#line 831
{ 
#line 832
return this->do_always_noconv(); 
#line 833
} 
#line 835
int max_length() const noexcept 
#line 836
{ 
#line 837
return this->do_max_length(); 
#line 838
} 
#line 840
int encoding() const noexcept 
#line 841
{ 
#line 842
return this->do_encoding(); 
#line 843
} 
#line 845
virtual ~codecvt_base() noexcept 
#line 846
{ 
#line 847
} 
#line 850
protected: virtual bool do_always_noconv() const noexcept 
#line 851
{ 
#line 852
return false; 
#line 853
} 
#line 855
virtual int do_max_length() const noexcept 
#line 856
{ 
#line 857
return 1; 
#line 858
} 
#line 860
virtual int do_encoding() const noexcept 
#line 861
{ 
#line 862
return 1; 
#line 863
} 
#line 864
}; 
#line 866
#pragma warning(pop)
#line 869
template < class _Elem,
 class _Byte,
 class _Statype >
 class codecvt
  : public codecvt_base
 {
public :
 typedef _Elem intern_type;
 typedef _Byte extern_type;
 typedef _Statype state_type;

 result in ( _Statype & _State,
  const _Byte * _First1, const _Byte * _Last1, const _Byte * & _Mid1,
  _Elem * _First2, _Elem * _Last2, _Elem * & _Mid2 ) const
  {
  return ( do_in ( _State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2 ) );
  }

 result out ( _Statype & _State,
  const _Elem * _First1, const _Elem * _Last1, const _Elem * & _Mid1,
  _Byte * _First2, _Byte * _Last2, _Byte * & _Mid2 ) const
  {
  return ( do_out ( _State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2 ) );
  }

 result unshift ( _Statype & _State,
  _Byte * _First2, _Byte * _Last2, _Byte * & _Mid2 ) const
  {
  return ( do_unshift ( _State, _First2, _Last2, _Mid2 ) );
  }

 int length ( _Statype & _State, const _Byte * _First1,
  const _Byte * _Last1, size_t _Count ) const
  {
  return ( do_length ( _State, _First1, _Last1, _Count ) );
  }

  static locale :: id id;

 explicit codecvt ( size_t _Refs = 0 )
  : codecvt_base ( _Refs )
  {
  _Init ( _Locinfo ( ) );
  }

  codecvt ( const _Locinfo & _Lobj, size_t _Refs = 0 )
  : codecvt_base ( _Refs )
  {
  _Init ( _Lobj );
  }

 static size_t __cdecl _Getcat ( const locale :: facet * * _Ppf = 0,
  const locale * _Ploc = 0 )
  {
  if ( _Ppf != 0 && * _Ppf == 0 )
   * _Ppf = new codecvt < _Elem, _Byte, _Statype > (
    _Locinfo ( _Ploc -> c_str ( ) ) );
  return ( 2 );
  }

protected :
 virtual ~ codecvt ( ) noexcept
  {
  }

 void _Init ( const _Locinfo & )
  {
  }

 virtual bool do_always_noconv ( ) const noexcept
  {
  return ( is_same < _Byte, _Elem > :: value );
  }

 virtual result do_in ( _Statype &,
  const _Byte * _First1, const _Byte * _Last1, const _Byte * & _Mid1,
  _Elem * _First2, _Elem * _Last2, _Elem * & _Mid2 ) const
  {
  _Mid1 = _First1, _Mid2 = _First2;
  if ( is_same < _Byte, _Elem > :: value )
   return ( noconv );
  else
   {
   for (; _Mid1 != _Last1 && _Mid2 != _Last2; ++ _Mid1, ++ _Mid2 )
    * _Mid2 = ( _Elem ) * _Mid1;
   return ( ok );
   }
  }

 virtual result do_out ( _Statype &,
  const _Elem * _First1, const _Elem * _Last1, const _Elem * & _Mid1,
  _Byte * _First2, _Byte * _Last2, _Byte * & _Mid2 ) const
  {
  _Mid1 = _First1, _Mid2 = _First2;
  if ( is_same < _Byte, _Elem > :: value )
   return ( noconv );
  else
   {
   for (; _Mid1 != _Last1 && _Mid2 != _Last2; ++ _Mid1, ++ _Mid2 )
    * _Mid2 = ( _Byte ) * _Mid1;
   return ( ok );
   }
  }

 virtual result do_unshift ( _Statype &,
  _Byte * _First2, _Byte *, _Byte * & _Mid2 ) const
  {
  _Mid2 = _First2;
  return ( ok );
  }

 virtual int do_length ( _Statype &, const _Byte * _First1,
  const _Byte * _Last1, size_t _Count ) const
  {
  return ( ( int ) ( _Count < ( size_t ) ( _Last1 - _First1 )
   ? _Count : _Last1 - _First1 ) );
  }
 };
#line 991
template< class _Elem, class 
#line 992
_Byte, class 
#line 993
_Statype> locale::id 
#line 994
codecvt< _Elem, _Byte, _Statype> ::id; 
#line 997
enum _Codecvt_mode { 
#line 998
_Consume_header = 4, 
#line 999
_Generate_header = 2
#line 1000
}; 
#line 1004
template<> class __declspec(dllimport) codecvt< char16_t, char, _Mbstatet>  : public codecvt_base { 
#line 1008
public: typedef std::codecvt< char16_t, char, _Mbstatet>  _Mybase; 
#line 1009
typedef char16_t _Elem; 
#line 1010
typedef char _Byte; 
#line 1011
typedef _Mbstatet _Statype; 
#line 1012
typedef _Elem intern_type; 
#line 1013
typedef _Byte extern_type; 
#line 1014
typedef _Statype state_type; 
#line 1016
result in(_Statype &_State, const _Byte *
#line 1017
_First1, const _Byte *_Last1, const _Byte *&_Mid1, _Elem *
#line 1018
_First2, _Elem *_Last2, _Elem *&_Mid2) const 
#line 1019
{ 
#line 1020
return this->do_in(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1022
} 
#line 1024
result out(_Statype &_State, const _Elem *
#line 1025
_First1, const _Elem *_Last1, const _Elem *&_Mid1, _Byte *
#line 1026
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1027
{ 
#line 1028
return this->do_out(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1030
} 
#line 1032
result unshift(_Statype &_State, _Byte *
#line 1033
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1034
{ 
#line 1035
return this->do_unshift(_State, _First2, _Last2, _Mid2); 
#line 1037
} 
#line 1039
int length(_Statype &_State, const _Byte *_First1, const _Byte *
#line 1040
_Last1, size_t _Count) const 
#line 1041
{ 
#line 1042
return this->do_length(_State, _First1, _Last1, _Count); 
#line 1043
} 
#line 1045
static locale::id id; 
#line 1047
explicit codecvt(size_t _Refs = 0) : codecvt_base(_Refs), _Maxcode((1114111)), _Mode(_Consume_header) 
#line 1049
{ 
#line 1050
{ _Locinfo _Lobj; 
#line 1051
this->_Init(_Lobj); 
#line 1052
} 
#line 1053
} 
#line 1055
codecvt(const _Locinfo &_Lobj, size_t _Refs = 0) : codecvt_base(_Refs), _Maxcode((1114111)), _Mode(_Consume_header) 
#line 1057
{ 
#line 1058
this->_Init(_Lobj); 
#line 1059
} 
#line 1061
codecvt(const _Locinfo &_Lobj, unsigned long _Maxcode_arg, _Codecvt_mode 
#line 1062
_Mode_arg, size_t _Refs = 0) : codecvt_base(_Refs), _Maxcode(_Maxcode_arg), _Mode(_Mode_arg) 
#line 1064
{ 
#line 1065
this->_Init(_Lobj); 
#line 1066
} 
#line 1068
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *
#line 1069
_Ploc = 0) 
#line 1070
{ 
#line 1071
if ((_Ppf != (0)) && ((*_Ppf) == (0))) { 
#line 1072
(*_Ppf) = (new std::codecvt< char16_t, char, _Mbstatet> (((_Locinfo)(_Ploc->c_str())))); }  
#line 1074
return 2; 
#line 1075
} 
#line 1078
protected: virtual ~codecvt() noexcept 
#line 1079
{ 
#line 1080
} 
#line 1082
void _Init(const _Locinfo &) 
#line 1083
{ 
#line 1084
} 
#line 1086
virtual result do_in(_Statype &_State, const _Byte *
#line 1087
_First1, const _Byte *_Last1, const _Byte *&_Mid1, _Elem *
#line 1088
_First2, _Elem *_Last2, _Elem *&_Mid2) const 
#line 1089
{ 
#line 1090
unsigned short *_Pstate = (unsigned short *)(&_State); 
#line 1091
_Mid1 = _First1; 
#line 1092
_Mid2 = _First2; 
#line 1094
for (; (_Mid1 != _Last1) && (_Mid2 != _Last2);) { 
#line 1095
{ 
#line 1096
unsigned char _By = (unsigned char)(*_Mid1); 
#line 1097
unsigned long _Ch; 
#line 1098
int _Nextra, _Nskip; 
#line 1100
if ((*_Pstate) <= 1) { 
#line 1101
; } else { 
#line 1102
if ((_By < 128) || (192 <= _By)) { 
#line 1103
return _Mybase::error; } else 
#line 1105
{ 
#line 1106
++_Mid1; 
#line 1107
(*(_Mid2++)) = ((_Elem)((*_Pstate) | (_By & 63))); 
#line 1108
(*_Pstate) = (1); 
#line 1109
continue; 
#line 1110
}  }  
#line 1112
if (_By < 128) { 
#line 1113
(_Ch = _By), (_Nextra = 0); } else { 
#line 1114
if (_By < 192) 
#line 1115
{ 
#line 1116
++_Mid1; 
#line 1117
return _Mybase::error; 
#line 1118
} else { 
#line 1119
if (_By < 224) { 
#line 1120
(_Ch = (_By & 31)), (_Nextra = 1); } else { 
#line 1121
if (_By < 240) { 
#line 1122
(_Ch = (_By & 15)), (_Nextra = 2); } else { 
#line 1123
if (_By < 248) { 
#line 1124
(_Ch = (_By & 7)), (_Nextra = 3); } else { 
#line 1126
(_Ch = (_By & 3)), (_Nextra = ((_By < 252) ? 4 : 5)); }  }  }  }  }  
#line 1128
_Nskip = ((_Nextra < 3) ? 0 : 1); 
#line 1129
_First1 = _Mid1; 
#line 1131
if (_Nextra == 0) { 
#line 1132
++_Mid1; } else { 
#line 1133
if ((_Last1 - _Mid1) < ((_Nextra + 1) - _Nskip)) { 
#line 1134
break; } else { 
#line 1136
for (++_Mid1; _Nskip < _Nextra; (--_Nextra), (++_Mid1)) { 
#line 1137
if (((_By = ((unsigned char)(*_Mid1))) < 128) || (192 <= _By)) { 
#line 1138
return _Mybase::error; } else { 
#line 1140
_Ch = ((_Ch << 6) | (_By & 63)); }  }  }  }  
#line 1141
if (0 < _Nskip) { 
#line 1142
_Ch <<= 6; }  
#line 1144
if ((((_Maxcode) < (1114111)) ? _Maxcode : (1114111)) < _Ch) { 
#line 1145
return _Mybase::error; } else { 
#line 1146
if ((65535) < _Ch) 
#line 1147
{ 
#line 1148
unsigned short _Ch0 = (unsigned short)((55296) | ((_Ch >> 10) - (64))); 
#line 1151
(*(_Mid2++)) = ((_Elem)_Ch0); 
#line 1152
(*_Pstate) = ((unsigned short)((56320) | (_Ch & (1023)))); 
#line 1153
continue; 
#line 1154
}  }  
#line 1156
if (_Nskip == 0) { 
#line 1157
; } else { 
#line 1158
if (_Mid1 == _Last1) 
#line 1159
{ 
#line 1160
_Mid1 = _First1; 
#line 1161
break; 
#line 1162
} else { 
#line 1163
if (((_By = ((unsigned char)(*(_Mid1++)))) < 128) || (192 <= _By)) { 
#line 1164
return _Mybase::error; } else { 
#line 1166
_Ch |= (_By & 63); }  }  }  
#line 1168
if ((*_Pstate) == 0) 
#line 1169
{ 
#line 1170
(*_Pstate) = (1); 
#line 1172
if ((((_Mode) & (_Consume_header)) != 0) && (_Ch == (65279))) 
#line 1173
{ 
#line 1174
result _Ans = this->do_in(_State, _Mid1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1177
if (_Ans == (_Mybase::partial)) 
#line 1178
{ 
#line 1179
(*_Pstate) = (0); 
#line 1180
_Mid1 = _First1; 
#line 1181
}  
#line 1182
return _Ans; 
#line 1183
}  
#line 1184
}  
#line 1186
(*(_Mid2++)) = ((_Elem)_Ch); 
#line 1187
} }  
#line 1189
return (_First1 == _Mid1) ? _Mybase::partial : _Mybase::ok; 
#line 1190
} 
#line 1192
virtual result do_out(_Statype &_State, const _Elem *
#line 1193
_First1, const _Elem *_Last1, const _Elem *&_Mid1, _Byte *
#line 1194
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1195
{ 
#line 1196
unsigned short *_Pstate = (unsigned short *)(&_State); 
#line 1197
_Mid1 = _First1; 
#line 1198
_Mid2 = _First2; 
#line 1200
for (; (_Mid1 != _Last1) && (_Mid2 != _Last2);) 
#line 1201
{ 
#line 1202
unsigned long _Ch; 
#line 1203
unsigned short _Ch1 = (unsigned short)(*_Mid1); 
#line 1204
bool _Save = false; 
#line 1206
if (1 < (*_Pstate)) 
#line 1207
{ 
#line 1208
if ((_Ch1 < 56320) || (57344 <= _Ch1)) { 
#line 1209
return _Mybase::error; }  
#line 1210
_Ch = (((*_Pstate) << 10) | (_Ch1 - 56320)); 
#line 1211
} else { 
#line 1212
if ((55296 <= _Ch1) && (_Ch1 < 56320)) 
#line 1213
{ 
#line 1214
_Ch = (((_Ch1 - 55296) + 64) << 10); 
#line 1215
_Save = true; 
#line 1216
} else { 
#line 1218
_Ch = _Ch1; }  }  
#line 1220
_Byte _By; 
#line 1221
int _Nextra; 
#line 1223
if (_Ch < (128)) { 
#line 1224
(_By = ((_Byte)_Ch)), (_Nextra = 0); } else { 
#line 1225
if (_Ch < (2048)) { 
#line 1226
(_By = ((_Byte)((192) | (_Ch >> 6)))), (_Nextra = 1); } else { 
#line 1227
if (_Ch < (65536)) { 
#line 1228
(_By = ((_Byte)((224) | (_Ch >> 12)))), (_Nextra = 2); } else { 
#line 1230
(_By = ((_Byte)((240) | (_Ch >> 18)))), (_Nextra = 3); }  }  }  
#line 1232
int _Nput = (_Nextra < 3) ? _Nextra + 1 : (_Save ? 1 : 3); 
#line 1234
if ((_Last2 - _Mid2) < _Nput) { 
#line 1235
break; } else { 
#line 1236
if (((*_Pstate) != 0) || (((_Mode) & (_Generate_header)) == 0)) { 
#line 1237
; } else { 
#line 1238
if ((_Last2 - _Mid2) < (3 + _Nput)) { 
#line 1239
break; } else 
#line 1241
{ 
#line 1242
(*(_Mid2++)) = ((_Byte)((unsigned char)239)); 
#line 1243
(*(_Mid2++)) = ((_Byte)((unsigned char)187)); 
#line 1244
(*(_Mid2++)) = ((_Byte)((unsigned char)191)); 
#line 1245
}  }  }  
#line 1247
++_Mid1; 
#line 1248
if (_Save || (_Nextra < 3)) 
#line 1249
{ 
#line 1250
(*(_Mid2++)) = _By; 
#line 1251
--_Nput; 
#line 1252
}  
#line 1253
for (; 0 < _Nput; --_Nput) { 
#line 1254
(*(_Mid2++)) = ((_Byte)(((_Ch >> (6 * (--_Nextra))) & (63)) | (128))); }  
#line 1256
(*_Pstate) = ((unsigned short)(_Save ? _Ch >> 10 : (1))); 
#line 1257
}  
#line 1259
return (_First1 == _Mid1) ? _Mybase::partial : _Mybase::ok; 
#line 1260
} 
#line 1262
virtual result do_unshift(_Statype &_State, _Byte *
#line 1263
_First2, _Byte *, _Byte *&_Mid2) const 
#line 1264
{ 
#line 1265
unsigned short *_Pstate = (unsigned short *)(&_State); 
#line 1266
_Mid2 = _First2; 
#line 1268
return (1 < (*_Pstate)) ? _Mybase::error : _Mybase::ok; 
#line 1270
} 
#line 1272
virtual int do_length(_Statype &_State, const _Byte *_First1, const _Byte *
#line 1273
_Last1, size_t _Count) const 
#line 1274
{ 
#line 1275
size_t _Wchars = (0); 
#line 1276
_Statype _Mystate = _State; 
#line 1278
for (; (_Wchars < _Count) && (_First1 != _Last1);) 
#line 1279
{ 
#line 1280
const _Byte *_Mid1; 
#line 1281
_Elem *_Mid2; 
#line 1282
_Elem _Ch; 
#line 1284
switch (this->do_in(_Mystate, _First1, _Last1, _Mid1, &_Ch, (&_Ch) + 1, _Mid2)) 
#line 1286
{ 
#line 1287
case _Mybase::noconv:  
#line 1288
return (int)(_Wchars + (_Last1 - _First1)); 
#line 1290
case _Mybase::ok:  
#line 1291
if (_Mid2 == ((&_Ch) + 1)) { 
#line 1292
++_Wchars; }  
#line 1293
_First1 = _Mid1; 
#line 1294
break; 
#line 1296
default:  
#line 1297
return (int)_Wchars; 
#line 1298
}  
#line 1299
}  
#line 1301
return (int)_Wchars; 
#line 1302
} 
#line 1304
virtual bool do_always_noconv() const noexcept 
#line 1305
{ 
#line 1306
return false; 
#line 1307
} 
#line 1309
virtual int do_max_length() const noexcept 
#line 1310
{ 
#line 1311
return (((_Mode) & (_Consume_header)) != 0) ? 9 : ((((_Mode) & (_Generate_header)) != 0) ? 7 : 6); 
#line 1314
} 
#line 1316
virtual int do_encoding() const noexcept 
#line 1317
{ 
#line 1318
return 0; 
#line 1319
} 
#line 1322
private: unsigned long _Maxcode; 
#line 1323
_Codecvt_mode _Mode; 
#line 1324
}; 
#line 1328
template<> class __declspec(dllimport) codecvt< char32_t, char, _Mbstatet>  : public codecvt_base { 
#line 1332
public: typedef std::codecvt< char32_t, char, _Mbstatet>  _Mybase; 
#line 1333
typedef char32_t _Elem; 
#line 1334
typedef char _Byte; 
#line 1335
typedef _Mbstatet _Statype; 
#line 1336
typedef _Elem intern_type; 
#line 1337
typedef _Byte extern_type; 
#line 1338
typedef _Statype state_type; 
#line 1340
result in(_Statype &_State, const _Byte *
#line 1341
_First1, const _Byte *_Last1, const _Byte *&_Mid1, _Elem *
#line 1342
_First2, _Elem *_Last2, _Elem *&_Mid2) const 
#line 1343
{ 
#line 1344
return this->do_in(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1346
} 
#line 1348
result out(_Statype &_State, const _Elem *
#line 1349
_First1, const _Elem *_Last1, const _Elem *&_Mid1, _Byte *
#line 1350
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1351
{ 
#line 1352
return this->do_out(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1354
} 
#line 1356
result unshift(_Statype &_State, _Byte *
#line 1357
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1358
{ 
#line 1359
return this->do_unshift(_State, _First2, _Last2, _Mid2); 
#line 1361
} 
#line 1363
int length(_Statype &_State, const _Byte *_First1, const _Byte *
#line 1364
_Last1, size_t _Count) const 
#line 1365
{ 
#line 1366
return this->do_length(_State, _First1, _Last1, _Count); 
#line 1367
} 
#line 1369
static locale::id id; 
#line 1371
explicit codecvt(size_t _Refs = 0) : codecvt_base(_Refs), _Maxcode((4294967295U)), _Mode(_Consume_header) 
#line 1373
{ 
#line 1374
{ _Locinfo _Lobj; 
#line 1375
this->_Init(_Lobj); 
#line 1376
} 
#line 1377
} 
#line 1379
codecvt(const _Locinfo &_Lobj, size_t _Refs = 0) : codecvt_base(_Refs), _Maxcode((4294967295U)), _Mode(_Consume_header) 
#line 1381
{ 
#line 1382
this->_Init(_Lobj); 
#line 1383
} 
#line 1385
codecvt(const _Locinfo &_Lobj, unsigned long _Maxcode_arg, _Codecvt_mode 
#line 1386
_Mode_arg, size_t _Refs = 0) : codecvt_base(_Refs), _Maxcode(_Maxcode_arg), _Mode(_Mode_arg) 
#line 1388
{ 
#line 1389
this->_Init(_Lobj); 
#line 1390
} 
#line 1392
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *
#line 1393
_Ploc = 0) 
#line 1394
{ 
#line 1395
if ((_Ppf != (0)) && ((*_Ppf) == (0))) { 
#line 1396
(*_Ppf) = (new std::codecvt< char32_t, char, _Mbstatet> (((_Locinfo)(_Ploc->c_str())))); }  
#line 1398
return 2; 
#line 1399
} 
#line 1402
protected: virtual ~codecvt() noexcept 
#line 1403
{ 
#line 1404
} 
#line 1406
void _Init(const _Locinfo &) 
#line 1407
{ 
#line 1408
} 
#line 1410
virtual result do_in(_Statype &_State, const _Byte *
#line 1411
_First1, const _Byte *_Last1, const _Byte *&_Mid1, _Elem *
#line 1412
_First2, _Elem *_Last2, _Elem *&_Mid2) const 
#line 1413
{ 
#line 1414
char *_Pstate = (char *)(&_State); 
#line 1415
_Mid1 = _First1; 
#line 1416
_Mid2 = _First2; 
#line 1418
for (; (_Mid1 != _Last1) && (_Mid2 != _Last2);) 
#line 1419
{ 
#line 1420
unsigned char _By = (unsigned char)(*_Mid1); 
#line 1421
unsigned long _Ch; 
#line 1422
int _Nextra; 
#line 1424
if (_By < 128) { 
#line 1425
(_Ch = _By), (_Nextra = 0); } else { 
#line 1426
if (_By < 192) 
#line 1427
{ 
#line 1428
++_Mid1; 
#line 1429
return _Mybase::error; 
#line 1430
} else { 
#line 1431
if (_By < 224) { 
#line 1432
(_Ch = (_By & 31)), (_Nextra = 1); } else { 
#line 1433
if (_By < 240) { 
#line 1434
(_Ch = (_By & 15)), (_Nextra = 2); } else { 
#line 1435
if (_By < 248) { 
#line 1436
(_Ch = (_By & 7)), (_Nextra = 3); } else { 
#line 1438
(_Ch = (_By & 3)), (_Nextra = ((_By < 252) ? 4 : 5)); }  }  }  }  }  
#line 1440
if (_Nextra == 0) { 
#line 1441
++_Mid1; } else { 
#line 1442
if ((_Last1 - _Mid1) < (_Nextra + 1)) { 
#line 1443
break; } else { 
#line 1445
for (++_Mid1; 0 < _Nextra; (--_Nextra), (++_Mid1)) { 
#line 1446
if (((_By = ((unsigned char)(*_Mid1))) < 128) || (192 <= _By)) { 
#line 1447
return _Mybase::error; } else { 
#line 1449
_Ch = ((_Ch << 6) | (_By & 63)); }  }  }  }  
#line 1451
if ((*_Pstate) == 0) 
#line 1452
{ 
#line 1453
(*_Pstate) = (1); 
#line 1455
if ((((_Mode) & (_Consume_header)) != 0) && (_Ch == (65279))) 
#line 1456
{ 
#line 1457
result _Ans = this->do_in(_State, _Mid1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1460
if (_Ans == (_Mybase::partial)) 
#line 1461
{ 
#line 1462
(*_Pstate) = (0); 
#line 1463
_Mid1 = _First1; 
#line 1464
}  
#line 1465
return _Ans; 
#line 1466
}  
#line 1467
}  
#line 1469
if ((_Maxcode) < _Ch) { 
#line 1470
return _Mybase::error; }  
#line 1471
(*(_Mid2++)) = ((_Elem)_Ch); 
#line 1472
}  
#line 1474
return (_First1 == _Mid1) ? _Mybase::partial : _Mybase::ok; 
#line 1475
} 
#line 1477
virtual result do_out(_Statype &_State, const _Elem *
#line 1478
_First1, const _Elem *_Last1, const _Elem *&_Mid1, _Byte *
#line 1479
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1480
{ 
#line 1481
char *_Pstate = (char *)(&_State); 
#line 1482
_Mid1 = _First1; 
#line 1483
_Mid2 = _First2; 
#line 1485
for (; (_Mid1 != _Last1) && (_Mid2 != _Last2);) 
#line 1486
{ 
#line 1487
_Byte _By; 
#line 1488
int _Nextra; 
#line 1489
unsigned long _Ch = (unsigned long)(*_Mid1); 
#line 1491
if ((_Maxcode) < _Ch) { 
#line 1492
return _Mybase::error; }  
#line 1494
if (_Ch < (128)) { 
#line 1495
(_By = ((_Byte)_Ch)), (_Nextra = 0); } else { 
#line 1496
if (_Ch < (2048)) { 
#line 1497
(_By = ((_Byte)((192) | (_Ch >> 6)))), (_Nextra = 1); } else { 
#line 1498
if (_Ch < (65536)) { 
#line 1499
(_By = ((_Byte)((224) | (_Ch >> 12)))), (_Nextra = 2); } else { 
#line 1500
if (_Ch < (2097152)) { 
#line 1501
(_By = ((_Byte)((240) | (_Ch >> 18)))), (_Nextra = 3); } else { 
#line 1502
if (_Ch < (67108864)) { 
#line 1503
(_By = ((_Byte)((248) | (_Ch >> 24)))), (_Nextra = 4); } else { 
#line 1505
(_By = ((_Byte)((252) | ((_Ch >> 30) & (3))))), (_Nextra = 5); }  }  }  }  }  
#line 1507
if ((*_Pstate) == 0) 
#line 1508
{ 
#line 1509
(*_Pstate) = (1); 
#line 1510
if (((_Mode) & (_Generate_header)) == 0) { 
#line 1511
; } else { 
#line 1512
if ((_Last2 - _Mid2) < ((3 + 1) + _Nextra)) { 
#line 1513
return _Mybase::partial; } else 
#line 1515
{ 
#line 1516
(*(_Mid2++)) = ((_Byte)((unsigned char)239)); 
#line 1517
(*(_Mid2++)) = ((_Byte)((unsigned char)187)); 
#line 1518
(*(_Mid2++)) = ((_Byte)((unsigned char)191)); 
#line 1519
}  }  
#line 1520
}  
#line 1522
if ((_Last2 - _Mid2) < (1 + _Nextra)) { 
#line 1523
break; }  
#line 1525
++_Mid1; 
#line 1526
for ((*(_Mid2++)) = _By; 0 < _Nextra;) { 
#line 1527
(*(_Mid2++)) = ((_Byte)(((_Ch >> (6 * (--_Nextra))) & (63)) | (128))); }  
#line 1528
}  
#line 1529
return (_First1 == _Mid1) ? _Mybase::partial : _Mybase::ok; 
#line 1530
} 
#line 1532
virtual result do_unshift(_Statype &, _Byte *
#line 1533
_First2, _Byte *, _Byte *&_Mid2) const 
#line 1534
{ 
#line 1535
_Mid2 = _First2; 
#line 1536
return _Mybase::ok; 
#line 1537
} 
#line 1539
virtual int do_length(_Statype &_State, const _Byte *_First1, const _Byte *
#line 1540
_Last1, size_t _Count) const 
#line 1541
{ 
#line 1542
int _Wchars = 0; 
#line 1543
_Statype _Mystate = _State; 
#line 1545
for (; (((size_t)_Wchars) < _Count) && (_First1 != _Last1);) 
#line 1546
{ 
#line 1547
const _Byte *_Mid1; 
#line 1548
_Elem *_Mid2; 
#line 1549
_Elem _Ch; 
#line 1551
switch (this->do_in(_Mystate, _First1, _Last1, _Mid1, &_Ch, (&_Ch) + 1, _Mid2)) 
#line 1553
{ 
#line 1554
case _Mybase::noconv:  
#line 1555
return (int)(_Wchars + ((int)(_Last1 - _First1))); 
#line 1557
case _Mybase::ok:  
#line 1558
if (_Mid2 == ((&_Ch) + 1)) { 
#line 1559
++_Wchars; }  
#line 1560
_First1 = _Mid1; 
#line 1561
break; 
#line 1563
default:  
#line 1564
return (int)_Wchars; 
#line 1565
}  
#line 1566
}  
#line 1568
return (int)_Wchars; 
#line 1569
} 
#line 1571
virtual bool do_always_noconv() const noexcept 
#line 1572
{ 
#line 1573
return false; 
#line 1574
} 
#line 1576
virtual int do_max_length() const noexcept 
#line 1577
{ 
#line 1578
return (((_Mode) & ((_Consume_header) | (_Generate_header))) != 0) ? 9 : 6; 
#line 1580
} 
#line 1582
virtual int do_encoding() const noexcept 
#line 1583
{ 
#line 1584
return (((_Mode) & ((_Consume_header) | (_Generate_header))) != 0) ? -1 : 0; 
#line 1586
} 
#line 1589
private: unsigned long _Maxcode; 
#line 1590
_Codecvt_mode _Mode; 
#line 1591
}; 
#line 1595
template<> class __declspec(dllimport) codecvt< __wchar_t, char, _Mbstatet>  : public codecvt_base { 
#line 1599
public: typedef __wchar_t _Elem; 
#line 1600
typedef char _Byte; 
#line 1601
typedef _Mbstatet _Statype; 
#line 1602
typedef _Elem intern_type; 
#line 1603
typedef _Byte extern_type; 
#line 1604
typedef _Statype state_type; 
#line 1606
result in(_Statype &_State, const _Byte *
#line 1607
_First1, const _Byte *_Last1, const _Byte *&_Mid1, _Elem *
#line 1608
_First2, _Elem *_Last2, _Elem *&_Mid2) const 
#line 1609
{ 
#line 1610
return this->do_in(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1612
} 
#line 1614
result out(_Statype &_State, const _Elem *
#line 1615
_First1, const _Elem *_Last1, const _Elem *&_Mid1, _Byte *
#line 1616
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1617
{ 
#line 1618
return this->do_out(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1620
} 
#line 1622
result unshift(_Statype &_State, _Byte *
#line 1623
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1624
{ 
#line 1625
return this->do_unshift(_State, _First2, _Last2, _Mid2); 
#line 1627
} 
#line 1629
int length(_Statype &_State, const _Byte *_First1, const _Byte *
#line 1630
_Last1, size_t _Count) const 
#line 1631
{ 
#line 1632
return this->do_length(_State, _First1, _Last1, _Count); 
#line 1633
} 
#line 1635
static locale::id id; 
#line 1637
explicit codecvt(size_t _Refs = 0) : codecvt_base(_Refs) 
#line 1639
{ 
#line 1640
{ _Locinfo _Lobj; 
#line 1641
this->_Init(_Lobj); 
#line 1642
} 
#line 1643
} 
#line 1645
codecvt(const _Locinfo &_Lobj, size_t _Refs = 0) : codecvt_base(_Refs) 
#line 1647
{ 
#line 1648
this->_Init(_Lobj); 
#line 1649
} 
#line 1651
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *
#line 1652
_Ploc = 0) 
#line 1653
{ 
#line 1654
if ((_Ppf != (0)) && ((*_Ppf) == (0))) { 
#line 1655
(*_Ppf) = (new std::codecvt< __wchar_t, char, _Mbstatet> (((_Locinfo)(_Ploc->c_str())))); }  
#line 1657
return 2; 
#line 1658
} 
#line 1661
protected: virtual ~codecvt() noexcept 
#line 1662
{ 
#line 1663
} 
#line 1665
void _Init(const _Locinfo &_Lobj) 
#line 1666
{ 
#line 1667
(_Cvt) = _Lobj._Getcvt(); 
#line 1668
} 
#line 1670
virtual result do_in(_Statype &_State, const _Byte *
#line 1671
_First1, const _Byte *_Last1, const _Byte *&_Mid1, _Elem *
#line 1672
_First2, _Elem *_Last2, _Elem *&_Mid2) const 
#line 1673
{ 
#line 1674
; 
#line 1675
; 
#line 1676
(_Mid1 = _First1), (_Mid2 = _First2); 
#line 1677
result _Ans = (_Mid1 == _Last1) ? ok : partial; 
#line 1678
int _Bytes; 
#line 1680
while ((_Mid1 != _Last1) && (_Mid2 != _Last2)) { 
#line 1681
switch (_Bytes = _Mbrtowc(_Mid2, _Mid1, _Last1 - _Mid1, &_State, &(_Cvt))) 
#line 1683
{ 
#line 1684
case -2:  
#line 1685
_Mid1 = _Last1; 
#line 1686
return _Ans; 
#line 1688
case -1:  
#line 1689
return error; 
#line 1691
case 0:  
#line 1692
if ((*_Mid2) == ((_Elem)0)) { 
#line 1693
_Bytes = (((int)::strlen(_Mid1)) + 1); }  
#line 1696
default:  
#line 1697
if (_Bytes == (-3)) { 
#line 1698
_Bytes = 0; }  
#line 1699
_Mid1 += _Bytes; 
#line 1700
++_Mid2; 
#line 1701
_Ans = (ok); 
#line 1702
}  }  
#line 1703
return _Ans; 
#line 1704
} 
#line 1706
virtual result do_out(_Statype &_State, const _Elem *
#line 1707
_First1, const _Elem *_Last1, const _Elem *&_Mid1, _Byte *
#line 1708
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1709
{ 
#line 1710
; 
#line 1711
; 
#line 1712
(_Mid1 = _First1), (_Mid2 = _First2); 
#line 1713
int _Bytes; 
#line 1715
while ((_Mid1 != _Last1) && (_Mid2 != _Last2)) { 
#line 1716
if (((int)5) <= (_Last2 - _Mid2)) { 
#line 1717
if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1, &_State, &(_Cvt))) < 0) { 
#line 1719
return error; } else { 
#line 1721
(++_Mid1), (_Mid2 += _Bytes); }  } else 
#line 1723
{ 
#line 1724
_Byte _Buf[5]; 
#line 1725
_Statype _Stsave = _State; 
#line 1727
if ((_Bytes = _Wcrtomb(_Buf, *_Mid1, &_State, &(_Cvt))) < 0) { 
#line 1729
return error; } else { 
#line 1730
if ((_Last2 - _Mid2) < _Bytes) 
#line 1731
{ 
#line 1732
_State = _Stsave; 
#line 1733
break; 
#line 1734
} else 
#line 1736
{ 
#line 1737
::memcpy(_Mid2, _Buf, _Bytes); 
#line 1738
(++_Mid1), (_Mid2 += _Bytes); 
#line 1739
}  }  
#line 1740
}  }  
#line 1741
return (_Mid1 == _Last1) ? ok : partial; 
#line 1742
} 
#line 1744
virtual result do_unshift(_Statype &_State, _Byte *
#line 1745
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1746
{ 
#line 1747
; 
#line 1748
_Mid2 = _First2; 
#line 1749
result _Ans = (ok); 
#line 1750
int _Bytes; 
#line 1751
_Byte _Buf[5]; 
#line 1752
_Statype _Stsave = _State; 
#line 1754
if ((_Bytes = _Wcrtomb(_Buf, L'\x0', &_State, &(_Cvt))) <= 0) { 
#line 1755
_Ans = (error); } else { 
#line 1756
if ((_Last2 - _Mid2) < (--_Bytes)) 
#line 1757
{ 
#line 1758
_State = _Stsave; 
#line 1759
_Ans = (partial); 
#line 1760
} else { 
#line 1761
if (0 < _Bytes) 
#line 1762
{ 
#line 1763
::memcpy(_Mid2, _Buf, _Bytes); 
#line 1764
_Mid2 += _Bytes; 
#line 1765
}  }  }  
#line 1766
return _Ans; 
#line 1767
} 
#line 1769
virtual int do_length(_Statype &_State, const _Byte *_First1, const _Byte *
#line 1770
_Last1, size_t _Count) const 
#line 1771
{ 
#line 1772
; 
#line 1773
int _Wchars; 
#line 1774
const _Byte *_Mid1; 
#line 1775
_Statype _Mystate = _State; 
#line 1777
for ((_Wchars = 0), (_Mid1 = _First1); (((size_t)_Wchars) < _Count) && (_Mid1 != _Last1);) 
#line 1779
{ 
#line 1780
int _Bytes; 
#line 1781
_Elem _Ch; 
#line 1783
switch (_Bytes = _Mbrtowc(&_Ch, _Mid1, _Last1 - _Mid1, &_Mystate, &(_Cvt))) 
#line 1785
{ 
#line 1786
case -2:  
#line 1787
return _Wchars; 
#line 1789
case -1:  
#line 1790
return _Wchars; 
#line 1792
case 0:  
#line 1793
if (_Ch == ((_Elem)0)) { 
#line 1794
_Bytes = (((int)::strlen(_Mid1)) + 1); }  
#line 1797
default:  
#line 1798
if (_Bytes == (-3)) { 
#line 1799
_Bytes = 0; }  
#line 1800
_Mid1 += _Bytes; 
#line 1801
++_Wchars; 
#line 1802
}  
#line 1803
}  
#line 1804
return _Wchars; 
#line 1805
} 
#line 1807
virtual bool do_always_noconv() const noexcept 
#line 1808
{ 
#line 1809
return false; 
#line 1810
} 
#line 1812
virtual int do_max_length() const noexcept 
#line 1813
{ 
#line 1814
return 5; 
#line 1815
} 
#line 1817
virtual int do_encoding() const noexcept 
#line 1818
{ 
#line 1819
return 0; 
#line 1820
} 
#line 1823
private: _Locinfo::_Cvtvec _Cvt; 
#line 1824
}; 
#line 1829
template<> class __declspec(dllimport) codecvt< unsigned short, char, _Mbstatet>  : public codecvt_base { 
#line 1833
public: typedef unsigned short _Elem; 
#line 1834
typedef char _Byte; 
#line 1835
typedef _Mbstatet _Statype; 
#line 1836
typedef _Elem intern_type; 
#line 1837
typedef _Byte extern_type; 
#line 1838
typedef _Statype state_type; 
#line 1840
result in(_Statype &_State, const _Byte *
#line 1841
_First1, const _Byte *_Last1, const _Byte *&_Mid1, _Elem *
#line 1842
_First2, _Elem *_Last2, _Elem *&_Mid2) const 
#line 1843
{ 
#line 1844
return this->do_in(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1846
} 
#line 1848
result out(_Statype &_State, const _Elem *
#line 1849
_First1, const _Elem *_Last1, const _Elem *&_Mid1, _Byte *
#line 1850
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1851
{ 
#line 1852
return this->do_out(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1854
} 
#line 1856
result unshift(_Statype &_State, _Byte *
#line 1857
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1858
{ 
#line 1859
return this->do_unshift(_State, _First2, _Last2, _Mid2); 
#line 1861
} 
#line 1863
int length(_Statype &_State, const _Byte *_First1, const _Byte *
#line 1864
_Last1, size_t _Count) const 
#line 1865
{ 
#line 1866
return this->do_length(_State, _First1, _Last1, _Count); 
#line 1867
} 
#line 1869
static locale::id id; 
#line 1871
explicit codecvt(size_t _Refs = 0) : codecvt_base(_Refs) 
#line 1873
{ 
#line 1874
{ _Locinfo _Lobj; 
#line 1875
this->_Init(_Lobj); 
#line 1876
} 
#line 1877
} 
#line 1879
codecvt(const _Locinfo &_Lobj, size_t _Refs = 0) : codecvt_base(_Refs) 
#line 1881
{ 
#line 1882
this->_Init(_Lobj); 
#line 1883
} 
#line 1885
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *
#line 1886
_Ploc = 0) 
#line 1887
{ 
#line 1888
if ((_Ppf != (0)) && ((*_Ppf) == (0))) { 
#line 1889
(*_Ppf) = (new std::codecvt< unsigned short, char, _Mbstatet> (((_Locinfo)(_Ploc->c_str())))); }  
#line 1891
return 2; 
#line 1892
} 
#line 1895
protected: virtual ~codecvt() noexcept 
#line 1896
{ 
#line 1897
} 
#line 1899
void _Init(const _Locinfo &_Lobj) 
#line 1900
{ 
#line 1901
(_Cvt) = _Lobj._Getcvt(); 
#line 1902
} 
#line 1904
virtual result do_in(_Statype &_State, const _Byte *
#line 1905
_First1, const _Byte *_Last1, const _Byte *&_Mid1, _Elem *
#line 1906
_First2, _Elem *_Last2, _Elem *&_Mid2) const 
#line 1907
{ 
#line 1908
; 
#line 1909
; 
#line 1910
(_Mid1 = _First1), (_Mid2 = _First2); 
#line 1911
result _Ans = (_Mid1 == _Last1) ? ok : partial; 
#line 1912
int _Bytes; 
#line 1914
while ((_Mid1 != _Last1) && (_Mid2 != _Last2)) { 
#line 1915
switch (_Bytes = _Mbrtowc((__wchar_t *)_Mid2, _Mid1, _Last1 - _Mid1, &_State, &(_Cvt))) 
#line 1917
{ 
#line 1918
case -2:  
#line 1919
_Mid1 = _Last1; 
#line 1920
return _Ans; 
#line 1922
case -1:  
#line 1923
return error; 
#line 1925
case 0:  
#line 1926
if ((*_Mid2) == ((_Elem)0)) { 
#line 1927
_Bytes = (((int)::strlen(_Mid1)) + 1); }  
#line 1930
default:  
#line 1931
if (_Bytes == (-3)) { 
#line 1932
_Bytes = 0; }  
#line 1933
_Mid1 += _Bytes; 
#line 1934
++_Mid2; 
#line 1935
_Ans = (ok); 
#line 1936
}  }  
#line 1937
return _Ans; 
#line 1938
} 
#line 1940
virtual result do_out(_Statype &_State, const _Elem *
#line 1941
_First1, const _Elem *_Last1, const _Elem *&_Mid1, _Byte *
#line 1942
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1943
{ 
#line 1944
; 
#line 1945
; 
#line 1946
(_Mid1 = _First1), (_Mid2 = _First2); 
#line 1947
int _Bytes; 
#line 1949
while ((_Mid1 != _Last1) && (_Mid2 != _Last2)) { 
#line 1950
if (((int)5) <= (_Last2 - _Mid2)) { 
#line 1951
if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1, &_State, &(_Cvt))) < 0) { 
#line 1953
return error; } else { 
#line 1955
(++_Mid1), (_Mid2 += _Bytes); }  } else 
#line 1957
{ 
#line 1958
_Byte _Buf[5]; 
#line 1959
_Statype _Stsave = _State; 
#line 1961
if ((_Bytes = _Wcrtomb(_Buf, *_Mid1, &_State, &(_Cvt))) < 0) { 
#line 1963
return error; } else { 
#line 1964
if ((_Last2 - _Mid2) < _Bytes) 
#line 1965
{ 
#line 1966
_State = _Stsave; 
#line 1967
break; 
#line 1968
} else 
#line 1970
{ 
#line 1971
::memcpy(_Mid2, _Buf, _Bytes); 
#line 1972
(++_Mid1), (_Mid2 += _Bytes); 
#line 1973
}  }  
#line 1974
}  }  
#line 1975
return (_Mid1 == _Last1) ? ok : partial; 
#line 1976
} 
#line 1978
virtual result do_unshift(_Statype &_State, _Byte *
#line 1979
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1980
{ 
#line 1981
; 
#line 1982
_Mid2 = _First2; 
#line 1983
result _Ans = (ok); 
#line 1984
int _Bytes; 
#line 1985
_Byte _Buf[5]; 
#line 1986
_Statype _Stsave = _State; 
#line 1988
if ((_Bytes = _Wcrtomb(_Buf, L'\x0', &_State, &(_Cvt))) <= 0) { 
#line 1989
_Ans = (error); } else { 
#line 1990
if ((_Last2 - _Mid2) < (--_Bytes)) 
#line 1991
{ 
#line 1992
_State = _Stsave; 
#line 1993
_Ans = (partial); 
#line 1994
} else { 
#line 1995
if (0 < _Bytes) 
#line 1996
{ 
#line 1997
::memcpy(_Mid2, _Buf, _Bytes); 
#line 1998
_Mid2 += _Bytes; 
#line 1999
}  }  }  
#line 2000
return _Ans; 
#line 2001
} 
#line 2003
virtual int do_length(_Statype &_State, const _Byte *_First1, const _Byte *
#line 2004
_Last1, size_t _Count) const 
#line 2005
{ 
#line 2006
; 
#line 2007
int _Wchars; 
#line 2008
const _Byte *_Mid1; 
#line 2009
_Statype _Mystate = _State; 
#line 2011
for ((_Wchars = 0), (_Mid1 = _First1); (((size_t)_Wchars) < _Count) && (_Mid1 != _Last1);) 
#line 2013
{ 
#line 2014
int _Bytes; 
#line 2015
_Elem _Ch; 
#line 2017
switch (_Bytes = _Mbrtowc((__wchar_t *)(&_Ch), _Mid1, _Last1 - _Mid1, &_Mystate, &(_Cvt))) 
#line 2019
{ 
#line 2020
case -2:  
#line 2021
return _Wchars; 
#line 2023
case -1:  
#line 2024
return _Wchars; 
#line 2026
case 0:  
#line 2027
if (_Ch == ((_Elem)0)) { 
#line 2028
_Bytes = (((int)::strlen(_Mid1)) + 1); }  
#line 2031
default:  
#line 2032
if (_Bytes == (-3)) { 
#line 2033
_Bytes = 0; }  
#line 2034
_Mid1 += _Bytes; 
#line 2035
++_Wchars; 
#line 2036
}  
#line 2037
}  
#line 2038
return _Wchars; 
#line 2039
} 
#line 2041
virtual bool do_always_noconv() const noexcept 
#line 2042
{ 
#line 2043
return false; 
#line 2044
} 
#line 2046
virtual int do_max_length() const noexcept 
#line 2047
{ 
#line 2048
return 5; 
#line 2049
} 
#line 2051
virtual int do_encoding() const noexcept 
#line 2052
{ 
#line 2053
return 0; 
#line 2054
} 
#line 2057
private: _Locinfo::_Cvtvec _Cvt; 
#line 2058
}; 
#line 2062 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template < class _Elem,
 class _Byte,
 class _Statype >
 class codecvt_byname
  : public codecvt < _Elem, _Byte, _Statype >
 {
public :
 explicit codecvt_byname ( const char * _Locname, size_t _Refs = 0 )
  : codecvt < _Elem, _Byte, _Statype > ( _Locinfo ( _Locname ), _Refs )
  {
  }

 explicit codecvt_byname ( const string & _Str, size_t _Refs = 0 )
  : codecvt < _Elem, _Byte, _Statype > ( _Locinfo ( _Str . c_str ( ) ), _Refs )
  {
  }

protected :
 virtual ~ codecvt_byname ( ) noexcept
  {
  }
 };
#line 2086
#pragma warning(push)
#pragma warning(disable: 4275)
#line 2089
struct __declspec(dllimport) ctype_base : public locale::facet { 
#line 2093
enum { 
#line 2094
alnum = 263, alpha = 259, 
#line 2095
cntrl = 32, digit = 4, graph = 279, 
#line 2096
lower = 2, print = 471, 
#line 2097
punct = 16, space = 72, upper = 1, 
#line 2098
xdigit = 128, blank = 72}; 
#line 2099
typedef short mask; 
#line 2101
ctype_base(size_t _Refs = 0) : locale::facet(_Refs) 
#line 2103
{ 
#line 2104
} 
#line 2106
virtual ~ctype_base() noexcept 
#line 2107
{ 
#line 2108
} 
#line 2109
}; 
#line 2111
#pragma warning(pop)
#line 2114
template < class _Elem >
 class ctype
  : public ctype_base
 {
public :
 typedef _Elem char_type;

 bool is ( mask _Maskval, _Elem _Ch ) const
  {
  return ( do_is ( _Maskval, _Ch ) );
  }

 const _Elem * is ( const _Elem * _First, const _Elem * _Last,
  mask * _Dest ) const
  {
  return ( do_is ( _First, _Last, _Dest ) );
  }

 const _Elem * scan_is ( mask _Maskval, const _Elem * _First,
  const _Elem * _Last ) const
  {
  return ( do_scan_is ( _Maskval, _First, _Last ) );
  }

 const _Elem * scan_not ( mask _Maskval, const _Elem * _First,
  const _Elem * _Last ) const
  {
  return ( do_scan_not ( _Maskval, _First, _Last ) );
  }

 _Elem tolower ( _Elem _Ch ) const
  {
  return ( do_tolower ( _Ch ) );
  }

 const _Elem * tolower ( _Elem * _First, const _Elem * _Last ) const
  {
  return ( do_tolower ( _First, _Last ) );
  }

 _Elem toupper ( _Elem _Ch ) const
  {
  return ( do_toupper ( _Ch ) );
  }

 const _Elem * toupper ( _Elem * _First, const _Elem * _Last ) const
  {
  return ( do_toupper ( _First, _Last ) );
  }

 _Elem widen ( char _Byte ) const
  {
  return ( do_widen ( _Byte ) );
  }

 const char * widen ( const char * _First, const char * _Last,
  _Elem * _Dest ) const
  {
  return ( do_widen ( _First, _Last, _Dest ) );
  }

 char narrow ( _Elem _Ch, char _Dflt = '\000' ) const
  {
  return ( do_narrow ( _Ch, _Dflt ) );
  }

 const _Elem * narrow ( const _Elem * _First, const _Elem * _Last,
  char _Dflt, char * _Dest ) const
  {
  return ( do_narrow ( _First, _Last, _Dflt, _Dest ) );
  }

  static locale :: id id;

 explicit ctype ( size_t _Refs = 0 )
  : ctype_base ( _Refs )
  {
  { _Locinfo _Lobj;
   _Init ( _Lobj );
  }
  }

  ctype ( const _Locinfo & _Lobj, size_t _Refs = 0 )
  : ctype_base ( _Refs )
  {
  _Init ( _Lobj );
  }

 static size_t __cdecl _Getcat ( const locale :: facet * * _Ppf = 0,
  const locale * _Ploc = 0 )
  {
  if ( _Ppf != 0 && * _Ppf == 0 )
   * _Ppf = new ctype < _Elem > (
    _Locinfo ( _Ploc -> c_str ( ) ) );
  return ( 2 );
  }

protected :
 virtual ~ ctype ( ) noexcept
  {
  if ( _Ctype . _Delfl )
   :: free ( ( void * ) _Ctype . _Table );

  :: free ( _Ctype . _LocaleName );
  }

 void _Init ( const _Locinfo & _Lobj )
  {
  _Ctype = _Lobj . _Getctype ( );
  _Cvt = _Lobj . _Getcvt ( );
  }

 virtual bool do_is ( mask _Maskval, _Elem _Ch ) const
  {
  return ( ( _Ctype . _Table [ ( unsigned char ) narrow ( _Ch ) ]
   & _Maskval ) != 0 );
  }

 virtual const _Elem * do_is ( const _Elem * _First, const _Elem * _Last,
  mask * _Dest ) const
  {
  ;
  for (; _First != _Last; ++ _First, ++ _Dest )
   * _Dest = _Ctype . _Table [ ( unsigned char ) narrow ( * _First ) ];
  return ( _First );
  }

 virtual const _Elem * do_scan_is ( mask _Maskval,
  const _Elem * _First, const _Elem * _Last ) const
  {
  ;
  for (; _First != _Last && ! is ( _Maskval, * _First ); ++ _First )
   ;
  return ( _First );
  }

 virtual const _Elem * do_scan_not ( mask _Maskval,
  const _Elem * _First, const _Elem * _Last ) const
  {
  ;
  for (; _First != _Last && is ( _Maskval, * _First ); ++ _First )
   ;
  return ( _First );
  }

 virtual _Elem do_tolower ( _Elem _Ch ) const
  {
  unsigned char _Byte = ( unsigned char ) narrow ( _Ch, '\000' );
  if ( _Byte == '\000' )
   return ( _Ch );
  else
   return ( widen ( ( char ) _Tolower ( _Byte, & _Ctype ) ) );
  }

 virtual const _Elem * do_tolower ( _Elem * _First,
  const _Elem * _Last ) const
  {
  ;
  for (; _First != _Last; ++ _First )
   {
   unsigned char _Byte = ( unsigned char ) narrow ( * _First, '\000' );
   if ( _Byte != '\000' )
    * _First = ( widen ( ( char ) _Tolower ( _Byte, & _Ctype ) ) );
   }
  return ( ( const _Elem * ) _First );
  }

 virtual _Elem do_toupper ( _Elem _Ch ) const
  {
  unsigned char _Byte = ( unsigned char ) narrow ( _Ch, '\000' );
  if ( _Byte == '\000' )
   return ( _Ch );
  else
   return ( widen ( ( char ) _Toupper ( _Byte, & _Ctype ) ) );
  }

 virtual const _Elem * do_toupper ( _Elem * _First,
  const _Elem * _Last ) const
  {
  ;
  for (; _First != _Last; ++ _First )
   {
   unsigned char _Byte = ( unsigned char ) narrow ( * _First, '\000' );
   if ( _Byte != '\000' )
    * _First = ( widen ( ( char ) _Toupper ( _Byte, & _Ctype ) ) );
   }
  return ( ( const _Elem * ) _First );
  }

 virtual _Elem do_widen ( char _Byte ) const
  {
  return ( _Maklocchr ( _Byte, ( _Elem * ) 0, _Cvt ) );
  }

 virtual const char * do_widen ( const char * _First,
  const char * _Last, _Elem * _Dest ) const
  {
  ;
  for (; _First != _Last; ++ _First, ++ _Dest )
   * _Dest = _Maklocchr ( * _First, ( _Elem * ) 0, _Cvt );
  return ( _First );
  }

 char _Donarrow ( _Elem _Ch, char _Dflt ) const
  {
  char _Byte;
  if ( _Ch == ( _Elem ) 0 )
   return ( '\000' );
  else if ( ( _Byte = _Maklocbyte ( ( _Elem ) _Ch, _Cvt ) ) == '\000' )
   return ( _Dflt );
  else
   return ( _Byte );
  }

 virtual char do_narrow ( _Elem _Ch, char _Dflt ) const
  {
  return ( _Donarrow ( _Ch, _Dflt ) );
  }

 virtual const _Elem * do_narrow ( const _Elem * _First,
  const _Elem * _Last, char _Dflt, char * _Dest ) const
  {
  ;
  for (; _First != _Last; ++ _First, ++ _Dest )
   * _Dest = _Donarrow ( * _First, _Dflt );
  return ( _First );
  }

private :
 _Locinfo :: _Ctypevec _Ctype;
 _Locinfo :: _Cvtvec _Cvt;
 };
#line 2348
template< class _Elem> locale::id 
#line 2349
ctype< _Elem> ::id; 
#line 2353
template<> class __declspec(dllimport) ctype< char>  : public ctype_base { 
#line 2356
typedef std::ctype< char>  _Myt; 
#line 2359
public: typedef char _Elem; 
#line 2360
typedef _Elem char_type; 
#line 2362
bool is(mask _Maskval, _Elem _Ch) const 
#line 2363
{ 
#line 2364
return ((((_Ctype)._Table)[(unsigned char)_Ch]) & _Maskval) != 0; 
#line 2365
} 
#line 2367
const _Elem *is(const _Elem *_First, const _Elem *
#line 2368
_Last, mask *_Dest) const 
#line 2369
{ 
#line 2370
; 
#line 2371
for (; _First != _Last; (++_First), (++_Dest)) { 
#line 2372
(*_Dest) = (((_Ctype)._Table)[(unsigned char)(*_First)]); }  
#line 2373
return _First; 
#line 2374
} 
#line 2376
const _Elem *scan_is(mask _Maskval, const _Elem *
#line 2377
_First, const _Elem *_Last) const 
#line 2378
{ 
#line 2379
; 
#line 2380
for (; (_First != _Last) && (!this->is(_Maskval, *_First)); ++_First) { 
#line 2381
; }  
#line 2382
return _First; 
#line 2383
} 
#line 2385
const _Elem *scan_not(mask _Maskval, const _Elem *
#line 2386
_First, const _Elem *_Last) const 
#line 2387
{ 
#line 2388
; 
#line 2389
for (; (_First != _Last) && this->is(_Maskval, *_First); ++_First) { 
#line 2390
; }  
#line 2391
return _First; 
#line 2392
} 
#line 2394
_Elem tolower(_Elem _Ch) const 
#line 2395
{ 
#line 2396
return this->do_tolower(_Ch); 
#line 2397
} 
#line 2399
const _Elem *tolower(_Elem *_First, const _Elem *_Last) const 
#line 2400
{ 
#line 2401
return this->do_tolower(_First, _Last); 
#line 2402
} 
#line 2404
_Elem toupper(_Elem _Ch) const 
#line 2405
{ 
#line 2406
return this->do_toupper(_Ch); 
#line 2407
} 
#line 2409
const _Elem *toupper(_Elem *_First, const _Elem *_Last) const 
#line 2410
{ 
#line 2411
return this->do_toupper(_First, _Last); 
#line 2412
} 
#line 2414
_Elem widen(char _Byte) const 
#line 2415
{ 
#line 2416
return this->do_widen(_Byte); 
#line 2417
} 
#line 2419
const _Elem *widen(const char *_First, const char *_Last, _Elem *
#line 2420
_Dest) const 
#line 2421
{ 
#line 2422
return this->do_widen(_First, _Last, _Dest); 
#line 2423
} 
#line 2425
_Elem narrow(_Elem _Ch, char _Dflt = '\000') const 
#line 2426
{ 
#line 2427
return this->do_narrow(_Ch, _Dflt); 
#line 2428
} 
#line 2430
const _Elem *narrow(const _Elem *_First, const _Elem *_Last, char 
#line 2431
_Dflt, char *_Dest) const 
#line 2432
{ 
#line 2433
return this->do_narrow(_First, _Last, _Dflt, _Dest); 
#line 2434
} 
#line 2436
static locale::id id; 
#line 2438
explicit ctype(const mask *_Table = 0, bool 
#line 2439
_Deletetable = false, size_t 
#line 2440
_Refs = 0) : ctype_base(_Refs) 
#line 2442
{ 
#line 2443
{ _Locinfo _Lobj; 
#line 2444
this->_Init(_Lobj); 
#line 2445
} 
#line 2447
this->_Tidy(); 
#line 2448
if (_Table != (0)) 
#line 2449
{ 
#line 2450
((_Ctype)._Table) = _Table; 
#line 2451
((_Ctype)._Delfl) = (_Deletetable ? -1 : 0); 
#line 2452
} else 
#line 2454
{ 
#line 2455
((_Ctype)._Table) = classic_table(); 
#line 2456
((_Ctype)._Delfl) = 0; 
#line 2457
}  
#line 2458
} 
#line 2460
ctype(const _Locinfo &_Lobj, size_t _Refs = 0) : ctype_base(_Refs) 
#line 2462
{ 
#line 2463
this->_Init(_Lobj); 
#line 2464
} 
#line 2466
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *
#line 2467
_Ploc = 0) 
#line 2468
{ 
#line 2469
if ((_Ppf != (0)) && ((*_Ppf) == (0))) { 
#line 2470
(*_Ppf) = (new std::ctype< char> (((_Locinfo)(_Ploc->c_str())))); }  
#line 2472
return 2; 
#line 2473
} 
#line 2475
const mask *table() const noexcept 
#line 2476
{ 
#line 2477
return (_Ctype)._Table; 
#line 2478
} 
#line 2480
static const mask *__cdecl classic_table() noexcept 
#line 2481
{ 
#line 2482
const _Myt &_Ctype_fac = use_facet< std::ctype< char> > (locale::classic()); 
#line 2483
return _Ctype_fac.table(); 
#line 2484
} 
#line 2486
static const size_t table_size = (1 << 8); 
#line 2490
protected: virtual ~ctype() noexcept 
#line 2491
{ 
#line 2492
this->_Tidy(); 
#line 2493
} 
#line 2495
void _Init(const _Locinfo &_Lobj) 
#line 2496
{ 
#line 2497
(_Ctype) = _Lobj._Getctype(); 
#line 2498
} 
#line 2500
void _Tidy() 
#line 2501
{ 
#line 2502
if (0 < ((_Ctype)._Delfl)) { 
#line 2503
::free((void *)((_Ctype)._Table)); } else { 
#line 2504
if (((_Ctype)._Delfl) < 0) { 
#line 2505
delete [] ((_Ctype)._Table); }  }  
#line 2507
::free((_Ctype)._LocaleName); 
#line 2508
} 
#line 2510
virtual _Elem do_tolower(_Elem _Ch) const 
#line 2511
{ 
#line 2512
return (_Elem)_Tolower((unsigned char)_Ch, &(_Ctype)); 
#line 2513
} 
#line 2515
virtual const _Elem *do_tolower(_Elem *_First, const _Elem *
#line 2516
_Last) const 
#line 2517
{ 
#line 2518
; 
#line 2519
for (; _First != _Last; ++_First) { 
#line 2520
(*_First) = ((_Elem)_Tolower((unsigned char)(*_First), &(_Ctype))); }  
#line 2521
return (const _Elem *)_First; 
#line 2522
} 
#line 2524
virtual _Elem do_toupper(_Elem _Ch) const 
#line 2525
{ 
#line 2526
return (_Elem)_Toupper((unsigned char)_Ch, &(_Ctype)); 
#line 2527
} 
#line 2529
virtual const _Elem *do_toupper(_Elem *_First, const _Elem *
#line 2530
_Last) const 
#line 2531
{ 
#line 2532
; 
#line 2533
for (; _First != _Last; ++_First) { 
#line 2534
(*_First) = ((_Elem)_Toupper((unsigned char)(*_First), &(_Ctype))); }  
#line 2535
return (const _Elem *)_First; 
#line 2536
} 
#line 2538
virtual _Elem do_widen(char _Byte) const 
#line 2539
{ 
#line 2540
return _Byte; 
#line 2541
} 
#line 2543
virtual const _Elem *do_widen(const char *_First, const char *
#line 2544
_Last, _Elem *_Dest) const 
#line 2545
{ 
#line 2546
; 
#line 2547
::memcpy(_Dest, _First, _Last - _First); 
#line 2548
return _Last; 
#line 2549
} 
#line 2551
virtual _Elem do_narrow(_Elem _Ch, char) const 
#line 2552
{ 
#line 2553
return _Ch; 
#line 2554
} 
#line 2556
virtual const _Elem *do_narrow(const _Elem *_First, const _Elem *
#line 2557
_Last, char, char *_Dest) const 
#line 2558
{ 
#line 2559
; 
#line 2560
::memcpy(_Dest, _First, _Last - _First); 
#line 2561
return _Last; 
#line 2562
} 
#line 2565
private: _Locinfo::_Ctypevec _Ctype; 
#line 2566
}; 
#line 2570
template<> class __declspec(dllimport) ctype< __wchar_t>  : public ctype_base { 
#line 2573
typedef std::ctype< __wchar_t>  _Myt; 
#line 2576
public: typedef __wchar_t _Elem; 
#line 2577
typedef _Elem char_type; 
#line 2579
bool is(mask _Maskval, _Elem _Ch) const 
#line 2580
{ 
#line 2581
return this->do_is(_Maskval, _Ch); 
#line 2582
} 
#line 2584
const _Elem *is(const _Elem *_First, const _Elem *_Last, mask *
#line 2585
_Dest) const 
#line 2586
{ 
#line 2587
return this->do_is(_First, _Last, _Dest); 
#line 2588
} 
#line 2590
const _Elem *scan_is(mask _Maskval, const _Elem *_First, const _Elem *
#line 2591
_Last) const 
#line 2592
{ 
#line 2593
return this->do_scan_is(_Maskval, _First, _Last); 
#line 2594
} 
#line 2596
const _Elem *scan_not(mask _Maskval, const _Elem *_First, const _Elem *
#line 2597
_Last) const 
#line 2598
{ 
#line 2599
return this->do_scan_not(_Maskval, _First, _Last); 
#line 2600
} 
#line 2602
_Elem tolower(_Elem _Ch) const 
#line 2603
{ 
#line 2604
return this->do_tolower(_Ch); 
#line 2605
} 
#line 2607
const _Elem *tolower(_Elem *_First, const _Elem *_Last) const 
#line 2608
{ 
#line 2609
return this->do_tolower(_First, _Last); 
#line 2610
} 
#line 2612
_Elem toupper(_Elem _Ch) const 
#line 2613
{ 
#line 2614
return this->do_toupper(_Ch); 
#line 2615
} 
#line 2617
const _Elem *toupper(_Elem *_First, const _Elem *_Last) const 
#line 2618
{ 
#line 2619
return this->do_toupper(_First, _Last); 
#line 2620
} 
#line 2622
_Elem widen(char _Byte) const 
#line 2623
{ 
#line 2624
return this->do_widen(_Byte); 
#line 2625
} 
#line 2627
const char *widen(const char *_First, const char *_Last, _Elem *
#line 2628
_Dest) const 
#line 2629
{ 
#line 2630
return this->do_widen(_First, _Last, _Dest); 
#line 2631
} 
#line 2633
char narrow(_Elem _Ch, char _Dflt = '\000') const 
#line 2634
{ 
#line 2635
return this->do_narrow(_Ch, _Dflt); 
#line 2636
} 
#line 2638
const _Elem *narrow(const _Elem *_First, const _Elem *_Last, char 
#line 2639
_Dflt, char *_Dest) const 
#line 2640
{ 
#line 2641
return this->do_narrow(_First, _Last, _Dflt, _Dest); 
#line 2642
} 
#line 2644
static locale::id id; 
#line 2646
explicit ctype(size_t _Refs = 0) : ctype_base(_Refs) 
#line 2648
{ 
#line 2649
{ _Locinfo _Lobj; 
#line 2650
this->_Init(_Lobj); 
#line 2651
} 
#line 2652
} 
#line 2654
ctype(const _Locinfo &_Lobj, size_t _Refs = 0) : ctype_base(_Refs) 
#line 2656
{ 
#line 2657
this->_Init(_Lobj); 
#line 2658
} 
#line 2660
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *
#line 2661
_Ploc = 0) 
#line 2662
{ 
#line 2663
if ((_Ppf != (0)) && ((*_Ppf) == (0))) { 
#line 2664
(*_Ppf) = (new std::ctype< __wchar_t> (((_Locinfo)(_Ploc->c_str())))); }  
#line 2666
return 2; 
#line 2667
} 
#line 2670
protected: virtual ~ctype() noexcept 
#line 2671
{ 
#line 2672
if ((_Ctype)._Delfl) { 
#line 2673
::free((void *)((_Ctype)._Table)); }  
#line 2675
::free((_Ctype)._LocaleName); 
#line 2676
} 
#line 2678
void _Init(const _Locinfo &_Lobj) 
#line 2679
{ 
#line 2680
(_Ctype) = _Lobj._Getctype(); 
#line 2681
(_Cvt) = _Lobj._Getcvt(); 
#line 2682
} 
#line 2684
virtual bool do_is(mask _Maskval, _Elem _Ch) const 
#line 2685
{ 
#line 2686
return ((::_Getwctype(_Ch, &(_Ctype))) & _Maskval) != 0; 
#line 2687
} 
#line 2689
virtual const _Elem *do_is(const _Elem *_First, const _Elem *
#line 2690
_Last, mask *_Dest) const 
#line 2691
{ 
#line 2692
; 
#line 2693
return ::_Getwctypes(_First, _Last, _Dest, &(_Ctype)); 
#line 2694
} 
#line 2696
virtual const _Elem *do_scan_is(mask _Maskval, const _Elem *
#line 2697
_First, const _Elem *_Last) const 
#line 2698
{ 
#line 2699
; 
#line 2700
for (; (_First != _Last) && (!this->is(_Maskval, *_First)); ++_First) { 
#line 2701
; }  
#line 2702
return _First; 
#line 2703
} 
#line 2705
virtual const _Elem *do_scan_not(mask _Maskval, const _Elem *
#line 2706
_First, const _Elem *_Last) const 
#line 2707
{ 
#line 2708
; 
#line 2709
for (; (_First != _Last) && this->is(_Maskval, *_First); ++_First) { 
#line 2710
; }  
#line 2711
return _First; 
#line 2712
} 
#line 2714
virtual _Elem do_tolower(_Elem _Ch) const 
#line 2715
{ 
#line 2716
return _Towlower(_Ch, &(_Ctype)); 
#line 2717
} 
#line 2719
virtual const _Elem *do_tolower(_Elem *_First, const _Elem *
#line 2720
_Last) const 
#line 2721
{ 
#line 2722
; 
#line 2723
for (; _First != _Last; ++_First) { 
#line 2724
(*_First) = _Towlower(*_First, &(_Ctype)); }  
#line 2725
return (const _Elem *)_First; 
#line 2726
} 
#line 2728
virtual _Elem do_toupper(_Elem _Ch) const 
#line 2729
{ 
#line 2730
return _Towupper(_Ch, &(_Ctype)); 
#line 2731
} 
#line 2733
virtual const _Elem *do_toupper(_Elem *_First, const _Elem *
#line 2734
_Last) const 
#line 2735
{ 
#line 2736
; 
#line 2737
for (; _First != _Last; ++_First) { 
#line 2738
(*_First) = _Towupper(*_First, &(_Ctype)); }  
#line 2739
return (const _Elem *)_First; 
#line 2740
} 
#line 2742
_Elem _Dowiden(char _Byte) const 
#line 2743
{ 
#line 2744
mbstate_t _Mbst = {}; 
#line 2745
__wchar_t _Wc; 
#line 2746
return (_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst, &(_Cvt)) < 0) ? (__wchar_t)((wint_t)65535) : _Wc; 
#line 2748
} 
#line 2750
virtual _Elem do_widen(char _Byte) const 
#line 2751
{ 
#line 2752
return this->_Dowiden(_Byte); 
#line 2753
} 
#line 2755
virtual const char *do_widen(const char *_First, const char *
#line 2756
_Last, _Elem *_Dest) const 
#line 2757
{ 
#line 2758
; 
#line 2759
for (; _First != _Last; (++_First), (++_Dest)) { 
#line 2760
(*_Dest) = this->_Dowiden(*_First); }  
#line 2761
return _First; 
#line 2762
} 
#line 2764
char _Donarrow(_Elem _Ch, char _Dflt) const 
#line 2765
{ 
#line 2766
char _Buf[5]; 
#line 2767
mbstate_t _Mbst = {}; 
#line 2768
return (_Wcrtomb(_Buf, _Ch, &_Mbst, &(_Cvt)) != 1) ? _Dflt : ((_Buf)[0]); 
#line 2770
} 
#line 2772
virtual char do_narrow(_Elem _Ch, char _Dflt) const 
#line 2773
{ 
#line 2774
return this->_Donarrow(_Ch, _Dflt); 
#line 2775
} 
#line 2777
virtual const _Elem *do_narrow(const _Elem *_First, const _Elem *
#line 2778
_Last, char _Dflt, char *_Dest) const 
#line 2779
{ 
#line 2780
; 
#line 2781
for (; _First != _Last; (++_First), (++_Dest)) { 
#line 2782
(*_Dest) = this->_Donarrow(*_First, _Dflt); }  
#line 2783
return _First; 
#line 2784
} 
#line 2787
private: _Locinfo::_Ctypevec _Ctype; 
#line 2788
_Locinfo::_Cvtvec _Cvt; 
#line 2789
}; 
#line 2794
template<> class __declspec(dllimport) ctype< unsigned short>  : public ctype_base { 
#line 2797
typedef std::ctype< unsigned short>  _Myt; 
#line 2800
public: typedef unsigned short _Elem; 
#line 2801
typedef _Elem char_type; 
#line 2803
bool is(mask _Maskval, _Elem _Ch) const 
#line 2804
{ 
#line 2805
return this->do_is(_Maskval, _Ch); 
#line 2806
} 
#line 2808
const _Elem *is(const _Elem *_First, const _Elem *_Last, mask *
#line 2809
_Dest) const 
#line 2810
{ 
#line 2811
return this->do_is(_First, _Last, _Dest); 
#line 2812
} 
#line 2814
const _Elem *scan_is(mask _Maskval, const _Elem *_First, const _Elem *
#line 2815
_Last) const 
#line 2816
{ 
#line 2817
return this->do_scan_is(_Maskval, _First, _Last); 
#line 2818
} 
#line 2820
const _Elem *scan_not(mask _Maskval, const _Elem *_First, const _Elem *
#line 2821
_Last) const 
#line 2822
{ 
#line 2823
return this->do_scan_not(_Maskval, _First, _Last); 
#line 2824
} 
#line 2826
_Elem tolower(_Elem _Ch) const 
#line 2827
{ 
#line 2828
return this->do_tolower(_Ch); 
#line 2829
} 
#line 2831
const _Elem *tolower(_Elem *_First, const _Elem *_Last) const 
#line 2832
{ 
#line 2833
return this->do_tolower(_First, _Last); 
#line 2834
} 
#line 2836
_Elem toupper(_Elem _Ch) const 
#line 2837
{ 
#line 2838
return this->do_toupper(_Ch); 
#line 2839
} 
#line 2841
const _Elem *toupper(_Elem *_First, const _Elem *_Last) const 
#line 2842
{ 
#line 2843
return this->do_toupper(_First, _Last); 
#line 2844
} 
#line 2846
_Elem widen(char _Byte) const 
#line 2847
{ 
#line 2848
return this->do_widen(_Byte); 
#line 2849
} 
#line 2851
const char *widen(const char *_First, const char *_Last, _Elem *
#line 2852
_Dest) const 
#line 2853
{ 
#line 2854
return this->do_widen(_First, _Last, _Dest); 
#line 2855
} 
#line 2857
char narrow(_Elem _Ch, char _Dflt = '\000') const 
#line 2858
{ 
#line 2859
return this->do_narrow(_Ch, _Dflt); 
#line 2860
} 
#line 2862
const _Elem *narrow(const _Elem *_First, const _Elem *_Last, char 
#line 2863
_Dflt, char *_Dest) const 
#line 2864
{ 
#line 2865
return this->do_narrow(_First, _Last, _Dflt, _Dest); 
#line 2866
} 
#line 2868
static locale::id id; 
#line 2870
explicit ctype(size_t _Refs = 0) : ctype_base(_Refs) 
#line 2872
{ 
#line 2873
{ _Locinfo _Lobj; 
#line 2874
this->_Init(_Lobj); 
#line 2875
} 
#line 2876
} 
#line 2878
ctype(const _Locinfo &_Lobj, size_t _Refs = 0) : ctype_base(_Refs) 
#line 2880
{ 
#line 2881
this->_Init(_Lobj); 
#line 2882
} 
#line 2884
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *
#line 2885
_Ploc = 0) 
#line 2886
{ 
#line 2887
if ((_Ppf != (0)) && ((*_Ppf) == (0))) { 
#line 2888
(*_Ppf) = (new std::ctype< unsigned short> (((_Locinfo)(_Ploc->c_str())))); }  
#line 2890
return 2; 
#line 2891
} 
#line 2894
protected: virtual ~ctype() noexcept 
#line 2895
{ 
#line 2896
if ((_Ctype)._Delfl) { 
#line 2897
::free((void *)((_Ctype)._Table)); }  
#line 2899
::free((_Ctype)._LocaleName); 
#line 2900
} 
#line 2902
void _Init(const _Locinfo &_Lobj) 
#line 2903
{ 
#line 2904
(_Ctype) = _Lobj._Getctype(); 
#line 2905
(_Cvt) = _Lobj._Getcvt(); 
#line 2906
} 
#line 2908
virtual bool do_is(mask _Maskval, _Elem _Ch) const 
#line 2909
{ 
#line 2910
return ((::_Getwctype(_Ch, &(_Ctype))) & _Maskval) != 0; 
#line 2911
} 
#line 2913
virtual const _Elem *do_is(const _Elem *_First, const _Elem *
#line 2914
_Last, mask *_Dest) const 
#line 2915
{ 
#line 2916
; 
#line 2917
return (const _Elem *)::_Getwctypes((const __wchar_t *)_First, (const __wchar_t *)_Last, _Dest, &(_Ctype)); 
#line 2919
} 
#line 2921
virtual const _Elem *do_scan_is(mask _Maskval, const _Elem *
#line 2922
_First, const _Elem *_Last) const 
#line 2923
{ 
#line 2924
; 
#line 2925
for (; (_First != _Last) && (!this->is(_Maskval, *_First)); ++_First) { 
#line 2926
; }  
#line 2927
return _First; 
#line 2928
} 
#line 2930
virtual const _Elem *do_scan_not(mask _Maskval, const _Elem *
#line 2931
_First, const _Elem *_Last) const 
#line 2932
{ 
#line 2933
; 
#line 2934
for (; (_First != _Last) && this->is(_Maskval, *_First); ++_First) { 
#line 2935
; }  
#line 2936
return _First; 
#line 2937
} 
#line 2939
virtual _Elem do_tolower(_Elem _Ch) const 
#line 2940
{ 
#line 2941
return _Towlower(_Ch, &(_Ctype)); 
#line 2942
} 
#line 2944
virtual const _Elem *do_tolower(_Elem *_First, const _Elem *
#line 2945
_Last) const 
#line 2946
{ 
#line 2947
; 
#line 2948
for (; _First != _Last; ++_First) { 
#line 2949
(*_First) = (_Towlower(*_First, &(_Ctype))); }  
#line 2950
return (const _Elem *)_First; 
#line 2951
} 
#line 2953
virtual _Elem do_toupper(_Elem _Ch) const 
#line 2954
{ 
#line 2955
return _Towupper(_Ch, &(_Ctype)); 
#line 2956
} 
#line 2958
virtual const _Elem *do_toupper(_Elem *_First, const _Elem *
#line 2959
_Last) const 
#line 2960
{ 
#line 2961
; 
#line 2962
for (; _First != _Last; ++_First) { 
#line 2963
(*_First) = (_Towupper(*_First, &(_Ctype))); }  
#line 2964
return (const _Elem *)_First; 
#line 2965
} 
#line 2967
_Elem _Dowiden(char _Byte) const 
#line 2968
{ 
#line 2969
mbstate_t _Mbst = {}; 
#line 2970
unsigned short _Wc; 
#line 2971
return (_Mbrtowc((__wchar_t *)(&_Wc), &_Byte, 1, &_Mbst, &(_Cvt)) < 0) ? (unsigned short)((wint_t)65535) : _Wc; 
#line 2973
} 
#line 2975
virtual _Elem do_widen(char _Byte) const 
#line 2976
{ 
#line 2977
return this->_Dowiden(_Byte); 
#line 2978
} 
#line 2980
virtual const char *do_widen(const char *_First, const char *
#line 2981
_Last, _Elem *_Dest) const 
#line 2982
{ 
#line 2983
; 
#line 2984
for (; _First != _Last; (++_First), (++_Dest)) { 
#line 2985
(*_Dest) = this->_Dowiden(*_First); }  
#line 2986
return _First; 
#line 2987
} 
#line 2989
char _Donarrow(_Elem _Ch, char _Dflt) const 
#line 2990
{ 
#line 2991
char _Buf[5]; 
#line 2992
mbstate_t _Mbst = {}; 
#line 2993
return (_Wcrtomb(_Buf, _Ch, &_Mbst, &(_Cvt)) != 1) ? _Dflt : ((_Buf)[0]); 
#line 2995
} 
#line 2997
virtual char do_narrow(_Elem _Ch, char _Dflt) const 
#line 2998
{ 
#line 2999
return this->_Donarrow(_Ch, _Dflt); 
#line 3000
} 
#line 3002
virtual const _Elem *do_narrow(const _Elem *_First, const _Elem *
#line 3003
_Last, char _Dflt, char *_Dest) const 
#line 3004
{ 
#line 3005
; 
#line 3006
for (; _First != _Last; (++_First), (++_Dest)) { 
#line 3007
(*_Dest) = this->_Donarrow(*_First, _Dflt); }  
#line 3008
return _First; 
#line 3009
} 
#line 3012
private: _Locinfo::_Ctypevec _Ctype; 
#line 3013
_Locinfo::_Cvtvec _Cvt; 
#line 3014
}; 
#line 3018 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template < class _Elem >
 class ctype_byname
 : public ctype < _Elem >
 {
public :
 explicit ctype_byname ( const char * _Locname, size_t _Refs = 0 )
  : ctype < _Elem > ( _Locinfo ( _Locname ), _Refs )
  {
  }

 explicit ctype_byname ( const string & _Str, size_t _Refs = 0 )
  : ctype < _Elem > ( _Locinfo ( _Str . c_str ( ) ), _Refs )
  {
  }

protected :
 virtual ~ ctype_byname ( ) noexcept
  {
  }
 };
#line 3041
template<> class ctype_byname< char>  : public ctype< char>  { 
#line 3045
public: explicit ctype_byname(const char *_Locname, size_t _Refs = 0) : std::ctype< char> (((_Locinfo)(_Locname)), _Refs) 
#line 3047
{ 
#line 3048
} 
#line 3050
explicit ctype_byname(const string &_Str, size_t _Refs = 0) : std::ctype< char> (((_Locinfo)(_Str.c_str())), _Refs) 
#line 3052
{ 
#line 3053
} 
#line 3056
protected: virtual ~ctype_byname() noexcept 
#line 3057
{ 
#line 3058
} 
#line 3059
}; 
#line 3064
template class __declspec(dllimport) codecvt< char, char, _Mbstatet> ;
#line 3067 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}
#line 3069
#pragma warning(pop)
#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
#pragma warning(push,3)
#line 3070 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
#pragma pack ( pop )
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
#pragma pack ( push, 8 )
#line 21
namespace std { 
#line 24
enum class errc { 
#line 25
address_family_not_supported = 102, 
#line 26
address_in_use = 100, 
#line 27
address_not_available, 
#line 28
already_connected = 113, 
#line 29
argument_list_too_long = 7, 
#line 30
argument_out_of_domain = 33, 
#line 31
bad_address = 14, 
#line 32
bad_file_descriptor = 9, 
#line 33
bad_message = 104, 
#line 34
broken_pipe = 32, 
#line 35
connection_aborted = 106, 
#line 36
connection_already_in_progress = 103, 
#line 37
connection_refused = 107, 
#line 38
connection_reset, 
#line 39
cross_device_link = 18, 
#line 40
destination_address_required = 109, 
#line 41
device_or_resource_busy = 16, 
#line 42
directory_not_empty = 41, 
#line 43
executable_format_error = 8, 
#line 44
file_exists = 17, 
#line 45
file_too_large = 27, 
#line 46
filename_too_long = 38, 
#line 47
function_not_supported = 40, 
#line 48
host_unreachable = 110, 
#line 49
identifier_removed, 
#line 50
illegal_byte_sequence = 42, 
#line 51
inappropriate_io_control_operation = 25, 
#line 52
interrupted = 4, 
#line 53
invalid_argument = 22, 
#line 54
invalid_seek = 29, 
#line 55
io_error = 5, 
#line 56
is_a_directory = 21, 
#line 57
message_size = 115, 
#line 58
network_down, 
#line 59
network_reset, 
#line 60
network_unreachable, 
#line 61
no_buffer_space, 
#line 62
no_child_process = 10, 
#line 63
no_link = 121, 
#line 64
no_lock_available = 39, 
#line 65
no_message_available = 120, 
#line 66
no_message = 122, 
#line 67
no_protocol_option, 
#line 68
no_space_on_device = 28, 
#line 69
no_stream_resources = 124, 
#line 70
no_such_device_or_address = 6, 
#line 71
no_such_device = 19, 
#line 72
no_such_file_or_directory = 2, 
#line 73
no_such_process, 
#line 74
not_a_directory = 20, 
#line 75
not_a_socket = 128, 
#line 76
not_a_stream = 125, 
#line 77
not_connected, 
#line 78
not_enough_memory = 12, 
#line 79
not_supported = 129, 
#line 80
operation_canceled = 105, 
#line 81
operation_in_progress = 112, 
#line 82
operation_not_permitted = 1, 
#line 83
operation_not_supported = 130, 
#line 84
operation_would_block = 140, 
#line 85
owner_dead = 133, 
#line 86
permission_denied = 13, 
#line 87
protocol_error = 134, 
#line 88
protocol_not_supported, 
#line 89
read_only_file_system = 30, 
#line 90
resource_deadlock_would_occur = 36, 
#line 91
resource_unavailable_try_again = 11, 
#line 92
result_out_of_range = 34, 
#line 93
state_not_recoverable = 127, 
#line 94
stream_timeout = 137, 
#line 95
text_file_busy = 139, 
#line 96
timed_out = 138, 
#line 97
too_many_files_open_in_system = 23, 
#line 98
too_many_files_open, 
#line 99
too_many_links = 31, 
#line 100
too_many_symbolic_link_levels = 114, 
#line 101
value_too_large = 132, 
#line 102
wrong_protocol_type = 136
#line 103
}; 
#line 105
typedef errc _Errc; 
#line 109
enum class io_errc { 
#line 110
stream = 1
#line 111
}; 
#line 113
typedef io_errc _Io_errc; 
#line 116
template< class _Enum> 
#line 117
struct is_error_code_enum : public false_type { 
#line 120
}; 
#line 123
template<> struct is_error_code_enum< io_errc>  : public true_type { 
#line 126
}; 
#line 129
template< class _Ty> constexpr bool 
#line 130
is_error_code_enum_v = (is_error_code_enum< _Ty> ::value); 
#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
template< class _Enum> 
#line 135
struct is_error_condition_enum : public false_type { 
#line 138
}; 
#line 141
template<> struct is_error_condition_enum< errc>  : public true_type { 
#line 144
}; 
#line 147
template< class _Ty> constexpr bool 
#line 148
is_error_condition_enum_v = (is_error_condition_enum< _Ty> ::value); 
#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
class error_code; 
#line 152
class error_condition; 
#line 153
inline error_code make_error_code(_Errc) noexcept; 
#line 154
inline error_code make_error_code(_Io_errc) noexcept; 
#line 155
inline error_condition make_error_condition(_Errc) noexcept; 
#line 156
inline error_condition make_error_condition(_Io_errc) noexcept; 
#line 159
class error_category; 
#line 161
inline const error_category &generic_category() noexcept; 
#line 162
inline const error_category &iostream_category() noexcept; 
#line 163
inline const error_category &system_category() noexcept; 
#line 165
class error_category { 
#line 168
public: error_category() noexcept 
#line 169
{ 
#line 170
(_Addr) = (reinterpret_cast< uintptr_t>(this)); 
#line 171
} 
#line 173
virtual ~error_category() noexcept 
#line 174
{ 
#line 175
} 
#line 177
virtual const char *name() const noexcept = 0; 
#line 179
virtual string message(int _Errval) const = 0; 
#line 182
inline virtual error_condition default_error_condition(int _Errval) const noexcept; 
#line 184
inline virtual bool equivalent(int _Errval, const error_condition & _Cond) const noexcept; 
#line 187
inline virtual bool equivalent(const error_code & _Code, int _Errval) const noexcept; 
#line 190
bool operator==(const error_category &_Right) const noexcept 
#line 191
{ 
#line 192
return (_Addr) == (_Right._Addr); 
#line 193
} 
#line 195
bool operator!=(const error_category &_Right) const noexcept 
#line 196
{ 
#line 197
return !((*this) == _Right); 
#line 198
} 
#line 200
bool operator<(const error_category &_Right) const noexcept 
#line 201
{ 
#line 202
return (_Addr) < (_Right._Addr); 
#line 203
} 
#line 205
error_category(const error_category &) = delete;
#line 206
error_category &operator=(const error_category &) = delete;
#line 209
protected: uintptr_t _Addr; 
#line 211
enum: uintptr_t { 
#line 213
_Future_addr = 1Ui64, 
#line 214
_Generic_addr = 3Ui64, 
#line 215
_Iostream_addr = 5Ui64, 
#line 216
_System_addr = 7Ui64
#line 217
}; 
#line 218
}; 
#line 221
class error_code { 
#line 224
public: typedef error_code _Myt; 
#line 226
error_code() noexcept : _Myval(0), _Mycat(&system_category()) 
#line 229
{ 
#line 230
} 
#line 232
error_code(int _Val, const error_category &_Cat) noexcept : _Myval(_Val), _Mycat(&_Cat) 
#line 234
{ 
#line 235
} 
#line 237
template < class _Enum,
  class = typename enable_if < is_error_code_enum < _Enum > :: value,
   void > :: type >
  error_code ( _Enum _Errcode ) noexcept
  : _Myval ( 0 ), _Mycat ( 0 )
  {
  * this = make_error_code ( _Errcode );
  }
#line 246
void assign(int _Val, const error_category &_Cat) noexcept 
#line 247
{ 
#line 248
(_Myval) = _Val; 
#line 249
(_Mycat) = (&_Cat); 
#line 250
} 
#line 252
template < class _Enum >
  typename enable_if < is_error_code_enum < _Enum > :: value,
   error_code > :: type & operator = ( _Enum _Errcode ) noexcept
  {
  * this = make_error_code ( _Errcode );
  return ( * this );
  }
#line 260
void clear() noexcept 
#line 261
{ 
#line 262
(_Myval) = 0; 
#line 263
(_Mycat) = (&system_category()); 
#line 264
} 
#line 266
int value() const noexcept 
#line 267
{ 
#line 268
return _Myval; 
#line 269
} 
#line 271
const error_category &category() const noexcept 
#line 272
{ 
#line 273
return *(_Mycat); 
#line 274
} 
#line 276
inline error_condition default_error_condition() const noexcept; 
#line 278
string message() const 
#line 279
{ 
#line 280
return this->category().message(this->value()); 
#line 281
} 
#line 283
explicit operator bool() const noexcept 
#line 284
{ 
#line 285
return this->value() != 0; 
#line 286
} 
#line 289
private: int _Myval; 
#line 290
const error_category *_Mycat; 
#line 291
}; 
#line 294
class error_condition { 
#line 297
public: typedef error_condition _Myt; 
#line 299
error_condition() noexcept : _Myval(0), _Mycat(&generic_category()) 
#line 302
{ 
#line 303
} 
#line 305
error_condition(int _Val, const error_category &_Cat) noexcept : _Myval(_Val), _Mycat(&_Cat) 
#line 307
{ 
#line 308
} 
#line 310
template < class _Enum,
  class = typename enable_if < is_error_condition_enum < _Enum > :: value,
   void > :: type >
  error_condition ( _Enum _Errcode ) noexcept
  : _Myval ( 0 ), _Mycat ( 0 )
  {
  * this = make_error_condition ( _Errcode );
  }
#line 319
void assign(int _Val, const error_category &_Cat) noexcept 
#line 320
{ 
#line 321
(_Myval) = _Val; 
#line 322
(_Mycat) = (&_Cat); 
#line 323
} 
#line 325
template < class _Enum >
  typename enable_if < is_error_condition_enum < _Enum > :: value,
   error_condition > :: type & operator = ( _Enum _Errcode ) noexcept
  {
  * this = make_error_condition ( _Errcode );
  return ( * this );
  }
#line 333
void clear() noexcept 
#line 334
{ 
#line 335
(_Myval) = 0; 
#line 336
(_Mycat) = (&generic_category()); 
#line 337
} 
#line 339
int value() const noexcept 
#line 340
{ 
#line 341
return _Myval; 
#line 342
} 
#line 344
const error_category &category() const noexcept 
#line 345
{ 
#line 346
return *(_Mycat); 
#line 347
} 
#line 349
string message() const 
#line 350
{ 
#line 351
return this->category().message(this->value()); 
#line 352
} 
#line 354
explicit operator bool() const noexcept 
#line 355
{ 
#line 356
return this->value() != 0; 
#line 357
} 
#line 360
private: int _Myval; 
#line 361
const error_category *_Mycat; 
#line 362
}; 
#line 365
inline bool operator==(const error_code &
#line 366
_Left, const error_code &
#line 367
_Right) noexcept 
#line 368
{ 
#line 369
return ((_Left.category()) == (_Right.category())) && (_Left.value() == _Right.value()); 
#line 371
} 
#line 373
inline bool operator==(const error_code &
#line 374
_Left, const error_condition &
#line 375
_Right) noexcept 
#line 376
{ 
#line 377
return _Left.category().equivalent(_Left.value(), _Right) || _Right.category().equivalent(_Left, _Right.value()); 
#line 379
} 
#line 381
inline bool operator==(const error_condition &
#line 382
_Left, const error_code &
#line 383
_Right) noexcept 
#line 384
{ 
#line 385
return _Right.category().equivalent(_Right.value(), _Left) || _Left.category().equivalent(_Right, _Left.value()); 
#line 387
} 
#line 389
inline bool operator==(const error_condition &
#line 390
_Left, const error_condition &
#line 391
_Right) noexcept 
#line 392
{ 
#line 393
return ((_Left.category()) == (_Right.category())) && (_Left.value() == _Right.value()); 
#line 395
} 
#line 398
inline bool operator!=(const error_code &
#line 399
_Left, const error_code &
#line 400
_Right) noexcept 
#line 401
{ 
#line 402
return !((_Left == _Right)); 
#line 403
} 
#line 405
inline bool operator!=(const error_code &
#line 406
_Left, const error_condition &
#line 407
_Right) noexcept 
#line 408
{ 
#line 409
return !((_Left == _Right)); 
#line 410
} 
#line 412
inline bool operator!=(const error_condition &
#line 413
_Left, const error_code &
#line 414
_Right) noexcept 
#line 415
{ 
#line 416
return !((_Left == _Right)); 
#line 417
} 
#line 419
inline bool operator!=(const error_condition &
#line 420
_Left, const error_condition &
#line 421
_Right) noexcept 
#line 422
{ 
#line 423
return !((_Left == _Right)); 
#line 424
} 
#line 427
inline bool operator<(const error_code &
#line 428
_Left, const error_code &
#line 429
_Right) noexcept 
#line 430
{ 
#line 431
return ((_Left.category()) < (_Right.category())) || (((_Left.category()) == (_Right.category())) && (_Left.value() < _Right.value())); 
#line 434
} 
#line 436
inline bool operator<(const error_condition &
#line 437
_Left, const error_condition &
#line 438
_Right) noexcept 
#line 439
{ 
#line 440
return ((_Left.category()) < (_Right.category())) || (((_Left.category()) == (_Right.category())) && (_Left.value() < _Right.value())); 
#line 443
} 
#line 447
inline error_condition error_category::default_error_condition(int _Errval) const noexcept 
#line 448
{ 
#line 449
return error_condition(_Errval, *this); 
#line 450
} 
#line 453
inline bool error_category::equivalent(int _Errval, const error_condition &
#line 454
_Cond) const noexcept 
#line 455
{ 
#line 456
return ((this->default_error_condition(_Errval)) == _Cond); 
#line 457
} 
#line 460
inline bool error_category::equivalent(const error_code &_Code, int 
#line 461
_Errval) const noexcept 
#line 462
{ 
#line 463
return ((*this) == (_Code.category())) && (_Code.value() == _Errval); 
#line 464
} 
#line 467
inline error_condition error_code::default_error_condition() const noexcept 
#line 468
{ 
#line 469
return this->category().default_error_condition(this->value()); 
#line 470
} 
#line 473
inline error_code make_error_code(_Errc _Errno) noexcept 
#line 474
{ 
#line 475
return error_code((int)_Errno, generic_category()); 
#line 476
} 
#line 478
inline error_code make_error_code(_Io_errc _Errno) noexcept 
#line 479
{ 
#line 480
return error_code((int)_Errno, iostream_category()); 
#line 481
} 
#line 484
inline error_condition make_error_condition(_Errc _Errno) noexcept 
#line 485
{ 
#line 486
return error_condition((int)_Errno, generic_category()); 
#line 487
} 
#line 489
inline error_condition make_error_condition(_Io_errc _Errno) noexcept 
#line 490
{ 
#line 491
return error_condition((int)_Errno, iostream_category()); 
#line 492
} 
#line 496
template<> struct hash< error_code>  { 
#line 498
typedef error_code argument_type; 
#line 499
typedef size_t result_type; 
#line 501
size_t operator()(const argument_type &_Keyval) const 
#line 502
{ 
#line 503
return std::hash< int> ()(_Keyval.value()); 
#line 504
} 
#line 505
}; 
#line 508
class _System_error : public runtime_error { 
#line 512
static string _Makestr(error_code _Errcode, string _Message) 
#line 513
{ 
#line 514
if (!_Message.empty()) { 
#line 515
_Message.append(": "); }  
#line 516
_Message.append(_Errcode.message()); 
#line 517
return _Message; 
#line 518
} 
#line 521
protected: _System_error(error_code _Errcode, const string &_Message) : runtime_error(_Makestr(_Errcode, _Message)), _Mycode(_Errcode) 
#line 523
{ 
#line 524
} 
#line 526
error_code _Mycode; 
#line 527
}; 
#line 529
class system_error : public _System_error { 
#line 533
typedef _System_error _Mybase; 
#line 536
public: system_error(error_code _Errcode) : _Mybase(_Errcode, "") 
#line 538
{ 
#line 539
} 
#line 541
system_error(error_code _Errcode, const string &_Message) : _Mybase(_Errcode, _Message) 
#line 543
{ 
#line 544
} 
#line 546
system_error(error_code _Errcode, const char *_Message) : _Mybase(_Errcode, _Message) 
#line 548
{ 
#line 549
} 
#line 551
system_error(int _Errval, const error_category &_Errcat) : _Mybase(error_code(_Errval, _Errcat), "") 
#line 553
{ 
#line 554
} 
#line 556
system_error(int _Errval, const error_category &_Errcat, const string &
#line 557
_Message) : _Mybase(error_code(_Errval, _Errcat), _Message) 
#line 559
{ 
#line 560
} 
#line 562
system_error(int _Errval, const error_category &_Errcat, const char *
#line 563
_Message) : _Mybase(error_code(_Errval, _Errcat), _Message) 
#line 565
{ 
#line 566
} 
#line 568
const error_code &code() const noexcept 
#line 569
{ 
#line 570
return _Mycode; 
#line 571
} 
#line 582 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
}; 
#line 584
__declspec(dllimport) const char *__cdecl _Syserror_map(int); 
#line 585
__declspec(dllimport) int __cdecl _Winerror_map(int); 
#line 586
__declspec(dllimport) unsigned long __cdecl _Winerror_message(unsigned long _Message_id, char * _Narrow, unsigned long _Size); 
#line 590
class _Generic_error_category : public error_category { 
#line 594
public: _Generic_error_category() noexcept 
#line 595
{ 
#line 596
(_Addr) = (_Generic_addr); 
#line 597
} 
#line 599
virtual const char *name() const noexcept 
#line 600
{ 
#line 601
return "generic"; 
#line 602
} 
#line 604
virtual string message(int _Errcode) const 
#line 605
{ 
#line 606
return _Syserror_map(_Errcode); 
#line 607
} 
#line 608
}; 
#line 611
class _Iostream_error_category : public _Generic_error_category { 
#line 615
public: _Iostream_error_category() noexcept 
#line 616
{ 
#line 617
(_Addr) = (_Iostream_addr); 
#line 618
} 
#line 620
virtual const char *name() const noexcept 
#line 621
{ 
#line 622
return "iostream"; 
#line 623
} 
#line 625
virtual string message(int _Errcode) const 
#line 626
{ 
#line 627
if (_Errcode == ((int)io_errc::stream)) { 
#line 628
return "iostream stream error"; } else { 
#line 630
return this->_Generic_error_category::message(_Errcode); }  
#line 631
} 
#line 632
}; 
#line 635
class _System_error_category : public error_category { 
#line 639
public: _System_error_category() noexcept 
#line 640
{ 
#line 641
(_Addr) = (_System_addr); 
#line 642
} 
#line 644
virtual const char *name() const noexcept 
#line 645
{ 
#line 646
return "system"; 
#line 647
} 
#line 649
virtual string message(int _Errcode) const 
#line 650
{ 
#line 651
const unsigned long _Size = (32767); 
#line 652
string _Narrow(_Size, '\000'); 
#line 654
const unsigned long _Val = _Winerror_message(static_cast< unsigned long>(_Errcode), &_Narrow[0], _Size); 
#line 657
if (_Val == (0)) { 
#line 658
return "unknown error"; }  
#line 660
_Narrow.resize(_Val); 
#line 661
_Narrow.shrink_to_fit(); 
#line 662
return _Narrow; 
#line 663
} 
#line 666
virtual error_condition default_error_condition(int _Errval) const noexcept 
#line 667
{ 
#line 668
int _Posv = _Winerror_map(_Errval); 
#line 670
if (_Posv != 0) { 
#line 671
return error_condition(_Posv, generic_category()); } else { 
#line 673
return error_condition(_Errval, system_category()); }  
#line 674
} 
#line 675
}; 
#line 677
template < class _Ty >
 struct _Immortalizer
 {
 _Immortalizer ( )
  {
  :: new ( static_cast < void * > ( & _Storage ) ) _Ty ( );
  }

 ~ _Immortalizer ( ) noexcept
  {
  }

 _Immortalizer ( const _Immortalizer & ) = delete;
 _Immortalizer & operator = ( const _Immortalizer & ) = delete;

 typename aligned_union < 1, _Ty > :: type _Storage;
 };
#line 695
template < class _Ty > inline
 _Ty & _Immortalize ( )
 {
  static _Immortalizer < _Ty > _Static;
 return ( * reinterpret_cast < _Ty * > ( & _Static . _Storage ) );
 }
#line 702
inline const error_category &generic_category() noexcept 
#line 703
{ 
#line 704
return _Immortalize< _Generic_error_category> (); 
#line 705
} 
#line 707
inline const error_category &iostream_category() noexcept 
#line 708
{ 
#line 709
return _Immortalize< _Iostream_error_category> (); 
#line 710
} 
#line 712
inline const error_category &system_category() noexcept 
#line 713
{ 
#line 714
return _Immortalize< _System_error_category> (); 
#line 715
} 
#line 716
}
#line 718
#pragma warning(pop)
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
#pragma warning(push,3)
#line 17
#pragma warning(disable: 4412)
#line 719 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
#pragma pack ( pop )
#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
#pragma pack ( push, 8 )
#line 21
namespace std { 
#line 47
template< class _Dummy> 
#line 48
class _Iosb { 
#line 51
public: enum _Dummy_enum { _Dummy_enum_val = 1}; 
#line 52
enum _Fmtflags { 
#line 54
_Fmtmask = 65535, _Fmtzero = 0}; 
#line 56
static constexpr _Fmtflags skipws = ((_Fmtflags)1); 
#line 57
static constexpr _Fmtflags unitbuf = ((_Fmtflags)2); 
#line 58
static constexpr _Fmtflags uppercase = ((_Fmtflags)4); 
#line 59
static constexpr _Fmtflags showbase = ((_Fmtflags)8); 
#line 60
static constexpr _Fmtflags showpoint = ((_Fmtflags)16); 
#line 61
static constexpr _Fmtflags showpos = ((_Fmtflags)32); 
#line 62
static constexpr _Fmtflags left = ((_Fmtflags)64); 
#line 63
static constexpr _Fmtflags right = ((_Fmtflags)128); 
#line 64
static constexpr _Fmtflags internal = ((_Fmtflags)256); 
#line 65
static constexpr _Fmtflags dec = ((_Fmtflags)512); 
#line 66
static constexpr _Fmtflags oct = ((_Fmtflags)1024); 
#line 67
static constexpr _Fmtflags hex = ((_Fmtflags)2048); 
#line 68
static constexpr _Fmtflags scientific = ((_Fmtflags)4096); 
#line 69
static constexpr _Fmtflags fixed = ((_Fmtflags)8192); 
#line 71
static constexpr _Fmtflags hexfloat = ((_Fmtflags)12288); 
#line 74
static constexpr _Fmtflags boolalpha = ((_Fmtflags)16384); 
#line 75
static constexpr _Fmtflags _Stdio = ((_Fmtflags)32768); 
#line 76
static constexpr _Fmtflags adjustfield = ((_Fmtflags)((64 | 128) | 256)); 
#line 78
static constexpr _Fmtflags basefield = ((_Fmtflags)((512 | 1024) | 2048)); 
#line 80
static constexpr _Fmtflags floatfield = ((_Fmtflags)(4096 | 8192)); 
#line 83
enum _Iostate { 
#line 85
_Statmask = 23}; 
#line 87
static constexpr _Iostate goodbit = ((_Iostate)0); 
#line 88
static constexpr _Iostate eofbit = ((_Iostate)1); 
#line 89
static constexpr _Iostate failbit = ((_Iostate)2); 
#line 90
static constexpr _Iostate badbit = ((_Iostate)4); 
#line 92
enum _Openmode { 
#line 94
_Openmask = 255}; 
#line 96
static constexpr _Openmode in = ((_Openmode)1); 
#line 97
static constexpr _Openmode out = ((_Openmode)2); 
#line 98
static constexpr _Openmode ate = ((_Openmode)4); 
#line 99
static constexpr _Openmode app = ((_Openmode)8); 
#line 100
static constexpr _Openmode trunc = ((_Openmode)16); 
#line 101
static constexpr _Openmode _Nocreate = ((_Openmode)64); 
#line 102
static constexpr _Openmode _Noreplace = ((_Openmode)128); 
#line 103
static constexpr _Openmode binary = ((_Openmode)32); 
#line 105
enum _Seekdir { 
#line 107
_Seekbeg, 
#line 108
_Seekcur, 
#line 109
_Seekend
#line 110
}; 
#line 112
static constexpr _Seekdir beg = (_Seekbeg); 
#line 113
static constexpr _Seekdir cur = (_Seekcur); 
#line 114
static constexpr _Seekdir end = (_Seekend); 
#line 117
enum { 
#line 118
_Openprot = 64}; 
#line 119
}; 
#line 121
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 122
_Iosb< _Dummy> ::skipws; 
#line 123
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 124
_Iosb< _Dummy> ::unitbuf; 
#line 125
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 126
_Iosb< _Dummy> ::uppercase; 
#line 127
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 128
_Iosb< _Dummy> ::showbase; 
#line 129
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 130
_Iosb< _Dummy> ::showpoint; 
#line 131
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 132
_Iosb< _Dummy> ::showpos; 
#line 133
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 134
_Iosb< _Dummy> ::left; 
#line 135
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 136
_Iosb< _Dummy> ::right; 
#line 137
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 138
_Iosb< _Dummy> ::internal; 
#line 139
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 140
_Iosb< _Dummy> ::dec; 
#line 141
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 142
_Iosb< _Dummy> ::oct; 
#line 143
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 144
_Iosb< _Dummy> ::hex; 
#line 145
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 146
_Iosb< _Dummy> ::scientific; 
#line 147
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 148
_Iosb< _Dummy> ::fixed; 
#line 150
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 152
_Iosb< _Dummy> ::hexfloat; 
#line 154
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 155
_Iosb< _Dummy> ::boolalpha; 
#line 156
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 157
_Iosb< _Dummy> ::_Stdio; 
#line 158
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 159
_Iosb< _Dummy> ::adjustfield; 
#line 160
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 161
_Iosb< _Dummy> ::basefield; 
#line 162
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 163
_Iosb< _Dummy> ::floatfield; 
#line 165
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Iostate 
#line 166
_Iosb< _Dummy> ::goodbit; 
#line 167
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Iostate 
#line 168
_Iosb< _Dummy> ::eofbit; 
#line 169
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Iostate 
#line 170
_Iosb< _Dummy> ::failbit; 
#line 171
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Iostate 
#line 172
_Iosb< _Dummy> ::badbit; 
#line 174
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Openmode 
#line 175
_Iosb< _Dummy> ::in; 
#line 176
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Openmode 
#line 177
_Iosb< _Dummy> ::out; 
#line 178
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Openmode 
#line 179
_Iosb< _Dummy> ::ate; 
#line 180
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Openmode 
#line 181
_Iosb< _Dummy> ::app; 
#line 182
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Openmode 
#line 183
_Iosb< _Dummy> ::trunc; 
#line 184
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Openmode 
#line 185
_Iosb< _Dummy> ::_Nocreate; 
#line 186
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Openmode 
#line 187
_Iosb< _Dummy> ::_Noreplace; 
#line 188
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Openmode 
#line 189
_Iosb< _Dummy> ::binary; 
#line 191
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Seekdir 
#line 192
_Iosb< _Dummy> ::beg; 
#line 193
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Seekdir 
#line 194
_Iosb< _Dummy> ::cur; 
#line 195
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Seekdir 
#line 196
_Iosb< _Dummy> ::end; 
#line 199
class __declspec(dllimport) ios_base : public _Iosb< int>  { 
#line 203
public: typedef int fmtflags; 
#line 204
typedef int iostate; 
#line 205
typedef int openmode; 
#line 206
typedef int seekdir; 
#line 209
typedef std::streamoff streamoff; 
#line 210
typedef std::streampos streampos; 
#line 213 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
enum event { 
#line 215
erase_event, imbue_event, copyfmt_event}; 
#line 217
typedef void (__cdecl *event_callback)(event, ios_base &, int); 
#line 220
typedef unsigned io_state, open_mode, seek_dir; 
#line 224 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
class failure : public system_error { 
#line 229
public: explicit failure(const string &_Message, const error_code &
#line 230
_Errcode = make_error_code(io_errc::stream)) : system_error(_Errcode, _Message) 
#line 232
{ 
#line 233
} 
#line 235
explicit failure(const char *_Message, const error_code &
#line 236
_Errcode = make_error_code(io_errc::stream)) : system_error(_Errcode, _Message) 
#line 238
{ 
#line 239
} 
#line 251 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
}; 
#line 254
class __declspec(dllimport) Init { 
#line 257
public: Init() 
#line 258
{ 
#line 259
_Init_ctor(this); 
#line 260
} 
#line 262
~Init() noexcept 
#line 263
{ 
#line 264
_Init_dtor(this); 
#line 265
} 
#line 268
private: static void __cdecl _Init_ctor(Init *); 
#line 269
static void __cdecl _Init_dtor(Init *); 
#line 271
static int _Init_cnt; 
#line 273
static int &__cdecl _Init_cnt_func(); 
#line 274
}; 
#line 276
explicit operator bool() const 
#line 277
{ 
#line 278
return !this->fail(); 
#line 279
} 
#line 281
bool operator!() const 
#line 282
{ 
#line 283
return this->fail(); 
#line 284
} 
#line 286
void clear(iostate _State, bool _Reraise) 
#line 287
{ 
#line 288
(_Mystate) = ((iostate)(_State & (_Statmask))); 
#line 289
if (((_Mystate) & (_Except)) == 0) { 
#line 290
; } else { 
#line 291
if (_Reraise) { 
#line 292
throw; } else { 
#line 293
if (((_Mystate) & (_Except)) & badbit) { 
#line 294
throw ((failure)("ios_base::badbit set")); } else { 
#line 295
if (((_Mystate) & (_Except)) & failbit) { 
#line 296
throw ((failure)("ios_base::failbit set")); } else { 
#line 298
throw ((failure)("ios_base::eofbit set")); }  }  }  }  
#line 299
} 
#line 301
void clear(iostate _State = goodbit) 
#line 302
{ 
#line 303
this->clear(_State, false); 
#line 304
} 
#line 307
void clear(io_state _State) 
#line 308
{ 
#line 309
this->clear((iostate)_State); 
#line 310
} 
#line 313 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
iostate rdstate() const 
#line 314
{ 
#line 315
return _Mystate; 
#line 316
} 
#line 318
void setstate(iostate _State, bool _Exreraise) 
#line 319
{ 
#line 320
if (_State != goodbit) { 
#line 321
this->clear((iostate)(((int)this->rdstate()) | ((int)_State)), _Exreraise); }  
#line 322
} 
#line 324
void setstate(iostate _State) 
#line 325
{ 
#line 326
if (_State != goodbit) { 
#line 327
this->clear((iostate)(((int)this->rdstate()) | ((int)_State)), false); }  
#line 328
} 
#line 331
void setstate(io_state _State) 
#line 332
{ 
#line 333
this->setstate((iostate)_State); 
#line 334
} 
#line 337 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
bool good() const 
#line 338
{ 
#line 339
return this->rdstate() == goodbit; 
#line 340
} 
#line 342
bool eof() const 
#line 343
{ 
#line 344
return ((int)this->rdstate()) & ((int)eofbit); 
#line 345
} 
#line 347
bool fail() const 
#line 348
{ 
#line 349
return (((int)this->rdstate()) & (((int)badbit) | ((int)failbit))) != 0; 
#line 351
} 
#line 353
bool bad() const 
#line 354
{ 
#line 355
return (((int)this->rdstate()) & ((int)badbit)) != 0; 
#line 356
} 
#line 358
iostate exceptions() const 
#line 359
{ 
#line 360
return _Except; 
#line 361
} 
#line 363
void exceptions(iostate _Newexcept) 
#line 364
{ 
#line 365
(_Except) = ((iostate)(((int)_Newexcept) & ((int)_Statmask))); 
#line 366
this->clear(_Mystate); 
#line 367
} 
#line 370
void exceptions(io_state _State) 
#line 371
{ 
#line 372
this->exceptions((iostate)_State); 
#line 373
} 
#line 376 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
fmtflags flags() const 
#line 377
{ 
#line 378
return _Fmtfl; 
#line 379
} 
#line 381
fmtflags flags(fmtflags _Newfmtflags) 
#line 382
{ 
#line 383
fmtflags _Oldfmtflags = _Fmtfl; 
#line 384
(_Fmtfl) = ((fmtflags)(((int)_Newfmtflags) & ((int)_Fmtmask))); 
#line 385
return _Oldfmtflags; 
#line 386
} 
#line 388
fmtflags setf(fmtflags _Newfmtflags) 
#line 389
{ 
#line 390
fmtflags _Oldfmtflags = _Fmtfl; 
#line 391
(_Fmtfl) = ((fmtflags)(((int)(_Fmtfl)) | (((int)_Newfmtflags) & ((int)_Fmtmask)))); 
#line 393
return _Oldfmtflags; 
#line 394
} 
#line 396
fmtflags setf(fmtflags _Newfmtflags, fmtflags _Mask) 
#line 397
{ 
#line 398
fmtflags _Oldfmtflags = _Fmtfl; 
#line 399
(_Fmtfl) = ((fmtflags)((((int)(_Fmtfl)) & ((int)(~_Mask))) | ((((int)_Newfmtflags) & ((int)_Mask)) & ((int)_Fmtmask)))); 
#line 401
return _Oldfmtflags; 
#line 402
} 
#line 404
void unsetf(fmtflags _Mask) 
#line 405
{ 
#line 406
(_Fmtfl) = ((fmtflags)(((int)(_Fmtfl)) & ((int)(~_Mask)))); 
#line 407
} 
#line 409
streamsize precision() const 
#line 410
{ 
#line 411
return _Prec; 
#line 412
} 
#line 414
streamsize precision(streamsize _Newprecision) 
#line 415
{ 
#line 416
streamsize _Oldprecision = _Prec; 
#line 417
(_Prec) = _Newprecision; 
#line 418
return _Oldprecision; 
#line 419
} 
#line 421
streamsize width() const 
#line 422
{ 
#line 423
return _Wide; 
#line 424
} 
#line 426
streamsize width(streamsize _Newwidth) 
#line 427
{ 
#line 428
streamsize _Oldwidth = _Wide; 
#line 429
(_Wide) = _Newwidth; 
#line 430
return _Oldwidth; 
#line 431
} 
#line 433
locale getloc() const 
#line 434
{ 
#line 435
return *(_Ploc); 
#line 436
} 
#line 438
locale imbue(const locale &_Loc) 
#line 439
{ 
#line 440
locale _Oldlocale = *(_Ploc); 
#line 441
((*(_Ploc)) = _Loc); 
#line 442
this->_Callfns(imbue_event); 
#line 443
return _Oldlocale; 
#line 444
} 
#line 446
static int __cdecl xalloc() 
#line 447
{ 
#line 448
{ _Lockit _Lock(2); 
#line 449
return _Index++; 
#line 450
} 
#line 451
} 
#line 453
long &iword(int _Idx) 
#line 454
{ 
#line 455
return this->_Findarr(_Idx)._Lo; 
#line 456
} 
#line 458
void *&pword(int _Idx) 
#line 459
{ 
#line 460
return this->_Findarr(_Idx)._Vp; 
#line 461
} 
#line 463
void register_callback(event_callback _Pfn, int 
#line 464
_Idx) 
#line 465
{ 
#line 466
(_Calls) = (new _Fnarray(_Idx, _Pfn, _Calls)); 
#line 467
} 
#line 469
ios_base &copyfmt(const ios_base &_Other) 
#line 470
{ 
#line 471
if (this != (&_Other)) 
#line 472
{ 
#line 473
this->_Tidy(); 
#line 474
((*(_Ploc)) = (*(_Other._Ploc))); 
#line 475
(_Fmtfl) = (_Other._Fmtfl); 
#line 476
(_Prec) = (_Other._Prec); 
#line 477
(_Wide) = (_Other._Wide); 
#line 478
_Iosarray *_Ptr = _Other._Arr; 
#line 480
for ((_Arr) = (0); _Ptr != (0); _Ptr = (_Ptr->_Next)) { 
#line 481
if (((_Ptr->_Lo) != (0)) || ((_Ptr->_Vp) != (0))) 
#line 482
{ 
#line 483
this->iword(_Ptr->_Index) = (_Ptr->_Lo); 
#line 484
this->pword(_Ptr->_Index) = (_Ptr->_Vp); 
#line 485
}  }  
#line 487
for (_Fnarray *_Pfa = _Other._Calls; _Pfa != (0); _Pfa = (_Pfa->_Next)) { 
#line 489
this->register_callback(_Pfa->_Pfn, _Pfa->_Index); }  
#line 491
this->_Callfns(copyfmt_event); 
#line 492
this->exceptions(_Other._Except); 
#line 493
}  
#line 494
return *this; 
#line 495
} 
#line 497
static bool __cdecl sync_with_stdio(bool _Newsync = true) 
#line 498
{ 
#line 499
{ _Lockit _Lock(2); 
#line 500
const bool _Oldsync = _Sync; 
#line 501
_Sync = _Newsync; 
#line 502
return _Oldsync; 
#line 503
} 
#line 504
} 
#line 506
void swap(ios_base &_Right) 
#line 507
{ 
#line 508
if (this != (&_Right)) 
#line 509
{ 
#line 510
::std::swap(_Mystate, _Right._Mystate); 
#line 511
::std::swap(_Except, _Right._Except); 
#line 512
::std::swap(_Fmtfl, _Right._Fmtfl); 
#line 513
::std::swap(_Prec, _Right._Prec); 
#line 514
::std::swap(_Wide, _Right._Wide); 
#line 516
::std::swap(_Arr, _Right._Arr); 
#line 517
::std::swap(_Calls, _Right._Calls); 
#line 518
::std::swap(_Ploc, _Right._Ploc); 
#line 519
}  
#line 520
} 
#line 522
virtual ~ios_base() noexcept 
#line 523
{ 
#line 524
_Ios_base_dtor(this); 
#line 525
} 
#line 528
static void __cdecl _Addstd(ios_base *); 
#line 530
size_t _Stdstr; 
#line 533
protected: ios_base() 
#line 534
{ 
#line 535
} 
#line 537
void _Init() 
#line 538
{ 
#line 539
(_Ploc) = (0); 
#line 540
(_Stdstr) = (0); 
#line 541
(_Except) = goodbit; 
#line 542
(_Fmtfl) = ((fmtflags)(skipws | dec)); 
#line 543
(_Prec) = (6); 
#line 544
(_Wide) = (0); 
#line 545
(_Arr) = (0); 
#line 546
(_Calls) = (0); 
#line 547
this->clear(goodbit); 
#line 548
(_Ploc) = (new locale); 
#line 549
} 
#line 553
private: struct _Iosarray : public _Crt_new_delete { 
#line 557
_Iosarray(int _Idx, _Iosarray *_Link) : _Next(_Link), _Index(_Idx), _Lo((0)), _Vp((0)) 
#line 559
{ 
#line 560
} 
#line 562
_Iosarray *_Next; 
#line 563
int _Index; 
#line 564
long _Lo; 
#line 565
void *_Vp; 
#line 566
}; 
#line 569
struct _Fnarray : public _Crt_new_delete { 
#line 572
_Fnarray(int _Idx, event_callback _Pnew, _Fnarray *_Link) : _Next(_Link), _Index(_Idx), _Pfn(_Pnew) 
#line 574
{ 
#line 575
} 
#line 577
_Fnarray *_Next; 
#line 578
int _Index; 
#line 579
event_callback _Pfn; 
#line 580
}; 
#line 582
void _Callfns(event _Ev) 
#line 583
{ 
#line 584
for (_Fnarray *_Pfa = _Calls; _Pfa != (0); _Pfa = (_Pfa->_Next)) { 
#line 585
(*(_Pfa->_Pfn))(_Ev, *this, _Pfa->_Index); }  
#line 586
} 
#line 588
_Iosarray &_Findarr(int _Idx) 
#line 589
{ 
#line 590
_Iosarray *_Ptr1, *_Ptr2; 
#line 592
for ((_Ptr1 = (_Arr)), (_Ptr2 = (0)); _Ptr1 != (0); _Ptr1 = (_Ptr1->_Next)) { 
#line 593
if ((_Ptr1->_Index) == _Idx) { 
#line 594
return *_Ptr1; } else { 
#line 595
if (((_Ptr2 == (0)) && ((_Ptr1->_Lo) == (0))) && ((_Ptr1->_Vp) == (0))) { 
#line 596
_Ptr2 = _Ptr1; }  }  }  
#line 598
if (_Ptr2 != (0)) 
#line 599
{ 
#line 600
(_Ptr2->_Index) = _Idx; 
#line 601
return *_Ptr2; 
#line 602
}  
#line 604
(_Arr) = (new _Iosarray(_Idx, _Arr)); 
#line 605
return *(_Arr); 
#line 606
} 
#line 608
void _Tidy() 
#line 609
{ 
#line 610
this->_Callfns(erase_event); 
#line 611
_Iosarray *_Ptr1, *_Ptr2; 
#line 613
for (_Ptr1 = (_Arr); _Ptr1 != (0); _Ptr1 = _Ptr2) 
#line 614
{ 
#line 615
_Ptr2 = (_Ptr1->_Next); 
#line 616
delete _Ptr1; 
#line 617
}  
#line 618
(_Arr) = (0); 
#line 620
_Fnarray *_Pfa1, *_Pfa2; 
#line 621
for (_Pfa1 = (_Calls); _Pfa1 != (0); _Pfa1 = _Pfa2) 
#line 622
{ 
#line 623
_Pfa2 = (_Pfa1->_Next); 
#line 624
delete _Pfa1; 
#line 625
}  
#line 626
(_Calls) = (0); 
#line 627
} 
#line 629
iostate _Mystate; 
#line 630
iostate _Except; 
#line 631
fmtflags _Fmtfl; 
#line 632
streamsize _Prec; 
#line 633
streamsize _Wide; 
#line 634
_Iosarray *_Arr; 
#line 635
_Fnarray *_Calls; 
#line 636
locale *_Ploc; 
#line 638
static int _Index; 
#line 639
static bool _Sync; 
#line 642
static void __cdecl _Ios_base_dtor(ios_base *); 
#line 645
public: ios_base(const ios_base &) = delete;
#line 646
ios_base &operator=(const ios_base &) = delete;
#line 647
}; 
#line 653
}
#line 655
#pragma warning(pop)
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
#pragma warning(push,3)
#line 13
#pragma warning(disable: 4251)
#line 656 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
#pragma pack ( pop )
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
#pragma pack ( push, 8 )
#line 15
namespace std { 
#line 17
template < class _Elem,
 class _Traits >
 class basic_streambuf
 {
 typedef basic_streambuf < _Elem, _Traits > _Myt;

protected :
  basic_streambuf ( )
  : _Plocale ( new locale )
  {
  _Init ( );
  }

  basic_streambuf ( _Uninitialized )
  {
  }

  basic_streambuf ( const _Myt & _Right )
  : _Plocale ( new locale ( _Right . getloc ( ) ) )
  {
  _Init ( );
  setp ( _Right . pbase ( ), _Right . pptr ( ), _Right . epptr ( ) );
  setg ( _Right . eback ( ), _Right . gptr ( ), _Right . egptr ( ) );
  }

 _Myt & operator = ( const _Myt & _Right )
  {
  if ( this != & _Right )
   {
   setp ( _Right . pbase ( ), _Right . pptr ( ), _Right . epptr ( ) );
   setg ( _Right . eback ( ), _Right . gptr ( ), _Right . egptr ( ) );
   pubimbue ( _Right . getloc ( ) );
   }
  return ( * this );
  }

 void swap ( _Myt & _Right )
  {
  if ( this != & _Right )
   {
   _Elem * _Pfirst0 = pbase ( );
   _Elem * _Pnext0 = pptr ( );
   _Elem * _Pend = epptr ( );
   _Elem * _Gfirst0 = eback ( );
   _Elem * _Gnext0 = gptr ( );
   _Elem * _Gend = egptr ( );

   setp ( _Right . pbase ( ), _Right . pptr ( ), _Right . epptr ( ) );
   _Right . setp ( _Pfirst0, _Pnext0, _Pend );

   setg ( _Right . eback ( ), _Right . gptr ( ), _Right . egptr ( ) );
   _Right . setg ( _Gfirst0, _Gnext0, _Gend );

   :: std :: swap ( _Plocale, _Right . _Plocale );
   }
  }

public :
 typedef _Elem char_type;
 typedef _Traits traits_type;

 virtual ~ basic_streambuf ( ) noexcept
  {
  delete _Plocale;
  }

 typedef typename _Traits :: int_type int_type;
 typedef typename _Traits :: pos_type pos_type;
 typedef typename _Traits :: off_type off_type;

 pos_type pubseekoff ( off_type _Off,
  ios_base :: seekdir _Way,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out )
  {
  return ( seekoff ( _Off, _Way, _Mode ) );
  }


 pos_type pubseekoff ( off_type _Off,
  ios_base :: seek_dir _Way,
  ios_base :: open_mode _Mode )
  {
  return ( pubseekoff ( _Off, ( ios_base :: seekdir ) _Way,
   ( ios_base :: openmode ) _Mode ) );
  }


 pos_type pubseekpos ( pos_type _Pos,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out )
  {
  return ( seekpos ( _Pos, _Mode ) );
  }


 pos_type pubseekpos ( pos_type _Pos,
  ios_base :: open_mode _Mode )
  {
  return ( seekpos ( _Pos, ( ios_base :: openmode ) _Mode ) );
  }


 _Myt * pubsetbuf ( _Elem * _Buffer,
  streamsize _Count )
  {
  return ( setbuf ( _Buffer, _Count ) );
  }

 locale pubimbue ( const locale & _Newlocale )
  {
  locale _Oldlocale = * _Plocale;
  imbue ( _Newlocale );
  * _Plocale = _Newlocale;
  return ( _Oldlocale );
  }

 locale getloc ( ) const
  {
  return ( * _Plocale );
  }

 streamsize in_avail ( )
  {
  streamsize _Res = _Gnavail ( );
  return ( 0 < _Res ? _Res : showmanyc ( ) );
  }

 int pubsync ( )
  {
  return ( sync ( ) );
  }

 int_type sbumpc ( )
  {
  return ( 0 < _Gnavail ( )
   ? _Traits :: to_int_type ( * _Gninc ( ) ) : uflow ( ) );
  }

 int_type sgetc ( )
  {
  return ( 0 < _Gnavail ( )
   ? _Traits :: to_int_type ( * gptr ( ) ) : underflow ( ) );
  }

 streamsize sgetn ( _Elem * _Ptr,
  streamsize _Count )
  {
  return ( xsgetn ( _Ptr, _Count ) );
  }

 int_type snextc ( )
  {
  return ( 1 < _Gnavail ( )
   ? _Traits :: to_int_type ( * _Gnpreinc ( ) )
   : _Traits :: eq_int_type ( _Traits :: eof ( ), sbumpc ( ) )
    ? _Traits :: eof ( ) : sgetc ( ) );
  }

 int_type sputbackc ( _Elem _Ch )
  {
  return ( gptr ( ) != 0 && eback ( ) < gptr ( )
   && _Traits :: eq ( _Ch, gptr ( ) [ - 1 ] )
   ? _Traits :: to_int_type ( * _Gndec ( ) )
   : pbackfail ( _Traits :: to_int_type ( _Ch ) ) );
  }


 void stossc ( )
  {
  if ( 0 < _Gnavail ( ) )
   _Gninc ( );
  else
   uflow ( );
  }


 int_type sungetc ( )
  {
  return ( gptr ( ) != 0 && eback ( ) < gptr ( )
   ? _Traits :: to_int_type ( * _Gndec ( ) ) : pbackfail ( ) );
  }

 int_type sputc ( _Elem _Ch )
  {
  return ( 0 < _Pnavail ( )
   ? _Traits :: to_int_type ( * _Pninc ( ) = _Ch )
   : overflow ( _Traits :: to_int_type ( _Ch ) ) );
  }

 streamsize sputn ( const _Elem * _Ptr,
  streamsize _Count )
  {
  return ( xsputn ( _Ptr, _Count ) );
  }

 virtual void _Lock ( )
  {
  }

 virtual void _Unlock ( )
  {
  }

protected :
 _Elem * eback ( ) const
  {
  return ( * _IGfirst );
  }

 _Elem * gptr ( ) const
  {
  return ( * _IGnext );
  }

 _Elem * pbase ( ) const
  {
  return ( * _IPfirst );
  }

 _Elem * pptr ( ) const
  {
  return ( * _IPnext );
  }

 _Elem * egptr ( ) const
  {
  return ( * _IGnext + * _IGcount );
  }

 void gbump ( int _Off )
  {
  * _IGcount -= _Off;
  * _IGnext += _Off;
  }

 void setg ( _Elem * _First, _Elem * _Next, _Elem * _Last )
  {
  * _IGfirst = _First;
  * _IGnext = _Next;
  * _IGcount = ( int ) ( _Last - _Next );
  }

 _Elem * epptr ( ) const
  {
  return ( * _IPnext + * _IPcount );
  }

 _Elem * _Gndec ( )
  {
  ++ * _IGcount;
  return ( -- * _IGnext );
  }

 _Elem * _Gninc ( )
  {
  -- * _IGcount;
  return ( ( * _IGnext ) ++ );
  }

 _Elem * _Gnpreinc ( )
  {
  -- * _IGcount;
  return ( ++ ( * _IGnext ) );
  }

 streamsize _Gnavail ( ) const
  {
  return ( * _IGnext != 0 ? * _IGcount : 0 );
  }

 void pbump ( int _Off )
  {
  * _IPcount -= _Off;
  * _IPnext += _Off;
  }

 void setp ( _Elem * _First, _Elem * _Last )
  {
  * _IPfirst = _First;
  * _IPnext = _First;
  * _IPcount = ( int ) ( _Last - _First );
  }

 void setp ( _Elem * _First, _Elem * _Next, _Elem * _Last )
  {
  * _IPfirst = _First;
  * _IPnext = _Next;
  * _IPcount = ( int ) ( _Last - _Next );
  }

 _Elem * _Pninc ( )
  {
  -- * _IPcount;
  return ( ( * _IPnext ) ++ );
  }

 streamsize _Pnavail ( ) const
  {
  return ( * _IPnext != 0 ? * _IPcount : 0 );
  }

 void _Init ( )
  {
  _IGfirst = & _Gfirst;
  _IPfirst = & _Pfirst;
  _IGnext = & _Gnext;
  _IPnext = & _Pnext;
  _IGcount = & _Gcount;
  _IPcount = & _Pcount;
  setp ( 0, 0 );
  setg ( 0, 0, 0 );
  }

 void _Init ( _Elem * * _Gf, _Elem * * _Gn, int * _Gc,
  _Elem * * _Pf, _Elem * * _Pn, int * _Pc )
  {
  _IGfirst = _Gf;
  _IPfirst = _Pf;
  _IGnext = _Gn;
  _IPnext = _Pn;
  _IGcount = _Gc;
  _IPcount = _Pc;
  }

 virtual int_type overflow ( int_type = _Traits :: eof ( ) )
  {
  return ( _Traits :: eof ( ) );
  }

 virtual int_type pbackfail ( int_type = _Traits :: eof ( ) )
  {
  return ( _Traits :: eof ( ) );
  }

 virtual streamsize showmanyc ( )
  {
  return ( 0 );
  }

 virtual int_type underflow ( )
  {
  return ( _Traits :: eof ( ) );
  }

 virtual int_type uflow ( )
  {
  return ( _Traits :: eq_int_type ( _Traits :: eof ( ), underflow ( ) )
   ? _Traits :: eof ( ) : _Traits :: to_int_type ( * _Gninc ( ) ) );
  }

 virtual streamsize xsgetn ( _Elem * _Ptr,
  streamsize _Count )
  {
  int_type _Meta;
  streamsize _Size, _Copied;

  for ( _Copied = 0; 0 < _Count; )
   if ( 0 < ( _Size = _Gnavail ( ) ) )
    {
    if ( _Count < _Size )
     _Size = _Count;
    _Traits :: copy ( _Ptr, gptr ( ), ( size_t ) _Size );
    _Ptr += _Size;
    _Copied += _Size;
    _Count -= _Size;
    gbump ( ( int ) _Size );
    }
   else if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta = uflow ( ) ) )
    break;
   else
    {
    * _Ptr ++ = _Traits :: to_char_type ( _Meta );
    ++ _Copied;
    -- _Count;
    }

  return ( _Copied );
  }

 virtual streamsize xsputn ( const _Elem * _Ptr,
  streamsize _Count )
  {
  streamsize _Size, _Copied;

  for ( _Copied = 0; 0 < _Count; )
   if ( 0 < ( _Size = _Pnavail ( ) ) )
    {
    if ( _Count < _Size )
     _Size = _Count;
    _Traits :: copy ( pptr ( ), _Ptr, ( size_t ) _Size );
    _Ptr += _Size;
    _Copied += _Size;
    _Count -= _Size;
    pbump ( ( int ) _Size );
    }
   else if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
    overflow ( _Traits :: to_int_type ( * _Ptr ) ) ) )
    break;
   else
    {
    ++ _Ptr;
    ++ _Copied;
    -- _Count;
    }

  return ( _Copied );
  }

 virtual pos_type seekoff ( off_type,
  ios_base :: seekdir,
  ios_base :: openmode = ios_base :: in | ios_base :: out )
  {
  return ( streampos ( _BADOFF ) );
  }

 virtual pos_type seekpos ( pos_type,
  ios_base :: openmode = ios_base :: in | ios_base :: out )
  {
  return ( streampos ( _BADOFF ) );
  }

 virtual _Myt * setbuf ( _Elem *, streamsize )
  {
  return ( this );
  }

 virtual int sync ( )
  {
  return ( 0 );
  }

 virtual void imbue ( const locale & )
  {
  }

private :
 _Elem * _Gfirst;
 _Elem * _Pfirst;
 _Elem * * _IGfirst;
 _Elem * * _IPfirst;
 _Elem * _Gnext;
 _Elem * _Pnext;
 _Elem * * _IGnext;
 _Elem * * _IPnext;

 int _Gcount;
 int _Pcount;
 int * _IGcount;
 int * _IPcount;

protected :
 locale * _Plocale;
 };
#line 473 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
template class __declspec(dllimport) basic_streambuf< char, char_traits< char> > ;
#line 474
template class __declspec(dllimport) basic_streambuf< __wchar_t, char_traits< __wchar_t> > ;
#line 484 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
template < class _Elem,
 class _Traits >
 class istreambuf_iterator
  : public iterator < input_iterator_tag,
   _Elem, typename _Traits :: off_type, const _Elem *, _Elem >
 {
 typedef istreambuf_iterator < _Elem, _Traits > _Myt;
public :
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef basic_streambuf < _Elem, _Traits > streambuf_type;
 typedef basic_istream < _Elem, _Traits > istream_type;

 typedef typename traits_type :: int_type int_type;
 typedef const _Elem * pointer;

 constexpr istreambuf_iterator ( streambuf_type * _Sb = 0 ) noexcept
  : _Strbuf ( _Sb ), _Got ( _Sb == 0 ), _Val ( )
  {
  }

 istreambuf_iterator ( istream_type & _Istr ) noexcept
  : _Strbuf ( _Istr . rdbuf ( ) ), _Got ( _Istr . rdbuf ( ) == 0 )
  {
  }

 _Elem operator * ( ) const
  {
  if ( ! _Got )
   _Peek ( );






  return ( _Val );
  }

 const _Elem * operator -> ( ) const
  {
  return ( pointer_traits < pointer > :: pointer_to ( * * this ) );
  }

 _Myt & operator ++ ( )
  {





  _Inc ( );
  return ( * this );
  }

 _Myt operator ++ ( int )
  {
  if ( ! _Got )
   _Peek ( );
  _Myt _Tmp = * this;
  ++ * this;
  return ( _Tmp );
  }

 bool equal ( const _Myt & _Right ) const
  {
  if ( ! _Got )
   _Peek ( );
  if ( ! _Right . _Got )
   _Right . _Peek ( );
  return ( ( _Strbuf == 0 && _Right . _Strbuf == 0 )
   || ( _Strbuf != 0 && _Right . _Strbuf != 0 ) );
  }

private :
 void _Inc ( )
  {
  if ( _Strbuf == 0
   || traits_type :: eq_int_type ( traits_type :: eof ( ),
    _Strbuf -> sbumpc ( ) ) )
   _Strbuf = 0, _Got = true;
  else
   _Got = false;
  }

 _Elem _Peek ( ) const
  {
  int_type _Meta;
  if ( _Strbuf == 0
   || traits_type :: eq_int_type ( traits_type :: eof ( ),
    _Meta = _Strbuf -> sgetc ( ) ) )
   _Strbuf = 0;
  else
   _Val = traits_type :: to_char_type ( _Meta );
  _Got = true;
  return ( _Val );
  }

 mutable streambuf_type * _Strbuf;
 mutable bool _Got;
 mutable _Elem _Val;
 };
#line 587 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
template< class _Elem, class 
#line 588
_Traits> 
#pragma pack(8)
#line 589
struct _Is_checked_helper< istreambuf_iterator< _Elem, _Traits> , void>  : public true_type { 
#line 592
}; 
#pragma pack()
#line 595
template < class _Elem,
 class _Traits > inline
 bool operator == (
  const istreambuf_iterator < _Elem, _Traits > & _Left,
  const istreambuf_iterator < _Elem, _Traits > & _Right )
 {
 return ( _Left . equal ( _Right ) );
 }
#line 604
template < class _Elem,
 class _Traits > inline
 bool operator != (
  const istreambuf_iterator < _Elem, _Traits > & _Left,
  const istreambuf_iterator < _Elem, _Traits > & _Right )
 {
 return ( ! ( _Left == _Right ) );
 }
#line 614
template < class _Elem,
 class _Traits >
 class ostreambuf_iterator
  : public _Outit
 {
 typedef ostreambuf_iterator < _Elem, _Traits > _Myt;
public :
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef basic_streambuf < _Elem, _Traits > streambuf_type;
 typedef basic_ostream < _Elem, _Traits > ostream_type;

 ostreambuf_iterator ( streambuf_type * _Sb ) noexcept
  : _Failed ( false ), _Strbuf ( _Sb )
  {
  }

 ostreambuf_iterator ( ostream_type & _Ostr ) noexcept
  : _Failed ( false ), _Strbuf ( _Ostr . rdbuf ( ) )
  {
  }

 _Myt & operator = ( _Elem _Right )
  {
  if ( _Strbuf == 0
   || traits_type :: eq_int_type ( _Traits :: eof ( ),
    _Strbuf -> sputc ( _Right ) ) )
   _Failed = true;
  return ( * this );
  }

 _Myt & operator * ( )
  {
  return ( * this );
  }

 _Myt & operator ++ ( )
  {
  return ( * this );
  }

 _Myt & operator ++ ( int )
  {
  return ( * this );
  }

 bool failed ( ) const noexcept
  {
  return ( _Failed );
  }

private :
 bool _Failed;
 streambuf_type * _Strbuf;
 };
#line 670
template< class _Elem, class 
#line 671
_Traits> 
#pragma pack(8)
#line 672
struct _Is_checked_helper< ostreambuf_iterator< _Elem, _Traits> , void>  : public true_type { 
#line 675
}; 
#pragma pack()
#line 676
}
#line 679
#pragma warning(pop)
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
#pragma warning(push,3)
#line 17
#pragma warning(disable: 4189 4275)
#line 680 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
#pragma pack ( pop )
#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
#pragma pack ( push, 8 )
#line 22
extern "C" {
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
__declspec(dllimport) extern float __cdecl _Stofx(const char *, char **, long, int *); 
#line 28
__declspec(dllimport) extern double __cdecl _Stodx(const char *, char **, long, int *); 
#line 31
__declspec(dllimport) extern long double __cdecl _Stoldx(const char *, char **, long, int *); 
#line 34
__declspec(dllimport) extern long __cdecl _Stolx(const char *, char **, int, int *); 
#line 37
__declspec(dllimport) extern unsigned long __cdecl _Stoulx(const char *, char **, int, int *); 
#line 40
__declspec(dllimport) extern __int64 __cdecl _Stollx(const char *, char **, int, int *); 
#line 43
__declspec(dllimport) extern unsigned __int64 __cdecl _Stoullx(const char *, char **, int, int *); 
#line 48
}
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
namespace std { 
#line 54
inline double _Stodx_v2(const char *_Str, char **_Endptr, int _Pten, int *_Perr) 
#line 55
{ 
#line 56
int &_Errno_ref = *_errno(); 
#line 57
const int _Orig = _Errno_ref; 
#line 59
_Errno_ref = 0; 
#line 60
double _Val = ::strtod(_Str, _Endptr); 
#line 61
(*_Perr) = _Errno_ref; 
#line 62
_Errno_ref = _Orig; 
#line 64
if (_Pten != 0) { 
#line 65
_Val *= ::pow((10.0), static_cast< double>(_Pten)); }  
#line 67
return _Val; 
#line 68
} 
#line 71
inline float _Stofx_v2(const char *_Str, char **_Endptr, int _Pten, int *_Perr) 
#line 72
{ 
#line 73
int &_Errno_ref = *_errno(); 
#line 74
const int _Orig = _Errno_ref; 
#line 76
_Errno_ref = 0; 
#line 77
float _Val = ::strtof(_Str, _Endptr); 
#line 78
(*_Perr) = _Errno_ref; 
#line 79
_Errno_ref = _Orig; 
#line 81
if (_Pten != 0) { 
#line 82
_Val *= ::powf((10.0F), static_cast< float>(_Pten)); }  
#line 84
return _Val; 
#line 85
} 
#line 88
template < class _Elem > inline
 size_t _Find_elem ( _Elem * _Base, _Elem _Ch )
 {
 _Elem * _Ptr = _Base;
 for (; * _Ptr != ( _Elem ) 0 && * _Ptr != _Ch; ++ _Ptr )
  ;
 return ( ( size_t ) ( _Ptr - _Base ) );
 }
#line 97
inline __wchar_t *_Maklocwcs(const __wchar_t *_Ptr) 
#line 98
{ 
#line 99
size_t _Count = ::wcslen(_Ptr) + (1); 
#line 101
__wchar_t *_Ptrdest = (__wchar_t *)calloc(_Count, sizeof(__wchar_t)); 
#line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
if (!_Ptrdest) { 
#line 105
_Xbad_alloc(); }  
#line 106
::wmemcpy(_Ptrdest, _Ptr, _Count); 
#line 107
return _Ptrdest; 
#line 108
} 
#line 111
template < class _Elem >
 class numpunct
  : public locale :: facet
 {
public :
 typedef basic_string < _Elem, char_traits < _Elem >, allocator < _Elem > >
  string_type;
 typedef _Elem char_type;

  __declspec ( dllimport ) static locale :: id id;

 _Elem decimal_point ( ) const
  {
  return ( do_decimal_point ( ) );
  }

 _Elem thousands_sep ( ) const
  {
  return ( do_thousands_sep ( ) );
  }

 string grouping ( ) const
  {
  return ( do_grouping ( ) );
  }

 string_type falsename ( ) const
  {
  return ( do_falsename ( ) );
  }

 string_type truename ( ) const
  {
  return ( do_truename ( ) );
  }

 explicit numpunct ( size_t _Refs = 0 )
  : locale :: facet ( _Refs )
  {
  { _Locinfo _Lobj;
   _Init ( _Lobj );
   if ( _Kseparator == 0 )
    _Kseparator =
     _Maklocchr ( ',', ( _Elem * ) 0, _Lobj . _Getcvt ( ) );
  }
  }

 numpunct ( const _Locinfo & _Lobj, size_t _Refs = 0, bool _Isdef = false )
  : locale :: facet ( _Refs )
  {
  _Init ( _Lobj, _Isdef );
  }

 static size_t _Getcat ( const locale :: facet * * _Ppf = 0,
  const locale * _Ploc = 0 )
  {
  if ( _Ppf != 0 && * _Ppf == 0 )
   * _Ppf = new numpunct < _Elem > (
    _Locinfo ( _Ploc -> c_str ( ) ), 0, true );
  return ( 4 );
  }

protected :
 virtual ~ numpunct ( ) noexcept
  {
  _Tidy ( );
  }

 numpunct ( const char * _Locname, size_t _Refs = 0, bool _Isdef = false )
  : locale :: facet ( _Refs )
  {
  { _Locinfo _Lobj ( _Locname );
   _Init ( _Lobj, _Isdef );
  }
  }

 template < class _Elem2 >
  void _Getvals ( _Elem2, const lconv * _Ptr, _Locinfo :: _Cvtvec _Cvt )
  {
  _Dp = _Maklocchr ( _Ptr -> decimal_point [ 0 ], ( _Elem2 * ) 0, _Cvt );
  _Kseparator = _Maklocchr ( _Ptr -> thousands_sep [ 0 ], ( _Elem2 * ) 0, _Cvt );
  }

 template < >
  void _Getvals ( wchar_t, const lconv * _Ptr, _Locinfo :: _Cvtvec )
  {
  _Dp = ( _Elem ) _Ptr -> _W_decimal_point [ 0 ];
  _Kseparator = ( _Elem ) _Ptr -> _W_thousands_sep [ 0 ];
  }

 void _Init ( const _Locinfo & _Lobj, bool _Isdef = false )
  {
  const lconv * _Ptr = _Lobj . _Getlconv ( );
  _Locinfo :: _Cvtvec _Cvt = _Lobj . _Getcvt ( );

  _Grouping = 0;
  _Falsename = 0;
  _Truename = 0;

  try {
  _Grouping = _Maklocstr ( _Isdef ? "" : _Ptr -> grouping, ( char * ) 0, _Lobj . _Getcvt ( ) );

  _Falsename = _Maklocstr ( _Lobj . _Getfalse ( ), ( _Elem * ) 0, _Cvt );
  _Truename = _Maklocstr ( _Lobj . _Gettrue ( ), ( _Elem * ) 0, _Cvt );
  } catch ( ... ) {
  _Tidy ( );
  throw;
  }

  if ( _Isdef )
   {

   _Dp = _Maklocchr ( '.', ( _Elem * ) 0, _Cvt );
   _Kseparator = _Maklocchr ( ',', ( _Elem * ) 0, _Cvt );
   }
  else
   _Getvals ( ( _Elem ) 0, _Ptr, _Cvt );
  }

 virtual _Elem do_decimal_point ( ) const
  {
  return ( _Dp );
  }

 virtual _Elem do_thousands_sep ( ) const
  {
  return ( _Kseparator );
  }

 virtual string do_grouping ( ) const
  {
  return ( string ( _Grouping ) );
  }

 virtual string_type do_falsename ( ) const
  {
  return ( string_type ( _Falsename ) );
  }

 virtual string_type do_truename ( ) const
  {
  return ( string_type ( _Truename ) );
  }

private :
 void _Tidy ( )
  {
  :: free ( ( void * ) _Grouping );
  :: free ( ( void * ) _Falsename );
  :: free ( ( void * ) _Truename );
  }

 const char * _Grouping;
 _Elem _Dp;
 _Elem _Kseparator;
 const _Elem * _Falsename;
 const _Elem * _Truename;
 };
#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
template < class _Elem >
 class numpunct_byname
  : public numpunct < _Elem >
 {
public :
 explicit numpunct_byname ( const char * _Locname, size_t _Refs = 0 )
  : numpunct < _Elem > ( _Locname, _Refs )
  {
  }

 explicit numpunct_byname ( const string & _Str, size_t _Refs = 0 )
  : numpunct < _Elem > ( _Str . c_str ( ), _Refs )
  {
  }

protected :
 virtual ~ numpunct_byname ( ) noexcept
  {
  }
 };
#line 293
template< class _Elem> locale::id 
#line 294
numpunct< _Elem> ::id; 
#line 297
template < class _Elem,
 class _InIt = istreambuf_iterator < _Elem, char_traits < _Elem > > >
 class num_get
  : public locale :: facet
 {
public :
 typedef numpunct < _Elem > _Mypunct;
 typedef basic_string < _Elem, char_traits < _Elem >, allocator < _Elem > >
  _Mystr;

 static size_t __cdecl _Getcat ( const locale :: facet * * _Ppf = 0,
  const locale * _Ploc = 0 )
  {
  if ( _Ppf != 0 && * _Ppf == 0 )
   * _Ppf = new num_get < _Elem, _InIt > (
    _Locinfo ( _Ploc -> c_str ( ) ) );
  return ( 4 );
  }

  static locale :: id id;

protected :
 virtual ~ num_get ( ) noexcept
  {
  }

 void _Init ( const _Locinfo & )
  {
  }

public :
 explicit num_get ( size_t _Refs = 0 )
  : locale :: facet ( _Refs )
  {
  { _Locinfo _Lobj;
   _Init ( _Lobj );
  }
  }

  num_get ( const _Locinfo & _Lobj, size_t _Refs = 0 )
  : locale :: facet ( _Refs )
  {
  _Init ( _Lobj );
  }

 typedef _Elem char_type;
 typedef _InIt iter_type;

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   bool & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   unsigned short & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   unsigned int & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   long & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   unsigned long & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   long long & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   unsigned long long & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   float & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   double & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   long double & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   void * & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

protected :
 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   bool & _Val ) const
  {
  ;
  int _Ans = - 1;

  if ( _Iosbase . flags ( ) & ios_base :: boolalpha )
   {
   typedef typename _Mystr :: size_type _Mystrsize;
   const _Mypunct & _Punct_fac = use_facet < _Mypunct > ( _Iosbase . getloc ( ) );
   _Mystr _Str ( ( _Mystrsize ) 1, ( char_type ) 0 );
   _Str += _Punct_fac . falsename ( );
   _Str += ( char_type ) 0;
   _Str += _Punct_fac . truename ( );
   _Ans = _Getloctxt ( _First, _Last, ( size_t ) 2, _Str . c_str ( ) );
   }
  else
   {
   char _Ac [ 32 ], * _Ep;
   int _Errno = 0;
   const unsigned long _Ulo = :: _Stoulx ( _Ac, & _Ep,
    _Getifld ( _Ac, _First, _Last, _Iosbase . flags ( ),
     _Iosbase . getloc ( ) ), & _Errno );
   if ( _Ep != _Ac && _Errno == 0 && _Ulo <= 1 )
    _Ans = _Ulo;
   }

  if ( _First == _Last )
   _State |= ios_base :: eofbit;
  if ( _Ans < 0 )
   _State |= ios_base :: failbit;
  else
   _Val = _Ans != 0;
  return ( _First );
  }

 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   unsigned short & _Val ) const
  {
  ;
  char _Ac [ 32 ], * _Ep;
  int _Errno = 0;
  int _Base = _Getifld ( _Ac, _First, _Last, _Iosbase . flags ( ),
   _Iosbase . getloc ( ) );
  char * _Ptr = _Ac [ 0 ] == '-' ? _Ac + 1 : _Ac;
  const unsigned long _Ans =
   :: _Stoulx ( _Ptr, & _Ep, _Base, & _Errno );

  if ( _First == _Last )
   _State |= ios_base :: eofbit;
  if ( _Ep == _Ptr || _Errno != 0 || 65535 < _Ans )
   _State |= ios_base :: failbit;
  else
   _Val = ( unsigned short ) ( _Ac [ 0 ] == '-'
    ? 0 - _Ans : _Ans );
  return ( _First );
  }

 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   unsigned int & _Val ) const
  {
  ;
  char _Ac [ 32 ], * _Ep;
  int _Errno = 0;
  int _Base = _Getifld ( _Ac, _First, _Last, _Iosbase . flags ( ),
   _Iosbase . getloc ( ) );
  char * _Ptr = _Ac [ 0 ] == '-' ? _Ac + 1 : _Ac;
  const unsigned long _Ans =
   :: _Stoulx ( _Ptr, & _Ep, _Base, & _Errno );

  if ( _First == _Last )
   _State |= ios_base :: eofbit;
  if ( _Ep == _Ptr || _Errno != 0 || 4294967295U < _Ans )
   _State |= ios_base :: failbit;
  else
   _Val = _Ac [ 0 ] == '-' ? 0 - _Ans : _Ans;
  return ( _First );
  }

 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   long & _Val ) const
  {
  ;
  char _Ac [ 32 ], * _Ep;
  int _Errno = 0;
  const long _Ans = :: _Stolx ( _Ac, & _Ep,
   _Getifld ( _Ac, _First, _Last, _Iosbase . flags ( ),
    _Iosbase . getloc ( ) ), & _Errno );

  if ( _First == _Last )
   _State |= ios_base :: eofbit;
  if ( _Ep == _Ac || _Errno != 0 )
   _State |= ios_base :: failbit;
  else
   _Val = _Ans;
  return ( _First );
  }

 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   unsigned long & _Val ) const
  {
  ;
  char _Ac [ 32 ], * _Ep;
  int _Errno = 0;
  const unsigned long _Ans = :: _Stoulx ( _Ac, & _Ep,
   _Getifld ( _Ac, _First, _Last, _Iosbase . flags ( ),
    _Iosbase . getloc ( ) ), & _Errno );

  if ( _First == _Last )
   _State |= ios_base :: eofbit;
  if ( _Ep == _Ac || _Errno != 0 )
   _State |= ios_base :: failbit;
  else
   _Val = _Ans;
  return ( _First );
  }

 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   long long & _Val ) const
  {
  ;
  char _Ac [ 32 ], * _Ep;
  int _Errno = 0;
  const long long _Ans = :: _Stollx ( _Ac, & _Ep,
   _Getifld ( _Ac, _First, _Last, _Iosbase . flags ( ),
    _Iosbase . getloc ( ) ), & _Errno );

  if ( _First == _Last )
   _State |= ios_base :: eofbit;
  if ( _Ep == _Ac || _Errno != 0 )
   _State |= ios_base :: failbit;
  else
   _Val = _Ans;
  return ( _First );
  }

 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   unsigned long long & _Val ) const
  {
  ;
  char _Ac [ 32 ], * _Ep;
  int _Errno = 0;
  const unsigned long long _Ans = :: _Stoullx ( _Ac, & _Ep,
   _Getifld ( _Ac, _First, _Last, _Iosbase . flags ( ),
    _Iosbase . getloc ( ) ), & _Errno );

  if ( _First == _Last )
   _State |= ios_base :: eofbit;
  if ( _Ep == _Ac || _Errno != 0 )
   _State |= ios_base :: failbit;
  else
   _Val = _Ans;
  return ( _First );
  }







 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   float & _Val ) const
  {
  ;
  char _Ac [ ( 8 + 768 + 16 ) ], * _Ep;
  int _Errno = 0;
  int _Hexexp = 1000000000;
  float _Ans = _Stofx_v2 ( _Ac, & _Ep,
   _Getffld ( _Ac, _First, _Last,
    _Iosbase, & _Hexexp ), & _Errno );

  if ( _Hexexp != 1000000000 && _Hexexp != 0 )
   _Ans = :: ldexpf ( _Ans, 4 * _Hexexp );

  if ( _First == _Last )
   _State |= ios_base :: eofbit;
  if ( _Ep == _Ac || _Errno != 0 )
   _State |= ios_base :: failbit;
  else
   _Val = _Ans;
  return ( _First );
  }

 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   double & _Val ) const
  {
  ;
  char _Ac [ ( 8 + 768 + 16 ) ], * _Ep;
  int _Errno = 0;
  int _Hexexp = 1000000000;
  double _Ans = _Stodx_v2 ( _Ac, & _Ep,
   _Getffld ( _Ac, _First, _Last,
    _Iosbase, & _Hexexp ), & _Errno );

  if ( _Hexexp != 1000000000 && _Hexexp != 0 )
   _Ans = :: ldexp ( _Ans, 4 * _Hexexp );

  if ( _First == _Last )
   _State |= ios_base :: eofbit;
  if ( _Ep == _Ac || _Errno != 0 )
   _State |= ios_base :: failbit;
  else
   _Val = _Ans;
  return ( _First );
  }

 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   long double & _Val ) const
  {
  ;
  char _Ac [ ( 8 + 768 + 16 ) ], * _Ep;
  int _Errno = 0;
  int _Hexexp = 1000000000;
  long double _Ans = _Stodx_v2 ( _Ac, & _Ep,
   _Getffld ( _Ac, _First, _Last,
    _Iosbase, & _Hexexp ), & _Errno );

  if ( _Hexexp != 1000000000 && _Hexexp != 0 )
   _Ans = :: ldexpl ( _Ans, 4 * _Hexexp );

  if ( _First == _Last )
   _State |= ios_base :: eofbit;
  if ( _Ep == _Ac || _Errno != 0 )
   _State |= ios_base :: failbit;
  else
   _Val = _Ans;
  return ( _First );
  }



 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   void * & _Val ) const
  {
  ;
  char _Ac [ 32 ], * _Ep;
  int _Errno = 0;

  int _Base = _Getifld ( _Ac, _First, _Last, ios_base :: hex,
   _Iosbase . getloc ( ) );
  const unsigned long long _Ans =
   ( sizeof ( void * ) == sizeof ( unsigned long ) )
    ? ( unsigned long long ) :: _Stoulx ( _Ac, & _Ep, _Base, & _Errno )
    : :: _Stoullx ( _Ac, & _Ep, _Base, & _Errno );

  if ( _First == _Last )
   _State |= ios_base :: eofbit;
  if ( _Ep == _Ac || _Errno != 0 )
   _State |= ios_base :: failbit;
  else
   _Val = ( void * ) ( ( char * ) 0 + _Ans );
  return ( _First );
  }

private :
 int __cdecl _Getifld ( char * _Ac,
  _InIt & _First, _InIt & _Last, ios_base :: fmtflags _Basefield,
   const locale & _Loc ) const
  {
  const _Mypunct & _Punct_fac = use_facet < _Mypunct > ( _Loc );
  const string _Grouping = _Punct_fac . grouping ( );
  const _Elem _Kseparator = _Grouping . size ( ) == 0
   ? ( _Elem ) 0 : _Punct_fac . thousands_sep ( );

  enum {
   _NUMGET_SIGNOFF = 22,
   _NUMGET_XOFF = 24 };
  static const char _Src [ ] = { "0123456789ABCDEFabcdef-+Xx" };
  _Elem _Atoms [ sizeof ( _Src ) ];
  const ctype < _Elem > & _Ctype_fac =
   use_facet < ctype < _Elem > > ( _Loc );
  _Ctype_fac . widen ( & _Src [ 0 ], & _Src [ sizeof ( _Src ) ], _Atoms );

  char * _Ptr = _Ac;

  if ( _First == _Last )
   ;
  else if ( * _First == _Atoms [ _NUMGET_SIGNOFF + 1 ] )
   * _Ptr ++ = '+', ++ _First;
  else if ( * _First == _Atoms [ _NUMGET_SIGNOFF ] )
   * _Ptr ++ = '-', ++ _First;

  _Basefield &= ios_base :: basefield;
  int _Base = _Basefield == ios_base :: oct ? 8
   : _Basefield == ios_base :: hex ? 16
   : _Basefield == ios_base :: _Fmtzero ? 0 : 10;

  bool _Seendigit = false;
  bool _Nonzero = false;

  if ( _First != _Last && * _First == _Atoms [ 0 ] )
   {
   _Seendigit = true, ++ _First;
   if ( _First != _Last && ( * _First == _Atoms [ _NUMGET_XOFF + 1 ]
     || * _First == _Atoms [ _NUMGET_XOFF ] )
    && ( _Base == 0 || _Base == 16 ) )
    _Base = 16, _Seendigit = false, ++ _First;
   else if ( _Base == 0 )
    _Base = 8;
   }

  size_t _Dlen = _Base == 0 || _Base == 10 ? 10
   : _Base == 8 ? 8 : 16 + 6;
  string _Groups ( ( size_t ) 1, ( char ) _Seendigit );
  size_t _Group = 0;

  for ( char * const _Pe = & _Ac [ 32 - 1 ];
   _First != _Last; ++ _First )
   {
   size_t _Idx = _Find_elem ( _Atoms, * _First );
   if ( _Idx < _Dlen )
    {
    * _Ptr = _Src [ _Idx ];
    if ( ( _Nonzero || * _Ptr != '0' ) && _Ptr < _Pe )
     ++ _Ptr, _Nonzero = true;
    _Seendigit = true;
    if ( _Groups [ _Group ] != 127 )
     ++ _Groups [ _Group ];
    }
   else if ( _Groups [ _Group ] == '\000'
    || _Kseparator == ( _Elem ) 0
    || * _First != _Kseparator )
    break;
   else
    {
    _Groups . append ( ( string :: size_type ) 1, '\000' );
    ++ _Group;
    }
   }

  if ( _Group == 0 )
   ;
  else if ( '\000' < _Groups [ _Group ] )
   ++ _Group;
  else
   _Seendigit = false;

  for ( const char * _Pg = & _Grouping [ 0 ]; _Seendigit && 0 < _Group; )
   if ( * _Pg == 127 )
    break;
   else if ( ( 0 < -- _Group && * _Pg != _Groups [ _Group ] )
    || ( 0 == _Group && * _Pg < _Groups [ _Group ] ) )
    _Seendigit = false;
   else if ( '\000' < _Pg [ 1 ] )
    ++ _Pg;

  if ( _Seendigit && ! _Nonzero )
   * _Ptr ++ = '0';
  else if ( ! _Seendigit )
   _Ptr = _Ac;
  * _Ptr = '\000';
  return ( _Base );
  }

 int __cdecl _Getffld ( char * _Ac,
  _InIt & _First, _InIt & _Last,
  ios_base & _Iosbase, int * _Phexexp ) const
  {
  if ( ( _Iosbase . flags ( ) & ios_base :: floatfield ) == ios_base :: hexfloat )
   return ( _Getffldx ( _Ac, _First, _Last,
    _Iosbase, _Phexexp ) );

  const _Mypunct & _Punct_fac = use_facet < _Mypunct > ( _Iosbase . getloc ( ) );
  const string _Grouping = _Punct_fac . grouping ( );
  char * _Ptr = _Ac;
  bool _Bad = false;
  bool _Sticky = false;

  enum {
   _NUMGET_SIGNOFF = 10,
   _NUMGET_EOFF = 12 };
  static const char _Src [ ] = { "0123456789-+Ee" };
  _Elem _Atoms [ sizeof ( _Src ) ];
  const ctype < _Elem > & _Ctype_fac =
   use_facet < ctype < _Elem > > ( _Iosbase . getloc ( ) );
  _Ctype_fac . widen ( & _Src [ 0 ], & _Src [ sizeof ( _Src ) ], _Atoms );

  if ( _First == _Last )
   ;
  else if ( * _First == _Atoms [ _NUMGET_SIGNOFF + 1 ] )
   * _Ptr ++ = '+', ++ _First;
  else if ( * _First == _Atoms [ _NUMGET_SIGNOFF ] )
   * _Ptr ++ = '-', ++ _First;

  char * _Leading = _Ptr;
  * _Ptr ++ = '0';

  bool _Seendigit = false;
  int _Significant = 0;
  int _Pten = 0;
  size_t _Idx;

  const int _Max_sig_dig = ( * _Phexexp == 1000000000 ? 768 : 36 );

  const char * _Pg = & _Grouping [ 0 ];
  if ( * _Pg == 127 || * _Pg <= '\000' )
   for (; _First != _Last
    && ( _Idx = _Find_elem ( _Atoms, * _First ) ) < 10;
     _Seendigit = true, ++ _First )
    if ( _Max_sig_dig <= _Significant )
     {
     ++ _Pten;
     if ( 0 < _Idx )
      _Sticky = true;
     }
    else if ( _Idx == 0 && _Significant == 0 )
     ;
    else
     {
     * _Ptr ++ = _Src [ _Idx ];
     ++ _Significant;
     }
  else
   {
   const _Elem _Kseparator = _Grouping . size ( ) == 0
    ? ( _Elem ) 0 : _Punct_fac . thousands_sep ( );
   string _Groups ( ( size_t ) 1, '\000' );
   size_t _Group = 0;

   for (; _First != _Last; ++ _First )
    if ( ( _Idx = _Find_elem ( _Atoms, * _First ) ) < 10 )
     {
     _Seendigit = true;
     if ( _Max_sig_dig <= _Significant )
      {
      ++ _Pten;
      if ( 0 < _Idx )
       _Sticky = true;
      }
     else if ( _Idx == 0 && _Significant == 0 )
      ;
     else
      {
      * _Ptr ++ = _Src [ _Idx ];
      ++ _Significant;
      }
     if ( _Groups [ _Group ] != 127 )
      ++ _Groups [ _Group ];
     }
    else if ( _Groups [ _Group ] == '\000'
     || _Kseparator == ( _Elem ) 0
     || * _First != _Kseparator )
     break;
    else
     {
     _Groups . append ( ( size_t ) 1, '\000' );
     ++ _Group;
     }
   if ( _Group == 0 )
    ;
   else if ( '\000' < _Groups [ _Group ] )
    ++ _Group;
   else
    _Bad = true;

   while ( ! _Bad && 0 < _Group )
    if ( * _Pg == 127 )
     break;
    else if ( ( 0 < -- _Group && * _Pg != _Groups [ _Group ] )
     || ( 0 == _Group && * _Pg < _Groups [ _Group ] ) )
     _Bad = true;
    else if ( '\000' < _Pg [ 1 ] )
     ++ _Pg;
   }

  if ( _First != _Last && * _First == _Punct_fac . decimal_point ( ) )
   * _Ptr ++ = localeconv ( ) -> decimal_point [ 0 ], ++ _First;

  if ( * _Phexexp != 1000000000 && _Significant == 0 )
   {
   for (; _First != _Last && * _First == _Atoms [ 0 ];
    _Seendigit = true, ++ _First )
    -- _Pten;
   if ( _Pten < 0 )
    * _Ptr ++ = '0', ++ _Pten;
   }

  for (; _First != _Last
    && ( _Idx = _Find_elem ( _Atoms, * _First ) ) < 10;
    _Seendigit = true, ++ _First )
   if ( _Significant < _Max_sig_dig )
    {
    * _Ptr ++ = _Src [ _Idx ];
    ++ _Significant;
    }
   else if ( 0 < _Idx )
    _Sticky = true;

  if ( _Sticky )
   {
   char * _Px = _Ptr;
   for (; -- _Px != _Leading; )
    {
    if ( * _Px == localeconv ( ) -> decimal_point [ 0 ] )
     ;
    else if ( * _Px != '9' )
     {
     ++ * _Px;
     break;
     }
    else
     * _Px = '0';
    }

   if ( _Px == _Leading )
    {
    * _Px = '1';
    ++ _Pten;
    }
   }

  if ( _Seendigit && _First != _Last
   && ( * _First == _Atoms [ _NUMGET_EOFF + 1 ]
    || * _First == _Atoms [ _NUMGET_EOFF ] ) )
   {
   * _Ptr ++ = 'e', ++ _First;
   _Seendigit = false, _Significant = 0;

   if ( _First == _Last )
    ;
   else if ( * _First == _Atoms [ _NUMGET_SIGNOFF + 1 ] )
    * _Ptr ++ = '+', ++ _First;
   else if ( * _First == _Atoms [ _NUMGET_SIGNOFF ] )
    * _Ptr ++ = '-', ++ _First;
   for (; _First != _Last && * _First == _Atoms [ 0 ]; )
    _Seendigit = true, ++ _First;
   if ( _Seendigit )
    * _Ptr ++ = '0';
   for (; _First != _Last
    && ( _Idx = _Find_elem ( _Atoms, * _First ) ) < 10;
    _Seendigit = true, ++ _First )
    if ( _Significant < 8 )
     {
     * _Ptr ++ = _Src [ _Idx ];
     ++ _Significant;
     }
   }

  if ( _Bad || ! _Seendigit )
   _Ptr = _Ac;
  * _Ptr = '\000';
  return ( _Pten );
  }

 int __cdecl _Getffldx ( char * _Ac,
  _InIt & _First, _InIt & _Last,
  ios_base & _Iosbase, int * _Phexexp ) const
  {
  const _Mypunct & _Punct_fac = use_facet < _Mypunct > ( _Iosbase . getloc ( ) );
  const string _Grouping = _Punct_fac . grouping ( );

  enum {
   _NUMGET_SIGNOFF = 22,
   _NUMGET_XOFF = 24,
   _NUMGET_POFF = 26 };
  static const char _Src [ ] = { "0123456789ABCDEFabcdef-+XxPp" };
  _Elem _Atoms [ sizeof ( _Src ) ];
  const ctype < _Elem > & _Ctype_fac =
   use_facet < ctype < _Elem > > ( _Iosbase . getloc ( ) );
  _Ctype_fac . widen ( & _Src [ 0 ], & _Src [ sizeof ( _Src ) ], _Atoms );

  char * _Ptr = _Ac;
  bool _Bad = false;
  size_t _Idx;

  if ( _First == _Last )
   ;
  else if ( * _First == _Atoms [ _NUMGET_SIGNOFF + 1 ] )
   * _Ptr ++ = '+', ++ _First;
  else if ( * _First == _Atoms [ _NUMGET_SIGNOFF ] )
   * _Ptr ++ = '-', ++ _First;

  * _Ptr ++ = '0';
  * _Ptr ++ = 'x';

  bool _Seendigit = false;
  int _Significant = 0;
  int _Phex = 0;

  if ( _First == _Last || * _First != _Atoms [ 0 ] )
   ;
  else if ( ++ _First != _Last
   && ( * _First == _Atoms [ _NUMGET_XOFF + 1 ]
    || * _First == _Atoms [ _NUMGET_XOFF ] ) )
   ++ _First;
  else
   _Seendigit = true;

  const int _Max_sig_dig = ( * _Phexexp == 1000000000 ? 768 : 36 );

  const char * _Pg = & _Grouping [ 0 ];
  if ( * _Pg == 127 || * _Pg <= '\000' )
   for (; _First != _Last
    && ( _Idx = _Find_elem ( _Atoms, * _First ) ) < _NUMGET_SIGNOFF;
     _Seendigit = true, ++ _First )
    if ( _Max_sig_dig <= _Significant )
     ++ _Phex;
    else if ( _Idx == 0 && _Significant == 0 )
     ;
    else
     {
     * _Ptr ++ = _Src [ _Idx ];
     ++ _Significant;
     }
  else
   {
   const _Elem _Kseparator = _Grouping . size ( ) == 0
    ? ( _Elem ) 0 : _Punct_fac . thousands_sep ( );
   string _Groups ( ( size_t ) 1, '\000' );
   size_t _Group = 0;

   for (; _First != _Last; ++ _First )
    if ( ( _Idx = _Find_elem ( _Atoms, * _First ) ) < _NUMGET_SIGNOFF )
     {
     _Seendigit = true;
     if ( _Max_sig_dig <= _Significant )
      ++ _Phex;
     else if ( _Idx == 0 && _Significant == 0 )
      ;
     else
      {
      * _Ptr ++ = _Src [ _Idx ];
      ++ _Significant;
      }
     if ( _Groups [ _Group ] != 127 )
      ++ _Groups [ _Group ];
     }
    else if ( _Groups [ _Group ] == '\000'
     || _Kseparator == ( _Elem ) 0
     || * _First != _Kseparator )
     break;
    else
     {
     _Groups . append ( ( size_t ) 1, '\000' );
     ++ _Group;
     }
   if ( _Group == 0 )
    ;
   else if ( '\000' < _Groups [ _Group ] )
    ++ _Group;
   else
    _Bad = true;

   while ( ! _Bad && 0 < _Group )
    if ( * _Pg == 127 )
     break;
    else if ( ( 0 < -- _Group && * _Pg != _Groups [ _Group ] )
     || ( 0 == _Group && * _Pg < _Groups [ _Group ] ) )
     _Bad = true;
    else if ( '\000' < _Pg [ 1 ] )
     ++ _Pg;
   }

  if ( _Seendigit && _Significant == 0 )
   * _Ptr ++ = '0';

  if ( _First != _Last && * _First == _Punct_fac . decimal_point ( ) )
   * _Ptr ++ = localeconv ( ) -> decimal_point [ 0 ], ++ _First;

  if ( _Significant == 0 )
   {
   for (; _First != _Last && * _First == _Atoms [ 0 ];
    _Seendigit = true, ++ _First )
    -- _Phex;
   if ( _Phex < 0 )
    * _Ptr ++ = '0', ++ _Phex;
   }

  for (; _First != _Last
    && ( _Idx = _Find_elem ( _Atoms, * _First ) ) < _NUMGET_SIGNOFF;
    _Seendigit = true, ++ _First )
   if ( _Significant < _Max_sig_dig )
    {
    * _Ptr ++ = _Src [ _Idx ];
    ++ _Significant;
    }

  if ( _Seendigit && _First != _Last
   && ( * _First == _Atoms [ _NUMGET_POFF + 1 ]
    || * _First == _Atoms [ _NUMGET_POFF ] ) )
   {
   * _Ptr ++ = 'p', ++ _First;
   _Seendigit = false, _Significant = 0;

   if ( _First == _Last )
    ;
   else if ( * _First == _Atoms [ _NUMGET_SIGNOFF + 1 ] )
    * _Ptr ++ = '+', ++ _First;
   else if ( * _First == _Atoms [ _NUMGET_SIGNOFF ] )
    * _Ptr ++ = '-', ++ _First;
   for (; _First != _Last && * _First == _Atoms [ 0 ]; )
    _Seendigit = true, ++ _First;
   if ( _Seendigit )
    * _Ptr ++ = '0';
   for (; _First != _Last
    && ( _Idx = _Find_elem ( _Atoms, * _First ) ) < _NUMGET_SIGNOFF;
    _Seendigit = true, ++ _First )
    if ( _Significant < 8 )
     {
     * _Ptr ++ = _Src [ _Idx ];
     ++ _Significant;
     }
   }

  if ( _Bad || ! _Seendigit )
   _Ptr = _Ac;
  * _Ptr = '\000';
  * _Phexexp = _Phex;
  return ( 0 );
  }



 };
#line 1151
template< class _Elem, class 
#line 1152
_InIt> locale::id 
#line 1153
num_get< _Elem, _InIt> ::id; 
#line 1156
template < class _Elem,
 class _OutIt = ostreambuf_iterator < _Elem, char_traits < _Elem > > >
 class num_put
  : public locale :: facet
 {
public :
 typedef numpunct < _Elem > _Mypunct;
 typedef basic_string < _Elem, char_traits < _Elem >, allocator < _Elem > >
  _Mystr;

 static size_t __cdecl _Getcat ( const locale :: facet * * _Ppf = 0,
  const locale * _Ploc = 0 )
  {
  if ( _Ppf != 0 && * _Ppf == 0 )
   * _Ppf = new num_put < _Elem, _OutIt > (
    _Locinfo ( _Ploc -> c_str ( ) ) );
  return ( 4 );
  }

  static locale :: id id;

protected :
 virtual ~ num_put ( ) noexcept
  {
  }

 void _Init ( const _Locinfo & )
  {
  }

public :
 explicit num_put ( size_t _Refs = 0 )
  : locale :: facet ( _Refs )
  {
  { _Locinfo _Lobj;
   _Init ( _Lobj );
  }
  }

  num_put ( const _Locinfo & _Lobj, size_t _Refs = 0 )
  : locale :: facet ( _Refs )
  {
  _Init ( _Lobj );
  }

 typedef _Elem char_type;
 typedef _OutIt iter_type;

 _OutIt put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, bool _Val ) const
  {
  return ( do_put ( _Dest, _Iosbase, _Fill, _Val ) );
  }

 _OutIt put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, long _Val ) const
  {
  return ( do_put ( _Dest, _Iosbase, _Fill, _Val ) );
  }

 _OutIt put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, unsigned long _Val ) const
  {
  return ( do_put ( _Dest, _Iosbase, _Fill, _Val ) );
  }

 _OutIt put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, long long _Val ) const
  {
  return ( do_put ( _Dest, _Iosbase, _Fill, _Val ) );
  }

 _OutIt put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, unsigned long long _Val ) const
  {
  return ( do_put ( _Dest, _Iosbase, _Fill, _Val ) );
  }

 _OutIt put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, double _Val ) const
  {
  return ( do_put ( _Dest, _Iosbase, _Fill, _Val ) );
  }

 _OutIt put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, long double _Val ) const
  {
  return ( do_put ( _Dest, _Iosbase, _Fill, _Val ) );
  }

 _OutIt put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, const void * _Val ) const
  {
  return ( do_put ( _Dest, _Iosbase, _Fill, _Val ) );
  }

protected :
 virtual _OutIt do_put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, bool _Val ) const
  {
  ;
  if ( ! ( _Iosbase . flags ( ) & ios_base :: boolalpha ) )
   return ( do_put ( _Dest, _Iosbase, _Fill, ( long ) _Val ) );
  else
   {
   const _Mypunct & _Punct_fac = use_facet < _Mypunct > ( _Iosbase . getloc ( ) );
   _Mystr _Str;
   if ( _Val )
    _Str . assign ( _Punct_fac . truename ( ) );
   else
    _Str . assign ( _Punct_fac . falsename ( ) );

   size_t _Fillcount = _Iosbase . width ( ) <= 0
    || ( size_t ) _Iosbase . width ( ) <= _Str . size ( )
     ? 0 : ( size_t ) _Iosbase . width ( ) - _Str . size ( );

   if ( ( _Iosbase . flags ( ) & ios_base :: adjustfield ) != ios_base :: left )
    {
    _Dest = _Rep ( _Dest, _Fill, _Fillcount );
    _Fillcount = 0;
    }
   _Dest = _Put ( _Dest, _Str . c_str ( ), _Str . size ( ) );
   _Iosbase . width ( 0 );
   return ( _Rep ( _Dest, _Fill, _Fillcount ) );
   }
  }

 virtual _OutIt do_put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, long _Val ) const
  {
  char _Buf [ 2 * 32 ], _Fmt [ 6 ];

  return ( _Iput ( _Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s ( _Buf, sizeof ( _Buf ), _Ifmt ( _Fmt, "ld",
    _Iosbase . flags ( ) ), _Val ) ) );
  }

 virtual _OutIt do_put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, unsigned long _Val ) const
  {
  char _Buf [ 2 * 32 ], _Fmt [ 6 ];

  return ( _Iput ( _Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s ( _Buf, sizeof ( _Buf ), _Ifmt ( _Fmt, "lu",
    _Iosbase . flags ( ) ), _Val ) ) );
  }

 virtual _OutIt do_put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, long long _Val ) const
  {
  char _Buf [ 2 * 32 ], _Fmt [ 8 ];

  return ( _Iput ( _Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s ( _Buf, sizeof ( _Buf ), _Ifmt ( _Fmt, "Ld",
    _Iosbase . flags ( ) ), _Val ) ) );
  }

 virtual _OutIt do_put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, unsigned long long _Val ) const
  {
  char _Buf [ 2 * 32 ], _Fmt [ 8 ];

  return ( _Iput ( _Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s ( _Buf, sizeof ( _Buf ), _Ifmt ( _Fmt, "Lu",
    _Iosbase . flags ( ) ), _Val ) ) );
  }

 virtual _OutIt do_put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, double _Val ) const
  {
  string _Buf;
  char _Fmt [ 8 ];
  bool _Isfixed = ( _Iosbase . flags ( ) & ios_base :: floatfield )
   == ios_base :: fixed;
  streamsize _Precision = _Iosbase . precision ( ) <= 0 && ! _Isfixed
   ? 6 : _Iosbase . precision ( );
  size_t _Bufsize = ( size_t ) _Precision;
  if ( _Isfixed && (10000000000.0) < :: fabs ( _Val ) )
   {
   int _Ptwo;
   ( void ) :: frexp ( _Val, & _Ptwo );
   _Bufsize += :: abs ( _Ptwo ) * 30103L / 100000L;
   }
  _Buf . resize ( _Bufsize + 50 );

  int _Ngen = :: sprintf_s ( ( char * ) _Buf . c_str ( ), _Buf . size ( ),
   _Ffmt ( _Fmt, 0, _Iosbase . flags ( ) ), ( int ) _Precision, _Val );

  return ( _Fput ( _Dest, _Iosbase, _Fill, _Buf . c_str ( ), _Ngen ) );
  }

 virtual _OutIt do_put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, long double _Val ) const
  {
  string _Buf;
  char _Fmt [ 8 ];
  bool _Isfixed = ( _Iosbase . flags ( ) & ios_base :: floatfield )
   == ios_base :: fixed;
  streamsize _Precision = _Iosbase . precision ( ) <= 0 && ! _Isfixed
   ? 6 : _Iosbase . precision ( );
  size_t _Bufsize = ( size_t ) _Precision;
  if ( _Isfixed && (10000000000.0) < :: fabsl ( _Val ) )
   {
   int _Ptwo;
   ( void ) :: frexpl ( _Val, & _Ptwo );
   _Bufsize += :: abs ( _Ptwo ) * 30103L / 100000L;
   }
  _Buf . resize ( _Bufsize + 50 );

  int _Ngen = :: sprintf_s ( ( char * ) _Buf . c_str ( ), _Buf . size ( ),
   _Ffmt ( _Fmt, 'L', _Iosbase . flags ( ) ), ( int ) _Precision, _Val );

  return ( _Fput ( _Dest, _Iosbase, _Fill, _Buf . c_str ( ), _Ngen ) );
  }

 virtual _OutIt do_put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, const void * _Val ) const
  {
  char _Buf [ 2 * 32 ];

  return ( _Iput ( _Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s ( _Buf, sizeof ( _Buf ), "%p", _Val ) ) );
  }

private :
 char * __cdecl _Ffmt ( char * _Fmt,
  char _Spec, ios_base :: fmtflags _Flags ) const
  {
  char * _Ptr = _Fmt;
  * _Ptr ++ = '%';

  if ( _Flags & ios_base :: showpos )
   * _Ptr ++ = '+';
  if ( _Flags & ios_base :: showpoint )
   * _Ptr ++ = '#';
  * _Ptr ++ = '.';
  * _Ptr ++ = '*';
  if ( _Spec != '\000' )
   * _Ptr ++ = _Spec;

  ios_base :: fmtflags _Ffl = _Flags & ios_base :: floatfield;
  if ( _Flags & ios_base :: uppercase )
   * _Ptr ++ = _Ffl == ios_base :: fixed ? 'f'
    : _Ffl == ios_base :: hexfloat ? 'A'
    : _Ffl == ios_base :: scientific ? 'E' : 'G';
  else
   * _Ptr ++ = _Ffl == ios_base :: fixed ? 'f'
    : _Ffl == ios_base :: hexfloat ? 'a'
    : _Ffl == ios_base :: scientific ? 'e' : 'g';

  * _Ptr = '\000';
  return ( _Fmt );
  }

 _OutIt __cdecl _Fput ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, const char * _Buf,
   size_t _Count ) const
  {
  ;
  size_t _Prefix = 0 < _Count && ( * _Buf == '+' || * _Buf == '-' )
   ? 1 : 0;

  const char * _Exps;
  if ( ( _Iosbase . flags ( ) & ios_base :: floatfield ) != ios_base :: hexfloat )
   _Exps = "eE";
  else
   {
   _Exps = "pP";
   if ( _Prefix + 2 <= _Count && _Buf [ _Prefix ] == '0'
    && ( _Buf [ _Prefix + 1 ] == 'x' || _Buf [ _Prefix + 1 ] == 'X' ) )
    _Prefix += 2;
   }
  const size_t _Eoff =
   :: strcspn ( & _Buf [ 0 ], _Exps );
  char _Dp [ 2 ] = { "." };
  _Dp [ 0 ] = :: localeconv ( ) -> decimal_point [ 0 ];
  const size_t _Poff =
   :: strcspn ( & _Buf [ 0 ], & _Dp [ 0 ] );

  const ctype < _Elem > & _Ctype_fac =
   use_facet < ctype < _Elem > > ( _Iosbase . getloc ( ) );
  _Mystr _Groupstring ( _Count, _Elem ( 0 ) );
  _Ctype_fac . widen ( & _Buf [ 0 ], & _Buf [ _Count ], & _Groupstring [ 0 ] );

  const _Mypunct & _Punct_fac = use_facet < _Mypunct > ( _Iosbase . getloc ( ) );
  const string _Grouping = _Punct_fac . grouping ( );
  const _Elem _Kseparator = _Punct_fac . thousands_sep ( );

  if ( _Poff != _Count )
   _Groupstring [ _Poff ] = _Punct_fac . decimal_point ( );

  size_t _Off = _Poff == _Count ? _Eoff : _Poff;
  const char * _Pg = & _Grouping [ 0 ];
  while ( * _Pg != 127 && '\000' < * _Pg
   && ( size_t ) * _Pg < _Off - _Prefix )
   {
   _Groupstring . insert ( _Off -= * _Pg, ( size_t ) 1, _Kseparator );
   if ( '\000' < _Pg [ 1 ] )
    ++ _Pg;
   }

  _Count = _Groupstring . size ( );
  size_t _Fillcount = _Iosbase . width ( ) <= 0
   || ( size_t ) _Iosbase . width ( ) <= _Count
    ? 0 : ( size_t ) _Iosbase . width ( ) - _Count;

  ios_base :: fmtflags _Adjustfield =
   _Iosbase . flags ( ) & ios_base :: adjustfield;
  if ( _Adjustfield != ios_base :: left
   && _Adjustfield != ios_base :: internal )
   {
   _Dest = _Rep ( _Dest, _Fill, _Fillcount );
   _Fillcount = 0;
   _Dest = _Put ( _Dest, & _Groupstring [ 0 ], _Prefix );
   }
  else if ( _Adjustfield == ios_base :: internal )
   {
   _Dest = _Put ( _Dest, & _Groupstring [ 0 ], _Prefix );
   _Dest = _Rep ( _Dest, _Fill, _Fillcount );
   _Fillcount = 0;
   }
  else
   _Dest = _Put ( _Dest, & _Groupstring [ 0 ], _Prefix );

  _Dest = _Put ( _Dest, & _Groupstring [ _Prefix ], _Count - _Prefix );
  _Iosbase . width ( 0 );
  return ( _Rep ( _Dest, _Fill, _Fillcount ) );
  }

 char * __cdecl _Ifmt ( char * _Fmt,
  const char * _Spec, ios_base :: fmtflags _Flags ) const
  {
  char * _Ptr = _Fmt;
  * _Ptr ++ = '%';

  if ( _Flags & ios_base :: showpos )
   * _Ptr ++ = '+';
  if ( _Flags & ios_base :: showbase )
   * _Ptr ++ = '#';
  if ( _Spec [ 0 ] != 'L' )
   * _Ptr ++ = _Spec [ 0 ];
  else

   {
   * _Ptr ++ = 'I';
   * _Ptr ++ = '6';
   * _Ptr ++ = '4';
   }

  ios_base :: fmtflags _Basefield = _Flags & ios_base :: basefield;
  * _Ptr ++ = _Basefield == ios_base :: oct ? 'o'
   : _Basefield != ios_base :: hex ? _Spec [ 1 ]
   : _Flags & ios_base :: uppercase ? 'X' : 'x';
  * _Ptr = '\000';
  return ( _Fmt );
  }

 _OutIt __cdecl _Iput ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, char * _Buf, size_t _Count ) const
  {
  ;
  size_t _Prefix = 0 < _Count && ( * _Buf == '+' || * _Buf == '-' )
   ? 1 : 0;
  if ( ( _Iosbase . flags ( ) & ios_base :: basefield ) == ios_base :: hex
   && _Prefix + 2 <= _Count && _Buf [ _Prefix ] == '0'
   && ( _Buf [ _Prefix + 1 ] == 'x' || _Buf [ _Prefix + 1 ] == 'X' ) )
   _Prefix += 2;

  const ctype < _Elem > & _Ctype_fac =
   use_facet < ctype < _Elem > > ( _Iosbase . getloc ( ) );
  _Mystr _Groupstring ( _Count, _Elem ( 0 ) );
  _Ctype_fac . widen ( & _Buf [ 0 ], & _Buf [ _Count ], & _Groupstring [ 0 ] );

  const _Mypunct & _Punct_fac = use_facet < _Mypunct > ( _Iosbase . getloc ( ) );
  const string _Grouping = _Punct_fac . grouping ( );
  const char * _Pg = & _Grouping [ 0 ];
  if ( * _Pg != 127 && '\000' < * _Pg )
   {
   const _Elem _Kseparator = _Punct_fac . thousands_sep ( );
   while ( * _Pg != 127 && '\000' < * _Pg
    && ( size_t ) * _Pg < _Count - _Prefix )
    {
    _Count -= * _Pg;
    _Groupstring . insert ( _Count, 1, _Kseparator );
    if ( '\000' < _Pg [ 1 ] )
     ++ _Pg;
    }
   }

  _Count = _Groupstring . size ( );
  size_t _Fillcount = _Iosbase . width ( ) <= 0
   || ( size_t ) _Iosbase . width ( ) <= _Count
    ? 0 : ( size_t ) _Iosbase . width ( ) - _Count;

  ios_base :: fmtflags _Adjustfield =
   _Iosbase . flags ( ) & ios_base :: adjustfield;
  if ( _Adjustfield != ios_base :: left
   && _Adjustfield != ios_base :: internal )
   {
   _Dest = _Rep ( _Dest, _Fill, _Fillcount );
   _Fillcount = 0;
   _Dest = _Put ( _Dest, & _Groupstring [ 0 ], _Prefix );
   }
  else if ( _Adjustfield == ios_base :: internal )
   {
   _Dest = _Put ( _Dest, & _Groupstring [ 0 ], _Prefix );
   _Dest = _Rep ( _Dest, _Fill, _Fillcount );
   _Fillcount = 0;
   }
  else
   _Dest = _Put ( _Dest, & _Groupstring [ 0 ], _Prefix );

  _Dest = _Put ( _Dest, & _Groupstring [ _Prefix ], _Count - _Prefix );
  _Iosbase . width ( 0 );
  return ( _Rep ( _Dest, _Fill, _Fillcount ) );
  }

 _OutIt __cdecl _Put ( _OutIt _Dest,
  const _Elem * _Ptr, size_t _Count ) const
  {
  for (; 0 < _Count; -- _Count, ( void ) ++ _Dest, ++ _Ptr )
   * _Dest = * _Ptr;
  return ( _Dest );
  }

 _OutIt __cdecl _Rep ( _OutIt _Dest,
  _Elem _Ch, size_t _Count ) const
  {
  for (; 0 < _Count; -- _Count, ( void ) ++ _Dest )
   * _Dest = _Ch;
  return ( _Dest );
  }
 };
#line 1591
template< class _Elem, class 
#line 1592
_OutIt> locale::id 
#line 1593
num_put< _Elem, _OutIt> ::id; 
#line 1598
template locale::id numpunct< char> ::id;
#line 1599
template class __declspec(dllimport) num_get< char, istreambuf_iterator< char, char_traits< char> > > ;
#line 1601
template class __declspec(dllimport) num_put< char, ostreambuf_iterator< char, char_traits< char> > > ;
#line 1604
template locale::id numpunct< __wchar_t> ::id;
#line 1605
template class __declspec(dllimport) num_get< __wchar_t, istreambuf_iterator< __wchar_t, char_traits< __wchar_t> > > ;
#line 1607
template class __declspec(dllimport) num_put< __wchar_t, ostreambuf_iterator< __wchar_t, char_traits< __wchar_t> > > ;
#line 1619 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
}
#line 1621
#pragma warning(pop)
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
#pragma warning(push,3)
#line 13
#pragma warning(disable: 4189)
#line 1622 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
#pragma pack ( pop )
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
#pragma pack ( push, 8 )
#line 15
namespace std { 
#line 17
template < class _Elem,
 class _Traits >
 class basic_ios
  : public ios_base
 {
public :
 typedef basic_ios < _Elem, _Traits > _Myt;
 typedef basic_ostream < _Elem, _Traits > _Myos;
 typedef basic_streambuf < _Elem, _Traits > _Mysb;
 typedef ctype < _Elem > _Ctype;
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef typename _Traits :: int_type int_type;
 typedef typename _Traits :: pos_type pos_type;
 typedef typename _Traits :: off_type off_type;

 explicit basic_ios ( _Mysb * _Strbuf )
  {
  init ( _Strbuf );
  }

 virtual ~ basic_ios ( ) noexcept
  {
  }

 void clear ( iostate _State = goodbit,
  bool _Reraise = false )
  {
  ios_base :: clear ( ( iostate ) ( _Mystrbuf == 0
   ? ( int ) _State | ( int ) badbit : ( int ) _State ), _Reraise );
  }


 void clear ( io_state _State )
  {
  clear ( ( iostate ) _State );
  }


 void setstate ( iostate _State,
  bool _Reraise = false )
  {
  if ( _State != goodbit )
   clear ( ( iostate ) ( ( int ) rdstate ( ) | ( int ) _State ), _Reraise );
  }


 void setstate ( io_state _State )
  {
  setstate ( ( iostate ) _State );
  }


 _Myt & copyfmt ( const _Myt & _Right )
  {
  _Tiestr = _Right . tie ( );
  _Fillch = _Right . fill ( );
  ios_base :: copyfmt ( _Right );
  return ( * this );
  }

 _Myos * tie ( ) const
  {
  return ( _Tiestr );
  }

 _Myos * tie ( _Myos * _Newtie )
  {
  _Myos * _Oldtie = _Tiestr;
  _Tiestr = _Newtie;
  return ( _Oldtie );
  }

 _Mysb * rdbuf ( ) const
  {
  return ( _Mystrbuf );
  }

 _Mysb * rdbuf ( _Mysb * _Strbuf )
  {
  _Mysb * _Oldstrbuf = _Mystrbuf;
  _Mystrbuf = _Strbuf;
  clear ( );
  return ( _Oldstrbuf );
  }

 locale imbue ( const locale & _Loc )
  {
  locale _Oldlocale = ios_base :: imbue ( _Loc );
  if ( rdbuf ( ) != 0 )
   rdbuf ( ) -> pubimbue ( _Loc );
  return ( _Oldlocale );
  }

 _Elem fill ( ) const
  {
  return ( _Fillch );
  }

 _Elem fill ( _Elem _Newfill )
  {
  _Elem _Oldfill = _Fillch;
  _Fillch = _Newfill;
  return ( _Oldfill );
  }

 char narrow ( _Elem _Ch, char _Dflt = '\000' ) const
  {
  const _Ctype & _Ctype_fac = use_facet < _Ctype > ( getloc ( ) );
  return ( _Ctype_fac . narrow ( _Ch, _Dflt ) );
  }

 _Elem widen ( char _Byte ) const
  {
  const _Ctype & _Ctype_fac = use_facet < _Ctype > ( getloc ( ) );
  return ( _Ctype_fac . widen ( _Byte ) );
  }

 void move ( _Myt & _Right )
  {
  if ( this != & _Right )
   {
   _Mystrbuf = 0;
   _Tiestr = 0;
   this -> swap ( _Right );
   }
  }

 void move ( _Myt && _Right )
  {
  if ( this != & _Right )
   {
   _Mystrbuf = 0;
   _Tiestr = 0;
   this -> swap ( _Right );
   }
  }

 void swap ( _Myt & _Right ) noexcept
  {
  ios_base :: swap ( _Right );
  :: std :: swap ( _Fillch, _Right . _Fillch );
  :: std :: swap ( _Tiestr, _Right . _Tiestr );
  }

 void set_rdbuf ( _Mysb * _Strbuf )
  {
  _Mystrbuf = _Strbuf;
  }

protected :
 void init ( _Mysb * _Strbuf = 0,
  bool _Isstd = false )
  {
  _Init ( );
  _Mystrbuf = _Strbuf;
  _Tiestr = 0;
  _Fillch = widen ( ' ' );

  if ( _Mystrbuf == 0 )
   setstate ( badbit );

  if ( _Isstd )
   _Addstd ( this );
  }

  basic_ios ( )
  {
  }

private :
 _Mysb * _Mystrbuf;
 _Myos * _Tiestr;
 _Elem _Fillch;

public :
  basic_ios ( const _Myt & ) = delete;
 _Myt & operator = ( const _Myt & ) = delete;
 };
#line 200 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
template class __declspec(dllimport) basic_ios< char, char_traits< char> > ;
#line 202
template class __declspec(dllimport) basic_ios< __wchar_t, char_traits< __wchar_t> > ;
#line 213 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl boolalpha(ios_base &_Iosbase) 
#line 214
{ 
#line 215
_Iosbase.setf(_Iosb< int> ::boolalpha); 
#line 216
return _Iosbase; 
#line 217
} 
#line 219
inline ios_base &__cdecl dec(ios_base &_Iosbase) 
#line 220
{ 
#line 221
_Iosbase.setf(_Iosb< int> ::dec, _Iosb< int> ::basefield); 
#line 222
return _Iosbase; 
#line 223
} 
#line 225
inline ios_base &__cdecl defaultfloat(ios_base &_Iosbase) 
#line 226
{ 
#line 227
_Iosbase.unsetf(_Iosb< int> ::floatfield); 
#line 228
return _Iosbase; 
#line 229
} 
#line 231
inline ios_base &__cdecl fixed(ios_base &_Iosbase) 
#line 232
{ 
#line 233
_Iosbase.setf(_Iosb< int> ::fixed, _Iosb< int> ::floatfield); 
#line 234
return _Iosbase; 
#line 235
} 
#line 237
inline ios_base &__cdecl hex(ios_base &_Iosbase) 
#line 238
{ 
#line 239
_Iosbase.setf(_Iosb< int> ::hex, _Iosb< int> ::basefield); 
#line 240
return _Iosbase; 
#line 241
} 
#line 243
inline ios_base &__cdecl hexfloat(ios_base &_Iosbase) 
#line 244
{ 
#line 245
_Iosbase.setf(_Iosb< int> ::hexfloat, _Iosb< int> ::floatfield); 
#line 246
return _Iosbase; 
#line 247
} 
#line 250
namespace tr1 { 
#line 251
using std::hexfloat;
#line 252
}
#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl internal(ios_base &_Iosbase) 
#line 256
{ 
#line 257
_Iosbase.setf(_Iosb< int> ::internal, _Iosb< int> ::adjustfield); 
#line 258
return _Iosbase; 
#line 259
} 
#line 261
inline ios_base &__cdecl left(ios_base &_Iosbase) 
#line 262
{ 
#line 263
_Iosbase.setf(_Iosb< int> ::left, _Iosb< int> ::adjustfield); 
#line 264
return _Iosbase; 
#line 265
} 
#line 267
inline ios_base &__cdecl noboolalpha(ios_base &_Iosbase) 
#line 268
{ 
#line 269
_Iosbase.unsetf(_Iosb< int> ::boolalpha); 
#line 270
return _Iosbase; 
#line 271
} 
#line 273
inline ios_base &__cdecl noshowbase(ios_base &_Iosbase) 
#line 274
{ 
#line 275
_Iosbase.unsetf(_Iosb< int> ::showbase); 
#line 276
return _Iosbase; 
#line 277
} 
#line 279
inline ios_base &__cdecl noshowpoint(ios_base &_Iosbase) 
#line 280
{ 
#line 281
_Iosbase.unsetf(_Iosb< int> ::showpoint); 
#line 282
return _Iosbase; 
#line 283
} 
#line 285
inline ios_base &__cdecl noshowpos(ios_base &_Iosbase) 
#line 286
{ 
#line 287
_Iosbase.unsetf(_Iosb< int> ::showpos); 
#line 288
return _Iosbase; 
#line 289
} 
#line 291
inline ios_base &__cdecl noskipws(ios_base &_Iosbase) 
#line 292
{ 
#line 293
_Iosbase.unsetf(_Iosb< int> ::skipws); 
#line 294
return _Iosbase; 
#line 295
} 
#line 297
inline ios_base &__cdecl nounitbuf(ios_base &_Iosbase) 
#line 298
{ 
#line 299
_Iosbase.unsetf(_Iosb< int> ::unitbuf); 
#line 300
return _Iosbase; 
#line 301
} 
#line 303
inline ios_base &__cdecl nouppercase(ios_base &_Iosbase) 
#line 304
{ 
#line 305
_Iosbase.unsetf(_Iosb< int> ::uppercase); 
#line 306
return _Iosbase; 
#line 307
} 
#line 309
inline ios_base &__cdecl oct(ios_base &_Iosbase) 
#line 310
{ 
#line 311
_Iosbase.setf(_Iosb< int> ::oct, _Iosb< int> ::basefield); 
#line 312
return _Iosbase; 
#line 313
} 
#line 315
inline ios_base &__cdecl right(ios_base &_Iosbase) 
#line 316
{ 
#line 317
_Iosbase.setf(_Iosb< int> ::right, _Iosb< int> ::adjustfield); 
#line 318
return _Iosbase; 
#line 319
} 
#line 321
inline ios_base &__cdecl scientific(ios_base &_Iosbase) 
#line 322
{ 
#line 323
_Iosbase.setf(_Iosb< int> ::scientific, _Iosb< int> ::floatfield); 
#line 324
return _Iosbase; 
#line 325
} 
#line 327
inline ios_base &__cdecl showbase(ios_base &_Iosbase) 
#line 328
{ 
#line 329
_Iosbase.setf(_Iosb< int> ::showbase); 
#line 330
return _Iosbase; 
#line 331
} 
#line 333
inline ios_base &__cdecl showpoint(ios_base &_Iosbase) 
#line 334
{ 
#line 335
_Iosbase.setf(_Iosb< int> ::showpoint); 
#line 336
return _Iosbase; 
#line 337
} 
#line 339
inline ios_base &__cdecl showpos(ios_base &_Iosbase) 
#line 340
{ 
#line 341
_Iosbase.setf(_Iosb< int> ::showpos); 
#line 342
return _Iosbase; 
#line 343
} 
#line 345
inline ios_base &__cdecl skipws(ios_base &_Iosbase) 
#line 346
{ 
#line 347
_Iosbase.setf(_Iosb< int> ::skipws); 
#line 348
return _Iosbase; 
#line 349
} 
#line 351
inline ios_base &__cdecl unitbuf(ios_base &_Iosbase) 
#line 352
{ 
#line 353
_Iosbase.setf(_Iosb< int> ::unitbuf); 
#line 354
return _Iosbase; 
#line 355
} 
#line 357
inline ios_base &__cdecl uppercase(ios_base &_Iosbase) 
#line 358
{ 
#line 359
_Iosbase.setf(_Iosb< int> ::uppercase); 
#line 360
return _Iosbase; 
#line 361
} 
#line 362
}
#line 365
#pragma warning(pop)
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
#pragma warning(push,3)
#line 13
#pragma warning(disable: 4189 4390)
#line 366 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
#pragma pack ( pop )
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
#pragma pack ( push, 8 )
#line 15
namespace std { 
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
#pragma vtordisp(push, 2)
#line 38
template < class _Elem,
 class _Traits >
 class basic_ostream
  : virtual public basic_ios < _Elem, _Traits >
 {
public :
 typedef basic_ostream < _Elem, _Traits > _Myt;
 typedef basic_ios < _Elem, _Traits > _Myios;
 typedef basic_streambuf < _Elem, _Traits > _Mysb;
 typedef ostreambuf_iterator < _Elem, _Traits > _Iter;
 typedef num_put < _Elem, _Iter > _Nput;

 explicit basic_ostream (
  basic_streambuf < _Elem, _Traits > * _Strbuf,

  bool _Isstd = false )
  {
  _Myios :: init ( _Strbuf, _Isstd );
  }

  basic_ostream ( _Uninitialized, bool _Addit = true )
  {
  if ( _Addit )
   this -> _Addstd ( this );
  }

protected :
  basic_ostream ( _Myt && _Right )
  {
  _Myios :: init ( );
  _Myios :: move ( :: std :: move ( _Right ) );
  }

 _Myt & operator = ( _Myt && _Right )
  {
  this -> swap ( _Right );
  return ( * this );
  }

 void swap ( _Myt & _Right )
  {
  if ( this != & _Right )
   _Myios :: swap ( _Right );
  }

public :
  basic_ostream ( const _Myt & ) = delete;
 _Myt & operator = ( const _Myt & ) = delete;

 virtual ~ basic_ostream ( ) noexcept
  {
  }

 typedef typename _Traits :: int_type int_type;
 typedef typename _Traits :: pos_type pos_type;
 typedef typename _Traits :: off_type off_type;

 class _Sentry_base
  {
 public :
   _Sentry_base ( _Myt & _Ostr )
   : _Myostr ( _Ostr )
   {
   if ( _Myostr . rdbuf ( ) != 0 )
    _Myostr . rdbuf ( ) -> _Lock ( );
   }

   ~ _Sentry_base ( ) noexcept
   {
   if ( _Myostr . rdbuf ( ) != 0 )
    _Myostr . rdbuf ( ) -> _Unlock ( );
   }

  _Myt & _Myostr;

 private :
  _Sentry_base & operator = ( const _Sentry_base & );
  };

 class sentry
  : public _Sentry_base
  {
 public :
  explicit sentry ( _Myt & _Ostr )
   : _Sentry_base ( _Ostr )
   {
   if ( _Ostr . good ( ) && _Ostr . tie ( ) != 0 && _Ostr . tie ( ) != & _Ostr )
    _Ostr . tie ( ) -> flush ( );
   _Ok = _Ostr . good ( );
   }

   ~ sentry ( ) noexcept
   {

   if ( ! :: std :: uncaught_exception ( ) )
    this -> _Myostr . _Osfx ( );




   }

  explicit operator bool ( ) const
   {
   return ( _Ok );
   }

   sentry ( const sentry & ) = delete;
  sentry & operator = ( const sentry & ) = delete;

 private :
  bool _Ok;
  };

 bool opfx ( )
  {
  if ( this -> good ( ) && _Myios :: tie ( ) != 0 && _Myios :: tie ( ) != this )
   _Myios :: tie ( ) -> flush ( );
  return ( this -> good ( ) );
  }

 void osfx ( )
  {
  _Osfx ( );
  }

 void _Osfx ( )
  {
  try {
  if ( this -> good ( ) && this -> flags ( ) & ios_base :: unitbuf )
   if ( _Myios :: rdbuf ( ) -> pubsync ( ) == - 1 )
    _Myios :: setstate ( ios_base :: badbit );
  } catch ( ... ) {
  }
  }























 _Myt & operator << ( _Myt & ( __cdecl * _Pfn ) ( _Myt & ) )
  {
  ;
  return ( ( * _Pfn ) ( * this ) );
  }

 _Myt & operator << ( _Myios & ( __cdecl * _Pfn ) ( _Myios & ) )
  {
  ;
  ( * _Pfn ) ( * ( _Myios * ) this );
  return ( * this );
  }

 _Myt & operator << ( ios_base & ( __cdecl * _Pfn ) ( ios_base & ) )
  {
  ;
  ( * _Pfn ) ( * ( ios_base * ) this );
  return ( * this );
  }

 _Myt & operator << ( bool _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( this -> getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator << ( short _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( this -> getloc ( ) );
   ios_base :: fmtflags _Bfl =
    this -> flags ( ) & ios_base :: basefield;
   long _Tmp = ( _Bfl == ios_base :: oct
    || _Bfl == ios_base :: hex )
    ? ( long ) ( unsigned short ) _Val : ( long ) _Val;

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Tmp ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }










 _Myt & operator << ( unsigned short _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( this -> getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), ( unsigned long ) _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator << ( int _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( this -> getloc ( ) );
   ios_base :: fmtflags _Bfl =
    this -> flags ( ) & ios_base :: basefield;
   long _Tmp = ( _Bfl == ios_base :: oct
    || _Bfl == ios_base :: hex )
    ? ( long ) ( unsigned int ) _Val : ( long ) _Val;

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Tmp ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator << ( unsigned int _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( this -> getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), ( unsigned long ) _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator << ( long _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( this -> getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator << ( unsigned long _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( this -> getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator << ( long long _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( this -> getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator << ( unsigned long long _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( this -> getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator << ( float _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( this -> getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), ( double ) _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator << ( double _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( this -> getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator << ( long double _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( this -> getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator << ( const void * _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( this -> getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator << ( _Mysb * _Strbuf )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  bool _Copied = false;
  const sentry _Ok ( * this );

  if ( _Ok && _Strbuf != 0 )
   for ( int_type _Meta = _Traits :: eof ( );; _Copied = true )
    {
    try {
    _Meta = _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta )
     ? _Strbuf -> sgetc ( ) : _Strbuf -> snextc ( );
    } catch ( ... ) {
     _Myios :: setstate ( ios_base :: failbit );
     throw;
    }

    if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
     break;

    try {
     if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
      _Myios :: rdbuf ( ) -> sputc (
       _Traits :: to_char_type ( _Meta ) ) ) )
      {
      _State |= ios_base :: badbit;
      break;
      }
    } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
    }

  this -> width ( 0 );
  _Myios :: setstate ( _Strbuf == 0 ? ios_base :: badbit
   : ! _Copied ? _State | ios_base :: failbit : _State );
  return ( * this );
  }

 _Myt & put ( _Elem _Ch )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( ! _Ok )
   _State |= ios_base :: badbit;
  else
   {
   try {
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Myios :: rdbuf ( ) -> sputc ( _Ch ) ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & write ( const _Elem * _Str,
  streamsize _Count )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( ! _Ok )
   _State |= ios_base :: badbit;
  else if ( 0 < _Count )
   {
   ;
   try {
   if ( _Myios :: rdbuf ( ) -> sputn ( _Str, _Count ) != _Count )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & flush ( )
  {
  if ( _Myios :: rdbuf ( ) != 0 )
   {
   const sentry _Ok ( * this );

   if ( _Ok && _Myios :: rdbuf ( ) -> pubsync ( ) == - 1 )
    _Myios :: setstate ( ios_base :: badbit );
   }
  return ( * this );
  }

 _Myt & seekp ( pos_type _Pos )
  {
  const sentry _Ok ( * this );

  if ( ! this -> fail ( )
   && ( off_type ) _Myios :: rdbuf ( ) -> pubseekpos ( _Pos,
    ios_base :: out ) == _BADOFF )
   _Myios :: setstate ( ios_base :: failbit );
  return ( * this );
  }

 _Myt & seekp ( off_type _Off, ios_base :: seekdir _Way )
  {
  const sentry _Ok ( * this );

  if ( ! this -> fail ( )
   && ( off_type ) _Myios :: rdbuf ( ) -> pubseekoff ( _Off, _Way,
    ios_base :: out ) == _BADOFF )
   _Myios :: setstate ( ios_base :: failbit );
  return ( * this );
  }

 pos_type tellp ( )
  {
  const sentry _Ok ( * this );

  if ( ! this -> fail ( ) )
   return ( _Myios :: rdbuf ( ) -> pubseekoff ( 0,
    ios_base :: cur, ios_base :: out ) );
  else
   return ( pos_type ( _BADOFF ) );
  }
 };
#line 619 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
#pragma vtordisp(pop)
#line 676
template class __declspec(dllimport) basic_ostream< char, char_traits< char> > ;
#line 678
template class __declspec(dllimport) basic_ostream< __wchar_t, char_traits< __wchar_t> > ;
#line 690 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
template < class _Elem,
 class _Traits > inline
 basic_ostream < _Elem, _Traits > & operator << (
  basic_ostream < _Elem, _Traits > & _Ostr, const char * _Val )
 {
 ios_base :: iostate _State = ios_base :: goodbit;
 streamsize _Count = ( streamsize ) :: strlen ( _Val );
 streamsize _Pad = _Ostr . width ( ) <= 0 || _Ostr . width ( ) <= _Count
  ? 0 : _Ostr . width ( ) - _Count;
 const typename basic_ostream < _Elem, _Traits > :: sentry _Ok ( _Ostr );

 if ( ! _Ok )
  _State |= ios_base :: badbit;
 else
  {
  try {
  const ctype < _Elem > & _Ctype_fac = use_facet < ctype < _Elem > > ( _Ostr . getloc ( ) );
  if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left )
   for (; 0 < _Pad; -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     {
     _State |= ios_base :: badbit;
     break;
     }

  for (; _State == ios_base :: goodbit && 0 < _Count; -- _Count, ++ _Val )
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Ostr . rdbuf ( ) -> sputc ( _Ctype_fac . widen ( * _Val ) ) ) )
     _State |= ios_base :: badbit;

  if ( _State == ios_base :: goodbit )
   for (; 0 < _Pad; -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     {
     _State |= ios_base :: badbit;
     break;
     }
  _Ostr . width ( 0 );
  } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
  }

 _Ostr . setstate ( _State );
 return ( _Ostr );
 }
#line 737
template < class _Elem,
 class _Traits > inline
 basic_ostream < _Elem, _Traits > & operator << (
  basic_ostream < _Elem, _Traits > & _Ostr, char _Ch )
 {
 ios_base :: iostate _State = ios_base :: goodbit;
 const typename basic_ostream < _Elem, _Traits > :: sentry _Ok ( _Ostr );

 if ( _Ok )
  {
  const ctype < _Elem > & _Ctype_fac = use_facet < ctype < _Elem > > ( _Ostr . getloc ( ) );
  streamsize _Pad = _Ostr . width ( ) <= 1 ? 0 : _Ostr . width ( ) - 1;

  try {
  if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left )
   for (; _State == ios_base :: goodbit && 0 < _Pad;
    -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     _State |= ios_base :: badbit;

  if ( _State == ios_base :: goodbit
   && _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Ostr . rdbuf ( ) -> sputc ( _Ctype_fac . widen ( _Ch ) ) ) )
   _State |= ios_base :: badbit;

  for (; _State == ios_base :: goodbit && 0 < _Pad;
   -- _Pad )
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
    _State |= ios_base :: badbit;
  } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
  }

 _Ostr . width ( 0 );
 _Ostr . setstate ( _State );
 return ( _Ostr );
 }
#line 776
template < class _Traits > inline
 basic_ostream < char, _Traits > & operator << (
  basic_ostream < char, _Traits > & _Ostr,
  const char * _Val )
 {
 typedef char _Elem;
 typedef basic_ostream < _Elem, _Traits > _Myos;
 ios_base :: iostate _State = ios_base :: goodbit;
 streamsize _Count = ( streamsize ) _Traits :: length ( _Val );
 streamsize _Pad = _Ostr . width ( ) <= 0 || _Ostr . width ( ) <= _Count
  ? 0 : _Ostr . width ( ) - _Count;
 const typename _Myos :: sentry _Ok ( _Ostr );

 if ( ! _Ok )
  _State |= ios_base :: badbit;
 else
  {
  try {
  if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left )
   for (; 0 < _Pad; -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     {
     _State |= ios_base :: badbit;
     break;
     }

  if ( _State == ios_base :: goodbit
   && _Ostr . rdbuf ( ) -> sputn ( _Val, _Count ) != _Count )
   _State |= ios_base :: badbit;

  if ( _State == ios_base :: goodbit )
   for (; 0 < _Pad; -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     {
     _State |= ios_base :: badbit;
     break;
     }
  _Ostr . width ( 0 );
  } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
  }

 _Ostr . setstate ( _State );
 return ( _Ostr );
 }
#line 823
template < class _Traits > inline
 basic_ostream < char, _Traits > & operator << (
  basic_ostream < char, _Traits > & _Ostr, char _Ch )
 {
 typedef char _Elem;
 typedef basic_ostream < _Elem, _Traits > _Myos;
 ios_base :: iostate _State = ios_base :: goodbit;
 const typename _Myos :: sentry _Ok ( _Ostr );

 if ( _Ok )
  {
  streamsize _Pad = _Ostr . width ( ) <= 1 ? 0 : _Ostr . width ( ) - 1;

  try {
  if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left )
   for (; _State == ios_base :: goodbit && 0 < _Pad;
    -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     _State |= ios_base :: badbit;

  if ( _State == ios_base :: goodbit
   && _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Ostr . rdbuf ( ) -> sputc ( _Ch ) ) )
   _State |= ios_base :: badbit;

  for (; _State == ios_base :: goodbit && 0 < _Pad;
   -- _Pad )
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
    _State |= ios_base :: badbit;
  } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
  }

 _Ostr . width ( 0 );
 _Ostr . setstate ( _State );
 return ( _Ostr );
 }
#line 862
template < class _Elem,
 class _Traits > inline
 basic_ostream < _Elem, _Traits > & operator << (
  basic_ostream < _Elem, _Traits > & _Ostr, const _Elem * _Val )
 {
 typedef basic_ostream < _Elem, _Traits > _Myos;

 ios_base :: iostate _State = ios_base :: goodbit;
 streamsize _Count = ( streamsize ) _Traits :: length ( _Val );
 streamsize _Pad = _Ostr . width ( ) <= 0 || _Ostr . width ( ) <= _Count
  ? 0 : _Ostr . width ( ) - _Count;
 const typename _Myos :: sentry _Ok ( _Ostr );

 if ( ! _Ok )
  _State |= ios_base :: badbit;
 else
  {
  try {
  if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left )
   for (; 0 < _Pad; -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     {
     _State |= ios_base :: badbit;
     break;
     }

  if ( _State == ios_base :: goodbit
   && _Ostr . rdbuf ( ) -> sputn ( _Val, _Count ) != _Count )
   _State |= ios_base :: badbit;

  if ( _State == ios_base :: goodbit )
   for (; 0 < _Pad; -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     {
     _State |= ios_base :: badbit;
     break;
     }
  _Ostr . width ( 0 );
  } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
  }

 _Ostr . setstate ( _State );
 return ( _Ostr );
 }
#line 909
template < class _Elem,
 class _Traits > inline
 basic_ostream < _Elem, _Traits > & operator << (
  basic_ostream < _Elem, _Traits > & _Ostr, _Elem _Ch )
 {
 typedef basic_ostream < _Elem, _Traits > _Myos;

 ios_base :: iostate _State = ios_base :: goodbit;
 const typename _Myos :: sentry _Ok ( _Ostr );

 if ( _Ok )
  {
  streamsize _Pad = _Ostr . width ( ) <= 1 ? 0 : _Ostr . width ( ) - 1;

  try {
  if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left )
   for (; _State == ios_base :: goodbit && 0 < _Pad;
    -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     _State |= ios_base :: badbit;

  if ( _State == ios_base :: goodbit
   && _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Ostr . rdbuf ( ) -> sputc ( _Ch ) ) )
   _State |= ios_base :: badbit;

  for (; _State == ios_base :: goodbit && 0 < _Pad;
   -- _Pad )
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
    _State |= ios_base :: badbit;
  } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
  }

 _Ostr . width ( 0 );
 _Ostr . setstate ( _State );
 return ( _Ostr );
 }
#line 949
template < class _Traits > inline
 basic_ostream < char, _Traits > & operator << (
  basic_ostream < char, _Traits > & _Ostr, const signed char * _Val )
 {
 return ( _Ostr << ( const char * ) _Val );
 }
#line 956
template < class _Traits > inline
 basic_ostream < char, _Traits > & operator << (
  basic_ostream < char, _Traits > & _Ostr, signed char _Ch )
 {
 return ( _Ostr << ( char ) _Ch );
 }
#line 963
template < class _Traits > inline
 basic_ostream < char, _Traits > & operator << (
  basic_ostream < char, _Traits > & _Ostr, const unsigned char * _Val )
 {
 return ( _Ostr << ( const char * ) _Val );
 }
#line 970
template < class _Traits > inline
 basic_ostream < char, _Traits > & operator << (
  basic_ostream < char, _Traits > & _Ostr, unsigned char _Ch )
 {
 return ( _Ostr << ( char ) _Ch );
 }
#line 977
template < class _Elem,
 class _Traits,
 class _Ty > inline
 basic_ostream < _Elem, _Traits > &
  operator << ( basic_ostream < _Elem, _Traits > && _Ostr, const _Ty & _Val )
 {
 return ( _Ostr << _Val );
 }
#line 987
template < class _Elem,
 class _Traits > inline
 basic_ostream < _Elem, _Traits > &
  __cdecl endl ( basic_ostream < _Elem, _Traits > & _Ostr )
 {
 _Ostr . put ( _Ostr . widen ( '\n' ) );
 _Ostr . flush ( );
 return ( _Ostr );
 }
#line 997
template < class _Elem,
 class _Traits > inline
 basic_ostream < _Elem, _Traits > &
  __cdecl ends ( basic_ostream < _Elem, _Traits > & _Ostr )
 {
 _Ostr . put ( _Elem ( ) );
 return ( _Ostr );
 }
#line 1006
template < class _Elem,
 class _Traits > inline
 basic_ostream < _Elem, _Traits > &
  __cdecl flush ( basic_ostream < _Elem, _Traits > & _Ostr )
 {
 _Ostr . flush ( );
 return ( _Ostr );
 }
#line 1016
template < class _Elem,
 class _Traits > inline
 basic_ostream < _Elem, _Traits > &
  operator << ( basic_ostream < _Elem, _Traits > & _Ostr,
   const error_code & _Errcode )
 {
 return ( _Ostr << _Errcode . category ( ) . name ( ) << ':' << _Errcode . value ( ) );
 }
#line 1024
}
#line 1027
#pragma warning(pop)
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
#pragma warning(push,3)
#line 13
#pragma warning(disable: 4189)
#line 1028 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
#pragma pack ( pop )
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
#pragma pack ( push, 8 )
#line 15
namespace std { 
#pragma vtordisp(push, 2)
#line 19
template < class _Elem,
 class _Traits >
 class basic_istream
  : virtual public basic_ios < _Elem, _Traits >
 {
public :
 typedef basic_istream < _Elem, _Traits > _Myt;
 typedef basic_ios < _Elem, _Traits > _Myios;
 typedef basic_streambuf < _Elem, _Traits > _Mysb;
 typedef istreambuf_iterator < _Elem, _Traits > _Iter;
 typedef ctype < _Elem > _Ctype;
 typedef num_get < _Elem, _Iter > _Nget;











 explicit basic_istream ( _Mysb * _Strbuf,
  bool _Isstd = false )

  : _Chcount ( 0 )
  {
  _Myios :: init ( _Strbuf, _Isstd );
  }

  basic_istream ( _Uninitialized )
  {
  this -> _Addstd ( this );
  }

protected :
  basic_istream ( _Myt && _Right )
  : _Chcount ( _Right . _Chcount )
  {
  _Myios :: init ( );
  _Myios :: move ( :: std :: move ( _Right ) );
  _Right . _Chcount = 0;
  }

 _Myt & operator = ( _Myt && _Right )
  {
  this -> swap ( _Right );
  return ( * this );
  }

 void swap ( _Myt & _Right )
  {
  _Myios :: swap ( _Right );
  :: std :: swap ( _Chcount, _Right . _Chcount );
  }

public :
  basic_istream ( const _Myt & ) = delete;
 _Myt & operator = ( const _Myt & ) = delete;

 virtual ~ basic_istream ( ) noexcept
  {
  }

 typedef typename _Traits :: int_type int_type;
 typedef typename _Traits :: pos_type pos_type;
 typedef typename _Traits :: off_type off_type;


 class _Sentry_base
  {
 public :
   _Sentry_base ( _Myt & _Istr )
   : _Myistr ( _Istr )
   {
   if ( _Myistr . rdbuf ( ) != 0 )
    _Myistr . rdbuf ( ) -> _Lock ( );
   }

   ~ _Sentry_base ( ) noexcept
   {
   if ( _Myistr . rdbuf ( ) != 0 )
    _Myistr . rdbuf ( ) -> _Unlock ( );
   }

  _Myt & _Myistr;

 private :
  _Sentry_base & operator = ( const _Sentry_base & );
  };

 class sentry
  : public _Sentry_base
  {
 public :
  explicit sentry ( _Myt & _Istr, bool _Noskip = false )
   : _Sentry_base ( _Istr )
   {
   _Ok = this -> _Myistr . _Ipfx ( _Noskip );
   }

  explicit operator bool ( ) const
   {
   return ( _Ok );
   }

   sentry ( const sentry & ) = delete;
  sentry & operator = ( const sentry & ) = delete;

 private :
  bool _Ok;
  };

 bool _Ipfx ( bool _Noskip = false )
  {
  if ( this -> good ( ) )
   {
   if ( _Myios :: tie ( ) != 0 )
    _Myios :: tie ( ) -> flush ( );

   if ( ! _Noskip && this -> flags ( ) & ios_base :: skipws )
    {
    const _Ctype & _Ctype_fac = use_facet < _Ctype > ( this -> getloc ( ) );

    try {
    int_type _Meta = _Myios :: rdbuf ( ) -> sgetc ( );

    for (;; _Meta = _Myios :: rdbuf ( ) -> snextc ( ) )
     if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
      {
      _Myios :: setstate ( ios_base :: eofbit );
      break;
      }
     else if ( ! _Ctype_fac . is ( _Ctype :: space,
      _Traits :: to_char_type ( _Meta ) ) )
      break;
    } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
    }

   if ( this -> good ( ) )
    return ( true );
   }
  _Myios :: setstate ( ios_base :: failbit );
  return ( false );
  }

 bool ipfx ( bool _Noskip = false )
  {
  return ( _Ipfx ( _Noskip ) );
  }

 void isfx ( )
  {
  }























 _Myt & operator >> ( _Myt & ( __cdecl * _Pfn ) ( _Myt & ) )
  {
  ;
  return ( ( * _Pfn ) ( * this ) );
  }

 _Myt & operator >> ( _Myios & ( __cdecl * _Pfn ) ( _Myios & ) )
  {
  ;
  ( * _Pfn ) ( * ( _Myios * ) this );
  return ( * this );
  }

 _Myt & operator >> ( ios_base & ( __cdecl * _Pfn ) ( ios_base & ) )
  {
  ;
  ( * _Pfn ) ( * ( ios_base * ) this );
  return ( * this );
  }

 _Myt & operator >> ( bool & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nget & _Nget_fac = use_facet < _Nget > ( this -> getloc ( ) );

   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Val );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator >> ( short & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   long _Tmp = 0;
   const _Nget & _Nget_fac = use_facet < _Nget > ( this -> getloc ( ) );

   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Tmp );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }

   if ( _State & ios_base :: failbit
    || _Tmp < ( - 32768 ) || 32767 < _Tmp )
    _State |= ios_base :: failbit;
   else
    _Val = ( short ) _Tmp;
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }










 _Myt & operator >> ( unsigned short & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nget & _Nget_fac = use_facet < _Nget > ( this -> getloc ( ) );

   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Val );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator >> ( int & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   long _Tmp = 0;
   const _Nget & _Nget_fac = use_facet < _Nget > ( this -> getloc ( ) );

   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Tmp );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }

   if ( _State & ios_base :: failbit
    || _Tmp < ( - 2147483647 - 1 ) || 2147483647 < _Tmp )
    _State |= ios_base :: failbit;
   else
    _Val = _Tmp;
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator >> ( unsigned int & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );
  if ( _Ok )
   {
   const _Nget & _Nget_fac = use_facet < _Nget > ( this -> getloc ( ) );

   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Val );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator >> ( long & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nget & _Nget_fac = use_facet < _Nget > ( this -> getloc ( ) );
   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Val );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator >> ( unsigned long & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nget & _Nget_fac = use_facet < _Nget > ( this -> getloc ( ) );

   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Val );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator >> ( long long & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nget & _Nget_fac = use_facet < _Nget > ( this -> getloc ( ) );

   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Val );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator >> ( unsigned long long & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );
  if ( _Ok )
   {
   const _Nget & _Nget_fac = use_facet < _Nget > ( this -> getloc ( ) );

   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Val );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator >> ( float & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nget & _Nget_fac = use_facet < _Nget > ( this -> getloc ( ) );

   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Val );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator >> ( double & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );
  if ( _Ok )
   {
   const _Nget & _Nget_fac = use_facet < _Nget > ( this -> getloc ( ) );

   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Val );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator >> ( long double & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nget & _Nget_fac = use_facet < _Nget > ( this -> getloc ( ) );
   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Val );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator >> ( void * & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nget & _Nget_fac = use_facet < _Nget > ( this -> getloc ( ) );

   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Val );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator >> ( _Mysb * _Strbuf )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  bool _Copied = false;
  const sentry _Ok ( * this );

  if ( _Ok && _Strbuf != 0 )
   {
   try {
   int_type _Meta = _Myios :: rdbuf ( ) -> sgetc ( );

   for (;; _Meta = _Myios :: rdbuf ( ) -> snextc ( ) )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
     {
     _State |= ios_base :: eofbit;
     break;
     }
    else
     {
     try {
      if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
       _Strbuf -> sputc ( _Traits :: to_char_type ( _Meta ) ) ) )
       break;
     } catch ( ... ) {
      break;
     }
     _Copied = true;
     }
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( ! _Copied ? _State | ios_base :: failbit : _State );
  return ( * this );
  }

 int_type get ( )
  {
  int_type _Meta = 0;
  ios_base :: iostate _State = ios_base :: goodbit;
  _Chcount = 0;
  const sentry _Ok ( * this, true );

  if ( ! _Ok )
   _Meta = _Traits :: eof ( );
  else
   {
   try {
   _Meta = _Myios :: rdbuf ( ) -> sgetc ( );

   if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
    _State |= ios_base :: eofbit | ios_base :: failbit;
   else
    {
    _Myios :: rdbuf ( ) -> sbumpc ( );
    ++ _Chcount;
    }
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( _Meta );
  }

 _Myt & get ( _Elem * _Str, streamsize _Count )
  {
  return ( get ( _Str, _Count, _Myios :: widen ( '\n' ) ) );
  }

 _Myt & get ( _Elem * _Str,
  streamsize _Count, _Elem _Delim )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  _Chcount = 0;
  const sentry _Ok ( * this, true );

  if ( _Ok && 0 < _Count )
   {
   try {
   int_type _Meta = _Myios :: rdbuf ( ) -> sgetc ( );

   for (; 0 < -- _Count; _Meta = _Myios :: rdbuf ( ) -> snextc ( ) )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
     {
     _State |= ios_base :: eofbit;
     break;
     }
    else if ( _Traits :: to_char_type ( _Meta ) == _Delim )
     break;
    else
     {
     ;
     * _Str ++ = _Traits :: to_char_type ( _Meta );
     ++ _Chcount;
     }
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _Chcount == 0
   ? _State | ios_base :: failbit : _State );
  * _Str = _Elem ( );
  return ( * this );
  }

 _Myt & get ( _Elem & _Ch )
  {
  int_type _Meta = get ( );
  if ( ! _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
   _Ch = _Traits :: to_char_type ( _Meta );
  return ( * this );
  }

 _Myt & get ( _Mysb & _Strbuf )
  {
  return ( get ( _Strbuf, _Myios :: widen ( '\n' ) ) );
  }

 _Myt & get ( _Mysb & _Strbuf, _Elem _Delim )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  _Chcount = 0;
  const sentry _Ok ( * this, true );

  if ( _Ok )
   {
   try {
   int_type _Meta = _Myios :: rdbuf ( ) -> sgetc ( );

   for (;; _Meta = _Myios :: rdbuf ( ) -> snextc ( ) )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
     {
     _State |= ios_base :: eofbit;
     break;
     }
    else
     {
     try {
      _Elem _Ch = _Traits :: to_char_type ( _Meta );
      if ( _Ch == _Delim
       || _Traits :: eq_int_type ( _Traits :: eof ( ),
        _Strbuf . sputc ( _Ch ) ) )
       break;
     } catch ( ... ) {
      break;
     }
     ++ _Chcount;
     }
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  if ( _Chcount == 0 )
   _State |= ios_base :: failbit;
  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & getline ( _Elem * _Str, streamsize _Count )
  {
  return ( getline ( _Str, _Count, _Myios :: widen ( '\n' ) ) );
  }

 _Myt & getline ( _Elem * _Str,
  streamsize _Count, _Elem _Delim )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  _Chcount = 0;
  const sentry _Ok ( * this, true );

  if ( _Ok && 0 < _Count )
   {
   int_type _Metadelim = _Traits :: to_int_type ( _Delim );

   try {
   int_type _Meta = _Myios :: rdbuf ( ) -> sgetc ( );

   for (;; _Meta = _Myios :: rdbuf ( ) -> snextc ( ) )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
     {
     _State |= ios_base :: eofbit;
     break;
     }
    else if ( _Meta == _Metadelim )
     {
     ++ _Chcount;
     _Myios :: rdbuf ( ) -> sbumpc ( );
     break;
     }
    else if ( -- _Count <= 0 )
     {
     _State |= ios_base :: failbit;
     break;
     }
    else
     {
     ;
     * _Str ++ = _Traits :: to_char_type ( _Meta );
     ++ _Chcount;
     }
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  * _Str = _Elem ( );
  _Myios :: setstate ( _Chcount == 0 ? _State | ios_base :: failbit : _State );
  return ( * this );
  }

 _Myt & ignore ( streamsize _Count = 1,
  int_type _Metadelim = _Traits :: eof ( ) )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  _Chcount = 0;
  const sentry _Ok ( * this, true );

  if ( _Ok && 0 < _Count )
   {
   try {
   for (;; )
    {
    int_type _Meta;
    if ( _Count != ( numeric_limits < streamsize > :: max ) ( )
     && -- _Count < 0 )
     break;
    else if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Meta = _Myios :: rdbuf ( ) -> sbumpc ( ) ) )
     {
     _State |= ios_base :: eofbit;
     break;
     }
    else
     {
     ++ _Chcount;
     if ( _Meta == _Metadelim )
      break;
     }
    }
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & read ( _Elem * _Str, streamsize _Count )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  _Chcount = 0;
  const sentry _Ok ( * this, true );

  if ( _Ok && 0 < _Count )
   {
   try {
   ;
   const streamsize _Num = _Myios :: rdbuf ( ) -> sgetn ( _Str, _Count );
   _Chcount += _Num;
   if ( _Num != _Count )
    _State |= ios_base :: eofbit | ios_base :: failbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 streamsize readsome ( _Elem * _Str,
  streamsize _Count )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  _Chcount = 0;
  const sentry _Ok ( * this, true );
  streamsize _Num;

  if ( ! _Ok )
   _State |= ios_base :: failbit;
  else if ( ( _Num = _Myios :: rdbuf ( ) -> in_avail ( ) ) < 0 )
   _State |= ios_base :: eofbit;
  else if ( 0 < _Count && 0 < _Num )
   {
   ;
   read ( _Str, _Num < _Count ? _Num : _Count );
   }

  _Myios :: setstate ( _State );
  return ( gcount ( ) );
  }

 int_type peek ( )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  _Chcount = 0;
  int_type _Meta = 0;
  const sentry _Ok ( * this, true );

  if ( ! _Ok )
   _Meta = _Traits :: eof ( );
  else
   {
   try {
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Meta = _Myios :: rdbuf ( ) -> sgetc ( ) ) )
    _State |= ios_base :: eofbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( _Meta );
  }

 _Myt & putback ( _Elem _Ch )
  {
  _Chcount = 0;
  ios_base :: iostate _State = ios_base :: goodbit;
  ios_base :: iostate _Oldstate = _Myios :: rdstate ( );
  _Myios :: clear ( _Oldstate & ~ ios_base :: eofbit );
  const sentry _Ok ( * this, true );

  if ( _Ok )
   {
   try {
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Myios :: rdbuf ( ) -> sputbackc ( _Ch ) ) )
    _State |= ios_base :: badbit | _Oldstate;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & unget ( )
  {
  _Chcount = 0;
  ios_base :: iostate _State = ios_base :: goodbit;
  ios_base :: iostate _Oldstate = _Myios :: rdstate ( );
  _Myios :: clear ( _Oldstate & ~ ios_base :: eofbit );
  const sentry _Ok ( * this, true );

  if ( _Ok )
   {
   try {
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Myios :: rdbuf ( ) -> sungetc ( ) ) )
    _State |= ios_base :: badbit | _Oldstate;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 streamsize gcount ( ) const
  {
  return ( _Chcount );
  }

 int sync ( )
  {
  const sentry _Ok ( * this, true );

  if ( _Myios :: rdbuf ( ) == 0 )
   return ( - 1 );
  else if ( _Myios :: rdbuf ( ) -> pubsync ( ) == - 1 )
   {
   _Myios :: setstate ( ios_base :: badbit );
   return ( - 1 );
   }
  else
   return ( 0 );
  }

 _Myt & seekg ( pos_type _Pos )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  ios_base :: iostate _Oldstate = _Myios :: rdstate ( );
  _Myios :: clear ( _Oldstate & ~ ios_base :: eofbit );
  const sentry _Ok ( * this, true );

  if ( ! this -> fail ( )
   && ( off_type ) _Myios :: rdbuf ( ) -> pubseekpos ( _Pos,
    ios_base :: in ) == _BADOFF )
   _Myios :: setstate ( _State | ios_base :: failbit );
  return ( * this );
  }

 _Myt & seekg ( off_type _Off, ios_base :: seekdir _Way )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  ios_base :: iostate _Oldstate = _Myios :: rdstate ( );
  _Myios :: clear ( _Oldstate & ~ ios_base :: eofbit );
  const sentry _Ok ( * this, true );

  if ( ! this -> fail ( )
   && ( off_type ) _Myios :: rdbuf ( ) -> pubseekoff ( _Off, _Way,
    ios_base :: in ) == _BADOFF )
   _Myios :: setstate ( _State | ios_base :: failbit );
  return ( * this );
  }

 pos_type tellg ( )
  {
  const sentry _Ok ( * this, true );

  if ( ! this -> fail ( ) )
   return ( _Myios :: rdbuf ( ) -> pubseekoff ( 0,
    ios_base :: cur, ios_base :: in ) );
  else
   return ( pos_type ( _BADOFF ) );
  }

private :
 streamsize _Chcount;
 };
#line 895 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
#pragma vtordisp(pop)
#line 923
template class __declspec(dllimport) basic_istream< char, char_traits< char> > ;
#line 924
template class __declspec(dllimport) basic_istream< __wchar_t, char_traits< __wchar_t> > ;
#line 934 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
template < class _Elem,
 class _Traits >
 class basic_iostream
 : public basic_istream < _Elem, _Traits >,
  public basic_ostream < _Elem, _Traits >
 {
public :
 typedef basic_iostream < _Elem, _Traits > _Myt;
 typedef basic_istream < _Elem, _Traits > _Myis;
 typedef basic_ostream < _Elem, _Traits > _Myos;
 typedef basic_ios < _Elem, _Traits > _Myios;
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef typename _Traits :: int_type int_type;
 typedef typename _Traits :: pos_type pos_type;
 typedef typename _Traits :: off_type off_type;

 explicit basic_iostream ( basic_streambuf < _Elem, _Traits > * _Strbuf )
  : _Myis ( _Strbuf, false ),
   _Myos ( _Noinit, false )
  {
  }

protected :
  basic_iostream ( _Myt && _Right )
  : _Myis ( _Right . rdbuf ( ), false ),
   _Myos ( _Noinit, false )
  {
  _Myios :: init ( );
  _Myios :: move ( :: std :: forward < _Myt > ( _Right ) );
  }

 _Myt & operator = ( _Myt && _Right )
  {
  this -> swap ( _Right );
  return ( * this );
  }

 void swap ( _Myt & _Right )
  {
  if ( this != & _Right )
   _Myios :: swap ( _Right );
  }

public :
  basic_iostream ( const _Myt & ) = delete;
 _Myt & operator = ( const _Myt & ) = delete;

 virtual ~ basic_iostream ( ) noexcept
  {
  }
 };
#line 992
template class __declspec(dllimport) basic_iostream< char, char_traits< char> > ;
#line 993
template class __declspec(dllimport) basic_iostream< __wchar_t, char_traits< __wchar_t> > ;
#line 1004 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
template < class _Elem,
 class _Traits > inline
 basic_istream < _Elem, _Traits > & operator >> (
  basic_istream < _Elem, _Traits > & _Istr, _Elem * _Str )
 {
 ;
 typedef basic_istream < _Elem, _Traits > _Myis;
 typedef ctype < _Elem > _Ctype;
 ios_base :: iostate _State = ios_base :: goodbit;
 _Elem * _Str0 = _Str;
 const typename _Myis :: sentry _Ok ( _Istr );

 if ( _Ok )
  {
  const _Ctype & _Ctype_fac = use_facet < _Ctype > ( _Istr . getloc ( ) );

  try {
  streamsize _Count = 0 < _Istr . width ( ) ? _Istr . width ( )
   : ( numeric_limits < streamsize > :: max ) ( );
  typename _Myis :: int_type _Meta = _Istr . rdbuf ( ) -> sgetc ( );
  _Elem _Ch;
  for (; 0 < -- _Count; _Meta = _Istr . rdbuf ( ) -> snextc ( ) )
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
    {
    _State |= ios_base :: eofbit;
    break;
    }
   else if ( _Ctype_fac . is ( _Ctype :: space,
    _Ch = _Traits :: to_char_type ( _Meta ) )
     || _Ch == _Elem ( ) )
    break;
   else
    * _Str ++ = _Traits :: to_char_type ( _Meta );
  } catch ( ... ) { ( _Istr ) . setstate ( ios_base :: badbit, true ); }
  }

 * _Str = _Elem ( );
 _Istr . width ( 0 );
 _Istr . setstate ( _Str == _Str0 ? _State | ios_base :: failbit : _State );
 return ( _Istr );
 }
#line 1046
template < class _Elem,
 class _Traits > inline
 basic_istream < _Elem, _Traits > & operator >> (
  basic_istream < _Elem, _Traits > & _Istr, _Elem & _Ch )
 {
 typedef basic_istream < _Elem, _Traits > _Myis;

 typename _Myis :: int_type _Meta;
 ios_base :: iostate _State = ios_base :: goodbit;
 const typename _Myis :: sentry _Ok ( _Istr );

 if ( _Ok )
  {
  try {
  _Meta = _Istr . rdbuf ( ) -> sbumpc ( );
  if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
   _State |= ios_base :: eofbit | ios_base :: failbit;
  else
   _Ch = _Traits :: to_char_type ( _Meta );
  } catch ( ... ) { ( _Istr ) . setstate ( ios_base :: badbit, true ); }
  }

 _Istr . setstate ( _State );
 return ( _Istr );
 }
#line 1072
template < class _Traits > inline
 basic_istream < char, _Traits > & operator >> (
  basic_istream < char, _Traits > & _Istr, signed char * _Str )
 {
 return ( _Istr >> ( char * ) _Str );
 }
#line 1079
template < class _Traits > inline
 basic_istream < char, _Traits > & operator >> (
  basic_istream < char, _Traits > & _Istr, signed char & _Ch )
 {
 return ( _Istr >> ( char & ) _Ch );
 }
#line 1086
template < class _Traits > inline
 basic_istream < char, _Traits > & operator >> (
  basic_istream < char, _Traits > & _Istr, unsigned char * _Str )
 {
 return ( _Istr >> ( char * ) _Str );
 }
#line 1093
template < class _Traits > inline
 basic_istream < char, _Traits > & operator >> (
  basic_istream < char, _Traits > & _Istr, unsigned char & _Ch )
 {
 return ( _Istr >> ( char & ) _Ch );
 }
#line 1100
template < class _Elem,
 class _Traits,
 class _Ty > inline
 basic_istream < _Elem, _Traits > &
  operator >> ( basic_istream < _Elem, _Traits > && _Istr, _Ty & _Val )
 {
 return ( _Istr >> _Val );
 }
#line 1110
template < class _Elem,
 class _Traits > inline
 basic_istream < _Elem, _Traits > &
  __cdecl ws ( basic_istream < _Elem, _Traits > & _Istr )
 {
 typedef basic_istream < _Elem, _Traits > _Myis;
 typedef ctype < _Elem > _Ctype;

 if ( ! _Istr . eof ( ) )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const typename _Myis :: sentry _Ok ( _Istr, true );

  if ( _Ok )
   {
   const _Ctype & _Ctype_fac = use_facet < _Ctype > ( _Istr . getloc ( ) );

   try {
   for ( typename _Traits :: int_type _Meta = _Istr . rdbuf ( ) -> sgetc ( );;
    _Meta = _Istr . rdbuf ( ) -> snextc ( ) )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
     {
     _State |= ios_base :: eofbit;
     break;
     }
    else if ( ! _Ctype_fac . is ( _Ctype :: space,
     _Traits :: to_char_type ( _Meta ) ) )
     break;
   } catch ( ... ) { ( _Istr ) . setstate ( ios_base :: badbit, true ); }
   }

  _Istr . setstate ( _State );
  }
 return ( _Istr );
 }
#line 1145
}
#line 1148
#pragma warning(pop)
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
#pragma warning(push,3)
#line 13
#pragma warning(disable: 4189)
#pragma warning(disable: 4172)
#pragma warning(disable: 4455)
#line 1149 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
#pragma pack ( pop )
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
#pragma pack ( push, 8 )
#line 17
namespace std { 
#line 19
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_istream < _Elem, _Traits > & operator >> (
  basic_istream < _Elem, _Traits > && _Istr,
  basic_string < _Elem, _Traits, _Alloc > & _Str )
 {
 typedef ctype < _Elem > _Ctype;
 typedef basic_istream < _Elem, _Traits > _Myis;
 typedef basic_string < _Elem, _Traits, _Alloc > _Mystr;
 typedef typename _Mystr :: size_type _Mysizt;

 ios_base :: iostate _State = ios_base :: goodbit;
 bool _Changed = false;
 const typename _Myis :: sentry _Ok ( _Istr );

 if ( _Ok )
  {
  const _Ctype & _Ctype_fac = use_facet < _Ctype > ( _Istr . getloc ( ) );
  _Str . erase ( );

  try {
  _Mysizt _Size = 0 < _Istr . width ( )
   && ( _Mysizt ) _Istr . width ( ) < _Str . max_size ( )
    ? ( _Mysizt ) _Istr . width ( ) : _Str . max_size ( );
  typename _Traits :: int_type _Meta = _Istr . rdbuf ( ) -> sgetc ( );

  for (; 0 < _Size; -- _Size, _Meta = _Istr . rdbuf ( ) -> snextc ( ) )
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
    {
    _State |= ios_base :: eofbit;
    break;
    }
   else if ( _Ctype_fac . is ( _Ctype :: space,
    _Traits :: to_char_type ( _Meta ) ) )
    break;
   else
    {
    _Str . append ( 1, _Traits :: to_char_type ( _Meta ) );
    _Changed = true;
    }
  } catch ( ... ) { ( _Istr ) . setstate ( ios_base :: badbit, true ); }
  }

 _Istr . width ( 0 );
 if ( ! _Changed )
  _State |= ios_base :: failbit;
 _Istr . setstate ( _State );
 return ( _Istr );
 }
#line 70
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_istream < _Elem, _Traits > & getline (
  basic_istream < _Elem, _Traits > && _Istr,
  basic_string < _Elem, _Traits, _Alloc > & _Str,
  const _Elem _Delim )
 {
 typedef basic_istream < _Elem, _Traits > _Myis;

 ios_base :: iostate _State = ios_base :: goodbit;
 bool _Changed = false;
 const typename _Myis :: sentry _Ok ( _Istr, true );

 if ( _Ok )
  {
  try {
  _Str . erase ( );
  const typename _Traits :: int_type _Metadelim =
   _Traits :: to_int_type ( _Delim );
  typename _Traits :: int_type _Meta = _Istr . rdbuf ( ) -> sgetc ( );

  for (;; _Meta = _Istr . rdbuf ( ) -> snextc ( ) )
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
    {
    _State |= ios_base :: eofbit;
    break;
    }
   else if ( _Traits :: eq_int_type ( _Meta, _Metadelim ) )
    {
    _Changed = true;
    _Istr . rdbuf ( ) -> sbumpc ( );
    break;
    }
   else if ( _Str . max_size ( ) <= _Str . size ( ) )
    {
    _State |= ios_base :: failbit;
    break;
    }
   else
    {
    _Str += _Traits :: to_char_type ( _Meta );
    _Changed = true;
    }
  } catch ( ... ) { ( _Istr ) . setstate ( ios_base :: badbit, true ); }
  }

 if ( ! _Changed )
  _State |= ios_base :: failbit;
 _Istr . setstate ( _State );
 return ( _Istr );
 }
#line 123
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_istream < _Elem, _Traits > & getline (
  basic_istream < _Elem, _Traits > && _Istr,
  basic_string < _Elem, _Traits, _Alloc > & _Str )
 {
 return ( getline ( _Istr, _Str, _Istr . widen ( '\n' ) ) );
 }
#line 133
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_istream < _Elem, _Traits > & operator >> (
  basic_istream < _Elem, _Traits > & _Istr,
  basic_string < _Elem, _Traits, _Alloc > & _Str )
 {
 return ( :: std :: move ( _Istr ) >> _Str );
 }
#line 143
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_istream < _Elem, _Traits > & getline (
  basic_istream < _Elem, _Traits > & _Istr,
  basic_string < _Elem, _Traits, _Alloc > & _Str,
  const _Elem _Delim )
 {
 return ( getline ( :: std :: move ( _Istr ), _Str, _Delim ) );
 }
#line 154
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_istream < _Elem, _Traits > & getline (
  basic_istream < _Elem, _Traits > & _Istr,
  basic_string < _Elem, _Traits, _Alloc > & _Str )
 {
 return ( getline ( :: std :: move ( _Istr ), _Str, _Istr . widen ( '\n' ) ) );
 }
#line 164
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_ostream < _Elem, _Traits > & operator << (
  basic_ostream < _Elem, _Traits > & _Ostr,
  const basic_string < _Elem, _Traits, _Alloc > & _Str )
 {
 typedef basic_ostream < _Elem, _Traits > _Myos;
 typedef basic_string < _Elem, _Traits, _Alloc > _Mystr;
 typedef typename _Mystr :: size_type _Mysizt;

 ios_base :: iostate _State = ios_base :: goodbit;
 _Mysizt _Size = _Str . size ( );
 _Mysizt _Pad = _Ostr . width ( ) <= 0 || ( _Mysizt ) _Ostr . width ( ) <= _Size
  ? 0 : ( _Mysizt ) _Ostr . width ( ) - _Size;
 const typename _Myos :: sentry _Ok ( _Ostr );

 if ( ! _Ok )
  _State |= ios_base :: badbit;
 else
  {
 try {
  if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left )
   for (; 0 < _Pad; -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     {
     _State |= ios_base :: badbit;
     break;
     }

  if ( _State == ios_base :: goodbit
   && _Ostr . rdbuf ( ) -> sputn ( _Str . c_str ( ), ( streamsize ) _Size )
    != ( streamsize ) _Size )
    _State |= ios_base :: badbit;
  else
   for (; 0 < _Pad; -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     {
     _State |= ios_base :: badbit;
     break;
     }
  _Ostr . width ( 0 );
  } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
  }

 _Ostr . setstate ( _State );
 return ( _Ostr );
 }
#line 217
inline int stoi(const string &_Str, size_t *_Idx = 0, int 
#line 218
_Base = 10) 
#line 219
{ 
#line 220
const char *_Ptr = _Str.c_str(); 
#line 221
char *_Eptr; 
#line 222
(*_errno()) = 0; 
#line 223
long _Ans = ::strtol(_Ptr, &_Eptr, _Base); 
#line 225
if (_Ptr == _Eptr) { 
#line 226
_Xinvalid_argument("invalid stoi argument"); }  
#line 227
if ((((*_errno()) == 34) || (_Ans < ((-2147483647) - 1))) || ((2147483647) < _Ans)) { 
#line 228
_Xout_of_range("stoi argument out of range"); }  
#line 229
if (_Idx != (0)) { 
#line 230
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 231
return (int)_Ans; 
#line 232
} 
#line 234
inline long stol(const string &_Str, size_t *_Idx = 0, int 
#line 235
_Base = 10) 
#line 236
{ 
#line 237
const char *_Ptr = _Str.c_str(); 
#line 238
char *_Eptr; 
#line 239
(*_errno()) = 0; 
#line 240
long _Ans = ::strtol(_Ptr, &_Eptr, _Base); 
#line 242
if (_Ptr == _Eptr) { 
#line 243
_Xinvalid_argument("invalid stol argument"); }  
#line 244
if ((*_errno()) == 34) { 
#line 245
_Xout_of_range("stol argument out of range"); }  
#line 246
if (_Idx != (0)) { 
#line 247
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 248
return _Ans; 
#line 249
} 
#line 251
inline unsigned long stoul(const string &_Str, size_t *_Idx = 0, int 
#line 252
_Base = 10) 
#line 253
{ 
#line 254
const char *_Ptr = _Str.c_str(); 
#line 255
char *_Eptr; 
#line 256
(*_errno()) = 0; 
#line 257
unsigned long _Ans = ::strtoul(_Ptr, &_Eptr, _Base); 
#line 259
if (_Ptr == _Eptr) { 
#line 260
_Xinvalid_argument("invalid stoul argument"); }  
#line 261
if ((*_errno()) == 34) { 
#line 262
_Xout_of_range("stoul argument out of range"); }  
#line 263
if (_Idx != (0)) { 
#line 264
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 265
return _Ans; 
#line 266
} 
#line 268
inline __int64 stoll(const string &_Str, size_t *_Idx = 0, int 
#line 269
_Base = 10) 
#line 270
{ 
#line 271
const char *_Ptr = _Str.c_str(); 
#line 272
char *_Eptr; 
#line 273
(*_errno()) = 0; 
#line 274
__int64 _Ans = ::strtoll(_Ptr, &_Eptr, _Base); 
#line 276
if (_Ptr == _Eptr) { 
#line 277
_Xinvalid_argument("invalid stoll argument"); }  
#line 278
if ((*_errno()) == 34) { 
#line 279
_Xout_of_range("stoll argument out of range"); }  
#line 280
if (_Idx != (0)) { 
#line 281
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 282
return _Ans; 
#line 283
} 
#line 285
inline unsigned __int64 stoull(const string &_Str, size_t *_Idx = 0, int 
#line 286
_Base = 10) 
#line 287
{ 
#line 288
const char *_Ptr = _Str.c_str(); 
#line 289
char *_Eptr; 
#line 290
(*_errno()) = 0; 
#line 291
unsigned __int64 _Ans = ::strtoull(_Ptr, &_Eptr, _Base); 
#line 293
if (_Ptr == _Eptr) { 
#line 294
_Xinvalid_argument("invalid stoull argument"); }  
#line 295
if ((*_errno()) == 34) { 
#line 296
_Xout_of_range("stoull argument out of range"); }  
#line 297
if (_Idx != (0)) { 
#line 298
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 299
return _Ans; 
#line 300
} 
#line 302
inline float stof(const string &_Str, size_t *_Idx = 0) 
#line 303
{ 
#line 304
const char *_Ptr = _Str.c_str(); 
#line 305
char *_Eptr; 
#line 306
(*_errno()) = 0; 
#line 307
float _Ans = ::strtof(_Ptr, &_Eptr); 
#line 309
if (_Ptr == _Eptr) { 
#line 310
_Xinvalid_argument("invalid stof argument"); }  
#line 311
if ((*_errno()) == 34) { 
#line 312
_Xout_of_range("stof argument out of range"); }  
#line 313
if (_Idx != (0)) { 
#line 314
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 315
return _Ans; 
#line 316
} 
#line 318
inline double stod(const string &_Str, size_t *_Idx = 0) 
#line 319
{ 
#line 320
const char *_Ptr = _Str.c_str(); 
#line 321
char *_Eptr; 
#line 322
(*_errno()) = 0; 
#line 323
double _Ans = ::strtod(_Ptr, &_Eptr); 
#line 325
if (_Ptr == _Eptr) { 
#line 326
_Xinvalid_argument("invalid stod argument"); }  
#line 327
if ((*_errno()) == 34) { 
#line 328
_Xout_of_range("stod argument out of range"); }  
#line 329
if (_Idx != (0)) { 
#line 330
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 331
return _Ans; 
#line 332
} 
#line 334
inline long double stold(const string &_Str, size_t *_Idx = 0) 
#line 335
{ 
#line 336
const char *_Ptr = _Str.c_str(); 
#line 337
char *_Eptr; 
#line 338
(*_errno()) = 0; 
#line 339
long double _Ans = ::strtold(_Ptr, &_Eptr); 
#line 341
if (_Ptr == _Eptr) { 
#line 342
_Xinvalid_argument("invalid stold argument"); }  
#line 343
if ((*_errno()) == 34) { 
#line 344
_Xout_of_range("stold argument out of range"); }  
#line 345
if (_Idx != (0)) { 
#line 346
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 347
return _Ans; 
#line 348
} 
#line 351
inline int stoi(const wstring &_Str, size_t *_Idx = 0, int 
#line 352
_Base = 10) 
#line 353
{ 
#line 354
const __wchar_t *_Ptr = _Str.c_str(); 
#line 355
__wchar_t *_Eptr; 
#line 356
(*_errno()) = 0; 
#line 357
long _Ans = ::wcstol(_Ptr, &_Eptr, _Base); 
#line 359
if (_Ptr == _Eptr) { 
#line 360
_Xinvalid_argument("invalid stoi argument"); }  
#line 361
if ((((*_errno()) == 34) || (_Ans < ((-2147483647) - 1))) || ((2147483647) < _Ans)) { 
#line 362
_Xout_of_range("stoi argument out of range"); }  
#line 363
if (_Idx != (0)) { 
#line 364
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 365
return (int)_Ans; 
#line 366
} 
#line 368
inline long stol(const wstring &_Str, size_t *_Idx = 0, int 
#line 369
_Base = 10) 
#line 370
{ 
#line 371
const __wchar_t *_Ptr = _Str.c_str(); 
#line 372
__wchar_t *_Eptr; 
#line 373
(*_errno()) = 0; 
#line 374
long _Ans = ::wcstol(_Ptr, &_Eptr, _Base); 
#line 376
if (_Ptr == _Eptr) { 
#line 377
_Xinvalid_argument("invalid stol argument"); }  
#line 378
if ((*_errno()) == 34) { 
#line 379
_Xout_of_range("stol argument out of range"); }  
#line 380
if (_Idx != (0)) { 
#line 381
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 382
return _Ans; 
#line 383
} 
#line 385
inline unsigned long stoul(const wstring &_Str, size_t *_Idx = 0, int 
#line 386
_Base = 10) 
#line 387
{ 
#line 388
const __wchar_t *_Ptr = _Str.c_str(); 
#line 389
__wchar_t *_Eptr; 
#line 390
(*_errno()) = 0; 
#line 391
unsigned long _Ans = ::wcstoul(_Ptr, &_Eptr, _Base); 
#line 393
if (_Ptr == _Eptr) { 
#line 394
_Xinvalid_argument("invalid stoul argument"); }  
#line 395
if ((*_errno()) == 34) { 
#line 396
_Xout_of_range("stoul argument out of range"); }  
#line 397
if (_Idx != (0)) { 
#line 398
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 399
return _Ans; 
#line 400
} 
#line 402
inline __int64 stoll(const wstring &_Str, size_t *_Idx = 0, int 
#line 403
_Base = 10) 
#line 404
{ 
#line 405
const __wchar_t *_Ptr = _Str.c_str(); 
#line 406
__wchar_t *_Eptr; 
#line 407
(*_errno()) = 0; 
#line 408
__int64 _Ans = ::wcstoll(_Ptr, &_Eptr, _Base); 
#line 410
if (_Ptr == _Eptr) { 
#line 411
_Xinvalid_argument("invalid stoll argument"); }  
#line 412
if ((*_errno()) == 34) { 
#line 413
_Xout_of_range("stoll argument out of range"); }  
#line 414
if (_Idx != (0)) { 
#line 415
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 416
return _Ans; 
#line 417
} 
#line 419
inline unsigned __int64 stoull(const wstring &_Str, size_t *_Idx = 0, int 
#line 420
_Base = 10) 
#line 421
{ 
#line 422
const __wchar_t *_Ptr = _Str.c_str(); 
#line 423
__wchar_t *_Eptr; 
#line 424
(*_errno()) = 0; 
#line 425
unsigned __int64 _Ans = ::wcstoull(_Ptr, &_Eptr, _Base); 
#line 427
if (_Ptr == _Eptr) { 
#line 428
_Xinvalid_argument("invalid stoull argument"); }  
#line 429
if ((*_errno()) == 34) { 
#line 430
_Xout_of_range("stoull argument out of range"); }  
#line 431
if (_Idx != (0)) { 
#line 432
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 433
return _Ans; 
#line 434
} 
#line 436
inline float stof(const wstring &_Str, size_t *_Idx = 0) 
#line 437
{ 
#line 438
const __wchar_t *_Ptr = _Str.c_str(); 
#line 439
__wchar_t *_Eptr; 
#line 440
(*_errno()) = 0; 
#line 441
float _Ans = ::wcstof(_Ptr, &_Eptr); 
#line 443
if (_Ptr == _Eptr) { 
#line 444
_Xinvalid_argument("invalid stof argument"); }  
#line 445
if ((*_errno()) == 34) { 
#line 446
_Xout_of_range("stof argument out of range"); }  
#line 447
if (_Idx != (0)) { 
#line 448
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 449
return _Ans; 
#line 450
} 
#line 452
inline double stod(const wstring &_Str, size_t *_Idx = 0) 
#line 453
{ 
#line 454
const __wchar_t *_Ptr = _Str.c_str(); 
#line 455
__wchar_t *_Eptr; 
#line 456
(*_errno()) = 0; 
#line 457
double _Ans = ::wcstod(_Ptr, &_Eptr); 
#line 459
if (_Ptr == _Eptr) { 
#line 460
_Xinvalid_argument("invalid stod argument"); }  
#line 461
if ((*_errno()) == 34) { 
#line 462
_Xout_of_range("stod argument out of range"); }  
#line 463
if (_Idx != (0)) { 
#line 464
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 465
return _Ans; 
#line 466
} 
#line 468
inline long double stold(const wstring &_Str, size_t *_Idx = 0) 
#line 469
{ 
#line 470
const __wchar_t *_Ptr = _Str.c_str(); 
#line 471
__wchar_t *_Eptr; 
#line 472
(*_errno()) = 0; 
#line 473
long double _Ans = ::wcstold(_Ptr, &_Eptr); 
#line 475
if (_Ptr == _Eptr) { 
#line 476
_Xinvalid_argument("invalid stold argument"); }  
#line 477
if ((*_errno()) == 34) { 
#line 478
_Xout_of_range("stold argument out of range"); }  
#line 479
if (_Idx != (0)) { 
#line 480
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 481
return _Ans; 
#line 482
} 
#line 485
#pragma warning(push)
#pragma warning(disable: 4127)
template < class _Elem,
 class _UTy > inline
 _Elem * _UIntegral_to_buff ( _Elem * _RNext, _UTy _UVal )
 {
 static_assert ( is_unsigned < _UTy > :: value, "_UTy must be unsigned" );


 auto _UVal_trunc = _UVal;



















 do
  {
  * -- _RNext = '0' + _UVal_trunc % 10;
  _UVal_trunc /= 10;
  }
 while ( _UVal_trunc != 0 );
 return ( _RNext );
 }
#line 522 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
#pragma warning(pop)
#line 524
template < class _Elem,
 class _Ty > inline
 basic_string < _Elem > _Integral_to_string ( const _Ty _Val )
 {
 static_assert ( is_integral < _Ty > :: value, "_Ty must be integral" );
 using _UTy = make_unsigned_t < _Ty >;
 _Elem _Buff [ 21 ];
 _Elem * const _Buff_end = :: std :: end ( _Buff );
 _Elem * _RNext = _Buff_end;
 auto _UVal = static_cast < _UTy > ( _Val );
 if ( _Val < 0 )
  {
  _RNext = _UIntegral_to_buff ( _RNext, 0 - _UVal );
  * -- _RNext = '-';
  }
 else
  _RNext = _UIntegral_to_buff ( _RNext, _UVal );

 return ( basic_string < _Elem > ( _RNext, _Buff_end ) );
 }
#line 545
template < class _Ty > inline
 string _Floating_to_string ( const char * _Fmt, _Ty _Val )
 {
 static_assert ( is_floating_point < _Ty > :: value,
  "_Ty must be floating point" );

 int _Len = :: _scprintf ( _Fmt, _Val );
 string _Str ( _Len + 1, '\000' );
 :: sprintf_s ( & _Str [ 0 ], _Len + 1, _Fmt, _Val );
 _Str . resize ( _Len );
 return ( _Str );
 }
#line 558
template < class _Ty > inline
 wstring _Floating_to_wstring ( const wchar_t * _Fmt, _Ty _Val )
 {
 static_assert ( is_floating_point < _Ty > :: value,
  "_Ty must be floating point" );

 int _Len = :: _scwprintf ( _Fmt, _Val );
 wstring _Str ( _Len + 1, L'\x0' );
 :: swprintf_s ( & _Str [ 0 ], _Len + 1, _Fmt, _Val );
 _Str . resize ( _Len );
 return ( _Str );
 }
#line 574
inline string to_string(int _Val) 
#line 575
{ 
#line 576
return _Integral_to_string< char> (_Val); 
#line 577
} 
#line 579
inline string to_string(unsigned _Val) 
#line 580
{ 
#line 581
return _Integral_to_string< char> (_Val); 
#line 582
} 
#line 584
inline string to_string(long _Val) 
#line 585
{ 
#line 586
return _Integral_to_string< char> (_Val); 
#line 587
} 
#line 589
inline string to_string(unsigned long _Val) 
#line 590
{ 
#line 591
return _Integral_to_string< char> (_Val); 
#line 592
} 
#line 594
inline string to_string(__int64 _Val) 
#line 595
{ 
#line 596
return _Integral_to_string< char> (_Val); 
#line 597
} 
#line 599
inline string to_string(unsigned __int64 _Val) 
#line 600
{ 
#line 601
return _Integral_to_string< char> (_Val); 
#line 602
} 
#line 604
inline string to_string(float _Val) 
#line 605
{ 
#line 606
return _Floating_to_string("%f", _Val); 
#line 607
} 
#line 609
inline string to_string(double _Val) 
#line 610
{ 
#line 611
return _Floating_to_string("%f", _Val); 
#line 612
} 
#line 614
inline string to_string(long double _Val) 
#line 615
{ 
#line 616
return _Floating_to_string("%Lf", _Val); 
#line 617
} 
#line 620
inline wstring to_wstring(int _Val) 
#line 621
{ 
#line 622
return _Integral_to_string< __wchar_t> (_Val); 
#line 623
} 
#line 625
inline wstring to_wstring(unsigned _Val) 
#line 626
{ 
#line 627
return _Integral_to_string< __wchar_t> (_Val); 
#line 628
} 
#line 630
inline wstring to_wstring(long _Val) 
#line 631
{ 
#line 632
return _Integral_to_string< __wchar_t> (_Val); 
#line 633
} 
#line 635
inline wstring to_wstring(unsigned long _Val) 
#line 636
{ 
#line 637
return _Integral_to_string< __wchar_t> (_Val); 
#line 638
} 
#line 640
inline wstring to_wstring(__int64 _Val) 
#line 641
{ 
#line 642
return _Integral_to_string< __wchar_t> (_Val); 
#line 643
} 
#line 645
inline wstring to_wstring(unsigned __int64 _Val) 
#line 646
{ 
#line 647
return _Integral_to_string< __wchar_t> (_Val); 
#line 648
} 
#line 650
inline wstring to_wstring(float _Val) 
#line 651
{ 
#line 652
return _Floating_to_wstring(L"\x25\x66", _Val); 
#line 653
} 
#line 655
inline wstring to_wstring(double _Val) 
#line 656
{ 
#line 657
return _Floating_to_wstring(L"\x25\x66", _Val); 
#line 658
} 
#line 660
inline wstring to_wstring(long double _Val) 
#line 661
{ 
#line 662
return _Floating_to_wstring(L"\x25\x4c\x66", _Val); 
#line 663
} 
#line 671
inline namespace literals { 
#line 672
inline namespace string_literals { 
#line 673
inline string operator ""s(const char *_Str, size_t _Len) 
#line 674
{ 
#line 675
return string(_Str, _Len); 
#line 676
} 
#line 678
inline wstring operator ""s(const __wchar_t *_Str, size_t _Len) 
#line 679
{ 
#line 680
return wstring(_Str, _Len); 
#line 681
} 
#line 683
inline u16string operator ""s(const char16_t *_Str, size_t _Len) 
#line 684
{ 
#line 685
return u16string(_Str, _Len); 
#line 686
} 
#line 688
inline u32string operator ""s(const char32_t *_Str, size_t _Len) 
#line 689
{ 
#line 690
return u32string(_Str, _Len); 
#line 691
} 
#line 692
}
#line 693
}
#line 699
}
#line 702
#pragma warning(pop)
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sstream"
#pragma warning(push,3)
#line 703 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
#pragma pack ( pop )
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sstream"
#pragma pack ( push, 8 )
#line 12
namespace std { 
#pragma warning(disable: 4251)
#line 16
template < class _Elem,
 class _Traits,
 class _Alloc >
 class basic_stringbuf
  : public basic_streambuf < _Elem, _Traits >
 {
public :
 typedef basic_stringbuf < _Elem, _Traits, _Alloc > _Myt;
 typedef _Alloc allocator_type;
 typedef basic_streambuf < _Elem, _Traits > _Mysb;
 typedef basic_string < _Elem, _Traits, _Alloc > _Mystr;

 explicit basic_stringbuf ( ios_base :: openmode _Mode =
  ios_base :: in | ios_base :: out )
  {
  _Init ( 0, 0, _Getstate ( _Mode ) );
  }

 explicit basic_stringbuf ( const _Mystr & _Str,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out )
  {
  _Init ( _Str . c_str ( ), _Str . size ( ), _Getstate ( _Mode ) );
  }

 basic_stringbuf ( _Myt && _Right )
  {
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  }

 _Myt & operator = ( _Myt && _Right )
  {
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  return ( * this );
  }

 void _Assign_rv ( _Myt && _Right )
  {
  if ( this != & _Right )
   {
   _Tidy ( );
   this -> swap ( _Right );
   }
  }

 void swap ( _Myt & _Right )
  {
  if ( this != & _Right )
   {
   _Mysb :: swap ( _Right );
   :: std :: swap ( _Seekhigh, _Right . _Seekhigh );
   :: std :: swap ( _Mystate, _Right . _Mystate );
   _Swap_adl ( _Al, _Right . _Al );
   }
  }

 basic_stringbuf ( const _Myt & ) = delete;
 _Myt & operator = ( const _Myt & ) = delete;

 virtual ~ basic_stringbuf ( ) noexcept
  {
  _Tidy ( );
  }

 enum
  {
  _Allocated = 1,
  _Constant = 2,
  _Noread = 4,
  _Append = 8,
  _Atend = 16 };
 typedef int _Strstate;

 typedef typename _Traits :: int_type int_type;
 typedef typename _Traits :: pos_type pos_type;
 typedef typename _Traits :: off_type off_type;

 _Mystr str ( ) const
  {
  if ( ! ( _Mystate & _Constant ) && _Mysb :: pptr ( ) != 0 )
   {
   _Mystr _Str ( _Mysb :: pbase ( ), ( _Seekhigh < _Mysb :: pptr ( )
    ? _Mysb :: pptr ( ) : _Seekhigh ) - _Mysb :: pbase ( ) );
   return ( _Str );
   }
  else if ( ! ( _Mystate & _Noread ) && _Mysb :: gptr ( ) != 0 )
   {
   _Mystr _Str ( _Mysb :: eback ( ), _Mysb :: egptr ( ) - _Mysb :: eback ( ) );
   return ( _Str );
   }
  else
   {
   _Mystr _Nul;
   return ( _Nul );
   }
  }

 void str ( const _Mystr & _Newstr )
  {
  _Tidy ( );
  _Init ( _Newstr . c_str ( ), _Newstr . size ( ), _Mystate );
  }

protected :
 virtual int_type overflow ( int_type _Meta = _Traits :: eof ( ) )
  {
  if ( _Mystate & _Constant )
   return ( _Traits :: eof ( ) );
  else if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
   return ( _Traits :: not_eof ( _Meta ) );

  if ( _Mystate & _Append
   && _Mysb :: pptr ( ) != 0 && _Mysb :: pptr ( ) < _Seekhigh )
   _Mysb :: setp ( _Mysb :: pbase ( ), _Seekhigh, _Mysb :: epptr ( ) );

  if ( _Mysb :: pptr ( ) != 0
   && _Mysb :: pptr ( ) < _Mysb :: epptr ( ) )
   {
   * _Mysb :: _Pninc ( ) = _Traits :: to_char_type ( _Meta );
   return ( _Meta );
   }
  else
   {
   size_t _Oldsize = _Mysb :: pptr ( ) == 0
    ? 0 : _Mysb :: epptr ( ) - _Mysb :: eback ( );
   size_t _Newsize = _Oldsize;
   size_t _Inc = _Newsize / 2 < _MINSIZE
    ? _MINSIZE : _Newsize / 2;

   while ( 0 < _Inc && 2147483647 - _Inc < _Newsize )
    _Inc /= 2;
   if ( _Inc == 0 )
    return ( _Traits :: eof ( ) );

   _Newsize += _Inc;

   _Elem * _Newptr = _Al . allocate ( _Newsize );
   _Elem * _Oldptr = _Mysb :: eback ( );

   if ( 0 < _Oldsize )
    _Traits :: copy ( _Newptr, _Oldptr, _Oldsize );

   if ( _Oldsize == 0 )
    {
    _Seekhigh = _Newptr;
    _Mysb :: setp ( _Newptr, _Newptr + _Newsize );
    if ( _Mystate & _Noread )
     _Mysb :: setg ( _Newptr, 0, _Newptr );
    else
     _Mysb :: setg ( _Newptr, _Newptr, _Newptr + 1 );
    }
   else
    {
    _Seekhigh = _Newptr + ( _Seekhigh - _Oldptr );
    _Mysb :: setp ( _Newptr + ( _Mysb :: pbase ( ) - _Oldptr ),
     _Newptr + ( _Mysb :: pptr ( ) - _Oldptr ),
     _Newptr + _Newsize );
    if ( _Mystate & _Noread )
     _Mysb :: setg ( _Newptr, 0, _Newptr );
    else
     _Mysb :: setg ( _Newptr,
      _Newptr + ( _Mysb :: gptr ( ) - _Oldptr ),
      _Mysb :: pptr ( ) + 1 );
    }

   if ( _Mystate & _Allocated )
    _Al . deallocate ( _Oldptr, _Oldsize );
   _Mystate |= _Allocated;

   * _Mysb :: _Pninc ( ) = _Traits :: to_char_type ( _Meta );
   return ( _Meta );
   }
  }

 virtual int_type pbackfail ( int_type _Meta = _Traits :: eof ( ) )
  {
  if ( _Mysb :: gptr ( ) == 0
   || _Mysb :: gptr ( ) <= _Mysb :: eback ( )
   || ( ! _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta )
   && ! _Traits :: eq ( _Traits :: to_char_type ( _Meta ), _Mysb :: gptr ( ) [ - 1 ] )
   && _Mystate & _Constant ) )
   return ( _Traits :: eof ( ) );
  else
   {
   _Mysb :: gbump ( - 1 );
   if ( ! _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
    * _Mysb :: gptr ( ) = _Traits :: to_char_type ( _Meta );
   return ( _Traits :: not_eof ( _Meta ) );
   }
  }

 virtual int_type underflow ( )
  {
  if ( _Mysb :: gptr ( ) == 0 )
   return ( _Traits :: eof ( ) );
  else if ( _Mysb :: gptr ( ) < _Mysb :: egptr ( ) )
   return ( _Traits :: to_int_type ( * _Mysb :: gptr ( ) ) );
  else if ( _Mystate & _Noread || _Mysb :: pptr ( ) == 0
   || ( _Mysb :: pptr ( ) <= _Mysb :: gptr ( ) && _Seekhigh <= _Mysb :: gptr ( ) ) )
   return ( _Traits :: eof ( ) );
  else
   {
   if ( _Seekhigh < _Mysb :: pptr ( ) )
    _Seekhigh = _Mysb :: pptr ( );
   _Mysb :: setg ( _Mysb :: eback ( ), _Mysb :: gptr ( ), _Seekhigh );
   return ( _Traits :: to_int_type ( * _Mysb :: gptr ( ) ) );
   }
  }

 virtual pos_type seekoff ( off_type _Off,
  ios_base :: seekdir _Way,
  ios_base :: openmode _Which = ios_base :: in | ios_base :: out )
  {
  if ( _Mysb :: pptr ( ) != 0 && _Seekhigh < _Mysb :: pptr ( ) )
   _Seekhigh = _Mysb :: pptr ( );

  if ( _Which & ios_base :: in && _Mysb :: gptr ( ) != 0 )
   {
   if ( _Way == ios_base :: end )
    _Off += ( off_type ) ( _Seekhigh - _Mysb :: eback ( ) );
   else if ( _Way == ios_base :: cur
    && ( _Which & ios_base :: out ) == 0 )
    _Off += ( off_type ) ( _Mysb :: gptr ( ) - _Mysb :: eback ( ) );
   else if ( _Way != ios_base :: beg )
    _Off = _BADOFF;

   if ( 0 <= _Off && _Off <= _Seekhigh - _Mysb :: eback ( ) )
    {
    _Mysb :: gbump ( ( int ) ( _Mysb :: eback ( ) - _Mysb :: gptr ( ) + _Off ) );
    if ( _Which & ios_base :: out && _Mysb :: pptr ( ) != 0 )
     _Mysb :: setp ( _Mysb :: pbase ( ), _Mysb :: gptr ( ),
      _Mysb :: epptr ( ) );
    }
   else
    _Off = _BADOFF;
   }
  else if ( _Which & ios_base :: out && _Mysb :: pptr ( ) != 0 )
   {
   if ( _Way == ios_base :: end )
    _Off += ( off_type ) ( _Seekhigh - _Mysb :: eback ( ) );
   else if ( _Way == ios_base :: cur )
    _Off += ( off_type ) ( _Mysb :: pptr ( ) - _Mysb :: eback ( ) );
   else if ( _Way != ios_base :: beg )
    _Off = _BADOFF;

   if ( 0 <= _Off && _Off <= _Seekhigh - _Mysb :: eback ( ) )
    _Mysb :: pbump ( ( int ) ( _Mysb :: eback ( )
     - _Mysb :: pptr ( ) + _Off ) );
   else
    _Off = _BADOFF;
   }

  else if ( _Off != 0 )


   _Off = _BADOFF;
  return ( pos_type ( _Off ) );
  }

 virtual pos_type seekpos ( pos_type _Ptr,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out )
  {
  streamoff _Off = ( streamoff ) _Ptr;
  if ( _Mysb :: pptr ( ) != 0 && _Seekhigh < _Mysb :: pptr ( ) )
   _Seekhigh = _Mysb :: pptr ( );

  if ( _Off == _BADOFF )
   ;
  else if ( _Mode & ios_base :: in && _Mysb :: gptr ( ) != 0 )
   {
   if ( 0 <= _Off && _Off <= _Seekhigh - _Mysb :: eback ( ) )
    {
    _Mysb :: gbump ( ( int ) ( _Mysb :: eback ( ) - _Mysb :: gptr ( ) + _Off ) );
    if ( _Mode & ios_base :: out && _Mysb :: pptr ( ) != 0 )
     _Mysb :: setp ( _Mysb :: pbase ( ), _Mysb :: gptr ( ),
      _Mysb :: epptr ( ) );
    }
   else
    _Off = _BADOFF;
   }
  else if ( _Mode & ios_base :: out && _Mysb :: pptr ( ) != 0 )
   {
   if ( 0 <= _Off && _Off <= _Seekhigh - _Mysb :: eback ( ) )
    _Mysb :: pbump ( ( int ) ( _Mysb :: eback ( )
     - _Mysb :: pptr ( ) + _Off ) );
   else
    _Off = _BADOFF;
   }
  else
   _Off = _BADOFF;
  return ( streampos ( _Off ) );
  }

 void _Init ( const _Elem * _Ptr,
  size_t _Count, _Strstate _State )
  {
  _Seekhigh = 0;
  _Mystate = _State;

  if ( _Count != 0
   && ( _Mystate & ( _Noread | _Constant ) ) != ( _Noread | _Constant ) )
   {
   _Elem * _Pnew = _Al . allocate ( _Count );
   _Traits :: copy ( _Pnew, _Ptr, _Count );
   _Seekhigh = _Pnew + _Count;

   if ( ! ( _Mystate & _Noread ) )
    _Mysb :: setg ( _Pnew, _Pnew,
     _Pnew + _Count );
   if ( ! ( _Mystate & _Constant ) )
    {
    _Mysb :: setp ( _Pnew,
     ( _Mystate & ( _Atend | _Append ) ) ? _Pnew + _Count : _Pnew,
     _Pnew + _Count );
    if ( _Mysb :: gptr ( ) == 0 )
     _Mysb :: setg ( _Pnew, 0, _Pnew );
    }
   _Mystate |= _Allocated;
   }
  }

 void _Tidy ( )
  {
  if ( _Mystate & _Allocated )
   _Al . deallocate ( _Mysb :: eback ( ),
    ( _Mysb :: pptr ( ) != 0 ? _Mysb :: epptr ( )
     : _Mysb :: egptr ( ) ) - _Mysb :: eback ( ) );
  _Mysb :: setg ( 0, 0, 0 );
  _Mysb :: setp ( 0, 0 );
  _Seekhigh = 0;
  _Mystate &= ~ _Allocated;
  }

private :
 enum
  {
  _MINSIZE = 32 };

 _Strstate _Getstate ( ios_base :: openmode _Mode )
  {
  _Strstate _State = ( _Strstate ) 0;
  if ( ! ( _Mode & ios_base :: in ) )
   _State |= _Noread;
  if ( ! ( _Mode & ios_base :: out ) )
   _State |= _Constant;
  if ( _Mode & ios_base :: app )
   _State |= _Append;
  if ( _Mode & ios_base :: ate )
   _State |= _Atend;
  return ( _State );
  }

 _Elem * _Seekhigh;
 _Strstate _Mystate;
 allocator_type _Al;
 };
#line 373
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 void swap ( basic_stringbuf < _Elem, _Traits, _Alloc > & _Left,
  basic_stringbuf < _Elem, _Traits, _Alloc > & _Right )
 {
 _Left . swap ( _Right );
 }
#line 383
template < class _Elem,
 class _Traits,
 class _Alloc >
 class basic_istringstream
  : public basic_istream < _Elem, _Traits >
 {
public :
 typedef basic_istringstream < _Elem, _Traits, _Alloc > _Myt;
 typedef basic_istream < _Elem, _Traits > _Mybase;
 typedef _Alloc allocator_type;
 typedef basic_stringbuf < _Elem, _Traits, _Alloc > _Mysb;
 typedef basic_string < _Elem, _Traits, _Alloc > _Mystr;

 explicit basic_istringstream ( ios_base :: openmode _Mode = ios_base :: in )
  : _Mybase ( & _Stringbuffer ),
   _Stringbuffer ( _Mode | ios_base :: in )
  {
  }

 explicit basic_istringstream ( const _Mystr & _Str,
  ios_base :: openmode _Mode = ios_base :: in )
  : _Mybase ( & _Stringbuffer ),
   _Stringbuffer ( _Str, _Mode | ios_base :: in )
  {
  }

 basic_istringstream ( _Myt && _Right )
  : _Mybase ( & _Stringbuffer )
  {
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  }

 _Myt & operator = ( _Myt && _Right )
  {
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  return ( * this );
  }

 void _Assign_rv ( _Myt && _Right )
  {
  if ( this != & _Right )
   {
   _Stringbuffer . str ( _Mystr ( ) );
   this -> swap ( _Right );
   }
  }

 void swap ( _Myt & _Right )
  {
  if ( this != & _Right )
   {
   _Mybase :: swap ( _Right );
   _Stringbuffer . swap ( _Right . _Stringbuffer );
   }
  }

 basic_istringstream ( const _Myt & ) = delete;
 _Myt & operator = ( const _Myt & ) = delete;

 virtual ~ basic_istringstream ( ) noexcept
  {
  }

 _Mysb * rdbuf ( ) const
  {
  return ( ( _Mysb * ) & _Stringbuffer );
  }

 _Mystr str ( ) const
  {
  return ( _Stringbuffer . str ( ) );
  }

 void str ( const _Mystr & _Newstr )
  {
  _Stringbuffer . str ( _Newstr );
  }

private :
 _Mysb _Stringbuffer;
 };
#line 466
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 void swap ( basic_istringstream < _Elem, _Traits, _Alloc > & _Left,
  basic_istringstream < _Elem, _Traits, _Alloc > & _Right )
 {
 _Left . swap ( _Right );
 }
#line 476
template < class _Elem,
 class _Traits,
 class _Alloc >
 class basic_ostringstream
  : public basic_ostream < _Elem, _Traits >
 {
public :
 typedef basic_ostringstream < _Elem, _Traits, _Alloc > _Myt;
 typedef basic_ostream < _Elem, _Traits > _Mybase;
 typedef _Alloc allocator_type;
 typedef basic_stringbuf < _Elem, _Traits, _Alloc > _Mysb;
 typedef basic_string < _Elem, _Traits, _Alloc > _Mystr;

 explicit basic_ostringstream ( ios_base :: openmode _Mode = ios_base :: out )
  : _Mybase ( & _Stringbuffer ),
   _Stringbuffer ( _Mode | ios_base :: out )
  {
  }

 explicit basic_ostringstream ( const _Mystr & _Str,
  ios_base :: openmode _Mode = ios_base :: out )
  : _Mybase ( & _Stringbuffer ),
   _Stringbuffer ( _Str, _Mode | ios_base :: out )
  {
  }

 basic_ostringstream ( _Myt && _Right )
  : _Mybase ( & _Stringbuffer )
  {
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  }

 _Myt & operator = ( _Myt && _Right )
  {
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  return ( * this );
  }

 void _Assign_rv ( _Myt && _Right )
  {
  if ( this != & _Right )
   {
   _Stringbuffer . str ( _Mystr ( ) );
   this -> swap ( _Right );
   }
  }

 void swap ( _Myt & _Right )
  {
  if ( this != & _Right )
   {
   _Mybase :: swap ( _Right );
   _Stringbuffer . swap ( _Right . _Stringbuffer );
   }
  }

 basic_ostringstream ( const _Myt & ) = delete;
 _Myt & operator = ( const _Myt & ) = delete;

 virtual ~ basic_ostringstream ( ) noexcept
  {
  }

 _Mysb * rdbuf ( ) const
  {
  return ( ( _Mysb * ) & _Stringbuffer );
  }

 _Mystr str ( ) const
  {
  return ( _Stringbuffer . str ( ) );
  }

 void str ( const _Mystr & _Newstr )
  {
  _Stringbuffer . str ( _Newstr );
  }

private :
 _Mysb _Stringbuffer;
 };
#line 559
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 void swap ( basic_ostringstream < _Elem, _Traits, _Alloc > & _Left,
  basic_ostringstream < _Elem, _Traits, _Alloc > & _Right )
 {
 _Left . swap ( _Right );
 }
#line 569
template < class _Elem,
 class _Traits,
 class _Alloc >
 class basic_stringstream
  : public basic_iostream < _Elem, _Traits >
 {
public :
 typedef basic_stringstream < _Elem, _Traits, _Alloc > _Myt;
 typedef basic_iostream < _Elem, _Traits > _Mybase;
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef _Alloc allocator_type;
 typedef typename _Traits :: int_type int_type;
 typedef typename _Traits :: pos_type pos_type;
 typedef typename _Traits :: off_type off_type;
 typedef basic_stringbuf < _Elem, _Traits, _Alloc > _Mysb;
 typedef basic_string < _Elem, _Traits, _Alloc > _Mystr;

 explicit basic_stringstream ( ios_base :: openmode _Mode =
  ios_base :: in | ios_base :: out )
  : _Mybase ( & _Stringbuffer ),
   _Stringbuffer ( _Mode )
  {
  }

 explicit basic_stringstream ( const _Mystr & _Str,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out )
  : _Mybase ( & _Stringbuffer ),
   _Stringbuffer ( _Str, _Mode )
  {
  }

 basic_stringstream ( _Myt && _Right )
  : _Mybase ( & _Stringbuffer )
  {
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  }

 _Myt & operator = ( _Myt && _Right )
  {
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  return ( * this );
  }

 void _Assign_rv ( _Myt && _Right )
  {
  if ( this != & _Right )
   {
   _Stringbuffer . str ( _Mystr ( ) );
   this -> swap ( _Right );
   }
  }

 void swap ( _Myt & _Right )
  {
  if ( this != & _Right )
   {
   _Mybase :: swap ( _Right );
   _Stringbuffer . swap ( _Right . _Stringbuffer );
   }
  }

 basic_stringstream ( const _Myt & ) = delete;
 _Myt & operator = ( const _Myt & ) = delete;

 virtual ~ basic_stringstream ( ) noexcept
  {
  }

 _Mysb * rdbuf ( ) const
  {
  return ( ( _Mysb * ) & _Stringbuffer );
  }

 _Mystr str ( ) const
  {
  return ( _Stringbuffer . str ( ) );
  }

 void str ( const _Mystr & _Newstr )
  {
  _Stringbuffer . str ( _Newstr );
  }

private :
 _Mysb _Stringbuffer;
 };
#line 658
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 void swap ( basic_stringstream < _Elem, _Traits, _Alloc > & _Left,
  basic_stringstream < _Elem, _Traits, _Alloc > & _Right )
 {
 _Left . swap ( _Right );
 }
#line 666
}
#line 668
#pragma warning(pop)
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
#pragma warning(push,3)
#line 669 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sstream"
#pragma pack ( pop )
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
#pragma pack ( push, 8 )
#line 13
namespace std { 
#pragma warning(disable: 4127)
#line 16
__declspec(dllimport) extern FILE *__cdecl _Fiopen(const char *, ios_base::openmode, int); 
#line 19
__declspec(dllimport) extern FILE *__cdecl _Fiopen(const __wchar_t *, ios_base::openmode, int); 
#line 24
__declspec(dllimport) extern FILE *__cdecl _Fiopen(const unsigned short *, ios_base::openmode, int); 
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template < class _Elem > inline
 bool _Fgetc ( _Elem & _Ch, FILE * _File )
 {
 return ( fread ( & _Ch, sizeof ( _Elem ), 1, _File ) == 1 );
 }
#line 36
template<> inline bool _Fgetc(char &_Byte, FILE *_File) 
#line 37
{ 
#line 38
int _Meta; 
#line 39
if ((_Meta = fgetc(_File)) == (-1)) { 
#line 40
return false; } else 
#line 42
{ 
#line 43
_Byte = ((char)_Meta); 
#line 44
return true; 
#line 45
}  
#line 46
} 
#line 48
template<> inline bool _Fgetc(__wchar_t &_Wchar, FILE *_File) 
#line 49
{ 
#line 50
wint_t _Meta; 
#line 51
if ((_Meta = ::fgetwc(_File)) == ((wint_t)65535)) { 
#line 52
return false; } else 
#line 54
{ 
#line 55
_Wchar = ((__wchar_t)_Meta); 
#line 56
return true; 
#line 57
}  
#line 58
} 
#line 61
template<> inline bool _Fgetc(unsigned short &_Wchar, FILE *_File) 
#line 62
{ 
#line 63
wint_t _Meta; 
#line 64
if ((_Meta = ::fgetwc(_File)) == ((wint_t)65535)) { 
#line 65
return false; } else 
#line 67
{ 
#line 68
_Wchar = ((unsigned short)_Meta); 
#line 69
return true; 
#line 70
}  
#line 71
} 
#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template < class _Elem > inline
 bool _Fputc ( _Elem _Ch, FILE * _File )
 {
 return ( fwrite ( & _Ch, 1, sizeof ( _Elem ), _File ) == sizeof ( _Elem ) );
 }
#line 81
template<> inline bool _Fputc(char _Byte, FILE *_File) 
#line 82
{ 
#line 83
return fputc(_Byte, _File) != (-1); 
#line 84
} 
#line 86
template<> inline bool _Fputc(__wchar_t _Wchar, FILE *_File) 
#line 87
{ 
#line 88
return (::fputwc(_Wchar, _File)) != ((wint_t)65535); 
#line 89
} 
#line 92
template<> inline bool _Fputc(unsigned short _Wchar, FILE *_File) 
#line 93
{ 
#line 94
return (::fputwc(_Wchar, _File)) != ((wint_t)65535); 
#line 95
} 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template < class _Elem > inline
 bool _Ungetc ( const _Elem & _Ch, FILE * _File )
 {
 return ( false );
 }
#line 105
template<> inline bool _Ungetc(const char &_Byte, FILE *_File) 
#line 106
{ 
#line 107
return ungetc((unsigned char)_Byte, _File) != (-1); 
#line 108
} 
#line 110
template<> inline bool _Ungetc(const signed char &_Byte, FILE *_File) 
#line 111
{ 
#line 112
return ungetc((unsigned char)_Byte, _File) != (-1); 
#line 113
} 
#line 115
template<> inline bool _Ungetc(const unsigned char &_Byte, FILE *_File) 
#line 116
{ 
#line 117
return ungetc(_Byte, _File) != (-1); 
#line 118
} 
#line 120
template<> inline bool _Ungetc(const __wchar_t &_Wchar, FILE *_File) 
#line 121
{ 
#line 122
return (::ungetwc(_Wchar, _File)) != ((wint_t)65535); 
#line 123
} 
#line 126
template<> inline bool _Ungetc(const unsigned short &_Wchar, FILE *_File) 
#line 127
{ 
#line 128
return (::ungetwc(_Wchar, _File)) != ((wint_t)65535); 
#line 129
} 
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template < class _Elem,
 class _Traits >
 class basic_filebuf
  : public basic_streambuf < _Elem, _Traits >
 {
public :
 typedef basic_filebuf < _Elem, _Traits > _Myt;
 typedef basic_streambuf < _Elem, _Traits > _Mysb;
 typedef typename _Traits :: state_type _Myst;
 typedef codecvt < _Elem, char, typename _Traits :: state_type > _Cvt;

 basic_filebuf ( FILE * _File = 0 )
  : _Mysb ( )
  {
  _Init ( _File, _Newfl );
  }

 virtual ~ basic_filebuf ( ) noexcept
  {
  if ( _Myfile != 0 )
   _Reset_back ( );
  if ( _Closef )
   close ( );
  }

 typedef typename _Traits :: int_type int_type;
 typedef typename _Traits :: pos_type pos_type;
 typedef typename _Traits :: off_type off_type;

 basic_filebuf ( _Uninitialized )
  : _Mysb ( _Noinit )
  {
  }

 basic_filebuf ( _Myt && _Right )
  {
  _Init ( _Right . _Myfile, _Newfl );
  _Init ( ( FILE * ) 0, _Closefl );
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  }

 _Myt & operator = ( _Myt && _Right )
  {
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  return ( * this );
  }

 void _Assign_rv ( _Myt && _Right )
  {
  if ( this != & _Right )
   {
   close ( );
   this -> swap ( _Right );
   }
  }

 void swap ( _Myt & _Right )
  {
  if ( this != & _Right )
   {

   FILE * _Myfile_sav = _Myfile;
   const _Cvt * _Pcvt_sav = _Pcvt;
   typename _Traits :: state_type _State_sav = _State;
   bool _Wrotesome_sav = _Wrotesome;
   bool _Closef_sav = _Closef;
   bool _Set_eback_sav = _Mysb :: eback ( ) == & _Mychar;
   bool _Set_eback_live = _Mysb :: gptr ( ) == & _Mychar;

   _Elem * _Pfirst0 = _Mysb :: pbase ( );
   _Elem * _Pnext0 = _Mysb :: pptr ( );
   _Elem * _Pend = _Mysb :: epptr ( );
   _Elem * _Gfirst0 = _Mysb :: eback ( );
   _Elem * _Gnext0 = _Mysb :: gptr ( );
   _Elem * _Gend = _Mysb :: egptr ( );


   _Init ( _Right . _Myfile, _Right . _Myfile != 0 ? _Openfl : _Newfl );
   _Mysb :: setp ( _Right . pbase ( ), _Right . pptr ( ), _Right . epptr ( ) );
   if ( _Right . eback ( ) != & _Right . _Mychar )
    _Mysb :: setg ( _Right . eback ( ), _Right . gptr ( ), _Right . egptr ( ) );
   else if ( _Right . gptr ( ) != & _Right . _Mychar )
    _Mysb :: setg ( & _Mychar, & _Mychar + 1, & _Mychar + 1 );
   else
    _Mysb :: setg ( & _Mychar, & _Mychar, & _Mychar + 1 );

   _Pcvt = _Right . _Pcvt;
   _State = _Right . _State;
   _Wrotesome = _Right . _Wrotesome;
   _Closef = _Right . _Closef;


   _Right . _Init ( _Myfile_sav, _Myfile_sav != 0 ? _Openfl : _Newfl );
   _Right . setp ( _Pfirst0, _Pnext0, _Pend );
   if ( ! _Set_eback_sav )
    _Right . setg ( _Gfirst0, _Gnext0, _Gend );
   else if ( ! _Set_eback_live )
    _Right . setg ( & _Right . _Mychar, & _Right . _Mychar + 1,
     & _Right . _Mychar + 1 );
   else
    _Right . setg ( & _Right . _Mychar, & _Right . _Mychar,
     & _Right . _Mychar + 1 );

   _Right . _Pcvt = _Pcvt_sav;
   _Right . _State = _State_sav;
   _Right . _Wrotesome = _Wrotesome_sav;
   _Right . _Closef = _Closef_sav;


   :: std :: swap ( _Set_eback, _Right . _Set_eback );
   :: std :: swap ( _Set_egptr, _Right . _Set_egptr );

   :: std :: swap ( _Mychar, _Right . _Mychar );
   :: std :: swap ( _Mysb :: _Plocale, _Right . _Plocale );
   }
  }

 basic_filebuf ( const _Myt & ) = delete;
 _Myt & operator = ( const _Myt & ) = delete;

 enum _Initfl
  {
  _Newfl, _Openfl, _Closefl };

 bool is_open ( ) const
  {
  return ( _Myfile != 0 );
  }

 _Myt * open ( const char * _Filename,
  ios_base :: openmode _Mode,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  FILE * _File;
  if ( _Myfile != 0 || ( _File = _Fiopen ( _Filename, _Mode, _Prot ) ) == 0 )
   return ( 0 );

  _Init ( _File, _Openfl );
  _Initcvt ( & use_facet < _Cvt > ( _Mysb :: getloc ( ) ) );
  return ( this );
  }

 _Myt * open ( const string & _Str,
  ios_base :: openmode _Mode,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  return ( open ( _Str . c_str ( ), _Mode, _Prot ) );
  }


 _Myt * open ( const char * _Filename, ios_base :: open_mode _Mode )
  {
  return ( open ( _Filename, ( ios_base :: openmode ) _Mode ) );
  }


 _Myt * open ( const wchar_t * _Filename,
  ios_base :: openmode _Mode,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  FILE * _File;
  if ( _Myfile != 0 || ( _File = _Fiopen ( _Filename, _Mode, _Prot ) ) == 0 )
   return ( 0 );

  _Init ( _File, _Openfl );
  _Initcvt ( & use_facet < _Cvt > ( _Mysb :: getloc ( ) ) );
  return ( this );
  }

 _Myt * open ( const wstring & _Str,
  ios_base :: openmode _Mode,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  return ( open ( _Str . c_str ( ), _Mode, _Prot ) );
  }


 _Myt * open ( const wchar_t * _Filename,
  ios_base :: open_mode _Mode )
  {
  return ( open ( _Filename, ( ios_base :: openmode ) _Mode ) );
  }



 _Myt * open ( const unsigned short * _Filename,
  ios_base :: openmode _Mode,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  FILE * _File;
  if ( _Myfile != 0 || ( _File = _Fiopen ( _Filename, _Mode, _Prot ) ) == 0 )
   return ( 0 );

  _Init ( _File, _Openfl );
  _Initcvt ( & use_facet < _Cvt > ( _Mysb :: getloc ( ) ) );
  return ( this );
  }


 _Myt * open ( const unsigned short * _Filename,
  ios_base :: open_mode _Mode )
  {
  return ( open ( _Filename, ( ios_base :: openmode ) _Mode ) );
  }



 _Myt * close ( )
  {
  _Myt * _Ans = this;
  if ( _Myfile == 0 )
   _Ans = 0;
  else
   {
   if ( ! _Endwrite ( ) )
    _Ans = 0;
   if ( fclose ( _Myfile ) != 0 )
    _Ans = 0;
   }
  _Init ( 0, _Closefl );
  return ( _Ans );
  }

 virtual void _Lock ( )
  {
  if ( _Myfile )
   :: _lock_file ( _Myfile );
  }

 virtual void _Unlock ( )
  {
  if ( _Myfile )
   :: _unlock_file ( _Myfile );
  }

protected :
 virtual int_type overflow ( int_type _Meta =
  _Traits :: eof ( ) )
  {
  if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
   return ( _Traits :: not_eof ( _Meta ) );
  else if ( _Mysb :: pptr ( ) != 0
   && _Mysb :: pptr ( ) < _Mysb :: epptr ( ) )
   {
   * _Mysb :: _Pninc ( ) = _Traits :: to_char_type ( _Meta );
   return ( _Meta );
   }
  else if ( _Myfile == 0 )
   return ( _Traits :: eof ( ) );
  _Reset_back ( );
  if ( _Pcvt == 0 )
   return ( _Fputc ( _Traits :: to_char_type ( _Meta ), _Myfile )
    ? _Meta : _Traits :: eof ( ) );
  else
   {
   const int _STRING_INC = 8;
   const _Elem _Ch = _Traits :: to_char_type ( _Meta );
   const _Elem * _Src;
   char * _Dest;

   string _Str ( _STRING_INC, '\000' );
   for (;; )
    switch ( _Pcvt -> out ( _State,
     & _Ch, & _Ch + 1, _Src,
     & * _Str . begin ( ), & * _Str . begin ( ) + _Str . size ( ), _Dest ) )
    {
    case codecvt_base :: partial :
    case codecvt_base :: ok :
     {
     size_t _Count = _Dest - & * _Str . begin ( );
     if ( 0 < _Count && _Count !=
      fwrite ( & * _Str . begin ( ), 1, _Count, _Myfile ) )
      return ( _Traits :: eof ( ) );

     _Wrotesome = true;
     if ( _Src != & _Ch )
      return ( _Meta );

     if ( 0 < _Count )
      ;
     else if ( _Str . size ( ) < 4 * _STRING_INC )
      _Str . append ( _STRING_INC, '\000' );
     else
      return ( _Traits :: eof ( ) );
     break;
     }

    case codecvt_base :: noconv :
     return ( _Fputc ( _Ch, _Myfile ) ? _Meta
      : _Traits :: eof ( ) );

    default :
     return ( _Traits :: eof ( ) );
    }
   }
 }

 virtual int_type pbackfail ( int_type _Meta =
  _Traits :: eof ( ) )
  {
  if ( _Mysb :: gptr ( ) != 0
   && _Mysb :: eback ( ) < _Mysb :: gptr ( )
   && ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta )
   || _Traits :: eq_int_type ( _Traits :: to_int_type ( _Mysb :: gptr ( ) [ - 1 ] ),
    _Meta ) ) )
   {
   _Mysb :: _Gndec ( );
   return ( _Traits :: not_eof ( _Meta ) );
   }
  else if ( _Myfile == 0 || _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
   return ( _Traits :: eof ( ) );
  else if ( _Pcvt == 0 && _Ungetc ( _Traits :: to_char_type ( _Meta ), _Myfile ) )
   return ( _Meta );
  else if ( _Mysb :: gptr ( ) != & _Mychar )
   {
   _Mychar = _Traits :: to_char_type ( _Meta );
   _Set_back ( );
   return ( _Meta );
   }
  else
   return ( _Traits :: eof ( ) );
 }

 virtual int_type underflow ( )
  {
  int_type _Meta;
  if ( _Mysb :: gptr ( ) != 0
   && _Mysb :: gptr ( ) < _Mysb :: egptr ( ) )
   return ( _Traits :: to_int_type ( * _Mysb :: gptr ( ) ) );
  else if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta = uflow ( ) ) )
   return ( _Meta );
  else
   {
   pbackfail ( _Meta );
   return ( _Meta );
   }
  }

 virtual int_type uflow ( )
  {
  if ( _Mysb :: gptr ( ) != 0
   && _Mysb :: gptr ( ) < _Mysb :: egptr ( ) )
   return ( _Traits :: to_int_type (
    * _Mysb :: _Gninc ( ) ) );
  else if ( _Myfile == 0 )
   return ( _Traits :: eof ( ) );
  _Reset_back ( );
  if ( _Pcvt == 0 )
   {
   _Elem _Ch = 0;
   return ( _Fgetc ( _Ch, _Myfile ) ? _Traits :: to_int_type ( _Ch )
    : _Traits :: eof ( ) );
   }
  else
   {
   string _Str;

   for (;; )
    {
    _Elem _Ch, * _Dest;
    const char * _Src;
    int _Nleft;
    int _Meta = fgetc ( _Myfile );

    if ( _Meta == ( - 1 ) )
     return ( _Traits :: eof ( ) );

    _Str . append ( 1, ( char ) _Meta );
    switch ( _Pcvt -> in ( _State,
     & * _Str . begin ( ), & * _Str . begin ( ) + _Str . size ( ), _Src,
     & _Ch, & _Ch + 1, _Dest ) )
     {
    case codecvt_base :: partial :
    case codecvt_base :: ok :
     if ( _Dest != & _Ch )
      {
      _Nleft = ( int ) ( & * _Str . begin ( ) + _Str . size ( ) - _Src );
      for (; 0 < _Nleft; )
       ungetc ( _Src [ -- _Nleft ], _Myfile );
      return ( _Traits :: to_int_type ( _Ch ) );
      }
     else
      _Str . erase ( ( size_t ) 0,
       ( size_t ) ( _Src - & * _Str . begin ( ) ) );
     break;

    case codecvt_base :: noconv :
     if ( _Str . size ( ) < sizeof ( _Elem ) )
      break;

     :: memcpy_s ( ( & _Ch ), ( sizeof ( _Elem ) ), ( & * _Str . begin ( ) ), ( sizeof ( _Elem ) ) );


     return ( _Traits :: to_int_type ( _Ch ) );

    default :
     return ( _Traits :: eof ( ) );
     }
    }
   }
  }

 virtual pos_type seekoff ( off_type _Off,
  ios_base :: seekdir _Way,
  ios_base :: openmode =
   ( ios_base :: openmode ) ( ios_base :: in | ios_base :: out ) )
  {
  fpos_t _Fileposition;

  if ( _Mysb :: gptr ( ) == & _Mychar
   && _Way == ios_base :: cur
   && _Pcvt == 0 )
   _Off -= ( off_type ) sizeof ( _Elem );

  if ( _Myfile == 0 || ! _Endwrite ( )
   || ( ( _Off != 0 || _Way != ios_base :: cur )
    && _fseeki64 ( _Myfile, _Off, _Way ) != 0 )
   || fgetpos ( _Myfile, & _Fileposition ) != 0 )
   return ( pos_type ( _BADOFF ) );

  _Reset_back ( );
  return ( pos_type ( _State, _Fileposition ) );

  }

 virtual pos_type seekpos ( pos_type _Pos,
  ios_base :: openmode =
   ( ios_base :: openmode ) ( ios_base :: in | ios_base :: out ) )
  {
  fpos_t _Fileposition = _Pos . seekpos ( );
  off_type _Off = ( off_type ) _Pos - ( off_type ) ( ( long long ) ( _Fileposition ) );

  if ( _Myfile == 0 || ! _Endwrite ( )
   || fsetpos ( _Myfile, & _Fileposition ) != 0
   || ( _Off != 0 && _fseeki64 ( _Myfile, _Off, 1 ) != 0 )
   || fgetpos ( _Myfile, & _Fileposition ) != 0 )
   return ( pos_type ( _BADOFF ) );

  _State = _Pos . state ( );

  _Reset_back ( );
  return ( pos_type ( _State, _Fileposition ) );

  }

 virtual _Mysb * setbuf ( _Elem * _Buffer, streamsize _Count )
  {
  if ( _Myfile == 0 || setvbuf ( _Myfile, ( char * ) _Buffer,
   _Buffer == 0 && _Count == 0 ? 4 : 0,
   ( size_t ) _Count * sizeof ( _Elem ) ) != 0 )
   return ( 0 );
  else
   {
   _Init ( _Myfile, _Openfl );
   return ( this );
   }
  }

 virtual int sync ( )
  {
  return ( _Myfile == 0
   || _Traits :: eq_int_type ( _Traits :: eof ( ), overflow ( ) )
   || 0 <= fflush ( _Myfile ) ? 0 : - 1 );
  }

 virtual void imbue ( const locale & _Loc )
  {
  _Initcvt ( & use_facet < _Cvt > ( _Loc ) );
  }

 void _Init ( FILE * _File, _Initfl _Which )
  {
   static _Myst _Stinit;

  _Closef = _Which == _Openfl;
  _Wrotesome = false;

  _Mysb :: _Init ( );






  #pragma warning(push)
  #pragma warning(disable: 6240)
  if ( _File != 0 && sizeof ( _Elem ) == 1 )
  #pragma warning(pop)

   {
   _Elem * * _Pb = 0;
   _Elem * * _Pn = 0;
   int * _Nr = 0;

   :: _get_stream_buffer_pointers (
    _File,
    reinterpret_cast < char * * * > ( & _Pb ),
    reinterpret_cast < char * * * > ( & _Pn ),
    & _Nr );
   int * _Nw = _Nr;

   _Mysb :: _Init ( _Pb, _Pn, _Nr, _Pb, _Pn, _Nw );
   }

  _Myfile = _File;
  _State = _Stinit;
  _Pcvt = 0;
  }

 bool _Endwrite ( )
  {
  if ( _Pcvt == 0 || ! _Wrotesome )
   return ( true );
  else
   {
   const int _STRING_INC = 8;
   char * _Dest;
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ), overflow ( ) ) )
    return ( false );

   string _Str ( _STRING_INC, '\000' );
   for (;; )
    switch ( _Pcvt -> unshift ( _State,
     & * _Str . begin ( ), & * _Str . begin ( ) + _Str . size ( ), _Dest ) )
    {
    case codecvt_base :: ok :
     _Wrotesome = false;

    case codecvt_base :: partial :
     {
     size_t _Count = _Dest - & * _Str . begin ( );
     if ( 0 < _Count && _Count !=
      fwrite ( & * _Str . begin ( ), 1, _Count, _Myfile ) )
      return ( false );
     if ( ! _Wrotesome )
      return ( true );
     if ( _Count == 0 )
      _Str . append ( _STRING_INC, '\000' );
     break;
     }

    case codecvt_base :: noconv :
     return ( true );

    default :
     return ( false );
    }
   }
  }

 void _Initcvt ( const _Cvt * _Newpcvt )
  {
  if ( _Newpcvt -> always_noconv ( ) )
   _Pcvt = 0;
  else
   {
   _Pcvt = _Newpcvt;
   _Mysb :: _Init ( );
   }
  }

private :
 const _Cvt * _Pcvt;
 _Elem _Mychar;
 bool _Wrotesome;
 typename _Traits :: state_type _State;
 bool _Closef;
 FILE * _Myfile;

 void _Reset_back ( )
  {
  if ( _Mysb :: eback ( ) == & _Mychar )
   _Mysb :: setg ( _Set_eback, _Set_eback, _Set_egptr );
  }

 void _Set_back ( )
  {
  if ( _Mysb :: eback ( ) != & _Mychar )
   {
   _Set_eback = _Mysb :: eback ( );
   _Set_egptr = _Mysb :: egptr ( );
   }
  _Mysb :: setg ( & _Mychar, & _Mychar, & _Mychar + 1 );
  }

 _Elem * _Set_eback;
 _Elem * _Set_egptr;
 };
#line 723 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template < class _Elem,
 class _Traits > inline
 void swap ( basic_filebuf < _Elem, _Traits > & _Left,
  basic_filebuf < _Elem, _Traits > & _Right )
 {
 _Left . swap ( _Right );
 }
#line 732
template < class _Elem,
 class _Traits >
 class basic_ifstream
  : public basic_istream < _Elem, _Traits >
 {
public :
 typedef basic_ifstream < _Elem, _Traits > _Myt;
 typedef basic_istream < _Elem, _Traits > _Mybase;
 typedef basic_filebuf < _Elem, _Traits > _Myfb;
 typedef basic_ios < _Elem, _Traits > _Myios;

 basic_ifstream ( )
  : _Mybase ( & _Filebuffer )
  {
  }

 explicit basic_ifstream ( const char * _Filename,
  ios_base :: openmode _Mode = ios_base :: in,
  int _Prot = ( int ) ios_base :: _Openprot )
  : _Mybase ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: in, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

 explicit basic_ifstream ( const string & _Str,
  ios_base :: openmode _Mode = ios_base :: in,
  int _Prot = ( int ) ios_base :: _Openprot )
  : _Mybase ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Str . c_str ( ), _Mode | ios_base :: in, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

 explicit basic_ifstream ( const wchar_t * _Filename,
  ios_base :: openmode _Mode = ios_base :: in,
  int _Prot = ( int ) ios_base :: _Openprot )
  : _Mybase ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: in, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

 explicit basic_ifstream ( const wstring & _Str,
  ios_base :: openmode _Mode = ios_base :: in,
  int _Prot = ( int ) ios_base :: _Openprot )
  : _Mybase ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Str . c_str ( ), _Mode | ios_base :: in, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }


 explicit basic_ifstream ( const unsigned short * _Filename,
  ios_base :: openmode _Mode = ios_base :: in,
  int _Prot = ( int ) ios_base :: _Openprot )
  : _Mybase ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: in, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }


 explicit basic_ifstream ( FILE * _File )
  : _Mybase ( & _Filebuffer ),
   _Filebuffer ( _File )
  {
  }

 basic_ifstream ( _Myt && _Right )
  : _Mybase ( & _Filebuffer )
  {
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  }

 _Myt & operator = ( _Myt && _Right )
  {
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  return ( * this );
  }

 void _Assign_rv ( _Myt && _Right )
  {
  if ( this != & _Right )
   {
   _Filebuffer . close ( );
   this -> swap ( _Right );
   }
  }

 void swap ( _Myt & _Right )
  {
  if ( this != & _Right )
   {
   _Mybase :: swap ( _Right );
   _Filebuffer . swap ( _Right . _Filebuffer );
   }
  }

 basic_ifstream ( const _Myt & ) = delete;
 _Myt & operator = ( const _Myt & ) = delete;

 void open ( const wchar_t * _Filename,
  ios_base :: openmode _Mode = ios_base :: in,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: in, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  else
   _Myios :: clear ( );
  }

 void open ( const wstring & _Str,
  ios_base :: openmode _Mode = ios_base :: in,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  open ( _Str . c_str ( ), _Mode, _Prot );
  }


 void open ( const wchar_t * _Filename, ios_base :: open_mode _Mode )
  {
  open ( _Filename, ( ios_base :: openmode ) _Mode );
  }



 void open ( const unsigned short * _Filename,
  ios_base :: openmode _Mode = ios_base :: in,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: in, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  else
   _Myios :: clear ( );
  }


 void open ( const unsigned short * _Filename,
  ios_base :: open_mode _Mode )
  {
  open ( _Filename, ( ios_base :: openmode ) _Mode );
  }



 virtual ~ basic_ifstream ( ) noexcept
  {
  }

 _Myfb * rdbuf ( ) const
  {
  return ( ( _Myfb * ) & _Filebuffer );
  }

 bool is_open ( ) const
  {
  return ( _Filebuffer . is_open ( ) );
  }

 void open ( const char * _Filename,
  ios_base :: openmode _Mode = ios_base :: in,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: in, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  else
   _Myios :: clear ( );
  }

 void open ( const string & _Str,
  ios_base :: openmode _Mode = ios_base :: in,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  open ( _Str . c_str ( ), _Mode, _Prot );
  }


 void open ( const char * _Filename, ios_base :: open_mode _Mode )
  {
  open ( _Filename, ( ios_base :: openmode ) _Mode );
  }


 void close ( )
  {
  if ( _Filebuffer . close ( ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

private :
 _Myfb _Filebuffer;
 };
#line 927 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template < class _Elem,
 class _Traits > inline
 void swap ( basic_ifstream < _Elem, _Traits > & _Left,
  basic_ifstream < _Elem, _Traits > & _Right )
 {
 _Left . swap ( _Right );
 }
#line 936
template < class _Elem,
 class _Traits >
 class basic_ofstream
  : public basic_ostream < _Elem, _Traits >
 {
public :
 typedef basic_ofstream < _Elem, _Traits > _Myt;
 typedef basic_ostream < _Elem, _Traits > _Mybase;
 typedef basic_filebuf < _Elem, _Traits > _Myfb;
 typedef basic_ios < _Elem, _Traits > _Myios;

 basic_ofstream ( )
  : _Mybase ( & _Filebuffer )
  {
  }

 explicit basic_ofstream ( const char * _Filename,
  ios_base :: openmode _Mode = ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  : _Mybase ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: out, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

 explicit basic_ofstream ( const string & _Str,
  ios_base :: openmode _Mode = ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  : _Mybase ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Str . c_str ( ), _Mode | ios_base :: out, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

 explicit basic_ofstream ( const wchar_t * _Filename,
  ios_base :: openmode _Mode = ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  : _Mybase ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: out, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

 explicit basic_ofstream ( const wstring & _Str,
  ios_base :: openmode _Mode = ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  : _Mybase ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Str . c_str ( ), _Mode | ios_base :: out, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }


 explicit basic_ofstream ( const unsigned short * _Filename,
  ios_base :: openmode _Mode = ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  : _Mybase ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: out, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }


 explicit basic_ofstream ( FILE * _File )
  : _Mybase ( & _Filebuffer ),
   _Filebuffer ( _File )
  {
  }

 basic_ofstream ( _Myt && _Right )
  : _Mybase ( & _Filebuffer )
  {
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  }

 _Myt & operator = ( _Myt && _Right )
  {
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  return ( * this );
  }

 void _Assign_rv ( _Myt && _Right )
  {
  if ( this != & _Right )
   {
   _Filebuffer . close ( );
   this -> swap ( _Right );
   }
  }

 void swap ( _Myt & _Right )
  {
  if ( this != & _Right )
   {
   _Mybase :: swap ( _Right );
   _Filebuffer . swap ( _Right . _Filebuffer );
   }
  }

 basic_ofstream ( const _Myt & ) = delete;
 _Myt & operator = ( const _Myt & ) = delete;

 void open ( const wchar_t * _Filename,
  ios_base :: openmode _Mode = ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: out, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  else
   _Myios :: clear ( );
  }

 void open ( const wstring & _Str,
  ios_base :: openmode _Mode = ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  open ( _Str . c_str ( ), _Mode, _Prot );
  }


 void open ( const wchar_t * _Filename, ios_base :: open_mode _Mode )
  {
  open ( _Filename, ( ios_base :: openmode ) _Mode );
  }



 void open ( const unsigned short * _Filename,
  ios_base :: openmode _Mode = ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: out, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  else
   _Myios :: clear ( );
  }


 void open ( const unsigned short * _Filename,
  ios_base :: open_mode _Mode )
  {
  open ( _Filename, ( ios_base :: openmode ) _Mode );
  }



 virtual ~ basic_ofstream ( ) noexcept
  {
  }

 _Myfb * rdbuf ( ) const
  {
  return ( ( _Myfb * ) & _Filebuffer );
  }

 bool is_open ( ) const
  {
  return ( _Filebuffer . is_open ( ) );
  }

 void open ( const char * _Filename,
  ios_base :: openmode _Mode = ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: out, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  else
   _Myios :: clear ( );
  }

 void open ( const string & _Str,
  ios_base :: openmode _Mode = ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  open ( _Str . c_str ( ), _Mode, _Prot );
  }


 void open ( const char * _Filename, ios_base :: open_mode _Mode )
  {
  open ( _Filename, ( ios_base :: openmode ) _Mode );
  }


 void close ( )
  {
  if ( _Filebuffer . close ( ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

private :
 _Myfb _Filebuffer;
 };
#line 1131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template < class _Elem,
 class _Traits > inline
 void swap ( basic_ofstream < _Elem, _Traits > & _Left,
  basic_ofstream < _Elem, _Traits > & _Right )
 {
 _Left . swap ( _Right );
 }
#line 1140
template < class _Elem,
 class _Traits >
 class basic_fstream
  : public basic_iostream < _Elem, _Traits >
 {
public :
 typedef basic_fstream < _Elem, _Traits > _Myt;
 typedef basic_iostream < _Elem, _Traits > _Mybase;
 typedef basic_filebuf < _Elem, _Traits > _Myfb;
 typedef basic_ios < _Elem, _Traits > _Myios;
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef typename _Traits :: int_type int_type;
 typedef typename _Traits :: pos_type pos_type;
 typedef typename _Traits :: off_type off_type;

 basic_fstream ( )
  : _Mybase ( & _Filebuffer )
  {
  }

 explicit basic_fstream ( const char * _Filename,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  : _Mybase ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Filename, _Mode, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

 explicit basic_fstream ( const string & _Str,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  : _Mybase ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Str . c_str ( ), _Mode, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

 explicit basic_fstream ( const wchar_t * _Filename,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  : _Mybase ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Filename, _Mode, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

 explicit basic_fstream ( const wstring & _Str,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  : _Mybase ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Str . c_str ( ), _Mode, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }


 explicit basic_fstream ( const unsigned short * _Filename,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  : _Mybase ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Filename, _Mode, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }


 explicit basic_fstream ( FILE * _File )
  : _Mybase ( & _Filebuffer ),
   _Filebuffer ( _File )
  {
  }

 basic_fstream ( _Myt && _Right )
  : _Mybase ( & _Filebuffer )
  {
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  }

 _Myt & operator = ( _Myt && _Right )
  {
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  return ( * this );
  }

 void _Assign_rv ( _Myt && _Right )
  {
  if ( this != & _Right )
   {
   _Filebuffer . close ( );
   this -> swap ( _Right );
   }
  }

 void swap ( _Myt & _Right )
  {
  if ( this != & _Right )
   {
   _Mybase :: swap ( _Right );
   _Filebuffer . swap ( _Right . _Filebuffer );
   }
  }

 basic_fstream ( const _Myt & ) = delete;
 _Myt & operator = ( const _Myt & ) = delete;

 void open ( const wchar_t * _Filename,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  if ( _Filebuffer . open ( _Filename, _Mode, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  else
   _Myios :: clear ( );
  }

 void open ( const wstring & _Str,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  open ( _Str . c_str ( ), _Mode, _Prot );
  }


 void open ( const wchar_t * _Filename, ios_base :: open_mode _Mode )
  {
  open ( _Filename, ( ios_base :: openmode ) _Mode );
  }



 void open ( const unsigned short * _Filename,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  if ( _Filebuffer . open ( _Filename, _Mode, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  else
   _Myios :: clear ( );
  }


 void open ( const unsigned short * _Filename,
  ios_base :: open_mode _Mode )
  {
  open ( _Filename, ( ios_base :: openmode ) _Mode );
  }



 virtual ~ basic_fstream ( ) noexcept
  {
  }

 _Myfb * rdbuf ( ) const
  {
  return ( ( _Myfb * ) & _Filebuffer );
  }

 bool is_open ( ) const
  {
  return ( _Filebuffer . is_open ( ) );
  }

 void open ( const char * _Filename,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  if ( _Filebuffer . open ( _Filename, _Mode, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  else
   _Myios :: clear ( );
  }

 void open ( const string & _Str,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  open ( _Str . c_str ( ), _Mode, _Prot );
  }


 void open ( const char * _Filename, ios_base :: open_mode _Mode )
  {
  open ( _Filename, ( ios_base :: openmode ) _Mode );
  }


 void close ( )
  {
  if ( _Filebuffer . close ( ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
 }

private :
 _Myfb _Filebuffer;
 };
#line 1340 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template < class _Elem,
 class _Traits > inline
 void swap ( basic_fstream < _Elem, _Traits > & _Left,
  basic_fstream < _Elem, _Traits > & _Right )
 {
 _Left . swap ( _Right );
 }
#line 1347
}
#line 1350
#pragma warning(pop)
#pragma pack ( pop )
#line 108 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
typedef 
#line 66 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
struct { 
#line 67
double *e; 
#line 68
double *f; 
#line 69
unsigned short N; 
#line 71
unsigned short *Ks; 
#line 72
float *Cms; 
#line 73
unsigned short NModels; 
#line 74
unsigned short NComps; 
#line 75
unsigned short *boolModel; 
#line 77
unsigned short Depth; 
#line 78
unsigned short LognDepth; 
#line 79
unsigned short nFathers; 
#line 80
unsigned short nCallForFather; 
#line 81
unsigned short *Fathers; 
#line 83
unsigned short *SonNoVec; 
#line 85
unsigned short *RelStarts; 
#line 86
unsigned short *RelEnds; 
#line 87
unsigned short *RelVec; 
#line 88
unsigned short *SegStartI; 
#line 89
unsigned short *SegEndI; 
#line 90
unsigned short *SegToComp; 
#line 91
unsigned short *MidComps; 
#line 93
unsigned short *FIdxs; 
#line 96 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
unsigned short *CompByLevel32; 
#line 97
unsigned short *CompByFLevel32; 
#line 98
unsigned short nLRel; 
#line 99
unsigned short *LRelStarts; 
#line 100
unsigned short *LRelEnds; 
#line 101
unsigned short nFLRel; 
#line 102
unsigned short *FLRelStarts; 
#line 103
unsigned short *FLRelEnds; 
#line 108
} HMat; 
#line 122
typedef 
#line 111
struct { 
#line 112
unsigned short NStimuli; 
#line 113
unsigned short loc; 
#line 114
unsigned short comp; 
#line 115
unsigned short numofdts; 
#line 116
float area; 
#line 117
unsigned short *dtInds; 
#line 118
float *amps; 
#line 119
float *durs; 
#line 120
float *dels; 
#line 121
float Nt; 
#line 122
} Stim; 
#line 133
typedef 
#line 126
struct { 
#line 127
float *Vs; 
#line 128
float dt; 
#line 129
float TFinal; 
#line 130
float Celsius; 
#line 131
unsigned short NRecSites; 
#line 132
unsigned short *RecSites; 
#line 133
} Sim; 
#line 136
void RunByModelSerial(); 
#line 137
void RunByModelP(); 
#line 139
void solveByNeuron(const HMat & InMat, double * B, double * D); 
#line 140
float maxf(float a, float b); 
#line 141
float MaxAbsDiffVec(float * A, float * B, int n); 
#line 143
void CopyVec(float * A, float * B, int n); 
#line 144
void CopyVecTwoTypes(double * B, float * A, int n); 
#line 145
void FlipVec(float * A, float * B, int n); 
#line 146
void CompareArrays(const float * App, const float * Real, int n, char * Prefix); 
#line 147
double diffclock(clock_t clock1, clock_t clock2); 
#line 152 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
void ReadSerialNeuronData(const char * FN, HMat & TheMat); 
#line 153
void ReadParallelNeuronData(const char * FN, HMat & TheMat, unsigned short * CompDepth, unsigned short * CompFDepth); 
#line 154
void FreeSerialNeuronData(HMat & InMat); 
#line 155
void ReadStimData(const char * FN, Stim & stim, unsigned short Nx); 
#line 156
void CreateStimData(Stim & stim); 
#line 157
void ReadSimData(const char * FN, unsigned short N, Sim & sim); 
#line 158
void ReadStimFromFile(const char * FN, Stim & stim); 
#line 159
void FreeStimData(Stim & stim); 
#line 160
void FreeSimData(Sim & sim); 
#line 162
void SaveArrayToFile(const char * FN, const int N, const float * Arr); 
#line 163
void SaveVHots(const char * FN, float ** VHotsHost, unsigned short Nt, unsigned short NStimuli); 
#line 164
void ReadDebugData(const char * FN, float ** DebugData, unsigned short Nsegs, unsigned short Nt); 
#line 165
void ReadRHSData(const char * FN, float ** DebugData, unsigned short Nsegs, unsigned short Nt); 
#line 166
void ReadDData(const char * FN, float ** DebugData, unsigned short Nsegs, unsigned short Nt); 
#line 167
void SetStatesFromDebug(float ** StatesM, float ** DebugData, unsigned short i, unsigned short N); 
#line 168
void SetRHSFromNeuron(float * rhs, float ** DebugData, unsigned short i, unsigned short N); 
#line 169
void SetDFromNeuron(float * D, float ** DebugData, unsigned short i, unsigned short N); 
#line 170
void ReadVData(const char * FN, float ** DebugData, unsigned short Nsegs, unsigned short Nt); 
#line 171
void SetVFromNeuron(float * vs, float ** DebugData, unsigned short i, unsigned short N); 
#line 172
void debugPrintMYFTYPE(float * A, unsigned short N, FILE * fdebug); 
#line 173
void debugPrintMYSECONDFTYPE(double * A, unsigned short N, FILE * fdebug); 
#line 174
void ReadShortFromCSV(char * line, unsigned short * ans, int n); 
#line 175
void ReadDoubleFromCSV(char * line, double * ans, int n); 
#line 176
void ReadFloatFromCSV(char * line, float * ans, int n); 
#line 177
float *ReadAllParams(const char * FN, unsigned short NParams, unsigned short Nx, unsigned short & ntemp); 
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\direct.h"
__pragma( pack ( push, 8 )) extern "C" {
#line 22
struct _diskfree_t { 
#line 24
unsigned total_clusters; 
#line 25
unsigned avail_clusters; 
#line 26
unsigned sectors_per_cluster; 
#line 27
unsigned bytes_per_sector; 
#line 28
}; 
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\direct.h"
__declspec(dllimport) unsigned __cdecl _getdiskfree(unsigned _Drive, _diskfree_t * _DiskFree); 
#line 38
__declspec(dllimport) int __cdecl _chdrive(int _Drive); 
#line 40
__declspec(dllimport) int __cdecl _getdrive(); 
#line 42
__declspec(dllimport) unsigned long __cdecl _getdrives(); 
#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\direct.h"
__declspec(dllimport) __declspec(allocator) char *__cdecl _getcwd(char * _DstBuf, int _SizeInBytes); 
#line 62
__declspec(dllimport) __declspec(allocator) char *__cdecl _getdcwd(int _Drive, char * _DstBuf, int _SizeInBytes); 
#line 73
__declspec(dllimport) int __cdecl _chdir(const char * _Path); 
#line 75
__declspec(dllimport) int __cdecl _mkdir(const char * _Path); 
#line 77
__declspec(dllimport) int __cdecl _rmdir(const char * _Path); 
#line 91
__declspec(dllimport) char *__cdecl getcwd(char * _DstBuf, int _SizeInBytes); 
#line 99
__declspec(dllimport) int __cdecl chdir(const char * _Path); 
#line 108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\direct.h"
__declspec(dllimport) int __cdecl mkdir(const char * _Path); 
#line 113
__declspec(dllimport) int __cdecl rmdir(const char * _Path); 
#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\direct.h"
}__pragma( pack ( pop )) 
#line 5 "C:/pyNeuroGPU_winnew/NeuroGPU6/kernel.cu"
int main() 
#line 6
{ 
#line 7
int nDevices; 
#line 9
cudaGetDeviceCount(&nDevices); 
#line 10
for (int i = 0; i < nDevices; i++) { 
#line 11
cudaDeviceProp prop; 
#line 12
cudaGetDeviceProperties(&prop, i); 
#line 13
printf("Device Number: %d\n", i); 
#line 14
printf("  Device name: %s\n", prop.name); 
#line 15
printf("  Memory Clock Rate (KHz): %d\n", prop.memoryClockRate); 
#line 17
printf("  Memory Bus Width (bits): %d\n", prop.memoryBusWidth); 
#line 19
printf("  Peak Memory Bandwidth (GB/s): %f\n\n", (((2.0) * (prop.memoryClockRate)) * ((prop.memoryBusWidth) / 8)) / (1000000.0)); 
#line 21
}  
#line 33
RunByModelP(); 
#line 36
return 0; 
#line 37
} 
#line 1 "kernel.cudafe1.stub.c"
#define _NV_ANON_NAMESPACE _GLOBAL__N__14_kernel_cpp1_ii_main
#line 1 "kernel.cudafe1.stub.c"
#include "kernel.cudafe1.stub.c"
#line 1 "kernel.cudafe1.stub.c"
#undef _NV_ANON_NAMESPACE
