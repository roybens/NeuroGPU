#line 1 "C:/pyNeuroGPU_winnew/NeuroGPU6/CudaStuff.cu"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"




























































#line 62 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
#pragma warning(push)
#pragma warning(disable: 4820)
#line 65 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
#line 66 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"












#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"

































































#line 67 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"






#line 74 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"









#line 84 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"













#line 98 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"















#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"













#line 128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"







#line 136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"



#line 140 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"

#line 142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"














#line 157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"





#line 163 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"





#line 169 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"






#line 176 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"







#line 184 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"





#line 190 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"





#line 196 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"





#line 202 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"








#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"





















    
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"






    
    

#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
        
            
        

#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
    #line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"













#pragma once







































































































































#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"



#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"
































#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"

#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"





#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"



#line 200 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"






#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"











#line 219 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"








#line 228 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"
#line 229 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"































































































































































































































































































































































































































































































#pragma region Input Buffer SAL 1 compatibility macros



























































































































































































































































































































































































































































































































































































































































































































































































#pragma endregion Input Buffer SAL 1 compatibility macros

















































































#line 1555 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"






























#line 1586 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"
























#line 1611 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"












#line 1624 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"






































#line 1663 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"















































































































#line 1775 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"






































































































#line 1878 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"








































































































































































#line 2047 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"





































































































#line 2149 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"



















































































































































































































#line 2361 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"
extern "C" {




#line 2367 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"



































































































































































































































#line 2595 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    

    
    

#line 2634 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"









































































































































































































































#line 2868 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"









#line 2878 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"


    
    
#line 2883 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"






#line 2890 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"
#line 2891 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"






#line 2898 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"
#line 2899 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"











#line 2911 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"

































#line 2945 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"






















}
#line 2969 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ConcurrencySal.h"


















#pragma once


extern "C" {
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ConcurrencySal.h"
















































































































































































































































#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ConcurrencySal.h"



#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ConcurrencySal.h"


















































































#line 352 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ConcurrencySal.h"


}
#line 356 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ConcurrencySal.h"

#line 358 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ConcurrencySal.h"
#line 2971 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"


#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"










#pragma once



#pragma pack(push, 8)


extern "C" {
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"



#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"


    
    
        typedef unsigned __int64  uintptr_t;
    

#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"


    
    


        typedef char* va_list;
    #line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"


    


#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"





#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"



#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
    
    
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"











#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"







#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"











#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"











#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"

    void __cdecl __va_start(va_list* , ...);

    
    



    

#line 116 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"


} 
#line 120 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"


    extern "C++"
    {
        template <typename _Ty>
        struct __vcrt_va_list_is_reference
        {
            enum : bool { __the_value = false };
        };

        template <typename _Ty>
        struct __vcrt_va_list_is_reference<_Ty&>
        {
            enum : bool { __the_value = true };
        };

        template <typename _Ty>
        struct __vcrt_va_list_is_reference<_Ty&&>
        {
            enum : bool { __the_value = true };
        };

        template <typename _Ty>
        void __vcrt_va_start_verify_argument_type() throw()
        {
            static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
        }
    } 

    





#line 156 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"

#pragma pack(pop)
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"






    



    





















#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"

__pragma(pack(push, 8)) extern "C" {




    
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"


















    

#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"

#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"

#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
        
    

#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"


    





#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
        
    #line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"







#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
    
#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"





#line 146 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
    
    
#line 149 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"




    
#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"








    


#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"



#line 171 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
    
#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"




    
#line 179 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"


    
        
        
    

#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"






    typedef unsigned __int64 size_t;
    typedef __int64          ptrdiff_t;
    typedef __int64          intptr_t;




#line 202 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"


    typedef bool  __vcrt_bool;






#line 212 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"



    
#line 217 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"


    
#line 221 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"


    
#line 225 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"








    
        
    

#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"


    


#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"


    extern "C++"
    {
        template <typename _CountofType, size_t _SizeOfArray>
        char (*__countof_helper(__unaligned _CountofType (&_Array)[_SizeOfArray]))[_SizeOfArray];

        
    }


#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"






#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"


    
        
    





#line 275 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
#line 276 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"



#line 280 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"


    
        
    


#line 288 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
#line 289 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"









    void __cdecl __security_init_cookie(void);

    



        void __cdecl __security_check_cookie(  uintptr_t _StackCookie);
        __declspec(noreturn) void __cdecl __report_gsfailure(  uintptr_t _StackCookie);
    #line 307 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
#line 308 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"

extern uintptr_t __security_cookie;


    
    
    
#line 316 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"

} __pragma(pack(pop))

#line 320 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"







#pragma once

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"































































































































































































































































































































#line 11 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"

__pragma(pack(push, 8)) extern "C" {









    

#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
        
    

#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"




    
#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"


    

#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
        
    

#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"



#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
    
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"


    


#line 58 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"





#line 64 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
    
#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"





    
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"













    


        
    #line 91 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 92 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"



#line 96 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
    
#line 98 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"



#line 102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
    
#line 104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"



#line 108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
    
#line 110 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"









extern "C++"
{
    template<bool _Enable, typename _Ty>
    struct _CrtEnableIf;

    template<typename _Ty>
    struct _CrtEnableIf<true, _Ty>
    {
        typedef _Ty _Type;
    };
}
#line 131 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"


    typedef bool  __crt_bool;


#line 137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"










    
#line 149 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"











#line 161 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"


    
#line 165 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"









    











        
    #line 188 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 189 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"


    
#line 193 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"


    
        
    

#line 200 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 201 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"

























__declspec(dllimport) void __cdecl _invalid_parameter_noinfo(void);
__declspec(dllimport) __declspec(noreturn) void __cdecl _invalid_parameter_noinfo_noreturn(void);

__declspec(noreturn)
__declspec(dllimport) void __cdecl _invoke_watson(
      wchar_t const*,
      wchar_t const*,
      wchar_t const*,
            unsigned int,
            uintptr_t);


    



        
        
        
        
        
        
        
        
        
        
        
        

    #line 256 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 257 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"










#line 268 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"


    
        
    



#line 277 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 278 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"









    






        
    #line 296 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 297 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"


    


        
    #line 304 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 305 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"



#line 309 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"













#line 323 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"




















    
#line 345 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"



#line 349 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"


    

#line 354 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 355 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"


    


        


            
        #line 365 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
    #line 366 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 367 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"



#line 371 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"





#line 377 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"


    


        



    #line 387 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 388 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"


    
        
    



#line 397 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"

    
        
        
        
    



#line 407 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"

    
        
              
        

#line 414 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
    



#line 419 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"

    
        
    



#line 427 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"

    
        
    



#line 435 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 436 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"


    
#line 440 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"








typedef int                           errno_t;
typedef unsigned short                wint_t;
typedef unsigned short                wctype_t;
typedef long                          __time32_t;
typedef __int64                       __time64_t;

typedef struct __crt_locale_data_public
{
      unsigned short const* _locale_pctype;
      int _locale_mb_cur_max;
               unsigned int _locale_lc_codepage;
} __crt_locale_data_public;

typedef struct __crt_locale_pointers
{
    struct __crt_locale_data*    locinfo;
    struct __crt_multibyte_data* mbcinfo;
} __crt_locale_pointers;

typedef __crt_locale_pointers* _locale_t; 

typedef struct _Mbstatet
{ 
    unsigned long _Wchar;
    unsigned short _Byte, _State;
} _Mbstatet;

typedef _Mbstatet mbstate_t;



#line 480 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"



#line 484 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"


    


        typedef __time64_t time_t;
    #line 491 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 492 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"



    
#line 497 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"


    typedef size_t rsize_t;
#line 501 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"










    

        










        










        










        










        










        










        










        










        










        















        















        
















    














#line 677 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 678 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"












































































    





































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1753 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"

        
        
        
        

        


        


        


        


        


        


        


        


        



        



        


        


        


        


        


        


        


        


        


        


        



        



        



        


        



        




        

        




        

        




        

        




        

        




        

        




        

        




        

        




        

    #line 1897 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 1898 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"



} __pragma(pack(pop))

#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"









    

#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"

#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
        
    #line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"


    

#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
        
            
        

#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
    #line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"


    

#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
        
            
        

#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
    #line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"


    

#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"

#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
        
            
        

#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
    #line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
#line 204 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"


#line 207 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"



#line 211 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"

#line 213 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"






#line 220 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdarg"

#pragma once


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xkeycheck.h"

#pragma once






 
















































































#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xkeycheck.h"

  


















































































#line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xkeycheck.h"
 #line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xkeycheck.h"

#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xkeycheck.h"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xkeycheck.h"
#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xkeycheck.h"





#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"








#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"































































































































































































































































































































#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
























































#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

#pragma pack(push,8)





 
  


   
  #line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

 
  
  
 


#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"














 
  
   

#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
    
   #line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
  





#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"


 
  

#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
   
  #line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"


 
  

#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
   
  #line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"


 
  

#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
   
  #line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"


 
  

#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
   
  #line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"


 
  

#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
   
  #line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"


 




























#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

		

	







		
		


			
		#line 156 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
	#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

		




 
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"










































	
	






		


			
		#line 222 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
	#line 223 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

	
	




		

#line 233 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
			
		#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
	#line 236 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

	
	

#line 241 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
		
	#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"





	
		#pragma detect_mismatch("_MSC_VER", "1900")
	#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

	
		#pragma detect_mismatch("_ITERATOR_DEBUG_LEVEL", "0")
	#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

	
		

#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

#line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
			#pragma detect_mismatch("RuntimeLibrary", "MD_DynamicRelease")
		

#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
	#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"








	
		
	

#line 285 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"




#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"




#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"











#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

#line 313 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"


 
#line 317 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

 
 

 









 









 









 
































#line 385 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"





#line 391 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 
 
#line 394 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

 
 

 #line 399 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"











#line 411 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\use_ansi.h"













#pragma once








#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\use_ansi.h"














    
    
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\use_ansi.h"


    






#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\use_ansi.h"



    
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\use_ansi.h"

#pragma comment(lib, "msvcprt" "" "")






#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\use_ansi.h"

#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\use_ansi.h"

#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\use_ansi.h"
#line 413 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"



#line 417 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"



#line 421 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"


 















 
  

#line 443 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
   
  #line 445 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 446 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

 
  

#line 451 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
   
  #line 453 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 454 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

 
  

#line 459 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
   
  #line 461 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 462 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"


 
  





#line 472 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

   


#line 477 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
    
   #line 479 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

  #line 481 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 482 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

 
  
 #line 486 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

 
  

#line 491 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
   


     
   #line 496 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
  #line 497 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 498 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

 


























  
   
  #line 529 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 530 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

		

 
  
  
  




  
  
  

  







   
   
   
  #line 557 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

  
  
  
  

 












#line 577 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

		





		







typedef long long _Longlong;
typedef unsigned long long _ULonglong;

		






		
		






 
namespace std {
enum _Uninitialized
	{	
	_Noinit
	};

		

#pragma warning(push)
#pragma warning(disable:4412)
class __declspec(dllimport) _Lockit
	{	
public:
 

  
















#line 644 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
	__thiscall _Lockit();	
	explicit __thiscall _Lockit(int);	
	__thiscall ~_Lockit() noexcept;	
  #line 648 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

	static  void __cdecl _Lockit_ctor(int);
	static  void __cdecl _Lockit_dtor(int);

private:
	static  void __cdecl _Lockit_ctor(_Lockit *);
	static  void __cdecl _Lockit_ctor(_Lockit *, int);
	static  void __cdecl _Lockit_dtor(_Lockit *);

public:
	 _Lockit(const _Lockit&) = delete;
	_Lockit&  operator=(const _Lockit&) = delete;

private:
	int _Locktype;

  











#line 677 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
	};

 



































































  



  


  



  


  
 #line 763 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

class __declspec(dllimport) _Init_locks
	{	
public:
 
  










#line 780 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
	__thiscall _Init_locks();
	__thiscall ~_Init_locks() noexcept;
  #line 783 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

private:
	static  void __cdecl _Init_locks_ctor(_Init_locks *);
	static  void __cdecl _Init_locks_dtor(_Init_locks *);

 







#line 797 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
	};

#pragma warning(pop)
}
 #line 802 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"





		

__declspec(dllimport) void __cdecl _Atexit(void (__cdecl *)(void));

typedef unsigned long _Uint32t;




 
 #pragma pack(pop)
#line 819 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#line 820 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"





#line 6 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdarg"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdarg.h"







#pragma once


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"































































































































































































































































































































#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdarg.h"

__pragma(pack(push, 8)) extern "C" {










} __pragma(pack(pop))
#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdarg"

 
namespace std {
using ::va_list;
}
 #line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdarg"
#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdarg"





#line 221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"
#line 222 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"





























#line 252 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"
#line 253 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"

#line 255 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"



#line 259 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"

#line 261 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"
#line 79 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"







#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"


























































































#line 92 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"










#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"








































#line 144 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"








#line 155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"



#line 159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"








#line 168 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"




#line 173 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"










#line 185 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"













        





#line 205 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"








#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
























#line 239 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"


#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 54 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"







enum __declspec(__device_builtin__) cudaRoundMode
{
    cudaRoundNearest,
    cudaRoundZero,
    cudaRoundPosInf,
    cudaRoundMinInf
};

#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"




















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 54 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

















#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h"







#pragma once


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"































































































































































































































































































































#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h"

__pragma(pack(push, 8)) extern "C" {









    
    



#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h"









































#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h"


    
        
    

#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h"
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h"


    
        
    #line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h"
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h"



} __pragma(pack(pop))
#line 72 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"







#pragma once




__pragma(pack(push, 8)) extern "C" {




    namespace std
    {
        typedef decltype(__nullptr) nullptr_t;
    }

    using ::std::nullptr_t;
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"




__declspec(dllimport) int* __cdecl _errno(void);


__declspec(dllimport) errno_t __cdecl _set_errno(  int _Value);
__declspec(dllimport) errno_t __cdecl _get_errno(  int* _Value);



    
        
    

#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"


#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"

__declspec(dllimport) extern unsigned long  __cdecl __threadid(void);

__declspec(dllimport) extern uintptr_t __cdecl __threadhandle(void);



} __pragma(pack(pop))
#line 73 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 74 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
















 






















































#line 146 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"










enum __declspec(__device_builtin__) cudaError
{
    




    cudaSuccess                           =      0,
  
    



    cudaErrorMissingConfiguration         =      1,
  
    



    cudaErrorMemoryAllocation             =      2,
  
    



    cudaErrorInitializationError          =      3,
  
    







    cudaErrorLaunchFailure                =      4,
  
    






    cudaErrorPriorLaunchFailure           =      5,
  
    








    cudaErrorLaunchTimeout                =      6,
  
    






    cudaErrorLaunchOutOfResources         =      7,
  
    



    cudaErrorInvalidDeviceFunction        =      8,
  
    






    cudaErrorInvalidConfiguration         =      9,
  
    



    cudaErrorInvalidDevice                =     10,
  
    



    cudaErrorInvalidValue                 =     11,
  
    



    cudaErrorInvalidPitchValue            =     12,
  
    



    cudaErrorInvalidSymbol                =     13,
  
    


    cudaErrorMapBufferObjectFailed        =     14,
  
    


    cudaErrorUnmapBufferObjectFailed      =     15,
  
    



    cudaErrorInvalidHostPointer           =     16,
  
    



    cudaErrorInvalidDevicePointer         =     17,
  
    



    cudaErrorInvalidTexture               =     18,
  
    



    cudaErrorInvalidTextureBinding        =     19,
  
    




    cudaErrorInvalidChannelDescriptor     =     20,
  
    



    cudaErrorInvalidMemcpyDirection       =     21,
  
    







    cudaErrorAddressOfConstant            =     22,
  
    






    cudaErrorTextureFetchFailed           =     23,
  
    






    cudaErrorTextureNotBound              =     24,
  
    






    cudaErrorSynchronizationError         =     25,
  
    



    cudaErrorInvalidFilterSetting         =     26,
  
    



    cudaErrorInvalidNormSetting           =     27,
  
    





    cudaErrorMixedDeviceExecution         =     28,
  
    




    cudaErrorCudartUnloading              =     29,
  
    


    cudaErrorUnknown                      =     30,

    





    cudaErrorNotYetImplemented            =     31,
  
    






    cudaErrorMemoryValueTooLarge          =     32,
  
    




    cudaErrorInvalidResourceHandle        =     33,
  
    





    cudaErrorNotReady                     =     34,
  
    




    cudaErrorInsufficientDriver           =     35,
  
    










    cudaErrorSetOnActiveProcess           =     36,
  
    



    cudaErrorInvalidSurface               =     37,
  
    



    cudaErrorNoDevice                     =     38,
  
    



    cudaErrorECCUncorrectable             =     39,
  
    


    cudaErrorSharedObjectSymbolNotFound   =     40,
  
    


    cudaErrorSharedObjectInitFailed       =     41,
  
    



    cudaErrorUnsupportedLimit             =     42,
  
    



    cudaErrorDuplicateVariableName        =     43,
  
    



    cudaErrorDuplicateTextureName         =     44,
  
    



    cudaErrorDuplicateSurfaceName         =     45,
  
    







    cudaErrorDevicesUnavailable           =     46,
  
    


    cudaErrorInvalidKernelImage           =     47,
  
    





    cudaErrorNoKernelImageForDevice       =     48,
  
    










    cudaErrorIncompatibleDriverContext    =     49,
      
    




    cudaErrorPeerAccessAlreadyEnabled     =     50,
    
    




    cudaErrorPeerAccessNotEnabled         =     51,
    
    



    cudaErrorDeviceAlreadyInUse           =     54,

    




    cudaErrorProfilerDisabled             =     55,

    





    cudaErrorProfilerNotInitialized       =     56,

    




    cudaErrorProfilerAlreadyStarted       =     57,

    




     cudaErrorProfilerAlreadyStopped       =    58,

    





    cudaErrorAssert                        =    59,
  
    




    cudaErrorTooManyPeers                 =     60,
  
    



    cudaErrorHostMemoryAlreadyRegistered  =     61,
        
    



    cudaErrorHostMemoryNotRegistered      =     62,

    


    cudaErrorOperatingSystem              =     63,

    



    cudaErrorPeerAccessUnsupported        =     64,

    




    cudaErrorLaunchMaxDepthExceeded       =     65,

    





    cudaErrorLaunchFileScopedTex          =     66,

    





    cudaErrorLaunchFileScopedSurf         =     67,

    












    cudaErrorSyncDepthExceeded            =     68,

    









    cudaErrorLaunchPendingCountExceeded   =     69,
    
    


    cudaErrorNotPermitted                 =     70,

    



    cudaErrorNotSupported                 =     71,

    






    cudaErrorHardwareStackError           =     72,

    





    cudaErrorIllegalInstruction           =     73,

    






    cudaErrorMisalignedAddress            =     74,

    








    cudaErrorInvalidAddressSpace          =     75,

    





    cudaErrorInvalidPc                    =     76,

    





    cudaErrorIllegalAddress               =     77,

    



    cudaErrorInvalidPtx                   =     78,

    


    cudaErrorInvalidGraphicsContext       =     79,

    



    cudaErrorNvlinkUncorrectable          =     80,

    


    cudaErrorStartupFailure               =   0x7f,

    





    cudaErrorApiFailureBase               =  10000
};




enum __declspec(__device_builtin__) cudaChannelFormatKind
{
    cudaChannelFormatKindSigned           =   0,      
    cudaChannelFormatKindUnsigned         =   1,      
    cudaChannelFormatKindFloat            =   2,      
    cudaChannelFormatKindNone             =   3       
};




struct __declspec(__device_builtin__) cudaChannelFormatDesc
{
    int                        x; 
    int                        y; 
    int                        z; 
    int                        w; 
    enum cudaChannelFormatKind f; 
};




typedef struct cudaArray *cudaArray_t;




typedef const struct cudaArray *cudaArray_const_t;

struct cudaArray;




typedef struct cudaMipmappedArray *cudaMipmappedArray_t;




typedef const struct cudaMipmappedArray *cudaMipmappedArray_const_t;

struct cudaMipmappedArray;




enum __declspec(__device_builtin__) cudaMemoryType
{
    cudaMemoryTypeHost   = 1, 
    cudaMemoryTypeDevice = 2  
};




enum __declspec(__device_builtin__) cudaMemcpyKind
{
    cudaMemcpyHostToHost          =   0,      
    cudaMemcpyHostToDevice        =   1,      
    cudaMemcpyDeviceToHost        =   2,      
    cudaMemcpyDeviceToDevice      =   3,      
    cudaMemcpyDefault             =   4       
};






struct __declspec(__device_builtin__) cudaPitchedPtr
{
    void   *ptr;      
    size_t  pitch;    
    size_t  xsize;    
    size_t  ysize;    
};






struct __declspec(__device_builtin__) cudaExtent
{
    size_t width;     
    size_t height;    
    size_t depth;     
};






struct __declspec(__device_builtin__) cudaPos
{
    size_t x;     
    size_t y;     
    size_t z;     
};




struct __declspec(__device_builtin__) cudaMemcpy3DParms
{
    cudaArray_t            srcArray;  
    struct cudaPos         srcPos;    
    struct cudaPitchedPtr  srcPtr;    
  
    cudaArray_t            dstArray;  
    struct cudaPos         dstPos;    
    struct cudaPitchedPtr  dstPtr;    
  
    struct cudaExtent      extent;    
    enum cudaMemcpyKind    kind;      
};




struct __declspec(__device_builtin__) cudaMemcpy3DPeerParms
{
    cudaArray_t            srcArray;  
    struct cudaPos         srcPos;    
    struct cudaPitchedPtr  srcPtr;    
    int                    srcDevice; 
  
    cudaArray_t            dstArray;  
    struct cudaPos         dstPos;    
    struct cudaPitchedPtr  dstPtr;    
    int                    dstDevice; 
  
    struct cudaExtent      extent;    
};




struct cudaGraphicsResource;




enum __declspec(__device_builtin__) cudaGraphicsRegisterFlags
{
    cudaGraphicsRegisterFlagsNone             = 0,  
    cudaGraphicsRegisterFlagsReadOnly         = 1,   
    cudaGraphicsRegisterFlagsWriteDiscard     = 2,  
    cudaGraphicsRegisterFlagsSurfaceLoadStore = 4,  
    cudaGraphicsRegisterFlagsTextureGather    = 8   
};




enum __declspec(__device_builtin__) cudaGraphicsMapFlags
{
    cudaGraphicsMapFlagsNone         = 0,  
    cudaGraphicsMapFlagsReadOnly     = 1,  
    cudaGraphicsMapFlagsWriteDiscard = 2   
};




enum __declspec(__device_builtin__) cudaGraphicsCubeFace 
{
    cudaGraphicsCubeFacePositiveX = 0x00, 
    cudaGraphicsCubeFaceNegativeX = 0x01, 
    cudaGraphicsCubeFacePositiveY = 0x02, 
    cudaGraphicsCubeFaceNegativeY = 0x03, 
    cudaGraphicsCubeFacePositiveZ = 0x04, 
    cudaGraphicsCubeFaceNegativeZ = 0x05  
};




enum __declspec(__device_builtin__) cudaResourceType
{
    cudaResourceTypeArray          = 0x00, 
    cudaResourceTypeMipmappedArray = 0x01, 
    cudaResourceTypeLinear         = 0x02, 
    cudaResourceTypePitch2D        = 0x03  
};




enum __declspec(__device_builtin__) cudaResourceViewFormat
{
    cudaResViewFormatNone                      = 0x00, 
    cudaResViewFormatUnsignedChar1             = 0x01, 
    cudaResViewFormatUnsignedChar2             = 0x02, 
    cudaResViewFormatUnsignedChar4             = 0x03, 
    cudaResViewFormatSignedChar1               = 0x04, 
    cudaResViewFormatSignedChar2               = 0x05, 
    cudaResViewFormatSignedChar4               = 0x06, 
    cudaResViewFormatUnsignedShort1            = 0x07, 
    cudaResViewFormatUnsignedShort2            = 0x08, 
    cudaResViewFormatUnsignedShort4            = 0x09, 
    cudaResViewFormatSignedShort1              = 0x0a, 
    cudaResViewFormatSignedShort2              = 0x0b, 
    cudaResViewFormatSignedShort4              = 0x0c, 
    cudaResViewFormatUnsignedInt1              = 0x0d, 
    cudaResViewFormatUnsignedInt2              = 0x0e, 
    cudaResViewFormatUnsignedInt4              = 0x0f, 
    cudaResViewFormatSignedInt1                = 0x10, 
    cudaResViewFormatSignedInt2                = 0x11, 
    cudaResViewFormatSignedInt4                = 0x12, 
    cudaResViewFormatHalf1                     = 0x13, 
    cudaResViewFormatHalf2                     = 0x14, 
    cudaResViewFormatHalf4                     = 0x15, 
    cudaResViewFormatFloat1                    = 0x16, 
    cudaResViewFormatFloat2                    = 0x17, 
    cudaResViewFormatFloat4                    = 0x18, 
    cudaResViewFormatUnsignedBlockCompressed1  = 0x19, 
    cudaResViewFormatUnsignedBlockCompressed2  = 0x1a, 
    cudaResViewFormatUnsignedBlockCompressed3  = 0x1b, 
    cudaResViewFormatUnsignedBlockCompressed4  = 0x1c, 
    cudaResViewFormatSignedBlockCompressed4    = 0x1d, 
    cudaResViewFormatUnsignedBlockCompressed5  = 0x1e, 
    cudaResViewFormatSignedBlockCompressed5    = 0x1f, 
    cudaResViewFormatUnsignedBlockCompressed6H = 0x20, 
    cudaResViewFormatSignedBlockCompressed6H   = 0x21, 
    cudaResViewFormatUnsignedBlockCompressed7  = 0x22  
};




struct __declspec(__device_builtin__) cudaResourceDesc {
	enum cudaResourceType resType;             
	
	union {
		struct {
			cudaArray_t array;                 
		} array;
        struct {
            cudaMipmappedArray_t mipmap;       
        } mipmap;
		struct {
			void *devPtr;                      
			struct cudaChannelFormatDesc desc; 
			size_t sizeInBytes;                
		} linear;
		struct {
			void *devPtr;                      
			struct cudaChannelFormatDesc desc; 
			size_t width;                      
			size_t height;                     
			size_t pitchInBytes;               
		} pitch2D;
	} res;
};




struct __declspec(__device_builtin__) cudaResourceViewDesc
{
    enum cudaResourceViewFormat format;           
    size_t                      width;            
    size_t                      height;           
    size_t                      depth;            
    unsigned int                firstMipmapLevel; 
    unsigned int                lastMipmapLevel;  
    unsigned int                firstLayer;       
    unsigned int                lastLayer;        
};




struct __declspec(__device_builtin__) cudaPointerAttributes
{
    



    enum cudaMemoryType memoryType;

    








    int device;

    



    void *devicePointer;

    



    void *hostPointer;

    


    int isManaged;
};




struct __declspec(__device_builtin__) cudaFuncAttributes
{
   




   size_t sharedSizeBytes;

   



   size_t constSizeBytes;

   


   size_t localSizeBytes;

   




   int maxThreadsPerBlock;

   


   int numRegs;

   




   int ptxVersion;

   




   int binaryVersion;

   



   int cacheModeCA;
};




enum __declspec(__device_builtin__) cudaFuncCache
{
    cudaFuncCachePreferNone   = 0,    
    cudaFuncCachePreferShared = 1,    
    cudaFuncCachePreferL1     = 2,    
    cudaFuncCachePreferEqual  = 3     
};





enum __declspec(__device_builtin__) cudaSharedMemConfig
{
    cudaSharedMemBankSizeDefault   = 0,
    cudaSharedMemBankSizeFourByte  = 1,
    cudaSharedMemBankSizeEightByte = 2
};




enum __declspec(__device_builtin__) cudaComputeMode
{
    cudaComputeModeDefault          = 0,  
    cudaComputeModeExclusive        = 1,  
    cudaComputeModeProhibited       = 2,  
    cudaComputeModeExclusiveProcess = 3   
};




enum __declspec(__device_builtin__) cudaLimit
{
    cudaLimitStackSize                    = 0x00, 
    cudaLimitPrintfFifoSize               = 0x01, 
    cudaLimitMallocHeapSize               = 0x02, 
    cudaLimitDevRuntimeSyncDepth          = 0x03, 
    cudaLimitDevRuntimePendingLaunchCount = 0x04  
};




enum __declspec(__device_builtin__) cudaMemoryAdvise
{
    cudaMemAdviseSetReadMostly          = 1, 
    cudaMemAdviseUnsetReadMostly        = 2, 
    cudaMemAdviseSetPreferredLocation   = 3, 
    cudaMemAdviseUnsetPreferredLocation = 4, 
    cudaMemAdviseSetAccessedBy          = 5, 
    cudaMemAdviseUnsetAccessedBy        = 6  
};




enum __declspec(__device_builtin__) cudaMemRangeAttribute
{
    cudaMemRangeAttributeReadMostly           = 1, 
    cudaMemRangeAttributePreferredLocation    = 2, 
    cudaMemRangeAttributeAccessedBy           = 3, 
    cudaMemRangeAttributeLastPrefetchLocation = 4  
};




enum __declspec(__device_builtin__) cudaOutputMode
{
    cudaKeyValuePair    = 0x00, 
    cudaCSV             = 0x01  
};




enum __declspec(__device_builtin__) cudaDeviceAttr
{
    cudaDevAttrMaxThreadsPerBlock             = 1,  
    cudaDevAttrMaxBlockDimX                   = 2,  
    cudaDevAttrMaxBlockDimY                   = 3,  
    cudaDevAttrMaxBlockDimZ                   = 4,  
    cudaDevAttrMaxGridDimX                    = 5,  
    cudaDevAttrMaxGridDimY                    = 6,  
    cudaDevAttrMaxGridDimZ                    = 7,  
    cudaDevAttrMaxSharedMemoryPerBlock        = 8,  
    cudaDevAttrTotalConstantMemory            = 9,  
    cudaDevAttrWarpSize                       = 10, 
    cudaDevAttrMaxPitch                       = 11, 
    cudaDevAttrMaxRegistersPerBlock           = 12, 
    cudaDevAttrClockRate                      = 13, 
    cudaDevAttrTextureAlignment               = 14, 
    cudaDevAttrGpuOverlap                     = 15, 
    cudaDevAttrMultiProcessorCount            = 16, 
    cudaDevAttrKernelExecTimeout              = 17, 
    cudaDevAttrIntegrated                     = 18, 
    cudaDevAttrCanMapHostMemory               = 19, 
    cudaDevAttrComputeMode                    = 20, 
    cudaDevAttrMaxTexture1DWidth              = 21, 
    cudaDevAttrMaxTexture2DWidth              = 22, 
    cudaDevAttrMaxTexture2DHeight             = 23, 
    cudaDevAttrMaxTexture3DWidth              = 24, 
    cudaDevAttrMaxTexture3DHeight             = 25, 
    cudaDevAttrMaxTexture3DDepth              = 26, 
    cudaDevAttrMaxTexture2DLayeredWidth       = 27, 
    cudaDevAttrMaxTexture2DLayeredHeight      = 28, 
    cudaDevAttrMaxTexture2DLayeredLayers      = 29, 
    cudaDevAttrSurfaceAlignment               = 30, 
    cudaDevAttrConcurrentKernels              = 31, 
    cudaDevAttrEccEnabled                     = 32, 
    cudaDevAttrPciBusId                       = 33, 
    cudaDevAttrPciDeviceId                    = 34, 
    cudaDevAttrTccDriver                      = 35, 
    cudaDevAttrMemoryClockRate                = 36, 
    cudaDevAttrGlobalMemoryBusWidth           = 37, 
    cudaDevAttrL2CacheSize                    = 38, 
    cudaDevAttrMaxThreadsPerMultiProcessor    = 39, 
    cudaDevAttrAsyncEngineCount               = 40, 
    cudaDevAttrUnifiedAddressing              = 41,     
    cudaDevAttrMaxTexture1DLayeredWidth       = 42, 
    cudaDevAttrMaxTexture1DLayeredLayers      = 43, 
    cudaDevAttrMaxTexture2DGatherWidth        = 45, 
    cudaDevAttrMaxTexture2DGatherHeight       = 46, 
    cudaDevAttrMaxTexture3DWidthAlt           = 47, 
    cudaDevAttrMaxTexture3DHeightAlt          = 48, 
    cudaDevAttrMaxTexture3DDepthAlt           = 49, 
    cudaDevAttrPciDomainId                    = 50, 
    cudaDevAttrTexturePitchAlignment          = 51, 
    cudaDevAttrMaxTextureCubemapWidth         = 52, 
    cudaDevAttrMaxTextureCubemapLayeredWidth  = 53, 
    cudaDevAttrMaxTextureCubemapLayeredLayers = 54, 
    cudaDevAttrMaxSurface1DWidth              = 55, 
    cudaDevAttrMaxSurface2DWidth              = 56, 
    cudaDevAttrMaxSurface2DHeight             = 57, 
    cudaDevAttrMaxSurface3DWidth              = 58, 
    cudaDevAttrMaxSurface3DHeight             = 59, 
    cudaDevAttrMaxSurface3DDepth              = 60, 
    cudaDevAttrMaxSurface1DLayeredWidth       = 61, 
    cudaDevAttrMaxSurface1DLayeredLayers      = 62, 
    cudaDevAttrMaxSurface2DLayeredWidth       = 63, 
    cudaDevAttrMaxSurface2DLayeredHeight      = 64, 
    cudaDevAttrMaxSurface2DLayeredLayers      = 65, 
    cudaDevAttrMaxSurfaceCubemapWidth         = 66, 
    cudaDevAttrMaxSurfaceCubemapLayeredWidth  = 67, 
    cudaDevAttrMaxSurfaceCubemapLayeredLayers = 68, 
    cudaDevAttrMaxTexture1DLinearWidth        = 69, 
    cudaDevAttrMaxTexture2DLinearWidth        = 70, 
    cudaDevAttrMaxTexture2DLinearHeight       = 71, 
    cudaDevAttrMaxTexture2DLinearPitch        = 72, 
    cudaDevAttrMaxTexture2DMipmappedWidth     = 73, 
    cudaDevAttrMaxTexture2DMipmappedHeight    = 74, 
    cudaDevAttrComputeCapabilityMajor         = 75,  
    cudaDevAttrComputeCapabilityMinor         = 76, 
    cudaDevAttrMaxTexture1DMipmappedWidth     = 77, 
    cudaDevAttrStreamPrioritiesSupported      = 78, 
    cudaDevAttrGlobalL1CacheSupported         = 79, 
    cudaDevAttrLocalL1CacheSupported          = 80, 
    cudaDevAttrMaxSharedMemoryPerMultiprocessor = 81, 
    cudaDevAttrMaxRegistersPerMultiprocessor  = 82, 
    cudaDevAttrManagedMemory                  = 83, 
    cudaDevAttrIsMultiGpuBoard                = 84, 
    cudaDevAttrMultiGpuBoardGroupID           = 85, 
    cudaDevAttrHostNativeAtomicSupported      = 86, 
    cudaDevAttrSingleToDoublePrecisionPerfRatio = 87, 
    cudaDevAttrPageableMemoryAccess           = 88, 
    cudaDevAttrConcurrentManagedAccess        = 89, 
    cudaDevAttrComputePreemptionSupported     = 90, 
    cudaDevAttrCanUseHostPointerForRegisteredMem = 91 
};





enum __declspec(__device_builtin__) cudaDeviceP2PAttr {
    cudaDevP2PAttrPerformanceRank              = 1, 
    cudaDevP2PAttrAccessSupported              = 2, 
    cudaDevP2PAttrNativeAtomicSupported        = 3  
};



struct __declspec(__device_builtin__) cudaDeviceProp
{
    char   name[256];                  
    size_t totalGlobalMem;             
    size_t sharedMemPerBlock;          
    int    regsPerBlock;               
    int    warpSize;                   
    size_t memPitch;                   
    int    maxThreadsPerBlock;         
    int    maxThreadsDim[3];           
    int    maxGridSize[3];             
    int    clockRate;                  
    size_t totalConstMem;              
    int    major;                      
    int    minor;                      
    size_t textureAlignment;           
    size_t texturePitchAlignment;      
    int    deviceOverlap;              
    int    multiProcessorCount;        
    int    kernelExecTimeoutEnabled;   
    int    integrated;                 
    int    canMapHostMemory;           
    int    computeMode;                
    int    maxTexture1D;               
    int    maxTexture1DMipmap;         
    int    maxTexture1DLinear;         
    int    maxTexture2D[2];            
    int    maxTexture2DMipmap[2];      
    int    maxTexture2DLinear[3];      
    int    maxTexture2DGather[2];      
    int    maxTexture3D[3];            
    int    maxTexture3DAlt[3];         
    int    maxTextureCubemap;          
    int    maxTexture1DLayered[2];     
    int    maxTexture2DLayered[3];     
    int    maxTextureCubemapLayered[2];
    int    maxSurface1D;               
    int    maxSurface2D[2];            
    int    maxSurface3D[3];            
    int    maxSurface1DLayered[2];     
    int    maxSurface2DLayered[3];     
    int    maxSurfaceCubemap;          
    int    maxSurfaceCubemapLayered[2];
    size_t surfaceAlignment;           
    int    concurrentKernels;          
    int    ECCEnabled;                 
    int    pciBusID;                   
    int    pciDeviceID;                
    int    pciDomainID;                
    int    tccDriver;                  
    int    asyncEngineCount;           
    int    unifiedAddressing;          
    int    memoryClockRate;            
    int    memoryBusWidth;             
    int    l2CacheSize;                
    int    maxThreadsPerMultiProcessor;
    int    streamPrioritiesSupported;  
    int    globalL1CacheSupported;     
    int    localL1CacheSupported;      
    size_t sharedMemPerMultiprocessor; 
    int    regsPerMultiprocessor;      
    int    managedMemory;              
    int    isMultiGpuBoard;            
    int    multiGpuBoardGroupID;       
    int    hostNativeAtomicSupported;  
    int    singleToDoublePrecisionPerfRatio; 
    int    pageableMemoryAccess;       
    int    concurrentManagedAccess;    
};















































































typedef __declspec(__device_builtin__) struct __declspec(__device_builtin__) cudaIpcEventHandle_st
{
    char reserved[64];
}cudaIpcEventHandle_t;




typedef __declspec(__device_builtin__) struct __declspec(__device_builtin__) cudaIpcMemHandle_st 
{
    char reserved[64];
}cudaIpcMemHandle_t;










typedef __declspec(__device_builtin__) enum cudaError cudaError_t;




typedef __declspec(__device_builtin__) struct CUstream_st *cudaStream_t;




typedef __declspec(__device_builtin__) struct CUevent_st *cudaEvent_t;




typedef __declspec(__device_builtin__) struct cudaGraphicsResource *cudaGraphicsResource_t;




typedef __declspec(__device_builtin__) struct CUuuid_st cudaUUID_t;




typedef __declspec(__device_builtin__) enum cudaOutputMode cudaOutputMode_t;


 

#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"


























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
























enum __declspec(__device_builtin__) cudaSurfaceBoundaryMode
{
    cudaBoundaryModeZero  = 0,    
    cudaBoundaryModeClamp = 1,    
    cudaBoundaryModeTrap  = 2     
};




enum __declspec(__device_builtin__)  cudaSurfaceFormatMode
{
    cudaFormatModeForced = 0,     
    cudaFormatModeAuto = 1        
};




struct __declspec(__device_builtin__) surfaceReference
{
    


    struct cudaChannelFormatDesc channelDesc;
};




typedef __declspec(__device_builtin__) unsigned long long cudaSurfaceObject_t;


 

#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"


























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























enum __declspec(__device_builtin__) cudaTextureAddressMode
{
    cudaAddressModeWrap   = 0,    
    cudaAddressModeClamp  = 1,    
    cudaAddressModeMirror = 2,    
    cudaAddressModeBorder = 3     
};




enum __declspec(__device_builtin__) cudaTextureFilterMode
{
    cudaFilterModePoint  = 0,     
    cudaFilterModeLinear = 1      
};




enum __declspec(__device_builtin__) cudaTextureReadMode
{
    cudaReadModeElementType     = 0,  
    cudaReadModeNormalizedFloat = 1   
};




struct __declspec(__device_builtin__) textureReference
{
    


    int                          normalized;
    


    enum cudaTextureFilterMode   filterMode;
    


    enum cudaTextureAddressMode  addressMode[3];
    


    struct cudaChannelFormatDesc channelDesc;
    


    int                          sRGB;
    


    unsigned int                 maxAnisotropy;
    


    enum cudaTextureFilterMode   mipmapFilterMode;
    


    float                        mipmapLevelBias;
    


    float                        minMipmapLevelClamp;
    


    float                        maxMipmapLevelClamp;
    int                          __cudaReserved[15];
};




struct __declspec(__device_builtin__) cudaTextureDesc
{
    


    enum cudaTextureAddressMode addressMode[3];
    


    enum cudaTextureFilterMode  filterMode;
    


    enum cudaTextureReadMode    readMode;
    


    int                         sRGB;
    


    float                       borderColor[4];
    


    int                         normalizedCoords;
    


    unsigned int                maxAnisotropy;
    


    enum cudaTextureFilterMode  mipmapFilterMode;
    


    float                       mipmapLevelBias;
    


    float                       minMipmapLevelClamp;
    


    float                       maxMipmapLevelClamp;
};




typedef __declspec(__device_builtin__) unsigned long long cudaTextureObject_t;


 

#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"

#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"






















#line 89 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 97 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"

struct __declspec(__device_builtin__) char1
{
    signed char x;
};

struct __declspec(__device_builtin__) uchar1
{
    unsigned char x;
};


struct __declspec(__device_builtin__) __declspec(align(2)) char2
{
    signed char x, y;
};

struct __declspec(__device_builtin__) __declspec(align(2)) uchar2
{
    unsigned char x, y;
};

struct __declspec(__device_builtin__) char3
{
    signed char x, y, z;
};

struct __declspec(__device_builtin__) uchar3
{
    unsigned char x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(4)) char4
{
    signed char x, y, z, w;
};

struct __declspec(__device_builtin__) __declspec(align(4)) uchar4
{
    unsigned char x, y, z, w;
};

struct __declspec(__device_builtin__) short1
{
    short x;
};

struct __declspec(__device_builtin__) ushort1
{
    unsigned short x;
};

struct __declspec(__device_builtin__) __declspec(align(4)) short2
{
    short x, y;
};

struct __declspec(__device_builtin__) __declspec(align(4)) ushort2
{
    unsigned short x, y;
};

struct __declspec(__device_builtin__) short3
{
    short x, y, z;
};

struct __declspec(__device_builtin__) ushort3
{
    unsigned short x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(8)) short4 { short x; short y; short z; short w; };
struct __declspec(__device_builtin__) __declspec(align(8)) ushort4 { unsigned short x; unsigned short y; unsigned short z; unsigned short w; };

struct __declspec(__device_builtin__) int1
{
    int x;
};

struct __declspec(__device_builtin__) uint1
{
    unsigned int x;
};

struct __declspec(__device_builtin__) __declspec(align(8)) int2 { int x; int y; };
struct __declspec(__device_builtin__) __declspec(align(8)) uint2 { unsigned int x; unsigned int y; };

struct __declspec(__device_builtin__) int3
{
    int x, y, z;
};

struct __declspec(__device_builtin__) uint3
{
    unsigned int x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(16)) int4
{
    int x, y, z, w;
};

struct __declspec(__device_builtin__) __declspec(align(16)) uint4
{
    unsigned int x, y, z, w;
};

struct __declspec(__device_builtin__) long1
{
    long int x;
};

struct __declspec(__device_builtin__) ulong1
{
    unsigned long x;
};


struct __declspec(__device_builtin__) __declspec(align(8)) long2 { long int x; long int y; };
struct __declspec(__device_builtin__) __declspec(align(8)) ulong2 { unsigned long int x; unsigned long int y; };












#line 231 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"

struct __declspec(__device_builtin__) long3
{
    long int x, y, z;
};

struct __declspec(__device_builtin__) ulong3
{
    unsigned long int x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(16)) long4
{
    long int x, y, z, w;
};

struct __declspec(__device_builtin__) __declspec(align(16)) ulong4
{
    unsigned long int x, y, z, w;
};

struct __declspec(__device_builtin__) float1
{
    float x;
};















#line 273 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"

struct __declspec(__device_builtin__) __declspec(align(8)) float2 { float x; float y; };

#line 277 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"


struct __declspec(__device_builtin__) float3
{
    float x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(16)) float4
{
    float x, y, z, w;
};

struct __declspec(__device_builtin__) longlong1
{
    long long int x;
};

struct __declspec(__device_builtin__) ulonglong1
{
    unsigned long long int x;
};

struct __declspec(__device_builtin__) __declspec(align(16)) longlong2
{
    long long int x, y;
};

struct __declspec(__device_builtin__) __declspec(align(16)) ulonglong2
{
    unsigned long long int x, y;
};

struct __declspec(__device_builtin__) longlong3
{
    long long int x, y, z;
};

struct __declspec(__device_builtin__) ulonglong3
{
    unsigned long long int x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(16)) longlong4
{
    long long int x, y, z ,w;
};

struct __declspec(__device_builtin__) __declspec(align(16)) ulonglong4
{
    unsigned long long int x, y, z, w;
};

struct __declspec(__device_builtin__) double1
{
    double x;
};

struct __declspec(__device_builtin__) __declspec(align(16)) double2
{
    double x, y;
};

struct __declspec(__device_builtin__) double3
{
    double x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(16)) double4
{
    double x, y, z, w;
};





#line 355 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







typedef __declspec(__device_builtin__) struct char1 char1;
typedef __declspec(__device_builtin__) struct uchar1 uchar1;
typedef __declspec(__device_builtin__) struct char2 char2;
typedef __declspec(__device_builtin__) struct uchar2 uchar2;
typedef __declspec(__device_builtin__) struct char3 char3;
typedef __declspec(__device_builtin__) struct uchar3 uchar3;
typedef __declspec(__device_builtin__) struct char4 char4;
typedef __declspec(__device_builtin__) struct uchar4 uchar4;
typedef __declspec(__device_builtin__) struct short1 short1;
typedef __declspec(__device_builtin__) struct ushort1 ushort1;
typedef __declspec(__device_builtin__) struct short2 short2;
typedef __declspec(__device_builtin__) struct ushort2 ushort2;
typedef __declspec(__device_builtin__) struct short3 short3;
typedef __declspec(__device_builtin__) struct ushort3 ushort3;
typedef __declspec(__device_builtin__) struct short4 short4;
typedef __declspec(__device_builtin__) struct ushort4 ushort4;
typedef __declspec(__device_builtin__) struct int1 int1;
typedef __declspec(__device_builtin__) struct uint1 uint1;
typedef __declspec(__device_builtin__) struct int2 int2;
typedef __declspec(__device_builtin__) struct uint2 uint2;
typedef __declspec(__device_builtin__) struct int3 int3;
typedef __declspec(__device_builtin__) struct uint3 uint3;
typedef __declspec(__device_builtin__) struct int4 int4;
typedef __declspec(__device_builtin__) struct uint4 uint4;
typedef __declspec(__device_builtin__) struct long1 long1;
typedef __declspec(__device_builtin__) struct ulong1 ulong1;
typedef __declspec(__device_builtin__) struct long2 long2;
typedef __declspec(__device_builtin__) struct ulong2 ulong2;
typedef __declspec(__device_builtin__) struct long3 long3;
typedef __declspec(__device_builtin__) struct ulong3 ulong3;
typedef __declspec(__device_builtin__) struct long4 long4;
typedef __declspec(__device_builtin__) struct ulong4 ulong4;
typedef __declspec(__device_builtin__) struct float1 float1;
typedef __declspec(__device_builtin__) struct float2 float2;
typedef __declspec(__device_builtin__) struct float3 float3;
typedef __declspec(__device_builtin__) struct float4 float4;
typedef __declspec(__device_builtin__) struct longlong1 longlong1;
typedef __declspec(__device_builtin__) struct ulonglong1 ulonglong1;
typedef __declspec(__device_builtin__) struct longlong2 longlong2;
typedef __declspec(__device_builtin__) struct ulonglong2 ulonglong2;
typedef __declspec(__device_builtin__) struct longlong3 longlong3;
typedef __declspec(__device_builtin__) struct ulonglong3 ulonglong3;
typedef __declspec(__device_builtin__) struct longlong4 longlong4;
typedef __declspec(__device_builtin__) struct ulonglong4 ulonglong4;
typedef __declspec(__device_builtin__) struct double1 double1;
typedef __declspec(__device_builtin__) struct double2 double2;
typedef __declspec(__device_builtin__) struct double3 double3;
typedef __declspec(__device_builtin__) struct double4 double4;







struct __declspec(__device_builtin__) dim3
{
    unsigned int x, y, z;

    __declspec(__host__) __declspec(__device__) dim3(unsigned int vx = 1, unsigned int vy = 1, unsigned int vz = 1) : x(vx), y(vy), z(vz) {}
    __declspec(__host__) __declspec(__device__) dim3(uint3 v) : x(v.x), y(v.y), z(v.z) {}
    __declspec(__host__) __declspec(__device__) operator uint3(void) { uint3 t; t.x = x; t.y = y; t.z = z; return t; }
#line 425 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
};

typedef __declspec(__device_builtin__) struct dim3 dim3;



#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 87 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"





















































typedef enum cudaDataType_t
{
	CUDA_R_16F= 2,  
	CUDA_C_16F= 6,  
	CUDA_R_32F= 0,  
	CUDA_C_32F= 4,  
	CUDA_R_64F= 1,  
	CUDA_C_64F= 5,  
	CUDA_R_8I = 3,  
	CUDA_C_8I = 7,  
	CUDA_R_8U = 8,  
	CUDA_C_8U = 9,  
	CUDA_R_32I= 10, 
	CUDA_C_32I= 11, 
	CUDA_R_32U= 12, 
	CUDA_C_32U= 13  
} cudaDataType; 


typedef enum libraryPropertyType_t
{
	MAJOR_VERSION,
	MINOR_VERSION,
	PATCH_LEVEL
} libraryPropertyType;

#line 81 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
#line 88 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"




























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"




































































































































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"































































































#line 97 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"




#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"

extern "C"
{
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetAttribute(int *value, enum cudaDeviceAttr attr, int device);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetLimit(size_t *pValue, enum cudaLimit limit);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetCacheConfig(enum cudaFuncCache *pCacheConfig);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetSharedMemConfig(enum cudaSharedMemConfig *pConfig);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceSynchronize(void);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaGetLastError(void);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaPeekAtLastError(void);
extern __declspec(__device__) __declspec(__cudart_builtin__) const char* __stdcall cudaGetErrorString(cudaError_t error);
extern __declspec(__device__) __declspec(__cudart_builtin__) const char* __stdcall cudaGetErrorName(cudaError_t error);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaGetDeviceCount(int *count);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaGetDevice(int *device);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamCreateWithFlags(cudaStream_t *pStream, unsigned int flags);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamDestroy(cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned int flags);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamWaitEvent_ptsz(cudaStream_t stream, cudaEvent_t event, unsigned int flags);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaEventCreateWithFlags(cudaEvent_t *event, unsigned int flags);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaEventRecord(cudaEvent_t event, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaEventRecord_ptsz(cudaEvent_t event, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaEventDestroy(cudaEvent_t event);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaFuncGetAttributes(struct cudaFuncAttributes *attr, const void *func);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaFree(void *devPtr);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMalloc(void **devPtr, size_t size);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemcpyAsync(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemcpyAsync_ptsz(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemcpy2DAsync(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemcpy2DAsync_ptsz(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemcpy3DAsync(const struct cudaMemcpy3DParms *p, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemcpy3DAsync_ptsz(const struct cudaMemcpy3DParms *p, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemsetAsync(void *devPtr, int value, size_t count, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemsetAsync_ptsz(void *devPtr, int value, size_t count, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemset2DAsync(void *devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemset2DAsync_ptsz(void *devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemset3DAsync(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemset3DAsync_ptsz(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaRuntimeGetVersion(int *runtimeVersion);




















extern __declspec(__device__) __declspec(__cudart_builtin__) void * __stdcall cudaGetParameterBuffer(size_t alignment, size_t size);



























extern __declspec(__device__) __declspec(__cudart_builtin__) void * __stdcall cudaGetParameterBufferV2(void *func, dim3 gridDimension, dim3 blockDimension, unsigned int sharedMemSize);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaLaunchDevice_ptsz(void *func, void *parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned int sharedMemSize, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaLaunchDeviceV2_ptsz(void *parameterBuffer, cudaStream_t stream);
















#line 209 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
    extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaLaunchDevice(void *func, void *parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned int sharedMemSize, cudaStream_t stream);
    extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaLaunchDeviceV2(void *parameterBuffer, cudaStream_t stream);
#line 212 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"

extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *numBlocks, const void *func, int blockSize, size_t dynamicSmemSize);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *numBlocks, const void *func, int blockSize, size_t dynamicSmemSize, unsigned int flags);

}

template <typename T> static __inline __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t cudaMalloc(T **devPtr, size_t size);
template <typename T> static __inline __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t cudaFuncGetAttributes(struct cudaFuncAttributes *attr, T *entry);
template <typename T> static __inline __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *numBlocks, T func, int blockSize, size_t dynamicSmemSize);
template <typename T> static __inline __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *numBlocks, T func, int blockSize, size_t dynamicSmemSize, unsigned int flags);

#line 224 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
#line 225 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"

#line 227 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"

#line 229 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
#line 138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
#line 139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"





#line 145 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
    
    
#line 148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"









































#line 190 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"













#line 204 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"

#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"










#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"


extern "C" {
#line 221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceReset(void);
















extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceSynchronize(void);










































































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceSetLimit(enum cudaLimit limit, size_t value);




























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetLimit(size_t *pValue, enum cudaLimit limit);






























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetCacheConfig(enum cudaFuncCache *pCacheConfig);


































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetStreamPriorityRange(int *leastPriority, int *greatestPriority);









































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceSetCacheConfig(enum cudaFuncCache cacheConfig);




























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetSharedMemConfig(enum cudaSharedMemConfig *pConfig);









































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceSetSharedMemConfig(enum cudaSharedMemConfig config);






















extern __declspec(__host__) cudaError_t __stdcall cudaDeviceGetByPCIBusId(int *device, const char *pciBusId);


























extern __declspec(__host__) cudaError_t __stdcall cudaDeviceGetPCIBusId(char *pciBusId, int len, int device);









































extern __declspec(__host__) cudaError_t __stdcall cudaIpcGetEventHandle(cudaIpcEventHandle_t *handle, cudaEvent_t event);


































extern __declspec(__host__) cudaError_t __stdcall cudaIpcOpenEventHandle(cudaEvent_t *event, cudaIpcEventHandle_t handle);





































extern __declspec(__host__) cudaError_t __stdcall cudaIpcGetMemHandle(cudaIpcMemHandle_t *handle, void *devPtr);

















































extern __declspec(__host__) cudaError_t __stdcall cudaIpcOpenMemHandle(void **devPtr, cudaIpcMemHandle_t handle, unsigned int flags);





























extern __declspec(__host__) cudaError_t __stdcall cudaIpcCloseMemHandle(void *devPtr);

 





































extern __declspec(__host__) cudaError_t __stdcall cudaThreadExit(void);























extern __declspec(__host__) cudaError_t __stdcall cudaThreadSynchronize(void);














































extern __declspec(__host__) cudaError_t __stdcall cudaThreadSetLimit(enum cudaLimit limit, size_t value);






























extern __declspec(__host__) cudaError_t __stdcall cudaThreadGetLimit(size_t *pValue, enum cudaLimit limit);


































extern __declspec(__host__) cudaError_t __stdcall cudaThreadGetCacheConfig(enum cudaFuncCache *pCacheConfig);













































extern __declspec(__host__) cudaError_t __stdcall cudaThreadSetCacheConfig(enum cudaFuncCache cacheConfig);

 



















































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaGetLastError(void);








































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaPeekAtLastError(void);














extern __declspec(__host__) __declspec(__cudart_builtin__) const char* __stdcall cudaGetErrorName(cudaError_t error);














extern __declspec(__host__) __declspec(__cudart_builtin__) const char* __stdcall cudaGetErrorString(cudaError_t error);
 




























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaGetDeviceCount(int *count);





















































































































































































































































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaGetDeviceProperties(struct cudaDeviceProp *prop, int device);











































































































































































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetAttribute(int *value, enum cudaDeviceAttr attr, int device);


































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetP2PAttribute(int *value, enum cudaDeviceP2PAttr attr, int srcDevice, int dstDevice);


















extern __declspec(__host__) cudaError_t __stdcall cudaChooseDevice(int *device, const struct cudaDeviceProp *prop);

































extern __declspec(__host__) cudaError_t __stdcall cudaSetDevice(int device);
















extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaGetDevice(int *device);




























extern __declspec(__host__) cudaError_t __stdcall cudaSetValidDevices(int *device_arr, int len);





























































extern __declspec(__host__) cudaError_t __stdcall cudaSetDeviceFlags( unsigned int flags );








































extern __declspec(__host__) cudaError_t __stdcall cudaGetDeviceFlags( unsigned int *flags );
 



































extern __declspec(__host__) cudaError_t __stdcall cudaStreamCreate(cudaStream_t *pStream);




























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamCreateWithFlags(cudaStream_t *pStream, unsigned int flags);










































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamCreateWithPriority(cudaStream_t *pStream, unsigned int flags, int priority);























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamGetPriority(cudaStream_t hStream, int *priority);




















extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamGetFlags(cudaStream_t hStream, unsigned int *flags);




















extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamDestroy(cudaStream_t stream);































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned int flags);





#line 2044 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"







typedef void (__stdcall *cudaStreamCallback_t)(cudaStream_t stream, cudaError_t status, void *userData);
























































extern __declspec(__host__) cudaError_t __stdcall cudaStreamAddCallback(cudaStream_t stream,
        cudaStreamCallback_t callback, void *userData, unsigned int flags);


















extern __declspec(__host__) cudaError_t __stdcall cudaStreamSynchronize(cudaStream_t stream);




















extern __declspec(__host__) cudaError_t __stdcall cudaStreamQuery(cudaStream_t stream);






































































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamAttachMemAsync(cudaStream_t stream, void *devPtr, size_t length = 0, unsigned int flags = 0x04);

 

































extern __declspec(__host__) cudaError_t __stdcall cudaEventCreate(cudaEvent_t *event);

































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaEventCreateWithFlags(cudaEvent_t *event, unsigned int flags);






























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaEventRecord(cudaEvent_t event, cudaStream_t stream = 0);































extern __declspec(__host__) cudaError_t __stdcall cudaEventQuery(cudaEvent_t event);































extern __declspec(__host__) cudaError_t __stdcall cudaEventSynchronize(cudaEvent_t event);
























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaEventDestroy(cudaEvent_t event);








































extern __declspec(__host__) cudaError_t __stdcall cudaEventElapsedTime(float *ms, cudaEvent_t start, cudaEvent_t end);

 
























































extern __declspec(__host__) cudaError_t __stdcall cudaLaunchKernel(const void *func, dim3 gridDim, dim3 blockDim, void **args, size_t sharedMem, cudaStream_t stream);

#line 2513 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"















































extern __declspec(__host__) cudaError_t __stdcall cudaFuncSetCacheConfig(const void *func, enum cudaFuncCache cacheConfig);





















































extern __declspec(__host__) cudaError_t __stdcall cudaFuncSetSharedMemConfig(const void *func, enum cudaSharedMemConfig config);

































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaFuncGetAttributes(struct cudaFuncAttributes *attr, const void *func);






















extern __declspec(__host__) cudaError_t __stdcall cudaSetDoubleForDevice(double *d);






















extern __declspec(__host__) cudaError_t __stdcall cudaSetDoubleForHost(double *d);

 





















































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *numBlocks, const void *func, int blockSize, size_t dynamicSMemSize);











































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *numBlocks, const void *func, int blockSize, size_t dynamicSMemSize, unsigned int flags);

 
#line 2798 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
#line 2799 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"














































extern __declspec(__host__) cudaError_t __stdcall cudaConfigureCall(dim3 gridDim, dim3 blockDim, size_t sharedMem = 0, cudaStream_t stream = 0);




























extern __declspec(__host__) cudaError_t __stdcall cudaSetupArgument(const void *arg, size_t size, size_t offset);





































extern __declspec(__host__) cudaError_t __stdcall cudaLaunch(const void *func);


 


















































































































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMallocManaged(void **devPtr, size_t size, unsigned int flags = 0x01);

























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMalloc(void **devPtr, size_t size);




























extern __declspec(__host__) cudaError_t __stdcall cudaMallocHost(void **ptr, size_t size);






































extern __declspec(__host__) cudaError_t __stdcall cudaMallocPitch(void **devPtr, size_t *pitch, size_t width, size_t height);









































extern __declspec(__host__) cudaError_t __stdcall cudaMallocArray(cudaArray_t *array, const struct cudaChannelFormatDesc *desc, size_t width, size_t height = 0, unsigned int flags = 0);


























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaFree(void *devPtr);



















extern __declspec(__host__) cudaError_t __stdcall cudaFreeHost(void *ptr);





















extern __declspec(__host__) cudaError_t __stdcall cudaFreeArray(cudaArray_t array);





















extern __declspec(__host__) cudaError_t __stdcall cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray);


























































extern __declspec(__host__) cudaError_t __stdcall cudaHostAlloc(void **pHost, size_t size, unsigned int flags);












































































extern __declspec(__host__) cudaError_t __stdcall cudaHostRegister(void *ptr, size_t size, unsigned int flags);


















extern __declspec(__host__) cudaError_t __stdcall cudaHostUnregister(void *ptr);









































extern __declspec(__host__) cudaError_t __stdcall cudaHostGetDevicePointer(void **pDevice, void *pHost, unsigned int flags);


















extern __declspec(__host__) cudaError_t __stdcall cudaHostGetFlags(unsigned int *pFlags, void *pHost);


































extern __declspec(__host__) cudaError_t __stdcall cudaMalloc3D(struct cudaPitchedPtr* pitchedDevPtr, struct cudaExtent extent);






































































































































extern __declspec(__host__) cudaError_t __stdcall cudaMalloc3DArray(cudaArray_t *array, const struct cudaChannelFormatDesc* desc, struct cudaExtent extent, unsigned int flags = 0);
























































































































extern __declspec(__host__) cudaError_t __stdcall cudaMallocMipmappedArray(cudaMipmappedArray_t *mipmappedArray, const struct cudaChannelFormatDesc* desc, struct cudaExtent extent, unsigned int numLevels, unsigned int flags = 0);

























extern __declspec(__host__) cudaError_t __stdcall cudaGetMipmappedArrayLevel(cudaArray_t *levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned int level);



































































































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy3D(const struct cudaMemcpy3DParms *p);



























extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy3DPeer(const struct cudaMemcpy3DPeerParms *p);














































































































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemcpy3DAsync(const struct cudaMemcpy3DParms *p, cudaStream_t stream = 0);






















extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy3DPeerAsync(const struct cudaMemcpy3DPeerParms *p, cudaStream_t stream = 0);


















extern __declspec(__host__) cudaError_t __stdcall cudaMemGetInfo(size_t *free, size_t *total);




















extern __declspec(__host__) cudaError_t __stdcall cudaArrayGetInfo(struct cudaChannelFormatDesc *desc, struct cudaExtent *extent, unsigned int *flags, cudaArray_t array);





































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind);































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyPeer(void *dst, int dstDevice, const void *src, int srcDevice, size_t count);





































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t count, enum cudaMemcpyKind kind);




































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyFromArray(void *dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, enum cudaMemcpyKind kind);





































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, enum cudaMemcpyKind kind = cudaMemcpyDeviceToDevice);












































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy2D(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind);













































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind);













































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy2DFromArray(void *dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, enum cudaMemcpyKind kind);










































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, enum cudaMemcpyKind kind = cudaMemcpyDeviceToDevice);





































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyToSymbol(const void *symbol, const void *src, size_t count, size_t offset = 0, enum cudaMemcpyKind kind = cudaMemcpyHostToDevice);





































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyFromSymbol(void *dst, const void *symbol, size_t count, size_t offset = 0, enum cudaMemcpyKind kind = cudaMemcpyDeviceToHost);


















































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemcpyAsync(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream = 0);































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyPeerAsync(void *dst, int dstDevice, const void *src, int srcDevice, size_t count, cudaStream_t stream = 0);













































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream = 0);












































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyFromArrayAsync(void *dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream = 0);



























































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemcpy2DAsync(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream = 0);






















































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream = 0);





















































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy2DFromArrayAsync(void *dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream = 0);













































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyToSymbolAsync(const void *symbol, const void *src, size_t count, size_t offset, enum cudaMemcpyKind kind, cudaStream_t stream = 0);













































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyFromSymbolAsync(void *dst, const void *symbol, size_t count, size_t offset, enum cudaMemcpyKind kind, cudaStream_t stream = 0);

























extern __declspec(__host__) cudaError_t __stdcall cudaMemset(void *devPtr, int value, size_t count);





























extern __declspec(__host__) cudaError_t __stdcall cudaMemset2D(void *devPtr, size_t pitch, int value, size_t width, size_t height);










































extern __declspec(__host__) cudaError_t __stdcall cudaMemset3D(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent);































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemsetAsync(void *devPtr, int value, size_t count, cudaStream_t stream = 0);




































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemset2DAsync(void *devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream = 0);

















































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemset3DAsync(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent, cudaStream_t stream = 0);






















extern __declspec(__host__) cudaError_t __stdcall cudaGetSymbolAddress(void **devPtr, const void *symbol);





















extern __declspec(__host__) cudaError_t __stdcall cudaGetSymbolSize(size_t *size, const void *symbol);


































































extern __declspec(__host__) cudaError_t __stdcall cudaMemPrefetchAsync(const void *devPtr, size_t count, int dstDevice, cudaStream_t stream = 0);





















































































extern __declspec(__host__) cudaError_t __stdcall cudaMemAdvise(const void *devPtr, size_t count, enum cudaMemoryAdvise advice, int device);























































extern __declspec(__host__) cudaError_t __stdcall cudaMemRangeGetAttribute(void *data, size_t dataSize, enum cudaMemRangeAttribute attribute, const void *devPtr, size_t count);



































extern __declspec(__host__) cudaError_t __stdcall cudaMemRangeGetAttributes(void **data, size_t *dataSizes, enum cudaMemRangeAttribute *attributes, size_t numAttributes, const void *devPtr, size_t count);

 






















































































































































extern __declspec(__host__) cudaError_t __stdcall cudaPointerGetAttributes(struct cudaPointerAttributes *attributes, const void *ptr);

 



































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceCanAccessPeer(int *canAccessPeer, int device, int peerDevice);






































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceEnablePeerAccess(int peerDevice, unsigned int flags);


















extern __declspec(__host__) cudaError_t __stdcall cudaDeviceDisablePeerAccess(int peerDevice);

 

























































extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource);































extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned int flags);



































extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsMapResources(int count, cudaGraphicsResource_t *resources, cudaStream_t stream = 0);































extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t *resources, cudaStream_t stream = 0);




























extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsResourceGetMappedPointer(void **devPtr, size_t *size, cudaGraphicsResource_t resource);

































extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsSubResourceGetMappedArray(cudaArray_t *array, cudaGraphicsResource_t resource, unsigned int arrayIndex, unsigned int mipLevel);
























extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t *mipmappedArray, cudaGraphicsResource_t resource);

 





































extern __declspec(__host__) cudaError_t __stdcall cudaGetChannelDesc(struct cudaChannelFormatDesc *desc, cudaArray_const_t array);


































extern __declspec(__host__) struct cudaChannelFormatDesc __stdcall cudaCreateChannelDesc(int x, int y, int z, int w, enum cudaChannelFormatKind f);














































extern __declspec(__host__) cudaError_t __stdcall cudaBindTexture(size_t *offset, const struct textureReference *texref, const void *devPtr, const struct cudaChannelFormatDesc *desc, size_t size = 0xffffffff);


















































extern __declspec(__host__) cudaError_t __stdcall cudaBindTexture2D(size_t *offset, const struct textureReference *texref, const void *devPtr, const struct cudaChannelFormatDesc *desc, size_t width, size_t height, size_t pitch);



























extern __declspec(__host__) cudaError_t __stdcall cudaBindTextureToArray(const struct textureReference *texref, cudaArray_const_t array, const struct cudaChannelFormatDesc *desc);



























extern __declspec(__host__) cudaError_t __stdcall cudaBindTextureToMipmappedArray(const struct textureReference *texref, cudaMipmappedArray_const_t mipmappedArray, const struct cudaChannelFormatDesc *desc);




















extern __declspec(__host__) cudaError_t __stdcall cudaUnbindTexture(const struct textureReference *texref);
























extern __declspec(__host__) cudaError_t __stdcall cudaGetTextureAlignmentOffset(size_t *offset, const struct textureReference *texref);
























extern __declspec(__host__) cudaError_t __stdcall cudaGetTextureReference(const struct textureReference **texref, const void *symbol);

 





































extern __declspec(__host__) cudaError_t __stdcall cudaBindSurfaceToArray(const struct surfaceReference *surfref, cudaArray_const_t array, const struct cudaChannelFormatDesc *desc);


















extern __declspec(__host__) cudaError_t __stdcall cudaGetSurfaceReference(const struct surfaceReference **surfref, const void *symbol);

 































































































































































































































extern __declspec(__host__) cudaError_t __stdcall cudaCreateTextureObject(cudaTextureObject_t *pTexObject, const struct cudaResourceDesc *pResDesc, const struct cudaTextureDesc *pTexDesc, const struct cudaResourceViewDesc *pResViewDesc);














extern __declspec(__host__) cudaError_t __stdcall cudaDestroyTextureObject(cudaTextureObject_t texObject);















extern __declspec(__host__) cudaError_t __stdcall cudaGetTextureObjectResourceDesc(struct cudaResourceDesc *pResDesc, cudaTextureObject_t texObject);















extern __declspec(__host__) cudaError_t __stdcall cudaGetTextureObjectTextureDesc(struct cudaTextureDesc *pTexDesc, cudaTextureObject_t texObject);
















extern __declspec(__host__) cudaError_t __stdcall cudaGetTextureObjectResourceViewDesc(struct cudaResourceViewDesc *pResViewDesc, cudaTextureObject_t texObject);

 




































extern __declspec(__host__) cudaError_t __stdcall cudaCreateSurfaceObject(cudaSurfaceObject_t *pSurfObject, const struct cudaResourceDesc *pResDesc);














extern __declspec(__host__) cudaError_t __stdcall cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject);














extern __declspec(__host__) cudaError_t __stdcall cudaGetSurfaceObjectResourceDesc(struct cudaResourceDesc *pResDesc, cudaSurfaceObject_t surfObject);

 
























extern __declspec(__host__) cudaError_t __stdcall cudaDriverGetVersion(int *driverVersion);
















extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaRuntimeGetVersion(int *runtimeVersion);

 


extern __declspec(__host__) cudaError_t __stdcall cudaGetExportTable(const void **ppExportTable, const cudaUUID_t *pExportTableId);





















































































































































































































#line 6953 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"








#line 6962 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"


}

#line 6967 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"



#line 6971 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"

#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"










































template<class T> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc(void)
{
  return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone);
}

static __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDescHalf(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

static __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDescHalf1(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

static __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDescHalf2(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat);
}

static __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDescHalf4(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<char>(void)
{
  int e = (int)sizeof(char) * 8;



#line 147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
#line 149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<signed char>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned char>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<char1>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<uchar1>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<char2>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<uchar2>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<char4>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<uchar4>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<short>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned short>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<short1>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<ushort1>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<short2>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<ushort2>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<short4>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<ushort4>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<int>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned int>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<int1>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<uint1>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<int2>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<uint2>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<int4>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<uint4>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}



template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<long>(void)
{
  int e = (int)sizeof(long) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned long>(void)
{
  int e = (int)sizeof(unsigned long) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<long1>(void)
{
  int e = (int)sizeof(long) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<ulong1>(void)
{
  int e = (int)sizeof(unsigned long) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<long2>(void)
{
  int e = (int)sizeof(long) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<ulong2>(void)
{
  int e = (int)sizeof(unsigned long) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<long4>(void)
{
  int e = (int)sizeof(long) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<ulong4>(void)
{
  int e = (int)sizeof(unsigned long) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}

#line 378 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<float>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<float1>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<float2>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<float4>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat);
}

#line 408 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"


 

#line 413 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
#line 91 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"

























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 6971 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"

#line 92 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"




















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 54 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 55 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"























static __inline __declspec(__host__) struct cudaPitchedPtr make_cudaPitchedPtr(void *d, size_t p, size_t xsz, size_t ysz) 
{
  struct cudaPitchedPtr s;

  s.ptr   = d;
  s.pitch = p;
  s.xsize = xsz;
  s.ysize = ysz;

  return s;
}
















static __inline __declspec(__host__) struct cudaPos make_cudaPos(size_t x, size_t y, size_t z) 
{
  struct cudaPos p;

  p.x = x;
  p.y = y;
  p.z = z;

  return p;
}
















static __inline __declspec(__host__) struct cudaExtent make_cudaExtent(size_t w, size_t h, size_t d) 
{
  struct cudaExtent e;

  e.width  = w;
  e.height = h;
  e.depth  = d;

  return e;
}

 

#line 146 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
#line 93 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"

#line 95 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 96 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.h"


























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.h"



#line 66 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.h"

#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.h"







































































































#line 172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.h"




#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"


























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"



#line 66 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"

#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"







static __inline __declspec(__host__) __declspec(__device__) char1 make_char1(signed char x)
{
  char1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uchar1 make_uchar1(unsigned char x)
{
  uchar1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) char2 make_char2(signed char x, signed char y)
{
  char2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uchar2 make_uchar2(unsigned char x, unsigned char y)
{
  uchar2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) char3 make_char3(signed char x, signed char y, signed char z)
{
  char3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z)
{
  uchar3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) char4 make_char4(signed char x, signed char y, signed char z, signed char w)
{
  char4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w)
{
  uchar4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) short1 make_short1(short x)
{
  short1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ushort1 make_ushort1(unsigned short x)
{
  ushort1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) short2 make_short2(short x, short y)
{
  short2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ushort2 make_ushort2(unsigned short x, unsigned short y)
{
  ushort2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) short3 make_short3(short x,short y, short z)
{ 
  short3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z)
{
  ushort3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) short4 make_short4(short x, short y, short z, short w)
{
  short4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w)
{
  ushort4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) int1 make_int1(int x)
{
  int1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uint1 make_uint1(unsigned int x)
{
  uint1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) int2 make_int2(int x, int y)
{
  int2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uint2 make_uint2(unsigned int x, unsigned int y)
{
  uint2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) int3 make_int3(int x, int y, int z)
{
  int3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uint3 make_uint3(unsigned int x, unsigned int y, unsigned int z)
{
  uint3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) int4 make_int4(int x, int y, int z, int w)
{
  int4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uint4 make_uint4(unsigned int x, unsigned int y, unsigned int z, unsigned int w)
{
  uint4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) long1 make_long1(long int x)
{
  long1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulong1 make_ulong1(unsigned long int x)
{
  ulong1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) long2 make_long2(long int x, long int y)
{
  long2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulong2 make_ulong2(unsigned long int x, unsigned long int y)
{
  ulong2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) long3 make_long3(long int x, long int y, long int z)
{
  long3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulong3 make_ulong3(unsigned long int x, unsigned long int y, unsigned long int z)
{
  ulong3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) long4 make_long4(long int x, long int y, long int z, long int w)
{
  long4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulong4 make_ulong4(unsigned long int x, unsigned long int y, unsigned long int z, unsigned long int w)
{
  ulong4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) float1 make_float1(float x)
{
  float1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) float2 make_float2(float x, float y)
{
  float2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) float3 make_float3(float x, float y, float z)
{
  float3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) float4 make_float4(float x, float y, float z, float w)
{
  float4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) longlong1 make_longlong1(long long int x)
{
  longlong1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulonglong1 make_ulonglong1(unsigned long long int x)
{
  ulonglong1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) longlong2 make_longlong2(long long int x, long long int y)
{
  longlong2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulonglong2 make_ulonglong2(unsigned long long int x, unsigned long long int y)
{
  ulonglong2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) longlong3 make_longlong3(long long int x, long long int y, long long int z)
{
  longlong3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulonglong3 make_ulonglong3(unsigned long long int x, unsigned long long int y, unsigned long long int z)
{
  ulonglong3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) longlong4 make_longlong4(long long int x, long long int y, long long int z, long long int w)
{
  longlong4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulonglong4 make_ulonglong4(unsigned long long int x, unsigned long long int y, unsigned long long int z, unsigned long long int w)
{
  ulonglong4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) double1 make_double1(double x)
{
  double1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) double2 make_double2(double x, double y)
{
  double2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) double3 make_double3(double x, double y, double z)
{
  double3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) double4 make_double4(double x, double y, double z, double w)
{
  double4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}



#line 318 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"

#line 177 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.h"
#line 178 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.h"

#line 180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.h"
#line 97 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"

















#line 115 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"

#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"




























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"







#pragma once



#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"










#pragma once


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"







#pragma once


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\errno.h"







#pragma once




__pragma(pack(push, 8)) extern "C" {



__declspec(dllimport) extern int* __cdecl _errno(void);


__declspec(dllimport) errno_t __cdecl _set_errno(  int _Value);
__declspec(dllimport) errno_t __cdecl _get_errno(  int* _Value);



__declspec(dllimport) unsigned long* __cdecl __doserrno(void);


__declspec(dllimport) errno_t __cdecl _set_doserrno(  unsigned long _Value);
__declspec(dllimport) errno_t __cdecl _get_doserrno(  unsigned long * _Value);










































    
    
    
    
    
#line 78 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\errno.h"






    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
#line 126 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\errno.h"



} __pragma(pack(pop))
#line 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"







#pragma once

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"































































































































































































































































































































#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"



__pragma(pack(push, 8)) extern "C" {



 
__declspec(dllimport) void const* __cdecl memchr(
      void const* _Buf,
                                 int         _Val,
                                 size_t      _MaxCount
    );

 
int __cdecl memcmp(
      void const* _Buf1,
      void const* _Buf2,
                         size_t      _Size
    );


 

#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
void* __cdecl memcpy(
      void* _Dst,
            void const* _Src,
                               size_t      _Size
    );


__declspec(dllimport) void* __cdecl memmove(
      void*       _Dst,
            void const* _Src,
                                   size_t      _Size
    );

 

#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
void* __cdecl memset(
      void*  _Dst,
                               int    _Val,
                               size_t _Size
    );

 
__declspec(dllimport) char const* __cdecl strchr(
      char const* _Str,
        int         _Val
    );

 
__declspec(dllimport) char const* __cdecl strrchr(
      char const* _Str,
        int         _Ch
    );

   
__declspec(dllimport) char const* __cdecl strstr(
      char const* _Str,
      char const* _SubStr
    );

 

__declspec(dllimport) wchar_t const* __cdecl wcschr(
      wchar_t const* _Str,
        wchar_t        _Ch
    );

 
__declspec(dllimport) wchar_t const* __cdecl wcsrchr(
      wchar_t const* _Str,
        wchar_t        _Ch
    );

   

__declspec(dllimport) wchar_t const* __cdecl wcsstr(
      wchar_t const* _Str,
      wchar_t const* _SubStr
    );



} __pragma(pack(pop))

#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"

__pragma(pack(push, 8)) extern "C" {


    
#line 19 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"














     
    
    static __inline errno_t __cdecl memcpy_s(
          void*       const _Destination,
                                                              rsize_t     const _DestinationSize,
                                 void const* const _Source,
                                                              rsize_t     const _SourceSize
        )
    {
        if (_SourceSize == 0)
        {
            return 0;
        }

        { int _Expr_val=!!(_Destination != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        if (_Source == 0 || _DestinationSize < _SourceSize)
        {
            memset(_Destination, 0, _DestinationSize);

            { int _Expr_val=!!(_Source != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
            { int _Expr_val=!!(_DestinationSize >= _SourceSize); if (!(_Expr_val)) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; } };

            
            return 22;
        }

        memcpy(_Destination, _Source, _SourceSize);
        return 0;
    }

    
    static __inline errno_t __cdecl memmove_s(
          void*       const _Destination,
                                                              rsize_t     const _DestinationSize,
                                 void const* const _Source,
                                                              rsize_t     const _SourceSize
        )
    {
        if (_SourceSize == 0)
        {
            return 0;
        }

        { int _Expr_val=!!(_Destination != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        { int _Expr_val=!!(_Source != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        { int _Expr_val=!!(_DestinationSize >= _SourceSize); if (!(_Expr_val)) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; } };

        memmove(_Destination, _Source, _SourceSize);
        return 0;
    }

#line 85 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"



} __pragma(pack(pop))
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"




__pragma(pack(push, 8)) extern "C" {



 
__declspec(dllimport) int __cdecl _memicmp(
      void const* _Buf1,
      void const* _Buf2,
                             size_t      _Size
    );

 
__declspec(dllimport) int __cdecl _memicmp_l(
      void const* _Buf1,
      void const* _Buf2,
                             size_t      _Size,
                         _locale_t   _Locale
    );





    












#line 56 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"

    












#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"

#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"




    
    __declspec(dllimport) void* __cdecl memccpy(
          void*       _Dst,
            void const* _Src,
                                   int         _Val,
                                   size_t      _Size
        );

      
    __declspec(dllimport) int __cdecl memicmp(
          void const* _Buf1,
          void const* _Buf2,
                                 size_t      _Size
        );
#line 92 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"




    extern "C++"  
    inline void* __cdecl memchr(
          void*  _Pv,
                              int    _C,
                              size_t _N
        )
    {
        void const* const _Pvc = _Pv;
        return const_cast<void*>(memchr(_Pvc, _C, _N));
    }
#line 107 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"



} __pragma(pack(pop))

#line 113 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"








#pragma once






__pragma(pack(push, 8)) extern "C" {










    
    __declspec(dllimport) errno_t __cdecl wcscat_s(
          wchar_t* _Destination,
          rsize_t _SizeInWords,
          wchar_t const* _Source
        );

    
    __declspec(dllimport) errno_t __cdecl wcscpy_s(
          wchar_t* _Destination,
          rsize_t _SizeInWords,
          wchar_t const* _Source
        );
    
    
    __declspec(dllimport) errno_t __cdecl wcsncat_s(
          wchar_t*       _Destination,
                                     rsize_t        _SizeInWords,
               wchar_t const* _Source,
                                     rsize_t        _MaxCount
        );
    
    
    __declspec(dllimport) errno_t __cdecl wcsncpy_s(
          wchar_t*       _Destination,
                                  rsize_t        _SizeInWords,
            wchar_t const* _Source,
                                  rsize_t        _MaxCount
        );
    
     
    __declspec(dllimport) wchar_t* __cdecl wcstok_s(
                          wchar_t*       _String,
                                 wchar_t const* _Delimiter,
            wchar_t**      _Context
        );

#line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"











#line 77 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

 
__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wcsdup(
      wchar_t const* _String
    );



#line 86 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"



extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscat_s(wchar_t (&_Destination)[_Size],   wchar_t const* _Source) throw() { return wcscat_s(_Destination, _Size, _Source); } }
#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"



     __declspec(dllimport) wchar_t* __cdecl wcscat( wchar_t *_Destination,  wchar_t const* _Source);
#line 102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

#line 104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

 
__declspec(dllimport) int __cdecl wcscmp(
      wchar_t const* _String1,
      wchar_t const* _String2
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscpy_s(wchar_t (&_Destination)[_Size],   wchar_t const* _Source) throw() { return wcscpy_s(_Destination, _Size, _Source); } }
#line 116 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

 __declspec(dllimport) wchar_t* __cdecl wcscpy( wchar_t *_Destination,  wchar_t const* _Source);
#line 122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

 
__declspec(dllimport) size_t __cdecl wcscspn(
      wchar_t const* _String,
      wchar_t const* _Control
    );

 
__declspec(dllimport) size_t __cdecl wcslen(
      wchar_t const* _String
    );

 

#line 139 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

#line 143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) size_t __cdecl wcsnlen(
      wchar_t const* _Source,
                            size_t         _MaxCount
    );



     
    
#line 155 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
    
#line 159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
    static __inline size_t __cdecl wcsnlen_s(
          wchar_t const* _Source,
                                size_t         _MaxCount
        )
    {
        return (_Source == 0) ? 0 : wcsnlen(_Source, _MaxCount);
    }

#line 168 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncat_s(  wchar_t (&_Destination)[_Size],   wchar_t const* _Source,   size_t _Count) throw() { return wcsncat_s(_Destination, _Size, _Source, _Count); } }
#line 175 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

 __declspec(dllimport) wchar_t* __cdecl wcsncat(  wchar_t *_Destination,   wchar_t const* _Source,   size_t _Count);
#line 183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

 
__declspec(dllimport) int __cdecl wcsncmp(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncpy_s(wchar_t (&_Destination)[_Size],   wchar_t const* _Source,   size_t _Count) throw() { return wcsncpy_s(_Destination, _Size, _Source, _Count); } }
#line 197 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

 __declspec(dllimport) wchar_t* __cdecl wcsncpy(    wchar_t *_Destination,   wchar_t const* _Source,   size_t _Count);
#line 205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

 
__declspec(dllimport) wchar_t const* __cdecl wcspbrk(
      wchar_t const* _String,
      wchar_t const* _Control
    );

 
__declspec(dllimport) size_t __cdecl wcsspn(
      wchar_t const* _String,
      wchar_t const* _Control
    );

  
__declspec(dllimport) wchar_t* __cdecl wcstok(
                          wchar_t*       _String,
                                 wchar_t const* _Delimiter,
        wchar_t**      _Context
    );



    

#line 230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
        



    #line 235 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

    #pragma warning(push)
    #pragma warning(disable: 4141 4996) 

      
    static __inline wchar_t* __cdecl _wcstok(
          wchar_t*       const _String,
                 wchar_t const* const _Delimiter
        )
    {
        return wcstok(_String, _Delimiter, 0);
    }

    

#line 251 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

    
        extern "C++"   __declspec(deprecated("wcstok has been changed to conform with the ISO C standard, " "adding an extra context parameter. To use the legacy Microsoft " "wcstok, define _CRT_NON_CONFORMING_WCSTOK.")) 
        inline wchar_t* __cdecl wcstok(
              wchar_t*       _String,
                     wchar_t const* _Delimiter
            ) throw()
        {
            return wcstok(_String, _Delimiter, 0);
        }
    #line 262 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

    #pragma warning(pop)

#line 266 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"



 
  
__declspec(dllimport) wchar_t* __cdecl _wcserror(
      int _ErrorNumber
    );


__declspec(dllimport) errno_t __cdecl _wcserror_s(
      wchar_t* _Buffer,
                                  size_t   _SizeInWords,
                                  int      _ErrorNumber
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcserror_s(wchar_t (&_Buffer)[_Size],   int _Error) throw() { return _wcserror_s(_Buffer, _Size, _Error); } }
#line 287 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

 
 
  
__declspec(dllimport) wchar_t* __cdecl __wcserror(
      wchar_t const* _String
    );

 __declspec(dllimport) errno_t __cdecl __wcserror_s(
      wchar_t*       _Buffer,
                                  size_t         _SizeInWords,
                                wchar_t const* _ErrorMessage
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl __wcserror_s(wchar_t (&_Buffer)[_Size],   wchar_t const* _ErrorMessage) throw() { return __wcserror_s(_Buffer, _Size, _ErrorMessage); } }
#line 306 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

  __declspec(dllimport) int __cdecl _wcsicmp(
      wchar_t const* _String1,
      wchar_t const* _String2
    );

  __declspec(dllimport) int __cdecl _wcsicmp_l(
        wchar_t const* _String1,
        wchar_t const* _String2,
      _locale_t      _Locale
    );

  __declspec(dllimport) int __cdecl _wcsnicmp(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount
    );

  __declspec(dllimport) int __cdecl _wcsnicmp_l(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount,
                        _locale_t      _Locale
    );

 __declspec(dllimport) errno_t __cdecl _wcsnset_s(
      wchar_t* _Destination,
                                 size_t   _SizeInWords,
                                 wchar_t  _Value,
                                 size_t   _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsnset_s(  wchar_t (&_Destination)[_Size],   wchar_t _Value,   size_t _MaxCount) throw() { return _wcsnset_s(_Destination, _Size, _Value, _MaxCount); } }
#line 344 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

 __declspec(dllimport) wchar_t* __cdecl _wcsnset(  wchar_t *_String,   wchar_t _Value,   size_t _MaxCount);
#line 352 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

__declspec(dllimport) wchar_t* __cdecl _wcsrev(
      wchar_t* _String
    );

 __declspec(dllimport) errno_t __cdecl _wcsset_s(
      wchar_t* _Destination,
                                 size_t   _SizeInWords,
                                 wchar_t  _Value
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsset_s(  wchar_t (&_String)[_Size],   wchar_t _Value) throw() { return _wcsset_s(_String, _Size, _Value); } }
#line 368 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

 __declspec(dllimport) wchar_t* __cdecl _wcsset(  wchar_t *_String,   wchar_t _Value);
#line 375 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

 __declspec(dllimport) errno_t __cdecl _wcslwr_s(
      wchar_t* _String,
                                 size_t   _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s(  wchar_t (&_String)[_Size]) throw() { return _wcslwr_s(_String, _Size); } }
#line 385 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

 __declspec(dllimport) wchar_t* __cdecl _wcslwr( wchar_t *_String);
#line 390 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"


__declspec(dllimport) errno_t __cdecl _wcslwr_s_l(
      wchar_t*  _String,
                                 size_t    _SizeInWords,
                             _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s_l(  wchar_t (&_String)[_Size],   _locale_t _Locale) throw() { return _wcslwr_s_l(_String, _Size, _Locale); } }
#line 403 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

 __declspec(dllimport) wchar_t* __cdecl _wcslwr_l(  wchar_t *_String,   _locale_t _Locale);
#line 410 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"


__declspec(dllimport) errno_t __cdecl _wcsupr_s(
      wchar_t* _String,
                          size_t   _Size
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s(  wchar_t (&_String)[_Size]) throw() { return _wcsupr_s(_String, _Size); } }
#line 421 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

 __declspec(dllimport) wchar_t* __cdecl _wcsupr( wchar_t *_String);
#line 426 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"


__declspec(dllimport) errno_t __cdecl _wcsupr_s_l(
      wchar_t*  _String,
                          size_t    _Size,
                      _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s_l(  wchar_t (&_String)[_Size],   _locale_t _Locale) throw() { return _wcsupr_s_l(_String, _Size, _Locale); } }
#line 439 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

 __declspec(dllimport) wchar_t* __cdecl _wcsupr_l(  wchar_t *_String,   _locale_t _Locale);
#line 446 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

 

__declspec(dllimport) size_t __cdecl wcsxfrm(
        wchar_t*       _Destination,
                                         wchar_t const* _Source,
                size_t         _MaxCount
    );

 

__declspec(dllimport) size_t __cdecl _wcsxfrm_l(
        wchar_t*       _Destination,
                                         wchar_t const* _Source,
                size_t         _MaxCount,
                                       _locale_t      _Locale
    );

 
__declspec(dllimport) int __cdecl wcscoll(
      wchar_t const* _String1,
      wchar_t const* _String2
    );

 
__declspec(dllimport) int __cdecl _wcscoll_l(
        wchar_t const* _String1,
        wchar_t const* _String2,
      _locale_t      _Locale
    );

 
__declspec(dllimport) int __cdecl _wcsicoll(
      wchar_t const* _String1,
      wchar_t const* _String2
    );

 
__declspec(dllimport) int __cdecl _wcsicoll_l(
        wchar_t const* _String1,
        wchar_t const* _String2,
      _locale_t      _Locale
    );

 
__declspec(dllimport) int __cdecl _wcsncoll(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount
    );

 
__declspec(dllimport) int __cdecl _wcsncoll_l(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount,
                        _locale_t      _Locale
    );

 
__declspec(dllimport) int __cdecl _wcsnicoll(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount
    );

 
__declspec(dllimport) int __cdecl _wcsnicoll_l(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount,
                        _locale_t      _Locale
    );









extern "C++" {

     
    
    inline wchar_t* __cdecl wcschr(  wchar_t* _String, wchar_t _C)
    {
        return const_cast<wchar_t*>(wcschr(static_cast<wchar_t const*>(_String), _C));
    }

     
    inline wchar_t* __cdecl wcspbrk(  wchar_t* _String,   wchar_t const* _Control)
    {
        return const_cast<wchar_t*>(wcspbrk(static_cast<wchar_t const*>(_String), _Control));
    }

     
    inline wchar_t* __cdecl wcsrchr(  wchar_t* _String,   wchar_t _C)
    {
        return const_cast<wchar_t*>(wcsrchr(static_cast<wchar_t const*>(_String), _C));
    }

       
    
    inline wchar_t* __cdecl wcsstr(  wchar_t* _String,   wchar_t const*_SubStr)
    {
        return const_cast<wchar_t*>(wcsstr(static_cast<wchar_t const*>(_String), _SubStr));
    }

}
#line 558 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"









    


#line 571 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

      
    __declspec(dllimport) wchar_t* __cdecl wcsdup(
          wchar_t const* _String
        );

    

#line 580 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

    
    

      
    __declspec(dllimport) int __cdecl wcsicmp(
          wchar_t const* _String1,
          wchar_t const* _String2
        );
    
      
    __declspec(dllimport) int __cdecl wcsnicmp(
          wchar_t const* _String1,
          wchar_t const* _String2,
                                size_t         _MaxCount
        );
    
    
     
    __declspec(dllimport) wchar_t* __cdecl wcsnset(
          wchar_t* _String,
                                  wchar_t  _Value,
                                  size_t   _MaxCount
        );
    
    
     
    __declspec(dllimport) wchar_t* __cdecl wcsrev(
          wchar_t* _String
        );
    
    
     
    __declspec(dllimport) wchar_t* __cdecl wcsset(
          wchar_t* _String,
               wchar_t  _Value
        );
    
    
     
    __declspec(dllimport) wchar_t* __cdecl wcslwr(
          wchar_t* _String
        );
    
    
     
    __declspec(dllimport) wchar_t* __cdecl wcsupr(
          wchar_t* _String
        );
    
      
    __declspec(dllimport) int __cdecl wcsicoll(
          wchar_t const* _String1,
          wchar_t const* _String2
        );

#line 637 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"



} __pragma(pack(pop))

#line 643 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"




__pragma(pack(push, 8)) extern "C" {







     
    __declspec(dllimport) errno_t __cdecl strcpy_s(
          char*       _Destination,
                                  rsize_t     _SizeInBytes,
                                char const* _Source
        );

    
    __declspec(dllimport) errno_t __cdecl strcat_s(
          char*       _Destination,
                                     rsize_t     _SizeInBytes,
                                   char const* _Source
        );

    
    __declspec(dllimport) errno_t __cdecl strerror_s(
          char*  _Buffer,
                                  size_t _SizeInBytes,
                                  int    _ErrorNumber);

    
    __declspec(dllimport) errno_t __cdecl strncat_s(
          char*       _Destination,
                                     rsize_t     _SizeInBytes,
               char const* _Source,
                                     rsize_t     _MaxCount
        );

    
    __declspec(dllimport) errno_t __cdecl strncpy_s(
          char*       _Destination,
                                  rsize_t     _SizeInBytes,
            char const* _Source,
                                  rsize_t     _MaxCount
        );

     
    __declspec(dllimport) char*  __cdecl strtok_s(
                          char*       _String,
                                 char const* _Delimiter,
            char**      _Context
        );

#line 70 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

__declspec(dllimport) void* __cdecl _memccpy(
      void*       _Dst,
                                   void const* _Src,
                                   int         _Val,
                                   size_t      _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strcat_s(char (&_Destination)[_Size],   char const* _Source) throw() { return strcat_s(_Destination, _Size, _Source); } }
#line 83 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"



      char* __cdecl strcat( char *_Destination,  char const* _Source);
#line 91 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

#line 93 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 
int __cdecl strcmp(
      char const* _Str1,
      char const* _Str2
    );

 
__declspec(dllimport) int __cdecl _strcmpi(
      char const* _String1,
      char const* _String2
    );

 
__declspec(dllimport) int __cdecl strcoll(
      char const* _String1,
      char const* _String2
    );

 
__declspec(dllimport) int __cdecl _strcoll_l(
        char const* _String1,
        char const* _String2,
      _locale_t   _Locale
    );

char* __cdecl strcpy(
      char*       _Dest,
                                            char const* _Source
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strcpy_s(  char (&_Destination)[_Size],   char const* _Source) throw() { return strcpy_s(_Destination, _Size, _Source); } }
#line 129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

  char* __cdecl strcpy( char *_Destination,  char const* _Source);
#line 135 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 
__declspec(dllimport) size_t __cdecl strcspn(
      char const* _Str,
      char const* _Control
    );




#line 146 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 
__declspec(dllimport) __declspec(allocator) char* __cdecl _strdup(
      char const* _Source
    );



#line 155 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 
 
  
__declspec(dllimport) char*  __cdecl _strerror(
      char const* _ErrorMessage
    );


__declspec(dllimport) errno_t __cdecl _strerror_s(
      char*       _Buffer,
                              size_t      _SizeInBytes,
                        char const* _ErrorMessage
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strerror_s(char (&_Buffer)[_Size],   char const* _ErrorMessage) throw() { return _strerror_s(_Buffer, _Size, _ErrorMessage); } }
#line 175 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 
  
__declspec(dllimport) char* __cdecl strerror(
      int _ErrorMessage
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strerror_s(char (&_Buffer)[_Size],   int _ErrorMessage) throw() { return strerror_s(_Buffer, _Size, _ErrorMessage); } }
#line 187 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 
__declspec(dllimport) int __cdecl _stricmp(
      char const* _String1,
      char const* _String2
    );

 
__declspec(dllimport) int __cdecl _stricoll(
      char const* _String1,
      char const* _String2
    );

 
__declspec(dllimport) int __cdecl _stricoll_l(
        char const* _String1,
        char const* _String2,
      _locale_t   _Locale
    );

 
__declspec(dllimport) int __cdecl _stricmp_l(
        char const* _String1,
        char const* _String2,
      _locale_t   _Locale
    );

 
size_t __cdecl strlen(
      char const* _Str
    );


__declspec(dllimport) errno_t __cdecl _strlwr_s(
      char*  _String,
                          size_t _Size
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s(  char (&_String)[_Size]) throw() { return _strlwr_s(_String, _Size); } }
#line 229 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 __declspec(dllimport) char* __cdecl _strlwr( char *_String);
#line 234 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"


__declspec(dllimport) errno_t __cdecl _strlwr_s_l(
      char*     _String,
                          size_t    _Size,
                      _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s_l(  char (&_String)[_Size],   _locale_t _Locale) throw() { return _strlwr_s_l(_String, _Size, _Locale); } }
#line 247 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 __declspec(dllimport) char* __cdecl _strlwr_l(  char *_String,   _locale_t _Locale);
#line 254 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

__declspec(dllimport) char* __cdecl strncat(
      char*       _Dest,
        char const* _Source,
                           size_t      _Count
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strncat_s(  char (&_Destination)[_Size],   char const* _Source,   size_t _Count) throw() { return strncat_s(_Destination, _Size, _Source, _Count); } }
#line 267 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 __declspec(dllimport) char* __cdecl strncat(  char *_Destination,   char const* _Source,   size_t _Count);
#line 275 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 
__declspec(dllimport) int __cdecl strncmp(
      char const* _Str1,
      char const* _Str2,
                            size_t      _MaxCount
    );

 
__declspec(dllimport) int __cdecl _strnicmp(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount
    );

 
__declspec(dllimport) int __cdecl _strnicmp_l(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount,
                        _locale_t   _Locale
    );

 
__declspec(dllimport) int __cdecl _strnicoll(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount
    );

 
__declspec(dllimport) int __cdecl _strnicoll_l(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount,
                        _locale_t   _Locale
    );

 
__declspec(dllimport) int __cdecl _strncoll(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount
    );

 
__declspec(dllimport) int __cdecl _strncoll_l(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount,
                        _locale_t   _Locale
    );

__declspec(dllimport) size_t __cdecl __strncnt(
      char const* _String,
                         size_t      _Count
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strncpy_s(char (&_Destination)[_Size],   char const* _Source,   size_t _Count) throw() { return strncpy_s(_Destination, _Size, _Source, _Count); } }
#line 339 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 __declspec(dllimport) char* __cdecl strncpy(    char *_Destination,   char const* _Source,   size_t _Count);
#line 347 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 

#line 353 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

#line 357 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) size_t __cdecl strnlen(
      char const* _String,
                            size_t      _MaxCount
    );



     
    
#line 369 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
    
#line 373 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
    static __inline size_t __cdecl strnlen_s(
          char const* _String,
                                size_t      _MaxCount
        )
    {
        return _String == 0 ? 0 : strnlen(_String, _MaxCount);
    }

#line 382 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

__declspec(dllimport) char* __cdecl _strnset(
      char*  _Dest,
                           int    _Val,
                           size_t _Count
    );


__declspec(dllimport) errno_t __cdecl _strnset_s(
      char*  _String,
                                 size_t _SizeInBytes,
                                 int    _Value,
                                 size_t _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strnset_s(  char (&_Destination)[_Size],   int _Value,   size_t _Count) throw() { return _strnset_s(_Destination, _Size, _Value, _Count); } }
#line 403 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 __declspec(dllimport) char* __cdecl _strnset(  char *_Destination,   int _Value,   size_t _Count);
#line 411 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 
__declspec(dllimport) char const* __cdecl strpbrk(
      char const* _Str,
      char const* _Control
    );

__declspec(dllimport) char* __cdecl _strrev(
      char* _Str
    );


__declspec(dllimport) errno_t __cdecl _strset_s(
      char*  _Destination,
                                     size_t _DestinationSize,
                                     int    _Value
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strset_s(  char (&_Destination)[_Size],   int _Value) throw() { return _strset_s(_Destination, _Size, _Value); } }
#line 434 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

  char* __cdecl _strset( char *_Destination,  int _Value);
#line 440 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

char* __cdecl _strset(
      char* _Dest,
           int   _Value
    );

 
__declspec(dllimport) size_t __cdecl strspn(
      char const* _Str,
      char const* _Control
    );

  
__declspec(dllimport) char* __cdecl strtok(
      char*       _String,
             char const* _Delimiter
    );


__declspec(dllimport) errno_t __cdecl _strupr_s(
      char*  _String,
                          size_t _Size
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s(  char (&_String)[_Size]) throw() { return _strupr_s(_String, _Size); } }
#line 468 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 __declspec(dllimport) char* __cdecl _strupr( char *_String);
#line 473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"


__declspec(dllimport) errno_t __cdecl _strupr_s_l(
      char*     _String,
                          size_t    _Size,
                      _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s_l(  char (&_String)[_Size],   _locale_t _Locale) throw() { return _strupr_s_l(_String, _Size, _Locale); } }
#line 486 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 __declspec(dllimport) char* __cdecl _strupr_l(  char *_String,   _locale_t _Locale);
#line 493 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 

__declspec(dllimport) size_t __cdecl strxfrm(
        char*       _Destination,
                                         char const* _Source,
                 size_t      _MaxCount
    );

 

__declspec(dllimport) size_t __cdecl _strxfrm_l(
        char*       _Destination,
                                         char const* _Source,
                 size_t      _MaxCount,
                                       _locale_t   _Locale
    );




extern "C++"
{
     
    inline char* __cdecl strchr(  char* const _String,   int const _Ch)
    {
        return const_cast<char*>(strchr(static_cast<char const*>(_String), _Ch));
    }

     
    inline char* __cdecl strpbrk(  char* const _String,   char const* const _Control)
    {
        return const_cast<char*>(strpbrk(static_cast<char const*>(_String), _Control));
    }

     
    inline char* __cdecl strrchr(  char* const _String,   int const _Ch)
    {
        return const_cast<char*>(strrchr(static_cast<char const*>(_String), _Ch));
    }

       
    inline char* __cdecl strstr(  char* const _String,   char const* const _SubString)
    {
        return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));
    }
}
#line 541 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"





    


#line 550 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

      
    __declspec(dllimport) char* __cdecl strdup(
          char const* _String
        );

    

#line 559 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

    
      
    __declspec(dllimport) int __cdecl strcmpi(
          char const* _String1,
          char const* _String2
        );

      
    __declspec(dllimport) int __cdecl stricmp(
          char const* _String1,
          char const* _String2
        );

    
    __declspec(dllimport) char* __cdecl strlwr(
          char* _String
        );

      
    __declspec(dllimport) int __cdecl strnicmp(
          char const* _String1,
          char const* _String2,
                                size_t      _MaxCount
        );

    
    __declspec(dllimport) char* __cdecl strnset(
          char*  _String,
                                  int    _Value,
                                  size_t _MaxCount
        );

    
    __declspec(dllimport) char* __cdecl strrev(
          char* _String
        );

    
    char* __cdecl strset(
          char* _String,
               int   _Value);

    
    __declspec(dllimport) char* __cdecl strupr(
          char* _String
        );

#line 608 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"



} __pragma(pack(pop))

#line 614 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
#line 66 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"







#pragma once



#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"








#pragma once



__pragma(pack(push, 8)) extern "C" {








struct tm
{
    int tm_sec;   
    int tm_min;   
    int tm_hour;  
    int tm_mday;  
    int tm_mon;   
    int tm_year;  
    int tm_wday;  
    int tm_yday;  
    int tm_isdst; 
};







  
 
 
__declspec(dllimport) wchar_t* __cdecl _wasctime(
      struct tm const* _Tm
    );

 

__declspec(dllimport) errno_t __cdecl _wasctime_s(
        wchar_t*         _Buffer,
                                          size_t           _SizeInWords,
                                                       struct tm const* _Tm
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl _wasctime_s(  wchar_t (&_Buffer)[_Size],   struct tm const* _Time) throw() { return _wasctime_s(_Buffer, _Size, _Time); } }
#line 62 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"

 

__declspec(dllimport) size_t __cdecl wcsftime(
       wchar_t*         _Buffer,
                               size_t           _SizeInWords,
                             wchar_t const*   _Format,
                               struct tm const* _Tm
    );

 

__declspec(dllimport) size_t __cdecl _wcsftime_l(
       wchar_t*         _Buffer,
                               size_t           _SizeInWords,
                             wchar_t const*   _Format,
                               struct tm const* _Tm,
                           _locale_t        _Locale
    );

 
  
__declspec(dllimport) wchar_t* __cdecl _wctime32(
      __time32_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _wctime32_s(
        wchar_t*          _Buffer,
                                      size_t            _SizeInWords,
                                                       __time32_t const* _Time
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wctime32_s(  wchar_t (&_Buffer)[_Size],   __time32_t const* _Time) throw() { return _wctime32_s(_Buffer, _Size, _Time); } }
#line 100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"

 
 
  
__declspec(dllimport) wchar_t* __cdecl _wctime64(
      __time64_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _wctime64_s(
        wchar_t*          _Buffer,
                                      size_t            _SizeInWords,
                                                       __time64_t const* _Time);

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wctime64_s(  wchar_t (&_Buffer)[_Size],   __time64_t const* _Time) throw() { return _wctime64_s(_Buffer, _Size, _Time); } }
#line 119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"


__declspec(dllimport) errno_t __cdecl _wstrdate_s(
        wchar_t* _Buffer,
                                      size_t   _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wstrdate_s(  wchar_t (&_Buffer)[_Size]) throw() { return _wstrdate_s(_Buffer, _Size); } }
#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"

 __declspec(dllimport)  wchar_t* __cdecl _wstrdate( wchar_t *_Buffer);
#line 135 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"


__declspec(dllimport) errno_t __cdecl _wstrtime_s(
        wchar_t* _Buffer,
                                      size_t   _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wstrtime_s(  wchar_t (&_Buffer)[_Size]) throw() { return _wstrtime_s(_Buffer, _Size); } }
#line 146 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"

 __declspec(dllimport)  wchar_t* __cdecl _wstrtime( wchar_t *_Buffer);
#line 151 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"









    #pragma warning(push)
    #pragma warning(disable: 4996)

    




















         
        static __inline wchar_t * __cdecl _wctime(
              time_t const* const _Time)
        {
            return _wctime64(_Time);
        }

        
        static __inline errno_t __cdecl _wctime_s(
                  wchar_t*      const _Buffer,
                                                             size_t        const _SizeInWords,
                                                             time_t const* const _Time
            )
        {
            return _wctime64_s(_Buffer, _SizeInWords, _Time);
        }

    #line 202 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"

    #pragma warning(pop)
#line 205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"



} __pragma(pack(pop))
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"

__pragma(pack(push, 8)) extern "C" {








typedef long clock_t;

struct _timespec32
{
    __time32_t tv_sec;
    long       tv_nsec;
};

struct _timespec64
{
    __time64_t tv_sec;
    long       tv_nsec;
};


    struct timespec
    {
        time_t tv_sec;  
        long   tv_nsec; 
    };
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
















  
__declspec(dllimport) int* __cdecl __daylight(void);




  
__declspec(dllimport) long* __cdecl __dstbias(void);




  
__declspec(dllimport) long* __cdecl __timezone(void);




    
__declspec(dllimport) char** __cdecl __tzname(void);



  
__declspec(dllimport) errno_t __cdecl _get_daylight(
      int* _Daylight
    );

 
__declspec(dllimport) errno_t __cdecl _get_dstbias(
      long* _DaylightSavingsBias
    );

  
__declspec(dllimport) errno_t __cdecl _get_timezone(
      long* _TimeZone
    );

 
__declspec(dllimport) errno_t __cdecl _get_tzname(
                             size_t* _ReturnValue,
      char*   _Buffer,
                              size_t  _SizeInBytes,
                              int     _Index
    );








 
 
  
__declspec(dllimport) char* __cdecl asctime(
      struct tm const* _Tm
    );


     
    
    __declspec(dllimport) errno_t __cdecl asctime_s(
            char*            _Buffer,
                                            size_t           _SizeInBytes,
                                                         struct tm const* _Tm
        );
#line 129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"

extern "C++" { template <size_t _Size> inline errno_t __cdecl asctime_s(  char (&_Buffer)[_Size],   struct tm const* _Time) throw() { return asctime_s(_Buffer, _Size, _Time); } }
#line 135 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"

 
__declspec(dllimport) clock_t __cdecl clock(void);

 
 
  
__declspec(dllimport) char* __cdecl _ctime32(
      __time32_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _ctime32_s(
        char*             _Buffer,
                                        size_t            _SizeInBytes,
                                                     __time32_t const* _Time
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ctime32_s(  char (&_Buffer)[_Size],   __time32_t const* _Time) throw() { return _ctime32_s(_Buffer, _Size, _Time); } }
#line 158 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"

 
 
  
__declspec(dllimport) char* __cdecl _ctime64(
      __time64_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _ctime64_s(
        char*             _Buffer,
                                          size_t            _SizeInBytes,
                                                       __time64_t const* _Time
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ctime64_s(  char (&_Buffer)[_Size],   __time64_t const* _Time) throw() { return _ctime64_s(_Buffer, _Size, _Time); } }
#line 178 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"

 
__declspec(dllimport) double __cdecl _difftime32(
      __time32_t _Time1,
      __time32_t _Time2
    );

 
__declspec(dllimport) double __cdecl _difftime64(
      __time64_t _Time1,
      __time64_t _Time2
    );

 
  
__declspec(dllimport) struct tm* __cdecl _gmtime32(
      __time32_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _gmtime32_s(
      struct tm*        _Tm,
       __time32_t const* _Time
    );

 
  
__declspec(dllimport) struct tm* __cdecl _gmtime64(
      __time64_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _gmtime64_s(
      struct tm*        _Tm,
       __time64_t const* _Time
    );

 
  
__declspec(dllimport) struct tm* __cdecl _localtime32(
      __time32_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _localtime32_s(
      struct tm*        _Tm,
       __time32_t const* _Time
    );

 
  
__declspec(dllimport) struct tm* __cdecl _localtime64(
      __time64_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _localtime64_s(
      struct tm*        _Tm,
       __time64_t const* _Time
    );

 
__declspec(dllimport) __time32_t __cdecl _mkgmtime32(
      struct tm* _Tm
    );

 
__declspec(dllimport) __time64_t __cdecl _mkgmtime64(
      struct tm* _Tm
    );


__declspec(dllimport) __time32_t __cdecl _mktime32(
      struct tm* _Tm
    );


__declspec(dllimport) __time64_t __cdecl _mktime64(
      struct tm* _Tm
    );

 

__declspec(dllimport) size_t __cdecl strftime(
       char*            _Buffer,
                               size_t           _SizeInBytes,
        char const*      _Format,
                               struct tm const* _Tm
    );

 

__declspec(dllimport) size_t __cdecl _strftime_l(
           char*            _Buffer,
                               size_t           _MaxSize,
        char const*      _Format,
                               struct tm const* _Tm,
                           _locale_t        _Locale
    );


__declspec(dllimport) errno_t __cdecl _strdate_s(
        char*  _Buffer,
                                    size_t _SizeInBytes
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strdate_s(  char (&_Buffer)[_Size]) throw() { return _strdate_s(_Buffer, _Size); } }
#line 288 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"

 __declspec(dllimport)  char* __cdecl _strdate( char *_Buffer);
#line 293 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"


__declspec(dllimport) errno_t __cdecl _strtime_s(
        char*  _Buffer,
                                    size_t _SizeInBytes
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strtime_s(  char (&_Buffer)[_Size]) throw() { return _strtime_s(_Buffer, _Size); } }
#line 304 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"

 __declspec(dllimport) char* __cdecl _strtime( char *_Buffer);
#line 309 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"

__declspec(dllimport) __time32_t __cdecl _time32(
      __time32_t* _Time
    );

__declspec(dllimport) __time64_t __cdecl _time64(
      __time64_t* _Time
    );

 
 
__declspec(dllimport) int __cdecl _timespec32_get(
      struct _timespec32* _Ts,
       int                 _Base
    );

 
 
__declspec(dllimport) int __cdecl _timespec64_get(
      struct _timespec64* _Ts,
       int                 _Base
    );










    __declspec(dllimport) void __cdecl _tzset(void);

    
    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "GetLocalTime" " " "instead. See online help for details."))
    __declspec(dllimport) unsigned __cdecl _getsystime(
          struct tm* _Tm
        );

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "SetLocalTime" " " "instead. See online help for details."))
    __declspec(dllimport) unsigned __cdecl _setsystime(
          struct tm* _Tm,
          unsigned   _Milliseconds
        );

#line 356 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"










    











































































































          
        static __inline char* __cdecl ctime(
              time_t const* const _Time
            )
        {
            #pragma warning(push)
            #pragma warning(disable: 4996)
            return _ctime64(_Time);
            #pragma warning(pop)
        }

         
        static __inline double __cdecl difftime(
              time_t const _Time1,
              time_t const _Time2
            )
        {
            return _difftime64(_Time1, _Time2);
        }

          
        static __inline struct tm* __cdecl gmtime(
              time_t const* const _Time)
        {
            #pragma warning(push)
            #pragma warning(disable: 4996)
            return _gmtime64(_Time);
            #pragma warning(pop)
        }

        
        static __inline struct tm* __cdecl localtime(
              time_t const* const _Time
            )
        {
            #pragma warning(push)
            #pragma warning(disable: 4996)
            return _localtime64(_Time);
            #pragma warning(pop)
        }

         
        static __inline time_t __cdecl _mkgmtime(
              struct tm* const _Tm
            )
        {
            return _mkgmtime64(_Tm);
        }

        
        static __inline time_t __cdecl mktime(
              struct tm* const _Tm
            )
        {
            return _mktime64(_Tm);
        }

        static __inline time_t __cdecl time(
              time_t* const _Time
            )
        {
            return _time64(_Time);
        }

         
        static __inline int __cdecl timespec_get(
              struct timespec* const _Ts,
               int              const _Base
            )
        {
            return _timespec64_get((struct _timespec64*)_Ts, _Base); 
        }

        
            
            static __inline errno_t __cdecl ctime_s(
                    char*         const _Buffer,
                                                    size_t        const _SizeInBytes,
                                                                 time_t const* const _Time
                )
            {
                return _ctime64_s(_Buffer, _SizeInBytes, _Time);
            }

            
            static __inline errno_t __cdecl gmtime_s(
                  struct tm*    const _Tm,
                   time_t const* const _Time
                )
            {
                return _gmtime64_s(_Tm, _Time);
            }

            
            static __inline errno_t __cdecl localtime_s(
                  struct tm*    const _Tm,
                   time_t const* const _Time
                )
            {
                return _localtime64_s(_Tm, _Time);
            }
        #line 576 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"

    #line 578 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"

#line 580 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"










    

    
         __declspec(dllimport) void __cdecl tzset(void);
    #line 595 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"

#line 597 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"



} __pragma(pack(pop))
#line 67 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"

extern "C"
{
#line 71 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"
extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) clock_t __cdecl clock(void) ;
extern         __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) void*   __cdecl memset(void*, int, size_t) ;
extern         __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) void*   __cdecl memcpy(void*, const void*, size_t) ;

}
#line 77 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"












#line 90 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\new"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"

#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstddef"

#pragma once










 
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstddef"

 
namespace std {
using :: ptrdiff_t; using :: size_t;
}
 #line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstddef"

 
namespace std {
typedef double max_align_t;	
}

using ::std:: max_align_t;	
 #line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstddef"
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstddef"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"

#pragma once










 #line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"







#pragma once



#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"








#pragma once



__pragma(pack(push, 8)) extern "C" {





































#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"

     
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _calloc_base(
      size_t _Count,
      size_t _Size
    );

     
__declspec(dllimport)  __declspec(allocator) __declspec(restrict)
void* __cdecl calloc(
       size_t _Count,
       size_t _Size
    );

 
__declspec(dllimport) int __cdecl _callnewh(
      size_t _Size
    );

     
__declspec(dllimport) __declspec(allocator)
void* __cdecl _expand(
                void*  _Block,
       size_t _Size
    );

__declspec(dllimport)
void __cdecl _free_base(
        void* _Block
    );

__declspec(dllimport)
void __cdecl free(
        void* _Block
    );

     
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _malloc_base(
      size_t _Size
    );

     
__declspec(dllimport) __declspec(allocator)  __declspec(restrict)
void* __cdecl malloc(
       size_t _Size
    );

 
__declspec(dllimport)
size_t __cdecl _msize(
      void* _Block
    );

       
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _realloc_base(
         void*  _Block,
                                 size_t _Size
    );

       
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl realloc(
        void*  _Block,
              size_t _Size
    );

       
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _recalloc(
        void*  _Block,
              size_t _Count,
              size_t _Size
    );

__declspec(dllimport)
void __cdecl _aligned_free(
        void* _Block
    );

     
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_malloc(
       size_t _Size,
                         size_t _Alignment
    );

     
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_malloc(
       size_t _Size,
                         size_t _Alignment,
                         size_t _Offset
    );

 
__declspec(dllimport)
size_t __cdecl _aligned_msize(
      void*  _Block,
               size_t _Alignment,
               size_t _Offset
    );

       
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_realloc(
        void*  _Block,
              size_t _Size,
                                size_t _Alignment,
                                size_t _Offset
    );

       
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_recalloc(
        void*  _Block,
              size_t _Count,
              size_t _Size,
                                size_t _Alignment,
                                size_t _Offset
    );

       
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_realloc(
        void*  _Block,
              size_t _Size,
                                size_t _Alignment
    );

       
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_recalloc(
        void*  _Block,
              size_t _Count,
              size_t _Size,
                                size_t _Alignment
    );


















#line 211 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"



} __pragma(pack(pop))
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"










#pragma once




__pragma(pack(push, 8)) extern "C" {





     
    __declspec(dllimport) void* __cdecl bsearch_s(
                                                        void const* _Key,
          void const* _Base,
                                                        rsize_t     _NumOfElements,
                                                        rsize_t     _SizeOfElements,
          int (__cdecl* _PtFuncCompare)(void*, void const*, void const*),
                                                        void*       _Context
        );

    __declspec(dllimport) void __cdecl qsort_s(
          void*   _Base,
                                                             rsize_t _NumOfElements,
                                                             rsize_t _SizeOfElements,
          int (__cdecl* _PtFuncCompare)(void*, void const*, void const*),
                                                             void*   _Context
        );

#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"



 
__declspec(dllimport) void* __cdecl bsearch(
                                                    void const* _Key,
      void const* _Base,
                                                    size_t      _NumOfElements,
                                                    size_t      _SizeOfElements,
      int (__cdecl* _PtFuncCompare)(void const*, void const*)
    );

__declspec(dllimport) void __cdecl qsort(
      void*  _Base,
                                                         size_t _NumOfElements,
                                                         size_t _SizeOfElements,
      int (__cdecl* _PtFuncCompare)(void const*, void const*)
    );

 
__declspec(dllimport) void* __cdecl _lfind_s(
                                                       void const*   _Key,
      void const*   _Base,
                                                    unsigned int* _NumOfElements,
                                                       size_t        _SizeOfElements,
      int (__cdecl* _PtFuncCompare)(void*, void const*, void const*), 
                                                       void*         _Context
    );

 
__declspec(dllimport) void* __cdecl _lfind(
                                                       void const*   _Key,
      void const*   _Base,
                                                    unsigned int* _NumOfElements,
                                                       unsigned int  _SizeOfElements,
      int (__cdecl* _PtFuncCompare)(void const*, void const*)
    );

 
__declspec(dllimport) void* __cdecl _lsearch_s(
                                                             void const*   _Key,
      void*         _Base,
                                                          unsigned int* _NumOfElements,
                                                             size_t        _SizeOfElements,
      int (__cdecl* _PtFuncCompare)(void*, void const*, void const*),
                                                             void*         _Context
    );

 
__declspec(dllimport) void* __cdecl _lsearch(
                                                             void const*   _Key,
      void*         _Base,
                                                          unsigned int* _NumOfElements,
                                                             unsigned int  _SizeOfElements,
      int (__cdecl* _PtFuncCompare)(void const*, void const*)
    );

















































































#line 179 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"





      
    __declspec(dllimport) void* __cdecl lfind(
                                                           void const*   _Key,
          void const*   _Base,
                                                        unsigned int* _NumOfElements,
                                                           unsigned int  _SizeOfElements,
          int (__cdecl* _PtFuncCompare)(void const*, void const*)
        );

      
    __declspec(dllimport) void* __cdecl lsearch(
                                                                void const*   _Key,
          void*         _Base,
                                                             unsigned int* _NumOfElements,
                                                                unsigned int  _SizeOfElements,
          int (__cdecl* _PtFuncCompare)(void const*, void const*)
        );

#line 203 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"



} __pragma(pack(pop))
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"








#pragma once



__pragma(pack(push, 8)) extern "C" {
































 

__declspec(dllimport) errno_t __cdecl _itow_s(
                              int      _Value,
      wchar_t* _Buffer,
                              size_t   _BufferCount,
                              int      _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _itow_s(  int _Value, wchar_t (&_Buffer)[_Size],   int _Radix) throw() { return _itow_s(_Value, _Buffer, _Size, _Radix); } }
#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"

 __declspec(dllimport) wchar_t* __cdecl _itow( int _Value,   wchar_t *_Buffer,  int _Radix);
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"

 

__declspec(dllimport) errno_t __cdecl _ltow_s(
                              long     _Value,
      wchar_t* _Buffer,
                              size_t   _BufferCount,
                              int      _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltow_s(  long _Value, wchar_t (&_Buffer)[_Size],   int _Radix) throw() { return _ltow_s(_Value, _Buffer, _Size, _Radix); } }
#line 84 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"

 __declspec(dllimport) wchar_t* __cdecl _ltow( long _Value,   wchar_t *_Buffer,  int _Radix);
#line 91 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"


__declspec(dllimport) errno_t __cdecl _ultow_s(
                              unsigned long _Value,
      wchar_t*      _Buffer,
                              size_t        _BufferCount,
                              int           _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultow_s(  unsigned long _Value, wchar_t (&_Buffer)[_Size],   int _Radix) throw() { return _ultow_s(_Value, _Buffer, _Size, _Radix); } }
#line 106 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"

 __declspec(dllimport) wchar_t* __cdecl _ultow( unsigned long _Value,   wchar_t *_Buffer,  int _Radix);
#line 113 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"

 
__declspec(dllimport) double __cdecl wcstod(
                        wchar_t const* _String,
        wchar_t**      _EndPtr
    );

 
__declspec(dllimport) double __cdecl _wcstod_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                      _locale_t      _Locale
    );

 
__declspec(dllimport) long __cdecl wcstol(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix
    );

 
__declspec(dllimport) long __cdecl _wcstol_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix,
                      _locale_t      _Locale
    );

 
__declspec(dllimport) long long __cdecl wcstoll(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix
    );

 
__declspec(dllimport) long long __cdecl _wcstoll_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix,
                      _locale_t      _Locale
    );

 
__declspec(dllimport) unsigned long __cdecl wcstoul(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix
    );

 
__declspec(dllimport) unsigned long __cdecl _wcstoul_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix,
                      _locale_t      _Locale
    );

 
__declspec(dllimport) unsigned long long __cdecl wcstoull(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix
    );

 
__declspec(dllimport) unsigned long long __cdecl _wcstoull_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix,
                      _locale_t      _Locale
    );

 
__declspec(dllimport) long double __cdecl wcstold(
                        wchar_t const* _String,
        wchar_t**      _EndPtr
    );

 
__declspec(dllimport) long double __cdecl _wcstold_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                      _locale_t      _Locale
    );

 
__declspec(dllimport) float __cdecl wcstof(
                        wchar_t const* _String,
        wchar_t**      _EndPtr
    );

 
__declspec(dllimport) float __cdecl _wcstof_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                      _locale_t      _Locale
    );

 
__declspec(dllimport) double __cdecl _wtof(
      wchar_t const* _String
    );

 
__declspec(dllimport) double __cdecl _wtof_l(
        wchar_t const* _String,
      _locale_t      _Locale
    );

 
__declspec(dllimport) int __cdecl _wtoi(
      wchar_t const* _String
    );

 
__declspec(dllimport) int __cdecl _wtoi_l(
        wchar_t const* _String,
      _locale_t      _Locale
    );

 
__declspec(dllimport) long __cdecl _wtol(
      wchar_t const* _String
    );

 
__declspec(dllimport) long __cdecl _wtol_l(
        wchar_t const* _String,
      _locale_t      _Locale
    );

 
__declspec(dllimport) long long __cdecl _wtoll(
      wchar_t const* _String
    );

 
__declspec(dllimport) long long __cdecl _wtoll_l(
        wchar_t const* _String,
      _locale_t      _Locale
    );


__declspec(dllimport) errno_t __cdecl _i64tow_s(
                              __int64  _Value,
      wchar_t* _Buffer,
                              size_t   _BufferCount,
                              int      _Radix
    );


__declspec(dllimport) wchar_t* __cdecl _i64tow(
                        __int64  _Value,
        wchar_t* _Buffer,
                        int      _Radix
    );


__declspec(dllimport) errno_t __cdecl _ui64tow_s(
                              unsigned __int64 _Value,
      wchar_t*         _Buffer,
                              size_t           _BufferCount,
                              int              _Radix
    );


__declspec(dllimport) wchar_t* __cdecl _ui64tow(
                        unsigned __int64 _Value,
        wchar_t*         _Buffer,
                        int              _Radix
    );

 
__declspec(dllimport) __int64 __cdecl _wtoi64(
      wchar_t const* _String
    );

 
__declspec(dllimport) __int64 __cdecl _wtoi64_l(
        wchar_t const* _String,
      _locale_t      _Locale
    );

 
__declspec(dllimport) __int64 __cdecl _wcstoi64(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix
    );

 
__declspec(dllimport) __int64 __cdecl _wcstoi64_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix,
                      _locale_t      _Locale
    );

 
__declspec(dllimport) unsigned __int64 __cdecl _wcstoui64(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix
    );

 
__declspec(dllimport) unsigned __int64 __cdecl _wcstoui64_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix,
                      _locale_t      _Locale
    );




 
 
__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wfullpath(
      wchar_t*       _Buffer,
                                wchar_t const* _Path,
                                  size_t         _BufferCount
    );




__declspec(dllimport) errno_t __cdecl _wmakepath_s(
      wchar_t*       _Buffer,
                              size_t         _BufferCount,
                        wchar_t const* _Drive,
                        wchar_t const* _Dir,
                        wchar_t const* _Filename,
                        wchar_t const* _Ext
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wmakepath_s(wchar_t (&_Buffer)[_Size],   wchar_t const* _Drive,   wchar_t const* _Dir,   wchar_t const* _Filename,   wchar_t const* _Ext) throw() { return _wmakepath_s(_Buffer, _Size, _Drive, _Dir, _Filename, _Ext); } }
#line 359 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"

 __declspec(dllimport) void __cdecl _wmakepath(  wchar_t *_Buffer,  wchar_t const* _Drive,  wchar_t const* _Dir,  wchar_t const* _Filename,  wchar_t const* _Ext);
#line 368 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"

__declspec(dllimport) void __cdecl _wperror(
      wchar_t const* _ErrMsg
    );


__declspec(dllimport) void __cdecl _wsplitpath(
                        wchar_t const* _FullPath,
        wchar_t*       _Drive,
        wchar_t*       _Dir,
        wchar_t*       _Filename,
        wchar_t*       _Ext
    );

__declspec(dllimport) errno_t __cdecl _wsplitpath_s(
                                  wchar_t const* _FullPath,
         wchar_t*       _Drive,
                                    size_t         _DriveCount,
           wchar_t*       _Dir,
                                    size_t         _DirCount,
      wchar_t*       _Filename,
                                    size_t         _FilenameCount,
           wchar_t*       _Ext,
                                    size_t         _ExtCount
    );

extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _wsplitpath_s(   wchar_t const* _Path,   wchar_t (&_Drive)[_DriveSize],   wchar_t (&_Dir)[_DirSize],   wchar_t (&_Name)[_NameSize],   wchar_t (&_Ext)[_ExtSize] ) throw() { return _wsplitpath_s(_Path, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }
#line 398 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"





    
    

    
    __declspec(dllimport) errno_t __cdecl _wdupenv_s(
            wchar_t**      _Buffer,
                                                                            size_t*        _BufferCount,
                                                                               wchar_t const* _VarName
        );

    

      
    __declspec(dllimport) wchar_t* __cdecl _wgetenv(
          wchar_t const* _VarName
        );

     
    
    __declspec(dllimport) errno_t __cdecl _wgetenv_s(
                                     size_t*        _RequiredCount,
          wchar_t*       _Buffer,
                                      size_t         _BufferCount,
                                    wchar_t const* _VarName
        );

    extern "C++" { template <size_t _Size> inline   errno_t __cdecl _wgetenv_s(  size_t* _RequiredCount, wchar_t (&_Buffer)[_Size],   wchar_t const* _VarName) throw() { return _wgetenv_s(_RequiredCount, _Buffer, _Size, _VarName); } }
#line 436 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"

     
    __declspec(dllimport) int __cdecl _wputenv(
          wchar_t const* _EnvString
        );

    
    __declspec(dllimport) errno_t __cdecl _wputenv_s(
          wchar_t const* _Name,
          wchar_t const* _Value
        );
    
    __declspec(dllimport) errno_t __cdecl _wsearchenv_s(
                                wchar_t const* _Filename,
                                wchar_t const* _VarName,
          wchar_t*       _Buffer,
                                  size_t         _BufferCount
        );
    
    extern "C++" { template <size_t _Size> inline errno_t __cdecl _wsearchenv_s(  wchar_t const* _Filename,   wchar_t const* _VarName, wchar_t (&_ResultPath)[_Size]) throw() { return _wsearchenv_s(_Filename, _VarName, _ResultPath, _Size); } }
#line 461 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
    
     __declspec(dllimport) void __cdecl _wsearchenv( wchar_t const* _Filename,  wchar_t const* _VarName,   wchar_t *_ResultPath);
#line 468 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"

    __declspec(dllimport) int __cdecl _wsystem(
          wchar_t const* _Command
        );

#line 474 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"



} __pragma(pack(pop))
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"


__pragma(pack(push, 8)) extern "C" {




    
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"









__declspec(dllimport) void __cdecl _swab(
        char* _Buf1,
        char* _Buf2,
                                                                  int   _SizeInBytes
    );












__declspec(dllimport) __declspec(noreturn) void __cdecl exit(  int _Code);
__declspec(dllimport) __declspec(noreturn) void __cdecl _exit(  int _Code);
__declspec(dllimport) __declspec(noreturn) void __cdecl _Exit(  int _Code);
__declspec(dllimport) __declspec(noreturn) void __cdecl quick_exit(  int _Code);
__declspec(dllimport) __declspec(noreturn) void __cdecl abort(void);





__declspec(dllimport) unsigned int __cdecl _set_abort_behavior(
      unsigned int _Flags,
      unsigned int _Mask
    );




    typedef int (__cdecl* _onexit_t)(void);



#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"






    
    
#line 82 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

























































    int       __cdecl atexit(void (__cdecl*)(void));
    _onexit_t __cdecl _onexit(  _onexit_t _Func);
#line 142 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

int __cdecl at_quick_exit(void (__cdecl*)(void));









    
    typedef void (__cdecl* _purecall_handler)(void);

    
    typedef void (__cdecl* _invalid_parameter_handler)(
        wchar_t const*,
        wchar_t const*,
        wchar_t const*, 
        unsigned int,
        uintptr_t
        );

    
    __declspec(dllimport) _purecall_handler __cdecl _set_purecall_handler(
          _purecall_handler _Handler
        );

    __declspec(dllimport) _purecall_handler __cdecl _get_purecall_handler(void);

    
    __declspec(dllimport) _invalid_parameter_handler __cdecl _set_invalid_parameter_handler(
          _invalid_parameter_handler _Handler
        );

    __declspec(dllimport) _invalid_parameter_handler __cdecl _get_invalid_parameter_handler(void);

    __declspec(dllimport) _invalid_parameter_handler __cdecl _set_thread_local_invalid_parameter_handler(
          _invalid_parameter_handler _Handler
        );

    __declspec(dllimport) _invalid_parameter_handler __cdecl _get_thread_local_invalid_parameter_handler(void);
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"












#line 198 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"









 __declspec(dllimport) int __cdecl _set_error_mode(  int _Mode);



__declspec(dllimport) int* __cdecl _errno(void);


__declspec(dllimport) errno_t __cdecl _set_errno(  int _Value);
__declspec(dllimport) errno_t __cdecl _get_errno(  int* _Value);

__declspec(dllimport) unsigned long* __cdecl __doserrno(void);


__declspec(dllimport) errno_t __cdecl _set_doserrno(  unsigned long _Value);
__declspec(dllimport) errno_t __cdecl _get_doserrno(  unsigned long * _Value);


__declspec(dllimport)  char** __cdecl __sys_errlist(void);


__declspec(dllimport)  int * __cdecl __sys_nerr(void);


__declspec(dllimport) void __cdecl perror(  char const* _ErrMsg);




 __declspec(dllimport) char**    __cdecl __p__pgmptr (void);
 __declspec(dllimport) wchar_t** __cdecl __p__wpgmptr(void);
 __declspec(dllimport) int*      __cdecl __p__fmode  (void);






    
    
    
#line 248 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

 
__declspec(dllimport) errno_t __cdecl _get_pgmptr (  char**    _Value);

 
__declspec(dllimport) errno_t __cdecl _get_wpgmptr(  wchar_t** _Value);

__declspec(dllimport) errno_t __cdecl _set_fmode  (               int       _Mode );

__declspec(dllimport) errno_t __cdecl _get_fmode  (              int*      _PMode);








typedef struct _div_t
{
    int quot;
    int rem;
} div_t;

typedef struct _ldiv_t
{
    long quot;
    long rem;
} ldiv_t;

typedef struct _lldiv_t
{
    long long quot;
    long long rem;
} lldiv_t;

  int       __cdecl abs   (  int       _Number);
  long      __cdecl labs  (  long      _Number);
  long long __cdecl llabs (  long long _Number);
  __int64   __cdecl _abs64(  __int64   _Number);

  unsigned short   __cdecl _byteswap_ushort(  unsigned short   _Number);
  unsigned long    __cdecl _byteswap_ulong (  unsigned long    _Number);
  unsigned __int64 __cdecl _byteswap_uint64(  unsigned __int64 _Number);

  __declspec(dllimport) div_t   __cdecl div  (  int       _Numerator,   int       _Denominator);
  __declspec(dllimport) ldiv_t  __cdecl ldiv (  long      _Numerator,   long      _Denominator);
  __declspec(dllimport) lldiv_t __cdecl lldiv(  long long _Numerator,   long long _Denominator);



#pragma warning (push)
#pragma warning (disable:6540) 

unsigned int __cdecl _rotl(
      unsigned int _Value,
      int          _Shift
    );

 
unsigned long __cdecl _lrotl(
      unsigned long _Value,
      int           _Shift
    );

unsigned __int64 __cdecl _rotl64(
      unsigned __int64 _Value,
      int              _Shift
    );

unsigned int __cdecl _rotr(
      unsigned int _Value,
      int          _Shift
    );

 
unsigned long __cdecl _lrotr(
      unsigned long _Value,
      int           _Shift
    );

unsigned __int64 __cdecl _rotr64(
      unsigned __int64 _Value,
      int              _Shift
    );

#pragma warning (pop)






__declspec(dllimport) void __cdecl srand(  unsigned int _Seed);

  __declspec(dllimport) int __cdecl rand(void);



#line 348 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"




extern "C++"
{
    inline long abs(long const _X) throw()
    {
        return labs(_X);
    }

    inline long long abs(long long const _X) throw()
    {
        return llabs(_X);
    }

    inline ldiv_t div(long const _A1, long const _A2) throw()
    {
        return ldiv(_A1, _A2);
    }

    inline lldiv_t div(long long const _A1, long long const _A2) throw()
    {
        return lldiv(_A1, _A2);
    }
}
#line 375 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"










    #pragma pack(push, 4)
    typedef struct
    {
        unsigned char ld[10];
    } _LDOUBLE;
    #pragma pack(pop)

    











#line 405 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

typedef struct
{
    double x;
} _CRT_DOUBLE;

typedef struct
{
    float f;
} _CRT_FLOAT;





typedef struct
{
    long double x;
} _LONGDOUBLE;



#pragma pack(push, 4)
typedef struct
{
    unsigned char ld12[12];
} _LDBL12;
#pragma pack(pop)








                     __declspec(dllimport) double    __cdecl atof   (  char const* _String);
   __declspec(dllimport) int       __cdecl atoi   (  char const* _String);
                     __declspec(dllimport) long      __cdecl atol   (  char const* _String);
                     __declspec(dllimport) long long __cdecl atoll  (  char const* _String);
                     __declspec(dllimport) __int64   __cdecl _atoi64(  char const* _String);

  __declspec(dllimport) double    __cdecl _atof_l  (  char const* _String,   _locale_t _Locale);
  __declspec(dllimport) int       __cdecl _atoi_l  (  char const* _String,   _locale_t _Locale);
  __declspec(dllimport) long      __cdecl _atol_l  (  char const* _String,   _locale_t _Locale);
  __declspec(dllimport) long long __cdecl _atoll_l (  char const* _String,   _locale_t _Locale);
  __declspec(dllimport) __int64   __cdecl _atoi64_l(  char const* _String,   _locale_t _Locale);

  __declspec(dllimport) int __cdecl _atoflt (  _CRT_FLOAT*  _Result,   char const* _String);
  __declspec(dllimport) int __cdecl _atodbl (  _CRT_DOUBLE* _Result,   char*       _String);
  __declspec(dllimport) int __cdecl _atoldbl(  _LDOUBLE*    _Result,   char*       _String);

 
__declspec(dllimport) int __cdecl _atoflt_l(
         _CRT_FLOAT* _Result,
        char const* _String,
      _locale_t   _Locale
    );

 
__declspec(dllimport) int __cdecl _atodbl_l(
         _CRT_DOUBLE* _Result,
        char*        _String,
      _locale_t    _Locale
    );


 
__declspec(dllimport) int __cdecl _atoldbl_l(
         _LDOUBLE* _Result,
        char*     _String,
      _locale_t _Locale
    );

 
__declspec(dllimport) float __cdecl strtof(
                        char const* _String,
        char**      _EndPtr
    );

 
__declspec(dllimport) float __cdecl _strtof_l(
                        char const* _String,
        char**      _EndPtr,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) double __cdecl strtod(
                        char const* _String,
        char**      _EndPtr
    );

 
__declspec(dllimport) double __cdecl _strtod_l(
                        char const* _String,
        char**      _EndPtr,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) long double __cdecl strtold(
                        char const* _String,
        char**      _EndPtr
    );

 
__declspec(dllimport) long double __cdecl _strtold_l(
                        char const* _String,
        char**      _EndPtr,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) long __cdecl strtol(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
__declspec(dllimport) long __cdecl _strtol_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) long long __cdecl strtoll(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
__declspec(dllimport) long long __cdecl _strtoll_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) unsigned long __cdecl strtoul(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
__declspec(dllimport) unsigned long __cdecl _strtoul_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) unsigned long long __cdecl strtoull(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
__declspec(dllimport) unsigned long long __cdecl _strtoull_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) __int64 __cdecl _strtoi64(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
__declspec(dllimport) __int64 __cdecl _strtoi64_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) unsigned __int64 __cdecl _strtoui64(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
__declspec(dllimport) unsigned __int64 __cdecl _strtoui64_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );








 

__declspec(dllimport) errno_t __cdecl _itoa_s(
                              int    _Value,
      char*  _Buffer,
                              size_t _BufferCount,
                              int    _Radix
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl _itoa_s(  int _Value, char (&_Buffer)[_Size],   int _Radix) throw() { return _itoa_s(_Value, _Buffer, _Size, _Radix); } }
#line 631 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

 __declspec(dllimport) char* __cdecl _itoa( int _Value,   char *_Buffer,  int _Radix);
#line 638 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

 

__declspec(dllimport) errno_t __cdecl _ltoa_s(
                              long   _Value,
      char*  _Buffer,
                              size_t _BufferCount,
                              int    _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltoa_s(  long _Value, char (&_Buffer)[_Size],   int _Radix) throw() { return _ltoa_s(_Value, _Buffer, _Size, _Radix); } }
#line 654 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

 __declspec(dllimport) char* __cdecl _ltoa( long _Value,   char *_Buffer,  int _Radix);
#line 661 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

 

__declspec(dllimport) errno_t __cdecl _ultoa_s(
                              unsigned long _Value,
      char*         _Buffer,
                              size_t        _BufferCount,
                              int           _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultoa_s(  unsigned long _Value, char (&_Buffer)[_Size],   int _Radix) throw() { return _ultoa_s(_Value, _Buffer, _Size, _Radix); } }
#line 677 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

 __declspec(dllimport) char* __cdecl _ultoa( unsigned long _Value,   char *_Buffer,  int _Radix);
#line 684 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

 

__declspec(dllimport) errno_t __cdecl _i64toa_s(
                              __int64 _Value,
      char*   _Buffer,
                              size_t  _BufferCount,
                              int     _Radix
    );

 

__declspec(dllimport) char* __cdecl _i64toa(
                        __int64 _Value,
        char*   _Buffer,
                        int     _Radix
    );

 

__declspec(dllimport) errno_t __cdecl _ui64toa_s(
                              unsigned __int64 _Value,
      char*            _Buffer,
                              size_t           _BufferCount,
                              int              _Radix
    );


__declspec(dllimport) char* __cdecl _ui64toa(
                        unsigned __int64 _Value,
        char*            _Buffer,
                        int              _Radix
    );













 

__declspec(dllimport) errno_t __cdecl _ecvt_s(
      char* _Buffer,
       size_t                       _BufferCount,
       double                       _Value,
       int                          _DigitCount,
      int*                         _PtDec,
      int*                         _PtSign
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ecvt_s(char (&_Buffer)[_Size],   double _Value,   int _DigitCount,   int* _PtDec,   int* _PtSign) throw() { return _ecvt_s(_Buffer, _Size, _Value, _DigitCount, _PtDec, _PtSign); } }
#line 749 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

  
__declspec(dllimport) char* __cdecl _ecvt(
       double _Value,
       int    _DigitCount,
      int*   _PtDec,
      int*   _PtSign
    );

 

__declspec(dllimport) errno_t __cdecl _fcvt_s(
      char*  _Buffer,
                              size_t _BufferCount,
                              double _Value,
                              int    _FractionalDigitCount,
                             int*   _PtDec,
                             int*   _PtSign
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl _fcvt_s(char (&_Buffer)[_Size],   double _Value,   int _FractionalDigitCount,   int* _PtDec,   int* _PtSign) throw() { return _fcvt_s(_Buffer, _Size, _Value, _FractionalDigitCount, _PtDec, _PtSign); } }
#line 778 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

 
  
__declspec(dllimport) char* __cdecl _fcvt(
       double _Value,
       int    _FractionalDigitCount,
      int*   _PtDec,
      int*   _PtSign
    );

 
__declspec(dllimport) errno_t __cdecl _gcvt_s(
      char*  _Buffer,
                              size_t _BufferCount,
                              double _Value,
                              int    _DigitCount
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl _gcvt_s(char (&_Buffer)[_Size],   double _Value,   int _DigitCount) throw() { return _gcvt_s(_Buffer, _Size, _Value, _DigitCount); } }
#line 803 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"


__declspec(dllimport) char* __cdecl _gcvt(
                        double _Value,
                        int    _DigitCount,
        char*  _Buffer
    );











    

#line 824 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
        
    #line 826 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

    


        
    #line 832 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

     
    __declspec(dllimport) int __cdecl ___mb_cur_max_func(void);

     
    __declspec(dllimport) int __cdecl ___mb_cur_max_l_func(_locale_t);
#line 839 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"



 
__declspec(dllimport) int __cdecl mblen(
        char const* _Ch,
                                             size_t      _MaxCount
    );

  
__declspec(dllimport) int __cdecl _mblen_l(
        char const* _Ch,
                                             size_t      _MaxCount,
                                         _locale_t   _Locale
    );

 
 
__declspec(dllimport) size_t __cdecl _mbstrlen(
      char const* _String
    );

 
 
__declspec(dllimport) size_t __cdecl _mbstrlen_l(
        char const* _String, 
      _locale_t   _Locale
    );

 
 
__declspec(dllimport) size_t __cdecl _mbstrnlen(
      char const* _String,
        size_t      _MaxCount
    );

 
 
__declspec(dllimport) size_t __cdecl _mbstrnlen_l(
        char const* _String,
          size_t      _MaxCount,
      _locale_t   _Locale
    );

 
__declspec(dllimport) int __cdecl mbtowc(
                      wchar_t*    _DstCh,
      char const* _SrcCh,
                                      size_t      _SrcSizeInBytes
    );

 
__declspec(dllimport) int __cdecl _mbtowc_l(
                      wchar_t*    _DstCh,
      char const* _SrcCh,
                                      size_t      _SrcSizeInBytes,
                                  _locale_t   _Locale
    );


__declspec(dllimport) errno_t __cdecl mbstowcs_s(
                                                      size_t*     _PtNumOfCharConverted,
      wchar_t*    _DstBuf,
                                                           size_t      _SizeInWords,
                                     char const* _SrcBuf,
                                                           size_t      _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl mbstowcs_s(  size_t* _PtNumOfCharConverted,   wchar_t (&_Dest)[_Size],   char const* _Source,   size_t _MaxCount) throw() { return mbstowcs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }
#line 914 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

 __declspec(dllimport) size_t __cdecl mbstowcs( wchar_t *_Dest,  char const* _Source,  size_t _MaxCount);
#line 921 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"


__declspec(dllimport) errno_t __cdecl _mbstowcs_s_l(
                                                      size_t*     _PtNumOfCharConverted,
      wchar_t*    _DstBuf,
                                                           size_t      _SizeInWords,
                                     char const* _SrcBuf,
                                                           size_t      _MaxCount,
                                                       _locale_t   _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _mbstowcs_s_l(  size_t* _PtNumOfCharConverted,   wchar_t (&_Dest)[_Size],   char const* _Source,   size_t _MaxCount,   _locale_t _Locale) throw() { return _mbstowcs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
#line 940 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

 __declspec(dllimport) size_t __cdecl _mbstowcs_l(  wchar_t *_Dest,   char const* _Source,   size_t _MaxCount,   _locale_t _Locale);
#line 949 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"





__declspec(dllimport) int __cdecl wctomb(
      char*   _MbCh,
                                wchar_t _WCh
    );


__declspec(dllimport) int __cdecl _wctomb_l(
        char*     _MbCh,
                          wchar_t   _WCh,
                      _locale_t _Locale
    );



    
    __declspec(dllimport) errno_t __cdecl wctomb_s(
                                                         int*    _SizeConverted,
          char*   _MbCh,
                                                              rsize_t _SizeInBytes,
                                                              wchar_t _WCh
        );

#line 977 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"


__declspec(dllimport) errno_t __cdecl _wctomb_s_l(
                             int*     _SizeConverted,
      char*     _MbCh,
                                  size_t    _SizeInBytes,
                                  wchar_t   _WCh, 
                              _locale_t _Locale);


__declspec(dllimport) errno_t __cdecl wcstombs_s(
                                                               size_t*        _PtNumOfCharConverted,
      char*          _Dst,
                                                                    size_t         _DstSizeInBytes,
                                                                  wchar_t const* _Src,
                                                                    size_t         _MaxCountInBytes
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcstombs_s(  size_t* _PtNumOfCharConverted,   char (&_Dest)[_Size],   wchar_t const* _Source,   size_t _MaxCount) throw() { return wcstombs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }
#line 1002 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

 __declspec(dllimport) size_t __cdecl wcstombs( char *_Dest,  wchar_t const* _Source,  size_t _MaxCount);
#line 1009 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"


__declspec(dllimport) errno_t __cdecl _wcstombs_s_l(
                                                               size_t*        _PtNumOfCharConverted,
      char*          _Dst,
                                                                    size_t         _DstSizeInBytes,
                                                                  wchar_t const* _Src,
                                                                    size_t         _MaxCountInBytes,
                                                                _locale_t      _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcstombs_s_l(  size_t* _PtNumOfCharConverted,   char (&_Dest)[_Size],   wchar_t const* _Source,   size_t _MaxCount,   _locale_t _Locale) throw() { return _wcstombs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
#line 1028 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

 __declspec(dllimport) size_t __cdecl _wcstombs_l(  char *_Dest,   wchar_t const* _Source,   size_t _MaxCount,   _locale_t _Locale);
#line 1037 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"




















 
 
__declspec(dllimport) __declspec(allocator) char* __cdecl _fullpath(
      char*       _Buffer,
                                char const* _Path,
                                  size_t      _BufferCount
    );




__declspec(dllimport) errno_t __cdecl _makepath_s(
      char*       _Buffer,
                              size_t      _BufferCount,
                        char const* _Drive,
                        char const* _Dir,
                        char const* _Filename,
                        char const* _Ext
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _makepath_s(char (&_Buffer)[_Size],   char const* _Drive,   char const* _Dir,   char const* _Filename,   char const* _Ext) throw() { return _makepath_s(_Buffer, _Size, _Drive, _Dir, _Filename, _Ext); } }
#line 1085 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

 __declspec(dllimport) void __cdecl _makepath(  char *_Buffer,  char const* _Drive,  char const* _Dir,  char const* _Filename,  char const* _Ext);
#line 1094 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"


__declspec(dllimport) void __cdecl _splitpath(
                        char const* _FullPath,
        char*       _Drive,
        char*       _Dir,
        char*       _Filename,
        char*       _Ext
    );


__declspec(dllimport) errno_t __cdecl _splitpath_s(
                                  char const* _FullPath,
         char*       _Drive,
                                    size_t      _DriveCount,
           char*       _Dir,
                                    size_t      _DirCount,
      char*       _Filename,
                                    size_t      _FilenameCount,
           char*       _Ext,
                                    size_t      _ExtCount
    );

extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _splitpath_s(   char const* _Dest,   char (&_Drive)[_DriveSize],   char (&_Dir)[_DirSize],   char (&_Name)[_NameSize],   char (&_Ext)[_ExtSize] ) throw() { return _splitpath_s(_Dest, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }










    

    
     
    __declspec(dllimport) errno_t __cdecl getenv_s(
                                     size_t*     _RequiredCount,
          char*       _Buffer,
                                      rsize_t     _BufferCount,
                                    char const* _VarName
        );
    
    #line 1140 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"




    __declspec(dllimport) int*       __cdecl __p___argc (void);
    __declspec(dllimport) char***    __cdecl __p___argv (void);
    __declspec(dllimport) wchar_t*** __cdecl __p___wargv(void);

    




        
        
        
    #line 1157 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
    
    __declspec(dllimport) char***    __cdecl __p__environ (void);
    __declspec(dllimport) wchar_t*** __cdecl __p__wenviron(void);

    
        
    #line 1164 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
    
    





        
        
    #line 1174 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"



    
    



       
    __declspec(dllimport) char* __cdecl getenv(
          char const* _VarName
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl getenv_s(  size_t* _RequiredCount, char (&_Buffer)[_Size],   char const* _VarName) throw() { return getenv_s(_RequiredCount, _Buffer, _Size, _VarName); } }
#line 1193 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

    


#line 1198 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

    
    __declspec(dllimport) errno_t __cdecl _dupenv_s(
            char**      _Buffer,
                                                                            size_t*     _BufferCount,
                                                                               char const* _VarName
        );

    

#line 1209 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

    __declspec(dllimport) int __cdecl system(
          char const* _Command
        );

    
    
    #pragma warning (push)
    #pragma warning (disable:6540)

     
    __declspec(dllimport) int __cdecl _putenv(
          char const* _EnvString
        );

    
    __declspec(dllimport) errno_t __cdecl _putenv_s(
          char const* _Name,
          char const* _Value
        );

    #pragma warning (pop)

    __declspec(dllimport) errno_t __cdecl _searchenv_s(
                                char const* _Filename,
                                char const* _VarName,
          char*       _Buffer,
                                  size_t      _BufferCount
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _searchenv_s(  char const* _Filename,   char const* _VarName, char (&_Buffer)[_Size]) throw() { return _searchenv_s(_Filename, _VarName, _Buffer, _Size); } }
#line 1245 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

     __declspec(dllimport) void __cdecl _searchenv( char const* _Filename,  char const* _VarName,   char *_Buffer);
#line 1252 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

    
    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "SetErrorMode" " " "instead. See online help for details."))
    __declspec(dllimport) void __cdecl _seterrormode(
          int _Mode
        );

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "Beep" " " "instead. See online help for details."))
    __declspec(dllimport) void __cdecl _beep(
          unsigned _Frequency,
          unsigned _Duration
        );

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "Sleep" " " "instead. See online help for details."))
    __declspec(dllimport) void __cdecl _sleep(
          unsigned long _Duration
        );

#line 1271 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"










    




    
    

    #pragma warning(push)
    #pragma warning(disable: 4141) 

       
    __declspec(dllimport) char* __cdecl ecvt(
           double _Value,
           int    _DigitCount,
          int*   _PtDec,
          int*   _PtSign
        );

       
    __declspec(dllimport) char* __cdecl fcvt(
           double _Value,
           int    _FractionalDigitCount,
          int*   _PtDec,
          int*   _PtSign
        );

     
    __declspec(dllimport) char* __cdecl gcvt(
                            double _Value,
                            int    _DigitCount,
            char*  _DstBuf
        );
    
     
    __declspec(dllimport) char* __cdecl itoa(
                            int   _Value,
            char* _Buffer,
                            int   _Radix
        );
    
     
    __declspec(dllimport) char* __cdecl ltoa(
                            long  _Value,
            char* _Buffer,
                            int   _Radix
        );


    
    __declspec(dllimport) void __cdecl swab(
          char* _Buf1,
          char* _Buf2,
                                     int   _SizeInBytes
        );

     
    __declspec(dllimport) char* __cdecl ultoa(
                            unsigned long _Value,
            char*         _Buffer,
                            int           _Radix
        );

    

        

          
        __declspec(dllimport) int __cdecl putenv(
              char const* _EnvString
            );

    #line 1354 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

    #pragma warning(pop)

    _onexit_t __cdecl onexit(  _onexit_t _Func);

#line 1360 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"



} __pragma(pack(pop))

#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"

 
namespace std {
using :: size_t; using :: div_t; using :: ldiv_t;
using :: abort; using :: abs; using :: atexit;
using :: atof; using :: atoi; using :: atol;
using :: bsearch; using :: calloc; using :: div;
using :: exit; using :: free;
using :: labs; using :: ldiv; using :: malloc;
using :: mblen; using :: mbstowcs; using :: mbtowc;
using :: qsort; using :: rand; using :: realloc;
using :: srand; using :: strtod; using :: strtol;
using :: strtoul;
using :: wcstombs; using :: wctomb;

using :: lldiv_t;

 
using :: getenv;
using :: system;
 #line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"

using :: atoll; using :: llabs; using :: lldiv;
using :: strtof; using :: strtold;
using :: strtoll; using :: strtoull;

using :: _Exit; using :: at_quick_exit; using :: quick_exit;
}
 #line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"

#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"





#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\initializer_list"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {
		
template<class _Elem>
	class initializer_list
	{	
public:
	typedef _Elem value_type;
	typedef const _Elem& reference;
	typedef const _Elem& const_reference;
	typedef size_t size_type;

	typedef const _Elem* iterator;
	typedef const _Elem* const_iterator;

	constexpr initializer_list() noexcept
		: _First(0), _Last(0)
		{	
		}

	constexpr initializer_list(const _Elem *_First_arg,
		const _Elem *_Last_arg) noexcept
		: _First(_First_arg), _Last(_Last_arg)
		{	
		}

	constexpr const _Elem *begin() const noexcept
		{	
		return (_First);
		}

	constexpr const _Elem *end() const noexcept
		{	
		return (_Last);
		}

	constexpr size_t size() const noexcept
		{	
		return ((size_t)(_Last - _First));
		}

private:
	const _Elem *_First;
	const _Elem *_Last;
	};

		
template<class _Elem> inline
	constexpr const _Elem *begin(initializer_list<_Elem> _Ilist) noexcept
	{	
	return (_Ilist.begin());
	}

		
template<class _Elem> inline
	constexpr const _Elem *end(initializer_list<_Elem> _Ilist) noexcept
	{	
	return (_Ilist.end());
	}
}
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\initializer_list"
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\initializer_list"





#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {
	
struct _Nil
	{	
	};

	
template<class _Ty,
	_Ty _Val>
	struct integral_constant
	{	
	static constexpr _Ty value = _Val;

	typedef _Ty value_type;
	typedef integral_constant<_Ty, _Val> type;

	constexpr operator value_type() const noexcept
		{	
		return (value);
		}

	constexpr value_type operator()() const noexcept
		{	
		return (value);
		}
	};

typedef integral_constant<bool, true> true_type;
typedef integral_constant<bool, false> false_type;

	
template<bool _Val>
	using bool_constant = integral_constant<bool, _Val>;

	
template<bool _Val>
	struct _Cat_base
		: integral_constant<bool, _Val>
	{	
	};

	
template<bool _Test,
	class _Ty = void>
	struct enable_if
	{	
	};

template<class _Ty>
	struct enable_if<true, _Ty>
	{	
	typedef _Ty type;
	};

	
template<bool _Test,
	class _Ty1,
	class _Ty2>
	struct conditional
	{	
	typedef _Ty2 type;
	};

template<class _Ty1,
	class _Ty2>
	struct conditional<true, _Ty1, _Ty2>
	{	
	typedef _Ty1 type;
	};

	
template<class _Ty1,
	class _Ty2>
	struct is_same
		: false_type
	{	
	};

template<class _Ty1>
	struct is_same<_Ty1, _Ty1>
		: true_type
	{	
	};

 
template<class _Ty,
	class _Uty>
	constexpr bool is_same_v = is_same<_Ty, _Uty>::value;
 #line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"

	
template<class _Ty>
	struct remove_const
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_const<const _Ty>
	{	
	typedef _Ty type;
	};

	
template<class _Ty>
	struct remove_volatile
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_volatile<volatile _Ty>
	{	
	typedef _Ty type;
	};

	
template<class _Ty>
	struct remove_cv
	{	
	typedef typename remove_const<typename remove_volatile<_Ty>::type>::type
		type;
	};

	
template<class _Ty>
	struct _Is_integral
		: false_type
	{	
	};

template<>
	struct _Is_integral<bool>
		: true_type
	{	
	};

template<>
	struct _Is_integral<char>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned char>
		: true_type
	{	
	};

template<>
	struct _Is_integral<signed char>
		: true_type
	{	
	};

 
template<>
	struct _Is_integral<wchar_t>
		: true_type
	{	
	};
 #line 175 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"

template<>
	struct _Is_integral<unsigned short>
		: true_type
	{	
	};

template<>
	struct _Is_integral<signed short>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned int>
		: true_type
	{	
	};

template<>
	struct _Is_integral<signed int>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned long>
		: true_type
	{	
	};

template<>
	struct _Is_integral<signed long>
		: true_type
	{	
	};

template<>
	struct _Is_integral<char16_t>
		: true_type
	{	
	};

template<>
	struct _Is_integral<char32_t>
		: true_type
	{	
	};

template<>
	struct _Is_integral<long long>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned long long>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_integral
		: _Is_integral<typename remove_cv<_Ty>::type>
	{	
	};

 
template<class _Ty>
	constexpr bool is_integral_v = is_integral<_Ty>::value;
 #line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"

	
template<class _Ty>
	struct _Is_floating_point
		: false_type
	{	
	};

template<>
	struct _Is_floating_point<float>
		: true_type
	{	
	};

template<>
	struct _Is_floating_point<double>
		: true_type
	{	
	};

template<>
	struct _Is_floating_point<long double>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_floating_point
		: _Is_floating_point<typename remove_cv<_Ty>::type>
	{	
	};

 
template<class _Ty>
	constexpr bool is_floating_point_v = is_floating_point<_Ty>::value;
 #line 284 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"

	
template<class _Ty>
	struct is_arithmetic
		: _Cat_base<is_integral<_Ty>::value
			|| is_floating_point<_Ty>::value>
	{	
	};

 
template<class _Ty>
	constexpr bool is_arithmetic_v = is_arithmetic<_Ty>::value;
 #line 297 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"

	
template<class _Ty>
	struct remove_reference
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_reference<_Ty&>
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_reference<_Ty&&>
	{	
	typedef _Ty type;
	};

	
struct _Wrap_int
	{	
	_Wrap_int(int)
		{	
		}
	};

template<class _Ty>
	struct _Identity
	{	
	typedef _Ty type;
	};














}
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 349 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
#line 350 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"





#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 
  
  
  
 #line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

namespace std {
		
 
 
 #line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

 
 
 
 
 

 
 

  

  











#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
   
   
  #line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

 



















#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

		


		
 

 



































 
 

		

template<bool,
	class _Ty1,
	class _Ty2>
	struct _If
	{	
	typedef _Ty2 type;
	};

template<class _Ty1,
	class _Ty2>
	struct _If<true, _Ty1, _Ty2>
	{	
	typedef _Ty1 type;
	};

template<class _Ty>
	struct _Always_false
	{	
	static constexpr bool value = false;
	};

		

 
		
template<class _Arg,
	class _Result>
	struct unary_function
	{	
	typedef _Arg argument_type;
	typedef _Result result_type;
	};

		
template<class _Arg1,
	class _Arg2,
	class _Result>
	struct binary_function
	{	
	typedef _Arg1 first_argument_type;
	typedef _Arg2 second_argument_type;
	typedef _Result result_type;
	};
 #line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

		
template<class _Ty = void>
	struct plus
	{	
	typedef _Ty first_argument_type;
	typedef _Ty second_argument_type;
	typedef _Ty result_type;

	constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left + _Right);
		}
	};

		
template<class _Ty = void>
	struct minus
	{	
	typedef _Ty first_argument_type;
	typedef _Ty second_argument_type;
	typedef _Ty result_type;

	constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left - _Right);
		}
	};

		
template<class _Ty = void>
	struct multiplies
	{	
	typedef _Ty first_argument_type;
	typedef _Ty second_argument_type;
	typedef _Ty result_type;

	constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left * _Right);
		}
	};

		
template<class _Ty = void>
	struct equal_to
	{	
	typedef _Ty first_argument_type;
	typedef _Ty second_argument_type;
	typedef bool result_type;

	constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left == _Right);
		}
	};

		
template<class _Ty = void>
	struct less
	{	
	typedef _Ty first_argument_type;
	typedef _Ty second_argument_type;
	typedef bool result_type;

	constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left < _Right);
		}
	};

		
template<>
	struct plus<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			+ static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			+ static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct minus<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			- static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			- static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct multiplies<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			* static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			* static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct equal_to<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			== static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			== static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct less<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			< static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			< static_cast<_Ty2&&>(_Right));
		}
	};


}



namespace std {
	
inline size_t _Hash_seq(const unsigned char *_First, size_t _Count)
	{	
 
	static_assert(sizeof(size_t) == 8, "This code is for 64-bit size_t.");
	const size_t _FNV_offset_basis = 14695981039346656037ULL;
	const size_t _FNV_prime = 1099511628211ULL;

 



#line 347 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

	size_t _Val = _FNV_offset_basis;
	for (size_t _Next = 0; _Next < _Count; ++_Next)
		{	
		_Val ^= (size_t)_First[_Next];
		_Val *= _FNV_prime;
		}
	return (_Val);
	}

	
template<class _Kty>
	struct _Bitwise_hash
	{	
	typedef _Kty argument_type;
	typedef size_t result_type;

	size_t operator()(const _Kty& _Keyval) const
		{	
		return (_Hash_seq((const unsigned char *)&_Keyval, sizeof (_Kty)));
		}
	};

	
template<class _Kty>
	struct hash
		: public _Bitwise_hash<_Kty>
	{	
	static constexpr bool _Value = __is_enum(_Kty);
	static_assert(_Value,
		"The C++ Standard doesn't provide a hash for this type.");
	};
template<>
	struct hash<bool>
		: public _Bitwise_hash<bool>
	{	
	};

template<>
	struct hash<char>
		: public _Bitwise_hash<char>
	{	
	};

template<>
	struct hash<signed char>
		: public _Bitwise_hash<signed char>
	{	
	};

template<>
	struct hash<unsigned char>
		: public _Bitwise_hash<unsigned char>
	{	
	};

template<>
	struct hash<char16_t>
		: public _Bitwise_hash<char16_t>
	{	
	};

template<>
	struct hash<char32_t>
		: public _Bitwise_hash<char32_t>
	{	
	};

 
template<>
	struct hash<wchar_t>
		: public _Bitwise_hash<wchar_t>
	{	
	};
 #line 422 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

template<>
	struct hash<short>
		: public _Bitwise_hash<short>
	{	
	};

template<>
	struct hash<unsigned short>
		: public _Bitwise_hash<unsigned short>
	{	
	};

template<>
	struct hash<int>
		: public _Bitwise_hash<int>
	{	
	};

template<>
	struct hash<unsigned int>
		: public _Bitwise_hash<unsigned int>
	{	
	};

template<>
	struct hash<long>
		: public _Bitwise_hash<long>
	{	
	};

template<>
	struct hash<unsigned long>
		: public _Bitwise_hash<unsigned long>
	{	
	};

template<>
	struct hash<long long>
		: public _Bitwise_hash<long long>
	{	
	};

template<>
	struct hash<unsigned long long>
		: public _Bitwise_hash<unsigned long long>
	{	
	};

template<>
	struct hash<float>
		: public _Bitwise_hash<float>
	{	
	typedef float _Kty;
	typedef _Bitwise_hash<_Kty> _Mybase;

	size_t operator()(const _Kty& _Keyval) const
		{	
		return (_Mybase::operator()(
			_Keyval == 0 ? 0 : _Keyval));	
		}
	};

template<>
	struct hash<double>
		: public _Bitwise_hash<double>
	{	
	typedef double _Kty;
	typedef _Bitwise_hash<_Kty> _Mybase;

	size_t operator()(const _Kty& _Keyval) const
		{	
		return (_Mybase::operator()(
			_Keyval == 0 ? 0 : _Keyval));	
		}
	};

template<>
	struct hash<long double>
		: public _Bitwise_hash<long double>
	{	
	typedef long double _Kty;
	typedef _Bitwise_hash<_Kty> _Mybase;

	size_t operator()(const _Kty& _Keyval) const
		{	
		return (_Mybase::operator()(
			_Keyval == 0 ? 0 : _Keyval));	
		}
	};

template<class _Ty>
	struct hash<_Ty *>
		: public _Bitwise_hash<_Ty *>
	{	
	};
}
#line 520 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"


namespace std {
namespace tr1 {	
using ::std:: hash;
}	
}
#line 528 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"




 





 #line 539 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

 



#line 545 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

 #line 547 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

 








 #line 558 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

 



 

#line 567 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"


































































namespace std {
	
template<class... _Types>
	struct _Arg_types
	{	
	};

template<class _Ty1>
	struct _Arg_types<_Ty1>
	{	
	typedef _Ty1 argument_type;
	};

template<class _Ty1,
	class _Ty2>
	struct _Arg_types<_Ty1, _Ty2>
	{	
	typedef _Ty1 first_argument_type;
	typedef _Ty2 second_argument_type;
	};

	
template<class _Ty>
	struct _Is_function
	{	
	typedef false_type _Bool_type;
	static constexpr bool _Weird = false;
	};












template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) > : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = false; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) > : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = false; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) volatile> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) volatile> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const volatile> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const volatile> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) volatile &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) volatile &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const volatile &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const volatile &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) volatile &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) volatile &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const volatile &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const volatile &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };












template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) > { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = false; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) volatile> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const volatile> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) &> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const &> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) volatile &> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const volatile &> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) &&> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const &&> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) volatile &&> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const volatile &&> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };


template<class _Ty>
	struct is_function
		: _Is_function<_Ty>::_Bool_type
	{	
	};

 
template<class _Ty>
	constexpr bool is_function_v = is_function<_Ty>::value;
 #line 699 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

		





















template<class _Ty> inline
	constexpr _Ty *addressof(_Ty& _Val) noexcept
	{	
	return (__builtin_addressof(_Val));
	}
#line 728 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"


		
template<class _Ptrty> inline
	auto _Unfancy(_Ptrty _Ptr)
	{	
	return (::std:: addressof(*_Ptr));
	}

template<class _Ty> inline
	_Ty * _Unfancy(_Ty * _Ptr)
	{	
	return (_Ptr);
	}

}
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 748 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
#line 749 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 
 #pragma warning(disable: 4180 4296)

namespace std {
template<class _Ty>
	struct _Is_memfunptr
	{	
	typedef false_type _Bool_type;
	};













template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...)  > : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...)  > : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const > : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const > : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile > : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) volatile > : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile > : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const volatile > : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...)  &> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...)  &> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const &> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const &> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile &> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) volatile &> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile &> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const volatile &> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...)  &&> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...)  &&> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const &&> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const &&> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile &&> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) volatile &&> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile &&> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const volatile &&> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };













template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) > { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) volatile> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const volatile> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) &> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const &> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) volatile &> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const volatile &> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) &&> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const &&> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) volatile &&> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const volatile &&> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };


	
template<class _Ty>
	struct is_void
		: false_type
	{	
	};








template<> struct is_void< void> : true_type { }; template<> struct is_void<const void> : true_type { }; template<> struct is_void<volatile void> : true_type { }; template<> struct is_void<const volatile void> : true_type { };


	
	
template<class _Ty>
	struct add_const
	{	
	typedef const _Ty type;
	};

	
template<class _Ty>
	struct add_volatile
	{	
	typedef volatile _Ty type;
	};

	
template<class _Ty>
	struct add_cv
	{	
	typedef const volatile _Ty type;
	};

	
template<class _Ty,
	bool = _Is_function<_Ty>::_Weird || is_void<_Ty>::value>
	struct _Add_reference
	{	
	typedef _Ty _Lvalue;
	typedef _Ty _Rvalue;
	};

template<class _Ty>
	struct _Add_reference<_Ty, false>
	{	
	typedef _Ty& _Lvalue;
	typedef _Ty&& _Rvalue;
	};

	
template<class _Ty>
	struct add_lvalue_reference
	{	
	typedef typename _Add_reference<_Ty>::_Lvalue type;
	};

	
template<class _Ty>
	struct add_rvalue_reference
	{	
	typedef typename _Add_reference<_Ty>::_Rvalue type;
	};

	
template<class _Ty>
	typename add_rvalue_reference<_Ty>::type
		declval() noexcept;

	
template<class _Ty>
	struct remove_extent
	{	
	typedef _Ty type;
	};

template<class _Ty, size_t _Ix>
	struct remove_extent<_Ty[_Ix]>
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_extent<_Ty[]>
	{	
	typedef _Ty type;
	};

	
template<class _Ty>
	struct remove_all_extents
	{	
	typedef _Ty type;
	};

template<class _Ty, size_t _Ix>
	struct remove_all_extents<_Ty[_Ix]>
	{	
	typedef typename remove_all_extents<_Ty>::type type;
	};

template<class _Ty>
	struct remove_all_extents<_Ty[]>
	{	
	typedef typename remove_all_extents<_Ty>::type type;
	};

	
template<class _Ty>
	struct remove_pointer
	{	
	typedef _Ty type;
	};








template<class _Ty> struct remove_pointer<_Ty *> { typedef _Ty type; }; template<class _Ty> struct remove_pointer<_Ty *const> { typedef _Ty type; }; template<class _Ty> struct remove_pointer<_Ty *volatile> { typedef _Ty type; }; template<class _Ty> struct remove_pointer<_Ty *const volatile> { typedef _Ty type; };


	
template<class _Ty,
	bool = _Is_function<_Ty>::_Weird>
	struct _Add_pointer
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct _Add_pointer<_Ty, false>
	{	
	typedef typename remove_reference<_Ty>::type *type;
	};

template<class _Ty>
	struct add_pointer
	{	
	typedef typename _Add_pointer<_Ty>::type type;
	};

	
	
template<class _Ty>
	struct is_array
		: false_type
	{	
	};

template<class _Ty, size_t _Nx>
	struct is_array<_Ty[_Nx]>
		: true_type
	{	
	};

template<class _Ty>
	struct is_array<_Ty[]>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_lvalue_reference
		: false_type
	{	
	};

template<class _Ty>
	struct is_lvalue_reference<_Ty&>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_rvalue_reference
		: false_type
	{	
	};

template<class _Ty>
	struct is_rvalue_reference<_Ty&&>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_reference
		: _Cat_base<is_lvalue_reference<_Ty>::value
		|| is_rvalue_reference<_Ty>::value>
	{	
	};


	
template<class _Ty,
	bool _Pmf = _Is_memfunptr<_Ty>::_Bool_type::value>
	struct _Is_member_object_pointer
		: false_type
	{	
	};

template<class _Ty1,
	class _Ty2>
	struct _Is_member_object_pointer<_Ty1 _Ty2::*, false>
		: true_type
	{	
	typedef _Ty2 _Class_type;
	};

template<class _Ty>
	struct is_member_object_pointer
		: _Is_member_object_pointer<typename remove_cv<_Ty>::type>::type
	{	
	};

	
template<class _Ty>
	struct is_member_function_pointer
		: _Is_memfunptr<typename remove_cv<_Ty>::type>::_Bool_type
	{	
	};

	
template<class _Ty>
	struct _Is_pointer
		: false_type
	{	
	};

template<class _Ty>
	struct _Is_pointer<_Ty *>
		: _Cat_base<!is_member_object_pointer<_Ty *>::value
		&& !is_member_function_pointer<_Ty *>::value>
	{	
	};

template<class _Ty>
	struct is_pointer
		: _Is_pointer<typename remove_cv<_Ty>::type>
	{	
	};

	

template<class _Ty>
	struct is_null_pointer
		: _Cat_base<is_same<typename remove_cv<_Ty>::type, nullptr_t>::value>
	{	
	};

	
template<class _Ty>
	struct is_union
		: _Cat_base<__is_union(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_class
		: _Cat_base<__is_class(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_fundamental
		: _Cat_base<is_arithmetic<_Ty>::value
		|| is_void<_Ty>::value
		|| is_null_pointer<_Ty>::value>
	{	
	};

	
template<class _Ty>
	struct is_object
		: _Cat_base<!is_function<_Ty>::value
		&& !is_reference<_Ty>::value
		&& !is_void<_Ty>::value>
	{	
	};

	

template<class _From,
	class _To>
	struct is_convertible
		: _Cat_base<__is_convertible_to(_From, _To)>
	{	
	};

	
template<class _Ty>
	struct is_enum
		: _Cat_base<__is_enum(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_compound
		: _Cat_base<!is_fundamental<_Ty>::value>
	{	
	};

	
template<class _Ty>
	struct is_member_pointer
		: _Cat_base<is_member_object_pointer<_Ty>::value
		|| is_member_function_pointer<_Ty>::value>
	{	
	};

	
template<class _Ty>
	struct is_scalar
		: _Cat_base<is_arithmetic<_Ty>::value
		|| is_enum<_Ty>::value
		|| is_pointer<_Ty>::value
		|| is_member_pointer<_Ty>::value
		|| is_null_pointer<_Ty>::value>
	{	
	};

	
template<class _Ty>
	struct is_const
		: false_type
	{	
	};

template<class _Ty>
	struct is_const<const _Ty>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_volatile
		: false_type
	{	
	};

template<class _Ty>
	struct is_volatile<volatile _Ty>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_pod
		: _Cat_base<__is_pod(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_empty
		: _Cat_base<__is_empty(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_polymorphic
		: _Cat_base<__is_polymorphic(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_abstract
		: _Cat_base<__is_abstract(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_final
		: _Cat_base<__is_final(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_standard_layout
		: _Cat_base<__is_standard_layout(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_literal_type
		: _Cat_base<__is_literal_type(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_trivial
		: _Cat_base<__is_trivial(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_trivially_copyable
		: _Cat_base<__is_trivially_copyable(_Ty)>
	{	
	};

	
template<class _Ty>
	struct has_virtual_destructor
		: _Cat_base<__has_virtual_destructor(_Ty)>
	{	
	};

		
	

template<class _Ty,
	class... _Args>
	struct is_constructible
		: _Cat_base<__is_constructible(_Ty, _Args...)>
	{	
	};

	
template<class _Ty>
	struct is_copy_constructible
		: is_constructible<
			_Ty,
			typename add_lvalue_reference<
				typename add_const<_Ty>::type
			>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct is_default_constructible
		: is_constructible<_Ty>::type
	{	
	};

	
template<class _Ty>
	struct is_move_constructible
		: is_constructible<
			_Ty,
			typename add_rvalue_reference<_Ty>::type
		>::type
	{	
	};

	
template<class _To,
	class _From>
	struct is_assignable
		: integral_constant<bool, __is_assignable(_To, _From)>
	{	
	};

	
template<class _Ty>
	struct is_copy_assignable
		: is_assignable<
			typename add_lvalue_reference<_Ty>::type,
			typename add_lvalue_reference<
				typename add_const<_Ty>::type
			>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct is_move_assignable
		: is_assignable<
			typename add_lvalue_reference<_Ty>::type,
			typename add_rvalue_reference<_Ty>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct is_destructible
		: _Cat_base<__is_destructible(_Ty)>
	{	
	};

		
	

template<class _Ty,
	class... _Args>
	struct is_trivially_constructible
		: _Cat_base<__is_trivially_constructible(_Ty, _Args...)>
	{	
	};

	
template<class _Ty>
	struct is_trivially_copy_constructible
		: is_trivially_constructible<
			_Ty,
			typename add_lvalue_reference<
				typename add_const<_Ty>::type
			>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct is_trivially_default_constructible
		: is_trivially_constructible<_Ty>::type
	{	
	};

	
template<class _Ty>
	struct is_trivially_move_constructible
		: is_trivially_constructible<
			_Ty,
			typename add_rvalue_reference<_Ty>::type
		>::type
	{	
	};

	
template<class _To,
	class _From>
	struct is_trivially_assignable
		: _Cat_base<__is_trivially_assignable(_To, _From)>
	{	
	};

	
template<class _Ty>
	struct is_trivially_copy_assignable
		: is_trivially_assignable<
			typename add_lvalue_reference<_Ty>::type,
			typename add_lvalue_reference<
				typename add_const<_Ty>::type
			>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct is_trivially_move_assignable
		: is_trivially_assignable<
			typename add_lvalue_reference<_Ty>::type,
			typename add_rvalue_reference<_Ty>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct is_trivially_destructible
		: _Cat_base<__has_trivial_destructor(_Ty)>
	{	
	};

		
	

template<class _Ty,
	class... _Args>
	struct is_nothrow_constructible
		: _Cat_base<__is_nothrow_constructible(_Ty, _Args...)>
	{	
	};

	
template<class _Ty>
	struct is_nothrow_copy_constructible
		: is_nothrow_constructible<
			_Ty,
			typename add_lvalue_reference<
				typename add_const<_Ty>::type
			>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct is_nothrow_default_constructible
		: is_nothrow_constructible<_Ty>::type
	{	
	};

	
template<class _Ty>
	struct is_nothrow_move_constructible
		: is_nothrow_constructible<
			_Ty,
			typename add_rvalue_reference<_Ty>::type
		>::type
	{	
	};

	
template<class _To,
	class _From>
	struct is_nothrow_assignable
		: _Cat_base<__is_nothrow_assignable(_To, _From)>
	{	
	};

	
template<class _Ty>
	struct is_nothrow_copy_assignable
		: is_nothrow_assignable<
			typename add_lvalue_reference<_Ty>::type,
			typename add_lvalue_reference<
				typename add_const<_Ty>::type
			>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct is_nothrow_move_assignable
		: is_nothrow_assignable<
			typename add_lvalue_reference<_Ty>::type,
			typename add_rvalue_reference<_Ty>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct is_nothrow_destructible
		: _Cat_base<__is_nothrow_destructible(_Ty)>
	{	
	};

	
template<class _Ty,
	bool = is_integral<_Ty>::value>
	struct _Sign_base
	{	
	typedef typename remove_cv<_Ty>::type _Uty;
	typedef _Cat_base<_Uty(-1) < _Uty(0)> _Signed;
	typedef _Cat_base<_Uty(0) < _Uty(-1)> _Unsigned;
	};

template<class _Ty>
	struct _Sign_base<_Ty, false>
	{	
		
	typedef is_floating_point<_Ty> _Signed;
	typedef false_type _Unsigned;
	};

template<class _Ty>
	struct is_signed
		: _Sign_base<_Ty>::_Signed
	{	
	};

	
template<class _Ty>
	struct is_unsigned
		: _Sign_base<_Ty>::_Unsigned
	{	
	};

	
template<class _Ty>
	struct _Change_sign
	{	
	static_assert(
		((is_integral<_Ty>::value || is_enum<_Ty>::value)
			&& !is_same<_Ty, bool>::value),
		"make_signed<T>/make_unsigned<T> require that T shall be a (possibly "
		"cv-qualified) integral type or enumeration but not a bool type.");

	typedef
		typename _If<is_same<_Ty, signed char>::value
			|| is_same<_Ty, unsigned char     >::value, signed char,
		typename _If<is_same<_Ty, short       >::value
			|| is_same<_Ty, unsigned short    >::value, short,
		typename _If<is_same<_Ty, int         >::value
			|| is_same<_Ty, unsigned int      >::value, int,
		typename _If<is_same<_Ty, long        >::value
			|| is_same<_Ty, unsigned long     >::value, long,
		typename _If<is_same<_Ty, long long   >::value
			|| is_same<_Ty, unsigned long long>::value, long long,
		typename _If<sizeof (_Ty) == sizeof (signed char), signed char,
		typename _If<sizeof (_Ty) == sizeof (short      ), short,
		typename _If<sizeof (_Ty) == sizeof (int        ), int,
		typename _If<sizeof (_Ty) == sizeof (long       ), long,
			long long
		>::type>::type>::type>::type>::type>::type>::type>::type>::type
			_Signed;

	typedef
		typename _If<is_same<_Signed, signed char>::value, unsigned char,
		typename _If<is_same<_Signed, short      >::value, unsigned short,
		typename _If<is_same<_Signed, int        >::value, unsigned int,
		typename _If<is_same<_Signed, long       >::value, unsigned long,
			unsigned long long
		>::type>::type>::type>::type
			_Unsigned;
	};

template<class _Ty>
	struct _Change_sign<const _Ty>
	{	
	typedef const typename _Change_sign<_Ty>::_Signed _Signed;
	typedef const typename _Change_sign<_Ty>::_Unsigned _Unsigned;
	};

template<class _Ty>
	struct _Change_sign<volatile _Ty>
	{	
	typedef volatile typename _Change_sign<_Ty>::_Signed _Signed;
	typedef volatile typename _Change_sign<_Ty>::_Unsigned _Unsigned;
	};

template<class _Ty>
	struct _Change_sign<const volatile _Ty>
	{	
	typedef const volatile typename _Change_sign<_Ty>::_Signed _Signed;
	typedef const volatile typename _Change_sign<_Ty>::_Unsigned _Unsigned;
	};

	
template<class _Ty>
	struct make_signed
	{	
	typedef typename _Change_sign<_Ty>::_Signed type;
	};

	
template<class _Ty>
	struct make_unsigned
	{	
	typedef typename _Change_sign<_Ty>::_Unsigned type;
	};

	

template<class _Ty>
	struct alignment_of
		: integral_constant<size_t, alignof(_Ty)>
	{	
	};

	




template<class _Ty,
	size_t _Len>
	union _Align_type
	{	
	_Ty _Val;
	char _Pad[_Len];
	};

template<size_t _Len,
	size_t _Align,
	class _Ty,
	bool _Ok>
	struct _Aligned;

template<size_t _Len,
	size_t _Align,
	class _Ty>
	struct _Aligned<_Len, _Align, _Ty, true>
	{	
	typedef _Align_type<_Ty, _Len> type;
	};

template<size_t _Len,
	size_t _Align>
	struct _Aligned<_Len, _Align, double, false>
	{	
	typedef _Align_type<max_align_t, _Len> type;
	};

template<size_t _Len,
	size_t _Align>
	struct _Aligned<_Len, _Align, int, false>
	{	
	typedef typename _Aligned<_Len, _Align, double, _Align <= alignment_of<double>::value>::type type;
	};

template<size_t _Len,
	size_t _Align>
	struct _Aligned<_Len, _Align, short, false>
	{	
	typedef typename _Aligned<_Len, _Align, int, _Align <= alignment_of<int>::value>::type type;
	};

template<size_t _Len,
	size_t _Align>
	struct _Aligned<_Len, _Align, char, false>
	{	
	typedef typename _Aligned<_Len, _Align, short, _Align <= alignment_of<short>::value>::type type;
	};

template<size_t _Len,
	size_t _Align = alignment_of<max_align_t>::value>
	struct aligned_storage
	{	
	typedef typename _Aligned<_Len, _Align, char, _Align <= alignment_of<char>::value>::type type;
	};




	
template<size_t... _Vals>
	struct _Maximum;

template<>
	struct _Maximum<>
	{	
	static constexpr size_t value = 0;
	};

template<size_t _Val>
	struct _Maximum<_Val>
	{	
	static constexpr size_t value = _Val;
	};

template<size_t _First,
	size_t _Second,
	size_t... _Rest>
	struct _Maximum<_First, _Second, _Rest...>
		: _Maximum<(_First < _Second ? _Second : _First), _Rest...>
	{	
	};

template<size_t _Len,
	class... _Types>
	struct aligned_union
	{	
	static constexpr size_t _Max_len = _Maximum<
		_Len, sizeof(_Types)...>::value;	
	static constexpr size_t alignment_value = _Maximum<
		alignment_of<_Types>::value...>::value;
	typedef typename aligned_storage<_Max_len, alignment_value>::type type;
	};

	
template<class _Ty>
	struct underlying_type
	{	
	typedef __underlying_type(_Ty) type;
	};

	
template<class _Ty>
	struct rank
		: integral_constant<size_t, 0>
	{	
	};

template<class _Ty, size_t _Ix>
	struct rank<_Ty[_Ix]>
		: integral_constant<size_t, rank<_Ty>::value + 1>
	{	
	};

template<class _Ty>
	struct rank<_Ty[]>
		: integral_constant<size_t, rank<_Ty>::value + 1>
	{	
	};

	
template<class _Ty, unsigned int _Nx>
	struct _Extent
		: integral_constant<size_t, 0>
	{	
	};

template<class _Ty, size_t _Ix>
	struct _Extent<_Ty[_Ix], 0>
		: integral_constant<size_t, _Ix>
	{	
	};

template<class _Ty, unsigned int _Nx, size_t _Ix>
	struct _Extent<_Ty[_Ix], _Nx>
		: _Extent<_Ty, _Nx - 1>
	{	
	};

template<class _Ty, unsigned int _Nx>
	struct _Extent<_Ty[], _Nx>
		: _Extent<_Ty, _Nx - 1>
	{	
	};

template<class _Ty, unsigned int _Nx = 0>
	struct extent
		: _Extent<_Ty, _Nx>
	{	
	};

	
template<class _Base,
	class _Der>
	struct is_base_of
		: _Cat_base<__is_base_of(_Base, _Der)>
	{	
	};

	
template<class _Ty>
	struct decay
	{	
	typedef typename remove_reference<_Ty>::type _Ty1;

	typedef typename _If<is_array<_Ty1>::value,
		typename remove_extent<_Ty1>::type *,
		typename _If<is_function<_Ty1>::value,
			typename add_pointer<_Ty1>::type,
			typename remove_cv<_Ty1>::type>::type>::type type;
	};

	
template<class...>
	struct _Conjunction;

template<bool,
	class _Lhs,
	class... _Traits>
	struct _Choose_conjunction
	{	
	typedef _Lhs type;
	};

template<class _Lhs,
	class... _Traits>
	struct _Choose_conjunction<true, _Lhs, _Traits...>
	{	
	typedef typename _Conjunction<_Traits...>::type type;
	};

template<>
	struct _Conjunction<>
	{	
	typedef true_type type;
	};

template<class _Trait>
	struct _Conjunction<_Trait>
	{	
	typedef _Trait type;
	};

template<class _Lhs,
	class... _Traits>
	struct _Conjunction<_Lhs, _Traits...>
	{	
	typedef typename _Choose_conjunction<_Lhs::value, _Lhs, _Traits...>::type type;
	};

template<class... _Traits>
	struct conjunction
		: _Conjunction<_Traits...>::type
	{	
		
		
	};

	
template<class...>
	struct _Disjunction;

template<bool,
	class _Lhs,
	class... _Traits>
	struct _Choose_disjunction
	{	
	typedef _Lhs type;
	};

template<class _Lhs,
	class... _Traits>
	struct _Choose_disjunction<false, _Lhs, _Traits...>
	{	
	typedef typename _Disjunction<_Traits...>::type type;
	};

template<>
	struct _Disjunction<>
	{	
	typedef false_type type;
	};

template<class _Trait>
	struct _Disjunction<_Trait>
	{	
	typedef _Trait type;
	};

template<class _Lhs,
	class... _Traits>
	struct _Disjunction<_Lhs, _Traits...>
	{	
	typedef typename _Choose_disjunction<_Lhs::value, _Lhs, _Traits...>::type type;
	};

template<class... _Traits>
	struct disjunction
		: _Disjunction<_Traits...>::type
	{	
		
		
	};

	
template<class _Trait>
	struct negation
		: bool_constant<!_Trait::value>
	{	
	};


namespace tr1 {	
using ::std:: add_const;
using ::std:: add_cv;
using ::std:: add_pointer;
using ::std:: add_volatile;
using ::std:: aligned_storage;
using ::std:: alignment_of;
using ::std:: conditional;
using ::std:: decay;
using ::std:: enable_if;
using ::std:: extent;
using ::std:: false_type;
using ::std:: has_virtual_destructor;
using ::std:: integral_constant;
using ::std:: is_abstract;
using ::std:: is_arithmetic;
using ::std:: is_array;
using ::std:: is_base_of;
using ::std:: is_class;
using ::std:: is_compound;
using ::std:: is_const;
using ::std:: is_convertible;
using ::std:: is_empty;
using ::std:: is_enum;
using ::std:: is_floating_point;
using ::std:: is_function;
using ::std:: is_fundamental;
using ::std:: is_integral;
using ::std:: is_member_function_pointer;
using ::std:: is_member_object_pointer;
using ::std:: is_member_pointer;
using ::std:: is_object;
using ::std:: is_pod;
using ::std:: is_pointer;
using ::std:: is_polymorphic;
using ::std:: is_reference;
using ::std:: is_same;
using ::std:: is_scalar;
using ::std:: is_signed;
using ::std:: is_union;
using ::std:: is_unsigned;
using ::std:: is_void;
using ::std:: is_volatile;
using ::std:: make_signed;
using ::std:: make_unsigned;
using ::std:: rank;
using ::std:: remove_all_extents;
using ::std:: remove_const;
using ::std:: remove_cv;
using ::std:: remove_extent;
using ::std:: remove_pointer;
using ::std:: remove_reference;
using ::std:: remove_volatile;
using ::std:: true_type;
	}	
#line 1156 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"

		
template<class... _Ty>
	struct common_type;

template<class _Ty>
	struct common_type<_Ty>
	{	
	typedef typename decay<_Ty>::type type;
	};

template<class _Ty0,
	class _Ty1>
	struct common_type<_Ty0, _Ty1>
	{	
	typedef typename decay<
		decltype(_Always_false<_Ty0>::value
			? ::std:: declval<_Ty0>()
			: ::std:: declval<_Ty1>())
	>::type type;
	};

template<class _Ty0,
	class _Ty1,
	class... _Ty>
	struct common_type<_Ty0, _Ty1, _Ty...>
	{	
	typedef typename common_type<
		typename common_type<_Ty0, _Ty1>::type, _Ty...
	>::type type;
	};

	
template<class _Ty,
	_Ty... _Vals>
	struct integer_sequence
	{	
	static_assert(is_integral<_Ty>::value,
		"integer_sequence<T, I...> requires T to be an integral type.");

	typedef integer_sequence<_Ty, _Vals...> type;
	typedef _Ty value_type;

	static constexpr size_t size() noexcept
		{	
		return (sizeof...(_Vals));
		}
	};

	
 




































template<class _Ty,
	_Ty _Size>
	using make_integer_sequence = __make_integer_seq<integer_sequence, _Ty, _Size>;
 #line 1247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"

template<size_t... _Vals>
	using index_sequence = integer_sequence<size_t, _Vals...>;

template<size_t _Size>
	using make_index_sequence = make_integer_sequence<size_t, _Size>;

template<class... _Types>
	using index_sequence_for = make_index_sequence<sizeof...(_Types)>;


	
template<class _Ty>
	struct identity
	{	
	typedef _Ty type;

	const _Ty& operator()(const _Ty& _Left) const
		{	
		return (_Left);
		}
	};
#line 1270 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"

	
template<class _Ty> inline
	constexpr _Ty&& forward(
		typename remove_reference<_Ty>::type& _Arg) noexcept
	{	
	return (static_cast<_Ty&&>(_Arg));
	}

template<class _Ty> inline
	constexpr _Ty&& forward(
		typename remove_reference<_Ty>::type&& _Arg) noexcept
	{	
	static_assert(!is_lvalue_reference<_Ty>::value, "bad forward call");
	return (static_cast<_Ty&&>(_Arg));
	}

		
template<class _Ty> inline
	constexpr typename remove_reference<_Ty>::type&&
		move(_Ty&& _Arg) noexcept
	{	
	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));
	}

		
template<class _Ty> inline
	constexpr typename _If<!is_nothrow_move_constructible<_Ty>::value
		&& is_copy_constructible<_Ty>::value,
			const _Ty&, _Ty&&>::type
	move_if_noexcept(_Ty& _Arg) noexcept
	{	
	return (::std:: move(_Arg));
	}

	
template<class...>
	struct _Param_tester
	{	
	typedef void type;
	};

	
template<class... _Types>	
	using void_t = typename _Param_tester<_Types...>::type;

	
struct _Invoker_pmf_object
	{	
	template<class _Decayed,
		class _Ty1,
		class... _Types2>
		static auto _Call(_Decayed _Pmf, _Ty1&& _Arg1, _Types2&&... _Args2)
		-> decltype((::std:: forward<_Ty1>(_Arg1).*_Pmf)(
			::std:: forward<_Types2>(_Args2)...))
		{	
		return ((::std:: forward<_Ty1>(_Arg1).*_Pmf)(
			::std:: forward<_Types2>(_Args2)...));
		}
	};

struct _Invoker_pmf_pointer
	{	
	template<class _Decayed,
		class _Ty1,
		class... _Types2>
		static auto _Call(_Decayed _Pmf, _Ty1&& _Arg1, _Types2&&... _Args2)
		-> decltype(((*::std:: forward<_Ty1>(_Arg1)).*_Pmf)(
			::std:: forward<_Types2>(_Args2)...))
		{	
		return (((*::std:: forward<_Ty1>(_Arg1)).*_Pmf)(
			::std:: forward<_Types2>(_Args2)...));
		}
	};

struct _Invoker_pmd_object
	{	
	template<class _Decayed,
		class _Ty1>
		static auto _Call(_Decayed _Pmd, _Ty1&& _Arg1)
		-> decltype(::std:: forward<_Ty1>(_Arg1).*_Pmd)
		{	
		return (::std:: forward<_Ty1>(_Arg1).*_Pmd);
		}
	};

struct _Invoker_pmd_pointer
	{	
	template<class _Decayed,
		class _Ty1>
		static auto _Call(_Decayed _Pmd, _Ty1&& _Arg1)
		-> decltype((*::std:: forward<_Ty1>(_Arg1)).*_Pmd)
		{	
		return ((*::std:: forward<_Ty1>(_Arg1)).*_Pmd);
		}
	};

struct _Invoker_functor
	{	
	template<class _Callable,
		class... _Types>
		static auto _Call(_Callable&& _Obj, _Types&&... _Args)
		-> decltype(::std:: forward<_Callable>(_Obj)(
			::std:: forward<_Types>(_Args)...))
		{	
		return (::std:: forward<_Callable>(_Obj)(
			::std:: forward<_Types>(_Args)...));
		}
	};

template<class _Callable,
	class _Ty1,
	class _Decayed = typename decay<_Callable>::type,
	bool _Is_pmf = is_member_function_pointer<_Decayed>::value,
	bool _Is_pmd = is_member_object_pointer<_Decayed>::value>
	struct _Invoker1;

template<class _Callable,
	class _Ty1,
	class _Decayed>
	struct _Invoker1<_Callable, _Ty1, _Decayed, true, false>
		: _If<is_base_of<
			typename _Is_memfunptr<_Decayed>::_Class_type,
			typename decay<_Ty1>::type>::value,
		_Invoker_pmf_object,
		_Invoker_pmf_pointer>::type
	{	
	};

template<class _Callable,
	class _Ty1,
	class _Decayed>
	struct _Invoker1<_Callable, _Ty1, _Decayed, false, true>
		: _If<is_base_of<
			typename _Is_member_object_pointer<_Decayed>::_Class_type,
			typename decay<_Ty1>::type>::value,
		_Invoker_pmd_object,
		_Invoker_pmd_pointer>::type
	{	
	};

template<class _Callable,
	class _Ty1,
	class _Decayed>
	struct _Invoker1<_Callable, _Ty1, _Decayed, false, false>
		: _Invoker_functor
	{	
	};

template<class _Callable,
	class... _Types>
	struct _Invoker;

template<class _Callable>
	struct _Invoker<_Callable>
		: _Invoker_functor
	{	
	};

template<class _Callable,
	class _Ty1,
	class... _Types2>
	struct _Invoker<_Callable, _Ty1, _Types2...>
		: _Invoker1<_Callable, _Ty1>
	{	
	};

template<class _Callable,
	class... _Types> inline
	auto invoke(_Callable&& _Obj, _Types&&... _Args)
	-> decltype(_Invoker<_Callable, _Types...>::_Call(
		::std:: forward<_Callable>(_Obj), ::std:: forward<_Types>(_Args)...))
	{	
	return (_Invoker<_Callable, _Types...>::_Call(
		::std:: forward<_Callable>(_Obj), ::std:: forward<_Types>(_Args)...));
	}

template<class _Rx,
	bool = is_void<_Rx>::value>
	struct _Forced
	{	
	};

struct _Unforced
	{	
	};

template<class _Cv_void,
	class... _Valtys> inline
	void _Invoke_ret(_Forced<_Cv_void, true>, _Valtys&&... _Vals)
	{	
	::std:: invoke(::std:: forward<_Valtys>(_Vals)...);
	}

template<class _Rx,
	class... _Valtys> inline
	_Rx _Invoke_ret(_Forced<_Rx, false>, _Valtys&&... _Vals)
	{	
	return (::std:: invoke(::std:: forward<_Valtys>(_Vals)...));
	}

template<class... _Valtys> inline
	auto _Invoke_ret(_Forced<_Unforced, false>, _Valtys&&... _Vals)
	-> decltype(::std:: invoke(::std:: forward<_Valtys>(_Vals)...))
	{	
	return (::std:: invoke(::std:: forward<_Valtys>(_Vals)...));
	}

	
struct _Unique_tag_result_of
	{	
	};

template<class _Void,
	class... _Types>
	struct _Result_of
	{	
	};

template<class... _Types>
	struct _Result_of<
		void_t<
			_Unique_tag_result_of,	
			decltype(::std:: invoke(::std:: declval<_Types>()...))>,
		_Types...>
	{	
	typedef decltype(::std:: invoke(::std:: declval<_Types>()...)) type;
	};

template<class _Fty>
	struct result_of
	{	
	static_assert(_Always_false<_Fty>::value,
		"result_of<CallableType> is invalid; use "
		"result_of<CallableType(zero or more argument types)> instead.");
	};









template<class _Fty, class... _Args> struct result_of<_Fty __cdecl (_Args...)> : _Result_of<void, _Fty, _Args...> { };    template<class _Fty, class... _Args> struct result_of<_Fty __vectorcall (_Args...)> : _Result_of<void, _Fty, _Args...> { };


	
template<class _Ty,
	class = void>
	struct _Weak_result_type
	{	
	};

template<class _Ty>
	struct _Weak_result_type<_Ty, void_t<
		typename _Ty::result_type> >
	{	
	typedef typename _Ty::result_type result_type;
	};

template<class _Ty,
	class = void>
	struct _Weak_argument_type
		: _Weak_result_type<_Ty>
	{	
	};

template<class _Ty>
	struct _Weak_argument_type<_Ty, void_t<
		typename _Ty::argument_type> >
		: _Weak_result_type<_Ty>
	{	
	typedef typename _Ty::argument_type argument_type;
	};

template<class _Ty,
	class = void>
	struct _Weak_binary_args
		: _Weak_argument_type<_Ty>
	{	
	};

template<class _Ty>
	struct _Weak_binary_args<_Ty, void_t<
		typename _Ty::first_argument_type,
		typename _Ty::second_argument_type> >
		: _Weak_argument_type<_Ty>
	{	
	typedef typename _Ty::first_argument_type first_argument_type;
	typedef typename _Ty::second_argument_type second_argument_type;
	};

template<class _Ty>
	struct _Weak_types
	{	
	typedef _Is_function<typename remove_pointer<_Ty>::type> _Is_f_or_pf;
	typedef _Is_memfunptr<typename remove_cv<_Ty>::type> _Is_pmf;
	typedef typename _If<_Is_f_or_pf::_Bool_type::value, _Is_f_or_pf,
		typename _If<_Is_pmf::_Bool_type::value, _Is_pmf,
		_Weak_binary_args<_Ty> >::type>::type type;
	};

	
template<class _Ty>
	class reference_wrapper
		: public _Weak_types<_Ty>::type
	{	
public:
	static_assert(is_object<_Ty>::value || is_function<_Ty>::value,
		"reference_wrapper<T> requires T to be an object type "
		"or a function type.");

	typedef _Ty type;

	reference_wrapper(_Ty& _Val) noexcept
		: _Ptr(::std:: addressof(_Val))
		{	
		}

	operator _Ty&() const noexcept
		{	
		return (*_Ptr);
		}

	_Ty& get() const noexcept
		{	
		return (*_Ptr);
		}

	template<class... _Types>
		auto operator()(_Types&&... _Args) const
		-> decltype(::std:: invoke(get(), ::std:: forward<_Types>(_Args)...))
		{	
		return (::std:: invoke(get(), ::std:: forward<_Types>(_Args)...));
		}

	reference_wrapper(_Ty&&) = delete;

private:
	_Ty *_Ptr;
	};

	
template<class _Ty> inline
	reference_wrapper<_Ty>
		ref(_Ty& _Val) noexcept
	{	
	return (reference_wrapper<_Ty>(_Val));
	}

template<class _Ty>
	void ref(const _Ty&&) = delete;

template<class _Ty> inline
	reference_wrapper<_Ty>
		ref(reference_wrapper<_Ty> _Val) noexcept
	{	
	return (::std:: ref(_Val.get()));
	}

template<class _Ty> inline
	reference_wrapper<const _Ty>
		cref(const _Ty& _Val) noexcept
	{	
	return (reference_wrapper<const _Ty>(_Val));
	}

template<class _Ty>
	void cref(const _Ty&&) = delete;

template<class _Ty> inline
	reference_wrapper<const _Ty>
		cref(reference_wrapper<_Ty> _Val) noexcept
	{	
	return (::std:: cref(_Val.get()));
	}

	
template<class _Ty>
	struct _Unrefwrap_helper
	{	
	typedef _Ty type;
	static constexpr bool _Is_refwrap = false;
	};

template<class _Ty>
	struct _Unrefwrap_helper<reference_wrapper<_Ty> >
	{	
	typedef _Ty& type;
	static constexpr bool _Is_refwrap = true;
	};

template<class _Ty>
	struct _Unrefwrap
	{	
	typedef typename decay<_Ty>::type _Ty1;
	typedef typename _Unrefwrap_helper<_Ty1>::type type;
	static constexpr bool _Is_refwrap = _Unrefwrap_helper<_Ty1>::_Is_refwrap;
	};


namespace tr1 {	
using ::std:: cref;
using ::std:: ref;
using ::std:: reference_wrapper;
using ::std:: result_of;
	}	
#line 1680 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"

		
template<class _Ty>
	struct _Is_swappable;

		
template<class _Ty>
	struct _Is_nothrow_swappable;

		




#line 1695 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template<class _Ty,
	class = void> inline
#line 1698 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
	void swap(_Ty&, _Ty&)
		noexcept(is_nothrow_move_constructible<_Ty>::value && is_nothrow_move_assignable<_Ty>::value);
#line 1701 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"

template<class _Ty,
	size_t _Size,
	class = typename enable_if<_Is_swappable<_Ty>::value>::type> inline
	void swap(_Ty (&)[_Size], _Ty (&)[_Size])
		noexcept(_Is_nothrow_swappable<_Ty>::value);

		
template<class _Ty1,
	class _Ty2,
	class = void>
	struct _Swappable_with_helper
		: false_type
	{	
	};

struct _Swappable_with_helper_unique_type {}; 
template<class _Ty1,
	class _Ty2>
	struct _Swappable_with_helper<_Ty1, _Ty2, void_t<
		_Swappable_with_helper_unique_type,
		decltype(swap(::std:: declval<_Ty1>(), ::std:: declval<_Ty2>()))>>
		: true_type
	{	
	};

		
template<class _Ty1,
	class _Ty2>
	struct _Is_swappable_with
		: conjunction<
			_Swappable_with_helper<_Ty1, _Ty2>,
			_Swappable_with_helper<_Ty2, _Ty1>>::type
	{	
		
	};

		
template<class _Ty>
	struct _Is_swappable
		: _Is_swappable_with<
			typename add_lvalue_reference<_Ty>::type,
			typename add_lvalue_reference<_Ty>::type>::type
	{	
	};

		
template<class _Ty1,
	class _Ty2>
	struct _Swap_cannot_throw
	{	
		
		

	static constexpr bool value = 
		noexcept(swap(::std:: declval<_Ty1>(), ::std:: declval<_Ty2>()))
		&& noexcept(swap(::std:: declval<_Ty2>(), ::std:: declval<_Ty1>()));


#line 1761 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
	using type = bool_constant<value>;
	};

		
template<class _Ty1,
	class _Ty2>
	struct _Is_nothrow_swappable_with
		: conjunction<
			_Is_swappable_with<_Ty1, _Ty2>,
			_Swap_cannot_throw<_Ty1, _Ty2>>::type
	{	
		
	};

		
template<class _Ty>
	struct _Is_nothrow_swappable
		: _Is_nothrow_swappable_with<
			typename add_lvalue_reference<_Ty>::type,
			typename add_lvalue_reference<_Ty>::type>::type
	{	
	};

































#line 1817 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"

		
template<class _Ty>
	using remove_const_t = typename remove_const<_Ty>::type;

template<class _Ty>
	using remove_volatile_t = typename remove_volatile<_Ty>::type;

template<class _Ty>
	using remove_cv_t = typename remove_cv<_Ty>::type;

template<class _Ty>
	using add_const_t = typename add_const<_Ty>::type;

template<class _Ty>
	using add_volatile_t = typename add_volatile<_Ty>::type;

template<class _Ty>
	using add_cv_t = typename add_cv<_Ty>::type;

template<class _Ty>
	using remove_reference_t = typename remove_reference<_Ty>::type;

template<class _Ty>
	using add_lvalue_reference_t = typename add_lvalue_reference<_Ty>::type;

template<class _Ty>
	using add_rvalue_reference_t = typename add_rvalue_reference<_Ty>::type;

template<class _Ty>
	using make_signed_t = typename make_signed<_Ty>::type;

template<class _Ty>
	using make_unsigned_t = typename make_unsigned<_Ty>::type;

template<class _Ty>
	using remove_extent_t = typename remove_extent<_Ty>::type;

template<class _Ty>
	using remove_all_extents_t = typename remove_all_extents<_Ty>::type;

template<class _Ty>
	using remove_pointer_t = typename remove_pointer<_Ty>::type;

template<class _Ty>
	using add_pointer_t = typename add_pointer<_Ty>::type;

template<size_t _Len,
	size_t _Align = alignment_of<max_align_t>::value>
	using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;

template<size_t _Len,
	class... _Types>
	using aligned_union_t = typename aligned_union<_Len, _Types...>::type;

template<class _Ty>
	using decay_t = typename decay<_Ty>::type;

template<bool _Test,
	class _Ty = void>
	using enable_if_t = typename enable_if<_Test, _Ty>::type;

template<bool _Test,
	class _Ty1,
	class _Ty2>
	using conditional_t = typename conditional<_Test, _Ty1, _Ty2>::type;

template<class... _Ty>
	using common_type_t = typename common_type<_Ty...>::type;

template<class _Ty>
	using underlying_type_t = typename underlying_type<_Ty>::type;

template<class _Ty>
	using result_of_t = typename result_of<_Ty>::type;

	
 
template<class _Ty>
	constexpr bool is_void_v = is_void<_Ty>::value;
template<class _Ty>
	constexpr bool is_null_pointer_v = is_null_pointer<_Ty>::value;
template<class _Ty>
	constexpr bool is_array_v = is_array<_Ty>::value;
template<class _Ty>
	constexpr bool is_pointer_v = is_pointer<_Ty>::value;
template<class _Ty>
	constexpr bool is_lvalue_reference_v = is_lvalue_reference<_Ty>::value;
template<class _Ty>
	constexpr bool is_rvalue_reference_v = is_rvalue_reference<_Ty>::value;
template<class _Ty>
	constexpr bool is_member_object_pointer_v = is_member_object_pointer<_Ty>::value;
template<class _Ty>
	constexpr bool is_member_function_pointer_v = is_member_function_pointer<_Ty>::value;
template<class _Ty>
	constexpr bool is_enum_v = is_enum<_Ty>::value;
template<class _Ty>
	constexpr bool is_union_v = is_union<_Ty>::value;
template<class _Ty>
	constexpr bool is_class_v = is_class<_Ty>::value;
template<class _Ty>
	constexpr bool is_reference_v = is_reference<_Ty>::value;
template<class _Ty>
	constexpr bool is_fundamental_v = is_fundamental<_Ty>::value;
template<class _Ty>
	constexpr bool is_object_v = is_object<_Ty>::value;
template<class _Ty>
	constexpr bool is_scalar_v = is_scalar<_Ty>::value;
template<class _Ty>
	constexpr bool is_compound_v = is_compound<_Ty>::value;
template<class _Ty>
	constexpr bool is_member_pointer_v = is_member_pointer<_Ty>::value;
template<class _Ty>
	constexpr bool is_const_v = is_const<_Ty>::value;
template<class _Ty>
	constexpr bool is_volatile_v = is_volatile<_Ty>::value;
template<class _Ty>
	constexpr bool is_trivial_v = is_trivial<_Ty>::value;
template<class _Ty>
	constexpr bool is_trivially_copyable_v = is_trivially_copyable<_Ty>::value;
template<class _Ty>
	constexpr bool is_standard_layout_v = is_standard_layout<_Ty>::value;
template<class _Ty>
	constexpr bool is_pod_v = is_pod<_Ty>::value;
template<class _Ty>
	constexpr bool is_literal_type_v = is_literal_type<_Ty>::value;
template<class _Ty>
	constexpr bool is_empty_v = is_empty<_Ty>::value;
template<class _Ty>
	constexpr bool is_polymorphic_v = is_polymorphic<_Ty>::value;
template<class _Ty>
	constexpr bool is_abstract_v = is_abstract<_Ty>::value;
template<class _Ty>
	constexpr bool is_final_v = is_final<_Ty>::value;
template<class _Ty>
	constexpr bool is_signed_v = is_signed<_Ty>::value;
template<class _Ty>
	constexpr bool is_unsigned_v = is_unsigned<_Ty>::value;
template<class _Ty,
	class... _Args>
	constexpr bool is_constructible_v = is_constructible<_Ty, _Args...>::value;
template<class _Ty>
	constexpr bool is_default_constructible_v = is_default_constructible<_Ty>::value;
template<class _Ty>
	constexpr bool is_copy_constructible_v = is_copy_constructible<_Ty>::value;
template<class _Ty>
	constexpr bool is_move_constructible_v = is_move_constructible<_Ty>::value;
template<class _Ty,
	class _Uty>
	constexpr bool is_assignable_v = is_assignable<_Ty, _Uty>::value;
template<class _Ty>
	constexpr bool is_copy_assignable_v = is_copy_assignable<_Ty>::value;
template<class _Ty>
	constexpr bool is_move_assignable_v = is_move_assignable<_Ty>::value;






#line 1978 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template<class _Ty>
	constexpr bool is_destructible_v = is_destructible<_Ty>::value;
template<class _Ty,
	class... _Args>
	constexpr bool is_trivially_constructible_v = is_trivially_constructible<_Ty, _Args...>::value;
template<class _Ty>
	constexpr bool is_trivially_default_constructible_v = is_trivially_default_constructible<_Ty>::value;
template<class _Ty>
	constexpr bool is_trivially_copy_constructible_v = is_trivially_copy_constructible<_Ty>::value;
template<class _Ty>
	constexpr bool is_trivially_move_constructible_v = is_trivially_move_constructible<_Ty>::value;
template<class _Ty,
	class _Uty>
	constexpr bool is_trivially_assignable_v = is_trivially_assignable<_Ty, _Uty>::value;
template<class _Ty>
	constexpr bool is_trivially_copy_assignable_v = is_trivially_copy_assignable<_Ty>::value;
template<class _Ty>
	constexpr bool is_trivially_move_assignable_v = is_trivially_move_assignable<_Ty>::value;
template<class _Ty>
	constexpr bool is_trivially_destructible_v = is_trivially_destructible<_Ty>::value;
template<class _Ty,
	class... _Args>
	constexpr bool is_nothrow_constructible_v = is_nothrow_constructible<_Ty, _Args...>::value;
template<class _Ty>
	constexpr bool is_nothrow_default_constructible_v = is_nothrow_default_constructible<_Ty>::value;
template<class _Ty>
	constexpr bool is_nothrow_copy_constructible_v = is_nothrow_copy_constructible<_Ty>::value;
template<class _Ty>
	constexpr bool is_nothrow_move_constructible_v = is_nothrow_move_constructible<_Ty>::value;
template<class _Ty,
	class _Uty>
	constexpr bool is_nothrow_assignable_v = is_nothrow_assignable<_Ty, _Uty>::value;
template<class _Ty>
	constexpr bool is_nothrow_copy_assignable_v = is_nothrow_copy_assignable<_Ty>::value;
template<class _Ty>
	constexpr bool is_nothrow_move_assignable_v = is_nothrow_move_assignable<_Ty>::value;






#line 2021 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template<class _Ty>
	constexpr bool is_nothrow_destructible_v = is_nothrow_destructible<_Ty>::value;
template<class _Ty>
	constexpr bool has_virtual_destructor_v = has_virtual_destructor<_Ty>::value;
template<class _Ty>
	constexpr size_t alignment_of_v = alignment_of<_Ty>::value;
template<class _Ty>
	constexpr size_t rank_v = rank<_Ty>::value;
template<class _Ty,
	unsigned int _Ix = 0>
	constexpr size_t extent_v = extent<_Ty, _Ix>::value;
template<class _Base,
	class _Derived>
	constexpr bool is_base_of_v = is_base_of<_Base, _Derived>::value;
template<class _From,
	class _To>
	constexpr bool is_convertible_v = is_convertible<_From, _To>::value;
template<class... _Traits>
	constexpr bool conjunction_v = conjunction<_Traits...>::value;
template<class... _Traits>
	constexpr bool disjunction_v = disjunction<_Traits...>::value;
template<class _Trait>
	constexpr bool negation_v = negation<_Trait>::value;
 #line 2045 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"

}

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 2052 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
#line 2053 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"






#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {

  


  



  




  


  #line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"

__declspec(dllimport) bool __cdecl uncaught_exception() noexcept;
__declspec(dllimport) int __cdecl uncaught_exceptions() noexcept;

}

 

#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"







#pragma once





__pragma(pack(push, 8)) extern "C" {





    


#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"















typedef struct _heapinfo
{
    int* _pentry;
    size_t _size;
    int _useflag;
} _HEAPINFO;








   
void* __cdecl _alloca(  size_t _Size);





    __declspec(dllimport) intptr_t __cdecl _get_heap_handle(void);

     
    __declspec(dllimport) int __cdecl _heapmin(void);

    
        __declspec(dllimport) int __cdecl _heapwalk(  _HEAPINFO* _EntryInfo);
    #line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"

    
          __declspec(dllimport) int __cdecl _heapchk(void);
        __declspec(dllimport) int __cdecl _resetstkoflw(void);
    #line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
     
    
    
    

    
        
    

#line 83 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"

    typedef char __static_assert_t[(sizeof(unsigned int) <= 16) != 0];


    #pragma warning(push)
    #pragma warning(disable:6540)

    __inline void* _MarkAllocaS(   void* _Ptr, unsigned int _Marker)
    {
        if (_Ptr)
        {
            *((unsigned int*)_Ptr) = _Marker;
            _Ptr = (char*)_Ptr + 16;
        }
        return _Ptr;
    }

    __inline size_t _MallocaComputeSize(size_t _Size)
    {
        size_t _MarkedSize = _Size + 16;
        return _MarkedSize > _Size ? _MarkedSize : 0;
    }

    #pragma warning(pop)

#line 109 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
















    
    







#line 135 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"




#line 140 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
#line 141 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"

    

    #pragma warning(push)
    #pragma warning(disable: 6014)
    __inline void __cdecl _freea(    void* _Memory)
    {
        unsigned int _Marker;
        if (_Memory)
        {
            _Memory = (char*)_Memory - 16;
            _Marker = *(unsigned int*)_Memory;
            if (_Marker == 0xDDDD)
            {
                free(_Memory);
            }
            





        }
    }
    #pragma warning(pop)

#line 168 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"




    
#line 174 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"



} __pragma(pack(pop))
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"







#pragma once

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"







#pragma once


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_terminate.h"







#pragma once





__pragma(pack(push, 8)) extern "C" {



typedef void (__cdecl* terminate_handler )();
typedef void (__cdecl* terminate_function)();








    __declspec(dllimport) __declspec(noreturn) void __cdecl abort();
    __declspec(dllimport) __declspec(noreturn) void __cdecl terminate() throw();

    

        __declspec(dllimport) terminate_handler __cdecl set_terminate(
              terminate_handler _NewTerminateHandler
            ) throw();

        __declspec(dllimport) terminate_handler __cdecl _get_terminate();

    #line 40 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_terminate.h"

#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_terminate.h"

} __pragma(pack(pop))

#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_terminate.h"
#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"



__pragma(pack(push, 8)) extern "C" {



typedef void (__cdecl* unexpected_handler )();
typedef void (__cdecl* unexpected_function)();






struct _EXCEPTION_POINTERS;


    
    __declspec(dllimport) __declspec(noreturn) void __cdecl unexpected() throw(...);

    

        __declspec(dllimport) unexpected_handler __cdecl set_unexpected(
              unexpected_handler _NewUnexpectedHandler
            ) throw();

        __declspec(dllimport) unexpected_handler __cdecl _get_unexpected();

        typedef void (__cdecl* _se_translator_function)(unsigned int, struct _EXCEPTION_POINTERS*);

        __declspec(dllimport) _se_translator_function __cdecl _set_se_translator(
              _se_translator_function _NewSETranslator
            );

    #line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"

    class type_info;

    __declspec(dllimport) int __cdecl _is_exception_typeof(
          type_info const&     _Type,
          _EXCEPTION_POINTERS* _ExceptionPtr
        );

    __declspec(dllimport) bool __cdecl __uncaught_exception();
    __declspec(dllimport) int  __cdecl __uncaught_exceptions();

#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"

} __pragma(pack(pop))

#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"
#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"





#pragma pack(push, 8)


__pragma(pack(push, 8)) extern "C" {

struct __std_exception_data
{
    char const* _What;
    bool        _DoFree;
};

__declspec(dllimport) void __cdecl __std_exception_copy(
       __std_exception_data const* _From,
      __std_exception_data*       _To
    );

__declspec(dllimport) void __cdecl __std_exception_destroy(
      __std_exception_data* _Data
    );

} __pragma(pack(pop))



namespace std {

class exception
{
public:

    exception() throw()
        : _Data()
    {
    }

    explicit exception(char const* const _Message) throw()
        : _Data()
    {
        __std_exception_data _InitData = { _Message, true };
        __std_exception_copy(&_InitData, &_Data);
    }

    exception(char const* const _Message, int) throw()
        : _Data()
    {
        _Data._What = _Message;
    }

    exception(exception const& _Other) throw()
        : _Data()
    {
        __std_exception_copy(&_Other._Data, &_Data);
    }

    exception& operator=(exception const& _Other) throw()
    {
        if (this == &_Other)
        {
            return *this;
        }

        __std_exception_destroy(&_Data);
        __std_exception_copy(&_Other._Data, &_Data);
        return *this;
    }

    virtual ~exception() throw()
    {
        __std_exception_destroy(&_Data);
    }

    virtual char const* what() const
    {
        return _Data._What ? _Data._What : "Unknown exception";
    }

private:

    __std_exception_data _Data;
};

class bad_exception
    : public exception
{
public:

    bad_exception() throw()
        : exception("bad exception", 1)
    {
    }
};

class bad_alloc
    : public exception
{
public:

    bad_alloc() throw()
        : exception("bad allocation", 1)
    {
    }

private:

    friend class bad_array_new_length;

    bad_alloc(char const* const _Message) throw()
        : exception(_Message, 1)
    {
    }
};

class bad_array_new_length
    : public bad_alloc
{
public:

    bad_array_new_length() throw()
        : bad_alloc("bad array new length")
    {
    }
};

} 

#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
#pragma pack(pop)





#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"

namespace std {

using ::set_terminate; using ::terminate_handler; using ::terminate; using ::set_unexpected; using ::unexpected_handler; using ::unexpected;

typedef void (__cdecl *_Prhand)(const exception&);


inline terminate_handler __cdecl get_terminate() noexcept
	{	
	return (_get_terminate());
	}

inline unexpected_handler __cdecl get_unexpected() noexcept
	{	
	return (_get_unexpected());
	}
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"

}

 




































































































































































#line 229 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"









#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"

__declspec(dllimport) void __cdecl __ExceptionPtrCreate(  void*);
__declspec(dllimport) void __cdecl __ExceptionPtrDestroy(  void*);
__declspec(dllimport) void __cdecl __ExceptionPtrCopy(  void*,   const void*);
__declspec(dllimport) void __cdecl __ExceptionPtrAssign(  void*,   const void*);
__declspec(dllimport) bool __cdecl __ExceptionPtrCompare(  const void*,   const void*);
__declspec(dllimport) bool __cdecl __ExceptionPtrToBool(  const void*);
__declspec(dllimport) void __cdecl __ExceptionPtrSwap(  void*,   void*);
__declspec(dllimport) void __cdecl __ExceptionPtrCurrentException(  void*);
[[noreturn]] __declspec(dllimport) void __cdecl __ExceptionPtrRethrow(  const void*);
__declspec(dllimport) void __cdecl __ExceptionPtrCopyException(
	  void*,   const void*,   const void*);

namespace std {

class exception_ptr
	{
public:
	exception_ptr() throw ()
		{
		__ExceptionPtrCreate(this);
		}

	exception_ptr(nullptr_t) throw ()
		{
		__ExceptionPtrCreate(this);
		}

	~exception_ptr() throw ()
		{
		__ExceptionPtrDestroy(this);
		}

	exception_ptr(const exception_ptr& _Rhs) throw ()
		{
		__ExceptionPtrCopy(this, &_Rhs);
		}

	exception_ptr& operator=(const exception_ptr& _Rhs) throw ()
		{
		__ExceptionPtrAssign(this, &_Rhs);
		return *this;
		}

	exception_ptr& operator=(nullptr_t) throw ()
		{
		exception_ptr _Ptr;
		__ExceptionPtrAssign(this, &_Ptr);
		return *this;
		}

	explicit operator bool() const throw ()
		{
		return __ExceptionPtrToBool(this);
		}

	[[noreturn]] void _RethrowException() const
		{
		__ExceptionPtrRethrow(this);
		}

	static exception_ptr _Current_exception() throw ()
		{
		exception_ptr _Retval;
		__ExceptionPtrCurrentException(&_Retval);
		return _Retval;
		}

	static exception_ptr _Copy_exception(  void* _Except,   const void* _Ptr)
		{
		exception_ptr _Retval = 0;
		if (!_Ptr)
			{
			
			return _Retval;
			}
		__ExceptionPtrCopyException(&_Retval, _Except, _Ptr);
		return _Retval;
		}

private:
	void* _Data1;
	void* _Data2;
	};

inline void swap(exception_ptr& _Lhs, exception_ptr& _Rhs) throw ()
	{
	__ExceptionPtrSwap(&_Lhs, &_Rhs);
	}

inline bool operator==(const exception_ptr& _Lhs, const exception_ptr& _Rhs) throw ()
	{
	return __ExceptionPtrCompare(&_Lhs, &_Rhs);
	}

inline bool operator==(nullptr_t, const exception_ptr& _Rhs) throw ()
	{
	return !_Rhs;
	}

inline bool operator==(const exception_ptr& _Lhs, nullptr_t) throw ()
	{
	return !_Lhs;
	}

inline bool operator!=(const exception_ptr& _Lhs, const exception_ptr& _Rhs) throw ()
	{
	return !(_Lhs == _Rhs);
	}

inline bool operator!=(nullptr_t _Lhs, const exception_ptr& _Rhs) throw ()
	{
	return !(_Lhs == _Rhs);
	}

inline bool operator!=(const exception_ptr& _Lhs, nullptr_t _Rhs) throw ()
	{
	return !(_Lhs == _Rhs);
	}

inline exception_ptr current_exception() noexcept
	{
	return exception_ptr::_Current_exception();
	}

[[noreturn]] inline void rethrow_exception(  exception_ptr _Ptr)
	{
	_Ptr._RethrowException();
	}

template<class _Ex> void *__GetExceptionInfo(_Ex);

template<class _Ex> exception_ptr make_exception_ptr(_Ex _Except) noexcept
	{
	return exception_ptr::_Copy_exception(::std:: addressof(_Except), __GetExceptionInfo(_Except));
	}

	
class nested_exception
	{	
public:
	nested_exception() noexcept
		: _Exc(::std:: current_exception())
		{	
		}

	nested_exception(const nested_exception&) noexcept = default;
	nested_exception& operator=(const nested_exception&) noexcept = default;
	virtual ~nested_exception() noexcept = default;

	[[noreturn]] void rethrow_nested() const
		{	
		if (_Exc)
			::std:: rethrow_exception(_Exc);
		else
			::std:: terminate();
		}

	::std:: exception_ptr nested_ptr() const noexcept
		{	
		return (_Exc);
		}

private:
	::std:: exception_ptr _Exc;
	};

	
template<class _Ty,
	class _Uty>
	struct _With_nested
		: _Uty, nested_exception
	{	
	explicit _With_nested(_Ty&& _Arg)
		: _Uty(::std:: forward<_Ty>(_Arg)), nested_exception()
		{	
		}
	};

template<class _Ty>
	[[noreturn]] inline void _Throw_with_nested(_Ty&& _Arg, true_type)
	{	
	typedef typename remove_reference<_Ty>::type _Uty;
	typedef _With_nested<_Ty, _Uty> _Glued;

	throw _Glued(::std:: forward<_Ty>(_Arg));
	}

template<class _Ty>
	[[noreturn]] inline void _Throw_with_nested(_Ty&& _Arg, false_type)
	{	
	typedef typename decay<_Ty>::type _Decayed;

	throw _Decayed(::std:: forward<_Ty>(_Arg));
	}

template<class _Ty>
	[[noreturn]] inline void throw_with_nested(_Ty&& _Arg)
	{	
	typedef typename remove_reference<_Ty>::type _Uty;

	integral_constant<bool,
		is_class<_Uty>::value
		&& !is_base_of<nested_exception, _Uty>::value
		&& !is_final<_Uty>::value> _Tag;

	_Throw_with_nested(::std:: forward<_Ty>(_Arg), _Tag);
	}

	
template<class _Ty> inline
	void _Rethrow_if_nested(const _Ty *_Ptr, true_type)
	{	
	const auto _Nested = dynamic_cast<const nested_exception *>(_Ptr);

	if (_Nested)
		_Nested->rethrow_nested();
	}

template<class _Ty> inline
	void _Rethrow_if_nested(const _Ty *, false_type)
	{	
	}

template<class _Ty> inline
	void rethrow_if_nested(const _Ty& _Arg)
	{	
	integral_constant<bool,
		is_polymorphic<_Ty>::value
		&& (!is_base_of<nested_exception, _Ty>::value
			|| is_convertible<_Ty *, nested_exception *>::value)> _Tag;

	_Rethrow_if_nested(::std:: addressof(_Arg), _Tag);
	}
}

 
 #pragma warning(pop)
 #pragma pack(pop)

#line 480 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
#line 481 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\new"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"







#pragma once

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"































































































































































































































































































































#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"


extern "C++" {

#pragma pack(push, 8)

#pragma warning(push)
#pragma warning(disable: 4985) 






    namespace std
    {
        struct nothrow_t { };

        extern nothrow_t const nothrow;
    }
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"

   
__declspec(allocator) void* __cdecl operator new(
    size_t _Size
    );

     
__declspec(allocator) void* __cdecl operator new(
    size_t                _Size,
    std::nothrow_t const&
    ) throw();

   
__declspec(allocator) void* __cdecl operator new[](
    size_t _Size
    );

     
__declspec(allocator) void* __cdecl operator new[](
    size_t                _Size,
    std::nothrow_t const&
    ) throw();

void __cdecl operator delete(
    void* _Block
    ) throw();

void __cdecl operator delete(
    void* _Block,
    std::nothrow_t const&
    ) throw();

void __cdecl operator delete[](
    void* _Block
    ) throw();

void __cdecl operator delete[](
    void* _Block,
    std::nothrow_t const&
    ) throw();

void __cdecl operator delete(
    void*  _Block,
    size_t _Size
    ) throw();

void __cdecl operator delete[](
    void* _Block,
    size_t _Size
    ) throw();


    
       
    inline void* __cdecl operator new(size_t _Size,   void* _Where) throw()
    {
        (void)_Size;
        return _Where;
    }

    inline void __cdecl operator delete(void*, void*) throw()
    {
        return;
    }
#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"


    
       
    inline void* __cdecl operator new[](size_t _Size,   void* _Where) throw()
    {
        (void)_Size;
        return _Where;
    }

    inline void __cdecl operator delete[](void*, void*) throw()
    {
    }
#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"



#pragma warning(pop)
#pragma pack(pop)

} 
#line 119 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\new"

 #pragma pack(push,8)
 #pragma warning(push,3)
 

  



namespace std {

		
 

typedef void (__cdecl * new_handler) ();
 #line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\new"

		
__declspec(dllimport) new_handler __cdecl set_new_handler(  new_handler)
	noexcept;	

__declspec(dllimport) new_handler __cdecl get_new_handler()
	noexcept;	
}

 
 #pragma warning(pop)
 #pragma pack(pop)

#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\new"
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\new"





#line 92 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"
#line 93 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"






#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"



#line 104 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"

extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void*   __cdecl operator new( size_t, void*) throw();
extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void*   __cdecl operator new[]( size_t, void*) throw();
extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void    __cdecl operator delete(void*, void*) throw();
extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void    __cdecl operator delete[](void*, void*) throw();

extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void    __cdecl operator delete(void*,  size_t) throw();
extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void    __cdecl operator delete[](void*,  size_t) throw();
#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"
#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"







#pragma once



#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"









#pragma once


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"







#pragma once





__pragma(pack(push, 8)) extern "C" {





#line 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
    
#line 23 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"



#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
    


#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"























#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"




#line 60 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"


    


        #pragma detect_mismatch("_CRT_STDIO_ISO_WIDE_SPECIFIERS", "0")
    #line 67 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"



   
__declspec(noinline) __inline unsigned __int64* __cdecl __local_stdio_printf_options(void)
{
    static unsigned __int64 _OptionsStorage;
    return &_OptionsStorage;
}



   
__declspec(noinline) __inline unsigned __int64* __cdecl __local_stdio_scanf_options(void)
{
    static unsigned __int64 _OptionsStorage;
    return &_OptionsStorage;
}



















} __pragma(pack(pop))

#line 108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

__pragma(pack(push, 8)) extern "C" {








    
    typedef struct _iobuf
    {
        void* _Placeholder;
    } FILE;
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

__declspec(dllimport) FILE* __cdecl __acrt_iob_func(unsigned);















__declspec(dllimport) wint_t __cdecl fgetwc(
      FILE* _Stream
    );


__declspec(dllimport) wint_t __cdecl _fgetwchar(void);


__declspec(dllimport) wint_t __cdecl fputwc(
         wchar_t _Character,
      FILE*   _Stream);


__declspec(dllimport) wint_t __cdecl _fputwchar(
      wchar_t _Character
    );

 
__declspec(dllimport) wint_t __cdecl getwc(
      FILE* _Stream
    );

 
__declspec(dllimport) wint_t __cdecl getwchar(void);



 
__declspec(dllimport) wchar_t* __cdecl fgetws(
      wchar_t* _Buffer,
                              int      _BufferCount,
                           FILE*    _Stream
    );


__declspec(dllimport) int __cdecl fputws(
       wchar_t const* _Buffer,
      FILE*          _Stream
    );


 
__declspec(dllimport) wchar_t* __cdecl _getws_s(
      wchar_t* _Buffer,
                              size_t   _BufferCount
    );

extern "C++" { template <size_t _Size> inline   wchar_t* __cdecl _getws_s(  wchar_t (&_Buffer)[_Size]) throw() { return _getws_s(_Buffer, _Size); } }
#line 99 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__declspec(dllimport) wint_t __cdecl putwc(
         wchar_t _Character,
      FILE*   _Stream
    );


__declspec(dllimport) wint_t __cdecl putwchar(
      wchar_t _Character
    );


__declspec(dllimport) int __cdecl _putws(
      wchar_t const* _Buffer
    );


__declspec(dllimport) wint_t __cdecl ungetwc(
         wint_t _Character,
      FILE*  _Stream
    );

 
__declspec(dllimport) FILE * __cdecl _wfdopen(
        int            _FileHandle,
      wchar_t const* _Mode
    );

  
__declspec(dllimport) FILE* __cdecl _wfopen(
      wchar_t const* _FileName,
      wchar_t const* _Mode
    );


__declspec(dllimport) errno_t __cdecl _wfopen_s(
      FILE**         _Stream,
                         wchar_t const* _FileName,
                         wchar_t const* _Mode
    );

 

__declspec(dllimport) FILE* __cdecl _wfreopen(
       wchar_t const* _FileName,
       wchar_t const* _Mode,
      FILE*          _OldStream
    );


__declspec(dllimport) errno_t __cdecl _wfreopen_s(
      FILE**         _Stream,
                         wchar_t const* _FileName,
                         wchar_t const* _Mode,
                        FILE*          _OldStream
    );

 
__declspec(dllimport) FILE* __cdecl _wfsopen(
      wchar_t const* _FileName,
      wchar_t const* _Mode,
        int            _ShFlag
    );

__declspec(dllimport) void __cdecl _wperror(
      wchar_t const* _ErrorMessage
    );



     
    __declspec(dllimport) FILE* __cdecl _wpopen(
          wchar_t const* _Command,
          wchar_t const* _Mode
        );

#line 177 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

__declspec(dllimport) int __cdecl _wremove(
      wchar_t const* _FileName
    );




 
__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wtempnam(
      wchar_t const* _Directory,
      wchar_t const* _FilePrefix
    );



 

__declspec(dllimport) errno_t __cdecl _wtmpnam_s(
      wchar_t* _Buffer,
                              size_t   _BufferCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wtmpnam_s(  wchar_t (&_Buffer)[_Size]) throw() { return _wtmpnam_s(_Buffer, _Size); } }
#line 204 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 __declspec(dllimport)  wchar_t* __cdecl _wtmpnam(  wchar_t *_Buffer);
#line 210 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"









__declspec(dllimport) wint_t __cdecl _fgetwc_nolock(
      FILE* _Stream
    );


__declspec(dllimport) wint_t __cdecl _fputwc_nolock(
         wchar_t _Character, 
      FILE*   _Stream
    );


__declspec(dllimport) wint_t __cdecl _getwc_nolock(
      FILE* _Stream
    );


__declspec(dllimport) wint_t __cdecl _putwc_nolock(
         wchar_t _Character,
      FILE*   _Stream
    );


__declspec(dllimport) wint_t __cdecl _ungetwc_nolock(
         wint_t _Character,
      FILE*  _Stream
    );





#line 251 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
















__declspec(dllimport) int __cdecl __stdio_common_vfwprintf(
                                         unsigned __int64 _Options,
                                      FILE*            _Stream,
        wchar_t const*   _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );


__declspec(dllimport) int __cdecl __stdio_common_vfwprintf_s(
                                         unsigned __int64 _Options,
                                      FILE*            _Stream,
        wchar_t const*   _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );


__declspec(dllimport) int __cdecl __stdio_common_vfwprintf_p(
                                         unsigned __int64 _Options,
                                      FILE*            _Stream,
        wchar_t const*   _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );


__inline int __cdecl _vfwprintf_l(
                                      FILE*          const _Stream,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 303 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return __stdio_common_vfwprintf((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}
#line 307 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl vfwprintf(
                            FILE*          const _Stream,
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )


#line 317 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vfwprintf_l(_Stream, _Format, 0, _ArgList);
}
#line 321 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _vfwprintf_s_l(
                                      FILE*          const _Stream,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 332 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return __stdio_common_vfwprintf_s((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}
#line 336 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"



    
    __inline int __cdecl vfwprintf_s(
                                FILE*          const _Stream,
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )


#line 348 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwprintf_s_l(_Stream, _Format, 0, _ArgList);
    }
#line 352 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#line 354 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _vfwprintf_p_l(
                                      FILE*          const _Stream,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 365 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return __stdio_common_vfwprintf_p((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}
#line 369 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _vfwprintf_p(
                            FILE*          const _Stream,
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )


#line 379 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vfwprintf_p_l(_Stream, _Format, 0, _ArgList);
}
#line 383 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _vwprintf_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 393 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vfwprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}
#line 397 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl vwprintf(
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )


#line 406 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vfwprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
}
#line 410 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _vwprintf_s_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 420 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vfwprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}
#line 424 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"



    
    __inline int __cdecl vwprintf_s(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )


#line 435 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    }
#line 439 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#line 441 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _vwprintf_p_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 451 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vfwprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}
#line 455 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _vwprintf_p(
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )


#line 464 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vfwprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
}
#line 468 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _fwprintf_l(
                                      FILE*          const _Stream,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 478 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwprintf_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 487 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl fwprintf(
                            FILE*          const _Stream,
        wchar_t const* const _Format,
    ...)


#line 496 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfwprintf_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 505 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _fwprintf_s_l(
                                      FILE*          const _Stream,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 515 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwprintf_s_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 524 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"



    
    __inline int __cdecl fwprintf_s(
                                FILE*          const _Stream,
            wchar_t const* const _Format,
        ...)


#line 535 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfwprintf_s_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 544 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#line 546 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _fwprintf_p_l(
                                      FILE*          const _Stream,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 556 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwprintf_p_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 565 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _fwprintf_p(
                            FILE*          const _Stream,
        wchar_t const* const _Format,
    ...)


#line 574 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfwprintf_p_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 583 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _wprintf_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 592 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 601 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl wprintf(
        wchar_t const* const _Format,
    ...)


#line 609 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfwprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 618 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _wprintf_s_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 627 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 636 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"



    
    __inline int __cdecl wprintf_s(
            wchar_t const* const _Format,
        ...)


#line 646 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfwprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 655 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#line 657 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _wprintf_p_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 666 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 675 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _wprintf_p(
        wchar_t const* const _Format,
    ...)


#line 683 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfwprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 692 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"








__declspec(dllimport) int __cdecl __stdio_common_vfwscanf(
                                        unsigned __int64 _Options,
                                     FILE*            _Stream,
        wchar_t const*   _Format,
                                    _locale_t        _Locale,
                                           va_list          _ArgList
    );


__inline int __cdecl _vfwscanf_l(
      FILE*                                const _Stream,
        wchar_t const* const _Format,
                           _locale_t      const _Locale,
                                  va_list              _ArgList
    )


#line 718 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return __stdio_common_vfwscanf(
        (*__local_stdio_scanf_options ()),
        _Stream, _Format, _Locale, _ArgList);
}
#line 724 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl vfwscanf(
      FILE*                                const _Stream,
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )


#line 734 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vfwscanf_l(_Stream, _Format, 0, _ArgList);
}
#line 738 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _vfwscanf_s_l(
                            FILE*          const _Stream,
        wchar_t const* const _Format,
                           _locale_t      const _Locale,
                                  va_list              _ArgList
    )


#line 749 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return __stdio_common_vfwscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Stream, _Format, _Locale, _ArgList);
}
#line 755 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"



    
    __inline int __cdecl vfwscanf_s(
                                FILE*          const _Stream,
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )


#line 767 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwscanf_s_l(_Stream, _Format, 0, _ArgList);
    }
#line 771 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#line 773 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

__inline int __cdecl _vwscanf_l(
        wchar_t const* const _Format,
                           _locale_t      const _Locale,
                                  va_list              _ArgList
    )


#line 782 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vfwscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
}
#line 786 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl vwscanf(
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )


#line 795 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vfwscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
}
#line 799 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _vwscanf_s_l(
        wchar_t const* const _Format,
                           _locale_t      const _Locale,
                                  va_list              _ArgList
    )


#line 809 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vfwscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
}
#line 813 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"



    
    __inline int __cdecl vwscanf_s(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )


#line 824 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
    }
#line 828 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#line 830 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
__inline int __cdecl _fwscanf_l(
                                     FILE*          const _Stream,
        wchar_t const* const _Format,
                                    _locale_t      const _Locale,
    ...)


#line 840 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwscanf_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 849 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

  
__inline int __cdecl fwscanf(
                           FILE*          const _Stream,
        wchar_t const* const _Format,
    ...)


#line 858 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfwscanf_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 867 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _fwscanf_s_l(
                                       FILE*          const _Stream,
        wchar_t const* const _Format,
                                      _locale_t      const _Locale,
    ...)


#line 877 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwscanf_s_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 886 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"



    
    __inline int __cdecl fwscanf_s(
                                 FILE*          const _Stream,
            wchar_t const* const _Format,
        ...)


#line 897 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfwscanf_s_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 906 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#line 908 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
__inline int __cdecl _wscanf_l(
        wchar_t const* const _Format,
                                    _locale_t      const _Locale,
    ...)


#line 917 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 926 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

  
__inline int __cdecl wscanf(
        wchar_t const* const _Format,
    ...)


#line 934 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfwscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 943 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _wscanf_s_l(
        wchar_t const* const _Format,
                                      _locale_t      const _Locale,
    ...)


#line 952 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 961 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"



    
    __inline int __cdecl wscanf_s(
            wchar_t const* const _Format,
        ...)


#line 971 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfwscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 980 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#line 982 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"









    





#line 998 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__declspec(dllimport) int __cdecl __stdio_common_vswprintf(
                                         unsigned __int64 _Options,
                 wchar_t*         _Buffer,
                                         size_t           _BufferCount,
        wchar_t const*   _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

 

__declspec(dllimport) int __cdecl __stdio_common_vswprintf_s(
                                         unsigned __int64 _Options,
                 wchar_t*         _Buffer,
                                         size_t           _BufferCount,
        wchar_t const*   _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

 

__declspec(dllimport) int __cdecl __stdio_common_vsnwprintf_s(
                                         unsigned __int64 _Options,
                 wchar_t*         _Buffer,
                                         size_t           _BufferCount,
                                         size_t           _MaxCount,
        wchar_t const*   _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

 

__declspec(dllimport) int __cdecl __stdio_common_vswprintf_p(
                                         unsigned __int64 _Options,
                 wchar_t*         _Buffer,
                                         size_t           _BufferCount,
        wchar_t const*   _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

 
 
__inline int __cdecl _vsnwprintf_l(
           wchar_t*       const _Buffer,
                                             size_t         const _BufferCount,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
    )


#line 1056 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int const _Result = __stdio_common_vswprintf(
        (*__local_stdio_printf_options()) | (1ULL << 0),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1064 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#pragma warning(push)
#pragma warning(disable: 4793)

 

__inline int __cdecl _vsnwprintf_s_l(
                 wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
                                         size_t         const _MaxCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 1081 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int const _Result = __stdio_common_vsnwprintf_s(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1089 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _vsnwprintf_s(
       wchar_t*       const _Buffer,
                               size_t         const _BufferCount,
                               size_t         const _MaxCount,
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )


#line 1102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
}
#line 1106 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 __inline   int __cdecl _snwprintf(    wchar_t *_Buffer,   size_t _BufferCount,     wchar_t const* _Format, ...);  __inline   int __cdecl _vsnwprintf(    wchar_t *_Buffer,   size_t _BufferCount,     wchar_t const* _Format, va_list _Args);
#line 1115 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#pragma warning(pop)

 
 
__inline int __cdecl _vsnwprintf(
        wchar_t*       _Buffer,
                                          size_t         _BufferCount,
                   wchar_t const* _Format,
                                             va_list        _ArgList
    )


#line 1129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    #pragma warning(push)
    #pragma warning(disable: 4996) 
    return _vsnwprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    #pragma warning(pop)
}
#line 1136 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

extern "C++" { template <size_t _Size> inline   int __cdecl _vsnwprintf_s(  wchar_t (&_Buffer)[_Size],   size_t _BufferCount,     wchar_t const* _Format, va_list _ArgList) throw() { return _vsnwprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
#line 1145 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _vswprintf_c_l(
                 wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 1158 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int const _Result = __stdio_common_vswprintf(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _vswprintf_c(
       wchar_t*       const _Buffer,
                               size_t         const _BufferCount,
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )


#line 1178 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
}
#line 1182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _vswprintf_l(
                         wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 1195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    #pragma warning(push)
    #pragma warning(disable: 4996) 
    return _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    #pragma warning(pop)
}
#line 1202 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl __vswprintf_l(
                         wchar_t*       const _Buffer,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 1214 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
}
#line 1218 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _vswprintf(
               wchar_t*       const _Buffer,
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )


#line 1229 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vswprintf_l(_Buffer, (size_t)-1, _Format, 0, _ArgList);
}
#line 1233 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl vswprintf(
                         wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
        wchar_t const* const _Format,
                                            va_list              _ArgList
    )


#line 1245 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
}
#line 1249 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _vswprintf_s_l(
                 wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 1262 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int const _Result = __stdio_common_vswprintf_s(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1270 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"



     
    __inline int __cdecl vswprintf_s(
           wchar_t*       const _Buffer,
                                   size_t         const _BufferCount,
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )


#line 1283 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vswprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }
#line 1287 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#line 1289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

extern "C++" { template <size_t _Size> inline   int __cdecl vswprintf_s(  wchar_t (&_Buffer)[_Size],     wchar_t const* _Format, va_list _ArgList) throw() { return vswprintf_s(_Buffer, _Size, _Format, _ArgList); } }
#line 1297 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _vswprintf_p_l(
                 wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 1310 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int const _Result = __stdio_common_vswprintf_p(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1318 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _vswprintf_p(
       wchar_t*       const _Buffer,
                               size_t         const _BufferCount,
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )


#line 1330 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vswprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
}
#line 1334 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
 
__inline int __cdecl _vscwprintf_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 1345 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int const _Result = __stdio_common_vswprintf(
        (*__local_stdio_printf_options()) | (1ULL << 1),
        0, 0, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1353 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
 
__inline int __cdecl _vscwprintf(
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )


#line 1363 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vscwprintf_l(_Format, 0, _ArgList);
}
#line 1367 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
 
__inline int __cdecl _vscwprintf_p_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 1378 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int const _Result = __stdio_common_vswprintf_p(
        (*__local_stdio_printf_options()) | (1ULL << 1),
        0, 0, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1386 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
 
__inline int __cdecl _vscwprintf_p(
        wchar_t const* const _Format, 
                                  va_list              _ArgList
    )


#line 1396 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vscwprintf_p_l(_Format, 0, _ArgList);
}
#line 1400 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl __swprintf_l(
                         wchar_t*       const _Buffer,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 1411 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = __vswprintf_l(_Buffer, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1420 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _swprintf_l(
                         wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 1432 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1441 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _swprintf(
               wchar_t*       const _Buffer,
        wchar_t const* const _Format,
    ...)


#line 1451 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = __vswprintf_l(_Buffer, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1460 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl swprintf(
               wchar_t*       const _Buffer,
                               size_t         const _BufferCount,
        wchar_t const* const _Format,
    ...)


#line 1471 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1480 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#pragma warning(push)


#pragma warning(disable:4793 4996)

 __inline   int __cdecl __swprintf_l(    wchar_t *_Buffer,     wchar_t const* _Format,   _locale_t _Locale, ...);  __inline   int __cdecl __vswprintf_l(    wchar_t *_Buffer,     wchar_t const* _Format,   _locale_t _Locale, va_list _Args);
#line 1494 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 __inline   int __cdecl _swprintf(    wchar_t *_Buffer,     wchar_t const* _Format, ...);  __inline   int __cdecl _vswprintf(    wchar_t *_Buffer,     wchar_t const* _Format, va_list _Args);
#line 1501 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#pragma warning(pop)

 

__inline int __cdecl _swprintf_s_l(
                 wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 1515 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1524 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"



     
    __inline int __cdecl swprintf_s(
           wchar_t*       const _Buffer,
                                   size_t         const _BufferCount,
            wchar_t const* const _Format,
        ...)


#line 1536 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 1545 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#line 1547 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline   int __cdecl swprintf_s(  wchar_t (&_Buffer)[_Size],     wchar_t const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format))))); return vswprintf_s(_Buffer, _Size, _Format, _ArgList); } __pragma(warning(pop)); }
#line 1554 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _swprintf_p_l(
                 wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 1566 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1575 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _swprintf_p(
       wchar_t*       const _Buffer,
                               size_t         const _BufferCount,
        wchar_t const* const _Format,
    ...)


#line 1586 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1595 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _swprintf_c_l(
                 wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 1607 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1616 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _swprintf_c(
       wchar_t*       const _Buffer,
                               size_t         const _BufferCount,
        wchar_t const* const _Format,
    ...)


#line 1627 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1636 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
 
__inline int __cdecl _snwprintf_l(
        wchar_t*       const _Buffer,
                                          size_t         const _BufferCount,
         wchar_t const* const _Format,
                                      _locale_t      const _Locale,
    ...)


#line 1648 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

    #pragma warning(push)
    #pragma warning(disable: 4996) 
    _Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    #pragma warning(pop)

    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1662 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _snwprintf(
        wchar_t*       _Buffer,
                                          size_t         _BufferCount,
                   wchar_t const* _Format,
    ...)


#line 1673 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

    #pragma warning(push)
    #pragma warning(disable: 4996) 
    _Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    #pragma warning(pop)

    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1687 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _snwprintf_s_l(
                 wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
                                         size_t         const _MaxCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 1700 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1709 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _snwprintf_s(
       wchar_t*       const _Buffer,
                               size_t         const _BufferCount,
                               size_t         const _MaxCount,
        wchar_t const* const _Format,
    ...)


#line 1721 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1730 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline   int __cdecl _snwprintf_s(  wchar_t (&_Buffer)[_Size],   size_t _BufferCount,     wchar_t const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format))))); return _vsnwprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } __pragma(warning(pop)); }
#line 1738 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
__inline int __cdecl _scwprintf_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 1747 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vscwprintf_l(_Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1756 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
 
__inline int __cdecl _scwprintf(
        wchar_t const* const _Format,
    ...)


#line 1765 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vscwprintf_l(_Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1774 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
 
__inline int __cdecl _scwprintf_p_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 1784 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vscwprintf_p_l(_Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1793 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
 
__inline int __cdecl _scwprintf_p(
        wchar_t const* const _Format,
    ...)


#line 1802 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vscwprintf_p_l(_Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1811 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"



    #pragma warning(push)
    #pragma warning(disable: 4141 4412 4793 4996 6054)

    

        extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) 
        inline int swprintf(
                       wchar_t*       const _Buffer,
                wchar_t const* const _Format,
            ...) throw()
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
            #pragma warning(suppress: 28719)
            _Result = vswprintf(_Buffer, 2147483647, _Format, _ArgList);       
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }

        extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) 
        inline int __cdecl vswprintf(
                       wchar_t*       const _Buffer,
                wchar_t const* const _Format,
                                          va_list              _ArgList
            ) throw()
        {
            #pragma warning(suppress: 28719)
            return vswprintf(_Buffer, 2147483647, _Format, _ArgList);
        }

        extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) 
        inline int _swprintf_l(
                                 wchar_t*       const _Buffer,
                wchar_t const* const _Format,
                                             _locale_t      const _Locale,
            ...) throw()
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
            _Result = _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }

        extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) 
        inline int __cdecl _vswprintf_l(
                                 wchar_t*       const _Buffer,
                wchar_t const* const _Format,
                                             _locale_t      const _Locale,
                                                    va_list              _ArgList
            ) throw()
        {
            return _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
        }

    #line 1872 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

    #pragma warning(pop)
#line 1875 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"






#line 1882 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"







 
__declspec(dllimport) int __cdecl __stdio_common_vswscanf(
                                        unsigned __int64 _Options,
              wchar_t const*   _Buffer,
                                        size_t           _BufferCount,
        wchar_t const*   _Format,
                                    _locale_t        _Locale,
                                           va_list          _ArgList
    );

 

__inline int __cdecl _vswscanf_l(
                             wchar_t const* const _Buffer,
        wchar_t const* const _Format,
                           _locale_t      const _Locale,
                                  va_list              _ArgList
    )


#line 1910 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return __stdio_common_vswscanf(
        (*__local_stdio_scanf_options ()),
        _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
}
#line 1916 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl vswscanf(
                             wchar_t const* _Buffer,
        wchar_t const* _Format,
                                  va_list        _ArgList
    )


#line 1927 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vswscanf_l(_Buffer, _Format, 0, _ArgList);
}
#line 1931 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _vswscanf_s_l(
                             wchar_t const* const _Buffer,
        wchar_t const* const _Format,
                           _locale_t      const _Locale,
                                  va_list              _ArgList
    )


#line 1943 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return __stdio_common_vswscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
}
#line 1949 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"



     
    
    __inline int __cdecl vswscanf_s(
                                 wchar_t const* const _Buffer,
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )


#line 1962 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vswscanf_s_l(_Buffer, _Format, 0, _ArgList);
    }
#line 1966 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#line 1968 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

extern "C++" { template <size_t _Size> inline   int __cdecl vswscanf_s(  wchar_t (&_Buffer)[_Size],     wchar_t const* _Format, va_list _Args) throw() { return vswscanf_s(_Buffer, _Size, _Format, _Args); } }
#line 1976 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
 
__inline int __cdecl _vsnwscanf_l(
              wchar_t const* const _Buffer,
                                        size_t         const _BufferCount,
        wchar_t const* const _Format,
                                    _locale_t      const _Locale,
                                           va_list              _ArgList
    )


#line 1989 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return __stdio_common_vswscanf(
        (*__local_stdio_scanf_options ()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);
}
#line 1995 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _vsnwscanf_s_l(
                wchar_t const* const _Buffer,
                                          size_t         const _BufferCount,
        wchar_t const* const _Format,
                                      _locale_t      const _Locale,
                                             va_list              _ArgList
    )


#line 2008 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return __stdio_common_vswscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);
}
#line 2014 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
 
__inline int __cdecl _swscanf_l(
                                      wchar_t const* const _Buffer,
        wchar_t const* const _Format,
                                    _locale_t            _Locale,
    ...)


#line 2025 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vswscanf_l(_Buffer, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2034 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
  
__inline int __cdecl swscanf(
                            wchar_t const* const _Buffer,
        wchar_t const* const _Format,
    ...)


#line 2044 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vswscanf_l(_Buffer, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2053 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _swscanf_s_l(
                                        wchar_t const* const _Buffer,
        wchar_t const* const _Format,
                                      _locale_t      const _Locale,
    ...)


#line 2064 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vswscanf_s_l(_Buffer, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2073 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"



     
    
    __inline int __cdecl swscanf_s(
                                  wchar_t const* const _Buffer,
            wchar_t const* const _Format,
        ...)


#line 2085 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vswscanf_s_l(_Buffer, _Format, 0, _ArgList);  
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 2094 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#line 2096 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
 
__inline int __cdecl _snwscanf_l(
              wchar_t const* const _Buffer,
                                        size_t         const _BufferCount,
        wchar_t const* const _Format,
                                    _locale_t      const _Locale,
    ...)


#line 2108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

    #pragma warning(push)
    #pragma warning(disable: 4996) 
    _Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    #pragma warning(pop)

    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
 
__inline int __cdecl _snwscanf(
        wchar_t const* const _Buffer,
                                  size_t         const _BufferCount,
            wchar_t const* const _Format,
    ...)


#line 2133 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

    #pragma warning(push)
    #pragma warning(disable: 4996) 
    _Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    #pragma warning(pop)

    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2147 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _snwscanf_s_l(
                wchar_t const* const _Buffer,
                                          size_t         const _BufferCount,
        wchar_t const* const _Format,
                                      _locale_t      const _Locale,
    ...)


#line 2159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2168 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _snwscanf_s(
         wchar_t const* const _Buffer,
                                   size_t         const _BufferCount,
           wchar_t const* const _Format,
    ...)


#line 2179 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2188 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"







} __pragma(pack(pop))

#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

__pragma(pack(push, 8)) extern "C" {































    
#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"















    
    
#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


typedef __int64 fpos_t;




__declspec(dllimport) errno_t __cdecl _get_stream_buffer_pointers(
           FILE*   _Stream,
      char*** _Base,
      char*** _Pointer,
      int**   _Count
    );









    
    __declspec(dllimport) errno_t __cdecl clearerr_s(
          FILE* _Stream
        );

    
    __declspec(dllimport) errno_t __cdecl fopen_s(
          FILE**      _Stream,
                             char const* _FileName,
                             char const* _Mode
        );
    
    
     
    __declspec(dllimport) size_t __cdecl fread_s(
            void*  _Buffer,
                       size_t _BufferSize,
                                                                        size_t _ElementSize,
                                                                        size_t _ElementCount,
                                                                     FILE*  _Stream
        );
    
    
    __declspec(dllimport) errno_t __cdecl freopen_s(
          FILE**      _Stream,
                             char const* _FileName,
                             char const* _Mode,
                            FILE*       _OldStream
        );

     
    __declspec(dllimport) char* __cdecl gets_s(
          char*   _Buffer,
                           rsize_t _Size
        );

    
    __declspec(dllimport) errno_t __cdecl tmpfile_s(
            FILE** _Stream
        );

     
    
    __declspec(dllimport) errno_t __cdecl tmpnam_s(
          char*   _Buffer,
                           rsize_t _Size
        );

#line 137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

__declspec(dllimport) void __cdecl clearerr(
      FILE* _Stream
    );

 

__declspec(dllimport) int __cdecl fclose(
      FILE* _Stream
    );


__declspec(dllimport) int __cdecl _fcloseall(void);

 
__declspec(dllimport) FILE* __cdecl _fdopen(
        int         _FileHandle,
      char const* _Mode
    );

 
__declspec(dllimport) int __cdecl feof(
      FILE* _Stream
    );

 
__declspec(dllimport) int __cdecl ferror(
      FILE* _Stream
    );


__declspec(dllimport) int __cdecl fflush(
      FILE* _Stream
    );

 

__declspec(dllimport) int __cdecl fgetc(
      FILE* _Stream
    );


__declspec(dllimport) int __cdecl _fgetchar(void);

 

__declspec(dllimport) int __cdecl fgetpos(
      FILE*   _Stream,
        fpos_t* _Position
    );

 

__declspec(dllimport) char* __cdecl fgets(
      char* _Buffer,
                           int   _MaxCount,
                        FILE* _Stream
    );

 
__declspec(dllimport) int __cdecl _fileno(
      FILE* _Stream
    );


__declspec(dllimport) int __cdecl _flushall(void);

  
__declspec(dllimport) FILE* __cdecl fopen(
      char const* _FileName,
      char const* _Mode
    );


 

__declspec(dllimport) int __cdecl fputc(
         int   _Character,
      FILE* _Stream
    );


__declspec(dllimport) int __cdecl _fputchar(
      int _Character
    );

 

__declspec(dllimport) int __cdecl fputs(
       char const* _Buffer,
      FILE*       _Stream
    );


__declspec(dllimport) size_t __cdecl fread(
      void*  _Buffer,
                                                  size_t _ElementSize,
                                                  size_t _ElementCount,
                                               FILE*  _Stream
    );

 
  
__declspec(dllimport) FILE* __cdecl freopen(
       char const* _FileName,
       char const* _Mode,
      FILE*       _Stream
    );

 
__declspec(dllimport) FILE* __cdecl _fsopen(
      char const* _FileName,
      char const* _Mode,
        int         _ShFlag
    );

 

__declspec(dllimport) int __cdecl fsetpos(
      FILE*         _Stream,
         fpos_t const* _Position
    );

 

__declspec(dllimport) int __cdecl fseek(
      FILE* _Stream,
         long  _Offset,
         int   _Origin
    );

 

__declspec(dllimport) int __cdecl _fseeki64(
      FILE*   _Stream,
         __int64 _Offset,
         int     _Origin
    );

 
 
__declspec(dllimport) long __cdecl ftell(
      FILE* _Stream
    );

 
 
__declspec(dllimport) __int64 __cdecl _ftelli64(
      FILE* _Stream
    );


__declspec(dllimport) size_t __cdecl fwrite(
      void const* _Buffer,
                                                size_t      _ElementSize,
                                                size_t      _ElementCount,
                                             FILE*       _Stream
    );

 
 
__declspec(dllimport) int __cdecl getc(
      FILE* _Stream
    );

 
__declspec(dllimport) int __cdecl getchar(void);

 
__declspec(dllimport) int __cdecl _getmaxstdio(void);

extern "C++" { template <size_t _Size> inline char* __cdecl gets_s(char (&_Buffer)[_Size]) throw() { return gets_s(_Buffer, _Size); } }
#line 311 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
__declspec(dllimport) int __cdecl _getw(
      FILE* _Stream
    );

__declspec(dllimport) void __cdecl perror(
      char const* _ErrorMessage
    );



     
    
    __declspec(dllimport) int __cdecl _pclose(
          FILE* _Stream
        );

     
    __declspec(dllimport) FILE* __cdecl _popen(
          char const* _Command,
          char const* _Mode
        );

#line 336 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__declspec(dllimport) int __cdecl putc(
         int   _Character,
      FILE* _Stream
    );


__declspec(dllimport) int __cdecl putchar(
      int _Character
    );


__declspec(dllimport) int __cdecl puts(
      char const* _Buffer
    );

 

__declspec(dllimport) int __cdecl _putw(
         int   _Word, 
      FILE* _Stream
    );



__declspec(dllimport) int __cdecl remove(
      char const* _FileName
    );

 
__declspec(dllimport) int __cdecl rename(
      char const* _OldFileName,
      char const* _NewFileName
    );

__declspec(dllimport) int __cdecl _unlink(
      char const* _FileName
    );



    
    __declspec(dllimport) int __cdecl unlink(
          char const* _FileName
        );

#line 385 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



__declspec(dllimport) void __cdecl rewind(
      FILE* _Stream
    );


__declspec(dllimport) int __cdecl _rmtmp(void);


__declspec(dllimport) void __cdecl setbuf(
                                                  FILE* _Stream,
        char* _Buffer
    );


__declspec(dllimport) int __cdecl _setmaxstdio(
      int _Maximum
    );

 

__declspec(dllimport) int __cdecl setvbuf(
                           FILE*  _Stream,
        char*  _Buffer,
                              int    _Mode,
                              size_t _Size
    );




#line 419 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
__declspec(dllimport) __declspec(allocator) char* __cdecl _tempnam(
      char const* _DirectoryName,
      char const* _FilePrefix
    );



#line 429 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

  
__declspec(dllimport) FILE* __cdecl tmpfile(void);

extern "C++" { template <size_t _Size> inline errno_t __cdecl tmpnam_s(  char (&_Buffer)[_Size]) throw() { return tmpnam_s(_Buffer, _Size); } }
#line 437 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 __declspec(dllimport)  char* __cdecl tmpnam(  char *_Buffer);
#line 443 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__declspec(dllimport) int __cdecl ungetc(
         int   _Character,
      FILE* _Stream
    );








__declspec(dllimport) void __cdecl _lock_file(
      FILE* _Stream
    );

__declspec(dllimport) void __cdecl _unlock_file(
      FILE* _Stream
    );

 

__declspec(dllimport) int __cdecl _fclose_nolock(
      FILE* _Stream
    );

 

__declspec(dllimport) int __cdecl _fflush_nolock(
      FILE* _Stream
    );

 

__declspec(dllimport) int __cdecl _fgetc_nolock(
      FILE* _Stream
    );

 

__declspec(dllimport) int __cdecl _fputc_nolock(
         int   _Character,
      FILE* _Stream
    );


__declspec(dllimport) size_t __cdecl _fread_nolock(
      void*  _Buffer,
                                                  size_t _ElementSize,
                                                  size_t _ElementCount,
                                               FILE*  _Stream
    );


 
__declspec(dllimport) size_t __cdecl _fread_nolock_s(
      void*  _Buffer,
               size_t _BufferSize,
                                                                  size_t _ElementSize,
                                                                  size_t _ElementCount,
                                                               FILE*  _Stream
    );


__declspec(dllimport) int __cdecl _fseek_nolock(
      FILE* _Stream,
         long  _Offset,
         int   _Origin
    );


__declspec(dllimport) int __cdecl _fseeki64_nolock(
      FILE*   _Stream,
         __int64 _Offset,
         int     _Origin
    );

 
__declspec(dllimport) long __cdecl _ftell_nolock(
      FILE* _Stream
    );

 
__declspec(dllimport) __int64 __cdecl _ftelli64_nolock(
      FILE* _Stream
    );


__declspec(dllimport) size_t __cdecl _fwrite_nolock(
      void const* _Buffer,
                                                size_t      _ElementSize,
                                                size_t      _ElementCount,
                                             FILE*       _Stream
    );


__declspec(dllimport) int __cdecl _getc_nolock(
      FILE* _Stream
    );


__declspec(dllimport) int __cdecl _putc_nolock(
         int   _Character,
      FILE* _Stream
    );


__declspec(dllimport) int __cdecl _ungetc_nolock(
         int   _Character,
      FILE* _Stream
    );






















#line 580 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



__declspec(dllimport) int* __cdecl __p__commode(void);




    
#line 590 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"






#line 597 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"






__declspec(dllimport) int __cdecl __stdio_common_vfprintf(
                                         unsigned __int64 _Options,
                                      FILE*            _Stream,
        char const*      _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

__declspec(dllimport) int __cdecl __stdio_common_vfprintf_s(
                                         unsigned __int64 _Options,
                                      FILE*            _Stream,
        char const*      _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

 
__declspec(dllimport) int __cdecl __stdio_common_vfprintf_p(
                                         unsigned __int64 _Options,
                                      FILE*            _Stream,
        char const*      _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );


__inline int __cdecl _vfprintf_l(
       FILE*       const _Stream,
        char const* const _Format,
      _locale_t   const _Locale,
             va_list           _ArgList
    )


#line 638 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return __stdio_common_vfprintf((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}
#line 642 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl vfprintf(
                            FILE*       const _Stream,
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 652 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vfprintf_l(_Stream, _Format, 0, _ArgList);
}
#line 656 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _vfprintf_s_l(
       FILE*       const _Stream,
        char const* const _Format,
      _locale_t   const _Locale,
             va_list           _ArgList
    )


#line 667 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return __stdio_common_vfprintf_s((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}
#line 671 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



    
    __inline int __cdecl vfprintf_s(
                                FILE*       const _Stream,
            char const* const _Format,
                                      va_list           _ArgList
        )


#line 683 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    {
        return _vfprintf_s_l(_Stream, _Format, 0, _ArgList);
    }
#line 687 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

#line 689 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _vfprintf_p_l(
       FILE*       const _Stream,
        char const* const _Format,
      _locale_t   const _Locale,
             va_list           _ArgList
    )


#line 700 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return __stdio_common_vfprintf_p((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}
#line 704 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _vfprintf_p(
                            FILE*       const _Stream,
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 714 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vfprintf_p_l(_Stream, _Format, 0, _ArgList);
}
#line 718 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _vprintf_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list           _ArgList
    )


#line 728 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vfprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}
#line 732 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl vprintf(
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 741 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vfprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
}
#line 745 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _vprintf_s_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list           _ArgList
    )


#line 755 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vfprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}
#line 759 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



    
    __inline int __cdecl vprintf_s(
            char const* const _Format,
                                      va_list           _ArgList
        )


#line 770 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    {
        return _vfprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    }
#line 774 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

#line 776 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _vprintf_p_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list           _ArgList
    )


#line 786 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vfprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}
#line 790 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _vprintf_p(
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 799 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vfprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
}
#line 803 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _fprintf_l(
                                      FILE*       const _Stream,
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 813 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfprintf_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 822 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl fprintf(
                            FILE*       const _Stream,
        char const* const _Format,
    ...)


#line 831 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfprintf_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 840 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

__declspec(dllimport) int __cdecl _set_printf_count_output(
      int _Value
    );

__declspec(dllimport) int __cdecl _get_printf_count_output(void);


__inline int __cdecl _fprintf_s_l(
                                      FILE*       const _Stream,
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 856 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfprintf_s_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 865 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



    
    __inline int __cdecl fprintf_s(
                                FILE*       const _Stream,
            char const* const _Format,
        ...)


#line 876 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfprintf_s_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 885 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

#line 887 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _fprintf_p_l(
                                      FILE*       const _Stream,
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 897 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfprintf_p_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 906 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _fprintf_p(
                            FILE*       const _Stream,
        char const* const _Format,
    ...)


#line 915 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfprintf_p_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 924 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _printf_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 933 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 942 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl printf(
        char const* const _Format,
    ...)


#line 950 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 959 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _printf_s_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 968 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 977 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



    
    __inline int __cdecl printf_s(
            char const* const _Format,
        ...)


#line 987 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 996 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

#line 998 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _printf_p_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 1007 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1016 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _printf_p(
        char const* const _Format,
    ...)


#line 1024 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1033 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"







__declspec(dllimport) int __cdecl __stdio_common_vfscanf(
                                        unsigned __int64 _Options,
                                     FILE*            _Stream,
        char const*      _Format,
                                    _locale_t        _Locale,
                                           va_list          _Arglist
    );


__inline int __cdecl _vfscanf_l(
                            FILE*       const _Stream,
        char const* const _Format,
                           _locale_t   const _Locale,
                                  va_list           _ArgList
    )


#line 1058 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return __stdio_common_vfscanf(
        (*__local_stdio_scanf_options ()),
        _Stream, _Format, _Locale, _ArgList);
}
#line 1064 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl vfscanf(
                            FILE*       const _Stream,
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 1074 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vfscanf_l(_Stream, _Format, 0, _ArgList);
}
#line 1078 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _vfscanf_s_l(
                            FILE*       const _Stream,
        char const* const _Format,
                           _locale_t   const _Locale,
                                  va_list           _ArgList
    )


#line 1089 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return __stdio_common_vfscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Stream, _Format, _Locale, _ArgList);
}
#line 1095 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"




    
    __inline int __cdecl vfscanf_s(
                                FILE*       const _Stream,
            char const* const _Format,
                                      va_list           _ArgList
        )


#line 1108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    {
        return _vfscanf_s_l(_Stream, _Format, 0, _ArgList);
    }
#line 1112 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

#line 1114 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _vscanf_l(
        char const* const _Format,
                           _locale_t   const _Locale,
                                  va_list           _ArgList
    )


#line 1124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vfscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
}
#line 1128 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl vscanf(
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 1137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vfscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
}
#line 1141 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _vscanf_s_l(
        char const* const _Format,
                           _locale_t   const _Locale,
                                  va_list           _ArgList
    )


#line 1151 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vfscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
}
#line 1155 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



    
    __inline int __cdecl vscanf_s(
            char const* const _Format,
                                      va_list           _ArgList
        )


#line 1166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    {
        return _vfscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
    }
#line 1170 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

#line 1172 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
__inline int __cdecl _fscanf_l(
                                     FILE*       const _Stream,
        char const* const _Format,
                                    _locale_t   const _Locale,
    ...)


#line 1182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfscanf_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1191 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

  
__inline int __cdecl fscanf(
                           FILE*       const _Stream,
        char const* const _Format,
    ...)


#line 1200 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfscanf_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1209 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _fscanf_s_l(
                                       FILE*       const _Stream,
        char const* const _Format,
                                      _locale_t   const _Locale,
    ...)


#line 1219 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfscanf_s_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1228 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



    
    __inline int __cdecl fscanf_s(
                                 FILE*       const _Stream,
            char const* const _Format,
        ...)


#line 1239 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfscanf_s_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 1248 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

#line 1250 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
__inline int __cdecl _scanf_l(
        char const* const _Format,
                                    _locale_t   const _Locale,
    ...)


#line 1259 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1268 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

  
__inline int __cdecl scanf(
        char const* const _Format,
    ...)


#line 1276 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1285 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _scanf_s_l(
        char const* const _Format,
                                      _locale_t   const _Locale,
    ...)


#line 1294 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1303 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



    
    __inline int __cdecl scanf_s(
            char const* const _Format,
        ...)


#line 1313 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 1322 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

#line 1324 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"








 
__declspec(dllimport) int __cdecl __stdio_common_vsprintf(
                                         unsigned __int64 _Options,
                 char*            _Buffer,
                                         size_t           _BufferCount,
        char const*      _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

 
__declspec(dllimport) int __cdecl __stdio_common_vsprintf_s(
                                         unsigned __int64 _Options,
                 char*            _Buffer,
                                         size_t           _BufferCount,
        char const*      _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

 
__declspec(dllimport) int __cdecl __stdio_common_vsnprintf_s(
                                         unsigned __int64 _Options,
                 char*            _Buffer,
                                         size_t           _BufferCount,
                                         size_t           _MaxCount,
        char const*      _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

 
__declspec(dllimport) int __cdecl __stdio_common_vsprintf_p(
                                         unsigned __int64 _Options,
                 char*            _Buffer,
                                         size_t           _BufferCount,
        char const*      _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

 
 
__inline int __cdecl _vsnprintf_l(
                   char*       const _Buffer,
                                         size_t      const _BufferCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list           _ArgList
    )


#line 1385 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int const _Result = __stdio_common_vsprintf(
        (*__local_stdio_printf_options()) | (1ULL << 0),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1393 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__inline int __cdecl _vsnprintf(
        char*       const _Buffer,
                                          size_t      const _BufferCount,
                   char const* const _Format,
                                             va_list           _ArgList
    )


#line 1405 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    #pragma warning(push)
    #pragma warning(disable: 4996) 
    return _vsnprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    #pragma warning(pop)
}
#line 1412 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"










#line 1423 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__inline int __cdecl vsnprintf(
         char*       const _Buffer,
                               size_t      const _BufferCount,
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 1435 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int const _Result = __stdio_common_vsprintf(
        (*__local_stdio_printf_options()) | (1ULL << 1),
        _Buffer, _BufferCount, _Format, 0, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1443 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
 
__inline int __cdecl _vsprintf_l(
        char*       const _Buffer,
                      char const* const _Format,
                    _locale_t   const _Locale,
                           va_list           _ArgList
    )


#line 1455 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    #pragma warning(push)
    #pragma warning(disable: 4996) 
    return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    #pragma warning(pop)
}
#line 1462 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
 
__inline int __cdecl vsprintf(
               char*       const _Buffer,
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 1473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    #pragma warning(push)
    #pragma warning(disable: 4996) 
    return _vsnprintf_l(_Buffer, (size_t)-1, _Format, 0, _ArgList);
    #pragma warning(pop)
}
#line 1480 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__inline int __cdecl _vsprintf_s_l(
                 char*       const _Buffer,
                                         size_t      const _BufferCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list           _ArgList
    )


#line 1493 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int const _Result = __stdio_common_vsprintf_s(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1501 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



     
    
    __inline int __cdecl vsprintf_s(
           char*       const _Buffer,
                                   size_t      const _BufferCount,
            char const* const _Format,
                                      va_list           _ArgList
        )


#line 1515 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    {
        return _vsprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }
#line 1519 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    
    extern "C++" { template <size_t _Size> inline   int __cdecl vsprintf_s(  char (&_Buffer)[_Size],     char const* _Format, va_list _ArgList) throw() { return vsprintf_s(_Buffer, _Size, _Format, _ArgList); } }
#line 1527 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

#line 1529 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__inline int __cdecl _vsprintf_p_l(
                 char*       const _Buffer,
                                         size_t      const _BufferCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list           _ArgList
    )


#line 1542 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int const _Result = __stdio_common_vsprintf_p(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1550 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__inline int __cdecl _vsprintf_p(
       char*       const _Buffer,
                               size_t      const _BufferCount,
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 1562 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vsprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
}
#line 1566 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__inline int __cdecl _vsnprintf_s_l(
                 char*       const _Buffer,
                                         size_t      const _BufferCount,
                                         size_t      const _MaxCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list          _ArgList
    )


#line 1580 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int const _Result = __stdio_common_vsnprintf_s(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1588 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__inline int __cdecl _vsnprintf_s(
       char*       const _Buffer,
                               size_t      const _BufferCount,
                               size_t      const _MaxCount,
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 1601 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
}
#line 1605 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

extern "C++" { template <size_t _Size> inline   int __cdecl _vsnprintf_s(  char (&_Buffer)[_Size],   size_t _BufferCount,     char const* _Format, va_list _ArgList) throw() { return _vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
#line 1614 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



     
    
    __inline int __cdecl vsnprintf_s(
           char*       const _Buffer,
                                   size_t      const _BufferCount,
                                   size_t      const _MaxCount,
            char const* const _Format,
                                      va_list           _ArgList
        )


#line 1629 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    {
        return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
    }
#line 1633 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    
    extern "C++" { template <size_t _Size> inline   int __cdecl vsnprintf_s(  char (&_Buffer)[_Size],   size_t _BufferCount,     char const* _Format, va_list _ArgList) throw() { return vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
#line 1642 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

#line 1644 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _vscprintf_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list           _ArgList
    )


#line 1654 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int const _Result = __stdio_common_vsprintf(
        (*__local_stdio_printf_options()) | (1ULL << 1),
        0, 0, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1662 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
__inline int __cdecl _vscprintf(
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 1671 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vscprintf_l(_Format, 0, _ArgList);
}
#line 1675 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _vscprintf_p_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list           _ArgList
    )


#line 1685 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int const _Result = __stdio_common_vsprintf_p(
        (*__local_stdio_printf_options()) | (1ULL << 1),
        0, 0, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1693 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
__inline int __cdecl _vscprintf_p(
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 1702 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vscprintf_p_l(_Format, 0, _ArgList);
}
#line 1706 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _vsnprintf_c_l(
                   char*       const _Buffer,
                                         size_t      const _BufferCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list           _ArgList
    )


#line 1718 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int const _Result = __stdio_common_vsprintf(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1726 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__inline int __cdecl _vsnprintf_c(
         char*       const _Buffer,
                               size_t      const _BufferCount,
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 1738 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vsnprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
}
#line 1742 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
__inline int __cdecl _sprintf_l(
                         char*       const _Buffer,
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 1752 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

    #pragma warning(push)
    #pragma warning(disable: 4996) 
    _Result = _vsprintf_l(_Buffer, _Format, _Locale, _ArgList);
    #pragma warning(pop)

    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1766 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__inline int __cdecl sprintf(
               char*       const _Buffer,
        char const* const _Format,
    ...)


#line 1776 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

    #pragma warning(push)
    #pragma warning(disable: 4996) 
    _Result = _vsprintf_l(_Buffer, _Format, 0, _ArgList);
    #pragma warning(pop)

    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1790 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

#pragma warning(push)
#pragma warning(disable: 4996)
   int __cdecl sprintf(  char *_Buffer,  char const* _Format, ...);    int __cdecl vsprintf(  char *_Buffer,  char const* _Format, va_list _Args);
#line 1799 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
#pragma warning(pop)

 

__inline int __cdecl _sprintf_s_l(
                 char*       const _Buffer,
                                         size_t      const _BufferCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 1812 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1821 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



     
    
    __inline int __cdecl sprintf_s(
           char*       const _Buffer,
                                   size_t      const _BufferCount,
            char const* const _Format,
        ...)


#line 1834 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 1843 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

#line 1845 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline int __cdecl sprintf_s(  char (&_Buffer)[_Size],     char const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format))))); return vsprintf_s(_Buffer, _Size, _Format, _ArgList); } __pragma(warning(pop)); }
#line 1851 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__inline int __cdecl _sprintf_p_l(
                 char*       const _Buffer,
                                         size_t      const _BufferCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 1863 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1872 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__inline int __cdecl _sprintf_p(
       char*       const _Buffer,
                               size_t      const _BufferCount,
        char const* const _Format,
    ...)


#line 1883 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1892 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
 
__inline int __cdecl _snprintf_l(
                   char*       const _Buffer,
                                         size_t      const _BufferCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 1904 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

    #pragma warning(push)
    #pragma warning(disable: 4996) 
    _Result = _vsnprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    #pragma warning(pop)

    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1918 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"










#line 1929 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
 
__inline int __cdecl snprintf(
       char*       const _Buffer,
                               size_t      const _BufferCount,
        char const* const _Format,
    ...)


#line 1940 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
#pragma warning(suppress:28719)    
    _Result = vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1950 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
__inline int __cdecl _snprintf(
        char*       const _Buffer,
                                          size_t      const _BufferCount,
                   char const* const _Format,
    ...)


#line 1960 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
#pragma warning(suppress:28719)    
    _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1970 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

    int __cdecl _snprintf(    char *_Buffer,   size_t _BufferCount,     char const* _Format, ...);     int __cdecl _vsnprintf(    char *_Buffer,   size_t _BufferCount,     char const* _Format, va_list _Args);
#line 1979 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__inline int __cdecl _snprintf_c_l(
                   char*       const _Buffer,
                                         size_t      const _BufferCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 1991 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2000 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__inline int __cdecl _snprintf_c(
         char*       const _Buffer,
                               size_t      const _BufferCount,
        char const* const _Format,
    ...)


#line 2011 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2020 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__inline int __cdecl _snprintf_s_l(
                 char*       const _Buffer,
                                         size_t      const _BufferCount,
                                         size_t      const _MaxCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 2033 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2042 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__inline int __cdecl _snprintf_s(
       char*       const _Buffer,
                               size_t      const _BufferCount,
                               size_t      const _MaxCount,
        char const* const _Format,
    ...)


#line 2054 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2063 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline   int __cdecl _snprintf_s(  char (&_Buffer)[_Size],   size_t _BufferCount,     char const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format))))); return _vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } __pragma(warning(pop)); }
#line 2071 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _scprintf_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 2080 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vscprintf_l(_Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2089 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
__inline int __cdecl _scprintf(
        char const* const _Format,
    ...)


#line 2097 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vscprintf_l(_Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2106 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _scprintf_p_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 2115 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vscprintf_p_l(_Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
__inline int __cdecl _scprintf_p(
        char const* const _Format,
    ...)


#line 2132 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vscprintf_p(_Format, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2141 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"






__declspec(dllimport) int __cdecl __stdio_common_vsscanf(
                                        unsigned __int64 _Options,
              char const*      _Buffer,
                                        size_t           _BufferCount,
        char const*      _Format,
                                    _locale_t        _Locale,
                                           va_list          _ArgList
    );


__inline int __cdecl _vsscanf_l(
                             char const* const _Buffer,
        char const* const _Format,
                           _locale_t   const _Locale,
                                  va_list           _ArgList
    )


#line 2166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()),
        _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
}
#line 2172 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl vsscanf(
                             char const* const _Buffer,
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 2182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vsscanf_l(_Buffer, _Format, 0, _ArgList);
}
#line 2186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _vsscanf_s_l(
                             char const* const _Buffer,
        char const* const _Format,
                           _locale_t   const _Locale,
                                  va_list           _ArgList
    )


#line 2197 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
}
#line 2203 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



    #pragma warning(push)
    #pragma warning(disable:6530)

    
    __inline int __cdecl vsscanf_s(
                                 char const* const _Buffer,
            char const* const _Format,
                                      va_list           _ArgList
        )


#line 2218 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    {
        return _vsscanf_s_l(_Buffer, _Format, 0, _ArgList);
    }
#line 2222 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

    extern "C++" { template <size_t _Size> inline int __cdecl vsscanf_s(  char const (&_Buffer)[_Size],     char const* _Format, va_list _ArgList) throw() { return vsscanf_s(_Buffer, _Size, _Format, _ArgList); } }
#line 2229 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
   
    #pragma warning(pop)

#line 2233 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
__inline int __cdecl _sscanf_l(
                                      char const* const _Buffer,
        char const* const _Format,
                                    _locale_t   const _Locale,
    ...)


#line 2243 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vsscanf_l(_Buffer, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2252 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

  
__inline int __cdecl sscanf(
                            char const* const _Buffer,
        char const* const _Format,
    ...)


#line 2261 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vsscanf_l(_Buffer, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2270 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _sscanf_s_l(
                                        char const* const _Buffer,
        char const* const _Format,
                                      _locale_t   const _Locale,
    ...)


#line 2280 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vsscanf_s_l(_Buffer, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



    
    __inline int __cdecl sscanf_s(
                                  char const* const _Buffer,
            char const* const _Format,
        ...)


#line 2300 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

        #pragma warning(push)
        #pragma warning(disable: 4996) 
        _Result = vsscanf_s(_Buffer, _Format, _ArgList);
        #pragma warning(pop)

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 2314 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

#line 2316 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

#pragma warning(push)
#pragma warning(disable:6530)

 
__inline int __cdecl _snscanf_l(
        char const* const _Buffer,
                                        size_t      const _BufferCount,
        char const* const _Format,
                                    _locale_t   const _Locale,
    ...)


#line 2330 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

    _Result = __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2343 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
__inline int __cdecl _snscanf(
        char const* const _Buffer,
                                        size_t      const _BufferCount,
                  char const* const _Format,
    ...)


#line 2353 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

    _Result = __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()),
        _Buffer, _BufferCount, _Format, 0, _ArgList);

    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2366 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



__inline int __cdecl _snscanf_s_l(
          char const* const _Buffer,
                                          size_t      const _BufferCount,
        char const* const _Format,
                                      _locale_t   const _Locale,
    ...)


#line 2378 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

    _Result = __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2391 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _snscanf_s(
        char const* const _Buffer,
                                        size_t      const _BufferCount,
                char const* const _Format,
    ...)


#line 2401 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

    _Result = __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Buffer, _BufferCount, _Format, 0, _ArgList);

    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2414 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

#pragma warning(pop)



#line 2420 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"










    

    


#line 2436 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

    
    __declspec(dllimport) char* __cdecl tempnam(
          char const* _Directory,
          char const* _FilePrefix
        );

    

#line 2446 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

      __declspec(dllimport) int   __cdecl fcloseall(void);
              __declspec(dllimport) FILE* __cdecl fdopen(  int _FileHandle,   char const* _Format);
       __declspec(dllimport) int   __cdecl fgetchar(void);
              __declspec(dllimport) int   __cdecl fileno(  FILE* _Stream);
       __declspec(dllimport) int   __cdecl flushall(void);
       __declspec(dllimport) int   __cdecl fputchar(  int _Ch);
                __declspec(dllimport) int   __cdecl getw(  FILE* _Stream);
           __declspec(dllimport) int   __cdecl putw(  int _Ch,   FILE* _Stream);
               __declspec(dllimport) int   __cdecl rmtmp(void);

#line 2458 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



} __pragma(pack(pop))

#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"

#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"




extern "C"
{
extern


#line 129 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"
__declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) int     __cdecl printf(const char*, ...);

extern


#line 135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"
__declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) int     __cdecl fprintf(FILE*, const char*, ...);
#line 137 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"

extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void*   __cdecl malloc(size_t) ;
extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void    __cdecl free(void*) ;

}





#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"









#line 11 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"



__pragma(pack(push, 8)) extern "C" {







    














#line 38 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"



} __pragma(pack(pop))
#line 148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"
#line 149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"

extern "C"
{






#line 159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"



#line 163 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"


#line 166 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"




#line 171 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"



#line 175 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) __declspec(dllimport) void __cdecl _wassert(
  const wchar_t *, const wchar_t *, unsigned);
#line 178 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"
}



















#line 199 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"

















#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"



#line 221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"

extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void*   __cdecl operator new( size_t) throw(...);
extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void*   __cdecl operator new[]( size_t) throw(...);
extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void    __cdecl operator delete(void*) throw();
extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void    __cdecl operator delete[](void*) throw();

extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void    __cdecl operator delete(void*,  size_t) throw();
extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void    __cdecl operator delete[](void*,  size_t) throw();
#line 230 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"



#line 234 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"

#line 236 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"

#line 238 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"









#line 248 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"

#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"


















































































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 84 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 85 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"








extern "C"
{
#line 96 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"




















































#line 149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"


#line 152 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

#line 154 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
#line 155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"





#line 161 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) int            __cdecl abs(int) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) long int       __cdecl labs(long int) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) long long int          llabs(long long int) ;



#line 171 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"













































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl fabs(double x) ;








































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  fabsf(float x) ;



extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    min(int, int);

extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) unsigned int           umin(unsigned int, unsigned int);
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) long long int          llmin(long long int, long long int);
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) unsigned long long int ullmin(unsigned long long int, unsigned long long int);





















#line 288 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl fminf(float x, float y);
#line 290 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

















#line 308 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl fmin(double x, double y);
#line 310 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    max(int, int);

extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) unsigned int           umax(unsigned int, unsigned int);
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) long long int          llmax(long long int, long long int);
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) unsigned long long int ullmax(unsigned long long int, unsigned long long int);





















#line 340 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl fmaxf(float x, float y);
#line 342 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

















#line 360 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl fmax(double, double);
#line 362 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"








































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl sin(double x) ;
































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl cos(double x) ;


















extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) void                   sincos(double x, double *sptr, double *cptr) ;















extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) void                   sincosf(float x, float *sptr, float *cptr) ;












































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl tan(double x) ;




































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl sqrt(double x) ;







































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 rsqrt(double x);





































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  rsqrtf(float x);
























































#line 784 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl log2(double x);
#line 786 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"






















#line 809 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl exp2(double x);
#line 811 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"






















#line 834 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl exp2f(float x);
#line 836 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"






















         
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 exp10(double x) ;






















extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  exp10f(float x) ;














































#line 930 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl expm1(double x);
#line 932 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"










































#line 975 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl expm1f(float x);
#line 977 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"




















































#line 1030 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl log2f(float x);
#line 1032 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"


















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl log10(double x) ;






































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl log(double x) ;






























































































#line 1249 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl log1p(double x);
#line 1251 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"






























































































#line 1346 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl log1pf(float x);
#line 1348 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"







































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl floor(double x) ;






































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl exp(double x) ;






























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl cosh(double x) ;





























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl sinh(double x) ;





























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl tanh(double x) ;



































#line 1586 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl acosh(double x);
#line 1588 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



































#line 1624 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl acoshf(float x);
#line 1626 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"













#line 1640 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl asinh(double x);
#line 1642 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"













#line 1656 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl asinhf(float x);
#line 1658 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



















































#line 1710 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl atanh(double x);
#line 1712 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



















































#line 1764 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl atanhf(float x);
#line 1766 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl ldexp(double x, int exp) ;























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  ldexpf(float x, int exp) ;




















































#line 1931 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl logb(double x);
#line 1933 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"




















































#line 1986 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl logbf(float x);
#line 1988 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



























#line 2016 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) int    __cdecl ilogb(double x);
#line 2018 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



























#line 2046 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) int    __cdecl ilogbf(float x);
#line 2048 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"









































































#line 2122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl scalbn(double x, int n);
#line 2124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"









































































#line 2198 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl scalbnf(float x, int n);
#line 2200 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"









































































#line 2274 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl scalbln(double x, long int n);
#line 2276 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"









































































#line 2350 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl scalblnf(float x, long int n);
#line 2352 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"










































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl frexp(double x, int *nptr) ;










































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  frexpf(float x, int *nptr) ;














#line 2517 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl round(double x);
#line 2519 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"














#line 2534 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl roundf(float x);
#line 2536 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"















#line 2552 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) long int __cdecl lround(double x);
#line 2554 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"















#line 2570 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) long int __cdecl lroundf(float x);
#line 2572 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"















#line 2588 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) long long int __cdecl llround(double x);
#line 2590 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"















#line 2606 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) long long int __cdecl llroundf(float x);
#line 2608 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

































#line 2642 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl rint(double x);
#line 2644 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
#line 2645 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"












#line 2658 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl rintf(float x);
#line 2660 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"













#line 2674 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) long int __cdecl lrint(double x);
#line 2676 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"













#line 2690 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) long int __cdecl lrintf(float x);
#line 2692 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"













#line 2706 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) long long int __cdecl llrint(double x);
#line 2708 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"













#line 2722 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) long long int __cdecl llrintf(float x);
#line 2724 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"


















































#line 2775 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl nearbyint(double x);
#line 2777 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"


















































#line 2828 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl nearbyintf(float x);
#line 2830 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"


























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl ceil(double x) ;












#line 2902 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl trunc(double x);
#line 2904 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"












#line 2917 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl truncf(float x);
#line 2919 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"























#line 2943 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl fdim(double x, double y);
#line 2945 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"























#line 2969 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl fdimf(float x, float y);
#line 2971 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl atan2(double y, double x) ;






























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl atan(double x) ;






















extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl acos(double x) ;































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl asin(double x) ;









































#line 3132 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double __cdecl hypot(double x, double y);
#line 3134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"


#line 3137 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"


















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                rhypot(double x, double y) ;











































static __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl hypotf(float x, float y);


#line 3235 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"


















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                 rhypotf(float x, float y) ;














































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl norm3d(double a, double b, double c) ;


















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                rnorm3d(double a, double b, double c) ;
















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl norm4d(double a, double b, double c, double d) ;























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double rnorm4d(double a, double b, double c, double d) ;












































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double norm(int dim, double const * t) ;


















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double rnorm(int dim, double const * t) ;



















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float rnormf(int dim, float const * a) ;











































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float normf(int dim, float const * a) ;












































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float norm3df(float a, float b, float c) ;


















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float rnorm3df(float a, float b, float c) ;
















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float norm4df(float a, float b, float c, float d) ;























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float rnorm4df(float a, float b, float c, float d) ;




















































































#line 3967 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl cbrt(double x);
#line 3969 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



















































































#line 4053 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl cbrtf(float x);
#line 4055 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 rcbrt(double x);

















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  rcbrtf(float x);



























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 sinpi(double x);



























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  sinpif(float x);



















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 cospi(double x);



















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  cospif(float x);





























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) void                   sincospi(double x, double *sptr, double *cptr);





























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) void                   sincospif(float x, float *sptr, float *cptr);























































































































































































































































































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl pow(double x, double y) ;























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl modf(double x, double *iptr) ;


























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl fmod(double x, double y) ;






















































































#line 4955 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl remainder(double x, double y);
#line 4957 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"























































































#line 5045 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl remainderf(float x, float y);
#line 5047 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



















































#line 5099 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl remquo(double x, double y, int *quo);
#line 5101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



















































#line 5153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl remquof(float x, float y, int *quo);
#line 5155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"





































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl j0(double x) ;









































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  j0f(float x) ;




























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl j1(double x) ;




























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  j1f(float x) ;










































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl jn(int n, double x) ;










































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  jnf(int n, float x) ;



















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl y0(double x) ;



















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  y0f(float x) ;



















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl y1(double x) ;



















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  y1f(float x) ;




















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl yn(int n, double x) ;




















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  ynf(int n, float x) ;


























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl cyl_bessel_i0(double x) ;

























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  cyl_bessel_i0f(float x) ;


























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl cyl_bessel_i1(double x) ;

























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  cyl_bessel_i1f(float x) ;



















































































#line 5947 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl erf(double x);
#line 5949 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"















































































#line 6029 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl erff(float x);
#line 6031 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"




























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 erfinv(double y);
























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  erfinvf(float y);







































#line 6189 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl erfc(double x);
#line 6191 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



































#line 6227 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl erfcf(float x);
#line 6229 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"





























































































































#line 6355 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl lgamma(double x);
#line 6357 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 erfcinv(double y);























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  erfcinvf(float y);

























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 normcdfinv(double y);

























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  normcdfinvf(float y);










































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 normcdf(double y);










































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  normcdff(float y);










































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 erfcx(double x);










































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  erfcxf(float x);






































































































































#line 6960 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl lgammaf(float x);
#line 6962 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"










































































































#line 7069 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl tgamma(double x);
#line 7071 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"










































































































#line 7178 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl tgammaf(float x);
#line 7180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"










#line 7191 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl copysign(double x, double y);
#line 7193 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"










#line 7204 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl copysignf(float x, float y);
#line 7206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"


































#line 7241 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl nextafter(double x, double y);
#line 7243 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"


































#line 7278 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl nextafterf(float x, float y);
#line 7280 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"













#line 7294 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl nan(const char *tagp);
#line 7296 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"













#line 7310 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl nanf(const char *tagp);
#line 7312 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __isinff(float) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __isnanf(float) ;








#line 7326 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __finite(double) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __finitef(float) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __signbit(double) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __isnan(double) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __isinf(double) ;
#line 7332 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __signbitf(float) ;































































































































































#line 7494 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl fma(double x, double y, double z);
#line 7496 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



























































































































































#line 7652 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl fmaf(float x, float y, float z);
#line 7654 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"







extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __signbitl(long double) ;




#line 7667 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __finitel(long double) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __isinfl(long double) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __isnanl(long double) ;
#line 7671 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"


extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl acosf(float) ;
extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl asinf(float) ;
extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl atanf(float) ;
extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl atan2f(float, float) ;
extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl cosf(float) ;
extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl sinf(float) ;
extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl tanf(float) ;
extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl coshf(float) ;
extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl sinhf(float) ;
extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl tanhf(float) ;
extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl expf(float) ;
extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl logf(float) ;
extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl log10f(float) ;
extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl modff(float, float*) ;
extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl powf(float, float) ;
extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl sqrtf(float) ;         
extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl ceilf(float) ;
extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl floorf(float) ;
extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl fmodf(float, float) ;








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 8821 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"


}
#line 8825 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"












__pragma(pack(push, 8)) extern "C" {



#pragma warning(push)
#pragma warning(disable:4738) 
#pragma warning(disable:4820) 
#line 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"



    
    
    struct _exception
    {
        int    type;   
        char*  name;   
        double arg1;   
        double arg2;   
        double retval; 
    };

    
    
    
        

        struct _complex
        {
            double x, y; 
        };

        


#line 49 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
    #line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"

typedef float float_t;
typedef double double_t;













    
        extern double const _HUGE;
    

#line 72 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"


    
#line 77 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"


















































































void __cdecl _fperrraise(  int _Except);

  __declspec(dllimport) short __cdecl _dclass(  double _X);
  __declspec(dllimport) short __cdecl _ldclass(  long double _X);
  __declspec(dllimport) short __cdecl _fdclass(  float _X);

  __declspec(dllimport) int __cdecl _dsign(  double _X);
  __declspec(dllimport) int __cdecl _ldsign(  long double _X);
  __declspec(dllimport) int __cdecl _fdsign(  float _X);

  __declspec(dllimport) int __cdecl _dpcomp(  double _X,   double _Y);
  __declspec(dllimport) int __cdecl _ldpcomp(  long double _X,   long double _Y);
  __declspec(dllimport) int __cdecl _fdpcomp(  float _X,   float _Y);

  __declspec(dllimport) short __cdecl _dtest(  double* _Px);
  __declspec(dllimport) short __cdecl _ldtest(  long double* _Px);
  __declspec(dllimport) short __cdecl _fdtest(  float* _Px);

__declspec(dllimport) short __cdecl _d_int(  double* _Px,   short _Xexp);
__declspec(dllimport) short __cdecl _ld_int(  long double* _Px,   short _Xexp);
__declspec(dllimport) short __cdecl _fd_int(  float* _Px,   short _Xexp);

__declspec(dllimport) short __cdecl _dscale(  double* _Px,   long _Lexp);
__declspec(dllimport) short __cdecl _ldscale(  long double* _Px,   long _Lexp);
__declspec(dllimport) short __cdecl _fdscale(  float* _Px,   long _Lexp);

__declspec(dllimport) short __cdecl _dunscale(  short* _Pex,   double* _Px);
__declspec(dllimport) short __cdecl _ldunscale(  short* _Pex,   long double* _Px);
__declspec(dllimport) short __cdecl _fdunscale(  short* _Pex,   float* _Px);

  __declspec(dllimport) short __cdecl _dexp(  double* _Px,   double _Y,   long _Eoff);
  __declspec(dllimport) short __cdecl _ldexp(  long double* _Px,   long double _Y,   long _Eoff);
  __declspec(dllimport) short __cdecl _fdexp(  float* _Px,   float _Y,   long _Eoff);

  __declspec(dllimport) short __cdecl _dnorm(  unsigned short* _Ps);
  __declspec(dllimport) short __cdecl _fdnorm(  unsigned short* _Ps);

  __declspec(dllimport) double __cdecl _dpoly(  double _X,   double const* _Tab,   int _N);
  __declspec(dllimport) long double __cdecl _ldpoly(  long double _X,   long double const* _Tab,   int _N);
  __declspec(dllimport) float __cdecl _fdpoly(  float _X,   float const* _Tab,   int _N);

  __declspec(dllimport) double __cdecl _dlog(  double _X,   int _Baseflag);
  __declspec(dllimport) long double __cdecl _ldlog(  long double _X,   int _Baseflag);
  __declspec(dllimport) float __cdecl _fdlog(  float _X,   int _Baseflag);

  __declspec(dllimport) double __cdecl _dsin(  double _X,   unsigned int _Qoff);
  __declspec(dllimport) long double __cdecl _ldsin(  long double _X,   unsigned int _Qoff);
  __declspec(dllimport) float __cdecl _fdsin(  float _X,   unsigned int _Qoff);


typedef union
{   
    unsigned short _Sh[4];
    double _Val;
} _double_val;


typedef union
{   
    unsigned short _Sh[2];
    float _Val;
} _float_val;


typedef union
{   
    unsigned short _Sh[4];
    long double _Val;
} _ldouble_val;

typedef union
{   
    unsigned short _Word[4];
    float _Float;
    double _Double;
    long double _Long_double;
} _float_const;

extern const _float_const _Denorm_C,  _Inf_C,  _Nan_C,  _Snan_C, _Hugeval_C;
extern const _float_const _FDenorm_C, _FInf_C, _FNan_C, _FSnan_C;
extern const _float_const _LDenorm_C, _LInf_C, _LNan_C, _LSnan_C;

extern const _float_const _Eps_C,  _Rteps_C;
extern const _float_const _FEps_C, _FRteps_C;
extern const _float_const _LEps_C, _LRteps_C;

extern const double      _Zero_C,  _Xbig_C;
extern const float       _FZero_C, _FXbig_C;
extern const long double _LZero_C, _LXbig_C;




























extern "C++"
{
      inline int fpclassify(  float _X) throw()
    {
        return _fdtest(&_X);
    }

      inline int fpclassify(  double _X) throw()
    {
        return _dtest(&_X);
    }

      inline int fpclassify(  long double _X) throw()
    {
        return _ldtest(&_X);
    }

      inline bool signbit(  float _X) throw()
    {
        return _fdsign(_X) != 0;
    }

      inline bool signbit(  double _X) throw()
    {
        return _dsign(_X) != 0;
    }

      inline bool signbit(  long double _X) throw()
    {
        return _ldsign(_X) != 0;
    }

      inline int _fpcomp(  float _X,   float _Y) throw()
    {
        return _fdpcomp(_X, _Y);
    }

      inline int _fpcomp(  double _X,   double _Y) throw()
    {
        return _dpcomp(_X, _Y);
    }

      inline int _fpcomp(  long double _X,   long double _Y) throw()
    {
        return _ldpcomp(_X, _Y);
    }

    template <class _Trc, class _Tre> struct _Combined_type
    {   
        typedef float _Type;
    };

    template <> struct _Combined_type<float, double>
    {   
        typedef double _Type;
    };

    template <> struct _Combined_type<float, long double>
    {   
        typedef long double _Type;
    };

    template <class _Ty, class _T2> struct _Real_widened
    {   
        typedef long double _Type;
    };

    template <> struct _Real_widened<float, float>
    {   
        typedef float _Type;
    };

    template <> struct _Real_widened<float, double>
    {   
        typedef double _Type;
    };

    template <> struct _Real_widened<double, float>
    {   
        typedef double _Type;
    };

    template <> struct _Real_widened<double, double>
    {   
        typedef double _Type;
    };

    template <class _Ty> struct _Real_type
    {   
        typedef double _Type;   
    };

    template <> struct _Real_type<float>
    {   
        typedef float _Type;
    };

    template <> struct _Real_type<long double>
    {   
        typedef long double _Type;
    };

    template <class _T1, class _T2>
      inline int _fpcomp(  _T1 _X,   _T2 _Y) throw()
    {   
        typedef typename _Combined_type<float,
            typename _Real_widened<
            typename _Real_type<_T1>::_Type,
            typename _Real_type<_T2>::_Type>::_Type>::_Type _Tw;
        return _fpcomp((_Tw)_X, (_Tw)_Y);
    }

    template <class _Ty>
      inline bool isfinite(  _Ty _X) throw()
    {
        return fpclassify(_X) <= 0;
    }

    template <class _Ty>
      inline bool isinf(  _Ty _X) throw()
    {
        return fpclassify(_X) == 1;
    }

    template <class _Ty>
      inline bool isnan(  _Ty _X) throw()
    {
        return fpclassify(_X) == 2;
    }

    template <class _Ty>
      inline bool isnormal(  _Ty _X) throw()
    {
        return fpclassify(_X) == (-1);
    }

    template <class _Ty1, class _Ty2>
      inline bool isgreater(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & 4) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool isgreaterequal(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (2 | 4)) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool isless(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & 1) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool islessequal(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (1 | 2)) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool islessgreater(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (1 | 4)) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool isunordered(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return _fpcomp(_X, _Y) == 0;
    }
}  
#line 449 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"





  int       __cdecl abs(  int _X);
  long      __cdecl labs(  long _X);
  long long __cdecl llabs(  long long _X);

  double __cdecl acos(  double _X);
  double __cdecl asin(  double _X);
  double __cdecl atan(  double _X);
  double __cdecl atan2(  double _Y,   double _X);

  double __cdecl cos(  double _X);
  double __cdecl cosh(  double _X);
  double __cdecl exp(  double _X);
   double __cdecl fabs(  double _X);
  double __cdecl fmod(  double _X,   double _Y);
  double __cdecl log(  double _X);
  double __cdecl log10(  double _X);
  double __cdecl pow(  double _X,   double _Y);
  double __cdecl sin(  double _X);
  double __cdecl sinh(  double _X);
   double __cdecl sqrt(  double _X);
  double __cdecl tan(  double _X);
  double __cdecl tanh(  double _X);

  __declspec(dllimport) double    __cdecl acosh(  double _X);
  __declspec(dllimport) double    __cdecl asinh(  double _X);
  __declspec(dllimport) double    __cdecl atanh(  double _X);
  __declspec(dllimport)  double    __cdecl atof(  char const* _String);
  __declspec(dllimport)  double    __cdecl _atof_l(  char const* _String,   _locale_t _Locale);
  __declspec(dllimport) double    __cdecl _cabs(  struct _complex _Complex_value);
  __declspec(dllimport) double    __cdecl cbrt(  double _X);
  __declspec(dllimport) double    __cdecl ceil(  double _X);
  __declspec(dllimport) double    __cdecl _chgsign(  double _X);
  __declspec(dllimport) double    __cdecl copysign(  double _Number,   double _Sign);
  __declspec(dllimport) double    __cdecl _copysign(  double _Number,   double _Sign);
  __declspec(dllimport) double    __cdecl erf(  double _X);
  __declspec(dllimport) double    __cdecl erfc(  double _X);
  __declspec(dllimport) double    __cdecl exp2(  double _X);
  __declspec(dllimport) double    __cdecl expm1(  double _X);
  __declspec(dllimport) double    __cdecl fdim(  double _X,   double _Y);
  __declspec(dllimport) double    __cdecl floor(  double _X);
  __declspec(dllimport) double    __cdecl fma(  double _X,   double _Y,   double _Z);
  __declspec(dllimport) double    __cdecl fmax(  double _X,   double _Y);
  __declspec(dllimport) double    __cdecl fmin(  double _X,   double _Y);
  __declspec(dllimport) double    __cdecl frexp(  double _X,   int* _Y);
  __declspec(dllimport) double    __cdecl hypot(  double _X,   double _Y);
  __declspec(dllimport) double    __cdecl _hypot(  double _X,   double _Y);
  __declspec(dllimport) int       __cdecl ilogb(  double _X);
  __declspec(dllimport) double    __cdecl ldexp(  double _X,   int _Y);
  __declspec(dllimport) double    __cdecl lgamma(  double _X);
  __declspec(dllimport) long long __cdecl llrint(  double _X);
  __declspec(dllimport) long long __cdecl llround(  double _X);
  __declspec(dllimport) double    __cdecl log1p(  double _X);
  __declspec(dllimport) double    __cdecl log2(  double _X);
  __declspec(dllimport) double    __cdecl logb(  double _X);
  __declspec(dllimport) long      __cdecl lrint(  double _X);
  __declspec(dllimport) long      __cdecl lround(  double _X);

int __cdecl _matherr(  struct _exception* _Except);

  __declspec(dllimport) double __cdecl modf(  double _X,   double* _Y);
  __declspec(dllimport) double __cdecl nan(  char const*);
  __declspec(dllimport) double __cdecl nearbyint(  double _X);
  __declspec(dllimport) double __cdecl nextafter(  double _X,   double _Y);
  __declspec(dllimport) double __cdecl nexttoward(  double _X,   long double _Y);
  __declspec(dllimport) double __cdecl remainder(  double _X,   double _Y);
  __declspec(dllimport) double __cdecl remquo(  double _X,   double _Y,   int* _Z);
  __declspec(dllimport) double __cdecl rint(  double _X);
  __declspec(dllimport) double __cdecl round(  double _X);
  __declspec(dllimport) double __cdecl scalbln(  double _X,   long _Y);
  __declspec(dllimport) double __cdecl scalbn(  double _X,   int _Y);
  __declspec(dllimport) double __cdecl tgamma(  double _X);
  __declspec(dllimport) double __cdecl trunc(  double _X);
  __declspec(dllimport) double __cdecl _j0(  double _X );
  __declspec(dllimport) double __cdecl _j1(  double _X );
  __declspec(dllimport) double __cdecl _jn(int _X,   double _Y);
  __declspec(dllimport) double __cdecl _y0(  double _X);
  __declspec(dllimport) double __cdecl _y1(  double _X);
  __declspec(dllimport) double __cdecl _yn(  int _X,   double _Y);

  __declspec(dllimport) float     __cdecl acoshf(  float _X);
  __declspec(dllimport) float     __cdecl asinhf(  float _X);
  __declspec(dllimport) float     __cdecl atanhf(  float _X);
  __declspec(dllimport) float     __cdecl cbrtf(  float _X);
  __declspec(dllimport) float     __cdecl _chgsignf(  float _X);
  __declspec(dllimport) float     __cdecl copysignf(  float _Number,   float _Sign);
  __declspec(dllimport) float     __cdecl _copysignf(  float _Number,   float _Sign);
  __declspec(dllimport) float     __cdecl erff(  float _X);
  __declspec(dllimport) float     __cdecl erfcf(  float _X);
  __declspec(dllimport) float     __cdecl expm1f(  float _X);
  __declspec(dllimport) float     __cdecl exp2f(  float _X);
  __declspec(dllimport) float     __cdecl fdimf(  float _X,   float _Y);
  __declspec(dllimport) float     __cdecl fmaf(  float _X,   float _Y,   float _Z);
  __declspec(dllimport) float     __cdecl fmaxf(  float _X,   float _Y);
  __declspec(dllimport) float     __cdecl fminf(  float _X,   float _Y);
  __declspec(dllimport) float     __cdecl _hypotf(  float _X,   float _Y);
  __declspec(dllimport) int       __cdecl ilogbf(  float _X);
  __declspec(dllimport) float     __cdecl lgammaf(  float _X);
  __declspec(dllimport) long long __cdecl llrintf(  float _X);
  __declspec(dllimport) long long __cdecl llroundf(  float _X);
  __declspec(dllimport) float     __cdecl log1pf(  float _X);
  __declspec(dllimport) float     __cdecl log2f(  float _X);
  __declspec(dllimport) float     __cdecl logbf(  float _X);
  __declspec(dllimport) long      __cdecl lrintf(  float _X);
  __declspec(dllimport) long      __cdecl lroundf(  float _X);
  __declspec(dllimport) float     __cdecl nanf(  char const*);
  __declspec(dllimport) float     __cdecl nearbyintf(  float _X);
  __declspec(dllimport) float     __cdecl nextafterf(  float _X,   float _Y);
  __declspec(dllimport) float     __cdecl nexttowardf(  float _X,   long double _Y);
  __declspec(dllimport) float     __cdecl remainderf(  float _X,   float _Y);
  __declspec(dllimport) float     __cdecl remquof(  float _X,   float _Y,   int* _Z);
  __declspec(dllimport) float     __cdecl rintf(  float _X);
  __declspec(dllimport) float     __cdecl roundf(  float _X);
  __declspec(dllimport) float     __cdecl scalblnf(  float _X,   long _Y);
  __declspec(dllimport) float     __cdecl scalbnf(  float _X,   int _Y);
  __declspec(dllimport) float     __cdecl tgammaf(  float _X);
  __declspec(dllimport) float     __cdecl truncf(  float _X);





#line 576 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"

      __declspec(dllimport) float __cdecl _logbf(  float _X);
      __declspec(dllimport) float __cdecl _nextafterf(  float _X,   float _Y);
      __declspec(dllimport) int   __cdecl _finitef(  float _X);
      __declspec(dllimport) int   __cdecl _isnanf(  float _X);
      __declspec(dllimport) int   __cdecl _fpclassf(  float _X);

      __declspec(dllimport) int   __cdecl _set_FMA3_enable(  int _Flag);
      __declspec(dllimport) int   __cdecl _get_FMA3_enable(void);






#line 592 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"





      __declspec(dllimport) float __cdecl acosf(  float _X);
      __declspec(dllimport) float __cdecl asinf(  float _X);
      __declspec(dllimport) float __cdecl atan2f(  float _Y,   float _X);
      __declspec(dllimport) float __cdecl atanf(  float _X);
      __declspec(dllimport) float __cdecl ceilf(  float _X);
      __declspec(dllimport) float __cdecl cosf(  float _X);
      __declspec(dllimport) float __cdecl coshf(  float _X);
      __declspec(dllimport) float __cdecl expf(  float _X);











































#line 649 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"





#line 655 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"

      __inline float __cdecl fabsf(  float _X)
    {
        return (float)fabs(_X);
    }

#line 662 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"



      __declspec(dllimport) float __cdecl floorf(  float _X);
      __declspec(dllimport) float __cdecl fmodf(  float _X,   float _Y);













#line 681 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"

  __inline float __cdecl frexpf(  float _X,   int *_Y)
{
    return (float)frexp(_X, _Y);
}

  __inline float __cdecl hypotf(  float _X,   float _Y)
{
    return _hypotf(_X, _Y);
}

  __inline float __cdecl ldexpf(  float _X,   int _Y)
{
    return (float)ldexp(_X, _Y);
}



      __declspec(dllimport) float  __cdecl log10f(  float _X);
      __declspec(dllimport) float  __cdecl logf(  float _X);
      __declspec(dllimport) float  __cdecl modff(  float _X,   float *_Y);
      __declspec(dllimport) float  __cdecl powf(  float _X,   float _Y);
      __declspec(dllimport) float  __cdecl sinf(  float _X);
      __declspec(dllimport) float  __cdecl sinhf(  float _X);
      __declspec(dllimport) float  __cdecl sqrtf(  float _X);
      __declspec(dllimport) float  __cdecl tanf(  float _X);
      __declspec(dllimport) float  __cdecl tanhf(  float _X);



















































#line 760 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"

  __declspec(dllimport) long double __cdecl acoshl(  long double _X);

  __inline long double __cdecl acosl(  long double _X)
{
    return acos((double)_X);
}

  __declspec(dllimport) long double __cdecl asinhl(  long double _X);

  __inline long double __cdecl asinl(  long double _X)
{
    return asin((double)_X);
}

  __inline long double __cdecl atan2l(  long double _Y,   long double _X)
{
    return atan2((double)_Y, (double)_X);
}

  __declspec(dllimport) long double __cdecl atanhl(  long double _X);

  __inline long double __cdecl atanl(  long double _X)
{
    return atan((double)_X);
}

  __declspec(dllimport) long double __cdecl cbrtl(  long double _X);

  __inline long double __cdecl ceill(  long double _X)
{
    return ceil((double)_X);
}

  __inline long double __cdecl _chgsignl(  long double _X)
{
    return _chgsign((double)_X);
}

  __declspec(dllimport) long double __cdecl copysignl(  long double _Number,   long double _Sign);

  __inline long double __cdecl _copysignl(  long double _Number,   long double _Sign)
{
    return _copysign((double)_Number, (double)_Sign);
}

  __inline long double __cdecl coshl(  long double _X)
{
    return cosh((double)_X);
}

  __inline long double __cdecl cosl(  long double _X)
{
    return cos((double)_X);
}

  __declspec(dllimport) long double __cdecl erfl(  long double _X);
  __declspec(dllimport) long double __cdecl erfcl(  long double _X);

  __inline long double __cdecl expl(  long double _X)
{
    return exp((double)_X);
}

  __declspec(dllimport) long double __cdecl exp2l(  long double _X);
  __declspec(dllimport) long double __cdecl expm1l(  long double _X);

  __inline long double __cdecl fabsl(  long double _X)
{
    return fabs((double)_X);
}

  __declspec(dllimport) long double __cdecl fdiml(  long double _X,   long double _Y);

  __inline long double __cdecl floorl(  long double _X)
{
    return floor((double)_X);
}

  __declspec(dllimport) long double __cdecl fmal(  long double _X,   long double _Y,   long double _Z);
  __declspec(dllimport) long double __cdecl fmaxl(  long double _X,   long double _Y);
  __declspec(dllimport) long double __cdecl fminl(  long double _X,   long double _Y);

  __inline long double __cdecl fmodl(  long double _X,   long double _Y)
{
    return fmod((double)_X, (double)_Y);
}

  __inline long double __cdecl frexpl(  long double _X,   int *_Y)
{
    return frexp((double)_X, _Y);
}

  __declspec(dllimport) int __cdecl ilogbl(  long double _X);

  __inline long double __cdecl _hypotl(  long double _X,   long double _Y)
{
    return _hypot((double)_X, (double)_Y);
}

  __inline long double __cdecl hypotl(  long double _X,   long double _Y)
{
    return _hypot((double)_X, (double)_Y);
}

  __inline long double __cdecl ldexpl(  long double _X,   int _Y)
{
    return ldexp((double)_X, _Y);
}

  __declspec(dllimport) long double __cdecl lgammal(  long double _X);
  __declspec(dllimport) long long __cdecl llrintl(  long double _X);
  __declspec(dllimport) long long __cdecl llroundl(  long double _X);

  __inline long double __cdecl logl(  long double _X)
{
    return log((double)_X);
}

  __inline long double __cdecl log10l(  long double _X)
{
    return log10((double)_X);
}

  __declspec(dllimport) long double __cdecl log1pl(  long double _X);
  __declspec(dllimport) long double __cdecl log2l(  long double _X);
  __declspec(dllimport) long double __cdecl logbl(  long double _X);
  __declspec(dllimport) long __cdecl lrintl(  long double _X);
  __declspec(dllimport) long __cdecl lroundl(  long double _X);

  __inline long double __cdecl modfl(  long double _X,   long double* _Y)
{
    double _F, _I;
    _F = modf((double)_X, &_I);
    *_Y = _I;
    return _F;
}

  __declspec(dllimport) long double __cdecl nanl(  char const*);
  __declspec(dllimport) long double __cdecl nearbyintl(  long double _X);
  __declspec(dllimport) long double __cdecl nextafterl(  long double _X,   long double _Y);
  __declspec(dllimport) long double __cdecl nexttowardl(  long double _X,   long double _Y);

  __inline long double __cdecl powl(  long double _X,   long double _Y)
{
    return pow((double)_X, (double)_Y);
}

  __declspec(dllimport) long double __cdecl remainderl(  long double _X,   long double _Y);
  __declspec(dllimport) long double __cdecl remquol(  long double _X,   long double _Y,   int* _Z);
  __declspec(dllimport) long double __cdecl rintl(  long double _X);
  __declspec(dllimport) long double __cdecl roundl(  long double _X);
  __declspec(dllimport) long double __cdecl scalblnl(  long double _X,   long _Y);
  __declspec(dllimport) long double __cdecl scalbnl(  long double _X,   int _Y);

  __inline long double __cdecl sinhl(  long double _X)
{
    return sinh((double)_X);
}

  __inline long double __cdecl sinl(  long double _X)
{
    return sin((double)_X);
}

  __inline long double __cdecl sqrtl(  long double _X)
{
    return sqrt((double)_X);
}

  __inline long double __cdecl tanhl(  long double _X)
{
    return tanh((double)_X);
}

  __inline long double __cdecl tanl(  long double _X)
{
    return tan((double)_X);
}

  __declspec(dllimport) long double __cdecl tgammal(  long double _X);
  __declspec(dllimport) long double __cdecl truncl(  long double _X);





#line 948 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"



    
    
    
    
    
    
    

    

    
        
            extern double HUGE;
        

#line 967 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"

           __declspec(dllimport) double __cdecl j0(  double _X);
           __declspec(dllimport) double __cdecl j1(  double _X);
           __declspec(dllimport) double __cdecl jn(  int _X,   double _Y);
           __declspec(dllimport) double __cdecl y0(  double _X);
           __declspec(dllimport) double __cdecl y1(  double _X);
           __declspec(dllimport) double __cdecl yn(  int _X,   double _Y);
    #line 975 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
#line 976 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"



#pragma warning(pop)
#line 981 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"


} __pragma(pack(pop))

#line 986 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"























#line 1010 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"

#line 8828 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"

#pragma once









 #line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1010 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"

#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"

 

  inline double abs(  double _Xx) noexcept
	{
	return (:: fabs(_Xx));
	}

  inline double pow(  double _Xx,   int _Yx) noexcept
	{
	if (_Yx == 2)
		return (_Xx * _Xx);

	return (:: pow(_Xx, static_cast<double>(_Yx)));
	}

  inline float abs(  float _Xx) noexcept
	{
	return (:: fabsf(_Xx));
	}

  inline float acos(  float _Xx) noexcept
	{
	return (:: acosf(_Xx));
	}

  inline float acosh(  float _Xx) noexcept
	{
	return (:: acoshf(_Xx));
	}

  inline float asin(  float _Xx) noexcept
	{
	return (:: asinf(_Xx));
	}

  inline float asinh(  float _Xx) noexcept
	{
	return (:: asinhf(_Xx));
	}

  inline float atan(  float _Xx) noexcept
	{
	return (:: atanf(_Xx));
	}

  inline float atanh(  float _Xx) noexcept
	{
	return (:: atanhf(_Xx));
	}

  inline float atan2(  float _Yx,   float _Xx) noexcept
	{
	return (:: atan2f(_Yx, _Xx));
	}

  inline float cbrt(  float _Xx) noexcept
	{
	return (:: cbrtf(_Xx));
	}

  inline float ceil(  float _Xx) noexcept
	{
	return (:: ceilf(_Xx));
	}

  inline float copysign(  float _Number,
	  float _Sign) noexcept
	{
	return (:: copysignf(_Number, _Sign));
	}

  inline float cos(  float _Xx) noexcept
	{
	return (:: cosf(_Xx));
	}

  inline float cosh(  float _Xx) noexcept
	{
	return (:: coshf(_Xx));
	}

  inline float erf(  float _Xx) noexcept
	{
	return (:: erff(_Xx));
	}

  inline float erfc(  float _Xx) noexcept
	{
	return (:: erfcf(_Xx));
	}

  inline float exp(  float _Xx) noexcept
	{
	return (:: expf(_Xx));
	}

  inline float exp2(  float _Xx) noexcept
	{
	return (:: exp2f(_Xx));
	}

  inline float expm1(  float _Xx) noexcept
	{
	return (:: expm1f(_Xx));
	}

  inline float fabs(  float _Xx) noexcept
	{
	return (:: fabsf(_Xx));
	}

  inline float fdim(  float _Xx,   float _Yx) noexcept
	{
	return (:: fdimf(_Xx, _Yx));
	}

  inline float floor(  float _Xx) noexcept
	{
	return (:: floorf(_Xx));
	}

  inline float fma(  float _Xx,   float _Yx,
	  float _Zx) noexcept
	{
	return (:: fmaf(_Xx, _Yx, _Zx));
	}

  inline float fmax(  float _Xx,   float _Yx) noexcept
	{
	return (:: fmaxf(_Xx, _Yx));
	}

  inline float fmin(  float _Xx,   float _Yx) noexcept
	{
	return (:: fminf(_Xx, _Yx));
	}

  inline float fmod(  float _Xx,   float _Yx) noexcept
	{
	return (:: fmodf(_Xx, _Yx));
	}

  inline float frexp(  float _Xx,   int* _Yx) noexcept
	{
	return (:: frexpf(_Xx, _Yx));
	}

  inline float hypot(  float _Xx,   float _Yx) noexcept
	{
	return (:: hypotf(_Xx, _Yx));
	}

  inline int ilogb(  float _Xx) noexcept
	{
	return (:: ilogbf(_Xx));
	}

  inline float ldexp(  float _Xx,   int _Yx) noexcept
	{
	return (:: ldexpf(_Xx, _Yx));
	}

  inline float lgamma(  float _Xx) noexcept
	{
	return (:: lgammaf(_Xx));
	}

  inline long long llrint(  float _Xx) noexcept
	{
	return (:: llrintf(_Xx));
	}

  inline long long llround(  float _Xx) noexcept
	{
	return (:: llroundf(_Xx));
	}

  inline float log(  float _Xx) noexcept
	{
	return (:: logf(_Xx));
	}

  inline float log10(  float _Xx) noexcept
	{
	return (:: log10f(_Xx));
	}

  inline float log1p(  float _Xx) noexcept
	{
	return (:: log1pf(_Xx));
	}

  inline float log2(  float _Xx) noexcept
	{
	return (:: log2f(_Xx));
	}

  inline float logb(  float _Xx) noexcept
	{
	return (:: logbf(_Xx));
	}

  inline long lrint(  float _Xx) noexcept
	{
	return (:: lrintf(_Xx));
	}

  inline long lround(  float _Xx) noexcept
	{
	return (:: lroundf(_Xx));
	}

  inline float modf(  float _Xx,   float* _Yx) noexcept
	{
	return (:: modff(_Xx, _Yx));
	}

  inline float nearbyint(  float _Xx) noexcept
	{
	return (:: nearbyintf(_Xx));
	}

  inline float nextafter(  float _Xx,   float _Yx) noexcept
	{
	return (:: nextafterf(_Xx, _Yx));
	}

  inline float nexttoward(  float _Xx,
	  long double _Yx) noexcept
	{
	return (:: nexttowardf(_Xx, _Yx));
	}

  inline float pow(  float _Xx,
	  float _Yx) noexcept
	{
	return (:: powf(_Xx, _Yx));
	}

  inline float pow(  float _Xx,   int _Yx) noexcept
	{
	if (_Yx == 2)
		return (_Xx * _Xx);

	return (:: powf(_Xx, static_cast<float>(_Yx)));
	}

  inline float remainder(  float _Xx,   float _Yx) noexcept
	{
	return (:: remainderf(_Xx, _Yx));
	}

  inline float remquo(  float _Xx,   float _Yx,
	  int *_Zx) noexcept
	{
	return (:: remquof(_Xx, _Yx, _Zx));
	}

  inline float rint(  float _Xx) noexcept
	{
	return (:: rintf(_Xx));
	}

  inline float round(  float _Xx) noexcept
	{
	return (:: roundf(_Xx));
	}

  inline float scalbln(  float _Xx,   long _Yx) noexcept
	{
	return (:: scalblnf(_Xx, _Yx));
	}

  inline float scalbn(  float _Xx,   int _Yx) noexcept
	{
	return (:: scalbnf(_Xx, _Yx));
	}

  inline float sin(  float _Xx) noexcept
	{
	return (:: sinf(_Xx));
	}

  inline float sinh(  float _Xx) noexcept
	{
	return (:: sinhf(_Xx));
	}

  inline float sqrt(  float _Xx) noexcept
	{
	return (:: sqrtf(_Xx));
	}

  inline float tan(  float _Xx) noexcept
	{
	return (:: tanf(_Xx));
	}

  inline float tanh(  float _Xx) noexcept
	{
	return (:: tanhf(_Xx));
	}

  inline float tgamma(  float _Xx) noexcept
	{
	return (:: tgammaf(_Xx));
	}

  inline float trunc(  float _Xx) noexcept
	{
	return (:: truncf(_Xx));
	}

  inline long double abs(  long double _Xx) noexcept
	{
	return (:: fabsl(_Xx));
	}

  inline long double acos(  long double _Xx) noexcept
	{
	return (:: acosl(_Xx));
	}

  inline long double acosh(  long double _Xx) noexcept
	{
	return (:: acoshl(_Xx));
	}

  inline long double asin(  long double _Xx) noexcept
	{
	return (:: asinl(_Xx));
	}

  inline long double asinh(  long double _Xx) noexcept
	{
	return (:: asinhl(_Xx));
	}

  inline long double atan(  long double _Xx) noexcept
	{
	return (:: atanl(_Xx));
	}

  inline long double atanh(  long double _Xx) noexcept
	{
	return (:: atanhl(_Xx));
	}

  inline long double atan2(  long double _Yx,
	  long double _Xx) noexcept
	{
	return (:: atan2l(_Yx, _Xx));
	}

  inline long double cbrt(  long double _Xx) noexcept
	{
	return (:: cbrtl(_Xx));
	}

  inline long double ceil(  long double _Xx) noexcept
	{
	return (:: ceill(_Xx));
	}

  inline long double copysign(  long double _Number,
	  long double _Sign) noexcept
	{
	return (:: copysignl(_Number, _Sign));
	}

  inline long double cos(  long double _Xx) noexcept
	{
	return (:: cosl(_Xx));
	}

  inline long double cosh(  long double _Xx) noexcept
	{
	return (:: coshl(_Xx));
	}

  inline long double erf(  long double _Xx) noexcept
	{
	return (:: erfl(_Xx));
	}

  inline long double erfc(  long double _Xx) noexcept
	{
	return (:: erfcl(_Xx));
	}

  inline long double exp(  long double _Xx) noexcept
	{
	return (:: expl(_Xx));
	}

  inline long double exp2(  long double _Xx) noexcept
	{
	return (:: exp2l(_Xx));
	}

  inline long double expm1(  long double _Xx) noexcept
	{
	return (:: expm1l(_Xx));
	}

  inline long double fabs(  long double _Xx) noexcept
	{
	return (:: fabsl(_Xx));
	}

  inline long double fdim(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: fdiml(_Xx, _Yx));
	}

  inline long double floor(  long double _Xx) noexcept
	{
	return (:: floorl(_Xx));
	}

  inline long double fma(  long double _Xx,
	  long double _Yx,   long double _Zx) noexcept
	{
	return (:: fmal(_Xx, _Yx, _Zx));
	}

  inline long double fmax(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: fmaxl(_Xx, _Yx));
	}

  inline long double fmin(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: fminl(_Xx, _Yx));
	}

  inline long double fmod(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: fmodl(_Xx, _Yx));
	}

  inline long double frexp(  long double _Xx,
	  int* _Yx) noexcept
	{
	return (:: frexpl(_Xx, _Yx));
	}

  inline long double hypot(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: hypotl(_Xx, _Yx));
	}

  inline int ilogb(  long double _Xx) noexcept
	{
	return (:: ilogbl(_Xx));
	}

  inline long double ldexp(  long double _Xx,
	  int _Yx) noexcept
	{
	return (:: ldexpl(_Xx, _Yx));
	}

  inline long double lgamma(  long double _Xx) noexcept
	{
	return (:: lgammal(_Xx));
	}

  inline long long llrint(  long double _Xx) noexcept
	{
	return (:: llrintl(_Xx));
	}

  inline long long llround(  long double _Xx) noexcept
	{
	return (:: llroundl(_Xx));
	}

  inline long double log(  long double _Xx) noexcept
	{
	return (:: logl(_Xx));
	}

  inline long double log10(  long double _Xx) noexcept
	{
	return (:: log10l(_Xx));
	}

  inline long double log1p(  long double _Xx) noexcept
	{
	return (:: log1pl(_Xx));
	}

  inline long double log2(  long double _Xx) noexcept
	{
	return (:: log2l(_Xx));
	}

  inline long double logb(  long double _Xx) noexcept
	{
	return (:: logbl(_Xx));
	}

  inline long lrint(  long double _Xx) noexcept
	{
	return (:: lrintl(_Xx));
	}

  inline long lround(  long double _Xx) noexcept
	{
	return (:: lroundl(_Xx));
	}

  inline long double modf(  long double _Xx,
	  long double* _Yx) noexcept
	{
	return (:: modfl(_Xx, _Yx));
	}

  inline long double nearbyint(  long double _Xx) noexcept
	{
	return (:: nearbyintl(_Xx));
	}

  inline long double nextafter(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: nextafterl(_Xx, _Yx));
	}

  inline long double nexttoward(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: nexttowardl(_Xx, _Yx));
	}

  inline long double pow(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: powl(_Xx, _Yx));
	}

  inline long double pow(  long double _Xx,
	  int _Yx) noexcept
	{
	if (_Yx == 2)
		return (_Xx * _Xx);

	return (:: powl(_Xx, static_cast<long double>(_Yx)));
	}

  inline long double remainder(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: remainderl(_Xx, _Yx));
	}

  inline long double remquo(  long double _Xx,
	  long double _Yx,   int *_Zx) noexcept
	{
	return (:: remquol(_Xx, _Yx, _Zx));
	}

  inline long double rint(  long double _Xx) noexcept
	{
	return (:: rintl(_Xx));
	}

  inline long double round(  long double _Xx) noexcept
	{
	return (:: roundl(_Xx));
	}

  inline long double scalbln(  long double _Xx,
	  long _Yx) noexcept
	{
	return (:: scalblnl(_Xx, _Yx));
	}

  inline long double scalbn(  long double _Xx,
	  int _Yx) noexcept
	{
	return (:: scalbnl(_Xx, _Yx));
	}

  inline long double sin(  long double _Xx) noexcept
	{
	return (:: sinl(_Xx));
	}

  inline long double sinh(  long double _Xx) noexcept
	{
	return (:: sinhl(_Xx));
	}

  inline long double sqrt(  long double _Xx) noexcept
	{
	return (:: sqrtl(_Xx));
	}

  inline long double tan(  long double _Xx) noexcept
	{
	return (:: tanl(_Xx));
	}

  inline long double tanh(  long double _Xx) noexcept
	{
	return (:: tanhl(_Xx));
	}

  inline long double tgamma(  long double _Xx) noexcept
	{
	return (:: tgammal(_Xx));
	}

  inline long double trunc(  long double _Xx) noexcept
	{
	return (:: truncl(_Xx));
	}

 #line 641 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"






 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"


 
#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {
template<class _Ty>
	struct _Promote_to_float
	{	
	typedef typename conditional<is_integral<_Ty>::value,
		double, _Ty>::type type;
	};

template<class _Ty1,
	class _Ty2>
	struct _Common_float_type
	{	
	typedef typename _Promote_to_float<_Ty1>::type _Ty1f;
	typedef typename _Promote_to_float<_Ty2>::type _Ty2f;
	typedef typename conditional<is_same<_Ty1f, long double>::value
		|| is_same<_Ty2f, long double>::value, long double,
		typename conditional<is_same<_Ty1f, double>::value
			|| is_same<_Ty2f, double>::value, double,
			float>::type>::type type;
	};
}








































template<class _Ty1,
	class _Ty2> inline
	typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value
		&& ::std:: is_arithmetic<_Ty2>::value,
		typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type
	pow(const _Ty1 _Left, const _Ty2 _Right)
	{	
	typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type;
	return (:: pow(type(_Left), type(_Right)));
	}


extern "C"    double __cdecl acos(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type acos(_Ty _Left) { return (:: acos((double)_Left)); }
extern "C"    double __cdecl asin(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type asin(_Ty _Left) { return (:: asin((double)_Left)); }
extern "C"    double __cdecl atan(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type atan(_Ty _Left) { return (:: atan((double)_Left)); }
extern "C"    double __cdecl atan2(   double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type atan2(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: atan2((type)_Left, (type)_Right)); }
extern "C"   __declspec(dllimport) double __cdecl ceil(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type ceil(_Ty _Left) { return (:: ceil((double)_Left)); }
extern "C"    double __cdecl cos(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type cos(_Ty _Left) { return (:: cos((double)_Left)); }
extern "C"    double __cdecl cosh(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type cosh(_Ty _Left) { return (:: cosh((double)_Left)); }
extern "C"    double __cdecl exp(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type exp(_Ty _Left) { return (:: exp((double)_Left)); }

extern "C"    double __cdecl fabs(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type fabs(_Ty _Left) { return (:: fabs((double)_Left)); }

extern "C"   __declspec(dllimport) double __cdecl floor(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type floor(_Ty _Left) { return (:: floor((double)_Left)); }
extern "C"    double __cdecl fmod(   double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type fmod(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: fmod((type)_Left, (type)_Right)); }
extern "C"   __declspec(dllimport) double __cdecl frexp(  double,   int *); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type frexp(_Ty _Left,   int * _Arg2) { return (:: frexp((double)_Left, _Arg2)); }
extern "C"   __declspec(dllimport) double __cdecl ldexp(  double,   int); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type ldexp(_Ty _Left,   int _Arg2) { return (:: ldexp((double)_Left, _Arg2)); }
extern "C"    double __cdecl log(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type log(_Ty _Left) { return (:: log((double)_Left)); }
extern "C"    double __cdecl log10(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type log10(_Ty _Left) { return (:: log10((double)_Left)); }


extern "C"    double __cdecl sin(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type sin(_Ty _Left) { return (:: sin((double)_Left)); }
extern "C"    double __cdecl sinh(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type sinh(_Ty _Left) { return (:: sinh((double)_Left)); }
extern "C"    double __cdecl sqrt(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type sqrt(_Ty _Left) { return (:: sqrt((double)_Left)); }
extern "C"    double __cdecl tan(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type tan(_Ty _Left) { return (:: tan((double)_Left)); }
extern "C"    double __cdecl tanh(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type tanh(_Ty _Left) { return (:: tanh((double)_Left)); }

		









		

inline float _Fma(float _Left, float _Middle, float _Right)
	{	
	return (:: fmaf(_Left, _Middle, _Right));
	}

inline double _Fma(double _Left, double _Middle, double _Right)
	{	
	return (:: fma(_Left, _Middle, _Right));
	}

inline long double _Fma(long double _Left, long double _Middle,
	long double _Right)
	{	
	return (:: fmal(_Left, _Middle, _Right));
	}

template<class _Ty1,
	class _Ty2,
	class _Ty3> inline
	typename ::std:: _Common_float_type<_Ty1,
		typename ::std:: _Common_float_type<_Ty2, _Ty3>::type>::type
	fma(_Ty1 _Left, _Ty2 _Middle, _Ty3 _Right)
	{	
	typedef typename ::std:: _Common_float_type<_Ty1,
		typename ::std:: _Common_float_type<_Ty2, _Ty3>::type>::type type;
	return (_Fma((type)_Left, (type)_Middle, (type)_Right));
	}

		

inline float _Remquo(float _Left, float _Right, int *_Pquo)
	{	
	return (:: remquof(_Left, _Right, _Pquo));
	}

inline double _Remquo(double _Left, double _Right, int *_Pquo)
	{	
	return (:: remquo(_Left, _Right, _Pquo));
	}

inline long double _Remquo(long double _Left, long double _Right, int *_Pquo)
	{	
	return (:: remquol(_Left, _Right, _Pquo));
	}

template<class _Ty1,
	class _Ty2> inline
	typename ::std:: _Common_float_type<_Ty1, _Ty2>::type
	remquo(_Ty1 _Left, _Ty2 _Right, int *_Pquo)
	{	
	typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type;
	return (_Remquo((type)_Left, (type)_Right, _Pquo));
	}

extern "C"   __declspec(dllimport) double __cdecl acosh(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type acosh(_Ty _Left) { return (:: acosh((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl asinh(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type asinh(_Ty _Left) { return (:: asinh((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl atanh(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type atanh(_Ty _Left) { return (:: atanh((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl cbrt(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type cbrt(_Ty _Left) { return (:: cbrt((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl copysign(   double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type copysign(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: copysign((type)_Left, (type)_Right)); }
extern "C"   __declspec(dllimport) double __cdecl erf(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type erf(_Ty _Left) { return (:: erf((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl erfc(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type erfc(_Ty _Left) { return (:: erfc((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl expm1(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type expm1(_Ty _Left) { return (:: expm1((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl exp2(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type exp2(_Ty _Left) { return (:: exp2((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl fdim(   double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type fdim(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: fdim((type)_Left, (type)_Right)); }

extern "C"   __declspec(dllimport) double __cdecl fmax(   double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type fmax(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: fmax((type)_Left, (type)_Right)); }
extern "C"   __declspec(dllimport) double __cdecl fmin(   double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type fmin(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: fmin((type)_Left, (type)_Right)); }
extern "C"   __declspec(dllimport) double __cdecl hypot(   double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type hypot(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: hypot((type)_Left, (type)_Right)); }
extern "C"   __declspec(dllimport) int __cdecl ilogb(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, int>::type ilogb(_Ty _Left) { return (:: ilogb((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl lgamma(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type lgamma(_Ty _Left) { return (:: lgamma((double)_Left)); }
extern "C"   __declspec(dllimport) long long __cdecl llrint(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, long long>::type llrint(_Ty _Left) { return (:: llrint((double)_Left)); }
extern "C"   __declspec(dllimport) long long __cdecl llround(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, long long>::type llround(_Ty _Left) { return (:: llround((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl log1p(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type log1p(_Ty _Left) { return (:: log1p((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl log2(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type log2(_Ty _Left) { return (:: log2((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl logb(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type logb(_Ty _Left) { return (:: logb((double)_Left)); }
extern "C"   __declspec(dllimport) long __cdecl lrint(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, long>::type lrint(_Ty _Left) { return (:: lrint((double)_Left)); }
extern "C"   __declspec(dllimport) long __cdecl lround(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, long>::type lround(_Ty _Left) { return (:: lround((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl nearbyint(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type nearbyint(_Ty _Left) { return (:: nearbyint((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl nextafter(   double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type nextafter(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: nextafter((type)_Left, (type)_Right)); }
extern "C"   __declspec(dllimport) double __cdecl nexttoward(  double,   long double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type nexttoward(_Ty _Left,   long double _Arg2) { return (:: nexttoward((double)_Left, _Arg2)); }
extern "C"   __declspec(dllimport) double __cdecl remainder(   double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type remainder(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: remainder((type)_Left, (type)_Right)); }

extern "C"   __declspec(dllimport) double __cdecl rint(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type rint(_Ty _Left) { return (:: rint((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl round(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type round(_Ty _Left) { return (:: round((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl scalbln(  double,   long); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type scalbln(_Ty _Left,   long _Arg2) { return (:: scalbln((double)_Left, _Arg2)); }
extern "C"   __declspec(dllimport) double __cdecl scalbn(  double,   int); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type scalbn(_Ty _Left,   int _Arg2) { return (:: scalbn((double)_Left, _Arg2)); }
extern "C"   __declspec(dllimport) double __cdecl tgamma(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type tgamma(_Ty _Left) { return (:: tgamma((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl trunc(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type trunc(_Ty _Left) { return (:: trunc((double)_Left)); }

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 218 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
#line 219 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
 #line 220 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"





#line 648 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
#line 649 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"

 
namespace std {
using :: abs; using :: acos; using :: asin;
using :: atan; using :: atan2; using :: ceil;
using :: cos; using :: cosh; using :: exp;
using :: fabs; using :: floor; using :: fmod;
using :: frexp; using :: ldexp; using :: log;
using :: log10; using :: modf; using :: pow;
using :: sin; using :: sinh; using :: sqrt;
using :: tan; using :: tanh;

using :: acosf; using :: asinf;
using :: atanf; using :: atan2f; using :: ceilf;
using :: cosf; using :: coshf; using :: expf;
using :: fabsf; using :: floorf; using :: fmodf;
using :: frexpf; using :: ldexpf; using :: logf;
using :: log10f; using :: modff; using :: powf;
using :: sinf; using :: sinhf; using :: sqrtf;
using :: tanf; using :: tanhf;

using :: acosl; using :: asinl;
using :: atanl; using :: atan2l; using :: ceill;
using :: cosl; using :: coshl; using :: expl;
using :: fabsl; using :: floorl; using :: fmodl;
using :: frexpl; using :: ldexpl; using :: logl;
using :: log10l; using :: modfl; using :: powl;
using :: sinl; using :: sinhl; using :: sqrtl;
using :: tanl; using :: tanhl;

using :: float_t; using :: double_t;

using :: acosh; using :: asinh; using :: atanh;
using :: cbrt; using :: erf; using :: erfc;
using :: expm1; using :: exp2;
using :: hypot; using :: ilogb; using :: lgamma;
using :: log1p; using :: log2; using :: logb;
using :: llrint; using :: lrint; using :: nearbyint;
using :: rint; using :: llround; using :: lround;
using :: fdim; using :: fma; using :: fmax; using :: fmin;
using :: round; using :: trunc;
using :: remainder; using :: remquo;
using :: copysign; using :: nan; using :: nextafter;
using :: scalbn; using :: scalbln;
using :: nexttoward; using :: tgamma;

using :: acoshf; using :: asinhf; using :: atanhf;
using :: cbrtf; using :: erff; using :: erfcf;
using :: expm1f; using :: exp2f;
using :: hypotf; using :: ilogbf; using :: lgammaf;
using :: log1pf; using :: log2f; using :: logbf;
using :: llrintf; using :: lrintf; using :: nearbyintf;
using :: rintf; using :: llroundf; using :: lroundf;
using :: fdimf; using :: fmaf; using :: fmaxf; using :: fminf;
using :: roundf; using :: truncf;
using :: remainderf; using :: remquof;
using :: copysignf; using :: nanf;
using :: nextafterf; using :: scalbnf; using :: scalblnf;
using :: nexttowardf; using :: tgammaf;

using :: acoshl; using :: asinhl; using :: atanhl;
using :: cbrtl; using :: erfl; using :: erfcl;
using :: expm1l; using :: exp2l;
using :: hypotl; using :: ilogbl; using :: lgammal;
using :: log1pl; using :: log2l; using :: logbl;
using :: llrintl; using :: lrintl; using :: nearbyintl;
using :: rintl; using :: llroundl; using :: lroundl;
using :: fdiml; using :: fmal; using :: fmaxl; using :: fminl;
using :: roundl; using :: truncl;
using :: remainderl; using :: remquol;
using :: copysignl; using :: nanl;
using :: nextafterl; using :: scalbnl; using :: scalblnl;
using :: nexttowardl; using :: tgammal;

using :: fpclassify; using :: signbit;
using :: isfinite; using :: isinf;
using :: isnan; using :: isnormal;
using :: isgreater; using :: isgreaterequal;
using :: isless; using :: islessequal;
using :: islessgreater; using :: isunordered;
}
 #line 731 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"

#line 733 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"





#line 8832 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

#line 8834 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
#line 8835 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

























#line 8861 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"











































































































































































#line 9033 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) __declspec(dllimport) double __cdecl _hypot(double x, double y);
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) __declspec(dllimport) float  __cdecl _hypotf(float x, float y);



#line 9040 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"




#line 9045 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) bool signbit(long double) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(dllimport) int _ldsign(long double);

#line 9049 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



















#line 9069 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"





#line 9075 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"














extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) bool signbit(double) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(dllimport) int _dsign(double);


#line 9094 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



















#line 9114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"





#line 9120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"














extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) bool signbit(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(dllimport) int _fdsign(float);


#line 9139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



#line 9143 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static __inline __declspec(__host__) __declspec(__device__) bool isinf(long double a);
#line 9145 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"


















#line 9164 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"














static __inline __declspec(__host__) __declspec(__device__) bool isinf(double a);

#line 9181 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



















#line 9201 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"















static __inline __declspec(__host__) __declspec(__device__) bool isinf(float a);

#line 9219 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



#line 9223 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static __inline __declspec(__host__) __declspec(__device__) bool isnan(long double a);
#line 9225 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

















#line 9243 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"













static __inline __declspec(__host__) __declspec(__device__) bool isnan(double a);

#line 9259 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"


















#line 9278 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"














static __inline __declspec(__host__) __declspec(__device__) bool isnan(float a);

#line 9295 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



#line 9299 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static __inline __declspec(__host__) __declspec(__device__) bool isfinite(long double a);
#line 9301 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



















#line 9321 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"















static __inline __declspec(__host__) __declspec(__device__) bool isfinite(double a);

#line 9339 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"


















#line 9358 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"














static __inline __declspec(__host__) __declspec(__device__) bool isfinite(float a);

#line 9375 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"




#line 9380 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
template<class T> extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) T _Pow_int(T, int) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) long long int abs(long long int) throw();
#line 9383 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

#line 9385 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"







#line 9393 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"


#line 9396 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



#line 9400 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

#line 9402 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"







#line 9410 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"









































#line 9452 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) long int __cdecl abs(long int) throw();


#line 9456 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl abs(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) double   __cdecl abs(double) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl fabs(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl ceil(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl floor(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl sqrt(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl pow(float, float) throw();






















#line 9486 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl pow(float, int) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) double   __cdecl pow(double, int) throw();
#line 9490 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
#line 9491 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl log(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl log10(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl fmod(float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl modf(float, float*) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl exp(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl frexp(float, int*) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl ldexp(float, int) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl asin(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl sin(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl sinh(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl acos(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl cos(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl cosh(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl atan(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl atan2(float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl tan(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl tanh(float) throw();
#line 9509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"








#line 9518 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"


#line 9521 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



#line 9525 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

#line 9527 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

























































































































































#line 9681 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl logb(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) int   __cdecl ilogb(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl scalbn(float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl scalbln(float, long int) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl exp2(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl expm1(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl log2(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl log1p(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl acosh(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl asinh(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl atanh(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl hypot(float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl norm3d(float, float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl norm4d(float, float, float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl cbrt(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl erf(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl erfc(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl lgamma(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl tgamma(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl copysign(float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl nextafter(float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl remainder(float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl remquo(float, float, int *) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl round(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) long int      __cdecl lround(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) long long int __cdecl llround(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float         __cdecl trunc(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float         __cdecl rint(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) long int      __cdecl lrint(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) long long int __cdecl llrint(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float         __cdecl nearbyint(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float         __cdecl fdim(float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float         __cdecl fma(float, float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float         __cdecl fmax(float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float         __cdecl fmin(float, float) throw();
#line 9717 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

static inline __declspec(__host__) __declspec(__device__) float exp10(float a);

static inline __declspec(__host__) __declspec(__device__) float rsqrt(float a);

static inline __declspec(__host__) __declspec(__device__) float rcbrt(float a);

static inline __declspec(__host__) __declspec(__device__) float sinpi(float a);

static inline __declspec(__host__) __declspec(__device__) float cospi(float a);

static inline __declspec(__host__) __declspec(__device__) void sincospi(float a, float *sptr, float *cptr);

static inline __declspec(__host__) __declspec(__device__) void sincos(float a, float *sptr, float *cptr);

static inline __declspec(__host__) __declspec(__device__) float j0(float a);

static inline __declspec(__host__) __declspec(__device__) float j1(float a);

static inline __declspec(__host__) __declspec(__device__) float jn(int n, float a);

static inline __declspec(__host__) __declspec(__device__) float y0(float a);

static inline __declspec(__host__) __declspec(__device__) float y1(float a);

static inline __declspec(__host__) __declspec(__device__) float yn(int n, float a);

static inline __declspec(__host__) __declspec(__device__) float cyl_bessel_i0(float a);

static inline __declspec(__host__) __declspec(__device__) float cyl_bessel_i1(float a);

static inline __declspec(__host__) __declspec(__device__) float erfinv(float a);

static inline __declspec(__host__) __declspec(__device__) float erfcinv(float a);

static inline __declspec(__host__) __declspec(__device__) float normcdfinv(float a);

static inline __declspec(__host__) __declspec(__device__) float normcdf(float a);

static inline __declspec(__host__) __declspec(__device__) float erfcx(float a);

static inline __declspec(__host__) __declspec(__device__) double copysign(double a, float b);

static inline __declspec(__host__) __declspec(__device__) float copysign(float a, double b);

static inline __declspec(__host__) __declspec(__device__) unsigned int min(unsigned int a, unsigned int b);

static inline __declspec(__host__) __declspec(__device__) unsigned int min(int a, unsigned int b);

static inline __declspec(__host__) __declspec(__device__) unsigned int min(unsigned int a, int b);

static inline __declspec(__host__) __declspec(__device__) long int min(long int a, long int b);

static inline __declspec(__host__) __declspec(__device__) unsigned long int min(unsigned long int a, unsigned long int b);

static inline __declspec(__host__) __declspec(__device__) unsigned long int min(long int a, unsigned long int b);

static inline __declspec(__host__) __declspec(__device__) unsigned long int min(unsigned long int a, long int b);

static inline __declspec(__host__) __declspec(__device__) long long int min(long long int a, long long int b);

static inline __declspec(__host__) __declspec(__device__) unsigned long long int min(unsigned long long int a, unsigned long long int b);

static inline __declspec(__host__) __declspec(__device__) unsigned long long int min(long long int a, unsigned long long int b);

static inline __declspec(__host__) __declspec(__device__) unsigned long long int min(unsigned long long int a, long long int b);

static inline __declspec(__host__) __declspec(__device__) float min(float a, float b);

static inline __declspec(__host__) __declspec(__device__) double min(double a, double b);

static inline __declspec(__host__) __declspec(__device__) double min(float a, double b);

static inline __declspec(__host__) __declspec(__device__) double min(double a, float b);

static inline __declspec(__host__) __declspec(__device__) unsigned int max(unsigned int a, unsigned int b);

static inline __declspec(__host__) __declspec(__device__) unsigned int max(int a, unsigned int b);

static inline __declspec(__host__) __declspec(__device__) unsigned int max(unsigned int a, int b);

static inline __declspec(__host__) __declspec(__device__) long int max(long int a, long int b);

static inline __declspec(__host__) __declspec(__device__) unsigned long int max(unsigned long int a, unsigned long int b);

static inline __declspec(__host__) __declspec(__device__) unsigned long int max(long int a, unsigned long int b);

static inline __declspec(__host__) __declspec(__device__) unsigned long int max(unsigned long int a, long int b);

static inline __declspec(__host__) __declspec(__device__) long long int max(long long int a, long long int b);

static inline __declspec(__host__) __declspec(__device__) unsigned long long int max(unsigned long long int a, unsigned long long int b);

static inline __declspec(__host__) __declspec(__device__) unsigned long long int max(long long int a, unsigned long long int b);

static inline __declspec(__host__) __declspec(__device__) unsigned long long int max(unsigned long long int a, long long int b);

static inline __declspec(__host__) __declspec(__device__) float max(float a, float b);

static inline __declspec(__host__) __declspec(__device__) double max(double a, double b);

static inline __declspec(__host__) __declspec(__device__) double max(float a, double b);

static inline __declspec(__host__) __declspec(__device__) double max(double a, float b);









#line 9831 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"












































































































































































































































































































































































































































































































#line 10324 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"


































































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 69 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"

























































#line 127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"










































































































































































































#line 330 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
















#line 347 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"






#line 354 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline __declspec(__host__) __declspec(__device__) bool isinf(long double a)
{

  return (__isinfl(a) != 0);


#line 361 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
}
#line 363 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"






#line 370 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline __declspec(__host__) __declspec(__device__) bool isinf(double a)
{

  return (__isinf(a) != 0);


#line 377 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
}
#line 379 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"






#line 386 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline __declspec(__host__) __declspec(__device__) bool isinf(float a)
{

  return (__isinff(a) != 0);


#line 393 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
}
#line 395 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"






#line 402 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline __declspec(__host__) __declspec(__device__) bool isnan(long double a)
{

  return (__isnanl(a) != 0);


#line 409 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
}
#line 411 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"






#line 418 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline __declspec(__host__) __declspec(__device__) bool isnan(double a)
{

  return (__isnan(a) != 0);


#line 425 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
}
#line 427 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"






#line 434 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline __declspec(__host__) __declspec(__device__) bool isnan(float a)
{

  return (__isnanf(a) != 0);


#line 441 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
}
#line 443 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"






#line 450 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline __declspec(__host__) __declspec(__device__) bool isfinite(long double a)
{

  return (__finitel(a) != 0);


#line 457 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
}
#line 459 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"






#line 466 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline __declspec(__host__) __declspec(__device__) bool isfinite(double a)
{

  return (__finite(a) != 0);


#line 473 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
}
#line 475 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"






#line 482 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline __declspec(__host__) __declspec(__device__) bool isfinite(float a)
{

  return (__finitef(a) != 0);


#line 489 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
}
#line 491 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"

#line 493 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"



#line 497 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"

#line 499 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"




















































































































































































#line 680 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"

static inline __declspec(__host__) __declspec(__device__) float exp10(float a)
{
  return exp10f(a);
}

static inline __declspec(__host__) __declspec(__device__) float rsqrt(float a)
{
  return rsqrtf(a);
}

static inline __declspec(__host__) __declspec(__device__) float rcbrt(float a)
{
  return rcbrtf(a);
}

static inline __declspec(__host__) __declspec(__device__) float sinpi(float a)
{
  return sinpif(a);
}

static inline __declspec(__host__) __declspec(__device__) float cospi(float a)
{
  return cospif(a);
}

static inline __declspec(__host__) __declspec(__device__) void sincospi(float a, float *sptr, float *cptr)
{
  sincospif(a, sptr, cptr);
}

static inline __declspec(__host__) __declspec(__device__) void sincos(float a, float *sptr, float *cptr)
{
  sincosf(a, sptr, cptr);
}

static inline __declspec(__host__) __declspec(__device__) float j0(float a)
{
  return j0f(a);
}

static inline __declspec(__host__) __declspec(__device__) float j1(float a)
{
  return j1f(a);
}

static inline __declspec(__host__) __declspec(__device__) float jn(int n, float a)
{
  return jnf(n, a);
}

static inline __declspec(__host__) __declspec(__device__) float y0(float a)
{
  return y0f(a);
}

static inline __declspec(__host__) __declspec(__device__) float y1(float a)
{
  return y1f(a);
}

static inline __declspec(__host__) __declspec(__device__) float yn(int n, float a)
{ 
  return ynf(n, a);
}

static inline __declspec(__host__) __declspec(__device__) float cyl_bessel_i0(float a)
{
  return cyl_bessel_i0f(a);
}

static inline __declspec(__host__) __declspec(__device__) float cyl_bessel_i1(float a)
{
  return cyl_bessel_i1f(a);
}

static inline __declspec(__host__) __declspec(__device__) float erfinv(float a)
{
  return erfinvf(a);
}

static inline __declspec(__host__) __declspec(__device__) float erfcinv(float a)
{
  return erfcinvf(a);
}

static inline __declspec(__host__) __declspec(__device__) float normcdfinv(float a)
{
  return normcdfinvf(a);
}

static inline __declspec(__host__) __declspec(__device__) float normcdf(float a)
{
  return normcdff(a);
}

static inline __declspec(__host__) __declspec(__device__) float erfcx(float a)
{
  return erfcxf(a);
}

static inline __declspec(__host__) __declspec(__device__) double copysign(double a, float b)
{
  return copysign(a, (double)b);
}

static inline __declspec(__host__) __declspec(__device__) float copysign(float a, double b)
{
  return copysignf(a, (float)b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned int min(unsigned int a, unsigned int b)
{
  return umin(a, b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned int min(int a, unsigned int b)
{
  return umin((unsigned int)a, b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned int min(unsigned int a, int b)
{
  return umin(a, (unsigned int)b);
}

static inline __declspec(__host__) __declspec(__device__) long int min(long int a, long int b)
{
  

#pragma warning (disable: 4127)
#line 812 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
  
  if (sizeof(long int) == sizeof(int)) {

#pragma warning (default: 4127)
#line 817 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
    return (long int)min((int)a, (int)b);
  } else {
    return (long int)llmin((long long int)a, (long long int)b);
  }
}

static inline __declspec(__host__) __declspec(__device__) unsigned long int min(unsigned long int a, unsigned long int b)
{

#pragma warning (disable: 4127)
#line 828 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
  if (sizeof(unsigned long int) == sizeof(unsigned int)) {

#pragma warning (default: 4127)
#line 832 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
    return (unsigned long int)umin((unsigned int)a, (unsigned int)b);
  } else {
    return (unsigned long int)ullmin((unsigned long long int)a, (unsigned long long int)b);
  }
}

static inline __declspec(__host__) __declspec(__device__) unsigned long int min(long int a, unsigned long int b)
{

#pragma warning (disable: 4127)
#line 843 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
  if (sizeof(unsigned long int) == sizeof(unsigned int)) {

#pragma warning (default: 4127)
#line 847 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
    return (unsigned long int)umin((unsigned int)a, (unsigned int)b);
  } else {
    return (unsigned long int)ullmin((unsigned long long int)a, (unsigned long long int)b);
  }
}

static inline __declspec(__host__) __declspec(__device__) unsigned long int min(unsigned long int a, long int b)
{

#pragma warning (disable: 4127)
#line 858 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
  if (sizeof(unsigned long int) == sizeof(unsigned int)) {

#pragma warning (default: 4127)
#line 862 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
    return (unsigned long int)umin((unsigned int)a, (unsigned int)b);
  } else {
    return (unsigned long int)ullmin((unsigned long long int)a, (unsigned long long int)b);
  }
}

static inline __declspec(__host__) __declspec(__device__) long long int min(long long int a, long long int b)
{
  return llmin(a, b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned long long int min(unsigned long long int a, unsigned long long int b)
{
  return ullmin(a, b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned long long int min(long long int a, unsigned long long int b)
{
  return ullmin((unsigned long long int)a, b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned long long int min(unsigned long long int a, long long int b)
{
  return ullmin(a, (unsigned long long int)b);
}

static inline __declspec(__host__) __declspec(__device__) float min(float a, float b)
{
  return fminf(a, b);
}

static inline __declspec(__host__) __declspec(__device__) double min(double a, double b)
{
  return fmin(a, b);
}

static inline __declspec(__host__) __declspec(__device__) double min(float a, double b)
{
  return fmin((double)a, b);
}

static inline __declspec(__host__) __declspec(__device__) double min(double a, float b)
{
  return fmin(a, (double)b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned int max(unsigned int a, unsigned int b)
{
  return umax(a, b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned int max(int a, unsigned int b)
{
  return umax((unsigned int)a, b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned int max(unsigned int a, int b)
{
  return umax(a, (unsigned int)b);
}

static inline __declspec(__host__) __declspec(__device__) long int max(long int a, long int b)
{
  

#pragma warning (disable: 4127)
#line 929 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
  if (sizeof(long int) == sizeof(int)) {

#pragma warning (default: 4127)
#line 933 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
    return (long int)max((int)a, (int)b);
  } else {
    return (long int)llmax((long long int)a, (long long int)b);
  }
}

static inline __declspec(__host__) __declspec(__device__) unsigned long int max(unsigned long int a, unsigned long int b)
{

#pragma warning (disable: 4127)
#line 944 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
  if (sizeof(unsigned long int) == sizeof(unsigned int)) {

#pragma warning (default: 4127)
#line 948 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
    return (unsigned long int)umax((unsigned int)a, (unsigned int)b);
  } else {
    return (unsigned long int)ullmax((unsigned long long int)a, (unsigned long long int)b);
  }
}

static inline __declspec(__host__) __declspec(__device__) unsigned long int max(long int a, unsigned long int b)
{

#pragma warning (disable: 4127)
#line 959 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
  if (sizeof(unsigned long int) == sizeof(unsigned int)) {

#pragma warning (default: 4127)
#line 963 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
    return (unsigned long int)umax((unsigned int)a, (unsigned int)b);
  } else {
    return (unsigned long int)ullmax((unsigned long long int)a, (unsigned long long int)b);
  }
}

static inline __declspec(__host__) __declspec(__device__) unsigned long int max(unsigned long int a, long int b)
{

#pragma warning (disable: 4127)
#line 974 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
  if (sizeof(unsigned long int) == sizeof(unsigned int)) {

#pragma warning (default: 4127)
#line 978 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
    return (unsigned long int)umax((unsigned int)a, (unsigned int)b);
  } else {
    return (unsigned long int)ullmax((unsigned long long int)a, (unsigned long long int)b);
  }
}

static inline __declspec(__host__) __declspec(__device__) long long int max(long long int a, long long int b)
{
  return llmax(a, b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned long long int max(unsigned long long int a, unsigned long long int b)
{
  return ullmax(a, b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned long long int max(long long int a, unsigned long long int b)
{
  return ullmax((unsigned long long int)a, b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned long long int max(unsigned long long int a, long long int b)
{
  return ullmax(a, (unsigned long long int)b);
}

static inline __declspec(__host__) __declspec(__device__) float max(float a, float b)
{
  return fmaxf(a, b);
}

static inline __declspec(__host__) __declspec(__device__) double max(double a, double b)
{
  return fmax(a, b);
}

static inline __declspec(__host__) __declspec(__device__) double max(float a, double b)
{
  return fmax((double)a, b);
}

static inline __declspec(__host__) __declspec(__device__) double max(double a, float b)
{
  return fmax(a, (double)b);
}


























































#line 1082 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"









#line 1092 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"










































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3855 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"

#line 3857 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"


#line 10328 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

#line 10330 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.h"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.h"













































































































































































































#line 266 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.h"




#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.hpp"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.hpp"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.hpp"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.hpp"











































































































































































































































































































































































































































































































#line 552 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.hpp"



#line 556 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.hpp"

#line 271 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.h"
#line 272 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.h"

#line 274 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.h"
#line 10332 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

#line 10334 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

#line 250 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"

#line 252 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"

#line 117 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"




























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"



























































































































































































































































































































































































































#line 413 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"

#line 67 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 69 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"







template<class T, int dim = 1>
struct __declspec(__device_builtin_surface_type__) surface : public surfaceReference
{

  __declspec(__host__) surface(void)
  {
    channelDesc = cudaCreateChannelDesc<T>();
  }

  __declspec(__host__) surface(struct cudaChannelFormatDesc desc)
  {
    channelDesc = desc;
  }
#line 91 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
};

template<int dim>
struct  __declspec(__device_builtin_surface_type__)  surface<void, dim> : public surfaceReference
{

  __declspec(__host__) surface(void)
  {
    channelDesc = cudaCreateChannelDesc<void>();
  }
#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
};

#line 105 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"

#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
#line 118 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"




























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"



























































































































































































































































































































































































































#line 413 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"

#line 67 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 69 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"







template<class T, int texType = 0x01, enum cudaTextureReadMode mode = cudaReadModeElementType>
struct __declspec(__device_builtin_texture_type__) texture : public textureReference
{

  __declspec(__host__) texture(int                         norm  = 0,
                   enum cudaTextureFilterMode  fMode = cudaFilterModePoint,
                   enum cudaTextureAddressMode aMode = cudaAddressModeClamp)
  {
    normalized     = norm;
    filterMode     = fMode;
    addressMode[0] = aMode;
    addressMode[1] = aMode;
    addressMode[2] = aMode;
    channelDesc    = cudaCreateChannelDesc<T>();
    sRGB           = 0;
  }

  __declspec(__host__) texture(int                          norm,
                   enum cudaTextureFilterMode   fMode,
                   enum cudaTextureAddressMode  aMode,
                   struct cudaChannelFormatDesc desc)
  {
    normalized     = norm;
    filterMode     = fMode;
    addressMode[0] = aMode;
    addressMode[1] = aMode;
    addressMode[2] = aMode;
    channelDesc    = desc;
    sRGB           = 0;
  }
#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
};

#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"

#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
#line 119 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"































































#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"


#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"


#line 71 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"







#line 79 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"

#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 81 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 82 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 83 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"







extern "C"
{









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __mulhi(int x, int y);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __umulhi(unsigned int x, unsigned int y);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) long long int          __mul64hi(long long int x, long long int y);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned long long int __umul64hi(unsigned long long int x, unsigned long long int y);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __int_as_float(int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __float_as_int(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __uint_as_float(unsigned int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __float_as_uint(float x);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) void                   __syncthreads(void);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) void                   __prof_trigger(int);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) void                   __threadfence(void);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) void                   __threadfence_block(void);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) void                   __trap(void);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) void                   __brkpt(int c = 0);






















__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __saturatef(float x);




































































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __sad(int x, int y, unsigned int z);



































































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __usad(unsigned int x, unsigned int y, unsigned int z);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __mul24(int x, int y);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __umul24(unsigned int x, unsigned int y);












__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  fdividef(float x, float y);










































































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fdividef(float x, float y);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) double                 fdivide(double x, double y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __sinf(float x) ;











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __cosf(float x) ;













__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __tanf(float x) ;














__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) void                   __sincosf(float x, float *sptr, float *cptr) ;

















































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __expf(float x) ;































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __exp10f(float x) ;

























__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __log2f(float x) ;



























__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __log10f(float x) ;











































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __logf(float x) ;










































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __powf(float x, float y) ;








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __float2int_rn(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __float2int_rz(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __float2int_ru(float);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __float2int_rd(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __float2uint_rn(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __float2uint_rz(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __float2uint_ru(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __float2uint_rd(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __int2float_rn(int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __int2float_rz(int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __int2float_ru(int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __int2float_rd(int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __uint2float_rn(unsigned int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __uint2float_rz(unsigned int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __uint2float_ru(unsigned int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __uint2float_rd(unsigned int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) long long int          __float2ll_rn(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) long long int          __float2ll_rz(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) long long int          __float2ll_ru(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) long long int          __float2ll_rd(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned long long int __float2ull_rn(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned long long int __float2ull_rz(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned long long int __float2ull_ru(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned long long int __float2ull_rd(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __ll2float_rn(long long int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __ll2float_rz(long long int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __ll2float_ru(long long int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __ll2float_rd(long long int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __ull2float_rn(unsigned long long int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __ull2float_rz(unsigned long long int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __ull2float_ru(unsigned long long int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __ull2float_rd(unsigned long long int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned short         __float2half_rn(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __half2float(unsigned short x);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fadd_rn(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fadd_rz(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fadd_ru(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fadd_rd(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fsub_rn(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fsub_rz(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fsub_ru(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fsub_rd(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fmul_rn(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fmul_rz(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fmul_ru(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fmul_rd(float x, float y);
























































































































































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fmaf_rn(float x, float y, float z);
























































































































































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fmaf_rz(float x, float y, float z);
























































































































































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fmaf_ru(float x, float y, float z);
























































































































































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fmaf_rd(float x, float y, float z);
































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __frcp_rn(float x);
































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __frcp_rz(float x);
































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __frcp_ru(float x);
































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __frcp_rd(float x);






























__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fsqrt_rn(float x);






























__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fsqrt_rz(float x);






























__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fsqrt_ru(float x);






























__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fsqrt_rd(float x);






































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __frsqrt_rn(float x);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fdiv_rn(float x, float y);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fdiv_rz(float x, float y);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fdiv_ru(float x, float y);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fdiv_rd(float x, float y);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __clz(int x);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __ffs(int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __popc(unsigned int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __brev(unsigned int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __clzll(long long int x);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __ffsll(long long int x);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __popcll(unsigned long long int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned long long int __brevll(unsigned long long int x);























__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __byte_perm(unsigned int x, unsigned int y, unsigned int s);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __hadd(int, int);












__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __rhadd(int, int);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __uhadd(unsigned int, unsigned int);












__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __urhadd(unsigned int, unsigned int);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __double2int_rz(double);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __double2uint_rz(double);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) long long int          __double2ll_rz(double);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned long long int __double2ull_rz(double);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __pm0(void);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __pm1(void);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __pm2(void);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __pm3(void);







 

















__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vabs2(unsigned int a);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vabsss2(unsigned int a);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vadd2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vaddss2 (unsigned int a, unsigned int b);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vaddus2 (unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vavgs2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vavgu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vhaddu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpeq2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpges2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpgeu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpgts2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpgtu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmples2(unsigned int a, unsigned int b);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpleu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmplts2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpltu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpne2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vabsdiffu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vmaxs2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vmaxu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vmins2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vminu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vseteq2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetges2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetgeu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetgts2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetgtu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetles2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetleu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetlts2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetltu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetne2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsadu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsub2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsubss2 (unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsubus2 (unsigned int a, unsigned int b);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vneg2(unsigned int a);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vnegss2(unsigned int a);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vabsdiffs2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsads2(unsigned int a, unsigned int b);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vabs4(unsigned int a);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vabsss4(unsigned int a);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vadd4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vaddss4 (unsigned int a, unsigned int b);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vaddus4 (unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vavgs4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vavgu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vhaddu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpeq4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpges4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpgeu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpgts4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpgtu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmples4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpleu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmplts4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpltu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpne4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vabsdiffu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vmaxs4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vmaxu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vmins4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vminu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vseteq4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetles4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetleu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetlts4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetltu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetges4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetgeu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetgts4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetgtu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetne4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsadu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsub4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsubss4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsubus4(unsigned int a, unsigned int b);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vneg4(unsigned int a);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vnegss4(unsigned int a);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vabsdiffs4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsads4(unsigned int a, unsigned int b);






}







static __inline __declspec(__device__) __declspec(__cudart_builtin__) int mulhi(int a, int b);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) unsigned int mulhi(unsigned int a, unsigned int b);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) unsigned int mulhi(int a, unsigned int b);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) unsigned int mulhi(unsigned int a, int b);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) long long int mul64hi(long long int a, long long int b);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) unsigned long long int mul64hi(unsigned long long int a, unsigned long long int b);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) unsigned long long int mul64hi(long long int a, unsigned long long int b);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) unsigned long long int mul64hi(unsigned long long int a, long long int b);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) int float_as_int(float a);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) float int_as_float(int a);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) unsigned int float_as_uint(float a);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) float uint_as_float(unsigned int a);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) float saturate(float a);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) int mul24(int a, int b);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) unsigned int umul24(unsigned int a, unsigned int b);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) __declspec(deprecated("Please use __trap() instead.")) void trap(void);


static __inline __declspec(__device__) __declspec(__cudart_builtin__) __declspec(deprecated("Please use __brkpt() instead.")) void brkpt(int c = 0);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) __declspec(deprecated("Please use __syncthreads() instead.")) void syncthreads(void);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) __declspec(deprecated("Please use __prof_trigger() instead.")) void prof_trigger(int e);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) __declspec(deprecated("Please use __threadfence() instead.")) void threadfence(bool global = true);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) int float2int(float a, enum cudaRoundMode mode = cudaRoundZero);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) unsigned int float2uint(float a, enum cudaRoundMode mode = cudaRoundZero);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) float int2float(int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) float uint2float(unsigned int a, enum cudaRoundMode mode = cudaRoundNearest);





#line 3292 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"


























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 4503 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"








#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"































































#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"


#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"


#line 71 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"

#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 73 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 74 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 75 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"








static __inline __declspec(__device__) int mulhi(int a, int b)
{
  return __mulhi(a, b);
}

static __inline __declspec(__device__) unsigned int mulhi(unsigned int a, unsigned int b)
{
  return __umulhi(a, b);
}

static __inline __declspec(__device__) unsigned int mulhi(int a, unsigned int b)
{
  return __umulhi((unsigned int)a, b);
}

static __inline __declspec(__device__) unsigned int mulhi(unsigned int a, int b)
{
  return __umulhi(a, (unsigned int)b);
}

static __inline __declspec(__device__) long long int mul64hi(long long int a, long long int b)
{
  return __mul64hi(a, b);
}

static __inline __declspec(__device__) unsigned long long int mul64hi(unsigned long long int a, unsigned long long int b)
{
  return __umul64hi(a, b);
}

static __inline __declspec(__device__) unsigned long long int mul64hi(long long int a, unsigned long long int b)
{
  return __umul64hi((unsigned long long int)a, b);
}

static __inline __declspec(__device__) unsigned long long int mul64hi(unsigned long long int a, long long int b)
{
  return __umul64hi(a, (unsigned long long int)b);
}

static __inline __declspec(__device__) int float_as_int(float a)
{
  return __float_as_int(a);
}

static __inline __declspec(__device__) float int_as_float(int a)
{
  return __int_as_float(a);
}

static __inline __declspec(__device__) unsigned int float_as_uint(float a)
{
  return __float_as_uint(a);
}

static __inline __declspec(__device__) float uint_as_float(unsigned int a)
{
  return __uint_as_float(a);
}
static __inline __declspec(__device__) float saturate(float a)
{
  return __saturatef(a);
}

static __inline __declspec(__device__) int mul24(int a, int b)
{
  return __mul24(a, b);
}

static __inline __declspec(__device__) unsigned int umul24(unsigned int a, unsigned int b)
{
  return __umul24(a, b);
}

static __inline __declspec(__device__) void trap(void)
{
  __trap();
}


static __inline __declspec(__device__) void brkpt(int c)
{
  __brkpt(c);
}

static __inline __declspec(__device__) void syncthreads(void)
{
  __syncthreads();
}

static __inline __declspec(__device__) void prof_trigger(int e)
{
       if (e ==  0) __prof_trigger( 0);
  else if (e ==  1) __prof_trigger( 1);
  else if (e ==  2) __prof_trigger( 2);
  else if (e ==  3) __prof_trigger( 3);
  else if (e ==  4) __prof_trigger( 4);
  else if (e ==  5) __prof_trigger( 5);
  else if (e ==  6) __prof_trigger( 6);
  else if (e ==  7) __prof_trigger( 7);
  else if (e ==  8) __prof_trigger( 8);
  else if (e ==  9) __prof_trigger( 9);
  else if (e == 10) __prof_trigger(10);
  else if (e == 11) __prof_trigger(11);
  else if (e == 12) __prof_trigger(12);
  else if (e == 13) __prof_trigger(13);
  else if (e == 14) __prof_trigger(14);
  else if (e == 15) __prof_trigger(15);
}

static __inline __declspec(__device__) void threadfence(bool global)
{
  global ? __threadfence() : __threadfence_block();
}

static __inline __declspec(__device__) int float2int(float a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __float2int_rn(a) :
         mode == cudaRoundPosInf  ? __float2int_ru(a) :
         mode == cudaRoundMinInf  ? __float2int_rd(a) :
                                    __float2int_rz(a);
}

static __inline __declspec(__device__) unsigned int float2uint(float a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __float2uint_rn(a) :
         mode == cudaRoundPosInf  ? __float2uint_ru(a) :
         mode == cudaRoundMinInf  ? __float2uint_rd(a) :
                                    __float2uint_rz(a);
}

static __inline __declspec(__device__) float int2float(int a, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero   ? __int2float_rz(a) :
         mode == cudaRoundPosInf ? __int2float_ru(a) :
         mode == cudaRoundMinInf ? __int2float_rd(a) :
                                   __int2float_rn(a);
}

static __inline __declspec(__device__) float uint2float(unsigned int a, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero   ? __uint2float_rz(a) :
         mode == cudaRoundPosInf ? __uint2float_ru(a) :
         mode == cudaRoundMinInf ? __uint2float_rd(a) :
                                   __uint2float_rn(a);
}




#line 234 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 4320 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"







#line 4328 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"


#line 4512 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
#line 4513 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"

#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"









#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 69 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"





#line 75 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"



extern "C"
{
#line 81 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
extern __declspec(__device__) __declspec(__device_builtin__) int          __iAtomicAdd(int *address, int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicAdd(unsigned int *address, unsigned int val);
extern __declspec(__device__) __declspec(__device_builtin__) int          __iAtomicExch(int *address, int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicExch(unsigned int *address, unsigned int val);
extern __declspec(__device__) __declspec(__device_builtin__) float        __fAtomicExch(float *address, float val);
extern __declspec(__device__) __declspec(__device_builtin__) int          __iAtomicMin(int *address, int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicMin(unsigned int *address, unsigned int val);
extern __declspec(__device__) __declspec(__device_builtin__) int          __iAtomicMax(int *address, int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicMax(unsigned int *address, unsigned int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicInc(unsigned int *address, unsigned int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicDec(unsigned int *address, unsigned int val);
extern __declspec(__device__) __declspec(__device_builtin__) int          __iAtomicAnd(int *address, int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicAnd(unsigned int *address, unsigned int val);
extern __declspec(__device__) __declspec(__device_builtin__) int          __iAtomicOr(int *address, int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicOr(unsigned int *address, unsigned int val);
extern __declspec(__device__) __declspec(__device_builtin__) int          __iAtomicXor(int *address, int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicXor(unsigned int *address, unsigned int val);
extern __declspec(__device__) __declspec(__device_builtin__) int          __iAtomicCAS(int *address, int compare, int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicCAS(unsigned int *address, unsigned int compare, unsigned int val);

}
#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 104 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"







static __inline __declspec(__device__) int atomicAdd(int *address, int val) ;

static __inline __declspec(__device__) unsigned int atomicAdd(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__) int atomicSub(int *address, int val) ;

static __inline __declspec(__device__) unsigned int atomicSub(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__) int atomicExch(int *address, int val) ;

static __inline __declspec(__device__) unsigned int atomicExch(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__) float atomicExch(float *address, float val) ;

static __inline __declspec(__device__) int atomicMin(int *address, int val) ;

static __inline __declspec(__device__) unsigned int atomicMin(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__) int atomicMax(int *address, int val) ;

static __inline __declspec(__device__) unsigned int atomicMax(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__) unsigned int atomicInc(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__) unsigned int atomicDec(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__) int atomicAnd(int *address, int val) ;

static __inline __declspec(__device__) unsigned int atomicAnd(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__) int atomicOr(int *address, int val) ;

static __inline __declspec(__device__) unsigned int atomicOr(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__) int atomicXor(int *address, int val) ;

static __inline __declspec(__device__) unsigned int atomicXor(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__) int atomicCAS(int *address, int compare, int val) ;

static __inline __declspec(__device__) unsigned int atomicCAS(unsigned int *address, unsigned int compare, unsigned int val) ;







#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 160 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 161 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"



extern "C"
{
#line 167 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"

extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __ullAtomicAdd(unsigned long long int *address, unsigned long long int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __ullAtomicExch(unsigned long long int *address, unsigned long long int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __ullAtomicCAS(unsigned long long int *address, unsigned long long int compare, unsigned long long int val);
#line 172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
extern __declspec(__device__) __declspec(__device_builtin__) int                    __any(int cond);
extern __declspec(__device__) __declspec(__device_builtin__) int                    __all(int cond);

}
#line 177 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"








static __inline __declspec(__device__) unsigned long long int atomicAdd(unsigned long long int *address, unsigned long long int val) ;

static __inline __declspec(__device__) unsigned long long int atomicExch(unsigned long long int *address, unsigned long long int val) ;

static __inline __declspec(__device__) unsigned long long int atomicCAS(unsigned long long int *address, unsigned long long int compare, unsigned long long int val) ;

static __inline __declspec(__device__) bool any(bool cond) ;

static __inline __declspec(__device__) bool all(bool cond) ;

#line 196 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"





#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.hpp"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.hpp"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.hpp"









#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 69 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.hpp"







static __inline __declspec(__device__) int atomicAdd(int *address, int val)
{
  return __iAtomicAdd(address, val);
}

static __inline __declspec(__device__) unsigned int atomicAdd(unsigned int *address, unsigned int val)
{
  return __uAtomicAdd(address, val);
}

static __inline __declspec(__device__) int atomicSub(int *address, int val)
{
  return __iAtomicAdd(address, (unsigned int)-(int)val);
}

static __inline __declspec(__device__) unsigned int atomicSub(unsigned int *address, unsigned int val)
{
  return __uAtomicAdd(address, (unsigned int)-(int)val);
}

static __inline __declspec(__device__) int atomicExch(int *address, int val)
{
  return __iAtomicExch(address, val);
}

static __inline __declspec(__device__) unsigned int atomicExch(unsigned int *address, unsigned int val)
{
  return __uAtomicExch(address, val);
}

static __inline __declspec(__device__) float atomicExch(float *address, float val)
{
  return __fAtomicExch(address, val);
}

static __inline __declspec(__device__) int atomicMin(int *address, int val)
{
  return __iAtomicMin(address, val);
}

static __inline __declspec(__device__) unsigned int atomicMin(unsigned int *address, unsigned int val)
{
  return __uAtomicMin(address, val);
}

static __inline __declspec(__device__) int atomicMax(int *address, int val)
{
  return __iAtomicMax(address, val);
}

static __inline __declspec(__device__) unsigned int atomicMax(unsigned int *address, unsigned int val)
{
  return __uAtomicMax(address, val);
}

static __inline __declspec(__device__) unsigned int atomicInc(unsigned int *address, unsigned int val)
{
  return __uAtomicInc(address, val);
}

static __inline __declspec(__device__) unsigned int atomicDec(unsigned int *address, unsigned int val)
{
  return __uAtomicDec(address, val);
}

static __inline __declspec(__device__) int atomicAnd(int *address, int val)
{
  return __iAtomicAnd(address, val);
}

static __inline __declspec(__device__) unsigned int atomicAnd(unsigned int *address, unsigned int val)
{
  return __uAtomicAnd(address, val);
}

static __inline __declspec(__device__) int atomicOr(int *address, int val)
{
  return __iAtomicOr(address, val);
}

static __inline __declspec(__device__) unsigned int atomicOr(unsigned int *address, unsigned int val)
{
  return __uAtomicOr(address, val);
}

static __inline __declspec(__device__) int atomicXor(int *address, int val)
{
  return __iAtomicXor(address, val);
}

static __inline __declspec(__device__) unsigned int atomicXor(unsigned int *address, unsigned int val)
{
  return __uAtomicXor(address, val);
}

static __inline __declspec(__device__) int atomicCAS(int *address, int compare, int val)
{
  return __iAtomicCAS(address, compare, val);
}

static __inline __declspec(__device__) unsigned int atomicCAS(unsigned int *address, unsigned int compare, unsigned int val)
{
  return __uAtomicCAS(address, compare, val);
}







#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 188 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 189 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.hpp"







static __inline __declspec(__device__) unsigned long long int atomicAdd(unsigned long long int *address, unsigned long long int val)
{
  return __ullAtomicAdd(address, val);
}

static __inline __declspec(__device__) unsigned long long int atomicExch(unsigned long long int *address, unsigned long long int val)
{
  return __ullAtomicExch(address, val);
}

static __inline __declspec(__device__) unsigned long long int atomicCAS(unsigned long long int *address, unsigned long long int compare, unsigned long long int val)
{
  return __ullAtomicCAS(address, compare, val);
}

static __inline __declspec(__device__) bool any(bool cond)
{
  return (bool)__any((int)cond);
}

static __inline __declspec(__device__) bool all(bool cond)
{
  return (bool)__all((int)cond);
}

#line 222 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.hpp"



#line 226 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.hpp"

#line 202 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 203 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"

#line 205 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 4515 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"

#line 72 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"

#line 74 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"

#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 76 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 77 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 78 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"


extern "C"
{
#line 83 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"








extern __declspec(__device__) __declspec(__device_builtin__) long long int         __double_as_longlong(double x);








extern __declspec(__device__) __declspec(__device_builtin__) double                __longlong_as_double(long long int x);




























































































































































extern __declspec(__device__) __declspec(__device_builtin__) double                __fma_rn(double x, double y, double z);




























































































































































extern __declspec(__device__) __declspec(__device_builtin__) double                __fma_rz(double x, double y, double z);




























































































































































extern __declspec(__device__) __declspec(__device_builtin__) double                __fma_ru(double x, double y, double z);




























































































































































extern __declspec(__device__) __declspec(__device_builtin__) double                __fma_rd(double x, double y, double z);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dadd_rn(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dadd_rz(double x, double y);










 
extern __declspec(__device__) __declspec(__device_builtin__) double                __dadd_ru(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dadd_rd(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dsub_rn(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dsub_rz(double x, double y);










 
extern __declspec(__device__) __declspec(__device_builtin__) double                __dsub_ru(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dsub_rd(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dmul_rn(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dmul_rz(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dmul_ru(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dmul_rd(double x, double y);








extern __declspec(__device__) __declspec(__device_builtin__) float                 __double2float_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) float                 __double2float_rz(double x);








extern __declspec(__device__) __declspec(__device_builtin__) float                 __double2float_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) float                 __double2float_rd(double x);








extern __declspec(__device__) __declspec(__device_builtin__) int                   __double2int_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) int                   __double2int_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) int                   __double2int_rd(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned int          __double2uint_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned int          __double2uint_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned int          __double2uint_rd(double x);








extern __declspec(__device__) __declspec(__device_builtin__) long long int          __double2ll_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) long long int          __double2ll_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) long long int          __double2ll_rd(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __double2ull_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __double2ull_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __double2ull_rd(double x);







extern __declspec(__device__) __declspec(__device_builtin__) double                 __int2double_rn(int x);







extern __declspec(__device__) __declspec(__device_builtin__) double                 __uint2double_rn(unsigned int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ll2double_rn(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ll2double_rz(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ll2double_ru(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ll2double_rd(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ull2double_rn(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ull2double_rz(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ull2double_ru(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ull2double_rd(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) int                    __double2hiint(double x);








extern __declspec(__device__) __declspec(__device_builtin__) int                    __double2loint(double x);









extern __declspec(__device__) __declspec(__device_builtin__) double                 __hiloint2double(int hi, int lo);

}
#line 1136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"







static __inline __declspec(__device__) double fma(double a, double b, double c, enum cudaRoundMode mode);

static __inline __declspec(__device__) double dmul(double a, double b, enum cudaRoundMode mode = cudaRoundNearest);

static __inline __declspec(__device__) double dadd(double a, double b, enum cudaRoundMode mode = cudaRoundNearest);

static __inline __declspec(__device__) double dsub(double a, double b, enum cudaRoundMode mode = cudaRoundNearest);

static __inline __declspec(__device__) int double2int(double a, enum cudaRoundMode mode = cudaRoundZero);

static __inline __declspec(__device__) unsigned int double2uint(double a, enum cudaRoundMode mode = cudaRoundZero);

static __inline __declspec(__device__) long long int double2ll(double a, enum cudaRoundMode mode = cudaRoundZero);

static __inline __declspec(__device__) unsigned long long int double2ull(double a, enum cudaRoundMode mode = cudaRoundZero);

static __inline __declspec(__device__) double ll2double(long long int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline __declspec(__device__) double ull2double(unsigned long long int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline __declspec(__device__) double int2double(int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline __declspec(__device__) double uint2double(unsigned int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline __declspec(__device__) double float2double(float a, enum cudaRoundMode mode = cudaRoundNearest);



#line 1172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"




















#line 1193 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"

#line 72 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"

#line 74 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"

#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 76 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 77 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 78 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"







static __inline __declspec(__device__) double fma(double a, double b, double c, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero   ? __fma_rz(a, b, c) :
         mode == cudaRoundPosInf ? __fma_ru(a, b, c) :
         mode == cudaRoundMinInf ? __fma_rd(a, b, c) :
                                   __fma_rn(a, b, c);
}

static __inline __declspec(__device__) double dmul(double a, double b, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero   ? __dmul_rz(a, b) :
         mode == cudaRoundPosInf ? __dmul_ru(a, b) :
         mode == cudaRoundMinInf ? __dmul_rd(a, b) :
                                   __dmul_rn(a, b);
}

static __inline __declspec(__device__) double dadd(double a, double b, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero   ? __dadd_rz(a, b) :
         mode == cudaRoundPosInf ? __dadd_ru(a, b) :
         mode == cudaRoundMinInf ? __dadd_rd(a, b) :
                                   __dadd_rn(a, b);
}

static __inline __declspec(__device__) double dsub(double a, double b, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero   ? __dsub_rz(a, b) :
         mode == cudaRoundPosInf ? __dsub_ru(a, b) :
         mode == cudaRoundMinInf ? __dsub_rd(a, b) :
                                   __dsub_rn(a, b);
}

static __inline __declspec(__device__) int double2int(double a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __double2int_rn(a) :
         mode == cudaRoundPosInf  ? __double2int_ru(a) :
         mode == cudaRoundMinInf  ? __double2int_rd(a) :
                                    __double2int_rz(a);
}

static __inline __declspec(__device__) unsigned int double2uint(double a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __double2uint_rn(a) :
         mode == cudaRoundPosInf  ? __double2uint_ru(a) :
         mode == cudaRoundMinInf  ? __double2uint_rd(a) :
                                    __double2uint_rz(a);
}

static __inline __declspec(__device__) long long int double2ll(double a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __double2ll_rn(a) :
         mode == cudaRoundPosInf  ? __double2ll_ru(a) :
         mode == cudaRoundMinInf  ? __double2ll_rd(a) :
                                    __double2ll_rz(a);
}

static __inline __declspec(__device__) unsigned long long int double2ull(double a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __double2ull_rn(a) :
         mode == cudaRoundPosInf  ? __double2ull_ru(a) :
         mode == cudaRoundMinInf  ? __double2ull_rd(a) :
                                    __double2ull_rz(a);
}

static __inline __declspec(__device__) double ll2double(long long int a, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero   ? __ll2double_rz(a) :
         mode == cudaRoundPosInf ? __ll2double_ru(a) :
         mode == cudaRoundMinInf ? __ll2double_rd(a) :
                                   __ll2double_rn(a);
}

static __inline __declspec(__device__) double ull2double(unsigned long long int a, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero   ? __ull2double_rz(a) :
         mode == cudaRoundPosInf ? __ull2double_ru(a) :
         mode == cudaRoundMinInf ? __ull2double_rd(a) :
                                   __ull2double_rn(a);
}

static __inline __declspec(__device__) double int2double(int a, enum cudaRoundMode mode)
{
  return (double)a;
}

static __inline __declspec(__device__) double uint2double(unsigned int a, enum cudaRoundMode mode)
{
  return (double)a;
}

static __inline __declspec(__device__) double float2double(float a, enum cudaRoundMode mode)
{
  return (double)a;
}



#line 183 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"








































#line 224 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"

#line 226 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"

#line 1196 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
#line 1197 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"

#line 1199 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"

#line 4516 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.h"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.h"









#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 69 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.h"





#line 75 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.h"




extern "C"
{
#line 82 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.h"
extern __declspec(__device__) __declspec(__device_builtin__) float __fAtomicAdd(float *address, float val);

}
#line 86 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.h"
#line 87 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.h"







static __inline __declspec(__device__) float atomicAdd(float *address, float val) ;

#line 97 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.h"





#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.hpp"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.hpp"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.hpp"









#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 69 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.hpp"







static __inline __declspec(__device__) float atomicAdd(float *address, float val)
{
  return __fAtomicAdd(address, val);
}

#line 82 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.hpp"



#line 86 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.hpp"

#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.h"
#line 104 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.h"

#line 106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.h"
#line 4517 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"











#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 71 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"





#line 77 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"




extern "C"
{
#line 84 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
extern __declspec(__device__) __declspec(__device_builtin__) long long __illAtomicMin(long long *address, long long val);
extern __declspec(__device__) __declspec(__device_builtin__) long long __illAtomicMax(long long *address, long long val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long __ullAtomicMin(unsigned long long *address, unsigned long long val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long __ullAtomicMax(unsigned long long *address, unsigned long long val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long __ullAtomicAnd(unsigned long long *address, unsigned long long val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long __ullAtomicOr (unsigned long long *address, unsigned long long val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long __ullAtomicXor(unsigned long long *address, unsigned long long val);

}
#line 94 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
#line 95 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"







static __inline __declspec(__device__) long long atomicMin(long long *address, long long val) ;

static __inline __declspec(__device__) long long atomicMax(long long *address, long long val) ;

static __inline __declspec(__device__) unsigned long long atomicMin(unsigned long long *address, unsigned long long val) ;

static __inline __declspec(__device__) unsigned long long atomicMax(unsigned long long *address, unsigned long long val) ;

static __inline __declspec(__device__) unsigned long long atomicAnd(unsigned long long *address, unsigned long long val) ;

static __inline __declspec(__device__) unsigned long long atomicOr(unsigned long long *address, unsigned long long val) ;

static __inline __declspec(__device__) unsigned long long atomicXor(unsigned long long *address, unsigned long long val) ;

#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"

#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"





#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.hpp"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.hpp"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.hpp"











#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 71 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.hpp"







static __inline __declspec(__device__) long long atomicMin(long long *address, long long val)
{
    return __illAtomicMin(address, val);
}

static __inline __declspec(__device__) long long atomicMax(long long *address, long long val)
{
    return __illAtomicMax(address, val);
}

static __inline __declspec(__device__) unsigned long long atomicMin(unsigned long long *address, unsigned long long val)
{
    return __ullAtomicMin(address, val);
}

static __inline __declspec(__device__) unsigned long long atomicMax(unsigned long long *address, unsigned long long val)
{
    return __ullAtomicMax(address, val);
}

static __inline __declspec(__device__) unsigned long long atomicAnd(unsigned long long *address, unsigned long long val)
{
    return __ullAtomicAnd(address, val);
}

static __inline __declspec(__device__) unsigned long long atomicOr(unsigned long long *address, unsigned long long val)
{
    return __ullAtomicOr(address, val);
}

static __inline __declspec(__device__) unsigned long long atomicXor(unsigned long long *address, unsigned long long val)
{
    return __ullAtomicXor(address, val);
}

#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.hpp"

#line 116 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.hpp"



#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.hpp"

#line 125 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
#line 126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"

#line 128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
#line 4518 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_35_atomic_functions.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"






























































































































#line 128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_35_atomic_functions.h"

#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_35_atomic_functions.h"
#line 4519 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"























































#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"

#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"













































































































































































































































































































































































































































































#line 521 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"

#line 523 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"





#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.hpp"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.hpp"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.hpp"























































































































































































































































































































































































































































#line 498 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.hpp"

#line 500 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.hpp"



#line 504 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.hpp"

#line 529 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 530 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"

#line 532 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"

#line 4520 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"









#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 69 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"





#line 76 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"



extern "C"
{
#line 82 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
extern __declspec(__device__) __declspec(__device_builtin__) void                   __threadfence_system(void);











extern __declspec(__device__) __declspec(__device_builtin__) double                __ddiv_rn(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __ddiv_rz(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __ddiv_ru(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __ddiv_rd(double x, double y);

































extern __declspec(__device__) __declspec(__device_builtin__) double                __drcp_rn(double x);

































extern __declspec(__device__) __declspec(__device_builtin__) double                __drcp_rz(double x);

































extern __declspec(__device__) __declspec(__device_builtin__) double                __drcp_ru(double x);

































extern __declspec(__device__) __declspec(__device_builtin__) double                __drcp_rd(double x);































extern __declspec(__device__) __declspec(__device_builtin__) double                __dsqrt_rn(double x);































extern __declspec(__device__) __declspec(__device_builtin__) double                __dsqrt_rz(double x);































extern __declspec(__device__) __declspec(__device_builtin__) double                __dsqrt_ru(double x);































extern __declspec(__device__) __declspec(__device_builtin__) double                __dsqrt_rd(double x);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int          __ballot(int);
extern __declspec(__device__) __declspec(__device_builtin__) int                   __syncthreads_count(int);
extern __declspec(__device__) __declspec(__device_builtin__) int                   __syncthreads_and(int);
extern __declspec(__device__) __declspec(__device_builtin__) int                   __syncthreads_or(int);
extern __declspec(__device__) __declspec(__device_builtin__) long long int         clock64(void);






extern __declspec(__device__) __declspec(__device_builtin__) float                 __fmaf_ieee_rn(float, float, float);
extern __declspec(__device__) __declspec(__device_builtin__) float                 __fmaf_ieee_rz(float, float, float);
extern __declspec(__device__) __declspec(__device_builtin__) float                 __fmaf_ieee_ru(float, float, float);
extern __declspec(__device__) __declspec(__device_builtin__) float                 __fmaf_ieee_rd(float, float, float);











extern __declspec(__device__) __declspec(__device_builtin__) long long int         __double_as_longlong(double x);








extern __declspec(__device__) __declspec(__device_builtin__) double                __longlong_as_double(long long int x);




























































































































































extern __declspec(__device__) __declspec(__device_builtin__) double                __fma_rn(double x, double y, double z);




























































































































































extern __declspec(__device__) __declspec(__device_builtin__) double                __fma_rz(double x, double y, double z);




























































































































































extern __declspec(__device__) __declspec(__device_builtin__) double                __fma_ru(double x, double y, double z);




























































































































































extern __declspec(__device__) __declspec(__device_builtin__) double                __fma_rd(double x, double y, double z);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dadd_rn(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dadd_rz(double x, double y);










 
extern __declspec(__device__) __declspec(__device_builtin__) double                __dadd_ru(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dadd_rd(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dsub_rn(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dsub_rz(double x, double y);










 
extern __declspec(__device__) __declspec(__device_builtin__) double                __dsub_ru(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dsub_rd(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dmul_rn(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dmul_rz(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dmul_ru(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dmul_rd(double x, double y);








extern __declspec(__device__) __declspec(__device_builtin__) float                 __double2float_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) float                 __double2float_rz(double x);








extern __declspec(__device__) __declspec(__device_builtin__) float                 __double2float_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) float                 __double2float_rd(double x);








extern __declspec(__device__) __declspec(__device_builtin__) int                   __double2int_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) int                   __double2int_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) int                   __double2int_rd(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned int          __double2uint_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned int          __double2uint_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned int          __double2uint_rd(double x);








extern __declspec(__device__) __declspec(__device_builtin__) long long int          __double2ll_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) long long int          __double2ll_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) long long int          __double2ll_rd(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __double2ull_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __double2ull_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __double2ull_rd(double x);







extern __declspec(__device__) __declspec(__device_builtin__) double                 __int2double_rn(int x);







extern __declspec(__device__) __declspec(__device_builtin__) double                 __uint2double_rn(unsigned int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ll2double_rn(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ll2double_rz(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ll2double_ru(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ll2double_rd(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ull2double_rn(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ull2double_rz(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ull2double_ru(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ull2double_rd(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) int                    __double2hiint(double x);








extern __declspec(__device__) __declspec(__device_builtin__) int                    __double2loint(double x);









extern __declspec(__device__) __declspec(__device_builtin__) double                 __hiloint2double(int hi, int lo);



}
#line 1468 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"







static __inline __declspec(__device__) unsigned int ballot(bool pred) ;

static __inline __declspec(__device__) int syncthreads_count(bool pred) ;

static __inline __declspec(__device__) bool syncthreads_and(bool pred) ;

static __inline __declspec(__device__) bool syncthreads_or(bool pred) ;




static __inline __declspec(__device__) unsigned int __isGlobal(const void *ptr) ;

#line 1489 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"





#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.hpp"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.hpp"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.hpp"









#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 69 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.hpp"







static __inline __declspec(__device__) unsigned int ballot(bool pred)
{
  return __ballot((int)pred);
}

static __inline __declspec(__device__) int syncthreads_count(bool pred)
{
  return __syncthreads_count((int)pred);
}

static __inline __declspec(__device__) bool syncthreads_and(bool pred)
{
  return (bool)__syncthreads_and((int)pred);
}

static __inline __declspec(__device__) bool syncthreads_or(bool pred)
{
  return (bool)__syncthreads_or((int)pred);
}




static __inline __declspec(__device__) unsigned int __isGlobal(const void *ptr)
{
    unsigned int ret;
    asm volatile ("{ \n\t"
                  "    .reg .pred p; \n\t"
                  "    isspacep.global p, %1; \n\t"
                  "    selp.u32 %0, 1, 0, p;  \n\t"

                  "} \n\t" : "=r"(ret) : "l"(ptr));


#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.hpp"

    return ret;
}

#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.hpp"



#line 121 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.hpp"

#line 1495 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
#line 1496 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
#line 1497 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"

#line 4521 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"











#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 71 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 72 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"





#line 78 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"












#line 91 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"







static __declspec(__device__) __inline int __shfl(int var, int srcLane, int width=32) ;

static __declspec(__device__) __inline unsigned int __shfl(unsigned int var, int srcLane, int width=32) ;

static __declspec(__device__) __inline int __shfl_up(int var, unsigned int delta, int width=32) ;
static __declspec(__device__) __inline unsigned int __shfl_up(unsigned int var, unsigned int delta, int width=32) ;

static __declspec(__device__) __inline int __shfl_down(int var, unsigned int delta, int width=32) ;

static __declspec(__device__) __inline unsigned int __shfl_down(unsigned int var, unsigned int delta, int width=32) ;

static __declspec(__device__) __inline int __shfl_xor(int var, int laneMask, int width=32) ;

static __declspec(__device__) __inline unsigned int __shfl_xor(unsigned int var, int laneMask, int width=32) ;

static __declspec(__device__) __inline float __shfl(float var, int srcLane, int width=32) ;

static __declspec(__device__) __inline float __shfl_up(float var, unsigned int delta, int width=32) ;

static __declspec(__device__) __inline float __shfl_down(float var, unsigned int delta, int width=32) ;

static __declspec(__device__) __inline float __shfl_xor(float var, int laneMask, int width=32) ;


static __declspec(__device__) __inline long long __shfl(long long var, int srcLane, int width=32) ;

static __declspec(__device__) __inline unsigned long long __shfl(unsigned long long var, int srcLane, int width=32) ;

static __declspec(__device__) __inline long long __shfl_up(long long var, unsigned int delta, int width=32) ;

static __declspec(__device__) __inline unsigned long long __shfl_up(unsigned long long var, unsigned int delta, int width=32) ;

static __declspec(__device__) __inline long long __shfl_down(long long var, unsigned int delta, int width=32) ;

static __declspec(__device__) __inline unsigned long long __shfl_down(unsigned long long var, unsigned int delta, int width=32) ;

static __declspec(__device__) __inline long long __shfl_xor(long long var, int laneMask, int width=32) ;

static __declspec(__device__) __inline unsigned long long __shfl_xor(unsigned long long var, int laneMask, int width=32) ;

static __declspec(__device__) __inline double __shfl(double var, int srcLane, int width=32) ;

static __declspec(__device__) __inline double __shfl_up(double var, unsigned int delta, int width=32) ;

static __declspec(__device__) __inline double __shfl_down(double var, unsigned int delta, int width=32) ;

static __declspec(__device__) __inline double __shfl_xor(double var, int laneMask, int width=32) ;



static __declspec(__device__) __inline long __shfl(long var, int srcLane, int width=32) ;

static __declspec(__device__) __inline unsigned long __shfl(unsigned long var, int srcLane, int width=32) ;

static __declspec(__device__) __inline long __shfl_up(long var, unsigned int delta, int width=32) ;

static __declspec(__device__) __inline unsigned long __shfl_up(unsigned long var, unsigned int delta, int width=32) ;

static __declspec(__device__) __inline long __shfl_down(long var, unsigned int delta, int width=32) ;

static __declspec(__device__) __inline unsigned long __shfl_down(unsigned long var, unsigned int delta, int width=32) ;

static __declspec(__device__) __inline long __shfl_xor(long var, int laneMask, int width=32) ;

static __declspec(__device__) __inline unsigned long __shfl_xor(unsigned long var, int laneMask, int width=32) ;




#line 168 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"

#line 170 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"

#line 172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"





#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.hpp"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.hpp"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.hpp"











#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 71 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 72 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.hpp"



extern "C"
{
    
    
}











#line 92 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.hpp"







static __declspec(__device__) __inline int __shfl(int var, int srcLane, int width) {
	int ret;
	int c = ((32-width) << 8) | 0x1f;
	asm volatile ("shfl.idx.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(var), "r"(srcLane), "r"(c));
	return ret;
}

static __declspec(__device__) __inline unsigned int __shfl(unsigned int var, int srcLane, int width) {
	return (unsigned int) __shfl((int)var, srcLane, width);
}

static __declspec(__device__) __inline int __shfl_up(int var, unsigned int delta, int width) {
	int ret;
	int c = (32-width) << 8;
	asm volatile ("shfl.up.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(var), "r"(delta), "r"(c));
	return ret;
}
static __declspec(__device__) __inline unsigned int __shfl_up(unsigned int var, unsigned int delta, int width) {
	return (unsigned int) __shfl_up((int)var, delta, width);
}

static __declspec(__device__) __inline int __shfl_down(int var, unsigned int delta, int width) {
	int ret;
	int c = ((32-width) << 8) | 0x1f;
	asm volatile ("shfl.down.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(var), "r"(delta), "r"(c));
	return ret;
}

static __declspec(__device__) __inline unsigned int __shfl_down(unsigned int var, unsigned int delta, int width) {
	return (unsigned int) __shfl_down((int)var, delta, width);
}

static __declspec(__device__) __inline int __shfl_xor(int var, int laneMask, int width) {
	int ret;
	int c = ((32-width) << 8) | 0x1f;
	asm volatile ("shfl.bfly.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(var), "r"(laneMask), "r"(c));
	return ret;
}

static __declspec(__device__) __inline unsigned int __shfl_xor(unsigned int var, int laneMask, int width) {
	return (unsigned int) __shfl_xor((int)var, laneMask, width);
}

static __declspec(__device__) __inline float __shfl(float var, int srcLane, int width) {
	float ret;
    int c;
	c = ((32-width) << 8) | 0x1f;
	asm volatile ("shfl.idx.b32 %0, %1, %2, %3;" : "=f"(ret) : "f"(var), "r"(srcLane), "r"(c));
	return ret;
}

static __declspec(__device__) __inline float __shfl_up(float var, unsigned int delta, int width) {
	float ret;
    int c;
	c = (32-width) << 8;
	asm volatile ("shfl.up.b32 %0, %1, %2, %3;" : "=f"(ret) : "f"(var), "r"(delta), "r"(c));
	return ret;
}

static __declspec(__device__) __inline float __shfl_down(float var, unsigned int delta, int width) {
	float ret;
    int c;
	c = ((32-width) << 8) | 0x1f;
	asm volatile ("shfl.down.b32 %0, %1, %2, %3;" : "=f"(ret) : "f"(var), "r"(delta), "r"(c));
	return ret;
}

static __declspec(__device__) __inline float __shfl_xor(float var, int laneMask, int width) {
	float ret;
    int c;
	c = ((32-width) << 8) | 0x1f;
	asm volatile ("shfl.bfly.b32 %0, %1, %2, %3;" : "=f"(ret) : "f"(var), "r"(laneMask), "r"(c));
	return ret;
}


static __declspec(__device__) __inline long long __shfl(long long var, int srcLane, int width) {
	int lo, hi;
	asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "l"(var));
	hi = __shfl(hi, srcLane, width);
	lo = __shfl(lo, srcLane, width);
	asm volatile("mov.b64 %0, {%1,%2};" : "=l"(var) : "r"(lo), "r"(hi));
	return var;
}

static __declspec(__device__) __inline unsigned long long __shfl(unsigned long long var, int srcLane, int width) {
	return (unsigned long long) __shfl((long long) var, srcLane, width);
}

static __declspec(__device__) __inline long long __shfl_up(long long var, unsigned int delta, int width) {
	int lo, hi;
	asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "l"(var));
	hi = __shfl_up(hi, delta, width);
	lo = __shfl_up(lo, delta, width);
	asm volatile("mov.b64 %0, {%1,%2};" : "=l"(var) : "r"(lo), "r"(hi));
	return var;
}

static __declspec(__device__) __inline unsigned long long __shfl_up(unsigned long long var, unsigned int delta, int width) {
	return (unsigned long long) __shfl_up((long long) var, delta, width);
}

static __declspec(__device__) __inline long long __shfl_down(long long var, unsigned int delta, int width) {
	int lo, hi;
	asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "l"(var));
	hi = __shfl_down(hi, delta, width);
	lo = __shfl_down(lo, delta, width);
	asm volatile("mov.b64 %0, {%1,%2};" : "=l"(var) : "r"(lo), "r"(hi));
	return var;
}

static __declspec(__device__) __inline unsigned long long __shfl_down(unsigned long long var, unsigned int delta, int width) {
	return (unsigned long long) __shfl_down((long long) var, delta, width);
}

static __declspec(__device__) __inline long long __shfl_xor(long long var, int laneMask, int width) {
	int lo, hi;
	asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "l"(var));
	hi = __shfl_xor(hi, laneMask, width);
	lo = __shfl_xor(lo, laneMask, width);
	asm volatile("mov.b64 %0, {%1,%2};" : "=l"(var) : "r"(lo), "r"(hi));
	return var;
}

static __declspec(__device__) __inline unsigned long long __shfl_xor(unsigned long long var, int laneMask, int width) {
	return (unsigned long long) __shfl_xor((long long) var, laneMask, width);
}

static __declspec(__device__) __inline double __shfl(double var, int srcLane, int width) {
	float lo, hi;
	asm volatile("mov.b64 {%0,%1}, %2;" : "=f"(lo), "=f"(hi) : "d"(var));
	hi = __shfl(hi, srcLane, width);
	lo = __shfl(lo, srcLane, width);
	asm volatile("mov.b64 %0, {%1,%2};" : "=d"(var) : "f"(lo), "f"(hi));
	return var;
}

static __declspec(__device__) __inline double __shfl_up(double var, unsigned int delta, int width) {
	float lo, hi;
	asm volatile("mov.b64 {%0,%1}, %2;" : "=f"(lo), "=f"(hi) : "d"(var));
	hi = __shfl_up(hi, delta, width);
	lo = __shfl_up(lo, delta, width);
	asm volatile("mov.b64 %0, {%1,%2};" : "=d"(var) : "f"(lo), "f"(hi));
	return var;
}

static __declspec(__device__) __inline double __shfl_down(double var, unsigned int delta, int width) {
	float lo, hi;
	asm volatile("mov.b64 {%0,%1}, %2;" : "=f"(lo), "=f"(hi) : "d"(var));
	hi = __shfl_down(hi, delta, width);
	lo = __shfl_down(lo, delta, width);
	asm volatile("mov.b64 %0, {%1,%2};" : "=d"(var) : "f"(lo), "f"(hi));
	return var;
}

static __declspec(__device__) __inline double __shfl_xor(double var, int laneMask, int width) {
	float lo, hi;
	asm volatile("mov.b64 {%0,%1}, %2;" : "=f"(lo), "=f"(hi) : "d"(var));
	hi = __shfl_xor(hi, laneMask, width);
	lo = __shfl_xor(lo, laneMask, width);
	asm volatile("mov.b64 %0, {%1,%2};" : "=d"(var) : "f"(lo), "f"(hi));
	return var;
}



static __declspec(__device__) __inline long __shfl(long var, int srcLane, int width) {
	return (sizeof(long) == sizeof(long long)) ?
		__shfl((long long) var, srcLane, width) :
		__shfl((int) var, srcLane, width);
}

static __declspec(__device__) __inline unsigned long __shfl(unsigned long var, int srcLane, int width) {
	return (sizeof(long) == sizeof(long long)) ?
		__shfl((unsigned long long) var, srcLane, width) :
		__shfl((unsigned int) var, srcLane, width);
}

static __declspec(__device__) __inline long __shfl_up(long var, unsigned int delta, int width) {
	return (sizeof(long) == sizeof(long long)) ?
		__shfl_up((long long) var, delta, width) :
		__shfl_up((int) var, delta, width);
}

static __declspec(__device__) __inline unsigned long __shfl_up(unsigned long var, unsigned int delta, int width) {
	return (sizeof(long) == sizeof(long long)) ?
		__shfl_up((unsigned long long) var, delta, width) :
		__shfl_up((unsigned int) var, delta, width);
}

static __declspec(__device__) __inline long __shfl_down(long var, unsigned int delta, int width) {
	return (sizeof(long) == sizeof(long long)) ?
		__shfl_down((long long) var, delta, width) :
		__shfl_down((int) var, delta, width);
}

static __declspec(__device__) __inline unsigned long __shfl_down(unsigned long var, unsigned int delta, int width) {
	return (sizeof(long) == sizeof(long long)) ?
		__shfl_down((unsigned long long) var, delta, width) :
		__shfl_down((unsigned int) var, delta, width);
}

static __declspec(__device__) __inline long __shfl_xor(long var, int laneMask, int width) {
	return (sizeof(long) == sizeof(long long)) ?
		__shfl_xor((long long) var, laneMask, width) :
		__shfl_xor((int) var, laneMask, width);
}

static __declspec(__device__) __inline unsigned long __shfl_xor(unsigned long var, int laneMask, int width) {
	return (sizeof(long) == sizeof(long long)) ?
		__shfl_xor((unsigned long long) var, laneMask, width) :
		__shfl_xor((unsigned int) var, laneMask, width);
}




#line 317 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.hpp"

#line 319 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.hpp"

#line 321 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.hpp"



#line 325 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.hpp"

#line 178 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 179 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"

#line 181 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 4522 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"











#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 71 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 72 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"





#line 78 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"











static __declspec(__device__) __inline long __ldg(const long *ptr) ;
static __declspec(__device__) __inline unsigned long __ldg(const unsigned long *ptr) ;

static __declspec(__device__) __inline char __ldg(const char *ptr) ;
static __declspec(__device__) __inline signed char __ldg(const signed char *ptr) ;
static __declspec(__device__) __inline short __ldg(const short *ptr) ;
static __declspec(__device__) __inline int __ldg(const int *ptr) ;
static __declspec(__device__) __inline long long __ldg(const long long *ptr) ;
static __declspec(__device__) __inline char2 __ldg(const char2 *ptr) ;
static __declspec(__device__) __inline char4 __ldg(const char4 *ptr) ;
static __declspec(__device__) __inline short2 __ldg(const short2 *ptr) ;
static __declspec(__device__) __inline short4 __ldg(const short4 *ptr) ;
static __declspec(__device__) __inline int2 __ldg(const int2 *ptr) ;
static __declspec(__device__) __inline int4 __ldg(const int4 *ptr) ;
static __declspec(__device__) __inline longlong2 __ldg(const longlong2 *ptr) ;

static __declspec(__device__) __inline unsigned char __ldg(const unsigned char *ptr) ;
static __declspec(__device__) __inline unsigned short __ldg(const unsigned short *ptr) ;
static __declspec(__device__) __inline unsigned int __ldg(const unsigned int *ptr) ;
static __declspec(__device__) __inline unsigned long long __ldg(const unsigned long long *ptr) ;
static __declspec(__device__) __inline uchar2 __ldg(const uchar2 *ptr) ;
static __declspec(__device__) __inline uchar4 __ldg(const uchar4 *ptr) ;
static __declspec(__device__) __inline ushort2 __ldg(const ushort2 *ptr) ;
static __declspec(__device__) __inline ushort4 __ldg(const ushort4 *ptr) ;
static __declspec(__device__) __inline uint2 __ldg(const uint2 *ptr) ;
static __declspec(__device__) __inline uint4 __ldg(const uint4 *ptr) ;
static __declspec(__device__) __inline ulonglong2 __ldg(const ulonglong2 *ptr) ;

static __declspec(__device__) __inline float __ldg(const float *ptr) ;
static __declspec(__device__) __inline double __ldg(const double *ptr) ;
static __declspec(__device__) __inline float2 __ldg(const float2 *ptr) ;
static __declspec(__device__) __inline float4 __ldg(const float4 *ptr) ;
static __declspec(__device__) __inline double2 __ldg(const double2 *ptr) ;



static __declspec(__device__) __inline long __ldcg(const long *ptr) ;
static __declspec(__device__) __inline unsigned long __ldcg(const unsigned long *ptr) ;

static __declspec(__device__) __inline char __ldcg(const char *ptr) ;
static __declspec(__device__) __inline signed char __ldcg(const signed char *ptr) ;
static __declspec(__device__) __inline short __ldcg(const short *ptr) ;
static __declspec(__device__) __inline int __ldcg(const int *ptr) ;
static __declspec(__device__) __inline long long __ldcg(const long long *ptr) ;
static __declspec(__device__) __inline char2 __ldcg(const char2 *ptr) ;
static __declspec(__device__) __inline char4 __ldcg(const char4 *ptr) ;
static __declspec(__device__) __inline short2 __ldcg(const short2 *ptr) ;
static __declspec(__device__) __inline short4 __ldcg(const short4 *ptr) ;
static __declspec(__device__) __inline int2 __ldcg(const int2 *ptr) ;
static __declspec(__device__) __inline int4 __ldcg(const int4 *ptr) ;
static __declspec(__device__) __inline longlong2 __ldcg(const longlong2 *ptr) ;

static __declspec(__device__) __inline unsigned char __ldcg(const unsigned char *ptr) ;
static __declspec(__device__) __inline unsigned short __ldcg(const unsigned short *ptr) ;
static __declspec(__device__) __inline unsigned int __ldcg(const unsigned int *ptr) ;
static __declspec(__device__) __inline unsigned long long __ldcg(const unsigned long long *ptr) ;
static __declspec(__device__) __inline uchar2 __ldcg(const uchar2 *ptr) ;
static __declspec(__device__) __inline uchar4 __ldcg(const uchar4 *ptr) ;
static __declspec(__device__) __inline ushort2 __ldcg(const ushort2 *ptr) ;
static __declspec(__device__) __inline ushort4 __ldcg(const ushort4 *ptr) ;
static __declspec(__device__) __inline uint2 __ldcg(const uint2 *ptr) ;
static __declspec(__device__) __inline uint4 __ldcg(const uint4 *ptr) ;
static __declspec(__device__) __inline ulonglong2 __ldcg(const ulonglong2 *ptr) ;

static __declspec(__device__) __inline float __ldcg(const float *ptr) ;
static __declspec(__device__) __inline double __ldcg(const double *ptr) ;
static __declspec(__device__) __inline float2 __ldcg(const float2 *ptr) ;
static __declspec(__device__) __inline float4 __ldcg(const float4 *ptr) ;
static __declspec(__device__) __inline double2 __ldcg(const double2 *ptr) ;



static __declspec(__device__) __inline long __ldca(const long *ptr) ;
static __declspec(__device__) __inline unsigned long __ldca(const unsigned long *ptr) ;

static __declspec(__device__) __inline char __ldca(const char *ptr) ;
static __declspec(__device__) __inline signed char __ldca(const signed char *ptr) ;
static __declspec(__device__) __inline short __ldca(const short *ptr) ;
static __declspec(__device__) __inline int __ldca(const int *ptr) ;
static __declspec(__device__) __inline long long __ldca(const long long *ptr) ;
static __declspec(__device__) __inline char2 __ldca(const char2 *ptr) ;
static __declspec(__device__) __inline char4 __ldca(const char4 *ptr) ;
static __declspec(__device__) __inline short2 __ldca(const short2 *ptr) ;
static __declspec(__device__) __inline short4 __ldca(const short4 *ptr) ;
static __declspec(__device__) __inline int2 __ldca(const int2 *ptr) ;
static __declspec(__device__) __inline int4 __ldca(const int4 *ptr) ;
static __declspec(__device__) __inline longlong2 __ldca(const longlong2 *ptr) ;

static __declspec(__device__) __inline unsigned char __ldca(const unsigned char *ptr) ;
static __declspec(__device__) __inline unsigned short __ldca(const unsigned short *ptr) ;
static __declspec(__device__) __inline unsigned int __ldca(const unsigned int *ptr) ;
static __declspec(__device__) __inline unsigned long long __ldca(const unsigned long long *ptr) ;
static __declspec(__device__) __inline uchar2 __ldca(const uchar2 *ptr) ;
static __declspec(__device__) __inline uchar4 __ldca(const uchar4 *ptr) ;
static __declspec(__device__) __inline ushort2 __ldca(const ushort2 *ptr) ;
static __declspec(__device__) __inline ushort4 __ldca(const ushort4 *ptr) ;
static __declspec(__device__) __inline uint2 __ldca(const uint2 *ptr) ;
static __declspec(__device__) __inline uint4 __ldca(const uint4 *ptr) ;
static __declspec(__device__) __inline ulonglong2 __ldca(const ulonglong2 *ptr) ;

static __declspec(__device__) __inline float __ldca(const float *ptr) ;
static __declspec(__device__) __inline double __ldca(const double *ptr) ;
static __declspec(__device__) __inline float2 __ldca(const float2 *ptr) ;
static __declspec(__device__) __inline float4 __ldca(const float4 *ptr) ;
static __declspec(__device__) __inline double2 __ldca(const double2 *ptr) ;



static __declspec(__device__) __inline long __ldcs(const long *ptr) ;
static __declspec(__device__) __inline unsigned long __ldcs(const unsigned long *ptr) ;

static __declspec(__device__) __inline char __ldcs(const char *ptr) ;
static __declspec(__device__) __inline signed char __ldcs(const signed char *ptr) ;
static __declspec(__device__) __inline short __ldcs(const short *ptr) ;
static __declspec(__device__) __inline int __ldcs(const int *ptr) ;
static __declspec(__device__) __inline long long __ldcs(const long long *ptr) ;
static __declspec(__device__) __inline char2 __ldcs(const char2 *ptr) ;
static __declspec(__device__) __inline char4 __ldcs(const char4 *ptr) ;
static __declspec(__device__) __inline short2 __ldcs(const short2 *ptr) ;
static __declspec(__device__) __inline short4 __ldcs(const short4 *ptr) ;
static __declspec(__device__) __inline int2 __ldcs(const int2 *ptr) ;
static __declspec(__device__) __inline int4 __ldcs(const int4 *ptr) ;
static __declspec(__device__) __inline longlong2 __ldcs(const longlong2 *ptr) ;

static __declspec(__device__) __inline unsigned char __ldcs(const unsigned char *ptr) ;
static __declspec(__device__) __inline unsigned short __ldcs(const unsigned short *ptr) ;
static __declspec(__device__) __inline unsigned int __ldcs(const unsigned int *ptr) ;
static __declspec(__device__) __inline unsigned long long __ldcs(const unsigned long long *ptr) ;
static __declspec(__device__) __inline uchar2 __ldcs(const uchar2 *ptr) ;
static __declspec(__device__) __inline uchar4 __ldcs(const uchar4 *ptr) ;
static __declspec(__device__) __inline ushort2 __ldcs(const ushort2 *ptr) ;
static __declspec(__device__) __inline ushort4 __ldcs(const ushort4 *ptr) ;
static __declspec(__device__) __inline uint2 __ldcs(const uint2 *ptr) ;
static __declspec(__device__) __inline uint4 __ldcs(const uint4 *ptr) ;
static __declspec(__device__) __inline ulonglong2 __ldcs(const ulonglong2 *ptr) ;

static __declspec(__device__) __inline float __ldcs(const float *ptr) ;
static __declspec(__device__) __inline double __ldcs(const double *ptr) ;
static __declspec(__device__) __inline float2 __ldcs(const float2 *ptr) ;
static __declspec(__device__) __inline float4 __ldcs(const float4 *ptr) ;
static __declspec(__device__) __inline double2 __ldcs(const double2 *ptr) ;






static __declspec(__device__) __inline unsigned int __funnelshift_l(unsigned int lo, unsigned int hi, unsigned int shift) ;
static __declspec(__device__) __inline unsigned int __funnelshift_lc(unsigned int lo, unsigned int hi, unsigned int shift) ;


static __declspec(__device__) __inline unsigned int __funnelshift_r(unsigned int lo, unsigned int hi, unsigned int shift) ;
static __declspec(__device__) __inline unsigned int __funnelshift_rc(unsigned int lo, unsigned int hi, unsigned int shift) ;


#line 245 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"

#line 247 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"




#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.hpp"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.hpp"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.hpp"











#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 71 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 72 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.hpp"



extern "C"
{
    
    
}















#line 96 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.hpp"









#line 106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.hpp"
static __declspec(__device__) __inline long __ldg(const long *ptr) { unsigned long ret; asm volatile ("ld.global.nc.s32 %0, [%1];"  : "=r"(ret) : "l" (ptr)); return (long)ret; }
static __declspec(__device__) __inline unsigned long __ldg(const unsigned long *ptr) { unsigned long ret; asm volatile ("ld.global.nc.u32 %0, [%1];"  : "=r"(ret) : "l" (ptr)); return ret; }
#line 109 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.hpp"


static __declspec(__device__) __inline char __ldg(const char *ptr) { unsigned int ret; asm volatile ("ld.global.nc.s8 %0, [%1];"  : "=r"(ret) : "l" (ptr)); return (char)ret; }
static __declspec(__device__) __inline signed char __ldg(const signed char *ptr) { unsigned int ret; asm volatile ("ld.global.nc.s8 %0, [%1];"  : "=r"(ret) : "l" (ptr)); return (signed char)ret; }
static __declspec(__device__) __inline short __ldg(const short *ptr) { unsigned short ret; asm volatile ("ld.global.nc.s16 %0, [%1];"  : "=h"(ret) : "l" (ptr)); return (short)ret; }
static __declspec(__device__) __inline int __ldg(const int *ptr) { unsigned int ret; asm volatile ("ld.global.nc.s32 %0, [%1];"  : "=r"(ret) : "l" (ptr)); return (int)ret; }
static __declspec(__device__) __inline long long __ldg(const long long *ptr) { unsigned long long ret; asm volatile ("ld.global.nc.s64 %0, [%1];"  : "=l"(ret) : "l" (ptr)); return (long long)ret; }
static __declspec(__device__) __inline char2 __ldg(const char2 *ptr) { char2 ret; int2 tmp; asm volatile ("ld.global.nc.v2.s8 {%0,%1}, [%2];"  : "=r"(tmp.x), "=r"(tmp.y) : "l" (ptr)); ret.x = (char)tmp.x; ret.y = (char)tmp.y; return ret; }
static __declspec(__device__) __inline char4 __ldg(const char4 *ptr) { char4 ret; int4 tmp; asm volatile ("ld.global.nc.v4.s8 {%0,%1,%2,%3}, [%4];"  : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l" (ptr)); ret.x = (char)tmp.x; ret.y = (char)tmp.y; ret.z = (char)tmp.z; ret.w = (char)tmp.w; return ret; }
static __declspec(__device__) __inline short2 __ldg(const short2 *ptr) { short2 ret; asm volatile ("ld.global.nc.v2.s16 {%0,%1}, [%2];"  : "=h"(ret.x), "=h"(ret.y) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline short4 __ldg(const short4 *ptr) { short4 ret; asm volatile ("ld.global.nc.v4.s16 {%0,%1,%2,%3}, [%4];"  : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline int2 __ldg(const int2 *ptr) { int2 ret; asm volatile ("ld.global.nc.v2.s32 {%0,%1}, [%2];"  : "=r"(ret.x), "=r"(ret.y) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline int4 __ldg(const int4 *ptr) { int4 ret; asm volatile ("ld.global.nc.v4.s32 {%0,%1,%2,%3}, [%4];"  : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline longlong2 __ldg(const longlong2 *ptr) { longlong2 ret; asm volatile ("ld.global.nc.v2.s64 {%0,%1}, [%2];"  : "=l"(ret.x), "=l"(ret.y) : "l" (ptr)); return ret; }

static __declspec(__device__) __inline unsigned char __ldg(const unsigned char *ptr) { unsigned int ret; asm volatile ("ld.global.nc.u8 %0, [%1];"  : "=r"(ret) : "l" (ptr));  return (unsigned char)ret; }
static __declspec(__device__) __inline unsigned short __ldg(const unsigned short *ptr) { unsigned short ret; asm volatile ("ld.global.nc.u16 %0, [%1];"  : "=h"(ret) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline unsigned int __ldg(const unsigned int *ptr) { unsigned int ret; asm volatile ("ld.global.nc.u32 %0, [%1];"  : "=r"(ret) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline unsigned long long __ldg(const unsigned long long *ptr) { unsigned long long ret; asm volatile ("ld.global.nc.u64 %0, [%1];"  : "=l"(ret) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline uchar2 __ldg(const uchar2 *ptr) { uchar2 ret; uint2 tmp; asm volatile ("ld.global.nc.v2.u8 {%0,%1}, [%2];"  : "=r"(tmp.x), "=r"(tmp.y) : "l" (ptr)); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; return ret; }
static __declspec(__device__) __inline uchar4 __ldg(const uchar4 *ptr) { uchar4 ret; uint4 tmp; asm volatile ("ld.global.nc.v4.u8 {%0,%1,%2,%3}, [%4];"  : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l" (ptr)); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; ret.z = (unsigned char)tmp.z; ret.w = (unsigned char)tmp.w; return ret; }
static __declspec(__device__) __inline ushort2 __ldg(const ushort2 *ptr) { ushort2 ret; asm volatile ("ld.global.nc.v2.u16 {%0,%1}, [%2];"  : "=h"(ret.x), "=h"(ret.y) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline ushort4 __ldg(const ushort4 *ptr) { ushort4 ret; asm volatile ("ld.global.nc.v4.u16 {%0,%1,%2,%3}, [%4];"  : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline uint2 __ldg(const uint2 *ptr) { uint2 ret; asm volatile ("ld.global.nc.v2.u32 {%0,%1}, [%2];"  : "=r"(ret.x), "=r"(ret.y) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline uint4 __ldg(const uint4 *ptr) { uint4 ret; asm volatile ("ld.global.nc.v4.u32 {%0,%1,%2,%3}, [%4];"  : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline ulonglong2 __ldg(const ulonglong2 *ptr) { ulonglong2 ret; asm volatile ("ld.global.nc.v2.u64 {%0,%1}, [%2];"  : "=l"(ret.x), "=l"(ret.y) : "l" (ptr)); return ret; }

static __declspec(__device__) __inline float __ldg(const float *ptr) { float ret; asm volatile ("ld.global.nc.f32 %0, [%1];"  : "=f"(ret) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline double __ldg(const double *ptr) { double ret; asm volatile ("ld.global.nc.f64 %0, [%1];"  : "=d"(ret) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline float2 __ldg(const float2 *ptr) { float2 ret; asm volatile ("ld.global.nc.v2.f32 {%0,%1}, [%2];"  : "=f"(ret.x), "=f"(ret.y) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline float4 __ldg(const float4 *ptr) { float4 ret; asm volatile ("ld.global.nc.v4.f32 {%0,%1,%2,%3}, [%4];"  : "=f"(ret.x), "=f"(ret.y), "=f"(ret.z), "=f"(ret.w) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline double2 __ldg(const double2 *ptr) { double2 ret; asm volatile ("ld.global.nc.v2.f64 {%0,%1}, [%2];"  : "=d"(ret.x), "=d"(ret.y) : "l" (ptr)); return ret; }










#line 152 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.hpp"
static __declspec(__device__) __inline long __ldcg(const long *ptr) { unsigned long ret; asm volatile ("ld.global.cg.s32 %0, [%1];"  : "=r"(ret) : "l" (ptr)); return (long)ret; }
static __declspec(__device__) __inline unsigned long __ldcg(const unsigned long *ptr) { unsigned long ret; asm volatile ("ld.global.cg.u32 %0, [%1];"  : "=r"(ret) : "l" (ptr)); return ret; }
#line 155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.hpp"


static __declspec(__device__) __inline char __ldcg(const char *ptr) { unsigned int ret; asm volatile ("ld.global.cg.s8 %0, [%1];"  : "=r"(ret) : "l" (ptr)); return (char)ret; }
static __declspec(__device__) __inline signed char __ldcg(const signed char *ptr) { unsigned int ret; asm volatile ("ld.global.cg.s8 %0, [%1];"  : "=r"(ret) : "l" (ptr)); return (signed char)ret; }
static __declspec(__device__) __inline short __ldcg(const short *ptr) { unsigned short ret; asm volatile ("ld.global.cg.s16 %0, [%1];"  : "=h"(ret) : "l" (ptr)); return (short)ret; }
static __declspec(__device__) __inline int __ldcg(const int *ptr) { unsigned int ret; asm volatile ("ld.global.cg.s32 %0, [%1];"  : "=r"(ret) : "l" (ptr)); return (int)ret; }
static __declspec(__device__) __inline long long __ldcg(const long long *ptr) { unsigned long long ret; asm volatile ("ld.global.cg.s64 %0, [%1];"  : "=l"(ret) : "l" (ptr)); return (long long)ret; }
static __declspec(__device__) __inline char2 __ldcg(const char2 *ptr) { char2 ret; int2 tmp; asm volatile ("ld.global.cg.v2.s8 {%0,%1}, [%2];"  : "=r"(tmp.x), "=r"(tmp.y) : "l" (ptr)); ret.x = (char)tmp.x; ret.y = (char)tmp.y; return ret; }
static __declspec(__device__) __inline char4 __ldcg(const char4 *ptr) { char4 ret; int4 tmp; asm volatile ("ld.global.cg.v4.s8 {%0,%1,%2,%3}, [%4];"  : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l" (ptr)); ret.x = (char)tmp.x; ret.y = (char)tmp.y; ret.z = (char)tmp.z; ret.w = (char)tmp.w; return ret; }
static __declspec(__device__) __inline short2 __ldcg(const short2 *ptr) { short2 ret; asm volatile ("ld.global.cg.v2.s16 {%0,%1}, [%2];"  : "=h"(ret.x), "=h"(ret.y) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline short4 __ldcg(const short4 *ptr) { short4 ret; asm volatile ("ld.global.cg.v4.s16 {%0,%1,%2,%3}, [%4];"  : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline int2 __ldcg(const int2 *ptr) { int2 ret; asm volatile ("ld.global.cg.v2.s32 {%0,%1}, [%2];"  : "=r"(ret.x), "=r"(ret.y) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline int4 __ldcg(const int4 *ptr) { int4 ret; asm volatile ("ld.global.cg.v4.s32 {%0,%1,%2,%3}, [%4];"  : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline longlong2 __ldcg(const longlong2 *ptr) { longlong2 ret; asm volatile ("ld.global.cg.v2.s64 {%0,%1}, [%2];"  : "=l"(ret.x), "=l"(ret.y) : "l" (ptr)); return ret; }

static __declspec(__device__) __inline unsigned char __ldcg(const unsigned char *ptr) { unsigned int ret; asm volatile ("ld.global.cg.u8 %0, [%1];"  : "=r"(ret) : "l" (ptr));  return (unsigned char)ret; }
static __declspec(__device__) __inline unsigned short __ldcg(const unsigned short *ptr) { unsigned short ret; asm volatile ("ld.global.cg.u16 %0, [%1];"  : "=h"(ret) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline unsigned int __ldcg(const unsigned int *ptr) { unsigned int ret; asm volatile ("ld.global.cg.u32 %0, [%1];"  : "=r"(ret) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline unsigned long long __ldcg(const unsigned long long *ptr) { unsigned long long ret; asm volatile ("ld.global.cg.u64 %0, [%1];"  : "=l"(ret) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline uchar2 __ldcg(const uchar2 *ptr) { uchar2 ret; uint2 tmp; asm volatile ("ld.global.cg.v2.u8 {%0,%1}, [%2];"  : "=r"(tmp.x), "=r"(tmp.y) : "l" (ptr)); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; return ret; }
static __declspec(__device__) __inline uchar4 __ldcg(const uchar4 *ptr) { uchar4 ret; uint4 tmp; asm volatile ("ld.global.cg.v4.u8 {%0,%1,%2,%3}, [%4];"  : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l" (ptr)); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; ret.z = (unsigned char)tmp.z; ret.w = (unsigned char)tmp.w; return ret; }
static __declspec(__device__) __inline ushort2 __ldcg(const ushort2 *ptr) { ushort2 ret; asm volatile ("ld.global.cg.v2.u16 {%0,%1}, [%2];"  : "=h"(ret.x), "=h"(ret.y) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline ushort4 __ldcg(const ushort4 *ptr) { ushort4 ret; asm volatile ("ld.global.cg.v4.u16 {%0,%1,%2,%3}, [%4];"  : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline uint2 __ldcg(const uint2 *ptr) { uint2 ret; asm volatile ("ld.global.cg.v2.u32 {%0,%1}, [%2];"  : "=r"(ret.x), "=r"(ret.y) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline uint4 __ldcg(const uint4 *ptr) { uint4 ret; asm volatile ("ld.global.cg.v4.u32 {%0,%1,%2,%3}, [%4];"  : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline ulonglong2 __ldcg(const ulonglong2 *ptr) { ulonglong2 ret; asm volatile ("ld.global.cg.v2.u64 {%0,%1}, [%2];"  : "=l"(ret.x), "=l"(ret.y) : "l" (ptr)); return ret; }

static __declspec(__device__) __inline float __ldcg(const float *ptr) { float ret; asm volatile ("ld.global.cg.f32 %0, [%1];"  : "=f"(ret) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline double __ldcg(const double *ptr) { double ret; asm volatile ("ld.global.cg.f64 %0, [%1];"  : "=d"(ret) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline float2 __ldcg(const float2 *ptr) { float2 ret; asm volatile ("ld.global.cg.v2.f32 {%0,%1}, [%2];"  : "=f"(ret.x), "=f"(ret.y) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline float4 __ldcg(const float4 *ptr) { float4 ret; asm volatile ("ld.global.cg.v4.f32 {%0,%1,%2,%3}, [%4];"  : "=f"(ret.x), "=f"(ret.y), "=f"(ret.z), "=f"(ret.w) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline double2 __ldcg(const double2 *ptr) { double2 ret; asm volatile ("ld.global.cg.v2.f64 {%0,%1}, [%2];"  : "=d"(ret.x), "=d"(ret.y) : "l" (ptr)); return ret; }









#line 197 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.hpp"
static __declspec(__device__) __inline long __ldca(const long *ptr) { unsigned long ret; asm volatile ("ld.global.ca.s32 %0, [%1];"  : "=r"(ret) : "l" (ptr)); return (long)ret; }
static __declspec(__device__) __inline unsigned long __ldca(const unsigned long *ptr) { unsigned long ret; asm volatile ("ld.global.ca.u32 %0, [%1];"  : "=r"(ret) : "l" (ptr)); return ret; }
#line 200 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.hpp"


static __declspec(__device__) __inline char __ldca(const char *ptr) { unsigned int ret; asm volatile ("ld.global.ca.s8 %0, [%1];"  : "=r"(ret) : "l" (ptr)); return (char)ret; }
static __declspec(__device__) __inline signed char __ldca(const signed char *ptr) { unsigned int ret; asm volatile ("ld.global.ca.s8 %0, [%1];"  : "=r"(ret) : "l" (ptr)); return (signed char)ret; }
static __declspec(__device__) __inline short __ldca(const short *ptr) { unsigned short ret; asm volatile ("ld.global.ca.s16 %0, [%1];"  : "=h"(ret) : "l" (ptr)); return (short)ret; }
static __declspec(__device__) __inline int __ldca(const int *ptr) { unsigned int ret; asm volatile ("ld.global.ca.s32 %0, [%1];"  : "=r"(ret) : "l" (ptr)); return (int)ret; }
static __declspec(__device__) __inline long long __ldca(const long long *ptr) { unsigned long long ret; asm volatile ("ld.global.ca.s64 %0, [%1];"  : "=l"(ret) : "l" (ptr)); return (long long)ret; }
static __declspec(__device__) __inline char2 __ldca(const char2 *ptr) { char2 ret; int2 tmp; asm volatile ("ld.global.ca.v2.s8 {%0,%1}, [%2];"  : "=r"(tmp.x), "=r"(tmp.y) : "l" (ptr)); ret.x = (char)tmp.x; ret.y = (char)tmp.y; return ret; }
static __declspec(__device__) __inline char4 __ldca(const char4 *ptr) { char4 ret; int4 tmp; asm volatile ("ld.global.ca.v4.s8 {%0,%1,%2,%3}, [%4];"  : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l" (ptr)); ret.x = (char)tmp.x; ret.y = (char)tmp.y; ret.z = (char)tmp.z; ret.w = (char)tmp.w; return ret; }
static __declspec(__device__) __inline short2 __ldca(const short2 *ptr) { short2 ret; asm volatile ("ld.global.ca.v2.s16 {%0,%1}, [%2];"  : "=h"(ret.x), "=h"(ret.y) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline short4 __ldca(const short4 *ptr) { short4 ret; asm volatile ("ld.global.ca.v4.s16 {%0,%1,%2,%3}, [%4];"  : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline int2 __ldca(const int2 *ptr) { int2 ret; asm volatile ("ld.global.ca.v2.s32 {%0,%1}, [%2];"  : "=r"(ret.x), "=r"(ret.y) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline int4 __ldca(const int4 *ptr) { int4 ret; asm volatile ("ld.global.ca.v4.s32 {%0,%1,%2,%3}, [%4];"  : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline longlong2 __ldca(const longlong2 *ptr) { longlong2 ret; asm volatile ("ld.global.ca.v2.s64 {%0,%1}, [%2];"  : "=l"(ret.x), "=l"(ret.y) : "l" (ptr)); return ret; }

static __declspec(__device__) __inline unsigned char __ldca(const unsigned char *ptr) { unsigned int ret; asm volatile ("ld.global.ca.u8 %0, [%1];"  : "=r"(ret) : "l" (ptr));  return (unsigned char)ret; }
static __declspec(__device__) __inline unsigned short __ldca(const unsigned short *ptr) { unsigned short ret; asm volatile ("ld.global.ca.u16 %0, [%1];"  : "=h"(ret) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline unsigned int __ldca(const unsigned int *ptr) { unsigned int ret; asm volatile ("ld.global.ca.u32 %0, [%1];"  : "=r"(ret) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline unsigned long long __ldca(const unsigned long long *ptr) { unsigned long long ret; asm volatile ("ld.global.ca.u64 %0, [%1];"  : "=l"(ret) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline uchar2 __ldca(const uchar2 *ptr) { uchar2 ret; uint2 tmp; asm volatile ("ld.global.ca.v2.u8 {%0,%1}, [%2];"  : "=r"(tmp.x), "=r"(tmp.y) : "l" (ptr)); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; return ret; }
static __declspec(__device__) __inline uchar4 __ldca(const uchar4 *ptr) { uchar4 ret; uint4 tmp; asm volatile ("ld.global.ca.v4.u8 {%0,%1,%2,%3}, [%4];"  : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l" (ptr)); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; ret.z = (unsigned char)tmp.z; ret.w = (unsigned char)tmp.w; return ret; }
static __declspec(__device__) __inline ushort2 __ldca(const ushort2 *ptr) { ushort2 ret; asm volatile ("ld.global.ca.v2.u16 {%0,%1}, [%2];"  : "=h"(ret.x), "=h"(ret.y) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline ushort4 __ldca(const ushort4 *ptr) { ushort4 ret; asm volatile ("ld.global.ca.v4.u16 {%0,%1,%2,%3}, [%4];"  : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline uint2 __ldca(const uint2 *ptr) { uint2 ret; asm volatile ("ld.global.ca.v2.u32 {%0,%1}, [%2];"  : "=r"(ret.x), "=r"(ret.y) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline uint4 __ldca(const uint4 *ptr) { uint4 ret; asm volatile ("ld.global.ca.v4.u32 {%0,%1,%2,%3}, [%4];"  : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline ulonglong2 __ldca(const ulonglong2 *ptr) { ulonglong2 ret; asm volatile ("ld.global.ca.v2.u64 {%0,%1}, [%2];"  : "=l"(ret.x), "=l"(ret.y) : "l" (ptr)); return ret; }

static __declspec(__device__) __inline float __ldca(const float *ptr) { float ret; asm volatile ("ld.global.ca.f32 %0, [%1];"  : "=f"(ret) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline double __ldca(const double *ptr) { double ret; asm volatile ("ld.global.ca.f64 %0, [%1];"  : "=d"(ret) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline float2 __ldca(const float2 *ptr) { float2 ret; asm volatile ("ld.global.ca.v2.f32 {%0,%1}, [%2];"  : "=f"(ret.x), "=f"(ret.y) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline float4 __ldca(const float4 *ptr) { float4 ret; asm volatile ("ld.global.ca.v4.f32 {%0,%1,%2,%3}, [%4];"  : "=f"(ret.x), "=f"(ret.y), "=f"(ret.z), "=f"(ret.w) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline double2 __ldca(const double2 *ptr) { double2 ret; asm volatile ("ld.global.ca.v2.f64 {%0,%1}, [%2];"  : "=d"(ret.x), "=d"(ret.y) : "l" (ptr)); return ret; }









#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.hpp"
static __declspec(__device__) __inline long __ldcs(const long *ptr) { unsigned long ret; asm volatile ("ld.global.cs.s32 %0, [%1];"  : "=r"(ret) : "l" (ptr)); return (long)ret; }
static __declspec(__device__) __inline unsigned long __ldcs(const unsigned long *ptr) { unsigned long ret; asm volatile ("ld.global.cs.u32 %0, [%1];"  : "=r"(ret) : "l" (ptr)); return ret; }
#line 245 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.hpp"


static __declspec(__device__) __inline char __ldcs(const char *ptr) { unsigned int ret; asm volatile ("ld.global.cs.s8 %0, [%1];"  : "=r"(ret) : "l" (ptr)); return (char)ret; }
static __declspec(__device__) __inline signed char __ldcs(const signed char *ptr) { unsigned int ret; asm volatile ("ld.global.cs.s8 %0, [%1];"  : "=r"(ret) : "l" (ptr)); return (signed char)ret; }
static __declspec(__device__) __inline short __ldcs(const short *ptr) { unsigned short ret; asm volatile ("ld.global.cs.s16 %0, [%1];"  : "=h"(ret) : "l" (ptr)); return (short)ret; }
static __declspec(__device__) __inline int __ldcs(const int *ptr) { unsigned int ret; asm volatile ("ld.global.cs.s32 %0, [%1];"  : "=r"(ret) : "l" (ptr)); return (int)ret; }
static __declspec(__device__) __inline long long __ldcs(const long long *ptr) { unsigned long long ret; asm volatile ("ld.global.cs.s64 %0, [%1];"  : "=l"(ret) : "l" (ptr)); return (long long)ret; }
static __declspec(__device__) __inline char2 __ldcs(const char2 *ptr) { char2 ret; int2 tmp; asm volatile ("ld.global.cs.v2.s8 {%0,%1}, [%2];"  : "=r"(tmp.x), "=r"(tmp.y) : "l" (ptr)); ret.x = (char)tmp.x; ret.y = (char)tmp.y; return ret; }
static __declspec(__device__) __inline char4 __ldcs(const char4 *ptr) { char4 ret; int4 tmp; asm volatile ("ld.global.cs.v4.s8 {%0,%1,%2,%3}, [%4];"  : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l" (ptr)); ret.x = (char)tmp.x; ret.y = (char)tmp.y; ret.z = (char)tmp.z; ret.w = (char)tmp.w; return ret; }
static __declspec(__device__) __inline short2 __ldcs(const short2 *ptr) { short2 ret; asm volatile ("ld.global.cs.v2.s16 {%0,%1}, [%2];"  : "=h"(ret.x), "=h"(ret.y) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline short4 __ldcs(const short4 *ptr) { short4 ret; asm volatile ("ld.global.cs.v4.s16 {%0,%1,%2,%3}, [%4];"  : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline int2 __ldcs(const int2 *ptr) { int2 ret; asm volatile ("ld.global.cs.v2.s32 {%0,%1}, [%2];"  : "=r"(ret.x), "=r"(ret.y) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline int4 __ldcs(const int4 *ptr) { int4 ret; asm volatile ("ld.global.cs.v4.s32 {%0,%1,%2,%3}, [%4];"  : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline longlong2 __ldcs(const longlong2 *ptr) { longlong2 ret; asm volatile ("ld.global.cs.v2.s64 {%0,%1}, [%2];"  : "=l"(ret.x), "=l"(ret.y) : "l" (ptr)); return ret; }

static __declspec(__device__) __inline unsigned char __ldcs(const unsigned char *ptr) { unsigned int ret; asm volatile ("ld.global.cs.u8 %0, [%1];"  : "=r"(ret) : "l" (ptr));  return (unsigned char)ret; }
static __declspec(__device__) __inline unsigned short __ldcs(const unsigned short *ptr) { unsigned short ret; asm volatile ("ld.global.cs.u16 %0, [%1];"  : "=h"(ret) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline unsigned int __ldcs(const unsigned int *ptr) { unsigned int ret; asm volatile ("ld.global.cs.u32 %0, [%1];"  : "=r"(ret) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline unsigned long long __ldcs(const unsigned long long *ptr) { unsigned long long ret; asm volatile ("ld.global.cs.u64 %0, [%1];"  : "=l"(ret) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline uchar2 __ldcs(const uchar2 *ptr) { uchar2 ret; uint2 tmp; asm volatile ("ld.global.cs.v2.u8 {%0,%1}, [%2];"  : "=r"(tmp.x), "=r"(tmp.y) : "l" (ptr)); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; return ret; }
static __declspec(__device__) __inline uchar4 __ldcs(const uchar4 *ptr) { uchar4 ret; uint4 tmp; asm volatile ("ld.global.cs.v4.u8 {%0,%1,%2,%3}, [%4];"  : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l" (ptr)); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; ret.z = (unsigned char)tmp.z; ret.w = (unsigned char)tmp.w; return ret; }
static __declspec(__device__) __inline ushort2 __ldcs(const ushort2 *ptr) { ushort2 ret; asm volatile ("ld.global.cs.v2.u16 {%0,%1}, [%2];"  : "=h"(ret.x), "=h"(ret.y) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline ushort4 __ldcs(const ushort4 *ptr) { ushort4 ret; asm volatile ("ld.global.cs.v4.u16 {%0,%1,%2,%3}, [%4];"  : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline uint2 __ldcs(const uint2 *ptr) { uint2 ret; asm volatile ("ld.global.cs.v2.u32 {%0,%1}, [%2];"  : "=r"(ret.x), "=r"(ret.y) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline uint4 __ldcs(const uint4 *ptr) { uint4 ret; asm volatile ("ld.global.cs.v4.u32 {%0,%1,%2,%3}, [%4];"  : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline ulonglong2 __ldcs(const ulonglong2 *ptr) { ulonglong2 ret; asm volatile ("ld.global.cs.v2.u64 {%0,%1}, [%2];"  : "=l"(ret.x), "=l"(ret.y) : "l" (ptr)); return ret; }

static __declspec(__device__) __inline float __ldcs(const float *ptr) { float ret; asm volatile ("ld.global.cs.f32 %0, [%1];"  : "=f"(ret) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline double __ldcs(const double *ptr) { double ret; asm volatile ("ld.global.cs.f64 %0, [%1];"  : "=d"(ret) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline float2 __ldcs(const float2 *ptr) { float2 ret; asm volatile ("ld.global.cs.v2.f32 {%0,%1}, [%2];"  : "=f"(ret.x), "=f"(ret.y) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline float4 __ldcs(const float4 *ptr) { float4 ret; asm volatile ("ld.global.cs.v4.f32 {%0,%1,%2,%3}, [%4];"  : "=f"(ret.x), "=f"(ret.y), "=f"(ret.z), "=f"(ret.w) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline double2 __ldcs(const double2 *ptr) { double2 ret; asm volatile ("ld.global.cs.v2.f64 {%0,%1}, [%2];"  : "=d"(ret.x), "=d"(ret.y) : "l" (ptr)); return ret; }









static __declspec(__device__) __inline unsigned int __funnelshift_l(unsigned int lo, unsigned int hi, unsigned int shift)
{
    unsigned int ret;
    asm volatile ("shf.l.wrap.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(lo), "r"(hi), "r"(shift));
    return ret;
}
static __declspec(__device__) __inline unsigned int __funnelshift_lc(unsigned int lo, unsigned int hi, unsigned int shift)
{
    unsigned int ret;
    asm volatile ("shf.l.clamp.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(lo), "r"(hi), "r"(shift));
    return ret;
}


static __declspec(__device__) __inline unsigned int __funnelshift_r(unsigned int lo, unsigned int hi, unsigned int shift)
{
    unsigned int ret;
    asm volatile ("shf.r.wrap.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(lo), "r"(hi), "r"(shift));
    return ret;
}
static __declspec(__device__) __inline unsigned int __funnelshift_rc(unsigned int lo, unsigned int hi, unsigned int shift)
{
    unsigned int ret;
    asm volatile ("shf.r.clamp.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(lo), "r"(hi), "r"(shift));
    return ret;
}


#line 315 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.hpp"

#line 317 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.hpp"



#line 321 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.hpp"


#line 252 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 253 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"

#line 255 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 4523 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_35_intrinsics.h"














































































































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"





























































































































































































































































#line 255 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_35_intrinsics.h"



#line 116 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_35_intrinsics.h"

#line 4524 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
























































#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"

#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"





#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.hpp"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.hpp"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.hpp"


































































































#line 157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.hpp"

#line 159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.hpp"



#line 163 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.hpp"

#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
#line 124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"

#line 126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
#line 4525 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"

























































#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"









#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 69 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"









































































































#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 71 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 72 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.h"


















































































































































































#line 180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.h"
#line 73 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 74 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"








extern __declspec(__device__) __declspec(__device_builtin__) uchar1     __surf1Dreadc1(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dreadc1");
extern __declspec(__device__) __declspec(__device_builtin__) uchar2     __surf1Dreadc2(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dreadc2");
extern __declspec(__device__) __declspec(__device_builtin__) uchar4     __surf1Dreadc4(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dreadc4");
extern __declspec(__device__) __declspec(__device_builtin__) ushort1    __surf1Dreads1(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dreads1");
extern __declspec(__device__) __declspec(__device_builtin__) ushort2    __surf1Dreads2(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dreads2");
extern __declspec(__device__) __declspec(__device_builtin__) ushort4    __surf1Dreads4(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dreads4");
extern __declspec(__device__) __declspec(__device_builtin__) uint1      __surf1Dreadu1(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dreadu1");
extern __declspec(__device__) __declspec(__device_builtin__) uint2      __surf1Dreadu2(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dreadu2");
extern __declspec(__device__) __declspec(__device_builtin__) uint4      __surf1Dreadu4(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dreadu4");
extern __declspec(__device__) __declspec(__device_builtin__) ulonglong1 __surf1Dreadl1(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dreadl1");
extern __declspec(__device__) __declspec(__device_builtin__) ulonglong2 __surf1Dreadl2(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dreadl2");





#line 99 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"

template<class T>
__declspec(__device__) __forceinline void surf1Dread(T *res, surface<void, 0x01> surf, int x, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  (s ==  1) ? (void)(*(uchar1 *)res = ((mode == cudaBoundaryModeZero) ? __surf1Dreadc1(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadc1(surf, x, cudaBoundaryModeClamp) : __surf1Dreadc1(surf, x, cudaBoundaryModeTrap ))) :
  (s ==  2) ? (void)(*(ushort1*)res = ((mode == cudaBoundaryModeZero) ? __surf1Dreads1(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreads1(surf, x, cudaBoundaryModeClamp) : __surf1Dreads1(surf, x, cudaBoundaryModeTrap ))) :
  (s ==  4) ? (void)(*(uint1  *)res = ((mode == cudaBoundaryModeZero) ? __surf1Dreadu1(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadu1(surf, x, cudaBoundaryModeClamp) : __surf1Dreadu1(surf, x, cudaBoundaryModeTrap ))) :
  (s ==  8) ? (void)(*(uint2  *)res = ((mode == cudaBoundaryModeZero) ? __surf1Dreadu2(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadu2(surf, x, cudaBoundaryModeClamp) : __surf1Dreadu2(surf, x, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(*(uint4  *)res = ((mode == cudaBoundaryModeZero) ? __surf1Dreadu4(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadu4(surf, x, cudaBoundaryModeClamp) : __surf1Dreadu4(surf, x, cudaBoundaryModeTrap ))) :
              (void)0;
#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}

template<class T>
__declspec(__device__) __forceinline  T surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T tmp;
  
  surf1Dread(&tmp, surf, x, (int)sizeof(T), mode);
  
  return tmp;
#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}

template<class T>
__declspec(__device__) __forceinline void surf1Dread(T *res, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surf1Dread<T>(surf, x, mode);
#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}


template<> __declspec(__device__) __declspec(__cudart_builtin__) char surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_char") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) signed char surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_schar") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned char surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_uchar") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) char1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_char1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uchar1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_uchar1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) char2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_char2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uchar2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_uchar2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) char4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_char4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uchar4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_uchar4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_short") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned short surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_ushort") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_short1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ushort1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_ushort1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_short2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ushort2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_ushort2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_short4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ushort4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_ushort4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_int") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned int surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_uint") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_int1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uint1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_uint1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_int2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uint2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_uint2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_int4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uint4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_uint4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) long long int surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_longlong") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned long long int surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_ulonglong") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) longlong1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_longlong1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ulonglong1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_ulonglong1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) longlong2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_longlong2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ulonglong2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_ulonglong2") ;

template<>
__declspec(__device__) __forceinline long int surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int __surf1Dread_long_as_int(surface<void, 0x01>, int, enum cudaSurfaceBoundaryMode) asm("__surf1Dread_long_as_int");
  return (long int)__surf1Dread_long_as_int(surf, x, mode);
}

template<>
__declspec(__device__) __forceinline unsigned long int surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) unsigned __surf1Dread_ulong_as_uint(surface<void, 0x01>, int, enum cudaSurfaceBoundaryMode) asm("__surf1Dread_ulong_as_uint");
  return (long unsigned)__surf1Dread_ulong_as_uint(surf, x, mode);
}

template<>
__declspec(__device__) __forceinline long1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int1 __surf1Dread_long1_as_int1(surface<void, 0x01>, int, enum cudaSurfaceBoundaryMode) asm("__surf1Dread_long1_as_int1");
  int1 v = __surf1Dread_long1_as_int1(surf, x, mode);
  return make_long1((long int)v.x);
}

template<>
__declspec(__device__) __forceinline ulong1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint1 __surf1Dread_ulong1_as_uint1(surface<void, 0x01>, int, enum cudaSurfaceBoundaryMode) asm("__surf1Dread_ulong1_as_uint1");
  uint1 v = __surf1Dread_ulong1_as_uint1(surf, x, mode);
  return make_ulong1((unsigned long int)v.x);
}

template<>
__declspec(__device__) __forceinline long2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int2 __surf1Dread_long2_as_int2(surface<void, 0x01>, int, enum cudaSurfaceBoundaryMode) asm("__surf1Dread_long2_as_int2");
  int2 tmp = __surf1Dread_long2_as_int2(surf, x, mode);
  return make_long2((long int)tmp.x, (long int)tmp.y);
}

template<>
__declspec(__device__) __forceinline ulong2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint2 __surf1Dread_ulong2_as_uint2(surface<void, 0x01>, int, enum cudaSurfaceBoundaryMode) asm("__surf1Dread_ulong2_as_uint2");
  uint2 tmp = __surf1Dread_ulong2_as_uint2(surf, x, mode);
  return make_ulong2((unsigned long int)tmp.x, (unsigned long int)tmp.y);
}

template<>
__declspec(__device__) __forceinline long4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int4 __surf1Dread_long4_as_int4(surface<void, 0x01>, int, enum cudaSurfaceBoundaryMode) asm("__surf1Dread_long4_as_int4");
  int4 tmp = __surf1Dread_long4_as_int4(surf, x, mode);
  return make_long4((long int)tmp.x, (long int)tmp.y, (long int)tmp.z, (long int)tmp.w);
}

template<>
__declspec(__device__) __forceinline ulong4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint4 __surf1Dread_ulong4_as_uint4(surface<void, 0x01>, int, enum cudaSurfaceBoundaryMode) asm("__surf1Dread_ulong4_as_uint4");
  uint4 tmp = __surf1Dread_ulong4_as_uint4(surf, x, mode);
  return make_ulong4((unsigned long int)tmp.x, (unsigned long int)tmp.y, (unsigned long int)tmp.z, (unsigned long int)tmp.w);
}
#line 228 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template<> __declspec(__device__) __declspec(__cudart_builtin__) float surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_float") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) float1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_float1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) float2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_float2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) float4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_float4") ;
#line 233 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"









extern __declspec(__device__) __declspec(__device_builtin__) uchar1     __surf2Dreadc1(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dreadc1") ;
extern __declspec(__device__) __declspec(__device_builtin__) uchar2     __surf2Dreadc2(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dreadc2") ;
extern __declspec(__device__) __declspec(__device_builtin__) uchar4     __surf2Dreadc4(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dreadc4") ;
extern __declspec(__device__) __declspec(__device_builtin__) ushort1    __surf2Dreads1(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dreads1") ;
extern __declspec(__device__) __declspec(__device_builtin__) ushort2    __surf2Dreads2(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dreads2") ;
extern __declspec(__device__) __declspec(__device_builtin__) ushort4    __surf2Dreads4(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dreads4") ;
extern __declspec(__device__) __declspec(__device_builtin__) uint1      __surf2Dreadu1(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dreadu1") ;
extern __declspec(__device__) __declspec(__device_builtin__) uint2      __surf2Dreadu2(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dreadu2") ;
extern __declspec(__device__) __declspec(__device_builtin__) uint4      __surf2Dreadu4(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dreadu4") ;
extern __declspec(__device__) __declspec(__device_builtin__) ulonglong1 __surf2Dreadl1(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dreadl1") ;
extern __declspec(__device__) __declspec(__device_builtin__) ulonglong2 __surf2Dreadl2(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dreadl2");





#line 259 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"

template<class T>
__declspec(__device__) __forceinline void surf2Dread(T *res, surface<void, 0x02> surf, int x, int y, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  (s ==  1) ? (void)(*(uchar1 *)res = ((mode == cudaBoundaryModeZero) ? __surf2Dreadc1(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadc1(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap ))) :
  (s ==  2) ? (void)(*(ushort1*)res = ((mode == cudaBoundaryModeZero) ? __surf2Dreads1(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreads1(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreads1(surf, x, y, cudaBoundaryModeTrap ))) :
  (s ==  4) ? (void)(*(uint1  *)res = ((mode == cudaBoundaryModeZero) ? __surf2Dreadu1(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadu1(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap ))) :
  (s ==  8) ? (void)(*(uint2  *)res = ((mode == cudaBoundaryModeZero) ? __surf2Dreadu2(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadu2(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadu2(surf, x, y, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(*(uint4  *)res = ((mode == cudaBoundaryModeZero) ? __surf2Dreadu4(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadu4(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadu4(surf, x, y, cudaBoundaryModeTrap ))) :
              (void)0;
#line 271 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}

template<class T>
__declspec(__device__) __forceinline T surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T tmp;
  
  surf2Dread(&tmp, surf, x, y, (int)sizeof(T), mode);
  
  return tmp;
#line 283 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}

template<class T>
__declspec(__device__) __forceinline void surf2Dread(T *res, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surf2Dread<T>(surf, x, y, mode);
#line 291 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}


template<> __declspec(__device__) __declspec(__cudart_builtin__) char surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_char") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) signed char surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_schar") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned char surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_uchar") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) char1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_char1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uchar1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_uchar1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) char2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_char2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uchar2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_uchar2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) char4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_char4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uchar4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_uchar4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_short") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned short surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_ushort") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_short1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ushort1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_ushort1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_short2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ushort2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_ushort2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_short4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ushort4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_ushort4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_int") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned int surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_uint") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_int1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uint1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_uint1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_int2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uint2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_uint2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_int4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uint4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_uint4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) long long int surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_longlong") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned long long int surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_ulonglong") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) longlong1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_longlong1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ulonglong1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_ulonglong1") ;
template<>__declspec(__device__) __declspec(__cudart_builtin__) longlong2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_longlong2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ulonglong2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_ulonglong2") ;


template<>
__declspec(__device__) __forceinline long int surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int __surf1Dread_long_as_int(surface<void, 0x02>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2Dread_long_as_int");
  return __surf1Dread_long_as_int(surf, x, y, mode);
}

template<>
__declspec(__device__) __forceinline unsigned long int surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) unsigned int __surf1Dread_ulong_as_uint(surface<void, 0x02>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2Dread_ulong_as_uint");
  return __surf1Dread_ulong_as_uint(surf, x, y, mode);
}

template<>
__declspec(__device__) __forceinline long1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int1 __surf2Dread_long1_as_int1(surface<void, 0x02>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2Dread_long1_as_int1");
  int1 tmp = __surf2Dread_long1_as_int1(surf, x, y, mode);
  return make_long1((long int)tmp.x);
}

template<>
__declspec(__device__) __forceinline ulong1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint1 __surf2Dread_ulong1_as_uint1(surface<void, 0x02>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2Dread_ulong1_as_uint1");
  uint1 tmp = __surf2Dread_ulong1_as_uint1(surf, x, y, mode);
  return make_ulong1((unsigned long int)tmp.x);
}

template<>
__declspec(__device__) __forceinline long2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int2 __surf2Dread_long2_as_int2(surface<void, 0x02>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2Dread_long2_as_int2");
  int2 tmp = __surf2Dread_long2_as_int2(surf, x, y, mode);
  return make_long2((long int)tmp.x, (long int)tmp.y);
}

template<>
__declspec(__device__) __forceinline ulong2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint2 __surf2Dread_ulong2_as_uint2(surface<void, 0x02>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2Dread_ulong2_as_uint2");
  uint2 tmp = __surf2Dread_ulong2_as_uint2(surf, x, y, mode);
  return make_ulong2((long unsigned int)tmp.x, (long unsigned int)tmp.y);
}

template<>
__declspec(__device__) __forceinline long4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int4 __surf2Dread_long4_as_int4(surface<void, 0x02>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2Dread_long4_as_int4");
  int4 tmp = __surf2Dread_long4_as_int4(surf, x, y, mode);
  return make_long4((long int)tmp.x, (long int)tmp.y, (long int)tmp.z, (long int)tmp.w);
}

template<>
__declspec(__device__) __forceinline ulong4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint4 __surf2Dread_ulong4_as_uint4(surface<void, 0x02>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2Dread_ulong4_as_uint4");
  uint4 tmp = __surf2Dread_ulong4_as_uint4(surf, x, y, mode);
  return make_ulong4((unsigned long)tmp.x, (unsigned long)tmp.y, (unsigned long)tmp.z, (unsigned long)tmp.w);
}
#line 389 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"

template<> __declspec(__device__) __declspec(__cudart_builtin__) float surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_float") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) float1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_float1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) float2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_float2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) float4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_float4") ;
#line 395 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"









extern __declspec(__device__) __declspec(__device_builtin__) uchar1     __surf3Dreadc1(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dreadc1") ;
extern __declspec(__device__) __declspec(__device_builtin__) uchar2     __surf3Dreadc2(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dreadc2") ;
extern __declspec(__device__) __declspec(__device_builtin__) uchar4     __surf3Dreadc4(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dreadc4") ;
extern __declspec(__device__) __declspec(__device_builtin__) ushort1    __surf3Dreads1(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dreads1") ;
extern __declspec(__device__) __declspec(__device_builtin__) ushort2    __surf3Dreads2(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dreads2") ;
extern __declspec(__device__) __declspec(__device_builtin__) ushort4    __surf3Dreads4(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dreads4") ;
extern __declspec(__device__) __declspec(__device_builtin__) uint1      __surf3Dreadu1(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dreadu1") ;
extern __declspec(__device__) __declspec(__device_builtin__) uint2      __surf3Dreadu2(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dreadu2") ;
extern __declspec(__device__) __declspec(__device_builtin__) uint4      __surf3Dreadu4(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dreadu4") ;
extern __declspec(__device__) __declspec(__device_builtin__) ulonglong1 __surf3Dreadl1(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dreadl1") ;
extern __declspec(__device__) __declspec(__device_builtin__) ulonglong2 __surf3Dreadl2(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dreadl2") ;





#line 421 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"

template<class T>
__declspec(__device__) __forceinline void surf3Dread(T *res, surface<void, 0x03> surf, int x, int y, int z, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  (s ==  1) ? (void)(*(uchar1 *)res = ((mode == cudaBoundaryModeZero) ? __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap ))) :
  (s ==  2) ? (void)(*(ushort1*)res = ((mode == cudaBoundaryModeZero) ? __surf3Dreads1(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreads1(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreads1(surf, x, y, z, cudaBoundaryModeTrap ))) :
  (s ==  4) ? (void)(*(uint1  *)res = ((mode == cudaBoundaryModeZero) ? __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap ))) :
  (s ==  8) ? (void)(*(uint2  *)res = ((mode == cudaBoundaryModeZero) ? __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(*(uint4  *)res = ((mode == cudaBoundaryModeZero) ? __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeTrap ))) :
              (void)0;
#line 433 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}

template<class T>
__declspec(__device__) __forceinline T surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T tmp;
  
  surf3Dread(&tmp, surf, x, y, z, (int)sizeof(T), mode);
  
  return tmp;
#line 445 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}

template<class T>
__declspec(__device__) __forceinline void surf3Dread(T *res, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surf3Dread<T>(surf, x, y, z, mode);
#line 453 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}


template<> __declspec(__device__) __declspec(__cudart_builtin__) char surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_char") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) signed char surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_schar") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned char surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_uchar") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) char1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_char1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uchar1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_uchar1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) char2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_char2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uchar2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_uchar2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) char4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_char4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uchar4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_uchar4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_short") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned short surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_ushort") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_short1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ushort1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_ushort1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_short2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ushort2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_ushort2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_short4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ushort4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_ushort4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_int") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned int surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_uint") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_int1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uint1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_uint1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_int2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uint2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_uint2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_int4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uint4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_uint4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) long long int surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_longlong") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned long long int surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_ulonglong") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) longlong1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_longlong1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ulonglong1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_ulonglong1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) longlong2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_longlong2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ulonglong2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_ulonglong2") ;

template<>
__declspec(__device__) __forceinline long int surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int __surf3Dread_long_as_int(surface<void, 0x03>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf3Dread_long_as_int");
  return __surf3Dread_long_as_int(surf, x, y, z, mode);
}

template<>
__declspec(__device__) __forceinline unsigned long int surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) unsigned int __surf3Dread_ulong_as_uint(surface<void, 0x03>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf3Dread_ulong_as_uint");
  return __surf3Dread_ulong_as_uint(surf, x, y, z, mode);
}

template<>
__declspec(__device__) __forceinline long1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int1 __surf3Dread_long1_as_int1(surface<void, 0x03>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf3Dread_long1_as_int1");
  int1 tmp = __surf3Dread_long1_as_int1(surf, x, y, z, mode);
  return make_long1((long int)tmp.x);
}

template<>
__declspec(__device__) __forceinline ulong1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint1 __surf3Dread_ulong1_as_uint1(surface<void, 0x03>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf3Dread_ulong1_as_uint1");
  uint1 tmp = __surf3Dread_ulong1_as_uint1(surf, x, y, z, mode);
  return make_ulong1((unsigned long int)tmp.x);
}

template<>
__declspec(__device__) __forceinline long2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int2 __surf3Dread_long2_as_int2(surface<void, 0x03>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf3Dread_long2_as_int2");
  int2 tmp = __surf3Dread_long2_as_int2(surf, x, y, z, mode);
  return make_long2((long int)tmp.x, (long int)tmp.y);
}

template<>
__declspec(__device__) __forceinline ulong2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint2 __surf3Dread_ulong2_as_uint2(surface<void, 0x03>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf3Dread_ulong2_as_uint2");
  uint2 tmp = __surf3Dread_ulong2_as_uint2(surf, x, y, z, mode);
  return make_ulong2((unsigned long int)tmp.x, (unsigned long int)tmp.y);
}

template<>
__declspec(__device__) __forceinline long4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int4 __surf3Dread_long4_as_int4(surface<void, 0x03>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf3Dread_long4_as_int4");
  int4 tmp = __surf3Dread_long4_as_int4(surf, x, y, z, mode);
  return make_long4((long int)tmp.x, (long int)tmp.y, (long int)tmp.z, (long int)tmp.w);
}

template<>
__declspec(__device__) __forceinline ulong4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint4 __surf3Dread_ulong4_as_uint4(surface<void, 0x03>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf3Dread_ulong4_as_uint4");
  uint4 tmp = __surf3Dread_ulong4_as_uint4(surf, x, y, z, mode);
  return make_ulong4((unsigned long int)tmp.x, (unsigned long int)tmp.y, (unsigned long int)tmp.z, (unsigned long int)tmp.w);
}
#line 550 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"

template<> __declspec(__device__) __declspec(__cudart_builtin__) float surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_float") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) float1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_float1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) float2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_float2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) float4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_float4") ;
#line 556 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"








extern __declspec(__device__) __declspec(__device_builtin__) uchar1     __surf1DLayeredreadc1(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredreadc1");
extern __declspec(__device__) __declspec(__device_builtin__) uchar2     __surf1DLayeredreadc2(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredreadc2");
extern __declspec(__device__) __declspec(__device_builtin__) uchar4     __surf1DLayeredreadc4(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredreadc4");
extern __declspec(__device__) __declspec(__device_builtin__) ushort1    __surf1DLayeredreads1(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredreads1");
extern __declspec(__device__) __declspec(__device_builtin__) ushort2    __surf1DLayeredreads2(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredreads2");
extern __declspec(__device__) __declspec(__device_builtin__) ushort4    __surf1DLayeredreads4(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredreads4");
extern __declspec(__device__) __declspec(__device_builtin__) uint1      __surf1DLayeredreadu1(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredreadu1");
extern __declspec(__device__) __declspec(__device_builtin__) uint2      __surf1DLayeredreadu2(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredreadu2");
extern __declspec(__device__) __declspec(__device_builtin__) uint4      __surf1DLayeredreadu4(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredreadu4");
extern __declspec(__device__) __declspec(__device_builtin__) ulonglong1 __surf1DLayeredreadl1(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredreadl1");
extern __declspec(__device__) __declspec(__device_builtin__) ulonglong2 __surf1DLayeredreadl2(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredreadl2");





#line 581 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"

template<class T>
__declspec(__device__) __forceinline void surf1DLayeredread(T *res, surface<void, 0xF1> surf, int x, int layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  (s ==  1) ? (void)(*(uchar1 *)res = ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap ))) :
  (s ==  2) ? (void)(*(ushort1*)res = ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeTrap ))) :
  (s ==  4) ? (void)(*(uint1  *)res = ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap ))) :
  (s ==  8) ? (void)(*(uint2  *)res = ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(*(uint4  *)res = ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeTrap ))) :
              (void)0;
#line 593 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}

template<class T>
__declspec(__device__) __forceinline T surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T tmp;
  
  surf1DLayeredread(&tmp, surf, x, layer, (int)sizeof(T), mode);
  
  return tmp;
#line 605 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}

template<class T>
__declspec(__device__) __forceinline void surf1DLayeredread(T *res, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surf1DLayeredread<T>(surf, x, layer, mode);
#line 613 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}


template<> __declspec(__device__) __declspec(__cudart_builtin__) char surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_char") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) signed char surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_schar") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned char surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_uchar") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) char1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_char1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uchar1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_uchar1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) char2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_char2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uchar2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_uchar2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) char4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_char4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uchar4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_uchar4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_short") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned short surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_ushort") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_short1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ushort1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_ushort1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_short2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ushort2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_ushort2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_short4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ushort4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_ushort4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_int") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned int surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_uint") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_int1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uint1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_uint1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_int2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uint2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_uint2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_int4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uint4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_uint4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) long long int surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_longlong") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned long long int surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_ulonglong") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) longlong1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_longlong1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ulonglong1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_ulonglong1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) longlong2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_longlong2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ulonglong2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_ulonglong2") ;


template<>
__declspec(__device__) __forceinline long int surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int __surf1DLayeredread_long_as_int(surface<void, 0xF1>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf1DLayeredread_long_as_int");
  return (long int)__surf1DLayeredread_long_as_int(surf, x, layer, mode);
}

template<>
__declspec(__device__) __forceinline unsigned long int surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) unsigned int __surf1DLayeredread_ulong_as_uint(surface<void, 0xF1>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf1DLayeredread_ulong_as_uint");
  return (unsigned long int)__surf1DLayeredread_ulong_as_uint(surf, x, layer, mode);
}

template<>
__declspec(__device__) __forceinline long1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int1 __surf1DLayeredread_long1_as_int1(surface<void, 0xF1>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf1DLayeredread_long1_as_int1");
  int1 tmp = __surf1DLayeredread_long1_as_int1(surf, x, layer, mode);
  return make_long1((long int)tmp.x);
}

template<>
__declspec(__device__) __forceinline ulong1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint1 __surf1DLayeredread_ulong1_as_uint1(surface<void, 0xF1>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf1DLayeredread_ulong1_as_uint1");
  uint1 tmp = __surf1DLayeredread_ulong1_as_uint1(surf, x, layer, mode);
  return make_ulong1((unsigned long int)tmp.x);
}

template<>
__declspec(__device__) __forceinline long2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int2 __surf1DLayeredread_long2_as_int2(surface<void, 0xF1>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf1DLayeredread_long2_as_int2");
  int2 tmp = __surf1DLayeredread_long2_as_int2(surf, x, layer, mode);
  return make_long2((long int)tmp.x, (long int)tmp.y);
}

template<>
__declspec(__device__) __forceinline ulong2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint2 __surf1DLayeredread_ulong2_as_uint2(surface<void, 0xF1>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf1DLayeredread_ulong2_as_uint2");
  uint2 tmp = __surf1DLayeredread_ulong2_as_uint2(surf, x, layer, mode);
  return make_ulong2((unsigned long int)tmp.x, (unsigned long int)tmp.y);
}

template<>
__declspec(__device__) __forceinline long4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int4 __surf1DLayeredread_long4_as_int4(surface<void, 0xF1>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf1DLayeredread_long4_as_int4");
  int4 tmp = __surf1DLayeredread_long4_as_int4(surf, x, layer, mode);
  return make_long4((long int)tmp.x, (long int)tmp.y, (long int)tmp.z, (long int)tmp.w);
}

template<>
__declspec(__device__) __forceinline ulong4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint4 __surf1DLayeredread_ulong4_as_uint4(surface<void, 0xF1>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf1DLayeredread_ulong4_as_uint4");
  uint4 tmp = __surf1DLayeredread_ulong4_as_uint4(surf, x, layer, mode);
  return make_ulong4((unsigned long int)tmp.x, (unsigned long int)tmp.y, (unsigned long int)tmp.z, (unsigned long int)tmp.w);
}
#line 711 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"

template<> __declspec(__device__) __declspec(__cudart_builtin__) float surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_float") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) float1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_float1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) float2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_float2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) float4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_float4") ;
#line 717 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"









extern __declspec(__device__) __declspec(__device_builtin__) uchar1     __surf2DLayeredreadc1(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadc1");
extern __declspec(__device__) __declspec(__device_builtin__) uchar2     __surf2DLayeredreadc2(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadc2") ;
extern __declspec(__device__) __declspec(__device_builtin__) uchar4     __surf2DLayeredreadc4(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadc4") ;
extern __declspec(__device__) __declspec(__device_builtin__) ushort1    __surf2DLayeredreads1(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreads1") ;
extern __declspec(__device__) __declspec(__device_builtin__) ushort2    __surf2DLayeredreads2(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreads2") ;
extern __declspec(__device__) __declspec(__device_builtin__) ushort4    __surf2DLayeredreads4(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreads4") ;
extern __declspec(__device__) __declspec(__device_builtin__) uint1      __surf2DLayeredreadu1(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadu1") ;
extern __declspec(__device__) __declspec(__device_builtin__) uint2      __surf2DLayeredreadu2(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadu2") ;
extern __declspec(__device__) __declspec(__device_builtin__) uint4      __surf2DLayeredreadu4(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadu4") ;
extern __declspec(__device__) __declspec(__device_builtin__) ulonglong1 __surf2DLayeredreadl1(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadl1") ;
extern __declspec(__device__) __declspec(__device_builtin__) ulonglong2 __surf2DLayeredreadl2(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadl2") ;

extern __declspec(__device__) __declspec(__device_builtin__) uchar1     __surf2DLayeredreadc1(surface<void, 0x0C> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadc1");
extern __declspec(__device__) __declspec(__device_builtin__) uchar2     __surf2DLayeredreadc2(surface<void, 0x0C> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadc2") ;
extern __declspec(__device__) __declspec(__device_builtin__) uchar4     __surf2DLayeredreadc4(surface<void, 0x0C> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadc4") ;
extern __declspec(__device__) __declspec(__device_builtin__) ushort1    __surf2DLayeredreads1(surface<void, 0x0C> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreads1") ;
extern __declspec(__device__) __declspec(__device_builtin__) ushort2    __surf2DLayeredreads2(surface<void, 0x0C> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreads2") ;
extern __declspec(__device__) __declspec(__device_builtin__) ushort4    __surf2DLayeredreads4(surface<void, 0x0C> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreads4") ;
extern __declspec(__device__) __declspec(__device_builtin__) uint1      __surf2DLayeredreadu1(surface<void, 0x0C> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadu1") ;
extern __declspec(__device__) __declspec(__device_builtin__) uint2      __surf2DLayeredreadu2(surface<void, 0x0C> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadu2") ;
extern __declspec(__device__) __declspec(__device_builtin__) uint4      __surf2DLayeredreadu4(surface<void, 0x0C> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadu4") ;
extern __declspec(__device__) __declspec(__device_builtin__) ulonglong1 __surf2DLayeredreadl1(surface<void, 0x0C> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadl1") ;
extern __declspec(__device__) __declspec(__device_builtin__) ulonglong2 __surf2DLayeredreadl2(surface<void, 0x0C> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadl2") ;

extern __declspec(__device__) __declspec(__device_builtin__) uchar1     __surf2DLayeredreadc1(surface<void, 0xFC> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadc1");
extern __declspec(__device__) __declspec(__device_builtin__) uchar2     __surf2DLayeredreadc2(surface<void, 0xFC> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadc2") ;
extern __declspec(__device__) __declspec(__device_builtin__) uchar4     __surf2DLayeredreadc4(surface<void, 0xFC> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadc4") ;
extern __declspec(__device__) __declspec(__device_builtin__) ushort1    __surf2DLayeredreads1(surface<void, 0xFC> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreads1") ;
extern __declspec(__device__) __declspec(__device_builtin__) ushort2    __surf2DLayeredreads2(surface<void, 0xFC> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreads2") ;
extern __declspec(__device__) __declspec(__device_builtin__) ushort4    __surf2DLayeredreads4(surface<void, 0xFC> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreads4") ;
extern __declspec(__device__) __declspec(__device_builtin__) uint1      __surf2DLayeredreadu1(surface<void, 0xFC> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadu1") ;
extern __declspec(__device__) __declspec(__device_builtin__) uint2      __surf2DLayeredreadu2(surface<void, 0xFC> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadu2") ;
extern __declspec(__device__) __declspec(__device_builtin__) uint4      __surf2DLayeredreadu4(surface<void, 0xFC> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadu4") ;
extern __declspec(__device__) __declspec(__device_builtin__) ulonglong1 __surf2DLayeredreadl1(surface<void, 0xFC> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadl1") ;
extern __declspec(__device__) __declspec(__device_builtin__) ulonglong2 __surf2DLayeredreadl2(surface<void, 0xFC> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadl2") ;





#line 767 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"

template<class T>
__declspec(__device__) __forceinline void surf2DLayeredread(T *res, surface<void, 0xF2> surf, int x, int y, int layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  (s ==  1) ? (void)(*(uchar1 *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap ))) :
  (s ==  2) ? (void)(*(ushort1*)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeTrap ))) :
  (s ==  4) ? (void)(*(uint1  *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap ))) :
  (s ==  8) ? (void)(*(uint2  *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(*(uint4  *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeTrap ))) :
              (void)0;
#line 779 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}

template<class T>
__declspec(__device__) __forceinline T surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T tmp;
  
  surf2DLayeredread(&tmp, surf, x, y, layer, (int)sizeof(T), mode);
  
  return tmp;
#line 791 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}

template<class T>
__declspec(__device__) __forceinline void surf2DLayeredread(T *res, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surf2DLayeredread<T>(surf, x, y, layer, mode);
#line 799 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}


template<> __declspec(__device__) __declspec(__cudart_builtin__) char surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_char") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) signed char surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_schar") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned char surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_uchar") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) char1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_char1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uchar1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_uchar1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) char2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_char2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uchar2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_uchar2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) char4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_char4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uchar4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_uchar4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_short") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned short surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_ushort") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_short1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ushort1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_ushort1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_short2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ushort2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_ushort2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_short4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ushort4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_ushort4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_int") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned int surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_uint") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_int1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uint1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_uint1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_int2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uint2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_uint2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_int4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uint4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_uint4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) long long int surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_longlong") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned long long int surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_ulonglong") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) longlong1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_longlong1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ulonglong1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_ulonglong1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) longlong2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_longlong2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ulonglong2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_ulonglong2") ;


template<>
__declspec(__device__) __forceinline long int surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int __surf2DLayeredread_long_as_int(surface<void, 0xF2>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2DLayeredread_long_as_int");
  return (long int)__surf2DLayeredread_long_as_int(surf, x, y, layer, mode);
}

template<>
__declspec(__device__) __forceinline unsigned long int surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) unsigned int __surf2DLayeredread_ulong_as_uint(surface<void, 0xF2>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2DLayeredread_ulong_as_uint");
  return (unsigned long int)__surf2DLayeredread_ulong_as_uint(surf, x, y, layer, mode);
}

template<>
__declspec(__device__) __forceinline long1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int1 __surf2DLayeredread_long1_as_int1(surface<void, 0xF2>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2DLayeredread_long1_as_int1");
  int1 tmp = __surf2DLayeredread_long1_as_int1(surf, x, y, layer, mode);
  return make_long1((long int)tmp.x);
}

template<>
__declspec(__device__) __forceinline ulong1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint1 __surf2DLayeredread_ulong1_as_uint1(surface<void, 0xF2>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2DLayeredread_ulong1_as_uint1");
  uint1 tmp = __surf2DLayeredread_ulong1_as_uint1(surf, x, y, layer, mode);
  return make_ulong1((unsigned long int)tmp.x);
}

template<>
__declspec(__device__) __forceinline long2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int2 __surf2DLayeredread_long2_as_int2(surface<void, 0xF2>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2DLayeredread_long2_as_int2");
  int2 tmp = __surf2DLayeredread_long2_as_int2(surf, x, y, layer, mode);
  return make_long2((long int)tmp.x, (long int)tmp.y);
}

template<>
__declspec(__device__) __forceinline ulong2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint2 __surf2DLayeredread_ulong2_as_uint2(surface<void, 0xF2>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2DLayeredread_ulong2_as_uint2");
  uint2 tmp = __surf2DLayeredread_ulong2_as_uint2(surf, x, y, layer, mode);
  return make_ulong2((unsigned long int)tmp.x, (unsigned long int)tmp.y);
}

template<>
__declspec(__device__) __forceinline long4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int4 __surf2DLayeredread_long4_as_int4(surface<void, 0xF2>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2DLayeredread_long4_as_int4");
  int4 tmp = __surf2DLayeredread_long4_as_int4(surf, x, y, layer, mode);
  return make_long4((long int)tmp.x, (long int)tmp.y, (long int)tmp.z, (long int)tmp.w);
}

template<>
__declspec(__device__) __forceinline ulong4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint4 __surf2DLayeredread_ulong4_as_uint4(surface<void, 0xF2>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2DLayeredread_ulong4_as_uint4");
  uint4 tmp = __surf2DLayeredread_ulong4_as_uint4(surf, x, y, layer, mode);
  return make_ulong4((unsigned long int)tmp.x, (unsigned long int)tmp.y, (unsigned long int)tmp.z, (unsigned long int)tmp.w);
}
#line 897 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"

template<> __declspec(__device__) __declspec(__cudart_builtin__) float surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_float") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) float1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_float1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) float2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_float2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) float4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_float4") ;
#line 903 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"














#line 918 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"

template<class T>
__declspec(__device__) __forceinline void surfCubemapread(T *res, surface<void, 0x0C> surf, int x, int y, int face, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  (s ==  1) ? (void)(*(uchar1 *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadc1(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadc1(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadc1(surf, x, y, face, cudaBoundaryModeTrap ))) :
  (s ==  2) ? (void)(*(ushort1*)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreads1(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreads1(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreads1(surf, x, y, face, cudaBoundaryModeTrap ))) :
  (s ==  4) ? (void)(*(uint1  *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeTrap ))) :
  (s ==  8) ? (void)(*(uint2  *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu2(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu2(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadu2(surf, x, y, face, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(*(uint4  *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu4(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu4(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadu4(surf, x, y, face, cudaBoundaryModeTrap ))) :
              (void)0;
#line 930 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}

template<class T>
__declspec(__device__) __forceinline T surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T tmp;
  
  surfCubemapread(&tmp, surf, x, y, face, (int)sizeof(T), mode);
  
  return tmp;
#line 942 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}

template<class T>
__declspec(__device__) __forceinline void surfCubemapread(T *res, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surfCubemapread<T>(surf, x, y, face, mode);
#line 950 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}


template<> __declspec(__device__) __declspec(__cudart_builtin__) char surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_char") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) signed char surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_schar") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned char surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_uchar") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) char1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_char1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uchar1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_uchar1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) char2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_char2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uchar2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_uchar2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) char4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_char4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uchar4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_uchar4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_short") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned short surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_ushort") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_short1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ushort1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_ushort1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_short2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ushort2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_ushort2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_short4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ushort4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_ushort4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_int") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned int surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_uint") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_int1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uint1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_uint1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_int2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uint2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_uint2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_int4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uint4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_uint4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) long long int surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_longlong") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned long long int surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_ulonglong") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) longlong1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_longlong1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ulonglong1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_ulonglong1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) longlong2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_longlong2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ulonglong2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_ulonglong2") ;


template<>
__declspec(__device__) __forceinline long int surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int __surfCubemapread_long_as_int(surface<void, 0x0C>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapread_long_as_int");
  return (long int)__surfCubemapread_long_as_int(surf, x, y, face, mode);
}

template<>
__declspec(__device__) __forceinline unsigned long int surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) unsigned int __surfCubemapread_ulong_as_uint(surface<void, 0x0C>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapread_ulong_as_uint");
  return (unsigned long)__surfCubemapread_ulong_as_uint(surf, x, y, face, mode);
}

template<>
__declspec(__device__) __forceinline long1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int1 __surfCubemapread_long1_as_int1(surface<void, 0x0C>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapread_long1_as_int1");
  int1 tmp = __surfCubemapread_long1_as_int1(surf, x, y, face, mode);
  return make_long1((long int)tmp.x);
}

template<>
__declspec(__device__) __forceinline ulong1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint1 __surfCubemapread_ulong1_as_uint1(surface<void, 0x0C>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapread_ulong1_as_uint1");
  uint1 tmp = __surfCubemapread_ulong1_as_uint1(surf, x, y, face, mode);
  return make_ulong1((unsigned long int)tmp.x);
}

template<>
__declspec(__device__) __forceinline long2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int2 __surfCubemapread_long2_as_int2(surface<void, 0x0C>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapread_long2_as_int2");
  int2 tmp = __surfCubemapread_long2_as_int2(surf, x, y, face, mode);
  return make_long2((long int)tmp.x, (long int)tmp.y);
}

template<>
__declspec(__device__) __forceinline ulong2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint2 __surfCubemapread_ulong2_as_uint2(surface<void, 0x0C>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapread_ulong2_as_uint2");
  uint2 tmp = __surfCubemapread_ulong2_as_uint2(surf, x, y, face, mode);
  return make_ulong2((unsigned long int)tmp.x, (unsigned long int)tmp.y);
}

template<>
__declspec(__device__) __forceinline long4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int4 __surfCubemapread_long4_as_int4(surface<void, 0x0C>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapread_long4_as_int4");
  int4 tmp = __surfCubemapread_long4_as_int4(surf, x, y, face, mode);
  return make_long4((long int)tmp.x, (long int)tmp.y, (long int)tmp.z, (long int)tmp.w);
}

template<>
__declspec(__device__) __forceinline ulong4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint4 __surfCubemapread_ulong4_as_uint4(surface<void, 0x0C>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapread_ulong4_as_uint4");
  uint4 tmp = __surfCubemapread_ulong4_as_uint4(surf, x, y, face, mode);
  return make_ulong4((unsigned long int)tmp.x, (unsigned long int)tmp.y, (unsigned long int)tmp.z, (unsigned long int)tmp.w);
}
#line 1048 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"

template<> __declspec(__device__) __declspec(__cudart_builtin__) float surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_float") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) float1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_float1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) float2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_float2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) float4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_float4") ;
#line 1054 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"














#line 1069 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"

template<class T>
__declspec(__device__) __forceinline void surfCubemapLayeredread(T *res, surface<void, 0xFC> surf, int x, int y, int layerFace, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  (s ==  1) ? (void)(*(uchar1 *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
  (s ==  2) ? (void)(*(ushort1*)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
  (s ==  4) ? (void)(*(uint1  *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
  (s ==  8) ? (void)(*(uint2  *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(*(uint4  *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
              (void)0;
#line 1081 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}

template<class T>
__declspec(__device__) __forceinline T surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T tmp;
  
  surfCubemapLayeredread(&tmp, surf, x, y, layerFace, (int)sizeof(T), mode);
  
  return tmp;
#line 1093 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}

template<class T>
__declspec(__device__) __forceinline void surfCubemapLayeredread(T *res, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surfCubemapLayeredread<T>(surf, x, y, layerFace, mode);
#line 1101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}


template<> __declspec(__device__) __declspec(__cudart_builtin__) char surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_char") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) signed char surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_schar") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned char surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_uchar") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) char1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_char1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uchar1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_uchar1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) char2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_char2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uchar2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_uchar2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) char4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_char4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uchar4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_uchar4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_short") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned short surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_ushort") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_short1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ushort1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_ushort1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_short2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ushort2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_ushort2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_short4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ushort4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_ushort4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_int") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned int surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_uint") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_int1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uint1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_uint1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_int2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uint2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_uint2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_int4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uint4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_uint4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) long long int surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_longlong") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned long long int surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_ulonglong") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) longlong1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_longlong1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ulonglong1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_ulonglong1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) longlong2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_longlong2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ulonglong2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_ulonglong2") ;


template<>
__declspec(__device__) __forceinline long int surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int __surfCubemapLayeredread_long_as_int(surface<void, 0xFC>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapLayeredread_long_as_int");
  return (long int)__surfCubemapLayeredread_long_as_int(surf, x, y, layerFace, mode);
}

template<>
__declspec(__device__) __forceinline unsigned long int surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) unsigned int __surfCubemapLayeredread_ulong_as_uint(surface<void, 0xFC>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapLayeredread_ulong_as_uint");
  return (unsigned long int)__surfCubemapLayeredread_ulong_as_uint(surf, x, y, layerFace, mode);
}

template<>
__declspec(__device__) __forceinline long1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int1 __surfCubemapLayeredread_long1_as_int1(surface<void, 0xFC>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapLayeredread_long1_as_int1");
  int1 tmp = __surfCubemapLayeredread_long1_as_int1(surf, x, y, layerFace, mode);
  return make_long1((long int)tmp.x);
}

template<>
__declspec(__device__) __forceinline ulong1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint1 __surfCubemapLayeredread_ulong1_as_uint1(surface<void, 0xFC>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapLayeredread_ulong1_as_uint1");
  uint1 tmp = __surfCubemapLayeredread_ulong1_as_uint1(surf, x, y, layerFace, mode);
  return make_ulong1((unsigned long int)tmp.x);
}

template<>
__declspec(__device__) __forceinline long2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int2 __surfCubemapLayeredread_long2_as_int2(surface<void, 0xFC>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapLayeredread_long2_as_int2");
  int2 tmp = __surfCubemapLayeredread_long2_as_int2(surf, x, y, layerFace, mode);
  return make_long2((long int)tmp.x, (long int)tmp.y);
}

template<>
__declspec(__device__) __forceinline ulong2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint2 __surfCubemapLayeredread_ulong2_as_uint2(surface<void, 0xFC>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapLayeredread_ulong2_as_uint2");
  uint2 tmp = __surfCubemapLayeredread_ulong2_as_uint2(surf, x, y, layerFace, mode);
  return make_ulong2((unsigned long int)tmp.x, (unsigned long int)tmp.y);
}

template<>
__declspec(__device__) __forceinline long4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int4 __surfCubemapLayeredread_long4_as_int4(surface<void, 0xFC>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapLayeredread_long4_as_int4");
  int4 tmp = __surfCubemapLayeredread_long4_as_int4(surf, x, y, layerFace, mode);
  return make_long4((long int)tmp.x, (long int)tmp.y, (long int)tmp.z, (long int)tmp.w);
}

template<>
__declspec(__device__) __forceinline ulong4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint4 __surfCubemapLayeredread_ulong4_as_uint4(surface<void, 0xFC>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapLayeredread_ulong4_as_uint4");
  uint4 tmp = __surfCubemapLayeredread_ulong4_as_uint4(surf, x, y, layerFace, mode);
  return make_ulong4((unsigned long int)tmp.x, (unsigned long int)tmp.y, (unsigned long int)tmp.z, (unsigned long int)tmp.w);
}
#line 1199 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"

template<> __declspec(__device__) __declspec(__cudart_builtin__) float surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_float") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) float1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_float1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) float2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_float2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) float4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_float4") ;
#line 1205 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"









extern __declspec(__device__) __declspec(__device_builtin__) void __surf1Dwritec1(    uchar1 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dwritec1");
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1Dwritec2(    uchar2 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dwritec2");
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1Dwritec4(    uchar4 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dwritec4");
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1Dwrites1(   ushort1 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dwrites1");
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1Dwrites2(   ushort2 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dwrites2");
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1Dwrites4(   ushort4 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dwrites4");
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1Dwriteu1(     uint1 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dwriteu1");
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1Dwriteu2(     uint2 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dwriteu2");
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1Dwriteu4(     uint4 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dwriteu4");
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1Dwritel1(ulonglong1 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dwritel1");
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1Dwritel2(ulonglong2 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dwritel2");





#line 1231 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"

template<class T>
__declspec(__device__) __forceinline void surf1Dwrite(T val, surface<void, 0x01> surf, int x, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  union {
    T       val;
    uchar1  c1;
    ushort1 s1;
    uint1   u1;
    uint2   u2;
    uint4   u4;
  } tmp;
  
  tmp.val = val;
  
  (s ==  1) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1Dwritec1(tmp.c1, surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwritec1(tmp.c1, surf, x, cudaBoundaryModeClamp) : __surf1Dwritec1(tmp.c1, surf, x, cudaBoundaryModeTrap ))) :
  (s ==  2) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1Dwrites1(tmp.s1, surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwrites1(tmp.s1, surf, x, cudaBoundaryModeClamp) : __surf1Dwrites1(tmp.s1, surf, x, cudaBoundaryModeTrap ))) :
  (s ==  4) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1Dwriteu1(tmp.u1, surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwriteu1(tmp.u1, surf, x, cudaBoundaryModeClamp) : __surf1Dwriteu1(tmp.u1, surf, x, cudaBoundaryModeTrap ))) :
  (s ==  8) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1Dwriteu2(tmp.u2, surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwriteu2(tmp.u2, surf, x, cudaBoundaryModeClamp) : __surf1Dwriteu2(tmp.u2, surf, x, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1Dwriteu4(tmp.u4, surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwriteu4(tmp.u4, surf, x, cudaBoundaryModeClamp) : __surf1Dwriteu4(tmp.u4, surf, x, cudaBoundaryModeTrap ))) :
              (void)0;
#line 1254 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}

template<class T>
__declspec(__device__) __forceinline void surf1Dwrite(T val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  surf1Dwrite(val, surf, x, (int)sizeof(T), mode);
#line 1262 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}


__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(char val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_char") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(signed char val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(unsigned char val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(char1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(uchar1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(char2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(uchar2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(char4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(uchar4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_uchar4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(short val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(unsigned short val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(short1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(ushort1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(short2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(ushort2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(short4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(ushort4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_ushort4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(int val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(unsigned int val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(int1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(uint1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(int2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(uint2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(int4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(uint4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_uint4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(long long int val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_longlong") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(unsigned long long int val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_ulonglong") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(longlong1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_longlong1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(ulonglong1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_ulonglong1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(longlong2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_longlong2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(ulonglong2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_ulonglong2") ;

static __declspec(__device__) __forceinline void surf1Dwrite(long int val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf1Dwrite_long_as_int(int, surface<void, 0x01>, int, enum cudaSurfaceBoundaryMode) asm("__surf1Dwrite_long_as_int");
  __surf1Dwrite_long_as_int((int)val, surf, x, mode);
}

static __declspec(__device__) __forceinline void surf1Dwrite(unsigned long int val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf1Dwrite_ulong_as_uint(unsigned int, surface<void, 0x01>, int, enum cudaSurfaceBoundaryMode) asm("__surf1Dwrite_ulong_as_uint");
  __surf1Dwrite_ulong_as_uint((unsigned int)val, surf, x, mode);
}

static __declspec(__device__) __forceinline void surf1Dwrite(long1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf1Dwrite_long1_as_int1(int1, surface<void, 0x01>, int, enum cudaSurfaceBoundaryMode) asm("__surf1Dwrite_long1_as_int1");
  __surf1Dwrite_long1_as_int1(make_int1((int)val.x), surf, x, mode);
}

static __declspec(__device__) __forceinline void surf1Dwrite(ulong1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf1Dwrite_ulong1_as_uint1(uint1, surface<void, 0x01>, int, enum cudaSurfaceBoundaryMode) asm("__surf1Dwrite_ulong1_as_uint1");
  __surf1Dwrite_ulong1_as_uint1(make_uint1((unsigned int)val.x), surf, x, mode);
}

static __declspec(__device__) __forceinline void surf1Dwrite(long2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf1Dwrite_long2_as_int2(int2, surface<void, 0x01>, int, enum cudaSurfaceBoundaryMode) asm("__surf1Dwrite_long2_as_int2");
  __surf1Dwrite_long2_as_int2(make_int2((int)val.x, (int)val.y), surf, x, mode);
}

static __declspec(__device__) __forceinline void surf1Dwrite(ulong2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf1Dwrite_ulong2_as_uint2(uint2, surface<void, 0x01>, int, enum cudaSurfaceBoundaryMode) asm("__surf1Dwrite_ulong2_as_uint2");
  __surf1Dwrite_ulong2_as_uint2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, mode);
}

static __declspec(__device__) __forceinline void surf1Dwrite(long4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf1Dwrite_long4_as_int4(int4, surface<void, 0x01>, int, enum cudaSurfaceBoundaryMode) asm("__surf1Dwrite_long4_as_int4");
  __surf1Dwrite_long4_as_int4(make_int4((int)val.x, (int)val.y, (int)val.z, (int)val.w), surf, x, mode);
}

static __declspec(__device__) __forceinline void surf1Dwrite(ulong4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf1Dwrite_ulong4_as_uint4(uint4, surface<void, 0x01>, int, enum cudaSurfaceBoundaryMode) asm("__surf1Dwrite_ulong4_as_uint4");
  __surf1Dwrite_ulong4_as_uint4(make_uint4((unsigned)val.x, (unsigned)val.y, (unsigned)val.z, (unsigned)val.w), surf, x, mode);
}
#line 1345 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(float val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(float1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(float2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(float4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_float4") ;
#line 1350 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"









extern __declspec(__device__) __declspec(__device_builtin__) void __surf2Dwritec1(    uchar1 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dwritec1") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2Dwritec2(    uchar2 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dwritec2") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2Dwritec4(    uchar4 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dwritec4") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2Dwrites1(   ushort1 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dwrites1") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2Dwrites2(   ushort2 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dwrites2") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2Dwrites4(   ushort4 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dwrites4") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2Dwriteu1(     uint1 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dwriteu1") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2Dwriteu2(     uint2 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dwriteu2") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2Dwriteu4(     uint4 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dwriteu4") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2Dwritel1(ulonglong1 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dwritel1") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2Dwritel2(ulonglong2 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dwritel2") ;





#line 1376 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"

template<class T>
__declspec(__device__) __forceinline void surf2Dwrite(T val, surface<void, 0x02> surf, int x, int y, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  union {
    T       val;
    uchar1  c1;
    ushort1 s1;
    uint1   u1;
    uint2   u2;
    uint4   u4;
  } tmp;
  
  tmp.val = val;
  
  (s ==  1) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2Dwritec1(tmp.c1, surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwritec1(tmp.c1, surf, x, y, cudaBoundaryModeClamp) : __surf2Dwritec1(tmp.c1, surf, x, y, cudaBoundaryModeTrap ))) :
  (s ==  2) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2Dwrites1(tmp.s1, surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwrites1(tmp.s1, surf, x, y, cudaBoundaryModeClamp) : __surf2Dwrites1(tmp.s1, surf, x, y, cudaBoundaryModeTrap ))) :
  (s ==  4) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2Dwriteu1(tmp.u1, surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwriteu1(tmp.u1, surf, x, y, cudaBoundaryModeClamp) : __surf2Dwriteu1(tmp.u1, surf, x, y, cudaBoundaryModeTrap ))) :
  (s ==  8) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2Dwriteu2(tmp.u2, surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwriteu2(tmp.u2, surf, x, y, cudaBoundaryModeClamp) : __surf2Dwriteu2(tmp.u2, surf, x, y, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2Dwriteu4(tmp.u4, surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwriteu4(tmp.u4, surf, x, y, cudaBoundaryModeClamp) : __surf2Dwriteu4(tmp.u4, surf, x, y, cudaBoundaryModeTrap ))) :
              (void)0;
#line 1399 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}

template<class T>
__declspec(__device__) __forceinline  void surf2Dwrite(T val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  surf2Dwrite(val, surf, x, y, (int)sizeof(T), mode);
#line 1407 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}

__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(char val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_char") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(signed char val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(unsigned char val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(char1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(uchar1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(char2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(uchar2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(char4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(uchar4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_uchar4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(short val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(unsigned short val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(short1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(ushort1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(short2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(ushort2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(short4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(ushort4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_ushort4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(int val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(unsigned int val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(int1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(uint1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(int2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(uint2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(int4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(uint4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_uint4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(long long int val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_longlong") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(unsigned long long int val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_ulonglong") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(longlong1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_longlong1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(ulonglong1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_ulonglong1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(longlong2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_longlong2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(ulonglong2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_ulonglong2") ;

static __declspec(__device__) __forceinline void surf2Dwrite(long int val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf2Dwrite_long_as_int(int, surface<void, 0x02>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2Dwrite_long_as_int");
  __surf2Dwrite_long_as_int((int)val, surf, x, y, mode);
}

static __declspec(__device__) __forceinline void surf2Dwrite(unsigned long int val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf2Dwrite_ulong_as_uint(unsigned int, surface<void, 0x02>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2Dwrite_ulong_as_uint");
  __surf2Dwrite_ulong_as_uint((unsigned int)val, surf, x, y, mode);
}

static __declspec(__device__) __forceinline void surf2Dwrite(long1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf2Dwrite_long1_as_int1(int1, surface<void, 0x02>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2Dwrite_long1_as_int1");
  __surf2Dwrite_long1_as_int1(make_int1((int)val.x), surf, x, y, mode);
}

static __declspec(__device__) __forceinline void surf2Dwrite(ulong1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf2Dwrite_ulong1_as_uint1(uint1, surface<void, 0x02>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2Dwrite_ulong1_as_uint1");
  __surf2Dwrite_ulong1_as_uint1(make_uint1((unsigned int)val.x), surf, x, y, mode);
}

static __declspec(__device__) __forceinline void surf2Dwrite(long2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf2Dwrite_long2_as_int2(int2, surface<void, 0x02>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2Dwrite_long2_as_int2");
  __surf2Dwrite_long2_as_int2(make_int2((int)val.x, (int)val.y), surf, x, y, mode);
}

static __declspec(__device__) __forceinline void surf2Dwrite(ulong2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf2Dwrite_ulong2_as_uint2(uint2, surface<void, 0x02>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2Dwrite_ulong2_as_uint2");
  __surf2Dwrite_ulong2_as_uint2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, mode);
}

static __declspec(__device__) __forceinline void surf2Dwrite(long4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf2Dwrite_long4_as_int4(int4, surface<void, 0x02>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2Dwrite_long4_as_int4");
  __surf2Dwrite_long4_as_int4(make_int4((int)val.x, (int)val.y, (int)val.z, (int)val.w), surf, x, y, mode);
}

static __declspec(__device__) __forceinline void surf2Dwrite(ulong4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf2Dwrite_ulong4_as_uint4(uint4, surface<void, 0x02>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2Dwrite_ulong4_as_uint4");
  __surf2Dwrite_ulong4_as_uint4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, mode);
}
#line 1489 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(float val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(float1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(float2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(float4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_float4") ;
#line 1494 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"








extern __declspec(__device__) __declspec(__device_builtin__) void __surf3Dwritec1(    uchar1 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dwritec1") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf3Dwritec2(    uchar2 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dwritec2") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf3Dwritec4(    uchar4 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dwritec4") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf3Dwrites1(   ushort1 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dwrites1") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf3Dwrites2(   ushort2 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dwrites2") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf3Dwrites4(   ushort4 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dwrites4") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf3Dwriteu1(     uint1 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dwriteu1") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf3Dwriteu2(     uint2 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dwriteu2") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf3Dwriteu4(     uint4 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dwriteu4") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf3Dwritel1(ulonglong1 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dwritel1") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf3Dwritel2(ulonglong2 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dwritel2") ;





#line 1519 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"

template<class T>
__declspec(__device__) __forceinline void surf3Dwrite(T val, surface<void, 0x03> surf, int x, int y, int z, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  union {
    T       val;
    uchar1  c1;
    ushort1 s1;
    uint1   u1;
    uint2   u2;
    uint4   u4;
  } tmp;
  
  tmp.val = val;
  
  (s ==  1) ? (void)(((mode == cudaBoundaryModeZero) ? __surf3Dwritec1(tmp.c1, surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwritec1(tmp.c1, surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwritec1(tmp.c1, surf, x, y, z, cudaBoundaryModeTrap ))) :
  (s ==  2) ? (void)(((mode == cudaBoundaryModeZero) ? __surf3Dwrites1(tmp.s1, surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwrites1(tmp.s1, surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwrites1(tmp.s1, surf, x, y, z, cudaBoundaryModeTrap ))) :
  (s ==  4) ? (void)(((mode == cudaBoundaryModeZero) ? __surf3Dwriteu1(tmp.u1, surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwriteu1(tmp.u1, surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwriteu1(tmp.u1, surf, x, y, z, cudaBoundaryModeTrap ))) :
  (s ==  8) ? (void)(((mode == cudaBoundaryModeZero) ? __surf3Dwriteu2(tmp.u2, surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwriteu2(tmp.u2, surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwriteu2(tmp.u2, surf, x, y, z, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(((mode == cudaBoundaryModeZero) ? __surf3Dwriteu4(tmp.u4, surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwriteu4(tmp.u4, surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwriteu4(tmp.u4, surf, x, y, z, cudaBoundaryModeTrap ))) :
              (void)0;
#line 1542 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}

template<class T>
__declspec(__device__) __forceinline void surf3Dwrite(T val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  surf3Dwrite(val, surf, x, y, z, (int)sizeof(T), mode);
#line 1550 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}


__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(char val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_char") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(signed char val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(unsigned char val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(char1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(uchar1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(char2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(uchar2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(char4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(uchar4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_uchar4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(short val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(unsigned short val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(short1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(ushort1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(short2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(ushort2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(short4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(ushort4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_ushort4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(int val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(unsigned int val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(int1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(uint1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(int2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(uint2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(int4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(uint4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_uint4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(long long int val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_longlong") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(unsigned long long int val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_ulonglong") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(longlong1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_longlong1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(ulonglong1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_ulonglong1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(longlong2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_longlong2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(ulonglong2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_ulonglong2") ;

static __declspec(__device__) __forceinline void surf3Dwrite(long int val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf3Dwrite_long_as_int(int, surface<void, 0x03>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf3Dwrite_long_as_int");
  __surf3Dwrite_long_as_int((int)val, surf, x, y, z, mode);
}

static __declspec(__device__) __forceinline void surf3Dwrite(unsigned long int val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf3Dwrite_ulong_as_uint(unsigned int, surface<void, 0x03>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf3Dwrite_ulong_as_uint");
  __surf3Dwrite_ulong_as_uint((unsigned int)val, surf, x, y, z, mode);
}

static __declspec(__device__) __forceinline void surf3Dwrite(long1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf3Dwrite_long1_as_int1(int1, surface<void, 0x03>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf3Dwrite_long1_as_int1");
  __surf3Dwrite_long1_as_int1(make_int1((int)val.x), surf, x, y, z, mode);
}

static __declspec(__device__) __forceinline void surf3Dwrite(ulong1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf3Dwrite_ulong1_as_uint1(uint1, surface<void, 0x03>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf3Dwrite_ulong1_as_uint1");
  __surf3Dwrite_ulong1_as_uint1(make_uint1((unsigned int)val.x), surf, x, y, z, mode);
}

static __declspec(__device__) __forceinline void surf3Dwrite(long2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf3Dwrite_long2_as_int2(int2, surface<void, 0x03>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf3Dwrite_long2_as_int2");
  __surf3Dwrite_long2_as_int2(make_int2((int)val.x, (int)val.y), surf, x, y, z, mode);
}

static __declspec(__device__) __forceinline void surf3Dwrite(ulong2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf3Dwrite_ulong2_as_uint2(uint2, surface<void, 0x03>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf3Dwrite_ulong2_as_uint2");
  __surf3Dwrite_ulong2_as_uint2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, z, mode);
}

static __declspec(__device__) __forceinline void surf3Dwrite(long4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf3Dwrite_long4_as_int4(int4, surface<void, 0x03>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf3Dwrite_long4_as_int4");
  __surf3Dwrite_long4_as_int4(make_int4((int)val.x, (int)val.y, (int)val.z, (int)val.w), surf, x, y, z, mode);
}

static __declspec(__device__) __forceinline void surf3Dwrite(ulong4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf3Dwrite_ulong4_as_uint4(uint4, surface<void, 0x03>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf3Dwrite_ulong4_as_uint4");
  __surf3Dwrite_ulong4_as_uint4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, z, mode);
}
#line 1633 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(float val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(float1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(float2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(float4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_float4") ;
#line 1638 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"









extern __declspec(__device__) __declspec(__device_builtin__) void __surf1DLayeredwritec1(    uchar1 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredwritec1") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1DLayeredwritec2(    uchar2 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredwritec2") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1DLayeredwritec4(    uchar4 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredwritec4") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1DLayeredwrites1(   ushort1 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredwrites1") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1DLayeredwrites2(   ushort2 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredwrites2") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1DLayeredwrites4(   ushort4 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredwrites4") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1DLayeredwriteu1(     uint1 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredwriteu1") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1DLayeredwriteu2(     uint2 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredwriteu2") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1DLayeredwriteu4(     uint4 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredwriteu4") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1DLayeredwritel1(ulonglong1 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredwritel1") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1DLayeredwritel2(ulonglong2 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredwritel2") ;






#line 1665 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"

template<class T>
static __declspec(__device__) __forceinline void surf1DLayeredwrite(T val, surface<void, 0xF1> surf, int x, int layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  union {
    T       val;
    uchar1  c1;
    ushort1 s1;
    uint1   u1;
    uint2   u2;
    uint4   u4;
  } tmp;
  
  tmp.val = val;
  
  (s ==  1) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1DLayeredwritec1(tmp.c1, surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwritec1(tmp.c1, surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwritec1(tmp.c1, surf, x, layer, cudaBoundaryModeTrap ))) :
  (s ==  2) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1DLayeredwrites1(tmp.s1, surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwrites1(tmp.s1, surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwrites1(tmp.s1, surf, x, layer, cudaBoundaryModeTrap ))) :
  (s ==  4) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1DLayeredwriteu1(tmp.u1, surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwriteu1(tmp.u1, surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwriteu1(tmp.u1, surf, x, layer, cudaBoundaryModeTrap ))) :
  (s ==  8) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1DLayeredwriteu2(tmp.u2, surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwriteu2(tmp.u2, surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwriteu2(tmp.u2, surf, x, layer, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1DLayeredwriteu4(tmp.u4, surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwriteu4(tmp.u4, surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwriteu4(tmp.u4, surf, x, layer, cudaBoundaryModeTrap ))) :
              (void)0;
#line 1688 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}

template<class T>
static __declspec(__device__) __forceinline void surf1DLayeredwrite(T val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  surf1DLayeredwrite(val, surf, x, layer, (int)sizeof(T), mode);
#line 1696 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}


__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(char val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_char") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(signed char val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(unsigned char val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(char1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(uchar1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(char2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(uchar2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(char4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(uchar4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_uchar4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(short val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(unsigned short val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(short1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(ushort1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(short2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(ushort2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(short4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(ushort4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_ushort4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(int val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(unsigned int val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(int1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(uint1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(int2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(uint2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(int4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(uint4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_uint4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(long long int val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_longlong") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(unsigned long long int val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_ulonglong") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(longlong1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_longlong1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(ulonglong1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_ulonglong1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(longlong2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_longlong2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(ulonglong2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_ulonglong2") ;

static __declspec(__device__) __forceinline void surf1DLayeredwrite(long int val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf1DLayeredwrite_long_as_int(int, surface<void, 0xF1>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf1DLayeredwrite_long_as_int");
  __surf1DLayeredwrite_long_as_int((int)val, surf, x, layer, mode);
}

static __declspec(__device__) __forceinline void surf1DLayeredwrite(unsigned long int val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf1DLayeredwrite_ulong_as_uint(unsigned int, surface<void, 0xF1>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf1DLayeredwrite_ulong_as_uint");
  __surf1DLayeredwrite_ulong_as_uint((unsigned int)val, surf, x, layer, mode);
}

static __declspec(__device__) __forceinline void surf1DLayeredwrite(long1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf1DLayeredwrite_long1_as_int1(int1, surface<void, 0xF1>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf1DLayeredwrite_long1_as_int1");
  __surf1DLayeredwrite_long1_as_int1(make_int1((int)val.x), surf, x, layer, mode);
}

static __declspec(__device__) __forceinline void surf1DLayeredwrite(ulong1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf1DLayeredwrite_ulong1_as_uint1(uint1, surface<void, 0xF1>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf1DLayeredwrite_ulong1_as_uint1");
  __surf1DLayeredwrite_ulong1_as_uint1(make_uint1((unsigned int)val.x), surf, x, layer, mode);
}

static __declspec(__device__) __forceinline void surf1DLayeredwrite(long2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf1DLayeredwrite_long2_as_int2(int2, surface<void, 0xF1>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf1DLayeredwrite_long2_as_int2");
  __surf1DLayeredwrite_long2_as_int2(make_int2((int)val.x, (int)val.y), surf, x, layer, mode);
}

static __declspec(__device__) __forceinline void surf1DLayeredwrite(ulong2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf1DLayeredwrite_ulong2_as_uint2(uint2, surface<void, 0xF1>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf1DLayeredwrite_ulong2_as_uint2");
  __surf1DLayeredwrite_ulong2_as_uint2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, layer, mode);
}

static __declspec(__device__) __forceinline void surf1DLayeredwrite(long4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf1DLayeredwrite_long4_as_int4(int4, surface<void, 0xF1>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf1DLayeredwrite_long4_as_int4");
  __surf1DLayeredwrite_long4_as_int4(make_int4((int)val.x, (int)val.y, (int)val.z, (int)val.w), surf, x, layer, mode);
}

static __declspec(__device__) __forceinline void surf1DLayeredwrite(ulong4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf1DLayeredwrite_ulong4_as_uint4(uint4, surface<void, 0xF1>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf1DLayeredwrite_ulong4_as_uint4");
  __surf1DLayeredwrite_ulong4_as_uint4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, layer, mode);
}
#line 1779 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(float val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(float1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(float2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(float4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_float4") ;
#line 1784 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"








template <typename T>
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2DLayeredwritec1(    uchar1 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)  ;
template <typename T>
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2DLayeredwritec2(    uchar2 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)  ;
template <typename T>
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2DLayeredwritec4(    uchar4 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)  ;
template <typename T>
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2DLayeredwrites1(   ushort1 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)  ;
template <typename T>
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2DLayeredwrites2(   ushort2 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)  ;
template <typename T>
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2DLayeredwrites4(   ushort4 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)  ;
template <typename T>
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2DLayeredwriteu1(     uint1 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)  ;
template <typename T>
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2DLayeredwriteu2(     uint2 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)  ;
template <typename T>
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2DLayeredwriteu4(     uint4 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)  ;
template <typename T>
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2DLayeredwritel1(ulonglong1 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)  ;
template <typename T>
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2DLayeredwritel2(ulonglong2 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)  ;






#line 1821 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"

template<class T>
 __declspec(__device__) __forceinline void surf2DLayeredwrite(T val, surface<void, 0xF2> surf, int x, int y, int layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  union {
    T       val;
    uchar1  c1;
    ushort1 s1;
    uint1   u1;
    uint2   u2;
    uint4   u4;
  } tmp;
  
  tmp.val = val;
  
  (s ==  1) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritec1(tmp.c1, surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritec1(tmp.c1, surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwritec1(tmp.c1, surf, x, y, layer, cudaBoundaryModeTrap ))) :
  (s ==  2) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwrites1(tmp.s1, surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwrites1(tmp.s1, surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwrites1(tmp.s1, surf, x, y, layer, cudaBoundaryModeTrap ))) :
  (s ==  4) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu1(tmp.u1, surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu1(tmp.u1, surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwriteu1(tmp.u1, surf, x, y, layer, cudaBoundaryModeTrap ))) :
  (s ==  8) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu2(tmp.u2, surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu2(tmp.u2, surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwriteu2(tmp.u2, surf, x, y, layer, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu4(tmp.u4, surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu4(tmp.u4, surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwriteu4(tmp.u4, surf, x, y, layer, cudaBoundaryModeTrap ))) :
              (void)0;
#line 1844 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}

template<class T>
__declspec(__device__) __forceinline void surf2DLayeredwrite(T val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  surf2DLayeredwrite(val, surf, x, y, layer, (int)sizeof(T), mode);
#line 1852 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}


__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(char val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_char") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(signed char val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(unsigned char val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(char1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(uchar1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(char2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(uchar2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(char4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(uchar4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_uchar4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(short val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(unsigned short val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(short1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(ushort1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(short2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(ushort2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(short4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(ushort4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_ushort4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(int val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(unsigned int val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(int1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(uint1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(int2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(uint2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(int4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(uint4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_uint4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(long long int val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_longlong") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(unsigned long long int val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_ulonglong") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(longlong1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_longlong1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(ulonglong1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_ulonglong1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(longlong2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_longlong2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(ulonglong2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_ulonglong2") ;

static __declspec(__device__) __forceinline void surf2DLayeredwrite(long int val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf2DLayeredwrite_long_as_int(int, surface<void, 0xF2>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2DLayeredwrite_long_as_int");
  __surf2DLayeredwrite_long_as_int((int)val, surf, x, y, layer, mode);
}

static __declspec(__device__) __forceinline void surf2DLayeredwrite(unsigned long int val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf2DLayeredwrite_ulong_as_uint(int, surface<void, 0xF2>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2DLayeredwrite_ulong_as_uint");
  __surf2DLayeredwrite_ulong_as_uint((unsigned int)val, surf, x, y, layer, mode);
}

static __declspec(__device__) __forceinline void surf2DLayeredwrite(long1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf2DLayeredwrite_long1_as_int1(int1, surface<void, 0xF2>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2DLayeredwrite_long1_as_int1");
  __surf2DLayeredwrite_long1_as_int1(make_int1((int)val.x), surf, x, y, layer, mode);
}

static __declspec(__device__) __forceinline void surf2DLayeredwrite(ulong1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf2DLayeredwrite_ulong1_as_uint1(uint1, surface<void, 0xF2>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2DLayeredwrite_ulong1_as_uint1");
  __surf2DLayeredwrite_ulong1_as_uint1(make_uint1((unsigned int)val.x), surf, x, y, layer, mode);
}

static __declspec(__device__) __forceinline void surf2DLayeredwrite(long2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf2DLayeredwrite_long2_as_int2(int2, surface<void, 0xF2>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2DLayeredwrite_long2_as_int2");
  __surf2DLayeredwrite_long2_as_int2(make_int2((int)val.x, (int)val.y), surf, x, y, layer, mode);
}

static __declspec(__device__) __forceinline void surf2DLayeredwrite(ulong2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf2DLayeredwrite_ulong2_as_uint2(uint2, surface<void, 0xF2>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2DLayeredwrite_ulong2_as_uint2");
  __surf2DLayeredwrite_ulong2_as_uint2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, layer, mode);
}

static __declspec(__device__) __forceinline void surf2DLayeredwrite(long4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf2DLayeredwrite_long4_as_int4(int4, surface<void, 0xF2>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2DLayeredwrite_long4_as_int4");
  __surf2DLayeredwrite_long4_as_int4(make_int4((int)val.x, (int)val.y, (int)val.z, (int)val.w), surf, x, y, layer, mode);
}

static __declspec(__device__) __forceinline void surf2DLayeredwrite(ulong4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf2DLayeredwrite_ulong4_as_uint4(uint4, surface<void, 0xF2>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2DLayeredwrite_ulong4_as_uint4");
  __surf2DLayeredwrite_ulong4_as_uint4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, layer, mode);
}

#line 1936 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(float val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(float1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(float2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(float4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_float4") ;
#line 1941 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"















#line 1957 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"

template<class T>
__declspec(__device__) __forceinline void surfCubemapwrite(T val, surface<void, 0x0C> surf, int x, int y, int face, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  union {
    T       val;
    uchar1  c1;
    ushort1 s1;
    uint1   u1;
    uint2   u2;
    uint4   u4;
  } tmp;
  
  tmp.val = val;
  
  (s ==  1) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritec1(tmp.c1, surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritec1(tmp.c1, surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwritec1(tmp.c1, surf, x, y, face, cudaBoundaryModeTrap ))) :
  (s ==  2) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwrites1(tmp.s1, surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwrites1(tmp.s1, surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwrites1(tmp.s1, surf, x, y, face, cudaBoundaryModeTrap ))) :
  (s ==  4) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu1(tmp.u1, surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu1(tmp.u1, surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwriteu1(tmp.u1, surf, x, y, face, cudaBoundaryModeTrap ))) :
  (s ==  8) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu2(tmp.u2, surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu2(tmp.u2, surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwriteu2(tmp.u2, surf, x, y, face, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu4(tmp.u4, surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu4(tmp.u4, surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwriteu4(tmp.u4, surf, x, y, face, cudaBoundaryModeTrap ))) :
              (void)0;
#line 1980 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}

template<class T>
__declspec(__device__) __forceinline void surfCubemapwrite(T val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  surfCubemapwrite(val, surf, x, y, face, (int)sizeof(T), mode);
#line 1988 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}


__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(char val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_char") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(signed char val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(unsigned char val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(char1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(uchar1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(char2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(uchar2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(char4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(uchar4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_uchar4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(short val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(unsigned short val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(short1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(ushort1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(short2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(ushort2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(short4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(ushort4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_ushort4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(int val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(unsigned int val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(int1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(uint1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(int2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(uint2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(int4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(uint4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_uint4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(long long int val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_longlong") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(unsigned long long int val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_ulonglong") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(longlong1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_longlong1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(ulonglong1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_ulonglong1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(longlong2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_longlong2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(ulonglong2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_ulonglong2") ;

static __declspec(__device__) __forceinline void surfCubemapwrite(long int val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surfCubemapwrite_long_as_int(int, surface<void, 0x0C>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapwrite_long_as_int");
  __surfCubemapwrite_long_as_int((int)val, surf, x, y, face, mode);
}

static __declspec(__device__) __forceinline void surfCubemapwrite(unsigned long int val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surfCubemapwrite_ulong_as_uint(unsigned int, surface<void, 0x0C>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapwrite_ulong_as_uint");
  __surfCubemapwrite_ulong_as_uint((unsigned int)val, surf, x, y, face, mode);
}

static __declspec(__device__) __forceinline void surfCubemapwrite(long1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surfCubemapwrite_long1_as_int1(int1, surface<void, 0x0C>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapwrite_long1_as_int1");
  __surfCubemapwrite_long1_as_int1(make_int1((int)val.x), surf, x, y, face, mode);
}

static __declspec(__device__) __forceinline void surfCubemapwrite(ulong1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surfCubemapwrite_ulong1_as_uint1(uint1, surface<void, 0x0C>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapwrite_ulong1_as_uint1");
  __surfCubemapwrite_ulong1_as_uint1(make_uint1((unsigned int)val.x), surf, x, y, face, mode);
}

static __declspec(__device__) __forceinline void surfCubemapwrite(long2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surfCubemapwrite_long2_as_int2(int2, surface<void, 0x0C>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapwrite_long2_as_int2");
  __surfCubemapwrite_long2_as_int2(make_int2((int)val.x, (int)val.y), surf, x, y, face, mode);
}

static __declspec(__device__) __forceinline void surfCubemapwrite(ulong2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surfCubemapwrite_ulong2_as_uint2(uint2, surface<void, 0x0C>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapwrite_ulong2_as_uint2");
  __surfCubemapwrite_ulong2_as_uint2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, face, mode);
}

static __declspec(__device__) __forceinline void surfCubemapwrite(long4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surfCubemapwrite_long4_as_int4(int4, surface<void, 0x0C>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapwrite_long4_as_int4");
  __surfCubemapwrite_long4_as_int4(make_int4((int)val.x, (int)val.y, (int)val.z, (int)val.w), surf, x, y, face, mode);
}

static __declspec(__device__) __forceinline void surfCubemapwrite(ulong4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surfCubemapwrite_ulong4_as_uint4(uint4, surface<void, 0x0C>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapwrite_ulong4_as_uint4");
  __surfCubemapwrite_ulong4_as_uint4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, face, mode);
}
#line 2071 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(float val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(float1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(float2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(float4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_float4") ;
#line 2076 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"















#line 2092 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"

template<class T>
static __declspec(__device__) __forceinline void surfCubemapLayeredwrite(T val, surface<void, 0xFC> surf, int x, int y, int layerFace, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  union {
    T       val;
    uchar1  c1;
    ushort1 s1;
    uint1   u1;
    uint2   u2;
    uint4   u4;
  } tmp;
  
  tmp.val = val;
  
  (s ==  1) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritec1(tmp.c1, surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritec1(tmp.c1, surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwritec1(tmp.c1, surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
  (s ==  2) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwrites1(tmp.s1, surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwrites1(tmp.s1, surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwrites1(tmp.s1, surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
  (s ==  4) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu1(tmp.u1, surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu1(tmp.u1, surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwriteu1(tmp.u1, surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
  (s ==  8) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu2(tmp.u2, surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu2(tmp.u2, surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwriteu2(tmp.u2, surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu4(tmp.u4, surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu4(tmp.u4, surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwriteu4(tmp.u4, surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
              (void)0;
#line 2115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}

template<class T>
static __declspec(__device__) __forceinline void surfCubemapLayeredwrite(T val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  surfCubemapLayeredwrite(val, surf, x, y, layerFace, (int)sizeof(T), mode);
#line 2123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}


__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(char val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_char") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(signed char val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(unsigned char val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(char1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(uchar1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(char2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(uchar2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(char4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(uchar4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_uchar4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(short val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(unsigned short val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(short1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(ushort1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(short2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(ushort2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(short4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(ushort4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_ushort4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(int val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(unsigned int val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(int1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(uint1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(int2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(uint2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(int4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(uint4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_uint4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(long long int val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_longlong") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(unsigned long long int val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_ulonglong") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(longlong1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_longlong1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(ulonglong1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_ulonglong1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(longlong2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_longlong2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(ulonglong2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_ulonglong2") ;

static __declspec(__device__) __forceinline void surfCubemapLayeredwrite(long int val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surfCubemapLayeredwrite_long_as_int(int, surface<void, 0xFC>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapLayeredwrite_long_as_int");
  __surfCubemapLayeredwrite_long_as_int((int)val, surf, x, y, layerFace, mode);
}

static __declspec(__device__) __forceinline void surfCubemapLayeredwrite(unsigned long int val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surfCubemapLayeredwrite_ulong_as_uint(unsigned int, surface<void, 0xFC>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapLayeredwrite_ulong_as_uint");
  __surfCubemapLayeredwrite_ulong_as_uint((unsigned int)val, surf, x, y, layerFace, mode);
}

static __declspec(__device__) __forceinline void surfCubemapLayeredwrite(long1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surfCubemapLayeredwrite_long1_as_int1(int1, surface<void, 0xFC>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapLayeredwrite_long1_as_int1");
  __surfCubemapLayeredwrite_long1_as_int1(make_int1((int)val.x), surf, x, y, layerFace, mode);
}

static __declspec(__device__) __forceinline void surfCubemapLayeredwrite(ulong1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surfCubemapLayeredwrite_ulong1_as_uint1(uint1, surface<void, 0xFC>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapLayeredwrite_ulong1_as_uint1");
  __surfCubemapLayeredwrite_ulong1_as_uint1(make_uint1((unsigned int)val.x), surf, x, y, layerFace, mode);
}

static __declspec(__device__) __forceinline void surfCubemapLayeredwrite(long2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surfCubemapLayeredwrite_long2_as_int2(int2, surface<void, 0xFC>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapLayeredwrite_long2_as_int2");
  __surfCubemapLayeredwrite_long2_as_int2(make_int2((int)val.x, (int)val.y), surf, x, y, layerFace, mode);
}

static __declspec(__device__) __forceinline void surfCubemapLayeredwrite(ulong2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surfCubemapLayeredwrite_ulong2_as_uint2(uint2, surface<void, 0xFC>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapLayeredwrite_ulong2_as_uint2");
  __surfCubemapLayeredwrite_ulong2_as_uint2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, layerFace, mode);
}

static __declspec(__device__) __forceinline void surfCubemapLayeredwrite(long4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surfCubemapLayeredwrite_long4_as_int4(int4, surface<void, 0xFC>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapLayeredwrite_long4_as_int4");
  __surfCubemapLayeredwrite_long4_as_int4(make_int4((int)val.x, (int)val.y, (int)val.z, (int)val.w), surf, x, y, layerFace, mode);
}

static __declspec(__device__) __forceinline void surfCubemapLayeredwrite(ulong4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surfCubemapLayeredwrite_ulong4_as_uint4(uint4, surface<void, 0xFC>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapLayeredwrite_ulong4_as_uint4");
  __surfCubemapLayeredwrite_ulong4_as_uint4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, layerFace, mode);
}
#line 2206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(float val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(float1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(float2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(float4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_float4") ;
#line 2211 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"























































































































#line 2331 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 2332 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"

#line 4526 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"





























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"















































































































#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 66 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.h"


















































































































































































#line 180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.h"
#line 67 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"































#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) char tex1Dfetch(texture<char, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_char_as_schar") ;
#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) signed char tex1Dfetch(texture<signed char, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned char tex1Dfetch(texture<unsigned char, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) char1 tex1Dfetch(texture<char1, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar1 tex1Dfetch(texture<uchar1, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) char2 tex1Dfetch(texture<char2, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar2 tex1Dfetch(texture<uchar2, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 tex1Dfetch(texture<char4, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 tex1Dfetch(texture<uchar4, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) short tex1Dfetch(texture<short, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned short tex1Dfetch(texture<unsigned short, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) short1 tex1Dfetch(texture<short1, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort1 tex1Dfetch(texture<ushort1, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) short2 tex1Dfetch(texture<short2, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort2 tex1Dfetch(texture<ushort2, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 tex1Dfetch(texture<short4, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 tex1Dfetch(texture<ushort4, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_ushort4") ;

__declspec(__device__) __declspec(__cudart_builtin__) int tex1Dfetch(texture<int, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned int tex1Dfetch(texture<unsigned int, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) int1 tex1Dfetch(texture<int1, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint1 tex1Dfetch(texture<uint1, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) int2 tex1Dfetch(texture<int2, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint2 tex1Dfetch(texture<uint2, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 tex1Dfetch(texture<int4, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 tex1Dfetch(texture<uint4, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_uint4") ;

static __declspec(__device__) __forceinline long tex1Dfetch(texture<long, 0x01, cudaReadModeElementType> t, int x)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int __tex1Dfetch_long_as_int(texture<long, 0x01, cudaReadModeElementType>, int) asm("__tex1Dfetch_long_as_int");
  return __tex1Dfetch_long_as_int(t, x);
}

static __declspec(__device__) __forceinline unsigned long tex1Dfetch(texture<unsigned long, 0x01, cudaReadModeElementType> t, int x)
{
  __declspec(__device__) __declspec(__cudart_builtin__) unsigned __tex1Dfetch_ulong_as_uint(texture<unsigned long, 0x01, cudaReadModeElementType>, int) asm("__tex1Dfetch_ulong_as_uint");
  return __tex1Dfetch_ulong_as_uint(t, x);
}

static __declspec(__device__) __forceinline long1 tex1Dfetch(texture<long1, 0x01, cudaReadModeElementType> t, int x)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int1  __tex1Dfetch_long1_as_int1(texture<long1, 0x01, cudaReadModeElementType>, int) asm("__tex1Dfetch_long1_as_int1");
  int1 v = __tex1Dfetch_long1_as_int1(t, x);
  return make_long1(v.x);
}

static __declspec(__device__) __forceinline ulong1 tex1Dfetch(texture<ulong1, 0x01, cudaReadModeElementType> t, int x)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint1  __tex1Dfetch_ulong1_as_uint1(texture<ulong1, 0x01, cudaReadModeElementType>, int) asm("__tex1Dfetch_ulong1_as_uint1");
  uint1 v = __tex1Dfetch_ulong1_as_uint1(t, x);
  return make_ulong1(v.x);
}

static __declspec(__device__) __forceinline long2 tex1Dfetch(texture<long2, 0x01, cudaReadModeElementType> t, int x)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int2  __tex1Dfetch_long2_as_int2(texture<long2, 0x01, cudaReadModeElementType>, int) asm("__tex1Dfetch_long2_as_int2");
  int2 v = __tex1Dfetch_long2_as_int2(t, x);
  return make_long2(v.x, v.y);
}

static __declspec(__device__) __forceinline ulong2 tex1Dfetch(texture<ulong2, 0x01, cudaReadModeElementType> t, int x)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint2  __tex1Dfetch_ulong2_as_uint2(texture<ulong2, 0x01, cudaReadModeElementType>, int) asm("__tex1Dfetch_ulong2_as_uint2");
  uint2 v = __tex1Dfetch_ulong2_as_uint2(t, x);
  return make_ulong2(v.x, v.y);
}

static __declspec(__device__) __forceinline long4 tex1Dfetch(texture<long4, 0x01, cudaReadModeElementType> t, int x)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int4  __tex1Dfetch_long4_as_int4(texture<long4, 0x01, cudaReadModeElementType>, int) asm("__tex1Dfetch_long4_as_int4");
  int4 v = __tex1Dfetch_long4_as_int4(t, x);
  return make_long4(v.x, v.y, v.z, v.w);
}

static __declspec(__device__) __forceinline ulong4 tex1Dfetch(texture<ulong4, 0x01, cudaReadModeElementType> t, int x)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint4  __tex1Dfetch_ulong4_as_uint4(texture<ulong4, 0x01, cudaReadModeElementType>, int) asm("__tex1Dfetch_ulong4_as_uint4");
  uint4 v = __tex1Dfetch_ulong4_as_uint4(t, x);
  return make_ulong4(v.x, v.y, v.z, v.w);
}
#line 183 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex1Dfetch(texture<float, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1Dfetch(texture<float1, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1Dfetch(texture<float2, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1Dfetch(texture<float4, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_float4") ;




#line 192 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex1Dfetch(texture<char, 0x01, cudaReadModeNormalizedFloat> t, int x)  asm("__tex1Dfetch_rmnf_char_as_schar") ;
#line 194 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex1Dfetch(texture<signed char, 0x01, cudaReadModeNormalizedFloat> t, int x)  asm("__tex1Dfetch_rmnf_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex1Dfetch(texture<unsigned char, 0x01, cudaReadModeNormalizedFloat> t, int x)  asm("__tex1Dfetch_rmnf_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1Dfetch(texture<char1, 0x01, cudaReadModeNormalizedFloat> t, int x)  asm("__tex1Dfetch_rmnf_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1Dfetch(texture<uchar1, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1Dfetch(texture<char2, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1Dfetch(texture<uchar2, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1Dfetch(texture<char4, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_char4") ;

__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1Dfetch(texture<uchar4, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_uchar4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex1Dfetch(texture<short, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex1Dfetch(texture<unsigned short, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1Dfetch(texture<short1, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1Dfetch(texture<ushort1, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1Dfetch(texture<short2, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1Dfetch(texture<ushort2, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1Dfetch(texture<short4, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1Dfetch(texture<ushort4, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_ushort4") ;
#line 212 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"











#line 224 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) char tex1D(texture<char, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_char_as_schar") ;
#line 226 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) signed char tex1D(texture<signed char, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned char tex1D(texture<unsigned char, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) char1 tex1D(texture<char1, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar1 tex1D(texture<uchar1, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) char2 tex1D(texture<char2, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar2 tex1D(texture<uchar2, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 tex1D(texture<char4, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 tex1D(texture<uchar4, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) short tex1D(texture<short, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned short tex1D(texture<unsigned short, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) short1 tex1D(texture<short1, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort1 tex1D(texture<ushort1, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) short2 tex1D(texture<short2, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort2 tex1D(texture<ushort2, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 tex1D(texture<short4, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 tex1D(texture<ushort4, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_ushort4") ;


__declspec(__device__) __declspec(__cudart_builtin__) int tex1D(texture<int, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned int tex1D(texture<unsigned int, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) int1 tex1D(texture<int1, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint1 tex1D(texture<uint1, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) int2 tex1D(texture<int2, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint2 tex1D(texture<uint2, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 tex1D(texture<int4, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 tex1D(texture<uint4, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_uint4") ;

static __declspec(__device__) __forceinline long tex1D(texture<long, 0x01, cudaReadModeElementType> t, float x)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int __tex1D_long_as_int(texture<long, 0x01, cudaReadModeElementType>, float)  asm("__tex1D_long_as_int");
  return __tex1D_long_as_int(t, x);
}

static __declspec(__device__) __forceinline unsigned long tex1D(texture<unsigned long, 0x01, cudaReadModeElementType> t, float x)
{
  __declspec(__device__) __declspec(__cudart_builtin__) unsigned __tex1D_ulong_as_uint(texture<unsigned long, 0x01, cudaReadModeElementType>, float)  asm("__tex1D_ulong_as_uint");
  return __tex1D_ulong_as_uint(t, x);
}

static __declspec(__device__) __forceinline long1 tex1D(texture<long1, 0x01, cudaReadModeElementType> t, float x)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int1 __tex1D_long1_as_int1(texture<long1, 0x01, cudaReadModeElementType>, float)  asm("__tex1D_long1_as_int1");
  int1 v = __tex1D_long1_as_int1(t, x);

  return make_long1(v.x);
}

static __declspec(__device__) __forceinline ulong1 tex1D(texture<ulong1, 0x01, cudaReadModeElementType> t, float x)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint1 __tex1D_ulong1_as_uint1(texture<ulong1, 0x01, cudaReadModeElementType>, float)  asm("__tex1D_ulong1_as_uint1");
  uint1 v = __tex1D_ulong1_as_uint1(t, x);

  return make_ulong1(v.x);
}

static __declspec(__device__) __forceinline long2 tex1D(texture<long2, 0x01, cudaReadModeElementType> t, float x)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int2 __tex1D_long2_as_int2(texture<long2, 0x01, cudaReadModeElementType>, float)  asm("__tex1D_long2_as_int2");
  int2 v = __tex1D_long2_as_int2(t, x);
  return make_long2(v.x, v.y);
}

static __declspec(__device__) __forceinline ulong2 tex1D(texture<ulong2, 0x01, cudaReadModeElementType> t, float x)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint2 __tex1D_ulong2_as_uint2(texture<ulong2, 0x01, cudaReadModeElementType>, float)  asm("__tex1D_ulong2_as_uint2");
  uint2 v = __tex1D_ulong2_as_uint2(t, x);

  return make_ulong2(v.x, v.y);
}

static __declspec(__device__) __forceinline long4 tex1D(texture<long4, 0x01, cudaReadModeElementType> t, float x)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int4 __tex1D_long4_as_int4(texture<long4, 0x01, cudaReadModeElementType>, float)  asm("__tex1D_long4_as_int4");
  int4 v = __tex1D_long4_as_int4(t, x);

  return make_long4(v.x, v.y, v.z, v.w);
}

static __declspec(__device__) __forceinline ulong4 tex1D(texture<ulong4, 0x01, cudaReadModeElementType> t, float x)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint4 __tex1D_ulong4_as_uint4(texture<ulong4, 0x01, cudaReadModeElementType>, float)  asm("__tex1D_ulong4_as_uint4");
  uint4 v = __tex1D_ulong4_as_uint4(t, x);

  return make_ulong4(v.x, v.y, v.z, v.w);
}
#line 313 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex1D(texture<float, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1D(texture<float1, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1D(texture<float2, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1D(texture<float4, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_float4") ;




#line 322 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex1D(texture<char, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_char_as_schar") ;
#line 324 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex1D(texture<signed char, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex1D(texture<unsigned char, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1D(texture<char1, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1D(texture<uchar1, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1D(texture<char2, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1D(texture<uchar2, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1D(texture<char4, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1D(texture<uchar4, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) float tex1D(texture<short, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex1D(texture<unsigned short, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1D(texture<short1, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1D(texture<ushort1, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1D(texture<short2, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1D(texture<ushort2, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1D(texture<short4, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1D(texture<ushort4, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_ushort4") ;
#line 342 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"











#line 354 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) char tex2D(texture<char, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_char_as_schar") ;
#line 356 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) signed char tex2D(texture<signed char, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned char tex2D(texture<unsigned char, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) char1 tex2D(texture<char1, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar1 tex2D(texture<uchar1, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) char2 tex2D(texture<char2, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar2 tex2D(texture<uchar2, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 tex2D(texture<char4, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 tex2D(texture<uchar4, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) short tex2D(texture<short, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned short tex2D(texture<unsigned short, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) short1 tex2D(texture<short1, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort1 tex2D(texture<ushort1, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) short2 tex2D(texture<short2, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort2 tex2D(texture<ushort2, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 tex2D(texture<short4, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 tex2D(texture<ushort4, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_ushort4") ;

__declspec(__device__) __declspec(__cudart_builtin__) int tex2D(texture<int, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned int tex2D(texture<unsigned int, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) int1 tex2D(texture<int1, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint1 tex2D(texture<uint1, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) int2 tex2D(texture<int2, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint2 tex2D(texture<uint2, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 tex2D(texture<int4, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 tex2D(texture<uint4, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_uint4") ;

static __declspec(__device__) __forceinline long tex2D(texture<long, 0x02, cudaReadModeElementType> t, float x, float y)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int __tex2D_long_as_int(texture<long, 0x02, cudaReadModeElementType>, float, float)  asm("__tex2D_long_as_int");
  return __tex2D_long_as_int(t, x, y);
}


static __declspec(__device__) __forceinline unsigned long tex2D(texture<unsigned long, 0x02, cudaReadModeElementType> t, float x, float y)
{
  __declspec(__device__) __declspec(__cudart_builtin__) unsigned int __tex2D_ulong_as_uint(texture<unsigned long, 0x02, cudaReadModeElementType>, float, float)  asm("__tex2D_ulong_as_uint");
  return __tex2D_ulong_as_uint(t, x, y);
}

static __declspec(__device__) __forceinline long1 tex2D(texture<long1, 0x02, cudaReadModeElementType> t, float x, float y)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int1 __tex2D_long1_as_int1(texture<long1, 0x02, cudaReadModeElementType>, float, float)  asm("__tex2D_long1_as_int1");
  int1 v = __tex2D_long1_as_int1(t, x, y);

  return make_long1(v.x);
}

static __declspec(__device__) __forceinline ulong1 tex2D(texture<ulong1, 0x02, cudaReadModeElementType> t, float x, float y)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint1 __tex2D_ulong1_as_uint1(texture<ulong1, 0x02, cudaReadModeElementType>, float, float)  asm("__tex2D_ulong1_as_uint1");
  uint1 v = __tex2D_ulong1_as_uint1(t, x, y);

  return make_ulong1(v.x);
}

static __declspec(__device__) __forceinline long2 tex2D(texture<long2, 0x02, cudaReadModeElementType> t, float x, float y)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int2 __tex2D_long2_as_int2(texture<long2, 0x02, cudaReadModeElementType>, float, float)  asm("__tex2D_long2_as_int2");
  int2 v = __tex2D_long2_as_int2(t, x, y);

  return make_long2(v.x, v.y);
}

static __declspec(__device__) __forceinline ulong2 tex2D(texture<ulong2, 0x02, cudaReadModeElementType> t, float x, float y)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint2 __tex2D_ulong2_as_uint2(texture<ulong2, 0x02, cudaReadModeElementType>, float, float)  asm("__tex2D_ulong2_as_uint2");
  uint2 v = __tex2D_ulong2_as_uint2(t, x, y);

  return make_ulong2(v.x, v.y);
}

static __declspec(__device__) __forceinline long4 tex2D(texture<long4, 0x02, cudaReadModeElementType> t, float x, float y)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int4 __tex2D_long4_as_int4(texture<long4, 0x02, cudaReadModeElementType>, float, float)  asm("__tex2D_long4_as_int4");
  int4 v = __tex2D_long4_as_int4(t, x, y);

  return make_long4(v.x, v.y, v.z, v.w);
}

static __declspec(__device__) __forceinline ulong4 tex2D(texture<ulong4, 0x02, cudaReadModeElementType> t, float x, float y)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint4 __tex2D_ulong4_as_uint4(texture<ulong4, 0x02, cudaReadModeElementType>, float, float)  asm("__tex2D_ulong4_as_uint4");
  uint4 v = __tex2D_ulong4_as_uint4(t, x, y);

  return make_ulong4(v.x, v.y, v.z, v.w);
}
#line 444 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) float tex2D(texture<float, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2D(texture<float1, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2D(texture<float2, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2D(texture<float4, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_float4") ;




#line 454 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex2D(texture<char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_char_as_schar") ;
#line 456 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex2D(texture<signed char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex2D(texture<unsigned char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2D(texture<char1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2D(texture<uchar1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2D(texture<char2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2D(texture<uchar2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2D(texture<char4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2D(texture<uchar4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_uchar4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex2D(texture<short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex2D(texture<unsigned short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2D(texture<short1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2D(texture<ushort1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2D(texture<short2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2D(texture<ushort2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2D(texture<short4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2D(texture<ushort4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_ushort4") ;
#line 473 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"










#line 484 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) char tex1DLayered(texture<char, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_char_as_schar") ;
#line 486 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) signed char tex1DLayered(texture<signed char, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned char tex1DLayered(texture<unsigned char, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) char1 tex1DLayered(texture<char1, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar1 tex1DLayered(texture<uchar1, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) char2 tex1DLayered(texture<char2, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar2 tex1DLayered(texture<uchar2, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 tex1DLayered(texture<char4, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 tex1DLayered(texture<uchar4, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) short tex1DLayered(texture<short, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned short tex1DLayered(texture<unsigned short, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) short1 tex1DLayered(texture<short1, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort1 tex1DLayered(texture<ushort1, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) short2 tex1DLayered(texture<short2, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort2 tex1DLayered(texture<ushort2, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 tex1DLayered(texture<short4, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 tex1DLayered(texture<ushort4, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_ushort4") ;

__declspec(__device__) __declspec(__cudart_builtin__) int tex1DLayered(texture<int, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned int tex1DLayered(texture<unsigned int, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) int1 tex1DLayered(texture<int1, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint1 tex1DLayered(texture<uint1, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) int2 tex1DLayered(texture<int2, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint2 tex1DLayered(texture<uint2, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 tex1DLayered(texture<int4, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 tex1DLayered(texture<uint4, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_uint4") ;

static __declspec(__device__) __forceinline long tex1DLayered(texture<long, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int __tex1DLayered_long_as_int(texture<long, 0xF1, cudaReadModeElementType>, float, int)  asm("__tex1DLayered_long_as_int");
  return __tex1DLayered_long_as_int(t, x, layer);
}

static __declspec(__device__) __forceinline unsigned long tex1DLayered(texture<unsigned long, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  unsigned __tex1DLayered_ulong_as_uint(texture<unsigned long, 0xF1, cudaReadModeElementType>, float, int)  asm("__tex1DLayered_ulong_as_uint");
  return __tex1DLayered_ulong_as_uint(t, x, layer);
}

static __declspec(__device__) __forceinline long1 tex1DLayered(texture<long1, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int1 __tex1DLayered_long1_as_int1(texture<long1, 0xF1, cudaReadModeElementType>, float, int)  asm("__tex1DLayered_long1_as_int1");
  int1 v = __tex1DLayered_long1_as_int1(t, x, layer);

  return make_long1(v.x);
}

static __declspec(__device__) __forceinline ulong1 tex1DLayered(texture<ulong1, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint1 __tex1DLayered_ulong1_as_uint1(texture<ulong1, 0xF1, cudaReadModeElementType>, float, int)  asm("__tex1DLayered_ulong1_as_uint1");
  uint1 v = __tex1DLayered_ulong1_as_uint1(t, x, layer);

  return make_ulong1(v.x);
}

static __declspec(__device__) __forceinline long2 tex1DLayered(texture<long2, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int2 __tex1DLayered_long2_as_int2(texture<long2, 0xF1, cudaReadModeElementType>, float, int)  asm("__tex1DLayered_long2_as_int2");
  int2 v = __tex1DLayered_long2_as_int2(t, x, layer);

  return make_long2(v.x, v.y);
}

static __declspec(__device__) __forceinline ulong2 tex1DLayered(texture<ulong2, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint2 __tex1DLayered_ulong2_as_uint2(texture<ulong2, 0xF1, cudaReadModeElementType>, float, int)  asm("__tex1DLayered_ulong2_as_uint2");
  uint2 v = __tex1DLayered_ulong2_as_uint2(t, x, layer);

  return make_ulong2(v.x, v.y);
}

static __declspec(__device__) __forceinline long4 tex1DLayered(texture<long4, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int4 __tex1DLayered_long4_as_int4(texture<long4, 0xF1, cudaReadModeElementType>, float, int)  asm("__tex1DLayered_long4_as_int4");
  int4 v = __tex1DLayered_long4_as_int4(t, x, layer);

  return make_long4(v.x, v.y, v.z, v.w);
}

static __declspec(__device__) __forceinline ulong4 tex1DLayered(texture<ulong4, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint4 __tex1DLayered_ulong4_as_uint4(texture<ulong4, 0xF1, cudaReadModeElementType>, float, int)  asm("__tex1DLayered_ulong4_as_uint4");
  uint4 v = __tex1DLayered_ulong4_as_uint4(t, x, layer);

  return make_ulong4(v.x, v.y, v.z, v.w);
}
#line 573 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLayered(texture<float, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DLayered(texture<float1, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DLayered(texture<float2, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DLayered(texture<float4, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_float4") ;



#line 581 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLayered(texture<char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_char_as_schar") ;
#line 583 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLayered(texture<signed char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLayered(texture<unsigned char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DLayered(texture<char1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DLayered(texture<uchar1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DLayered(texture<char2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DLayered(texture<uchar2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DLayered(texture<char4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DLayered(texture<uchar4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLayered(texture<short, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLayered(texture<unsigned short, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DLayered(texture<short1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DLayered(texture<ushort1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DLayered(texture<short2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DLayered(texture<ushort2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DLayered(texture<short4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DLayered(texture<ushort4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_ushort4") ;
#line 601 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"










#line 612 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) char tex2DLayered(texture<char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_char_as_schar") ;
#line 614 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) signed char tex2DLayered(texture<signed char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned char tex2DLayered(texture<unsigned char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) char1 tex2DLayered(texture<char1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar1 tex2DLayered(texture<uchar1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) char2 tex2DLayered(texture<char2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar2 tex2DLayered(texture<uchar2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 tex2DLayered(texture<char4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 tex2DLayered(texture<uchar4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) short tex2DLayered(texture<short, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned short tex2DLayered(texture<unsigned short, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) short1 tex2DLayered(texture<short1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort1 tex2DLayered(texture<ushort1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) short2 tex2DLayered(texture<short2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort2 tex2DLayered(texture<ushort2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 tex2DLayered(texture<short4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 tex2DLayered(texture<ushort4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_ushort4") ;

__declspec(__device__) __declspec(__cudart_builtin__) int tex2DLayered(texture<int, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned int tex2DLayered(texture<unsigned int, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) int1 tex2DLayered(texture<int1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint1 tex2DLayered(texture<uint1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) int2 tex2DLayered(texture<int2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint2 tex2DLayered(texture<uint2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 tex2DLayered(texture<int4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 tex2DLayered(texture<uint4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_uint4") ;

static __declspec(__device__) __forceinline long tex2DLayered(texture<long, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int __tex2DLayered_long_as_int(texture<long, 0xF2, cudaReadModeElementType>, float, float, int)  asm("__tex2DLayered_long_as_int");

  return __tex2DLayered_long_as_int(t, x, y, layer);
}

static __declspec(__device__) __forceinline unsigned long tex2DLayered(texture<unsigned long, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  unsigned int __tex2DLayered_ulong_as_uint(texture<unsigned long, 0xF2, cudaReadModeElementType>, float, float, int)  asm("__tex2DLayered_ulong_as_uint");

  return __tex2DLayered_ulong_as_uint(t, x, y, layer);
}

static __declspec(__device__) __forceinline long1 tex2DLayered(texture<long1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int1 __tex2DLayered_long1_as_int1(texture<long1, 0xF2, cudaReadModeElementType>, float, float, int)  asm("__tex2DLayered_long1_as_int1");
  int1 v = __tex2DLayered_long1_as_int1(t, x, y, layer);

  return make_long1(v.x);
}

static __declspec(__device__) __forceinline ulong1 tex2DLayered(texture<ulong1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint1 __tex2DLayered_ulong1_as_uint1(texture<ulong1, 0xF2, cudaReadModeElementType>, float, float, int)  asm("__tex2DLayered_ulong1_as_uint1");
  uint1 v = __tex2DLayered_ulong1_as_uint1(t, x, y, layer);

  return make_ulong1(v.x);
}

static __declspec(__device__) __forceinline long2 tex2DLayered(texture<long2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int2 __tex2DLayered_long2_as_int2(texture<long2, 0xF2, cudaReadModeElementType>, float, float, int)  asm("__tex2DLayered_long2_as_int2");
  int2 v = __tex2DLayered_long2_as_int2(t, x, y, layer);

  return make_long2(v.x, v.y);
}

static __declspec(__device__) __forceinline ulong2 tex2DLayered(texture<ulong2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint2 __tex2DLayered_ulong2_as_uint2(texture<ulong2, 0xF2, cudaReadModeElementType>, float, float, int)  asm("__tex2DLayered_ulong2_as_uint2");
  uint2 v = __tex2DLayered_ulong2_as_uint2(t, x, y, layer);

  return make_ulong2(v.x, v.y);
}

static __declspec(__device__) __forceinline long4 tex2DLayered(texture<long4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int4 __tex2DLayered_long4_as_int4(texture<long4, 0xF2, cudaReadModeElementType>, float, float, int)  asm("__tex2DLayered_long4_as_int4");
  int4 v = __tex2DLayered_long4_as_int4(t, x, y, layer);

  return make_long4(v.x, v.y, v.z, v.w);
}

static __declspec(__device__) __forceinline ulong4 tex2DLayered(texture<ulong4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint4 __tex2DLayered_ulong4_as_uint4(texture<ulong4, 0xF2, cudaReadModeElementType>, float, float, int)  asm("__tex2DLayered_ulong4_as_uint4");
  uint4 v = __tex2DLayered_ulong4_as_uint4(t, x, y, layer);

  return make_ulong4(v.x, v.y, v.z, v.w);
}
#line 703 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLayered(texture<float, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DLayered(texture<float1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DLayered(texture<float2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DLayered(texture<float4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_float4") ;




#line 712 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLayered(texture<char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_char_as_schar") ;
#line 714 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLayered(texture<signed char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLayered(texture<unsigned char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DLayered(texture<char1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DLayered(texture<uchar1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DLayered(texture<char2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DLayered(texture<uchar2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DLayered(texture<char4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DLayered(texture<uchar4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLayered(texture<short, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLayered(texture<unsigned short, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DLayered(texture<short1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DLayered(texture<ushort1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DLayered(texture<short2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DLayered(texture<ushort2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DLayered(texture<short4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DLayered(texture<ushort4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_ushort4") ;
#line 732 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"











#line 744 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) char tex3D(texture<char, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_char_as_schar") ;
#line 746 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) signed char tex3D(texture<signed char, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned char tex3D(texture<unsigned char, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) char1 tex3D(texture<char1, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar1 tex3D(texture<uchar1, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) char2 tex3D(texture<char2, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar2 tex3D(texture<uchar2, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 tex3D(texture<char4, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 tex3D(texture<uchar4, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) short tex3D(texture<short, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned short tex3D(texture<unsigned short, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) short1 tex3D(texture<short1, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort1 tex3D(texture<ushort1, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) short2 tex3D(texture<short2, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort2 tex3D(texture<ushort2, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 tex3D(texture<short4, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 tex3D(texture<ushort4, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_ushort4") ;

__declspec(__device__) __declspec(__cudart_builtin__) int tex3D(texture<int, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned int tex3D(texture<unsigned int, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) int1 tex3D(texture<int1, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint1 tex3D(texture<uint1, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) int2 tex3D(texture<int2, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint2 tex3D(texture<uint2, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 tex3D(texture<int4, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 tex3D(texture<uint4, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_uint4") ;

static __declspec(__device__) __forceinline long tex3D(texture<long, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int __tex3D_long_as_int(texture<long, 0x03, cudaReadModeElementType>, float, float, float)  asm("__tex3D_long_as_int");
  return __tex3D_long_as_int(t, x, y, z);
}

static __declspec(__device__) __forceinline unsigned long tex3D(texture<unsigned long, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  unsigned int __tex3D_ulong_as_uint(texture<unsigned long, 0x03, cudaReadModeElementType>, float, float, float)  asm("__tex3D_ulong_as_uint");
  return __tex3D_ulong_as_uint(t, x, y, z);
}

static __declspec(__device__) __forceinline long1 tex3D(texture<long1, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int1 __tex3D_long1_as_int1(texture<long1, 0x03, cudaReadModeElementType>, float, float, float)  asm("__tex3D_long1_as_int1");
  int1 v = __tex3D_long1_as_int1(t, x, y, z);

  return make_long1(v.x);
}

static __declspec(__device__) __forceinline ulong1 tex3D(texture<ulong1, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint1 __tex3D_ulong1_as_uint1(texture<ulong1, 0x03, cudaReadModeElementType>, float, float, float)  asm("__tex3D_ulong1_as_uint1");
  uint1 v = __tex3D_ulong1_as_uint1(t, x, y, z);

  return make_ulong1(v.x);
}

static __declspec(__device__) __forceinline long2 tex3D(texture<long2, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int2 __tex3D_long2_as_int2(texture<long2, 0x03, cudaReadModeElementType>, float, float, float)  asm("__tex3D_long2_as_int2");
  int2 v = __tex3D_long2_as_int2(t, x, y, z);

  return make_long2(v.x, v.y);
}

static __declspec(__device__) __forceinline ulong2 tex3D(texture<ulong2, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint2 __tex3D_ulong2_as_uint2(texture<ulong2, 0x03, cudaReadModeElementType>, float, float, float)  asm("__tex3D_ulong2_as_uint2");
  uint2 v = __tex3D_ulong2_as_uint2(t, x, y, z);

  return make_ulong2(v.x, v.y);
}

static __declspec(__device__) __forceinline long4 tex3D(texture<long4, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int4 __tex3D_long4_as_int4(texture<long4, 0x03, cudaReadModeElementType>, float, float, float)  asm("__tex3D_long4_as_int4");
  int4 v = __tex3D_long4_as_int4(t, x, y, z);

  return make_long4(v.x, v.y, v.z, v.w);
}

static __declspec(__device__) __forceinline ulong4 tex3D(texture<ulong4, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint4 __tex3D_ulong4_as_uint4(texture<ulong4, 0x03, cudaReadModeElementType>, float, float, float)  asm("__tex3D_ulong4_as_uint4");
  uint4 v = __tex3D_ulong4_as_uint4(t, x, y, z);

  return make_ulong4(v.x, v.y, v.z, v.w);
}
#line 833 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex3D(texture<float, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex3D(texture<float1, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex3D(texture<float2, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex3D(texture<float4, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_float4") ;




#line 842 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex3D(texture<char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_char_as_schar") ;
#line 844 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex3D(texture<signed char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex3D(texture<unsigned char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex3D(texture<char1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex3D(texture<uchar1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex3D(texture<char2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex3D(texture<uchar2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex3D(texture<char4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex3D(texture<uchar4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) float tex3D(texture<short, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex3D(texture<unsigned short, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex3D(texture<short1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex3D(texture<ushort1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex3D(texture<short2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex3D(texture<ushort2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex3D(texture<short4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex3D(texture<ushort4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_ushort4") ;
#line 862 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"










#line 873 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) char texCubemap(texture<char, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_char_as_schar") ;
#line 875 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) signed char texCubemap(texture<signed char, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned char texCubemap(texture<unsigned char, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) char1 texCubemap(texture<char1, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar1 texCubemap(texture<uchar1, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) char2 texCubemap(texture<char2, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar2 texCubemap(texture<uchar2, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 texCubemap(texture<char4, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 texCubemap(texture<uchar4, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) short texCubemap(texture<short, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned short texCubemap(texture<unsigned short, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) short1 texCubemap(texture<short1, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort1 texCubemap(texture<ushort1, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) short2 texCubemap(texture<short2, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort2 texCubemap(texture<ushort2, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 texCubemap(texture<short4, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 texCubemap(texture<ushort4, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_ushort4") ;

__declspec(__device__) __declspec(__cudart_builtin__) int texCubemap(texture<int, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned int texCubemap(texture<unsigned int, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) int1 texCubemap(texture<int1, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint1 texCubemap(texture<uint1, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) int2 texCubemap(texture<int2, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint2 texCubemap(texture<uint2, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 texCubemap(texture<int4, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 texCubemap(texture<uint4, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_uint4") ;

static __declspec(__device__) __forceinline long texCubemap(texture<long, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int __texCubemap_long_as_int(texture<long, 0x0C, cudaReadModeElementType>, float, float, float)  asm("__texCubemap_long_as_int");
  return __texCubemap_long_as_int(t, x, y, z);
}

static __declspec(__device__) __forceinline unsigned long texCubemap(texture<unsigned long, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  unsigned int __texCubemap_ulong_as_uint(texture<unsigned long, 0x0C, cudaReadModeElementType>, float, float, float)  asm("__texCubemap_ulong_as_uint");
  return __texCubemap_ulong_as_uint(t, x, y, z);
}

static __declspec(__device__) __forceinline long1 texCubemap(texture<long1, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int1 __texCubemap_long1_as_int1(texture<long1, 0x0C, cudaReadModeElementType>, float, float, float)  asm("__texCubemap_long1_as_int1");
  int1 v = __texCubemap_long1_as_int1(t, x, y, z);

  return make_long1(v.x);
}

static __declspec(__device__) __forceinline ulong1 texCubemap(texture<ulong1, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint1 __texCubemap_ulong1_as_uint1(texture<ulong1, 0x0C, cudaReadModeElementType>, float, float, float)  asm("__texCubemap_ulong1_as_uint1");
  uint1 v = __texCubemap_ulong1_as_uint1(t, x, y, z);

  return make_ulong1(v.x);
}

static __declspec(__device__) __forceinline long2 texCubemap(texture<long2, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int2 __texCubemap_long2_as_int2(texture<long2, 0x0C, cudaReadModeElementType>, float, float, float)  asm("__texCubemap_long2_as_int2");
  int2 v = __texCubemap_long2_as_int2(t, x, y, z);

  return make_long2(v.x, v.y);
}

static __declspec(__device__) __forceinline ulong2 texCubemap(texture<ulong2, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint2 __texCubemap_ulong2_as_uint2(texture<ulong2, 0x0C, cudaReadModeElementType>, float, float, float)  asm("__texCubemap_ulong2_as_uint2");
  uint2 v = __texCubemap_ulong2_as_uint2(t, x, y, z);

  return make_ulong2(v.x, v.y);
}

static __declspec(__device__) __forceinline long4 texCubemap(texture<long4, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int4 __texCubemap_long4_as_int4(texture<long4, 0x0C, cudaReadModeElementType>, float, float, float)  asm("__texCubemap_long4_as_int4");
  int4 v = __texCubemap_long4_as_int4(t, x, y, z);

  return make_long4(v.x, v.y, v.z, v.w);
}

static __declspec(__device__) __forceinline ulong4 texCubemap(texture<ulong4, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint4 __texCubemap_ulong4_as_uint4(texture<ulong4, 0x0C, cudaReadModeElementType>, float, float, float)  asm("__texCubemap_ulong4_as_uint4");
  uint4 v = __texCubemap_ulong4_as_uint4(t, x, y, z);

  return make_ulong4(v.x, v.y, v.z, v.w);
}
#line 962 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float texCubemap(texture<float, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 texCubemap(texture<float1, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 texCubemap(texture<float2, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 texCubemap(texture<float4, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_float4") ;



#line 970 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float texCubemap(texture<char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_char_as_schar") ;
#line 972 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float texCubemap(texture<signed char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float texCubemap(texture<unsigned char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 texCubemap(texture<char1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 texCubemap(texture<uchar1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 texCubemap(texture<char2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 texCubemap(texture<uchar2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 texCubemap(texture<char4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 texCubemap(texture<uchar4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) float texCubemap(texture<short, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) float texCubemap(texture<unsigned short, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 texCubemap(texture<short1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 texCubemap(texture<ushort1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 texCubemap(texture<short2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 texCubemap(texture<ushort2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 texCubemap(texture<short4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 texCubemap(texture<ushort4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_ushort4") ;
#line 990 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"










#line 1001 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) char texCubemapLayered(texture<char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_char_as_schar") ;
#line 1003 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) signed char texCubemapLayered(texture<signed char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned char texCubemapLayered(texture<unsigned char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) char1 texCubemapLayered(texture<char1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar1 texCubemapLayered(texture<uchar1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) char2 texCubemapLayered(texture<char2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar2 texCubemapLayered(texture<uchar2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 texCubemapLayered(texture<char4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 texCubemapLayered(texture<uchar4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) short texCubemapLayered(texture<short, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned short texCubemapLayered(texture<unsigned short, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) short1 texCubemapLayered(texture<short1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort1 texCubemapLayered(texture<ushort1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) short2 texCubemapLayered(texture<short2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort2 texCubemapLayered(texture<ushort2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 texCubemapLayered(texture<short4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 texCubemapLayered(texture<ushort4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_ushort4") ;

__declspec(__device__) __declspec(__cudart_builtin__) int texCubemapLayered(texture<int, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned int texCubemapLayered(texture<unsigned int, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) int1 texCubemapLayered(texture<int1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint1 texCubemapLayered(texture<uint1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) int2 texCubemapLayered(texture<int2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint2 texCubemapLayered(texture<uint2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 texCubemapLayered(texture<int4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 texCubemapLayered(texture<uint4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_uint4") ;

static __declspec(__device__) __forceinline long texCubemapLayered(texture<long, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int __texCubemapLayered_long_as_int(texture<long, 0xFC, cudaReadModeElementType>, float, float, float, int)  asm("__texCubemapLayered_long_as_int");
  return __texCubemapLayered_long_as_int(t, x, y, z, layer);
}

static __declspec(__device__) __forceinline unsigned long texCubemapLayered(texture<unsigned long, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  unsigned __texCubemapLayered_ulong_as_uint(texture<unsigned long, 0xFC, cudaReadModeElementType>, float, float, float, int)  asm("__texCubemapLayered_ulong_as_uint");
  return __texCubemapLayered_ulong_as_uint(t, x, y, z, layer);
}

static __declspec(__device__) __forceinline long1 texCubemapLayered(texture<long1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int1 __texCubemapLayered_long1_as_int1(texture<long1, 0xFC, cudaReadModeElementType>, float, float, float, int)  asm("__texCubemapLayered_long1_as_int1");
  int1 v =  __texCubemapLayered_long1_as_int1(t, x, y, z, layer);

  return make_long1(v.x);
}

static __declspec(__device__) __forceinline ulong1 texCubemapLayered(texture<ulong1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint1 __texCubemapLayered_ulong1_as_uint1(texture<ulong1, 0xFC, cudaReadModeElementType>, float, float, float, int)  asm("__texCubemapLayered_ulong1_as_uint1");
  uint1 v =  __texCubemapLayered_ulong1_as_uint1(t, x, y, z, layer);

  return make_ulong1(v.x);
}

static __declspec(__device__) __forceinline long2 texCubemapLayered(texture<long2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int2 __texCubemapLayered_long2_as_int2(texture<long2, 0xFC, cudaReadModeElementType>, float, float, float, int)  asm("__texCubemapLayered_long2_as_int2");
  int2 v =  __texCubemapLayered_long2_as_int2(t, x, y, z, layer);

  return make_long2(v.x, v.y);
}

static __declspec(__device__) __forceinline ulong2 texCubemapLayered(texture<ulong2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint2 __texCubemapLayered_ulong2_as_uint2(texture<ulong2, 0xFC, cudaReadModeElementType>, float, float, float, int)  asm("__texCubemapLayered_ulong2_as_uint2");
  uint2 v =  __texCubemapLayered_ulong2_as_uint2(t, x, y, z, layer);

  return make_ulong2(v.x, v.y);
}

static __declspec(__device__) __forceinline long4 texCubemapLayered(texture<long4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int4 __texCubemapLayered_long4_as_int4(texture<long4, 0xFC, cudaReadModeElementType>, float, float, float, int)  asm("__texCubemapLayered_long4_as_int4");
  int4 v =  __texCubemapLayered_long4_as_int4(t, x, y, z, layer);

  return make_long4(v.x, v.y, v.z, v.w);
}

static __declspec(__device__) __forceinline ulong4 texCubemapLayered(texture<ulong4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint4 __texCubemapLayered_ulong4_as_uint4(texture<ulong4, 0xFC, cudaReadModeElementType>, float, float, float, int)  asm("__texCubemapLayered_ulong4_as_uint4");
  uint4 v =  __texCubemapLayered_ulong4_as_uint4(t, x, y, z, layer);

  return make_ulong4(v.x, v.y, v.z, v.w);
}
#line 1090 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float texCubemapLayered(texture<float, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 texCubemapLayered(texture<float1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 texCubemapLayered(texture<float2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 texCubemapLayered(texture<float4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_float4") ;



#line 1098 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float texCubemapLayered(texture<char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_char_as_schar") ;
#line 1100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float texCubemapLayered(texture<signed char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float texCubemapLayered(texture<unsigned char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 texCubemapLayered(texture<char1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 texCubemapLayered(texture<uchar1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 texCubemapLayered(texture<char2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 texCubemapLayered(texture<uchar2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 texCubemapLayered(texture<char4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 texCubemapLayered(texture<uchar4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) float texCubemapLayered(texture<short, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) float texCubemapLayered(texture<unsigned short, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 texCubemapLayered(texture<short1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 texCubemapLayered(texture<ushort1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 texCubemapLayered(texture<short2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 texCubemapLayered(texture<ushort2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 texCubemapLayered(texture<short4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 texCubemapLayered(texture<ushort4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_ushort4") ;
#line 1118 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"




















































__declspec(__device__) __declspec(__cudart_builtin__) char4 tex2Dgather(texture<char, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_char") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 tex2Dgather(texture<signed char, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 tex2Dgather(texture<unsigned char, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 tex2Dgather(texture<char1, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 tex2Dgather(texture<uchar1, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 tex2Dgather(texture<char2, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 tex2Dgather(texture<uchar2, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 tex2Dgather(texture<char3, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_char3") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 tex2Dgather(texture<uchar3, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_uchar3") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 tex2Dgather(texture<char4, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 tex2Dgather(texture<uchar4, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_uchar4") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 tex2Dgather(texture<signed short, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 tex2Dgather(texture<unsigned short, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 tex2Dgather(texture<short1, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 tex2Dgather(texture<ushort1, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 tex2Dgather(texture<short2, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 tex2Dgather(texture<ushort2, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 tex2Dgather(texture<short3, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_short3") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 tex2Dgather(texture<ushort3, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_ushort3") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 tex2Dgather(texture<short4, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 tex2Dgather(texture<ushort4, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_ushort4") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 tex2Dgather(texture<signed int, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 tex2Dgather(texture<unsigned int, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 tex2Dgather(texture<int1, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 tex2Dgather(texture<uint1, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 tex2Dgather(texture<int2, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 tex2Dgather(texture<uint2, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 tex2Dgather(texture<int3, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_int3") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 tex2Dgather(texture<uint3, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_uint3") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 tex2Dgather(texture<int4, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 tex2Dgather(texture<uint4, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_uint4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<float, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<float1, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<float2, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<float3, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_float3") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<float4, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_float4") ;


__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_char") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<signed char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<unsigned char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<char1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<uchar1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<char2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<uchar2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<char3, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_char3") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<uchar3, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_uchar3") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<char4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<uchar4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_uchar4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<signed short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<unsigned short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<short1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<ushort1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<short2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<ushort2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<short3, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_short3") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<ushort3, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_ushort3") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<short4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<ushort4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_ushort4") ;
#line 1230 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"










#line 1241 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) char tex1DLod(texture<char, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_char_as_schar") ;
#line 1243 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) signed char tex1DLod(texture<signed char, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned char tex1DLod(texture<unsigned char, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) char1 tex1DLod(texture<char1, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar1 tex1DLod(texture<uchar1, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) char2 tex1DLod(texture<char2, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar2 tex1DLod(texture<uchar2, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 tex1DLod(texture<char4, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 tex1DLod(texture<uchar4, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) short tex1DLod(texture<short, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned short tex1DLod(texture<unsigned short, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) short1 tex1DLod(texture<short1, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort1 tex1DLod(texture<ushort1, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) short2 tex1DLod(texture<short2, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort2 tex1DLod(texture<ushort2, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 tex1DLod(texture<short4, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 tex1DLod(texture<ushort4, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_ushort4") ;

__declspec(__device__) __declspec(__cudart_builtin__) int tex1DLod(texture<int, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned int tex1DLod(texture<unsigned int, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) int1 tex1DLod(texture<int1, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint1 tex1DLod(texture<uint1, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) int2 tex1DLod(texture<int2, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint2 tex1DLod(texture<uint2, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 tex1DLod(texture<int4, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 tex1DLod(texture<uint4, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_uint4") ;

static __declspec(__device__) __forceinline long tex1DLod(texture<long, 0x01, cudaReadModeElementType> t, float x, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int __tex1DLod_long_as_int(texture<long, 0x01, cudaReadModeElementType>, float, float)  asm("__tex1DLod_long_as_int");
  return __tex1DLod_long_as_int(t, x, level);
}

static __declspec(__device__) __forceinline unsigned long tex1DLod(texture<unsigned long, 0x01, cudaReadModeElementType> t, float x, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  unsigned __tex1DLod_ulong_as_uint(texture<unsigned long, 0x01, cudaReadModeElementType>, float, float)  asm("__tex1DLod_ulong_as_uint");
  return __tex1DLod_ulong_as_uint(t, x, level);
}

static __declspec(__device__) __forceinline long1 tex1DLod(texture<long1, 0x01, cudaReadModeElementType> t, float x, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int1 __tex1DLod_long1_as_int1(texture<long1, 0x01, cudaReadModeElementType>, float, float)  asm("__tex1DLod_long1_as_int1");
  int1 v = __tex1DLod_long1_as_int1(t, x, level);

  return make_long1(v.x);
}

static __declspec(__device__) __forceinline ulong1 tex1DLod(texture<ulong1, 0x01, cudaReadModeElementType> t, float x, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint1 __tex1DLod_ulong1_as_uint1(texture<ulong1, 0x01, cudaReadModeElementType>, float, float)  asm("__tex1DLod_ulong1_as_uint1");
  uint1 v = __tex1DLod_ulong1_as_uint1(t, x, level);

  return make_ulong1(v.x);
}

static __declspec(__device__) __forceinline long2 tex1DLod(texture<long2, 0x01, cudaReadModeElementType> t, float x, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int2 __tex1DLod_long2_as_int2(texture<long2, 0x01, cudaReadModeElementType>, float, float)  asm("__tex1DLod_long2_as_int2");
  int2 v = __tex1DLod_long2_as_int2(t, x, level);

  return make_long2(v.x, v.y);
}

static __declspec(__device__) __forceinline ulong2 tex1DLod(texture<ulong2, 0x01, cudaReadModeElementType> t, float x, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint2 __tex1DLod_ulong2_as_uint2(texture<ulong2, 0x01, cudaReadModeElementType>, float, float)  asm("__tex1DLod_ulong2_as_uint2");
  uint2 v = __tex1DLod_ulong2_as_uint2(t, x, level);

  return make_ulong2(v.x, v.y);
}

static __declspec(__device__) __forceinline long4 tex1DLod(texture<long4, 0x01, cudaReadModeElementType> t, float x, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int4 __tex1DLod_long4_as_int4(texture<long4, 0x01, cudaReadModeElementType>, float, float)  asm("__tex1DLod_long4_as_int4");
  int4 v = __tex1DLod_long4_as_int4(t, x, level);

  return make_long4(v.x, v.y, v.z, v.w);
}

static __declspec(__device__) __forceinline ulong4 tex1DLod(texture<ulong4, 0x01, cudaReadModeElementType> t, float x, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint4 __tex1DLod_ulong4_as_uint4(texture<ulong4, 0x01, cudaReadModeElementType>, float, float)  asm("__tex1DLod_ulong4_as_uint4");
  uint4 v = __tex1DLod_ulong4_as_uint4(t, x, level);

  return make_ulong4(v.x, v.y, v.z, v.w);
}
#line 1330 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLod(texture<float, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DLod(texture<float1, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DLod(texture<float2, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DLod(texture<float4, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_float4") ;




#line 1339 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLod(texture<char, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_char_as_schar") ;
#line 1341 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLod(texture<signed char, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLod(texture<unsigned char, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DLod(texture<char1, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DLod(texture<uchar1, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DLod(texture<char2, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DLod(texture<uchar2, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DLod(texture<char4, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DLod(texture<uchar4, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_uchar4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLod(texture<short, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLod(texture<unsigned short, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DLod(texture<short1, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DLod(texture<ushort1, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DLod(texture<short2, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DLod(texture<ushort2, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DLod(texture<short4, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DLod(texture<ushort4, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_ushort4") ;
#line 1358 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"










#line 1369 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) char tex2DLod(texture<char, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_char_as_schar") ;
#line 1371 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) signed char tex2DLod(texture<signed char, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned char tex2DLod(texture<unsigned char, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) char1 tex2DLod(texture<char1, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar1 tex2DLod(texture<uchar1, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) char2 tex2DLod(texture<char2, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar2 tex2DLod(texture<uchar2, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 tex2DLod(texture<char4, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 tex2DLod(texture<uchar4, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) short tex2DLod(texture<short, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned short tex2DLod(texture<unsigned short, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) short1 tex2DLod(texture<short1, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort1 tex2DLod(texture<ushort1, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) short2 tex2DLod(texture<short2, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort2 tex2DLod(texture<ushort2, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 tex2DLod(texture<short4, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 tex2DLod(texture<ushort4, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_ushort4") ;

__declspec(__device__) __declspec(__cudart_builtin__) int tex2DLod(texture<int, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned int tex2DLod(texture<unsigned int, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) int1 tex2DLod(texture<int1, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint1 tex2DLod(texture<uint1, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) int2 tex2DLod(texture<int2, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint2 tex2DLod(texture<uint2, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 tex2DLod(texture<int4, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 tex2DLod(texture<uint4, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_uint4") ;

static __declspec(__device__) __forceinline long tex2DLod(texture<long, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int __tex2DLod_long_as_int(texture<long, 0x02, cudaReadModeElementType>, float, float, float)  asm("__tex2DLod_long_as_int");
  return __tex2DLod_long_as_int(t, x, y, level);
}

static __declspec(__device__) __forceinline unsigned long tex2DLod(texture<unsigned long, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  unsigned int __tex2DLod_ulong_as_uint(texture<unsigned long, 0x02, cudaReadModeElementType>, float, float, float)  asm("__tex2DLod_ulong_as_uint");
  return __tex2DLod_ulong_as_uint(t, x, y, level);
}

static __declspec(__device__) __forceinline long1 tex2DLod(texture<long1, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int1 __tex2DLod_long1_as_int1(texture<long1, 0x02, cudaReadModeElementType>, float, float, float)  asm("__tex2DLod_long1_as_int1");
  int1 v = __tex2DLod_long1_as_int1(t, x, y, level);
  return make_long1(v.x);
}

static __declspec(__device__) __forceinline ulong1 tex2DLod(texture<ulong1, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint1 __tex2DLod_ulong1_as_uint1(texture<ulong1, 0x02, cudaReadModeElementType>, float, float, float)  asm("__tex2DLod_ulong1_as_uint1");
  uint1 v = __tex2DLod_ulong1_as_uint1(t, x, y, level);
  return make_ulong1(v.x);
}

static __declspec(__device__) __forceinline long2 tex2DLod(texture<long2, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int2 __tex2DLod_long2_as_int2(texture<long2, 0x02, cudaReadModeElementType>, float, float, float)  asm("__tex2DLod_long2_as_int2");
  int2 v = __tex2DLod_long2_as_int2(t, x, y, level);
  return make_long2(v.x, v.y);
}

static __declspec(__device__) __forceinline ulong2 tex2DLod(texture<ulong2, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint2 __tex2DLod_ulong2_as_uint2(texture<ulong2, 0x02, cudaReadModeElementType>, float, float, float)  asm("__tex2DLod_ulong2_as_uint2");
  uint2 v = __tex2DLod_ulong2_as_uint2(t, x, y, level);
  return make_ulong2(v.x, v.y);
}

static __declspec(__device__) __forceinline long4 tex2DLod(texture<long4, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int4 __tex2DLod_long4_as_int4(texture<long4, 0x02, cudaReadModeElementType>, float, float, float)  asm("__tex2DLod_long4_as_int4");
  int4 v = __tex2DLod_long4_as_int4(t, x, y, level);
  return make_long4(v.x, v.y, v.z, v.w);
}

static __declspec(__device__) __forceinline ulong4 tex2DLod(texture<ulong4, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint4 __tex2DLod_ulong4_as_uint4(texture<ulong4, 0x02, cudaReadModeElementType>, float, float, float)  asm("__tex2DLod_ulong4_as_uint4");
  uint4 v = __tex2DLod_ulong4_as_uint4(t, x, y, level);
  return make_ulong4(v.x, v.y, v.z, v.w);
}
#line 1452 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLod(texture<float, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DLod(texture<float1, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DLod(texture<float2, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DLod(texture<float4, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_float4") ;




#line 1462 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLod(texture<char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_char_as_schar") ;
#line 1464 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLod(texture<signed char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLod(texture<unsigned char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DLod(texture<char1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DLod(texture<uchar1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DLod(texture<char2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DLod(texture<uchar2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DLod(texture<char4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DLod(texture<uchar4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_uchar4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLod(texture<short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLod(texture<unsigned short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DLod(texture<short1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DLod(texture<ushort1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DLod(texture<short2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DLod(texture<ushort2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DLod(texture<short4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DLod(texture<ushort4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_ushort4") ;
#line 1481 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"











#line 1493 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) char tex1DLayeredLod(texture<char, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_char_as_schar") ;
#line 1495 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) signed char tex1DLayeredLod(texture<signed char, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned char tex1DLayeredLod(texture<unsigned char, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) char1 tex1DLayeredLod(texture<char1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar1 tex1DLayeredLod(texture<uchar1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) char2 tex1DLayeredLod(texture<char2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar2 tex1DLayeredLod(texture<uchar2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 tex1DLayeredLod(texture<char4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 tex1DLayeredLod(texture<uchar4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) short tex1DLayeredLod(texture<short, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned short tex1DLayeredLod(texture<unsigned short, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) short1 tex1DLayeredLod(texture<short1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort1 tex1DLayeredLod(texture<ushort1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) short2 tex1DLayeredLod(texture<short2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort2 tex1DLayeredLod(texture<ushort2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 tex1DLayeredLod(texture<short4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 tex1DLayeredLod(texture<ushort4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_ushort4") ;

__declspec(__device__) __declspec(__cudart_builtin__) int tex1DLayeredLod(texture<int, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned int tex1DLayeredLod(texture<unsigned int, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) int1 tex1DLayeredLod(texture<int1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint1 tex1DLayeredLod(texture<uint1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) int2 tex1DLayeredLod(texture<int2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint2 tex1DLayeredLod(texture<uint2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 tex1DLayeredLod(texture<int4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 tex1DLayeredLod(texture<uint4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_uint4") ;

static __declspec(__device__) __forceinline long tex1DLayeredLod(texture<long, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int __tex1DLayeredLod_long_as_int(texture<long, 0xF1, cudaReadModeElementType>, float, int, float)  asm("__tex1DLayeredLod_long_as_int");
  return __tex1DLayeredLod_long_as_int(t, x, layer, level);
}

static __declspec(__device__) __forceinline unsigned long tex1DLayeredLod(texture<unsigned long, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  unsigned int __tex1DLayeredLod_ulong_as_uint(texture<unsigned long, 0xF1, cudaReadModeElementType>, float, int, float)  asm("__tex1DLayeredLod_ulong_as_uint");
  return __tex1DLayeredLod_ulong_as_uint(t, x, layer, level);
}

static __declspec(__device__) __forceinline long1 tex1DLayeredLod(texture<long1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int1 __tex1DLayeredLod_long1_as_int1(texture<long1, 0xF1, cudaReadModeElementType>, float, int, float)  asm("__tex1DLayeredLod_long1_as_int1");
  int1 v = __tex1DLayeredLod_long1_as_int1(t, x, layer, level);

  return make_long1(v.x);
}

static __declspec(__device__) __forceinline ulong1 tex1DLayeredLod(texture<ulong1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint1 __tex1DLayeredLod_ulong1_as_uint1(texture<ulong1, 0xF1, cudaReadModeElementType>, float, int, float)  asm("__tex1DLayeredLod_ulong1_as_uint1");
  uint1 v = __tex1DLayeredLod_ulong1_as_uint1(t, x, layer, level);

  return make_ulong1(v.x);
}

static __declspec(__device__) __forceinline long2 tex1DLayeredLod(texture<long2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int2 __tex1DLayeredLod_long2_as_int2(texture<long2, 0xF1, cudaReadModeElementType>, float, int, float)  asm("__tex1DLayeredLod_long2_as_int2");
  int2 v = __tex1DLayeredLod_long2_as_int2(t, x, layer, level);

  return make_long2(v.x, v.y);
}

static __declspec(__device__) __forceinline ulong2 tex1DLayeredLod(texture<ulong2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint2 __tex1DLayeredLod_ulong2_as_uint2(texture<ulong2, 0xF1, cudaReadModeElementType>, float, int, float)  asm("__tex1DLayeredLod_ulong2_as_uint2");
  uint2 v = __tex1DLayeredLod_ulong2_as_uint2(t, x, layer, level);

  return make_ulong2(v.x, v.y);
}

static __declspec(__device__) __forceinline long4 tex1DLayeredLod(texture<long4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int4 __tex1DLayeredLod_long4_as_int4(texture<long4, 0xF1, cudaReadModeElementType>, float, int, float)  asm("__tex1DLayeredLod_long4_as_int4");
  int4 v = __tex1DLayeredLod_long4_as_int4(t, x, layer, level);

  return make_long4(v.x, v.y, v.z, v.w);
}

static __declspec(__device__) __forceinline ulong4 tex1DLayeredLod(texture<ulong4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint4 __tex1DLayeredLod_ulong4_as_uint4(texture<ulong4, 0xF1, cudaReadModeElementType>, float, int, float)  asm("__tex1DLayeredLod_ulong4_as_uint4");
  uint4 v = __tex1DLayeredLod_ulong4_as_uint4(t, x, layer, level);

  return make_ulong4(v.x, v.y, v.z, v.w);
}
#line 1582 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLayeredLod(texture<float, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DLayeredLod(texture<float1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DLayeredLod(texture<float2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DLayeredLod(texture<float4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_float4") ;



#line 1590 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLayeredLod(texture<char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_char_as_schar") ;
#line 1592 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLayeredLod(texture<signed char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLayeredLod(texture<unsigned char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DLayeredLod(texture<char1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DLayeredLod(texture<uchar1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DLayeredLod(texture<char2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DLayeredLod(texture<uchar2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DLayeredLod(texture<char4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DLayeredLod(texture<uchar4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLayeredLod(texture<short, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLayeredLod(texture<unsigned short, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DLayeredLod(texture<short1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DLayeredLod(texture<ushort1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DLayeredLod(texture<short2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DLayeredLod(texture<ushort2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DLayeredLod(texture<short4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DLayeredLod(texture<ushort4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_ushort4") ;
#line 1610 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"










#line 1621 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) char tex2DLayeredLod(texture<char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_char_as_schar") ;
#line 1623 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) signed char tex2DLayeredLod(texture<signed char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned char tex2DLayeredLod(texture<unsigned char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) char1 tex2DLayeredLod(texture<char1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar1 tex2DLayeredLod(texture<uchar1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) char2 tex2DLayeredLod(texture<char2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar2 tex2DLayeredLod(texture<uchar2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 tex2DLayeredLod(texture<char4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 tex2DLayeredLod(texture<uchar4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) short tex2DLayeredLod(texture<short, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned short tex2DLayeredLod(texture<unsigned short, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) short1 tex2DLayeredLod(texture<short1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort1 tex2DLayeredLod(texture<ushort1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) short2 tex2DLayeredLod(texture<short2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort2 tex2DLayeredLod(texture<ushort2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 tex2DLayeredLod(texture<short4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 tex2DLayeredLod(texture<ushort4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_ushort4") ;

__declspec(__device__) __declspec(__cudart_builtin__) int tex2DLayeredLod(texture<int, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned int tex2DLayeredLod(texture<unsigned int, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) int1 tex2DLayeredLod(texture<int1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint1 tex2DLayeredLod(texture<uint1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) int2 tex2DLayeredLod(texture<int2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint2 tex2DLayeredLod(texture<uint2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 tex2DLayeredLod(texture<int4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 tex2DLayeredLod(texture<uint4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_uint4") ;

static __declspec(__device__) __forceinline long tex2DLayeredLod(texture<long, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int __tex2DLayeredLod_long_as_int(texture<long, 0xF2, cudaReadModeElementType>, float, float, int, float)  asm("__tex2DLayeredLod_long_as_int");
  return __tex2DLayeredLod_long_as_int(t, x, y, layer, level);
}

static __declspec(__device__) __forceinline unsigned long tex2DLayeredLod(texture<unsigned long, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  unsigned int __tex2DLayeredLod_ulong_as_uint(texture<unsigned long, 0xF2, cudaReadModeElementType>, float, float, int, float)  asm("__tex2DLayeredLod_ulong_as_uint");
  return __tex2DLayeredLod_ulong_as_uint(t, x, y, layer, level);
}

static __declspec(__device__) __forceinline long1 tex2DLayeredLod(texture<long1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int1 __tex2DLayeredLod_long1_as_int1(texture<long1, 0xF2, cudaReadModeElementType>, float, float, int, float)  asm("__tex2DLayeredLod_long1_as_int1");
  int1 v = __tex2DLayeredLod_long1_as_int1(t, x, y, layer, level);

  return make_long1(v.x);
}

static __declspec(__device__) __forceinline ulong1 tex2DLayeredLod(texture<ulong1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint1 __tex2DLayeredLod_ulong1_as_uint1(texture<ulong1, 0xF2, cudaReadModeElementType>, float, float, int, float)  asm("__tex2DLayeredLod_ulong1_as_uint1");
  uint1 v = __tex2DLayeredLod_ulong1_as_uint1(t, x, y, layer, level);

  return make_ulong1(v.x);
}

static __declspec(__device__) __forceinline long2 tex2DLayeredLod(texture<long2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int2 __tex2DLayeredLod_long2_as_int2(texture<long2, 0xF2, cudaReadModeElementType>, float, float, int, float)  asm("__tex2DLayeredLod_long2_as_int2");
  int2 v = __tex2DLayeredLod_long2_as_int2(t, x, y, layer, level);

  return make_long2(v.x, v.y);
}

static __declspec(__device__) __forceinline ulong2 tex2DLayeredLod(texture<ulong2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint2 __tex2DLayeredLod_ulong2_as_uint2(texture<ulong2, 0xF2, cudaReadModeElementType>, float, float, int, float)  asm("__tex2DLayeredLod_ulong2_as_uint2");
  uint2 v = __tex2DLayeredLod_ulong2_as_uint2(t, x, y, layer, level);

  return make_ulong2(v.x, v.y);
}

static __declspec(__device__) __forceinline long4 tex2DLayeredLod(texture<long4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int4 __tex2DLayeredLod_long4_as_int4(texture<long4, 0xF2, cudaReadModeElementType>, float, float, int, float)  asm("__tex2DLayeredLod_long4_as_int4");
  int4 v = __tex2DLayeredLod_long4_as_int4(t, x, y, layer, level);

  return make_long4(v.x, v.y, v.z, v.w);
}

static __declspec(__device__) __forceinline ulong4 tex2DLayeredLod(texture<ulong4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint4 __tex2DLayeredLod_ulong4_as_uint4(texture<ulong4, 0xF2, cudaReadModeElementType>, float, float, int, float)  asm("__tex2DLayeredLod_ulong4_as_uint4");
  uint4 v = __tex2DLayeredLod_ulong4_as_uint4(t, x, y, layer, level);

  return make_ulong4(v.x, v.y, v.z, v.w);
}
#line 1710 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLayeredLod(texture<float, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DLayeredLod(texture<float1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DLayeredLod(texture<float2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DLayeredLod(texture<float4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_float4") ;



#line 1718 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLayeredLod(texture<char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_char_as_schar") ;
#line 1720 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLayeredLod(texture<signed char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLayeredLod(texture<unsigned char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DLayeredLod(texture<char1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DLayeredLod(texture<uchar1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DLayeredLod(texture<char2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DLayeredLod(texture<uchar2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DLayeredLod(texture<char4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DLayeredLod(texture<uchar4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLayeredLod(texture<short, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLayeredLod(texture<unsigned short, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DLayeredLod(texture<short1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DLayeredLod(texture<ushort1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DLayeredLod(texture<short2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DLayeredLod(texture<ushort2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DLayeredLod(texture<short4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DLayeredLod(texture<ushort4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_ushort4") ;
#line 1738 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"










#line 1749 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) char tex3DLod(texture<char, 0x03,  cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_char_as_schar") ;
#line 1751 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) signed char tex3DLod(texture<signed char, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned char tex3DLod(texture<unsigned char, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) char1 tex3DLod(texture<char1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar1 tex3DLod(texture<uchar1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) char2 tex3DLod(texture<char2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar2 tex3DLod(texture<uchar2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 tex3DLod(texture<char4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 tex3DLod(texture<uchar4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) short tex3DLod(texture<short, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned short tex3DLod(texture<unsigned short, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) short1 tex3DLod(texture<short1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort1 tex3DLod(texture<ushort1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) short2 tex3DLod(texture<short2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort2 tex3DLod(texture<ushort2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 tex3DLod(texture<short4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 tex3DLod(texture<ushort4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_ushort4") ;

__declspec(__device__) __declspec(__cudart_builtin__) int tex3DLod(texture<int, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned int tex3DLod(texture<unsigned int, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) int1 tex3DLod(texture<int1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint1 tex3DLod(texture<uint1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) int2 tex3DLod(texture<int2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint2 tex3DLod(texture<uint2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 tex3DLod(texture<int4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 tex3DLod(texture<uint4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_uint4") ;

static __declspec(__device__) __forceinline long tex3DLod(texture<long, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int __tex3DLod_long_as_int(texture<long, 0x03, cudaReadModeElementType>, float, float, float, float)  asm("__tex3DLod_long_as_int");
  return __tex3DLod_long_as_int(t, x, y, z, level);
}

static __declspec(__device__) __forceinline unsigned long tex3DLod(texture<unsigned long, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  unsigned int __tex3DLod_ulong_as_uint(texture<unsigned long, 0x03, cudaReadModeElementType>, float, float, float, float)  asm("__tex3DLod_ulong_as_uint");
  return __tex3DLod_ulong_as_uint(t, x, y, z, level);
}

static __declspec(__device__) __forceinline long1 tex3DLod(texture<long1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int1 __tex3DLod_long1_as_int1(texture<long1, 0x03, cudaReadModeElementType>, float, float, float, float)  asm("__tex3DLod_long1_as_int1");
  int1 v = __tex3DLod_long1_as_int1(t, x, y, z, level);

  return make_long1(v.x);
}

static __declspec(__device__) __forceinline ulong1 tex3DLod(texture<ulong1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint1 __tex3DLod_ulong1_as_uint1(texture<ulong1, 0x03, cudaReadModeElementType>, float, float, float, float)  asm("__tex3DLod_ulong1_as_uint1");
  uint1 v = __tex3DLod_ulong1_as_uint1(t, x, y, z, level);

  return make_ulong1(v.x);
}

static __declspec(__device__) __forceinline long2 tex3DLod(texture<long2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int2 __tex3DLod_long2_as_int2(texture<long2, 0x03, cudaReadModeElementType>, float, float, float, float)  asm("__tex3DLod_long2_as_int2");
  int2 v = __tex3DLod_long2_as_int2(t, x, y, z, level);

  return make_long2(v.x, v.y);
}

static __declspec(__device__) __forceinline ulong2 tex3DLod(texture<ulong2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint2 __tex3DLod_ulong2_as_uint2(texture<ulong2, 0x03, cudaReadModeElementType>, float, float, float, float)  asm("__tex3DLod_ulong2_as_uint2");
  uint2 v = __tex3DLod_ulong2_as_uint2(t, x, y, z, level);

  return make_ulong2(v.x, v.y);
}

static __declspec(__device__) __forceinline long4 tex3DLod(texture<long4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int4 __tex3DLod_long4_as_int4(texture<long4, 0x03, cudaReadModeElementType>, float, float, float, float)  asm("__tex3DLod_long4_as_int4");
  int4 v = __tex3DLod_long4_as_int4(t, x, y, z, level);

  return make_long4(v.x, v.y, v.z, v.w);
}

static __declspec(__device__) __forceinline ulong4 tex3DLod(texture<ulong4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint4 __tex3DLod_ulong4_as_uint4(texture<ulong4, 0x03, cudaReadModeElementType>, float, float, float, float)  asm("__tex3DLod_ulong4_as_uint4");
  uint4 v = __tex3DLod_ulong4_as_uint4(t, x, y, z, level);

  return make_ulong4(v.x, v.y, v.z, v.w);
}
#line 1838 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex3DLod(texture<float, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex3DLod(texture<float1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex3DLod(texture<float2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex3DLod(texture<float4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_float4") ;



#line 1846 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex3DLod(texture<char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_char_as_schar") ;
#line 1848 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex3DLod(texture<signed char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex3DLod(texture<unsigned char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex3DLod(texture<char1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex3DLod(texture<uchar1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex3DLod(texture<char2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex3DLod(texture<uchar2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex3DLod(texture<char4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex3DLod(texture<uchar4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) float tex3DLod(texture<short, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex3DLod(texture<unsigned short, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex3DLod(texture<short1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex3DLod(texture<ushort1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex3DLod(texture<short2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex3DLod(texture<ushort2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex3DLod(texture<short4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex3DLod(texture<ushort4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_ushort4") ;
#line 1866 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"










#line 1877 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) char texCubemapLod(texture<char, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_char_as_schar") ;
#line 1879 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) signed char texCubemapLod(texture<signed char, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned char texCubemapLod(texture<unsigned char, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) char1 texCubemapLod(texture<char1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar1 texCubemapLod(texture<uchar1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) char2 texCubemapLod(texture<char2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar2 texCubemapLod(texture<uchar2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 texCubemapLod(texture<char4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 texCubemapLod(texture<uchar4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) short texCubemapLod(texture<short, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned short texCubemapLod(texture<unsigned short, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) short1 texCubemapLod(texture<short1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort1 texCubemapLod(texture<ushort1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) short2 texCubemapLod(texture<short2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort2 texCubemapLod(texture<ushort2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 texCubemapLod(texture<short4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 texCubemapLod(texture<ushort4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_ushort4") ;

__declspec(__device__) __declspec(__cudart_builtin__) int texCubemapLod(texture<int, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned int texCubemapLod(texture<unsigned int, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) int1 texCubemapLod(texture<int1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint1 texCubemapLod(texture<uint1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) int2 texCubemapLod(texture<int2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint2 texCubemapLod(texture<uint2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 texCubemapLod(texture<int4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 texCubemapLod(texture<uint4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_uint4") ;

static __declspec(__device__) __forceinline long texCubemapLod(texture<long, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int __texCubemapLod_long_as_int(texture<long, 0x0C, cudaReadModeElementType>, float, float, float, float)  asm("__texCubemapLod_long_as_int");
  return __texCubemapLod_long_as_int(t, x, y, z, level);
}

static __declspec(__device__) __forceinline unsigned long texCubemapLod(texture<unsigned long, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  unsigned int __texCubemapLod_ulong_as_uint(texture<unsigned long, 0x0C, cudaReadModeElementType>, float, float, float, float)  asm("__texCubemapLod_ulong_as_uint");
  return __texCubemapLod_ulong_as_uint(t, x, y, z, level);
}

static __declspec(__device__) __forceinline long1 texCubemapLod(texture<long1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int1 __texCubemapLod_long1_as_int1(texture<long1, 0x0C, cudaReadModeElementType>, float, float, float, float)  asm("__texCubemapLod_long1_as_int1");
  int1 v = __texCubemapLod_long1_as_int1(t, x, y, z, level);

  return make_long1(v.x);
}

static __declspec(__device__) __forceinline ulong1 texCubemapLod(texture<ulong1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint1 __texCubemapLod_ulong1_as_uint1(texture<ulong1, 0x0C, cudaReadModeElementType>, float, float, float, float)  asm("__texCubemapLod_ulong1_as_uint1");
  uint1 v = __texCubemapLod_ulong1_as_uint1(t, x, y, z, level);

  return make_ulong1(v.x);
}

static __declspec(__device__) __forceinline long2 texCubemapLod(texture<long2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int2 __texCubemapLod_long2_as_int2(texture<long2, 0x0C, cudaReadModeElementType>, float, float, float, float)  asm("__texCubemapLod_long2_as_int2");
  int2 v = __texCubemapLod_long2_as_int2(t, x, y, z, level);

  return make_long2(v.x, v.y);
}

static __declspec(__device__) __forceinline ulong2 texCubemapLod(texture<ulong2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint2 __texCubemapLod_ulong2_as_uint2(texture<ulong2, 0x0C, cudaReadModeElementType>, float, float, float, float)  asm("__texCubemapLod_ulong2_as_uint2");
  uint2 v = __texCubemapLod_ulong2_as_uint2(t, x, y, z, level);

  return make_ulong2(v.x, v.y);
}

static __declspec(__device__) __forceinline long4 texCubemapLod(texture<long4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int4 __texCubemapLod_long4_as_int4(texture<long4, 0x0C, cudaReadModeElementType>, float, float, float, float)  asm("__texCubemapLod_long4_as_int4");
  int4 v = __texCubemapLod_long4_as_int4(t, x, y, z, level);

  return make_long4(v.x, v.y, v.z, v.w);
}

static __declspec(__device__) __forceinline ulong4 texCubemapLod(texture<ulong4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint4 __texCubemapLod_ulong4_as_uint4(texture<ulong4, 0x0C, cudaReadModeElementType>, float, float, float, float)  asm("__texCubemapLod_ulong4_as_uint4");
  uint4 v = __texCubemapLod_ulong4_as_uint4(t, x, y, z, level);

  return make_ulong4(v.x, v.y, v.z, v.w);
}
#line 1966 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float texCubemapLod(texture<float, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 texCubemapLod(texture<float1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 texCubemapLod(texture<float2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 texCubemapLod(texture<float4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_float4") ;



#line 1974 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float texCubemapLod(texture<char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_char_as_schar") ;
#line 1976 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float texCubemapLod(texture<signed char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float texCubemapLod(texture<unsigned char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 texCubemapLod(texture<char1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 texCubemapLod(texture<uchar1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 texCubemapLod(texture<char2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 texCubemapLod(texture<uchar2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 texCubemapLod(texture<char4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 texCubemapLod(texture<uchar4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) float texCubemapLod(texture<short, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) float texCubemapLod(texture<unsigned short, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 texCubemapLod(texture<short1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 texCubemapLod(texture<ushort1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 texCubemapLod(texture<short2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 texCubemapLod(texture<ushort2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 texCubemapLod(texture<short4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 texCubemapLod(texture<ushort4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_ushort4") ;
#line 1994 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"










#line 2005 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) char texCubemapLayeredLod(texture<char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_char_as_schar") ;
#line 2007 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) signed char texCubemapLayeredLod(texture<signed char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned char texCubemapLayeredLod(texture<unsigned char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) char1 texCubemapLayeredLod(texture<char1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar1 texCubemapLayeredLod(texture<uchar1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) char2 texCubemapLayeredLod(texture<char2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar2 texCubemapLayeredLod(texture<uchar2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 texCubemapLayeredLod(texture<char4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 texCubemapLayeredLod(texture<uchar4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) short texCubemapLayeredLod(texture<short, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned short texCubemapLayeredLod(texture<unsigned short, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) short1 texCubemapLayeredLod(texture<short1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort1 texCubemapLayeredLod(texture<ushort1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) short2 texCubemapLayeredLod(texture<short2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort2 texCubemapLayeredLod(texture<ushort2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 texCubemapLayeredLod(texture<short4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 texCubemapLayeredLod(texture<ushort4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_ushort4") ;

__declspec(__device__) __declspec(__cudart_builtin__) int texCubemapLayeredLod(texture<int, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned int texCubemapLayeredLod(texture<unsigned int, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) int1 texCubemapLayeredLod(texture<int1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint1 texCubemapLayeredLod(texture<uint1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) int2 texCubemapLayeredLod(texture<int2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint2 texCubemapLayeredLod(texture<uint2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 texCubemapLayeredLod(texture<int4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 texCubemapLayeredLod(texture<uint4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_uint4") ;

static __declspec(__device__) __forceinline long texCubemapLayeredLod(texture<long, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int __texCubemapLayeredLod_long_as_int(texture<long, 0xFC, cudaReadModeElementType>, float, float, float, int, float)  asm("__texCubemapLayeredLod_long_as_int");
  return  __texCubemapLayeredLod_long_as_int(t, x, y, z, layer, level);
}

static __declspec(__device__) __forceinline unsigned long texCubemapLayeredLod(texture<unsigned long, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  unsigned int __texCubemapLayeredLod_ulong_as_uint(texture<unsigned long, 0xFC, cudaReadModeElementType>, float, float, float, int, float)  asm("__texCubemapLayeredLod_ulong_as_uint");
  return  __texCubemapLayeredLod_ulong_as_uint(t, x, y, z, layer, level);
}

static __declspec(__device__) __forceinline long1 texCubemapLayeredLod(texture<long1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int1 __texCubemapLayeredLod_long1_as_int1(texture<long1, 0xFC, cudaReadModeElementType>, float, float, float, int, float)  asm("__texCubemapLayeredLod_long1_as_int1");
  int1 v = __texCubemapLayeredLod_long1_as_int1(t, x, y, z, layer, level);

  return make_long1(v.x);
}

static __declspec(__device__) __forceinline ulong1 texCubemapLayeredLod(texture<ulong1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint1 __texCubemapLayeredLod_ulong1_as_uint1(texture<ulong1, 0xFC, cudaReadModeElementType>, float, float, float, int, float)  asm("__texCubemapLayeredLod_ulong1_as_uint1");
  uint1 v = __texCubemapLayeredLod_ulong1_as_uint1(t, x, y, z, layer, level);

  return make_ulong1(v.x);
}

static __declspec(__device__) __forceinline long2 texCubemapLayeredLod(texture<long2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int2 __texCubemapLayeredLod_long2_as_int2(texture<long2, 0xFC, cudaReadModeElementType>, float, float, float, int, float)  asm("__texCubemapLayeredLod_long2_as_int2");
  int2 v = __texCubemapLayeredLod_long2_as_int2(t, x, y, z, layer, level);

  return make_long2(v.x, v.y);
}

static __declspec(__device__) __forceinline ulong2 texCubemapLayeredLod(texture<ulong2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint2 __texCubemapLayeredLod_ulong2_as_uint2(texture<ulong2, 0xFC, cudaReadModeElementType>, float, float, float, int, float)  asm("__texCubemapLayeredLod_ulong2_as_uint2");
  uint2 v = __texCubemapLayeredLod_ulong2_as_uint2(t, x, y, z, layer, level);

  return make_ulong2(v.x, v.y);
}

static __declspec(__device__) __forceinline long4 texCubemapLayeredLod(texture<long4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int4 __texCubemapLayeredLod_long4_as_int4(texture<long4, 0xFC, cudaReadModeElementType>, float, float, float, int, float)  asm("__texCubemapLayeredLod_long4_as_int4");
  int4 v = __texCubemapLayeredLod_long4_as_int4(t, x, y, z, layer, level);

  return make_long4(v.x, v.y, v.z, v.w);
}

static __declspec(__device__) __forceinline ulong4 texCubemapLayeredLod(texture<ulong4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint4 __texCubemapLayeredLod_ulong4_as_uint4(texture<ulong4, 0xFC, cudaReadModeElementType>, float, float, float, int, float)  asm("__texCubemapLayeredLod_ulong4_as_uint4");
  uint4 v = __texCubemapLayeredLod_ulong4_as_uint4(t, x, y, z, layer, level);

  return make_ulong4(v.x, v.y, v.z, v.w);
}
#line 2094 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float texCubemapLayeredLod(texture<float, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 texCubemapLayeredLod(texture<float1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 texCubemapLayeredLod(texture<float2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 texCubemapLayeredLod(texture<float4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_float4") ;



#line 2102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float texCubemapLayeredLod(texture<char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_char_as_schar") ;
#line 2104 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float texCubemapLayeredLod(texture<signed char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float texCubemapLayeredLod(texture<unsigned char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 texCubemapLayeredLod(texture<char1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 texCubemapLayeredLod(texture<uchar1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 texCubemapLayeredLod(texture<char2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 texCubemapLayeredLod(texture<uchar2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 texCubemapLayeredLod(texture<char4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 texCubemapLayeredLod(texture<uchar4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) float texCubemapLayeredLod(texture<short, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) float texCubemapLayeredLod(texture<unsigned short, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 texCubemapLayeredLod(texture<short1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 texCubemapLayeredLod(texture<ushort1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 texCubemapLayeredLod(texture<short2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 texCubemapLayeredLod(texture<ushort2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 texCubemapLayeredLod(texture<short4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 texCubemapLayeredLod(texture<ushort4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_ushort4") ;
#line 2122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"










#line 2133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) char tex1DGrad(texture<char, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_char_as_schar") ;
#line 2135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) signed char tex1DGrad(texture<signed char, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned char tex1DGrad(texture<unsigned char, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) char1 tex1DGrad(texture<char1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar1 tex1DGrad(texture<uchar1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) char2 tex1DGrad(texture<char2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar2 tex1DGrad(texture<uchar2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 tex1DGrad(texture<char4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 tex1DGrad(texture<uchar4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) short tex1DGrad(texture<short, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned short tex1DGrad(texture<unsigned short, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) short1 tex1DGrad(texture<short1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort1 tex1DGrad(texture<ushort1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) short2 tex1DGrad(texture<short2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort2 tex1DGrad(texture<ushort2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 tex1DGrad(texture<short4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 tex1DGrad(texture<ushort4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_ushort4") ;

__declspec(__device__) __declspec(__cudart_builtin__) int tex1DGrad(texture<int, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned int tex1DGrad(texture<unsigned int, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) int1 tex1DGrad(texture<int1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint1 tex1DGrad(texture<uint1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) int2 tex1DGrad(texture<int2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint2 tex1DGrad(texture<uint2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 tex1DGrad(texture<int4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 tex1DGrad(texture<uint4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_uint4") ;

static __declspec(__device__) __forceinline long tex1DGrad(texture<long, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int __tex1DGrad_long_as_int(texture<long, 0x01, cudaReadModeElementType>, float, float, float)  asm("__tex1DGrad_long_as_int");
  return __tex1DGrad_long_as_int(t, x, dPdx, dPdy);
}

static __declspec(__device__) __forceinline unsigned long tex1DGrad(texture<unsigned long, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  unsigned __tex1DGrad_ulong_as_uint(texture<unsigned long, 0x01, cudaReadModeElementType>, float, float, float)  asm("__tex1DGrad_ulong_as_uint");
  return __tex1DGrad_ulong_as_uint(t, x, dPdx, dPdy);
}

static __declspec(__device__) __forceinline long1 tex1DGrad(texture<long1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int1 __tex1DGrad_long1_as_int1(texture<long1, 0x01, cudaReadModeElementType>, float, float, float)  asm("__tex1DGrad_long1_as_int1");
  int1 v = __tex1DGrad_long1_as_int1(t, x, dPdx, dPdy);

  return make_long1(v.x);
}

static __declspec(__device__) __forceinline ulong1 tex1DGrad(texture<ulong1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint1 __tex1DGrad_ulong1_as_uint1(texture<ulong1, 0x01, cudaReadModeElementType>, float, float, float)  asm("__tex1DGrad_ulong1_as_uint1");
  uint1 v = __tex1DGrad_ulong1_as_uint1(t, x, dPdx, dPdy);

  return make_ulong1(v.x);
}

static __declspec(__device__) __forceinline long2 tex1DGrad(texture<long2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int2 __tex1DGrad_long2_as_int2(texture<long2, 0x01, cudaReadModeElementType>, float, float, float)  asm("__tex1DGrad_long2_as_int2");
  int2 v = __tex1DGrad_long2_as_int2(t, x, dPdx, dPdy);

  return make_long2(v.x, v.y);
}

static __declspec(__device__) __forceinline ulong2 tex1DGrad(texture<ulong2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint2 __tex1DGrad_ulong2_as_uint2(texture<ulong2, 0x01, cudaReadModeElementType>, float, float, float)  asm("__tex1DGrad_ulong2_as_uint2");
  uint2 v = __tex1DGrad_ulong2_as_uint2(t, x, dPdx, dPdy);

  return make_ulong2(v.x, v.y);
}

static __declspec(__device__) __forceinline long4 tex1DGrad(texture<long4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int4 __tex1DGrad_long4_as_int4(texture<long4, 0x01, cudaReadModeElementType>, float, float, float)  asm("__tex1DGrad_long4_as_int4");
  int4 v = __tex1DGrad_long4_as_int4(t, x, dPdx, dPdy);

  return make_long4(v.x, v.y, v.z, v.w);
}

static __declspec(__device__) __forceinline ulong4 tex1DGrad(texture<ulong4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint4 __tex1DGrad_ulong4_as_uint4(texture<ulong4, 0x01, cudaReadModeElementType>, float, float, float)  asm("__tex1DGrad_ulong4_as_uint4");
  uint4 v = __tex1DGrad_ulong4_as_uint4(t, x, dPdx, dPdy);

  return make_ulong4(v.x, v.y, v.z, v.w);
}
#line 2222 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DGrad(texture<float, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DGrad(texture<float1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DGrad(texture<float2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DGrad(texture<float4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_float4") ;



#line 2230 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DGrad(texture<char, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_char_as_schar") ;
#line 2232 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DGrad(texture<signed char, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DGrad(texture<unsigned char, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DGrad(texture<char1, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DGrad(texture<uchar1, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DGrad(texture<char2, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DGrad(texture<uchar2, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DGrad(texture<char4, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DGrad(texture<uchar4, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) float tex1DGrad(texture<short, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DGrad(texture<unsigned short, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DGrad(texture<short1, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DGrad(texture<ushort1, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DGrad(texture<short2, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DGrad(texture<ushort2, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DGrad(texture<short4, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DGrad(texture<ushort4, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_ushort4") ;
#line 2250 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"










#line 2261 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) char tex2DGrad(texture<char, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_char_as_schar") ;
#line 2263 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) signed char tex2DGrad(texture<signed char, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned char tex2DGrad(texture<unsigned char, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) char1 tex2DGrad(texture<char1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar1 tex2DGrad(texture<uchar1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) char2 tex2DGrad(texture<char2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar2 tex2DGrad(texture<uchar2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 tex2DGrad(texture<char4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 tex2DGrad(texture<uchar4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) short tex2DGrad(texture<short, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned short tex2DGrad(texture<unsigned short, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) short1 tex2DGrad(texture<short1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort1 tex2DGrad(texture<ushort1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) short2 tex2DGrad(texture<short2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort2 tex2DGrad(texture<ushort2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 tex2DGrad(texture<short4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 tex2DGrad(texture<ushort4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_ushort4") ;

__declspec(__device__) __declspec(__cudart_builtin__) int tex2DGrad(texture<int, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned int tex2DGrad(texture<unsigned int, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) int1 tex2DGrad(texture<int1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint1 tex2DGrad(texture<uint1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) int2 tex2DGrad(texture<int2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint2 tex2DGrad(texture<uint2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 tex2DGrad(texture<int4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 tex2DGrad(texture<uint4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_uint4") ;

static __declspec(__device__) __forceinline long tex2DGrad(texture<long, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int __tex2DGrad_long_as_int(texture<long, 0x02, cudaReadModeElementType>, float, float, float2, float2)  asm("__tex2DGrad_long_as_int");
  return __tex2DGrad_long_as_int(t, x, y, dPdx, dPdy);
}

static __declspec(__device__) __forceinline unsigned long tex2DGrad(texture<unsigned long, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__) unsigned int __tex2DGrad_ulong_as_uint(texture<unsigned long, 0x02, cudaReadModeElementType>, float, float, float2, float2)  asm("__tex2DGrad_ulong_as_uint");
  return __tex2DGrad_ulong_as_uint(t, x, y, dPdx, dPdy);
}

static __declspec(__device__) __forceinline long1 tex2DGrad(texture<long1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int1 __tex2DGrad_long1_as_int1(texture<long1, 0x02, cudaReadModeElementType>, float, float, float2, float2)  asm("__tex2DGrad_long1_as_int1");
  int1 v = __tex2DGrad_long1_as_int1(t, x, y, dPdx, dPdy);

  return make_long1(v.x);
}

static __declspec(__device__) __forceinline ulong1 tex2DGrad(texture<ulong1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint1 __tex2DGrad_ulong1_as_uint1(texture<ulong1, 0x02, cudaReadModeElementType>, float, float, float2, float2)  asm("__tex2DGrad_ulong1_as_uint1");
  uint1 v = __tex2DGrad_ulong1_as_uint1(t, x, y, dPdx, dPdy);

  return make_ulong1(v.x);
}

static __declspec(__device__) __forceinline long2 tex2DGrad(texture<long2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int2 __tex2DGrad_long2_as_int2(texture<long2, 0x02, cudaReadModeElementType>, float, float, float2, float2)  asm("__tex2DGrad_long2_as_int2");
  int2 v = __tex2DGrad_long2_as_int2(t, x, y, dPdx, dPdy);

  return make_long2(v.x, v.y);
}

static __declspec(__device__) __forceinline ulong2 tex2DGrad(texture<ulong2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint2 __tex2DGrad_ulong2_as_uint2(texture<ulong2, 0x02, cudaReadModeElementType>, float, float, float2, float2)  asm("__tex2DGrad_ulong2_as_uint2");
  uint2 v = __tex2DGrad_ulong2_as_uint2(t, x, y, dPdx, dPdy);

  return make_ulong2(v.x, v.y);
}

static __declspec(__device__) __forceinline long4 tex2DGrad(texture<long4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int4 __tex2DGrad_long4_as_int4(texture<long4, 0x02, cudaReadModeElementType>, float, float, float2, float2)  asm("__tex2DGrad_long4_as_int4");
  int4 v = __tex2DGrad_long4_as_int4(t, x, y, dPdx, dPdy);

  return make_long4(v.x, v.y, v.z, v.w);
}

static __declspec(__device__) __forceinline ulong4 tex2DGrad(texture<ulong4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint4 __tex2DGrad_ulong4_as_uint4(texture<ulong4, 0x02, cudaReadModeElementType>, float, float, float2, float2)  asm("__tex2DGrad_ulong4_as_uint4");
  uint4 v = __tex2DGrad_ulong4_as_uint4(t, x, y, dPdx, dPdy);

  return make_ulong4(v.x, v.y, v.z, v.w);
}
#line 2350 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DGrad(texture<float, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DGrad(texture<float1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DGrad(texture<float2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DGrad(texture<float4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_float4") ;



#line 2358 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DGrad(texture<char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_char_as_schar") ;
#line 2360 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DGrad(texture<signed char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DGrad(texture<unsigned char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DGrad(texture<char1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DGrad(texture<uchar1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DGrad(texture<char2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DGrad(texture<uchar2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DGrad(texture<char4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DGrad(texture<uchar4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) float tex2DGrad(texture<short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DGrad(texture<unsigned short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DGrad(texture<short1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DGrad(texture<ushort1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DGrad(texture<short2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DGrad(texture<ushort2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DGrad(texture<short4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DGrad(texture<ushort4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_ushort4") ;
#line 2378 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"










#line 2389 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) char tex1DLayeredGrad(texture<char, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_char_as_schar") ;
#line 2391 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) signed char tex1DLayeredGrad(texture<signed char, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned char tex1DLayeredGrad(texture<unsigned char, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) char1 tex1DLayeredGrad(texture<char1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar1 tex1DLayeredGrad(texture<uchar1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) char2 tex1DLayeredGrad(texture<char2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar2 tex1DLayeredGrad(texture<uchar2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 tex1DLayeredGrad(texture<char4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 tex1DLayeredGrad(texture<uchar4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) short tex1DLayeredGrad(texture<short, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned short tex1DLayeredGrad(texture<unsigned short, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) short1 tex1DLayeredGrad(texture<short1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort1 tex1DLayeredGrad(texture<ushort1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) short2 tex1DLayeredGrad(texture<short2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort2 tex1DLayeredGrad(texture<ushort2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 tex1DLayeredGrad(texture<short4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 tex1DLayeredGrad(texture<ushort4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_ushort4") ;

__declspec(__device__) __declspec(__cudart_builtin__) int tex1DLayeredGrad(texture<int, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned int tex1DLayeredGrad(texture<unsigned int, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) int1 tex1DLayeredGrad(texture<int1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint1 tex1DLayeredGrad(texture<uint1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) int2 tex1DLayeredGrad(texture<int2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint2 tex1DLayeredGrad(texture<uint2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 tex1DLayeredGrad(texture<int4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 tex1DLayeredGrad(texture<uint4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_uint4") ;

static __declspec(__device__) __forceinline long tex1DLayeredGrad(texture<long, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int __tex1DLayeredGrad_long_as_int(texture<long, 0xF1, cudaReadModeElementType>, float, int, float, float)  asm("__tex1DLayeredGrad_long_as_int");
  return __tex1DLayeredGrad_long_as_int(t, x, layer, dPdx, dPdy);
}

static __declspec(__device__) __forceinline unsigned long tex1DLayeredGrad(texture<unsigned long, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  unsigned int __tex1DLayeredGrad_ulong_as_uint(texture<unsigned long, 0xF1, cudaReadModeElementType>, float, int, float, float)  asm("__tex1DLayeredGrad_ulong_as_uint");
  return __tex1DLayeredGrad_ulong_as_uint(t, x, layer, dPdx, dPdy);
}

static __declspec(__device__) __forceinline long1 tex1DLayeredGrad(texture<long1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int1 __tex1DLayeredGrad_long1_as_int1(texture<long1, 0xF1, cudaReadModeElementType>, float, int, float, float)  asm("__tex1DLayeredGrad_long1_as_int1");
  int1 v = __tex1DLayeredGrad_long1_as_int1(t, x, layer, dPdx, dPdy);

  return make_long1(v.x);
}

static __declspec(__device__) __forceinline ulong1 tex1DLayeredGrad(texture<ulong1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint1 __tex1DLayeredGrad_ulong1_as_uint1(texture<ulong1, 0xF1, cudaReadModeElementType>, float, int, float, float)  asm("__tex1DLayeredGrad_ulong1_as_uint1");
  uint1 v = __tex1DLayeredGrad_ulong1_as_uint1(t, x, layer, dPdx, dPdy);

  return make_ulong1(v.x);
}

static __declspec(__device__) __forceinline long2 tex1DLayeredGrad(texture<long2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int2 __tex1DLayeredGrad_long2_as_int2(texture<long2, 0xF1, cudaReadModeElementType>, float, int, float, float)  asm("__tex1DLayeredGrad_long2_as_int2");
  int2 v = __tex1DLayeredGrad_long2_as_int2(t, x, layer, dPdx, dPdy);

  return make_long2(v.x, v.y);
}

static __declspec(__device__) __forceinline ulong2 tex1DLayeredGrad(texture<ulong2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint2 __tex1DLayeredGrad_ulong2_as_uint2(texture<ulong2, 0xF1, cudaReadModeElementType>, float, int, float, float)  asm("__tex1DLayeredGrad_ulong2_as_uint2");
  uint2 v = __tex1DLayeredGrad_ulong2_as_uint2(t, x, layer, dPdx, dPdy);

  return make_ulong2(v.x, v.y);
}

static __declspec(__device__) __forceinline long4 tex1DLayeredGrad(texture<long4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int4 __tex1DLayeredGrad_long4_as_int4(texture<long4, 0xF1, cudaReadModeElementType>, float, int, float, float)  asm("__tex1DLayeredGrad_long4_as_int4");
  int4 v = __tex1DLayeredGrad_long4_as_int4(t, x, layer, dPdx, dPdy);

  return make_long4(v.x, v.y, v.z, v.w);
}

static __declspec(__device__) __forceinline ulong4 tex1DLayeredGrad(texture<ulong4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint4 __tex1DLayeredGrad_ulong4_as_uint4(texture<ulong4, 0xF1, cudaReadModeElementType>, float, int, float, float)  asm("__tex1DLayeredGrad_ulong4_as_uint4");
  uint4 v = __tex1DLayeredGrad_ulong4_as_uint4(t, x, layer, dPdx, dPdy);

  return make_ulong4(v.x, v.y, v.z, v.w);
}
#line 2478 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLayeredGrad(texture<float, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DLayeredGrad(texture<float1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DLayeredGrad(texture<float2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DLayeredGrad(texture<float4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_float4") ;




#line 2487 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLayeredGrad(texture<char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_char_as_schar") ;
#line 2489 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLayeredGrad(texture<signed char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLayeredGrad(texture<unsigned char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DLayeredGrad(texture<char1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DLayeredGrad(texture<uchar1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DLayeredGrad(texture<char2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DLayeredGrad(texture<uchar2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DLayeredGrad(texture<char4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DLayeredGrad(texture<uchar4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLayeredGrad(texture<short, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLayeredGrad(texture<unsigned short, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DLayeredGrad(texture<short1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DLayeredGrad(texture<ushort1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DLayeredGrad(texture<short2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DLayeredGrad(texture<ushort2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DLayeredGrad(texture<short4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DLayeredGrad(texture<ushort4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_ushort4") ;
#line 2507 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"










#line 2518 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) char tex2DLayeredGrad(texture<char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_char_as_schar") ;
#line 2520 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) signed char tex2DLayeredGrad(texture<signed char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned char tex2DLayeredGrad(texture<unsigned char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) char1 tex2DLayeredGrad(texture<char1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar1 tex2DLayeredGrad(texture<uchar1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) char2 tex2DLayeredGrad(texture<char2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar2 tex2DLayeredGrad(texture<uchar2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 tex2DLayeredGrad(texture<char4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 tex2DLayeredGrad(texture<uchar4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) short tex2DLayeredGrad(texture<short, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned short tex2DLayeredGrad(texture<unsigned short, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) short1 tex2DLayeredGrad(texture<short1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort1 tex2DLayeredGrad(texture<ushort1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) short2 tex2DLayeredGrad(texture<short2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort2 tex2DLayeredGrad(texture<ushort2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 tex2DLayeredGrad(texture<short4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 tex2DLayeredGrad(texture<ushort4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_ushort4") ;

__declspec(__device__) __declspec(__cudart_builtin__) int tex2DLayeredGrad(texture<int, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned int tex2DLayeredGrad(texture<unsigned int, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) int1 tex2DLayeredGrad(texture<int1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint1 tex2DLayeredGrad(texture<uint1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) int2 tex2DLayeredGrad(texture<int2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint2 tex2DLayeredGrad(texture<uint2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 tex2DLayeredGrad(texture<int4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 tex2DLayeredGrad(texture<uint4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_uint4") ;

static __declspec(__device__) __forceinline long tex2DLayeredGrad(texture<long, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int __tex2DLayeredGrad_long_as_int(texture<long, 0xF2, cudaReadModeElementType>, float, float, int, float2, float2)  asm("__tex2DLayeredGrad_long_as_int");
  return  __tex2DLayeredGrad_long_as_int(t, x, y, layer, dPdx, dPdy);
}

static __declspec(__device__) __forceinline unsigned long tex2DLayeredGrad(texture<unsigned long, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  unsigned int __tex2DLayeredGrad_ulong_as_uint(texture<unsigned long, 0xF2, cudaReadModeElementType>, float, float, int, float2, float2)  asm("__tex2DLayeredGrad_ulong_as_uint");
  return  __tex2DLayeredGrad_ulong_as_uint(t, x, y, layer, dPdx, dPdy);
}

static __declspec(__device__) __forceinline long1 tex2DLayeredGrad(texture<long1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int1 __tex2DLayeredGrad_long1_as_int1(texture<long1, 0xF2, cudaReadModeElementType>, float, float, int, float2, float2)  asm("__tex2DLayeredGrad_long1_as_int1");
  int1 v = __tex2DLayeredGrad_long1_as_int1(t, x, y, layer, dPdx, dPdy);

  return make_long1(v.x);
}

static __declspec(__device__) __forceinline ulong1 tex2DLayeredGrad(texture<ulong1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint1 __tex2DLayeredGrad_ulong1_as_uint1(texture<ulong1, 0xF2, cudaReadModeElementType>, float, float, int, float2, float2)  asm("__tex2DLayeredGrad_ulong1_as_uint1");
  uint1 v = __tex2DLayeredGrad_ulong1_as_uint1(t, x, y, layer, dPdx, dPdy);

  return make_ulong1(v.x);
}

static __declspec(__device__) __forceinline long2 tex2DLayeredGrad(texture<long2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int2 __tex2DLayeredGrad_long2_as_int2(texture<long2, 0xF2, cudaReadModeElementType>, float, float, int, float2, float2)  asm("__tex2DLayeredGrad_long2_as_int2");
  int2 v = __tex2DLayeredGrad_long2_as_int2(t, x, y, layer, dPdx, dPdy);

  return make_long2(v.x, v.y);
}

static __declspec(__device__) __forceinline ulong2 tex2DLayeredGrad(texture<ulong2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint2 __tex2DLayeredGrad_ulong2_as_uint2(texture<ulong2, 0xF2, cudaReadModeElementType>, float, float, int, float2, float2)  asm("__tex2DLayeredGrad_ulong2_as_uint2");
  uint2 v = __tex2DLayeredGrad_ulong2_as_uint2(t, x, y, layer, dPdx, dPdy);

  return make_ulong2(v.x, v.y);
}

static __declspec(__device__) __forceinline long4 tex2DLayeredGrad(texture<long4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int4 __tex2DLayeredGrad_long4_as_int4(texture<long4, 0xF2, cudaReadModeElementType>, float, float, int, float2, float2)  asm("__tex2DLayeredGrad_long4_as_int4");
  int4 v = __tex2DLayeredGrad_long4_as_int4(t, x, y, layer, dPdx, dPdy);

  return make_long4(v.x, v.y, v.z, v.w);
}

static __declspec(__device__) __forceinline ulong4 tex2DLayeredGrad(texture<ulong4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint4 __tex2DLayeredGrad_ulong4_as_uint4(texture<ulong4, 0xF2, cudaReadModeElementType>, float, float, int, float2, float2)  asm("__tex2DLayeredGrad_ulong4_as_uint4");
  uint4 v = __tex2DLayeredGrad_ulong4_as_uint4(t, x, y, layer, dPdx, dPdy);

  return make_ulong4(v.x, v.y, v.z, v.w);
}
#line 2607 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLayeredGrad(texture<float, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DLayeredGrad(texture<float1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DLayeredGrad(texture<float2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DLayeredGrad(texture<float4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_float4") ;



#line 2615 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLayeredGrad(texture<char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_char_as_schar") ;
#line 2617 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLayeredGrad(texture<signed char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLayeredGrad(texture<unsigned char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DLayeredGrad(texture<char1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DLayeredGrad(texture<uchar1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DLayeredGrad(texture<char2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DLayeredGrad(texture<uchar2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DLayeredGrad(texture<char4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DLayeredGrad(texture<uchar4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLayeredGrad(texture<short, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLayeredGrad(texture<unsigned short, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DLayeredGrad(texture<short1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DLayeredGrad(texture<ushort1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DLayeredGrad(texture<short2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DLayeredGrad(texture<ushort2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DLayeredGrad(texture<short4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DLayeredGrad(texture<ushort4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_ushort4") ;
#line 2635 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"










#line 2646 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) char tex3DGrad(texture<char, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_char_as_schar") ;
#line 2648 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) signed char tex3DGrad(texture<signed char, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned char tex3DGrad(texture<unsigned char, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) char1 tex3DGrad(texture<char1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar1 tex3DGrad(texture<uchar1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) char2 tex3DGrad(texture<char2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar2 tex3DGrad(texture<uchar2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 tex3DGrad(texture<char4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 tex3DGrad(texture<uchar4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) short tex3DGrad(texture<short, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned short tex3DGrad(texture<unsigned short, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) short1 tex3DGrad(texture<short1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort1 tex3DGrad(texture<ushort1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) short2 tex3DGrad(texture<short2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort2 tex3DGrad(texture<ushort2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 tex3DGrad(texture<short4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 tex3DGrad(texture<ushort4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_ushort4") ;

__declspec(__device__) __declspec(__cudart_builtin__) int tex3DGrad(texture<int, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned int tex3DGrad(texture<unsigned int, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) int1 tex3DGrad(texture<int1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint1 tex3DGrad(texture<uint1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) int2 tex3DGrad(texture<int2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint2 tex3DGrad(texture<uint2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 tex3DGrad(texture<int4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 tex3DGrad(texture<uint4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_uint4") ;

static __declspec(__device__) __forceinline long tex3DGrad(texture<long, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int __tex3DGrad_long_as_int(texture<long, 0x03, cudaReadModeElementType>, float, float, float, float4, float4)  asm("__tex3DGrad_long_as_int");
  return __tex3DGrad_long_as_int(t, x, y, z, dPdx, dPdy);
}

static __declspec(__device__) __forceinline unsigned long tex3DGrad(texture<unsigned long, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  unsigned int __tex3DGrad_ulong_as_uint(texture<unsigned long, 0x03, cudaReadModeElementType>, float, float, float, float4, float4)  asm("__tex3DGrad_ulong_as_uint");
  return __tex3DGrad_ulong_as_uint(t, x, y, z, dPdx, dPdy);

}

static __declspec(__device__) __forceinline long1 tex3DGrad(texture<long1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int1 __tex3DGrad_long1_as_int1(texture<long1, 0x03, cudaReadModeElementType>, float, float, float, float4, float4)  asm("__tex3DGrad_long1_as_int1");
  int1 v = __tex3DGrad_long1_as_int1(t, x, y, z, dPdx, dPdy);

  return make_long1(v.x);
}

static __declspec(__device__) __forceinline ulong1 tex3DGrad(texture<ulong1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint1 __tex3DGrad_ulong1_as_uint1(texture<ulong1, 0x03, cudaReadModeElementType>, float, float, float, float4, float4)  asm("__tex3DGrad_ulong1_as_uint1");
  uint1 v = __tex3DGrad_ulong1_as_uint1(t, x, y, z, dPdx, dPdy);

  return make_ulong1(v.x);
}

static __declspec(__device__) __forceinline long2 tex3DGrad(texture<long2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int2 __tex3DGrad_long2_as_int2(texture<long2, 0x03, cudaReadModeElementType>, float, float, float, float4, float4)  asm("__tex3DGrad_long2_as_int2");
  int2 v = __tex3DGrad_long2_as_int2(t, x, y, z, dPdx, dPdy);

  return make_long2(v.x, v.y);
}

static __declspec(__device__) __forceinline ulong2 tex3DGrad(texture<ulong2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint2 __tex3DGrad_ulong2_as_uint2(texture<ulong2, 0x03, cudaReadModeElementType>, float, float, float, float4, float4)  asm("__tex3DGrad_ulong2_as_uint2");
  uint2 v = __tex3DGrad_ulong2_as_uint2(t, x, y, z, dPdx, dPdy);

  return make_ulong2(v.x, v.y);
}

static __declspec(__device__) __forceinline long4 tex3DGrad(texture<long4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int4 __tex3DGrad_long4_as_int4(texture<long4, 0x03, cudaReadModeElementType>, float, float, float, float4, float4)  asm("__tex3DGrad_long4_as_int4");
  int4 v = __tex3DGrad_long4_as_int4(t, x, y, z, dPdx, dPdy);

  return make_long4(v.x, v.y, v.z, v.w);
}

static __declspec(__device__) __forceinline ulong4 tex3DGrad(texture<ulong4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint4 __tex3DGrad_ulong4_as_uint4(texture<ulong4, 0x03, cudaReadModeElementType>, float, float, float, float4, float4)  asm("__tex3DGrad_ulong4_as_uint4");
  uint4 v = __tex3DGrad_ulong4_as_uint4(t, x, y, z, dPdx, dPdy);

  return make_ulong4(v.x, v.y, v.z, v.w);
}
#line 2736 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex3DGrad(texture<float, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex3DGrad(texture<float1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex3DGrad(texture<float2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex3DGrad(texture<float4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_float4") ;



#line 2744 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex3DGrad(texture<char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_char_as_schar") ;
#line 2746 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex3DGrad(texture<signed char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex3DGrad(texture<unsigned char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex3DGrad(texture<char1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex3DGrad(texture<uchar1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex3DGrad(texture<char2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex3DGrad(texture<uchar2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex3DGrad(texture<char4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex3DGrad(texture<uchar4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) float tex3DGrad(texture<short, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex3DGrad(texture<unsigned short, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex3DGrad(texture<short1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex3DGrad(texture<ushort1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex3DGrad(texture<short2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex3DGrad(texture<ushort2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex3DGrad(texture<short4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex3DGrad(texture<ushort4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_ushort4") ;
#line 2764 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"

#line 2766 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"

#line 2768 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"


#line 4527 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.h"


















































































































































































#line 180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"













#line 74 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(char *, cudaTextureObject_t, int) asm("__itex1Dfetch_char_as_schar");
#line 76 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(signed char *, cudaTextureObject_t, int) asm("__itex1Dfetch_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(char1 *, cudaTextureObject_t, int) asm("__itex1Dfetch_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(char2 *, cudaTextureObject_t, int) asm("__itex1Dfetch_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(char4 *, cudaTextureObject_t, int) asm("__itex1Dfetch_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(unsigned char *, cudaTextureObject_t, int) asm("__itex1Dfetch_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(uchar1 *, cudaTextureObject_t, int) asm("__itex1Dfetch_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(uchar2 *, cudaTextureObject_t, int) asm("__itex1Dfetch_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(uchar4 *, cudaTextureObject_t, int) asm("__itex1Dfetch_uchar4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(short *, cudaTextureObject_t, int) asm("__itex1Dfetch_short");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(short1 *, cudaTextureObject_t, int) asm("__itex1Dfetch_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(short2 *, cudaTextureObject_t, int) asm("__itex1Dfetch_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(short4 *, cudaTextureObject_t, int) asm("__itex1Dfetch_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(unsigned short *, cudaTextureObject_t, int) asm("__itex1Dfetch_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(ushort1 *, cudaTextureObject_t, int) asm("__itex1Dfetch_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(ushort2 *, cudaTextureObject_t, int) asm("__itex1Dfetch_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(ushort4 *, cudaTextureObject_t, int) asm("__itex1Dfetch_ushort4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(int *, cudaTextureObject_t, int) asm("__itex1Dfetch_int");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(int1 *, cudaTextureObject_t, int) asm("__itex1Dfetch_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(int2 *, cudaTextureObject_t, int) asm("__itex1Dfetch_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(int4 *, cudaTextureObject_t, int) asm("__itex1Dfetch_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(unsigned int *, cudaTextureObject_t, int) asm("__itex1Dfetch_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(uint1 *, cudaTextureObject_t, int) asm("__itex1Dfetch_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(uint2 *, cudaTextureObject_t, int) asm("__itex1Dfetch_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(uint4 *, cudaTextureObject_t, int) asm("__itex1Dfetch_uint4");


__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(long *, cudaTextureObject_t, int) asm("__itex1Dfetch_long");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(long1 *, cudaTextureObject_t, int) asm("__itex1Dfetch_long1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(long2 *, cudaTextureObject_t, int) asm("__itex1Dfetch_long2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(long4 *, cudaTextureObject_t, int) asm("__itex1Dfetch_long4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(unsigned long *, cudaTextureObject_t, int) asm("__itex1Dfetch_ulong");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(ulong1 *, cudaTextureObject_t, int) asm("__itex1Dfetch_ulong1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(ulong2 *, cudaTextureObject_t, int) asm("__itex1Dfetch_ulong2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(ulong4 *, cudaTextureObject_t, int) asm("__itex1Dfetch_ulong4");
#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(float *, cudaTextureObject_t, int) asm("__itex1Dfetch_float");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(float1 *, cudaTextureObject_t, int) asm("__itex1Dfetch_float1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(float2 *, cudaTextureObject_t, int) asm("__itex1Dfetch_float2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(float4 *, cudaTextureObject_t, int) asm("__itex1Dfetch_float4");
#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"


template <class T>
static __declspec(__device__) T tex1Dfetch(cudaTextureObject_t texObject, int x)
{
  T ret;
  tex1Dfetch(&ret, texObject, x);
  return ret;
}













#line 142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(char *, cudaTextureObject_t, float) asm("__itex1D_char_as_schar");
#line 144 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(signed char *, cudaTextureObject_t, float) asm("__itex1D_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(char1 *, cudaTextureObject_t, float) asm("__itex1D_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(char2 *, cudaTextureObject_t, float) asm("__itex1D_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(char4 *, cudaTextureObject_t, float) asm("__itex1D_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(unsigned char *, cudaTextureObject_t, float) asm("__itex1D_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(uchar1 *, cudaTextureObject_t, float) asm("__itex1D_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(uchar2 *, cudaTextureObject_t, float) asm("__itex1D_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(uchar4 *, cudaTextureObject_t, float) asm("__itex1D_uchar4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(short *, cudaTextureObject_t, float) asm("__itex1D_short");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(short1 *, cudaTextureObject_t, float) asm("__itex1D_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(short2 *, cudaTextureObject_t, float) asm("__itex1D_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(short4 *, cudaTextureObject_t, float) asm("__itex1D_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(unsigned short *, cudaTextureObject_t, float) asm("__itex1D_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(ushort1 *, cudaTextureObject_t, float) asm("__itex1D_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(ushort2 *, cudaTextureObject_t, float) asm("__itex1D_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(ushort4 *, cudaTextureObject_t, float) asm("__itex1D_ushort4");


__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(int *, cudaTextureObject_t, float) asm("__itex1D_int");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(int1 *, cudaTextureObject_t, float) asm("__itex1D_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(int2 *, cudaTextureObject_t, float) asm("__itex1D_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(int4 *, cudaTextureObject_t, float) asm("__itex1D_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(unsigned int *, cudaTextureObject_t, float) asm("__itex1D_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(uint1 *, cudaTextureObject_t, float) asm("__itex1D_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(uint2 *, cudaTextureObject_t, float) asm("__itex1D_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(uint4 *, cudaTextureObject_t, float) asm("__itex1D_uint4");


__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(long *, cudaTextureObject_t, float) asm("__itex1D_long");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(long1 *, cudaTextureObject_t, float) asm("__itex1D_long1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(long2 *, cudaTextureObject_t, float) asm("__itex1D_long2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(long4 *, cudaTextureObject_t, float) asm("__itex1D_long4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(unsigned long *, cudaTextureObject_t, float) asm("__itex1D_ulong");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(ulong1 *, cudaTextureObject_t, float) asm("__itex1D_ulong1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(ulong2 *, cudaTextureObject_t, float) asm("__itex1D_ulong2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(ulong4 *, cudaTextureObject_t, float) asm("__itex1D_ulong4");
#line 183 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(float *, cudaTextureObject_t, float) asm("__itex1D_float");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(float1 *, cudaTextureObject_t, float) asm("__itex1D_float1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(float2 *, cudaTextureObject_t, float) asm("__itex1D_float2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(float4 *, cudaTextureObject_t, float) asm("__itex1D_float4");
#line 189 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

template <class T>
static __declspec(__device__) T tex1D(cudaTextureObject_t texObject, float x)
{
  T ret;
  tex1D(&ret, texObject, x);
  return ret;
}














#line 212 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(char *, cudaTextureObject_t, float, float) asm("__itex2D_char_as_schar");
#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(signed char *, cudaTextureObject_t, float, float) asm("__itex2D_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(char1 *, cudaTextureObject_t, float, float) asm("__itex2D_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(char2 *, cudaTextureObject_t, float, float) asm("__itex2D_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(char4 *, cudaTextureObject_t, float, float) asm("__itex2D_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(unsigned char *, cudaTextureObject_t, float, float) asm("__itex2D_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(uchar1 *, cudaTextureObject_t, float, float) asm("__itex2D_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(uchar2 *, cudaTextureObject_t, float, float) asm("__itex2D_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(uchar4 *, cudaTextureObject_t, float, float) asm("__itex2D_uchar4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(short *, cudaTextureObject_t, float, float) asm("__itex2D_short");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(short1 *, cudaTextureObject_t, float, float) asm("__itex2D_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(short2 *, cudaTextureObject_t, float, float) asm("__itex2D_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(short4 *, cudaTextureObject_t, float, float) asm("__itex2D_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(unsigned short *, cudaTextureObject_t, float, float) asm("__itex2D_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(ushort1 *, cudaTextureObject_t, float, float) asm("__itex2D_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(ushort2 *, cudaTextureObject_t, float, float) asm("__itex2D_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(ushort4 *, cudaTextureObject_t, float, float) asm("__itex2D_ushort4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(int *, cudaTextureObject_t, float, float) asm("__itex2D_int");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(int1 *, cudaTextureObject_t, float, float) asm("__itex2D_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(int2 *, cudaTextureObject_t, float, float) asm("__itex2D_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(int4 *, cudaTextureObject_t, float, float) asm("__itex2D_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(unsigned int *, cudaTextureObject_t, float, float) asm("__itex2D_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(uint1 *, cudaTextureObject_t, float, float) asm("__itex2D_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(uint2 *, cudaTextureObject_t, float, float) asm("__itex2D_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(uint4 *, cudaTextureObject_t, float, float) asm("__itex2D_uint4");


__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(long *, cudaTextureObject_t, float, float) asm("__itex2D_long");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(long1 *, cudaTextureObject_t, float, float) asm("__itex2D_long1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(long2 *, cudaTextureObject_t, float, float) asm("__itex2D_long2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(long4 *, cudaTextureObject_t, float, float) asm("__itex2D_long4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(unsigned long *, cudaTextureObject_t, float, float) asm("__itex2D_ulong");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(ulong1 *, cudaTextureObject_t, float, float) asm("__itex2D_ulong1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(ulong2 *, cudaTextureObject_t, float, float) asm("__itex2D_ulong2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(ulong4 *, cudaTextureObject_t, float, float) asm("__itex2D_ulong4");
#line 251 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(float *, cudaTextureObject_t, float, float) asm("__itex2D_float");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(float1 *, cudaTextureObject_t, float, float) asm("__itex2D_float1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(float2 *, cudaTextureObject_t, float, float) asm("__itex2D_float2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(float4 *, cudaTextureObject_t, float, float) asm("__itex2D_float4");
#line 257 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

template <class T>
static __declspec(__device__) T tex2D(cudaTextureObject_t texObject, float x, float y)
{
  T ret;
  tex2D(&ret, texObject, x, y);
  return ret;
}













#line 279 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(char *, cudaTextureObject_t, float, float, float) asm("__itex3D_char_as_schar");
#line 281 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(signed char *, cudaTextureObject_t, float, float, float) asm("__itex3D_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(char1 *, cudaTextureObject_t, float, float, float) asm("__itex3D_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(char2 *, cudaTextureObject_t, float, float, float) asm("__itex3D_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(char4 *, cudaTextureObject_t, float, float, float) asm("__itex3D_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(unsigned char *, cudaTextureObject_t, float, float, float) asm("__itex3D_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(uchar1 *, cudaTextureObject_t, float, float, float) asm("__itex3D_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(uchar2 *, cudaTextureObject_t, float, float, float) asm("__itex3D_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(uchar4 *, cudaTextureObject_t, float, float, float) asm("__itex3D_uchar4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(short *, cudaTextureObject_t, float, float, float) asm("__itex3D_short");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(short1 *, cudaTextureObject_t, float, float, float) asm("__itex3D_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(short2 *, cudaTextureObject_t, float, float, float) asm("__itex3D_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(short4 *, cudaTextureObject_t, float, float, float) asm("__itex3D_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(unsigned short *, cudaTextureObject_t, float, float, float) asm("__itex3D_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(ushort1 *, cudaTextureObject_t, float, float, float) asm("__itex3D_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(ushort2 *, cudaTextureObject_t, float, float, float) asm("__itex3D_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(ushort4 *, cudaTextureObject_t, float, float, float) asm("__itex3D_ushort4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(int *, cudaTextureObject_t, float, float, float) asm("__itex3D_int");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(int1 *, cudaTextureObject_t, float, float, float) asm("__itex3D_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(int2 *, cudaTextureObject_t, float, float, float) asm("__itex3D_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(int4 *, cudaTextureObject_t, float, float, float) asm("__itex3D_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(unsigned int *, cudaTextureObject_t, float, float, float) asm("__itex3D_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(uint1 *, cudaTextureObject_t, float, float, float) asm("__itex3D_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(uint2 *, cudaTextureObject_t, float, float, float) asm("__itex3D_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(uint4 *, cudaTextureObject_t, float, float, float) asm("__itex3D_uint4");


__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(long *, cudaTextureObject_t, float, float, float) asm("__itex3D_long");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(long1 *, cudaTextureObject_t, float, float, float) asm("__itex3D_long1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(long2 *, cudaTextureObject_t, float, float, float) asm("__itex3D_long2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(long4 *, cudaTextureObject_t, float, float, float) asm("__itex3D_long4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(unsigned long *, cudaTextureObject_t, float, float, float) asm("__itex3D_ulong");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(ulong1 *, cudaTextureObject_t, float, float, float) asm("__itex3D_ulong1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(ulong2 *, cudaTextureObject_t, float, float, float) asm("__itex3D_ulong2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(ulong4 *, cudaTextureObject_t, float, float, float) asm("__itex3D_ulong4");
#line 318 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(float *, cudaTextureObject_t, float, float, float) asm("__itex3D_float");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(float1 *, cudaTextureObject_t, float, float, float) asm("__itex3D_float1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(float2 *, cudaTextureObject_t, float, float, float) asm("__itex3D_float2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(float4 *, cudaTextureObject_t, float, float, float) asm("__itex3D_float4");
#line 324 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

template <class T>
static __declspec(__device__) T tex3D(cudaTextureObject_t texObject, float x, float y, float z)
{
  T ret;
  tex3D(&ret, texObject, x, y, z);
  return ret;
}














#line 347 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(char *, cudaTextureObject_t, float, int) asm("__itex1DLayered_char_as_schar");
#line 349 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(signed char *, cudaTextureObject_t, float, int) asm("__itex1DLayered_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(char1 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(char2 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(char4 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(unsigned char *, cudaTextureObject_t, float, int) asm("__itex1DLayered_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(uchar1 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(uchar2 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(uchar4 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_uchar4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(short *, cudaTextureObject_t, float, int) asm("__itex1DLayered_short");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(short1 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(short2 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(short4 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(unsigned short *, cudaTextureObject_t, float, int) asm("__itex1DLayered_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(ushort1 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(ushort2 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(ushort4 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_ushort4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(int *, cudaTextureObject_t, float, int) asm("__itex1DLayered_int");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(int1 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(int2 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(int4 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(unsigned int *, cudaTextureObject_t, float, int) asm("__itex1DLayered_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(uint1 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(uint2 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(uint4 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_uint4");


__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(long *, cudaTextureObject_t, float, int) asm("__itex1DLayered_long");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(long1 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_long1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(long2 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_long2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(long4 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_long4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(unsigned long *, cudaTextureObject_t, float, int) asm("__itex1DLayered_ulong");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(ulong1 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_ulong1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(ulong2 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_ulong2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(ulong4 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_ulong4");
#line 386 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(float *, cudaTextureObject_t, float, int) asm("__itex1DLayered_float");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(float1 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_float1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(float2 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_float2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(float4 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_float4");
#line 392 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

template <class T>
static __declspec(__device__) T tex1DLayered(cudaTextureObject_t texObject, float x, int layer)
{
  T ret;
  tex1DLayered(&ret, texObject, x, layer);
  return ret;
}














#line 415 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(char *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_char_as_schar");
#line 417 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(signed char *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(char1 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(char2 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(char4 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(unsigned char *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(uchar1 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(uchar2 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(uchar4 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_uchar4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(short *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_short");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(short1 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(short2 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(short4 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(unsigned short *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(ushort1 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(ushort2 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(ushort4 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_ushort4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(int *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_int");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(int1 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(int2 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(int4 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(unsigned int *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(uint1 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(uint2 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(uint4 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_uint4");


__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(long *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_long");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(long1 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_long1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(long2 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_long2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(long4 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_long4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(unsigned long *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_ulong");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(ulong1 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_ulong1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(ulong2 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_ulong2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(ulong4 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_ulong4");
#line 454 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(float *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_float");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(float1 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_float1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(float2 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_float2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(float4 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_float4");
#line 460 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

template <class T>
static __declspec(__device__) T tex2DLayered(cudaTextureObject_t texObject, float x, float y, int layer)
{
  T ret;
  tex2DLayered(&ret, texObject, x, y, layer);
  return ret;
}














#line 483 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(char *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_char_as_schar");
#line 485 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(signed char *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(char1 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(char2 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(char4 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(unsigned char *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(uchar1 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(uchar2 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(uchar4 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_uchar4");

__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(short *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_short");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(short1 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(short2 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(short4 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(unsigned short *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(ushort1 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(ushort2 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(ushort4 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_ushort4");

__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(int *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_int");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(int1 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(int2 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(int4 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(unsigned int *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(uint1 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(uint2 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(uint4 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_uint4");


__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(long *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_long");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(long1 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_long1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(long2 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_long2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(long4 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_long4");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(unsigned long *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_ulong");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(ulong1 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_ulong1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(ulong2 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_ulong2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(ulong4 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_ulong4");
#line 522 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(float *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_float");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(float1 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_float1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(float2 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_float2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(float4 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_float4");
#line 528 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

template <class T>
static __declspec(__device__) T texCubemap(cudaTextureObject_t texObject, float x, float y, float z)
{
  T ret;
  texCubemap(&ret, texObject, x, y, z);
  return ret;
}














#line 551 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(char *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_char_as_schar");
#line 553 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(signed char *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(char1 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(char2 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(char4 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(unsigned char *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(uchar1 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(uchar2 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(uchar4 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_uchar4");

__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(short *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_short");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(short1 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(short2 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(short4 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(unsigned short *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(ushort1 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(ushort2 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(ushort4 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_ushort4");

__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(int *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_int");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(int1 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(int2 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(int4 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(unsigned int *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(uint1 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(uint2 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(uint4 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_uint4");


__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(long *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_long");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(long1 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_long1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(long2 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_long2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(long4 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_long4");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(unsigned long *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_ulong");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(ulong1 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_ulong1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(ulong2 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_ulong2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(ulong4 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_ulong4");
#line 591 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(float *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_float");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(float1 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_float1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(float2 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_float2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(float4 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_float4");

#line 598 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template <class T>
static __declspec(__device__) T texCubemapLayered(cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
  T ret;
  texCubemapLayered(&ret, texObject, x, y, z, layer);
  return ret;
}












__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(char *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_char");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(signed char *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(char1 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(char2 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(char4 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(unsigned char *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(uchar1 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(uchar2 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(uchar4 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_uchar4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(short *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_short");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(short1 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(short2 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(short4 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(unsigned short *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(ushort1 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(ushort2 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(ushort4 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_ushort4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(int *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_int");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(int1 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(int2 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(int4 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(unsigned int *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(uint1 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(uint2 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(uint4 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_uint4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(long *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_long");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(long1 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_long1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(long2 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_long2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(long4 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_long4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(unsigned long *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_ulong");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(ulong1 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_ulong1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(ulong2 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_ulong2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(ulong4 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_ulong4");
#line 654 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(float *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_float");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(float1 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_float1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(float2 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_float2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(float4 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_float4");

#line 660 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template <class T>
static __declspec(__device__) T tex2Dgather(cudaTextureObject_t to, float x, float y, int comp = 0)
{
  T ret;
  tex2Dgather(&ret, to, x, y, comp);
  return ret;
}














#line 682 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(char *, cudaTextureObject_t, float, float) asm("__itex1DLod_char_as_schar");
#line 684 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(signed char *, cudaTextureObject_t, float, float) asm("__itex1DLod_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(char1 *, cudaTextureObject_t, float, float) asm("__itex1DLod_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(char2 *, cudaTextureObject_t, float, float) asm("__itex1DLod_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(char4 *, cudaTextureObject_t, float, float) asm("__itex1DLod_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(unsigned char *, cudaTextureObject_t, float, float) asm("__itex1DLod_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(uchar1 *, cudaTextureObject_t, float, float) asm("__itex1DLod_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(uchar2 *, cudaTextureObject_t, float, float) asm("__itex1DLod_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(uchar4 *, cudaTextureObject_t, float, float) asm("__itex1DLod_uchar4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(short *, cudaTextureObject_t, float, float) asm("__itex1DLod_short");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(short1 *, cudaTextureObject_t, float, float) asm("__itex1DLod_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(short2 *, cudaTextureObject_t, float, float) asm("__itex1DLod_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(short4 *, cudaTextureObject_t, float, float) asm("__itex1DLod_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(unsigned short *, cudaTextureObject_t, float, float) asm("__itex1DLod_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(ushort1 *, cudaTextureObject_t, float, float) asm("__itex1DLod_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(ushort2 *, cudaTextureObject_t, float, float) asm("__itex1DLod_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(ushort4 *, cudaTextureObject_t, float, float) asm("__itex1DLod_ushort4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(int *, cudaTextureObject_t, float, float) asm("__itex1DLod_int");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(int1 *, cudaTextureObject_t, float, float) asm("__itex1DLod_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(int2 *, cudaTextureObject_t, float, float) asm("__itex1DLod_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(int4 *, cudaTextureObject_t, float, float) asm("__itex1DLod_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(unsigned int *, cudaTextureObject_t, float, float) asm("__itex1DLod_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(uint1 *, cudaTextureObject_t, float, float) asm("__itex1DLod_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(uint2 *, cudaTextureObject_t, float, float) asm("__itex1DLod_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(uint4 *, cudaTextureObject_t, float, float) asm("__itex1DLod_uint4");


__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(long *, cudaTextureObject_t, float, float) asm("__itex1DLod_long");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(long1 *, cudaTextureObject_t, float, float) asm("__itex1DLod_long1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(long2 *, cudaTextureObject_t, float, float) asm("__itex1DLod_long2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(long4 *, cudaTextureObject_t, float, float) asm("__itex1DLod_long4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(unsigned long *, cudaTextureObject_t, float, float) asm("__itex1DLod_ulong");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(ulong1 *, cudaTextureObject_t, float, float) asm("__itex1DLod_ulong1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(ulong2 *, cudaTextureObject_t, float, float) asm("__itex1DLod_ulong2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(ulong4 *, cudaTextureObject_t, float, float) asm("__itex1DLod_ulong4");
#line 721 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(float *, cudaTextureObject_t, float, float) asm("__itex1DLod_float");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(float1 *, cudaTextureObject_t, float, float) asm("__itex1DLod_float1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(float2 *, cudaTextureObject_t, float, float) asm("__itex1DLod_float2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(float4 *, cudaTextureObject_t, float, float) asm("__itex1DLod_float4");
#line 727 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

template <class T>
static __declspec(__device__) T tex1DLod(cudaTextureObject_t texObject, float x, float level)
{
  T ret;
  tex1DLod(&ret, texObject, x, level);
  return ret;
}














#line 750 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(char *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_char_as_schar");
#line 752 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(signed char *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(char1 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(char2 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(char4 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(unsigned char *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(uchar1 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(uchar2 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(uchar4 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_uchar4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(short *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_short");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(short1 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(short2 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(short4 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(unsigned short *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(ushort1 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(ushort2 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(ushort4 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_ushort4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(int *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_int");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(int1 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(int2 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(int4 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(unsigned int *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(uint1 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(uint2 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(uint4 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_uint4");


__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(long *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_long");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(long1 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_long1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(long2 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_long2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(long4 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_long4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(unsigned long *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_ulong");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(ulong1 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_ulong1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(ulong2 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_ulong2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(ulong4 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_ulong4");
#line 790 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(float *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_float");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(float1 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_float1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(float2 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_float2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(float4 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_float4");
#line 796 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

template <class T>
static __declspec(__device__) T tex2DLod(cudaTextureObject_t texObject, float x, float y, float level)
{
  T ret;
  tex2DLod(&ret, texObject, x, y, level);
  return ret;
}














#line 819 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(char *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_char_as_schar");
#line 821 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(signed char *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(char1 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(char2 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(char4 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(unsigned char *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(uchar1 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(uchar2 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(uchar4 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_uchar4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(short *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_short");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(short1 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(short2 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(short4 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(unsigned short *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(ushort1 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(ushort2 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(ushort4 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_ushort4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(int *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_int");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(int1 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(int2 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(int4 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(unsigned int *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(uint1 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(uint2 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(uint4 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_uint4");


__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(long *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_long");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(long1 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_long1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(long2 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_long2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(long4 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_long4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(unsigned long *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_ulong");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(ulong1 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_ulong1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(ulong2 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_ulong2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(ulong4 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_ulong4");
#line 858 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(float *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_float");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(float1 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_float1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(float2 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_float2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(float4 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_float4");
#line 864 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

template <class T>
static __declspec(__device__) T tex3DLod(cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  T ret;
  tex3DLod(&ret, texObject, x, y, z, level);
  return ret;
}













#line 886 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(char *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_char_as_schar");
#line 888 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(signed char *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(char1 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(char2 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(char4 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(unsigned char *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(uchar1 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(uchar2 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(uchar4 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_uchar4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(short *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_short");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(short1 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(short2 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(short4 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(unsigned short *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(ushort1 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(ushort2 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(ushort4 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_ushort4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(int *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_int");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(int1 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(int2 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(int4 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(unsigned int *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(uint1 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(uint2 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(uint4 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_uint4");


__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(long *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_long");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(long1 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_long1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(long2 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_long2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(long4 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_long4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(unsigned long *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_ulong");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(ulong1 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_ulong1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(ulong2 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_ulong2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(ulong4 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_ulong4");
#line 925 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(float *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_float");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(float1 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_float1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(float2 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_float2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(float4 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_float4");
#line 931 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

template <class T>
static __declspec(__device__) T tex1DLayeredLod(cudaTextureObject_t texObject, float x, int layer, float level)
{
  T ret;
  tex1DLayeredLod(&ret, texObject, x, layer, level);
  return ret;
}














#line 954 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(char *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_char_as_schar");
#line 956 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(signed char *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(char1 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(char2 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(char4 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(unsigned char *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(uchar1 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(uchar2 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(uchar4 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_uchar4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(short *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_short");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(short1 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(short2 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(short4 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(unsigned short *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(ushort1 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(ushort2 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(ushort4 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_ushort4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(int *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_int");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(int1 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(int2 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(int4 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(unsigned int *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(uint1 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(uint2 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(uint4 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_uint4");


__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(long *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_long");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(long1 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_long1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(long2 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_long2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(long4 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_long4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(unsigned long *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_ulong");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(ulong1 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_ulong1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(ulong2 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_ulong2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(ulong4 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_ulong4");
#line 993 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(float *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_float");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(float1 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_float1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(float2 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_float2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(float4 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_float4");
#line 999 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

template <class T>
static __declspec(__device__) T tex2DLayeredLod(cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
  T ret;
  tex2DLayeredLod(&ret, texObject, x, y, layer, level);
  return ret;
}













#line 1021 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(char *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_char_as_schar");
#line 1023 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(signed char *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(char1 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(char2 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(char4 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(unsigned char *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(uchar1 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(uchar2 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(uchar4 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_uchar4");

__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(short *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_short");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(short1 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(short2 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(short4 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(unsigned short *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(ushort1 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(ushort2 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(ushort4 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_ushort4");

__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(int *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_int");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(int1 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(int2 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(int4 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(unsigned int *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(uint1 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(uint2 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(uint4 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_uint4");


__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(long *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_long");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(long1 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_long1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(long2 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_long2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(long4 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_long4");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(unsigned long *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_ulong");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(ulong1 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_ulong1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(ulong2 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_ulong2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(ulong4 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_ulong4");
#line 1060 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(float *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_float");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(float1 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_float1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(float2 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_float2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(float4 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_float4");
#line 1066 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

template <class T>
static __declspec(__device__) T texCubemapLod(cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  T ret;
  texCubemapLod(&ret, texObject, x, y, z, level);
  return ret;
}













#line 1088 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(char *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_char_as_schar");
#line 1090 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(signed char *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(char1 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(char2 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(char4 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(unsigned char *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(uchar1 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(uchar2 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(uchar4 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_uchar4");

__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(short *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_short");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(short1 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(short2 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(short4 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(unsigned short *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(ushort1 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(ushort2 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(ushort4 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_ushort4");

__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(int *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_int");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(int1 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(int2 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(int4 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(unsigned int *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(uint1 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(uint2 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(uint4 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_uint4");


__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(long *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_long");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(long1 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_long1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(long2 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_long2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(long4 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_long4");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(unsigned long *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_ulong");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(ulong1 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_ulong1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(ulong2 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_ulong2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(ulong4 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_ulong4");
#line 1127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(float *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_float");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(float1 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_float1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(float2 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_float2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(float4 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_float4");
#line 1133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

template <class T>
static __declspec(__device__) T texCubemapLayeredLod(cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
  T ret;
  texCubemapLayeredLod(&ret, texObject, x, y, z, layer, level);
  return ret;
}













#line 1155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(char *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_char_as_schar");
#line 1157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(signed char *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(char1 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(char2 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(char4 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(unsigned char *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(uchar1 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(uchar2 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(uchar4 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_uchar4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(short *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_short");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(short1 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(short2 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(short4 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(unsigned short *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(ushort1 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(ushort2 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(ushort4 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_ushort4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(int *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_int");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(int1 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(int2 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(int4 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(unsigned int *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(uint1 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(uint2 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(uint4 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_uint4");


__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(long *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_long");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(long1 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_long1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(long2 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_long2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(long4 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_long4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(unsigned long *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_ulong");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(ulong1 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_ulong1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(ulong2 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_ulong2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(ulong4 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_ulong4");
#line 1195 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(float *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_float");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(float1 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_float1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(float2 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_float2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(float4 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_float4");
#line 1201 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

template <class T>
static __declspec(__device__) T tex1DGrad(cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
  T ret;
  tex1DGrad(&ret, texObject, x, dPdx, dPdy);
  return ret;
}













#line 1223 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(char *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_char_as_schar");
#line 1225 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(signed char *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(char1 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(char2 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(char4 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(unsigned char *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(uchar1 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(uchar2 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(uchar4 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_uchar4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(short *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_short");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(short1 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(short2 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(short4 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(unsigned short *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(ushort1 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(ushort2 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(ushort4 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_ushort4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(int *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_int");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(int1 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(int2 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(int4 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(unsigned int *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(uint1 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(uint2 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(uint4 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_uint4");


__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(long *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_long");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(long1 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_long1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(long2 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_long2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(long4 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_long4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(unsigned long *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_ulong");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(ulong1 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_ulong1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(ulong2 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_ulong2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(ulong4 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_ulong4");
#line 1262 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(float *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_float");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(float1 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_float1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(float2 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_float2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(float4 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_float4");
#line 1268 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

template <class T>
static __declspec(__device__) T tex2DGrad(cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
  T ret;
  tex2DGrad(&ret, texObject, x, y, dPdx, dPdy);
  return ret;
}













#line 1290 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(char *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_char_as_schar");
#line 1292 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(signed char *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(char1 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(char2 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(char4 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(unsigned char *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(uchar1 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(uchar2 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(uchar4 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_uchar4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(short *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_short");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(short1 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(short2 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(short4 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(unsigned short *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(ushort1 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(ushort2 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(ushort4 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_ushort4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(int *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_int");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(int1 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(int2 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(int4 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(unsigned int *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(uint1 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(uint2 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(uint4 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_uint4");


__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(long *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_long");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(long1 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_long1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(long2 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_long2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(long4 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_long4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(unsigned long *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_ulong");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(ulong1 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_ulong1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(ulong2 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_ulong2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(ulong4 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_ulong4");
#line 1329 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(float *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_float");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(float1 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_float1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(float2 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_float2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(float4 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_float4");
#line 1335 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

template <class T>
static __declspec(__device__) T tex3DGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  T ret;
  tex3DGrad(&ret, texObject, x, y, z, dPdx, dPdy);
  return ret;
}













#line 1357 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(char *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_char_as_schar");
#line 1359 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(signed char *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(char1 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(char2 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(char4 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(unsigned char *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(uchar1 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(uchar2 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(uchar4 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_uchar4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(short *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_short");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(short1 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(short2 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(short4 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(unsigned short *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(ushort1 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(ushort2 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(ushort4 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_ushort4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(int *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_int");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(int1 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(int2 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(int4 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(unsigned int *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(uint1 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(uint2 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(uint4 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_uint4");


__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(long *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_long");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(long1 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_long1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(long2 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_long2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(long4 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_long4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(unsigned long *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_ulong");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(ulong1 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_ulong1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(ulong2 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_ulong2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(ulong4 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_ulong4");
#line 1397 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(float *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_float");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(float1 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_float1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(float2 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_float2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(float4 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_float4");
#line 1403 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

template <class T>
static __declspec(__device__) T tex1DLayeredGrad(cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
  T ret;
  tex1DLayeredGrad(&ret, texObject, x, layer, dPdx, dPdy);
  return ret;
}













#line 1425 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(char *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_char_as_schar");
#line 1427 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(signed char *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(char1 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(char2 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(char4 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(unsigned char *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(uchar1 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(uchar2 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(uchar4 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_uchar4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(short *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_short");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(short1 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(short2 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(short4 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(unsigned short *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(ushort1 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(ushort2 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(ushort4 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_ushort4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(int *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_int");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(int1 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(int2 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(int4 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(unsigned int *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(uint1 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(uint2 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(uint4 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_uint4");


__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(long *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_long");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(long1 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_long1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(long2 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_long2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(long4 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_long4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(unsigned long *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_ulong");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(ulong1 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_ulong1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(ulong2 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_ulong2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(ulong4 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_ulong4");
#line 1464 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(float *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_float");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(float1 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_float1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(float2 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_float2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(float4 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_float4");
#line 1470 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

template <class T>
static __declspec(__device__) T tex2DLayeredGrad(cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  T ret;
  tex2DLayeredGrad(&ret, texObject, x, y, layer, dPdx, dPdy);
  return ret;
}
#line 1479 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1480 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

#line 4528 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.h"


















































































































































































#line 180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"











__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(char *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_char");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(signed char *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(char1 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(unsigned char *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(uchar1 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(short *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_short");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(short1 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(unsigned short *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(ushort1 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(int *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_int");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(int1 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(unsigned int *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(uint1 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(long long *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_longlong");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(longlong1 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_longlong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(unsigned long long *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_ulonglong");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(ulonglong1 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_ulonglong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(float *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_float");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(float1 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_float1");

__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(char2 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(uchar2 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(short2 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(ushort2 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(int2 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(uint2 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(longlong2 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_longlong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(ulonglong2 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_ulonglong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(float2 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_float2");

__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(char4 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(uchar4 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_uchar4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(short4 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(ushort4 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_ushort4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(int4 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(uint4 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_uint4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(float4 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_float4");

#line 110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"

template <class T>
static __declspec(__device__) T surf1Dread(cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surf1Dread(&ret, surfObject, x, boundaryMode);
   return ret;
#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
}











__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(char *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_char");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(signed char *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(char1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(unsigned char *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(uchar1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(short *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_short");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(short1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(unsigned short *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(ushort1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(int *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_int");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(int1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(unsigned int *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(uint1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(long long *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_longlong");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(longlong1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_longlong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(unsigned long long *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_ulonglong");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(ulonglong1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_ulonglong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(float *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_float");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(float1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_float1");

__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(char2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(uchar2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(short2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(ushort2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(int2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(uint2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_uint2");

__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(longlong2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_longlong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(ulonglong2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_ulonglong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(float2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_float2");

__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(char4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(uchar4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_uchar4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(short4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(ushort4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_ushort4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(int4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(uint4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_uint4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(float4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_float4");

#line 171 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"

template <class T>
static __declspec(__device__) T surf2Dread(cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surf2Dread(&ret, surfObject, x, y, boundaryMode);
   return ret;
#line 180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
}











__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_char");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(signed char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(char1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(unsigned char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(uchar1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(short *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_short");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(short1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(unsigned short *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(ushort1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(int *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_int");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(int1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(unsigned int *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(uint1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(long long *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_longlong");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(longlong1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_longlong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(unsigned long long *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_ulonglong");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(ulonglong1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_ulonglong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(float *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_float");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(float1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_float1");

__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(char2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(uchar2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(short2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(ushort2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(int2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(uint2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(longlong2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_longlong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(ulonglong2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_ulonglong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(float2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_float2");

__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(char4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(uchar4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_uchar4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(short4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(ushort4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_ushort4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(int4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(uint4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_uint4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(float4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_float4");
#line 230 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"

template <class T>
static __declspec(__device__) T surf3Dread(cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surf3Dread(&ret, surfObject, x, y, z, boundaryMode);
   return ret;
#line 239 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
}










__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(char *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_char");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(signed char *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(char1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(unsigned char *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(uchar1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(short *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_short");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(short1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(unsigned short *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(ushort1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(int *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_int");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(int1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(unsigned int *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(uint1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(long long *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_longlong");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(longlong1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_longlong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(unsigned long long *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_ulonglong");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(ulonglong1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_ulonglong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(float *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_float");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(float1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_float1");

__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(char2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(uchar2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(short2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(ushort2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(int2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(uint2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(longlong2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_longlong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(ulonglong2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_ulonglong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(float2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_float2");


__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(char4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(uchar4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_uchar4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(short4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(ushort4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_ushort4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(int4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(uint4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_uint4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(float4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_float4");
#line 289 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"

template <class T>
static __declspec(__device__) T surf1DLayeredread(cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surf1DLayeredread(&ret, surfObject, x, layer, boundaryMode);
   return ret;
#line 298 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
}










__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_char");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(signed char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(char1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(unsigned char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(uchar1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(short *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_short");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(short1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(unsigned short *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(ushort1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(int *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_int");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(int1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(unsigned int *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(uint1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(long long *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_longlong");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(longlong1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_longlong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(unsigned long long *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_ulonglong");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(ulonglong1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_ulonglong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(float *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_float");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(float1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_float1");

__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(char2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(uchar2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(short2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(ushort2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(int2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(uint2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(longlong2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_longlong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(ulonglong2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_ulonglong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(float2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_float2");

__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(char4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(uchar4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_uchar4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(short4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(ushort4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_ushort4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(int4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(uint4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_uint4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(float4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_float4");
#line 347 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"

template <class T>
static __declspec(__device__) T surf2DLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surf2DLayeredread(&ret, surfObject, x, y, layer, boundaryMode);
   return ret;
#line 356 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
}










__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_char");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(signed char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(char1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(unsigned char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(uchar1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(short *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_short");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(short1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(unsigned short *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(ushort1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(int *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_int");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(int1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(unsigned int *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(uint1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(long long *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_longlong");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(longlong1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_longlong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(unsigned long long *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_ulonglong");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(ulonglong1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_ulonglong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(float *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_float");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(float1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_float1");

__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(char2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(uchar2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(short2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(ushort2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(int2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(uint2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(longlong2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_longlong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(ulonglong2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_ulonglong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(float2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_float2");

__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(char4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(uchar4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_uchar4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(short4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(ushort4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_ushort4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(int4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(uint4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_uint4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(float4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_float4");
#line 405 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"

template <class T>
static __declspec(__device__) T surfCubemapread(cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surfCubemapread(&ret, surfObject, face, x, y, boundaryMode);
   return ret;
#line 414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
}










__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_char");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(signed char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(char1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(unsigned char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(uchar1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(short *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_short");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(short1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(unsigned short *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(ushort1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(int *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_int");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(int1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(unsigned int *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(uint1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(long long *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_longlong");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(longlong1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_longlong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(unsigned long long *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_ulonglong");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(ulonglong1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_ulonglong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(float *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_float");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(float1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_float1");

__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(char2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(uchar2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(short2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(ushort2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(int2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(uint2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(longlong2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_longlong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(ulonglong2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_ulonglong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(float2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_float2");

__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(char4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(uchar4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_uchar4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(short4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(ushort4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_ushort4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(int4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(uint4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_uint4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(float4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_float4");
#line 463 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"

template <class T>
static __declspec(__device__) T surfCubemapLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surfCubemapLayeredread(&ret, surfObject, x, y, layerface, boundaryMode);
   return ret;
#line 472 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
}










__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(char, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_char");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(signed char, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(char1, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(unsigned char, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(uchar1, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(short, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_short");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(short1, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(unsigned short, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(ushort1, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(int, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_int");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(int1, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(unsigned int, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(uint1, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(long long, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_longlong");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(longlong1, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_longlong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(unsigned long long, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_ulonglong");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(ulonglong1, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_ulonglong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(float, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_float");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(float1, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_float1");

__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(char2, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(uchar2, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(short2, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(ushort2, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(int2, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(uint2, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(longlong2, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_longlong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(ulonglong2, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_ulonglong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(float2, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_float2");

__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(char4, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(uchar4, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_uchar4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(short4, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(ushort4, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_ushort4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(int4, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(uint4, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_uint4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(float4, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_float4");
#line 521 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"










__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(char, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_char");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(signed char, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(char1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(unsigned char, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(uchar1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(short, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_short");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(short1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(unsigned short, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(ushort1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(int, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_int");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(int1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(unsigned int, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(uint1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(long long, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_longlong");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(longlong1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_longlong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(unsigned long long, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_ulonglong");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(ulonglong1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_ulonglong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(float, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_float");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(float1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_float1");

__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(char2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(uchar2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(short2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(ushort2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(int2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(uint2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(longlong2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_longlong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(ulonglong2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_ulonglong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(float2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_float2");

__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(char4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(uchar4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_uchar4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(short4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(ushort4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_ushort4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(int4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(uint4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_uint4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(float4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_float4");
#line 569 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"










__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_char");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(signed char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(char1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(unsigned char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(uchar1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(short, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_short");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(short1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(unsigned short, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(ushort1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(int, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_int");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(int1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(unsigned int, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(uint1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(long long, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_longlong");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(longlong1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_longlong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(unsigned long long, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_ulonglong");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(ulonglong1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_ulonglong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(float, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_float");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(float1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_float1");


__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(char2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(uchar2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(short2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(ushort2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(int2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(uint2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(longlong2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_longlong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(ulonglong2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_ulonglong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(float2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_float2");

__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(char4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(uchar4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_uchar4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(short4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(ushort4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_ushort4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(int4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(uint4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_uint4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(float4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_float4");
#line 618 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"












__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(char, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_char");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(signed char, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(char1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(unsigned char, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(uchar1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(short, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_short");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(short1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(unsigned short, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(ushort1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(int, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_int");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(int1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(unsigned int, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(uint1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(long long, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_longlong");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(longlong1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_longlong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(unsigned long long, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_ulonglong");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(ulonglong1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_ulonglong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(float, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_float");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(float1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_float1");

__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(char2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(uchar2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(short2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(ushort2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(int2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(uint2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(longlong2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_longlong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(ulonglong2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_ulonglong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(float2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_float2");

__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(char4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(uchar4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_uchar4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(short4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(ushort4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_ushort4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(int4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(uint4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_uint4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(float4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_float4");
#line 668 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"










__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_char");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(signed char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(char1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(unsigned char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(uchar1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(short, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_short");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(short1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(unsigned short, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(ushort1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(int, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_int");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(int1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(unsigned int, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(uint1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(long long, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_longlong");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(longlong1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_longlong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(unsigned long long, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_ulonglong");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(ulonglong1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_ulonglong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(float, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_float");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(float1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_float1");

__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(char2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(uchar2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(short2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(ushort2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(int2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(uint2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(longlong2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_longlong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(ulonglong2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_ulonglong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(float2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_float2");

__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(char4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(uchar4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_uchar4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(short4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(ushort4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_ushort4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(int4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(uint4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_uint4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(float4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_float4");
#line 716 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"










__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_char");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(signed char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(char1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(unsigned char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(uchar1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(short, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_short");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(short1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(unsigned short, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(ushort1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(int, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_int");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(int1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(unsigned int, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(uint1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(long long, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_longlong");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(longlong1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_longlong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(unsigned long long, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_ulonglong");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(ulonglong1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_ulonglong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(float, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_float");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(float1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_float1");

__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(char2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(uchar2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(short2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(ushort2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(int2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(uint2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(longlong2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_longlong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(ulonglong2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_ulonglong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(float2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_float2");

__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(char4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(uchar4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_uchar4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(short4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(ushort4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_ushort4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(int4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(uint4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_uint4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(float4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_float4");
#line 764 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"










__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_char");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(signed char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(char1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(unsigned char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(uchar1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(short, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_short");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(short1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(unsigned short, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(ushort1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(int, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_int");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(int1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(unsigned int, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(uint1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(long long, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_longlong");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(longlong1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_longlong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(unsigned long long, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_ulonglong");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(ulonglong1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_ulonglong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(float, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_float");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(float1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_float1");

__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(char2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(uchar2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(short2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(ushort2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(int2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(uint2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(longlong2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_longlong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(ulonglong2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_ulonglong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(float2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_float2");

__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(char4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(uchar4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_uchar4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(short4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(ushort4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_ushort4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(int4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(uint4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_uint4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(float4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_float4");
#line 812 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"

#line 814 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"

#line 816 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"



#line 4529 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"

#line 4531 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"

#line 120 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"




















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 54 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"






#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"


#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"

#line 66 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"


extern "C" {
#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"

uint3 __declspec(__device_builtin__) extern const threadIdx;
uint3 __declspec(__device_builtin__) extern const blockIdx;
dim3 __declspec(__device_builtin__) extern const blockDim;
dim3 __declspec(__device_builtin__) extern const gridDim;
int __declspec(__device_builtin__) extern const warpSize;




}
#line 82 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"






#line 89 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"






#line 96 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"






#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"






#line 110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"






#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"

#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"
#line 121 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"





#line 127 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"


#line 130 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"

#line 132 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"



















































template<class T>
static __inline __declspec(__host__) cudaError_t cudaLaunchKernel(
  const T *func,
  dim3 gridDim,
  dim3 blockDim,
  void **args,
  size_t sharedMem = 0,
  cudaStream_t stream = 0
)
{
    return ::cudaLaunchKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream);
}


























template<class T>
static __inline __declspec(__host__) cudaError_t cudaSetupArgument(
  T      arg,
  size_t offset
)
{
  return ::cudaSetupArgument((const void*)&arg, sizeof(T), offset);
}































static __inline __declspec(__host__) cudaError_t cudaEventCreate(
  cudaEvent_t  *event,
  unsigned int  flags
)
{
  return ::cudaEventCreateWithFlags(event, flags);
}
























































static __inline __declspec(__host__) cudaError_t cudaMallocHost(
  void         **ptr,
  size_t         size,
  unsigned int   flags
)
{
  return ::cudaHostAlloc(ptr, size, flags);
}

template<class T>
static __inline __declspec(__host__) cudaError_t cudaHostAlloc(
  T            **ptr,
  size_t         size,
  unsigned int   flags
)
{
  return ::cudaHostAlloc((void**)(void*)ptr, size, flags);
}

template<class T>
static __inline __declspec(__host__) cudaError_t cudaHostGetDevicePointer(
  T            **pDevice,
  void          *pHost,
  unsigned int   flags
)
{
  return ::cudaHostGetDevicePointer((void**)(void*)pDevice, pHost, flags);
}


































































































template<class T>
static __inline __declspec(__host__) cudaError_t cudaMallocManaged(
  T            **devPtr,
  size_t         size,
  unsigned int   flags = 0x01
)
{
  return ::cudaMallocManaged((void**)(void*)devPtr, size, flags);
}






































































template<class T>
static __inline __declspec(__host__) cudaError_t cudaStreamAttachMemAsync(
  cudaStream_t   stream,
  T              *devPtr,
  size_t         length = 0,
  unsigned int   flags  = 0x04
)
{
  return ::cudaStreamAttachMemAsync(stream, (void*)devPtr, length, flags);
}

template<class T>
static __inline __declspec(__host__) cudaError_t cudaMalloc(
  T      **devPtr,
  size_t   size
)
{
  return ::cudaMalloc((void**)(void*)devPtr, size);
}

template<class T>
static __inline __declspec(__host__) cudaError_t cudaMallocHost(
  T            **ptr,
  size_t         size,
  unsigned int   flags = 0
)
{
  return cudaMallocHost((void**)(void*)ptr, size, flags);
}

template<class T>
static __inline __declspec(__host__) cudaError_t cudaMallocPitch(
  T      **devPtr,
  size_t  *pitch,
  size_t   width,
  size_t   height
)
{
  return ::cudaMallocPitch((void**)(void*)devPtr, pitch, width, height);
}




































template<class T>
static __inline __declspec(__host__) cudaError_t cudaMemcpyToSymbol(
  const T                   &symbol,
  const void                *src,
        size_t               count,
        size_t               offset = 0,
        enum cudaMemcpyKind  kind   = cudaMemcpyHostToDevice
)
{
  return ::cudaMemcpyToSymbol((const void*)&symbol, src, count, offset, kind);
}









































template<class T>
static __inline __declspec(__host__) cudaError_t cudaMemcpyToSymbolAsync(
  const T                   &symbol,
  const void                *src,
        size_t               count,
        size_t               offset = 0,
        enum cudaMemcpyKind  kind   = cudaMemcpyHostToDevice,
        cudaStream_t         stream = 0
)
{
  return ::cudaMemcpyToSymbolAsync((const void*)&symbol, src, count, offset, kind, stream);
}


































template<class T>
static __inline __declspec(__host__) cudaError_t cudaMemcpyFromSymbol(
        void                *dst,
  const T                   &symbol,
        size_t               count,
        size_t               offset = 0,
        enum cudaMemcpyKind  kind   = cudaMemcpyDeviceToHost
)
{
  return ::cudaMemcpyFromSymbol(dst, (const void*)&symbol, count, offset, kind);
}









































template<class T>
static __inline __declspec(__host__) cudaError_t cudaMemcpyFromSymbolAsync(
        void                *dst,
  const T                   &symbol,
        size_t               count,
        size_t               offset = 0,
        enum cudaMemcpyKind  kind   = cudaMemcpyDeviceToHost,
        cudaStream_t         stream = 0
)
{
  return ::cudaMemcpyFromSymbolAsync(dst, (const void*)&symbol, count, offset, kind, stream);
}





















template<class T>
static __inline __declspec(__host__) cudaError_t cudaGetSymbolAddress(
        void **devPtr,
  const T     &symbol
)
{
  return ::cudaGetSymbolAddress(devPtr, (const void*)&symbol);
}





















template<class T>
static __inline __declspec(__host__) cudaError_t cudaGetSymbolSize(
        size_t *size,
  const T      &symbol
)
{
  return ::cudaGetSymbolSize(size, (const void*)&symbol);
}



































template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline __declspec(__host__) cudaError_t cudaBindTexture(
        size_t                           *offset,
  const struct texture<T, dim, readMode> &tex,
  const void                             *devPtr,
  const struct cudaChannelFormatDesc     &desc,
        size_t                            size = 0xffffffff
)
{
  return ::cudaBindTexture(offset, &tex, devPtr, &desc, size);
}


































template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline __declspec(__host__) cudaError_t cudaBindTexture(
        size_t                           *offset,
  const struct texture<T, dim, readMode> &tex,
  const void                             *devPtr,
        size_t                            size = 0xffffffff
)
{
  return cudaBindTexture(offset, tex, devPtr, tex.channelDesc, size);
}














































template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline __declspec(__host__) cudaError_t cudaBindTexture2D(
        size_t                           *offset,
  const struct texture<T, dim, readMode> &tex,
  const void                             *devPtr,
  const struct cudaChannelFormatDesc     &desc,
  size_t                                  width,
  size_t                                  height,
  size_t                                  pitch
)
{
  return ::cudaBindTexture2D(offset, &tex, devPtr, &desc, width, height, pitch);
}













































template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline __declspec(__host__) cudaError_t cudaBindTexture2D(
        size_t                           *offset,
  const struct texture<T, dim, readMode> &tex,
  const void                             *devPtr,
  size_t                                  width,
  size_t                                  height,
  size_t                                  pitch
)
{
  return ::cudaBindTexture2D(offset, &tex, devPtr, &tex.channelDesc, width, height, pitch);
}






























template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline __declspec(__host__) cudaError_t cudaBindTextureToArray(
  const struct texture<T, dim, readMode> &tex,
  cudaArray_const_t                       array,
  const struct cudaChannelFormatDesc     &desc
)
{
  return ::cudaBindTextureToArray(&tex, array, &desc);
}





























template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline __declspec(__host__) cudaError_t cudaBindTextureToArray(
  const struct texture<T, dim, readMode> &tex,
  cudaArray_const_t                       array
)
{
  struct cudaChannelFormatDesc desc;
  cudaError_t                  err = ::cudaGetChannelDesc(&desc, array);

  return err == cudaSuccess ? cudaBindTextureToArray(tex, array, desc) : err;
}






























template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline __declspec(__host__) cudaError_t cudaBindTextureToMipmappedArray(
  const struct texture<T, dim, readMode> &tex,
  cudaMipmappedArray_const_t              mipmappedArray,
  const struct cudaChannelFormatDesc     &desc
)
{
  return ::cudaBindTextureToMipmappedArray(&tex, mipmappedArray, &desc);
}





























template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline __declspec(__host__) cudaError_t cudaBindTextureToMipmappedArray(
  const struct texture<T, dim, readMode> &tex,
  cudaMipmappedArray_const_t              mipmappedArray
)
{
  struct cudaChannelFormatDesc desc;
  cudaArray_t                  levelArray;
  cudaError_t                  err = ::cudaGetMipmappedArrayLevel(&levelArray, mipmappedArray, 0);
  
  if (err != cudaSuccess) {
      return err;
  }
  err = ::cudaGetChannelDesc(&desc, levelArray);

  return err == cudaSuccess ? cudaBindTextureToMipmappedArray(tex, mipmappedArray, desc) : err;
}






















template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline __declspec(__host__) cudaError_t cudaUnbindTexture(
  const struct texture<T, dim, readMode> &tex
)
{
  return ::cudaUnbindTexture(&tex);
}



























template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline __declspec(__host__) cudaError_t cudaGetTextureAlignmentOffset(
        size_t                           *offset,
  const struct texture<T, dim, readMode> &tex
)
{
  return ::cudaGetTextureAlignmentOffset(offset, &tex);
}












































template<class T>
static __inline __declspec(__host__) cudaError_t cudaFuncSetCacheConfig(
  T                  *func,
  enum cudaFuncCache  cacheConfig
)
{
  return ::cudaFuncSetCacheConfig((const void*)func, cacheConfig);
}

template<class T>
static __inline __declspec(__host__) cudaError_t cudaFuncSetSharedMemConfig(
  T                        *func,
  enum cudaSharedMemConfig  config
)
{
  return ::cudaFuncSetSharedMemConfig((const void*)func, config);
}




























template<class T>
static __inline __declspec(__host__) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(
    int   *numBlocks,
    T      func,
    int    blockSize,
    size_t dynamicSMemSize)
{
    return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void*)func, blockSize, dynamicSMemSize, 0x00);
}










































template<class T>
static __inline __declspec(__host__) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(
    int         *numBlocks,
    T            func,
    int          blockSize,
    size_t       dynamicSMemSize,
    unsigned int flags)
{
    return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void*)func, blockSize, dynamicSMemSize, flags);
}




class __cudaOccupancyB2DHelper {
  size_t n;
public:
  inline __declspec(__host__) __declspec(__device__) __cudaOccupancyB2DHelper(size_t n_) : n(n_) {}
  inline __declspec(__host__) __declspec(__device__) size_t operator()(int)
  {
      return n;
  }
};














































template<typename UnaryFunction, class T>
static __inline __declspec(__host__) __declspec(__device__) cudaError_t cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(
    int           *minGridSize,
    int           *blockSize,
    T              func,
    UnaryFunction  blockSizeToDynamicSMemSize,
    int            blockSizeLimit = 0,
    unsigned int   flags = 0)
{
    cudaError_t status;

    
    int                       device;
    struct cudaFuncAttributes attr;

    
    int maxThreadsPerMultiProcessor;
    int warpSize;
    int devMaxThreadsPerBlock;
    int multiProcessorCount;
    int funcMaxThreadsPerBlock;
    int occupancyLimit;
    int granularity;

    
    int maxBlockSize = 0;
    int numBlocks    = 0;
    int maxOccupancy = 0;

    
    int blockSizeToTryAligned;
    int blockSizeToTry;
    int blockSizeLimitAligned;
    int occupancyInBlocks;
    int occupancyInThreads;
    size_t dynamicSMemSize;

    
    
    

    if (!minGridSize || !blockSize || !func) {
        return cudaErrorInvalidValue;
    }

    
    
    

    status = ::cudaGetDevice(&device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaDeviceGetAttribute(
        &maxThreadsPerMultiProcessor,
        cudaDevAttrMaxThreadsPerMultiProcessor,
        device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaDeviceGetAttribute(
        &warpSize,
        cudaDevAttrWarpSize,
        device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaDeviceGetAttribute(
        &devMaxThreadsPerBlock,
        cudaDevAttrMaxThreadsPerBlock,
        device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaDeviceGetAttribute(
        &multiProcessorCount,
        cudaDevAttrMultiProcessorCount,
        device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaFuncGetAttributes(&attr, func);
    if (status != cudaSuccess) {
        return status;
    }
    
    funcMaxThreadsPerBlock = attr.maxThreadsPerBlock;

    
    
    

    occupancyLimit = maxThreadsPerMultiProcessor;
    granularity    = warpSize;

    if (blockSizeLimit == 0) {
        blockSizeLimit = devMaxThreadsPerBlock;
    }

    if (devMaxThreadsPerBlock < blockSizeLimit) {
        blockSizeLimit = devMaxThreadsPerBlock;
    }

    if (funcMaxThreadsPerBlock < blockSizeLimit) {
        blockSizeLimit = funcMaxThreadsPerBlock;
    }

    blockSizeLimitAligned = ((blockSizeLimit + (granularity - 1)) / granularity) * granularity;

    for (blockSizeToTryAligned = blockSizeLimitAligned; blockSizeToTryAligned > 0; blockSizeToTryAligned -= granularity) {
        
        
        
        if (blockSizeLimit < blockSizeToTryAligned) {
            blockSizeToTry = blockSizeLimit;
        } else {
            blockSizeToTry = blockSizeToTryAligned;
        }
        
        dynamicSMemSize = blockSizeToDynamicSMemSize(blockSizeToTry);

        status = cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(
            &occupancyInBlocks,
            func,
            blockSizeToTry,
            dynamicSMemSize,
            flags);

        if (status != cudaSuccess) {
            return status;
        }

        occupancyInThreads = blockSizeToTry * occupancyInBlocks;

        if (occupancyInThreads > maxOccupancy) {
            maxBlockSize = blockSizeToTry;
            numBlocks    = occupancyInBlocks;
            maxOccupancy = occupancyInThreads;
        }

        
        
        if (occupancyLimit == maxOccupancy) {
            break;
        }
    }

    
    
    

    
    
    *minGridSize = numBlocks * multiProcessorCount;
    *blockSize = maxBlockSize;

    return status;
}
































template<typename UnaryFunction, class T>
static __inline __declspec(__host__) __declspec(__device__) cudaError_t cudaOccupancyMaxPotentialBlockSizeVariableSMem(
    int           *minGridSize,
    int           *blockSize,
    T              func,
    UnaryFunction  blockSizeToDynamicSMemSize,
    int            blockSizeLimit = 0)
{
    return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, blockSizeToDynamicSMemSize, blockSizeLimit, 0x00);
}



































template<class T>
static __inline __declspec(__host__) __declspec(__device__) cudaError_t cudaOccupancyMaxPotentialBlockSize(
    int    *minGridSize,
    int    *blockSize,
    T       func,
    size_t  dynamicSMemSize = 0,
    int     blockSizeLimit = 0)
{
  return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, __cudaOccupancyB2DHelper(dynamicSMemSize), blockSizeLimit, 0x00);
}

















































template<class T>
static __inline __declspec(__host__) __declspec(__device__) cudaError_t cudaOccupancyMaxPotentialBlockSizeWithFlags(
    int    *minGridSize,
    int    *blockSize,
    T      func,
    size_t dynamicSMemSize = 0,
    int    blockSizeLimit = 0,
    unsigned int flags = 0)
{
    return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, __cudaOccupancyB2DHelper(dynamicSMemSize), blockSizeLimit, flags);
}





































template<class T>
static __inline __declspec(__host__) cudaError_t cudaLaunch(
  T *func
)
{
  return ::cudaLaunch((const void*)func);
}






























template<class T>
static __inline __declspec(__host__) cudaError_t cudaFuncGetAttributes(
  struct cudaFuncAttributes *attr,
  T                         *entry
)
{
  return ::cudaFuncGetAttributes(attr, (const void*)entry);
}





















template<class T, int dim>
static __inline __declspec(__host__) cudaError_t cudaBindSurfaceToArray(
  const struct surface<T, dim>       &surf,
  cudaArray_const_t                   array,
  const struct cudaChannelFormatDesc &desc
)
{
  return ::cudaBindSurfaceToArray(&surf, array, &desc);
}




















template<class T, int dim>
static __inline __declspec(__host__) cudaError_t cudaBindSurfaceToArray(
  const struct surface<T, dim> &surf,
  cudaArray_const_t             array
)
{
  struct cudaChannelFormatDesc desc;
  cudaError_t                  err = ::cudaGetChannelDesc(&desc, array);

  return err == cudaSuccess ? cudaBindSurfaceToArray(surf, array, desc) : err;
}

#line 1922 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"

 

#line 1926 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"






#line 1933 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
#pragma warning(pop)
#line 1935 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
#line 1936 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"

#line 1938 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"

#line 1 "C:/pyNeuroGPU_winnew/NeuroGPU6/CudaStuff.cu"
#line 1 "c:\\pyneurogpu_winnew\\neurogpu6\\CudaStuff.cuh"



#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1938 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"

#line 5 "c:\\pyneurogpu_winnew\\neurogpu6\\CudaStuff.cuh"

#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\device_launch_parameters.h"





















































































































#line 119 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\device_launch_parameters.h"
#line 7 "c:\\pyneurogpu_winnew\\neurogpu6\\CudaStuff.cuh"
#line 1 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sstream"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\climits"

#pragma once





#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\climits"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"

#pragma once










 
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"


 
 
 
 
 
 
 

 
 
 
 

  

typedef FILE FILE;

 
namespace std {
using :: FILE; using :: _Mbstatet;

using :: size_t; using :: fpos_t; using :: FILE;
using :: clearerr; using :: fclose; using :: feof;
using :: ferror; using :: fflush; using :: fgetc;
using :: fgetpos; using :: fgets; using :: fopen;
using :: fprintf; using :: fputc; using :: fputs;
using :: fread; using :: freopen; using :: fscanf;
using :: fseek; using :: fsetpos; using :: ftell;
using :: fwrite; using :: getc; using :: getchar;
using :: perror;
using :: putc; using :: putchar;
using :: printf; using :: puts; using :: remove;
using :: rename; using :: rewind; using :: scanf;
using :: setbuf; using :: setvbuf; using :: sprintf;
using :: sscanf; using :: tmpfile; using :: tmpnam;
using :: ungetc; using :: vfprintf; using :: vprintf;
using :: vsprintf;

using :: snprintf; using :: vsnprintf;
using :: vfscanf; using :: vscanf; using :: vsscanf;
}
 #line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"

#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"





#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"

#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstring"

#pragma once










 
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstring"

 
namespace std {
using :: size_t; using :: memchr; using :: memcmp;
using :: memcpy; using :: memmove; using :: memset;
using :: strcat; using :: strchr; using :: strcmp;
using :: strcoll; using :: strcpy; using :: strcspn;
using :: strerror; using :: strlen; using :: strncat;
using :: strncmp; using :: strncpy; using :: strpbrk;
using :: strrchr; using :: strspn; using :: strstr;
using :: strtok; using :: strxfrm;
}
 #line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstring"

#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstring"





#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"

#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"

#pragma once










 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"







#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"































































































































































































































































































































#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"



typedef signed char        int8_t;
typedef short              int16_t;
typedef int                int32_t;
typedef long long          int64_t;
typedef unsigned char      uint8_t;
typedef unsigned short     uint16_t;
typedef unsigned int       uint32_t;
typedef unsigned long long uint64_t;

typedef signed char        int_least8_t;
typedef short              int_least16_t;
typedef int                int_least32_t;
typedef long long          int_least64_t;
typedef unsigned char      uint_least8_t;
typedef unsigned short     uint_least16_t;
typedef unsigned int       uint_least32_t;
typedef unsigned long long uint_least64_t;

typedef signed char        int_fast8_t;
typedef int                int_fast16_t;
typedef int                int_fast32_t;
typedef long long          int_fast64_t;
typedef unsigned char      uint_fast8_t;
typedef unsigned int       uint_fast16_t;
typedef unsigned int       uint_fast32_t;
typedef unsigned long long uint_fast64_t;

typedef long long          intmax_t;
typedef unsigned long long uintmax_t;










































    
    
    




#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"




































#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"





#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"

 
namespace std {
using :: int8_t; using :: int16_t;
using :: int32_t; using :: int64_t;
using :: uint8_t; using :: uint16_t;
using :: uint32_t; using :: uint64_t;

using :: int_least8_t; using :: int_least16_t;
using :: int_least32_t;  using :: int_least64_t;
using :: uint_least8_t; using :: uint_least16_t;
using :: uint_least32_t; using :: uint_least64_t;

using :: int_fast8_t; using :: int_fast16_t;
using :: int_fast32_t;  using :: int_fast64_t;
using :: uint_fast8_t; using :: uint_fast16_t;
using :: uint_fast32_t; using :: uint_fast64_t;

using :: intmax_t; using :: intptr_t;
using :: uintmax_t; using :: uintptr_t;


	namespace tr1 {
using :: int8_t; using :: int16_t;
using :: int32_t; using :: int64_t;
using :: uint8_t; using :: uint16_t;
using :: uint32_t; using :: uint64_t;

using :: int_least8_t; using :: int_least16_t;
using :: int_least32_t;  using :: int_least64_t;
using :: uint_least8_t; using :: uint_least16_t;
using :: uint_least32_t; using :: uint_least64_t;

using :: int_fast8_t; using :: int_fast16_t;
using :: int_fast32_t;  using :: int_fast64_t;
using :: uint_fast8_t; using :: uint_fast16_t;
using :: uint_fast32_t; using :: uint_fast64_t;

using :: intmax_t; using :: intptr_t;
using :: uintmax_t; using :: uintptr_t;
	}	
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
}
 #line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"

#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 

  

 
 
extern "C" {
 #line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
 #line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"

		





		






void __cdecl _Feraise(int);

typedef union
	{	
	unsigned short _Word[8];
	float _Float;
	double _Double;
	long double _Long_double;
	} _Dconst;

		
__declspec(dllimport) double __cdecl _Cosh(double, double);
__declspec(dllimport) short __cdecl _Dtest(double *);
__declspec(dllimport) double __cdecl _Sinh(double, double);

__declspec(dllimport) short __cdecl _Exp(double *, double, short);
extern __declspec(dllimport)  _Dconst _Denorm, _Hugeval, _Inf,
	_Nan, _Snan;

		
__declspec(dllimport) float __cdecl _FCosh(float, float);
__declspec(dllimport) short __cdecl _FDtest(float *);
__declspec(dllimport) float __cdecl _FSinh(float, float);

__declspec(dllimport) short __cdecl _FExp(float *, float, short);
extern __declspec(dllimport)  _Dconst _FDenorm, _FInf, _FNan, _FSnan;

		
__declspec(dllimport) long double __cdecl _LCosh(long double, long double);
__declspec(dllimport) short __cdecl _LDtest(long double *);
__declspec(dllimport) long double __cdecl _LSinh(long double, long double);

__declspec(dllimport) short __cdecl _LExp(long double *, long double, short);
extern __declspec(dllimport)  _Dconst _LDenorm, _LInf, _LNan, _LSnan;

 
 
}
 #line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
 #line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"

 
 #pragma warning(pop)
 #pragma pack(pop)

#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cfloat"

#pragma once




#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"








#pragma once




__pragma(pack(push, 8)) extern "C" {




    


        


            
        #line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
    #line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"



















    






        
    #line 57 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
#line 58 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
























































































































































#line 211 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"

    

#line 215 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"











__declspec(dllimport) unsigned int __cdecl _clearfp(void);

#pragma warning(push)
#pragma warning(disable: 4141)

 
__declspec(dllimport) unsigned int __cdecl _controlfp(
      unsigned int _NewValue,
      unsigned int _Mask
    );

#pragma warning(pop)


__declspec(dllimport) void __cdecl _set_controlfp(
      unsigned int _NewValue,
      unsigned int _Mask
    );


__declspec(dllimport) errno_t __cdecl _controlfp_s(
      unsigned int* _CurrentState,
           unsigned int  _NewValue,
           unsigned int  _Mask
    );


__declspec(dllimport) unsigned int __cdecl _statusfp(void);


__declspec(dllimport) void __cdecl _fpreset(void);















__declspec(dllimport) unsigned int __cdecl _control87(
      unsigned int _NewValue,
      unsigned int _Mask
    );












 
__declspec(dllimport) int* __cdecl __fpecode(void);



 
__declspec(dllimport) int __cdecl __fpe_flt_rounds(void);












  __declspec(dllimport) double __cdecl _copysign(  double _Number,   double _Sign);
  __declspec(dllimport) double __cdecl _chgsign(  double _X);
  __declspec(dllimport) double __cdecl _scalb(  double _X,   long _Y);
  __declspec(dllimport) double __cdecl _logb(  double _X);
  __declspec(dllimport) double __cdecl _nextafter(  double _X,   double _Y);
  __declspec(dllimport) int    __cdecl _finite(  double _X);
  __declspec(dllimport) int    __cdecl _isnan(  double _X);
  __declspec(dllimport) int    __cdecl _fpclass(  double _X);


      __declspec(dllimport) float __cdecl _scalbf(  float _X,   long _Y);
#line 319 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"










    
    
    

    
    __declspec(dllimport) void __cdecl fpreset(void);

    
    

    
    

    
    
    

    
    
    
    
    
    
    

    
    
    

    
    
    
    
    

    
    
    
    

    

    
    
    
    
    
    

    
    
    
    

    
    
    
    
    
    

    
    
    
    

    

#line 398 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"



} __pragma(pack(pop))
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cfloat"
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cfloat"





#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"

#pragma once










 #line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"









#pragma once




#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"








#pragma once




__pragma(pack(push, 8)) extern "C" {









    
     
    __declspec(dllimport) errno_t __cdecl _cgetws_s(
          wchar_t* _Buffer,
                                               size_t   _BufferCount,
                                              size_t*  _SizeRead
        );

    extern "C++" { template <size_t _Size> inline   errno_t __cdecl _cgetws_s(  wchar_t (&_Buffer)[_Size],   size_t* _SizeRead) throw() { return _cgetws_s(_Buffer, _Size, _SizeRead); } }
#line 38 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"

    
    __declspec(dllimport) int __cdecl _cputws(
          wchar_t const* _Buffer
        );

          __declspec(dllimport) wint_t __cdecl _getwch  (void);
          __declspec(dllimport) wint_t __cdecl _getwche (void);
     __declspec(dllimport) wint_t __cdecl _putwch  (  wchar_t _Character);
     __declspec(dllimport) wint_t __cdecl _ungetwch(  wint_t  _Character);

          __declspec(dllimport) wint_t __cdecl _getwch_nolock  (void);
          __declspec(dllimport) wint_t __cdecl _getwche_nolock (void);
     __declspec(dllimport) wint_t __cdecl _putwch_nolock  (  wchar_t _Character);
     __declspec(dllimport) wint_t __cdecl _ungetwch_nolock(  wint_t  _Character);



    
    
    
    
    
    
    __declspec(dllimport) int __cdecl __conio_common_vcwprintf(
                                             unsigned __int64 _Options,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

    
    __declspec(dllimport) int __cdecl __conio_common_vcwprintf_s(
                                             unsigned __int64 _Options,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

    
    __declspec(dllimport) int __cdecl __conio_common_vcwprintf_p(
                                             unsigned __int64 _Options,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

    
    __inline int __cdecl _vcwprintf_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )


#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
    {
        return __conio_common_vcwprintf((*__local_stdio_printf_options()), _Format, _Locale, _ArgList);
    }
#line 98 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _vcwprintf(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )


#line 107 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
    {
        return _vcwprintf_l(_Format, 0, _ArgList);
    }
#line 111 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _vcwprintf_s_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )


#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
    {
        return __conio_common_vcwprintf_s((*__local_stdio_printf_options()), _Format, _Locale, _ArgList);
    }
#line 125 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _vcwprintf_s(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )


#line 134 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
    {
        return _vcwprintf_s_l(_Format, 0, _ArgList);
    }
#line 138 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _vcwprintf_p_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )


#line 148 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
    {
        return __conio_common_vcwprintf_p((*__local_stdio_printf_options()), _Format, _Locale, _ArgList);
    }
#line 152 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _vcwprintf_p(
            const wchar_t* const _Format,
                                      va_list              _ArgList
        )


#line 161 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
    {
        return _vcwprintf_p_l(_Format, 0, _ArgList);
    }
#line 165 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _cwprintf_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)


#line 174 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vcwprintf_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _cwprintf(
            wchar_t const* const _Format,
        ...)


#line 191 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vcwprintf_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 200 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _cwprintf_s_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)


#line 209 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vcwprintf_s_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 218 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _cwprintf_s(
            wchar_t const* const _Format,
        ...)


#line 226 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vcwprintf_s_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 235 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _cwprintf_p_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)


#line 244 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vcwprintf_p_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 253 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _cwprintf_p(
            wchar_t const* const _Format,
        ...)


#line 261 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vcwprintf_p_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 270 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"



    
    
    
    
    
    
    __declspec(dllimport) int __cdecl __conio_common_vcwscanf(
                                            unsigned __int64 _Options,
            wchar_t const*   _Format,
                                        _locale_t        _Locale,
                                               va_list          _ArgList
        );

     
    __inline int __cdecl _vcwscanf_l(
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
                                               va_list              _ArgList
        )


#line 295 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
    {
        return __conio_common_vcwscanf(
            (*__local_stdio_scanf_options ()),
            _Format, _Locale, _ArgList);
    }
#line 301 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"

     
    __inline int __cdecl _vcwscanf(
            wchar_t const* const _Format,
                                               va_list              _ArgList
        )


#line 310 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
    {
        #pragma warning(push)
        #pragma warning(disable: 4996) 
        return _vcwscanf_l(_Format, 0, _ArgList);
        #pragma warning(pop)
    }
#line 317 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _vcwscanf_s_l(
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
                                               va_list              _ArgList
        )


#line 327 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
    {
        return __conio_common_vcwscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Format, _Locale, _ArgList);
    }
#line 333 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _vcwscanf_s(
            wchar_t const* const _Format,
                                               va_list              _ArgList
        )


#line 342 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
    {
        return _vcwscanf_s_l(_Format, 0, _ArgList);
    }
#line 346 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"

     
    __inline int __cdecl _cwscanf_l(
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
        ...)


#line 355 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

        #pragma warning(push)
        #pragma warning(disable: 4996) 
        _Result = _vcwscanf_l(_Format, _Locale, _ArgList);
        #pragma warning(pop)

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 369 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"

     
    __inline int __cdecl _cwscanf(
            wchar_t const* const _Format,
        ...)


#line 377 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

        #pragma warning(push)
        #pragma warning(disable: 4996) 
        _Result = _vcwscanf_l(_Format, 0, _ArgList);
        #pragma warning(pop)

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 391 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _cwscanf_s_l(
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
        ...)


#line 400 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vcwscanf_s_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 409 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _cwscanf_s(
            wchar_t const* const _Format,
        ...)


#line 417 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vcwscanf_s_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 426 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"

#line 428 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"



} __pragma(pack(pop))
#line 16 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"








#pragma once



__pragma(pack(push, 8)) extern "C" {











    

#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
        
    #line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"

    __declspec(dllimport) const unsigned short* __cdecl __pctype_func(void);
    __declspec(dllimport) const wctype_t*       __cdecl __pwctype_func(void);

    



        
        
    #line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"





















  __declspec(dllimport) int __cdecl iswalnum  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswalpha  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswascii  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswblank  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswcntrl  (  wint_t _C);


  __declspec(dllimport) int __cdecl iswdigit  (  wint_t _C);

  __declspec(dllimport) int __cdecl iswgraph  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswlower  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswprint  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswpunct  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswspace  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswupper  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswxdigit (  wint_t _C);
  __declspec(dllimport) int __cdecl __iswcsymf(  wint_t _C);
  __declspec(dllimport) int __cdecl __iswcsym (  wint_t _C);

  __declspec(dllimport) int __cdecl _iswalnum_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswalpha_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswblank_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswcntrl_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswdigit_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswgraph_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswlower_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswprint_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswpunct_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswspace_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswupper_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswxdigit_l(  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswcsymf_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswcsym_l  (  wint_t _C,   _locale_t _Locale);


  __declspec(dllimport) wint_t __cdecl towupper(  wint_t _C);
  __declspec(dllimport) wint_t __cdecl towlower(  wint_t _C);
  __declspec(dllimport) int    __cdecl iswctype(  wint_t _C,   wctype_t _Type);

  __declspec(dllimport) wint_t __cdecl _towupper_l(  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) wint_t __cdecl _towlower_l(  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int    __cdecl _iswctype_l(  wint_t _C,   wctype_t _Type,   _locale_t _Locale);



      __declspec(dllimport) int __cdecl isleadbyte(  int _C);
      __declspec(dllimport) int __cdecl _isleadbyte_l(  int _C,   _locale_t _Locale);

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "iswctype" " " "instead. See online help for details.")) __declspec(dllimport) int __cdecl is_wctype(  wint_t _C,   wctype_t _Type);
#line 113 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"


















































































#line 196 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"



} __pragma(pack(pop))
#line 17 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wdirect.h"








#pragma once



__pragma(pack(push, 8)) extern "C" {






 
   
__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wgetcwd(
      wchar_t* _DstBuf,
                                  int      _SizeInWords
    );

 
   
__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wgetdcwd(
                                  int      _Drive,
      wchar_t* _DstBuf,
                                  int      _SizeInWords
    );






 
__declspec(dllimport) int __cdecl _wchdir(
      wchar_t const* _Path
    );

 
__declspec(dllimport) int __cdecl _wmkdir(
      wchar_t const* _Path
    );

 
__declspec(dllimport) int __cdecl _wrmdir(
      wchar_t const* _Path
    );



} __pragma(pack(pop))
#line 18 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"








#pragma once


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_share.h"








#pragma once












    
    
    
    
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_share.h"
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"

__pragma(pack(push, 8)) extern "C" {



#pragma warning(push)
#pragma warning(disable:4820) 
#line 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"











    
    
#line 35 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"

typedef unsigned long _fsize_t;

struct _wfinddata32_t
{
    unsigned   attrib;
    __time32_t time_create;    
    __time32_t time_access;    
    __time32_t time_write;
    _fsize_t   size;
    wchar_t    name[260];
};

struct _wfinddata32i64_t
{
    unsigned   attrib;
    __time32_t time_create;    
    __time32_t time_access;    
    __time32_t time_write;
    __int64    size;
    wchar_t    name[260];
};

struct _wfinddata64i32_t
{
    unsigned   attrib;
    __time64_t time_create;    
    __time64_t time_access;    
    __time64_t time_write;
    _fsize_t   size;
    wchar_t    name[260];
};

struct _wfinddata64_t
{
    unsigned   attrib;
    __time64_t time_create;    
    __time64_t time_access;    
    __time64_t time_write;
    __int64    size;
    wchar_t    name[260];
};














    
    
    
    
#line 96 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"

 
__declspec(dllimport) int __cdecl _waccess(
      wchar_t const* _FileName,
        int            _AccessMode
    );


__declspec(dllimport) errno_t __cdecl _waccess_s(
      wchar_t const* _FileName,
        int            _AccessMode
    );

 
__declspec(dllimport) int __cdecl _wchmod(
      wchar_t const* _FileName,
        int            _Mode
    );

  
__declspec(dllimport) int __cdecl _wcreat(
      wchar_t const* _FileName,
        int            _PermissionMode
    );

 
 
__declspec(dllimport) intptr_t __cdecl _wfindfirst32(
      wchar_t const*         _FileName,
       struct _wfinddata32_t* _FindData
    );

 
 
__declspec(dllimport) int __cdecl _wfindnext32(
       intptr_t               _FindHandle,
      struct _wfinddata32_t* _FindData
    );

__declspec(dllimport) int __cdecl _wunlink(
      wchar_t const* _FileName
    );

 
__declspec(dllimport) int __cdecl _wrename(
      wchar_t const* _OldFileName,
      wchar_t const* _NewFileName
    );

__declspec(dllimport) errno_t __cdecl _wmktemp_s(
      wchar_t* _TemplateName,
                                 size_t   _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wmktemp_s(wchar_t (&_TemplateName)[_Size]) throw() { return _wmktemp_s(_TemplateName, _Size); } }
#line 154 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"

 
 __declspec(dllimport) wchar_t* __cdecl _wmktemp( wchar_t *_TemplateName);
#line 160 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"

 
 
__declspec(dllimport) intptr_t __cdecl _wfindfirst32i64(
      wchar_t const*            _FileName,
       struct _wfinddata32i64_t* _FindData
    );

 
 
__declspec(dllimport) intptr_t __cdecl _wfindfirst64i32(
      wchar_t const*            _FileName,
       struct _wfinddata64i32_t* _FindData
    );

 
 
__declspec(dllimport) intptr_t __cdecl _wfindfirst64(
      wchar_t const*         _FileName,
       struct _wfinddata64_t* _FindData
    );

 
 
__declspec(dllimport) int __cdecl _wfindnext32i64(
       intptr_t                  _FindHandle,
      struct _wfinddata32i64_t* _FindData
    );

 
 
__declspec(dllimport) int __cdecl _wfindnext64i32(
       intptr_t                  _FindHandle,
      struct _wfinddata64i32_t* _FindData
    );

 
 
__declspec(dllimport) int __cdecl _wfindnext64(
       intptr_t               _FindHandle,
      struct _wfinddata64_t* _FindData
    );


__declspec(dllimport) errno_t __cdecl _wsopen_s(
       int*           _FileHandle,
      wchar_t const* _FileName,
        int            _OpenFlag,
        int            _ShareFlag,
        int            _PermissionFlag
    );

__declspec(dllimport) errno_t __cdecl _wsopen_dispatch(
      wchar_t const* _FileName,
        int            _OFlag,
        int            _ShFlag,
        int            _PMode,
       int*           _PFileHandle,
        int            _BSecure
    );





    
    extern "C++"   
    inline int __cdecl _wopen(
          wchar_t const* _FileName,
            int            _OFlag,
            int            _PMode = 0
        )
    {
        int _FileHandle;
        
        errno_t const _Result = _wsopen_dispatch(_FileName, _OFlag, 0x40, _PMode, &_FileHandle, 0);
        return _Result ? -1 : _FileHandle;
    }

    extern "C++"   
    inline int __cdecl _wsopen(
          wchar_t const* _FileName,
            int            _OFlag,
            int            _ShFlag,
            int            _PMode = 0
        )
    {
        int _FileHandle;
        
        errno_t const _Result = _wsopen_dispatch(_FileName, _OFlag, _ShFlag, _PMode, &_FileHandle, 0);
        return _Result ? -1 : _FileHandle;
    }

















#line 270 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"



#pragma warning(pop)
#line 275 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"


} __pragma(pack(pop))
#line 19 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"








#pragma once



__pragma(pack(push, 8)) extern "C" {


    


    __declspec(dllimport) intptr_t __cdecl _wexecl(
          wchar_t const* _FileName,
          wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wexecle(
          wchar_t const* _FileName,
          wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wexeclp(
          wchar_t const* _FileName,
          wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wexeclpe(
          wchar_t const* _FileName,
          wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wexecv(
          wchar_t const*        _FileName,
          wchar_t const* const* _ArgList
        );

    __declspec(dllimport) intptr_t __cdecl _wexecve(
              wchar_t const*        _FileName,
              wchar_t const* const* _ArgList,
          wchar_t const* const* _Env
        );

    __declspec(dllimport) intptr_t __cdecl _wexecvp(
          wchar_t const*        _FileName,
          wchar_t const* const* _ArgList
        );

    __declspec(dllimport) intptr_t __cdecl _wexecvpe(
              wchar_t const*        _FileName,
              wchar_t const* const* _ArgList,
          wchar_t const* const* _Env
        );

    __declspec(dllimport) intptr_t __cdecl _wspawnl(
            int            _Mode,
          wchar_t const* _FileName,
          wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wspawnle(
            int            _Mode,
          wchar_t const* _FileName,
          wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wspawnlp(
            int            _Mode,
          wchar_t const* _FileName,
          wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wspawnlpe(
            int            _Mode,
          wchar_t const* _FileName,
          wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wspawnv(
            int                   _Mode,
          wchar_t const*        _FileName,
          wchar_t const* const* _ArgList
        );

    __declspec(dllimport) intptr_t __cdecl _wspawnve(
                int                   _Mode,
              wchar_t const*        _FileName,
              wchar_t const* const* _ArgList,
          wchar_t const* const* _Env
        );

    __declspec(dllimport) intptr_t __cdecl _wspawnvp(
            int                   _Mode,
          wchar_t const*        _FileName,
          wchar_t const* const* _ArgList
        );

    __declspec(dllimport) intptr_t __cdecl _wspawnvpe(
                int                   _Mode,
              wchar_t const*        _FileName,
              wchar_t const* const* _ArgList,
          wchar_t const* const* _Env
        );

    __declspec(dllimport) int __cdecl _wsystem(
          wchar_t const* _Command
        );

#line 116 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"



} __pragma(pack(pop))
#line 20 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"







#pragma once


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/types.h"







#pragma once




    

    typedef unsigned short _ino_t; 

    
        typedef _ino_t ino_t;
    #line 20 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/types.h"
#line 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/types.h"




    

    typedef unsigned int _dev_t; 

    
        typedef _dev_t dev_t;
    #line 32 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/types.h"
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/types.h"




    

    typedef long _off_t; 

    
        typedef _off_t off_t;
    #line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/types.h"
#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/types.h"
#line 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"

__pragma(pack(push, 8)) extern "C" {



#pragma warning(push)
#pragma warning(disable:4820) 
#line 20 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"







struct _stat32
{
    _dev_t         st_dev;
    _ino_t         st_ino;
    unsigned short st_mode;
    short          st_nlink;
    short          st_uid;
    short          st_gid;
    _dev_t         st_rdev;
    _off_t         st_size;
    __time32_t     st_atime;
    __time32_t     st_mtime;
    __time32_t     st_ctime;
};

struct _stat32i64
{
    _dev_t         st_dev;
    _ino_t         st_ino;
    unsigned short st_mode;
    short          st_nlink;
    short          st_uid;
    short          st_gid;
    _dev_t         st_rdev;
    __int64        st_size;
    __time32_t     st_atime;
    __time32_t     st_mtime;
    __time32_t     st_ctime;
};

struct _stat64i32
{
    _dev_t         st_dev;
    _ino_t         st_ino;
    unsigned short st_mode;
    short          st_nlink;
    short          st_uid;
    short          st_gid;
    _dev_t         st_rdev;
    _off_t         st_size;
    __time64_t     st_atime;
    __time64_t     st_mtime;
    __time64_t     st_ctime;
};

struct _stat64
{
    _dev_t         st_dev;
    _ino_t         st_ino;
    unsigned short st_mode;
    short          st_nlink;
    short          st_uid;
    short          st_gid;
    _dev_t         st_rdev;
    __int64        st_size;
    __time64_t     st_atime;
    __time64_t     st_mtime;
    __time64_t     st_ctime;
};




    struct stat
    {
        _dev_t         st_dev;
        _ino_t         st_ino;
        unsigned short st_mode;
        short          st_nlink;
        short          st_uid;
        short          st_gid;
        _dev_t         st_rdev;
        _off_t         st_size;
        time_t         st_atime;
        time_t         st_mtime;
        time_t         st_ctime;
    };
#line 105 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"


















    
    
    
    
    
    
    
#line 131 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
















    
    
    
    
    
    
#line 154 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"



__declspec(dllimport) int __cdecl _fstat32(
       int             _FileHandle,
      struct _stat32* _Stat
    );

__declspec(dllimport) int __cdecl _fstat32i64(
       int                _FileHandle,
      struct _stat32i64* _Stat
    );

__declspec(dllimport) int __cdecl _fstat64i32(
       int                _FileHandle,
      struct _stat64i32* _Stat
    );

__declspec(dllimport) int __cdecl _fstat64(
       int             _FileHandle,
      struct _stat64* _Stat
    );

__declspec(dllimport) int __cdecl _stat32(
      char const*     _FileName,
       struct _stat32* _Stat
    );

__declspec(dllimport) int __cdecl _stat32i64(
      char const*        _FileName,
       struct _stat32i64* _Stat
    );

__declspec(dllimport) int __cdecl _stat64i32(
      char const*        _FileName,
       struct _stat64i32* _Stat
    );

__declspec(dllimport) int __cdecl _stat64(
      char const*     _FileName,
       struct _stat64* _Stat
    );

__declspec(dllimport) int __cdecl _wstat32(
      wchar_t const*  _FileName,
       struct _stat32* _Stat
    );

__declspec(dllimport) int __cdecl _wstat32i64(
      wchar_t const*     _FileName,
       struct _stat32i64* _Stat
    );

__declspec(dllimport) int __cdecl _wstat64i32(
      wchar_t const*     _FileName,
       struct _stat64i32* _Stat
    );

__declspec(dllimport) int __cdecl _wstat64(
      wchar_t const*  _FileName,
       struct _stat64* _Stat
    );




    















        static __inline int __cdecl fstat(int const _FileHandle, struct stat* const _Stat)
        {
            typedef char __static_assert_t[(sizeof(struct stat) == sizeof(struct _stat64i32)) != 0];
            return _fstat64i32(_FileHandle, (struct _stat64i32*)_Stat);
        }
        static __inline int __cdecl stat(char const* const _FileName, struct stat* const _Stat)
        {
            typedef char __static_assert_t[(sizeof(struct stat) == sizeof(struct _stat64i32)) != 0];
            return _stat64i32(_FileName, (struct _stat64i32*)_Stat);
        }

    #line 248 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
#line 249 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"



#pragma warning(pop)
#line 254 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"


} __pragma(pack(pop))
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"



__pragma(pack(push, 8)) extern "C" {








typedef wchar_t _Wint_t;




__declspec(dllimport) wchar_t* __cdecl _wsetlocale(
            int            _Category,
      wchar_t const* _Locale
    );


__declspec(dllimport) _locale_t __cdecl _wcreate_locale(
        int            _Category,
      wchar_t const* _Locale
    );



__declspec(dllimport) wint_t __cdecl btowc(
      int _Ch
    );

__declspec(dllimport) size_t __cdecl mbrlen(
        char const* _Ch,
                                                size_t      _SizeInBytes,
                                             mbstate_t*  _State
    );

__declspec(dllimport) size_t __cdecl mbrtowc(
                              wchar_t*    _DstCh,
        char const* _SrcCh,
                                                size_t      _SizeInBytes,
                                             mbstate_t*  _State
    );

 
__declspec(dllimport) errno_t __cdecl mbsrtowcs_s(
                              size_t*      _Retval,
              wchar_t*     _Dst,
                                   size_t       _Size,
                      char const** _PSrc,
                                   size_t       _N,
                                mbstate_t*   _State
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl mbsrtowcs_s(  size_t* _Retval,   wchar_t (&_Dest)[_Size],     char const** _PSource,   size_t _Count,   mbstate_t* _State) throw() { return mbsrtowcs_s(_Retval, _Dest, _Size, _PSource, _Count, _State); } }
#line 91 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"

  __declspec(dllimport) size_t __cdecl mbsrtowcs( wchar_t *_Dest,  char const** _PSrc,  size_t _Count,  mbstate_t* _State);
#line 99 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"

 
__declspec(dllimport) errno_t __cdecl wcrtomb_s(
                             size_t*    _Retval,
      char*      _Dst,
                                  size_t     _SizeInBytes,
                                  wchar_t    _Ch,
                           mbstate_t* _State
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl wcrtomb_s(  size_t* _Retval,   char (&_Dest)[_Size],   wchar_t _Source,   mbstate_t* _State) throw() { return wcrtomb_s(_Retval, _Dest, _Size, _Source, _State); } }
#line 117 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"

 __declspec(dllimport) size_t __cdecl wcrtomb(  char *_Dest,  wchar_t _Source,  mbstate_t* _State);
#line 124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"

 
__declspec(dllimport) errno_t __cdecl wcsrtombs_s(
                                              size_t*         _Retval,
      char*           _Dst,
                                                   size_t          _SizeInBytes,
                                wchar_t const** _Src,
                                                   size_t          _Size,
                                            mbstate_t*      _State
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl wcsrtombs_s(  size_t* _Retval,   char (&_Dest)[_Size],     wchar_t const** _PSrc,   size_t _Count,   mbstate_t* _State) throw() { return wcsrtombs_s(_Retval, _Dest, _Size, _PSrc, _Count, _State); } }
#line 144 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"

 __declspec(dllimport) size_t __cdecl wcsrtombs(  char *_Dest,  wchar_t const** _PSource,  size_t _Count,  mbstate_t* _State);
#line 152 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"

__declspec(dllimport) int __cdecl wctob(
      wint_t _WCh
    );





    

         
        errno_t __cdecl wmemcpy_s(
              wchar_t*       _S1,
                                      rsize_t        _N1,
                        wchar_t const* _S2,
                                      rsize_t        _N
            );

         
        errno_t __cdecl wmemmove_s(
              wchar_t*       _S1,
                                      rsize_t        _N1,
                        wchar_t const* _S2,
                                      rsize_t        _N
            );

    #line 180 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"

    __inline int __cdecl fwide(
          FILE* _F,
              int   _M
        )
    {
        (void)_F;
        return (_M);
    }

    __inline int __cdecl mbsinit(
          mbstate_t const* _P
        )
    {
        return _P == 0 || _P->_Wchar == 0;
    }

    __inline wchar_t const* __cdecl wmemchr(
          wchar_t const* _S,
                    wchar_t        _C,
                    size_t         _N
        )
    {
        for (; 0 < _N; ++_S, --_N)
            if (*_S == _C)
                return (wchar_t const*)_S;

        return 0;
    }

    __inline int __cdecl wmemcmp(
          wchar_t const* _S1,
          wchar_t const* _S2,
                    size_t         _N
        )
    {
        for (; 0 < _N; ++_S1, ++_S2, --_N)
            if (*_S1 != *_S2)
                return *_S1 < *_S2 ? -1 : 1;

        return 0;
    }

     
    
    __inline 
    wchar_t* __cdecl wmemcpy(
          wchar_t*       _S1,
                wchar_t const* _S2,
                          size_t         _N
        )
    {
        #pragma warning(push)
        #pragma warning(disable : 4995 4996 6386)
        return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));
        #pragma warning(pop)
    }

    __inline 
    wchar_t* __cdecl wmemmove(
          wchar_t*       _S1,
                wchar_t const* _S2,
                              size_t         _N
        )
    {
        #pragma warning(push)
        #pragma warning(disable : 4996 6386)
        return (wchar_t*)memmove(_S1, _S2, _N*sizeof(wchar_t));
        #pragma warning(pop)
    }

     
    
    __inline wchar_t* __cdecl wmemset(
          wchar_t* _S,
                          wchar_t  _C,
                          size_t   _N
        )
    {
        wchar_t *_Su = _S;
        for (; 0 < _N; ++_Su, --_N)
        {
            *_Su = _C;
        }
        return _S;
    }

    

        extern "C++" inline wchar_t* __cdecl wmemchr(
              wchar_t* _S,
                        wchar_t  _C,
                        size_t   _N
            )
        {
            wchar_t const* const _SC = _S;
            return const_cast<wchar_t*>(wmemchr(_SC, _C, _N));
        }

    #line 280 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"

#line 282 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"



} __pragma(pack(pop))
#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"

typedef mbstate_t _Mbstatet;

 
namespace std {
using :: _Mbstatet;

using :: mbstate_t; using :: size_t; using :: tm; using :: wint_t;

using :: btowc; using :: fgetwc; using :: fgetws; using :: fputwc;
using :: fputws; using :: fwide; using :: fwprintf;
using :: fwscanf; using :: getwc; using :: getwchar;
using :: mbrlen; using :: mbrtowc; using :: mbsrtowcs;
using :: mbsinit; using :: putwc; using :: putwchar;
using :: swprintf; using :: swscanf; using :: ungetwc;
using :: vfwprintf; using :: vswprintf; using :: vwprintf;
using :: wcrtomb; using :: wprintf; using :: wscanf;
using :: wcsrtombs; using :: wcstol; using :: wcscat;
using :: wcschr; using :: wcscmp; using :: wcscoll;
using :: wcscpy; using :: wcscspn; using :: wcslen;
using :: wcsncat; using :: wcsncmp; using :: wcsncpy;
using :: wcspbrk; using :: wcsrchr; using :: wcsspn;
using :: wcstod; using :: wcstoul; using :: wcsstr;
using :: wcstok; using :: wcsxfrm; using :: wctob;
using :: wmemchr; using :: wmemcmp; using :: wmemcpy;
using :: wmemmove; using :: wmemset; using :: wcsftime;

using :: vfwscanf; using :: vswscanf; using :: vwscanf;
using :: wcstof; using :: wcstold;
using :: wcstoll; using :: wcstoull;
}
 #line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"

#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"





#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"


 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {















 

 
 
 
 

 
 
 
 

 
 
 
 

		
typedef enum
	{	
	denorm_indeterminate = -1,
	denorm_absent = 0,
	denorm_present = 1}
		float_denorm_style;

		
typedef enum
	{	
	round_indeterminate = -1,
	round_toward_zero = 0,
	round_to_nearest = 1,
	round_toward_infinity = 2,
	round_toward_neg_infinity = 3}
		float_round_style;

		
struct _Num_base
	{	
	static constexpr float_denorm_style has_denorm = (float_denorm_style)(denorm_absent);
	static constexpr bool has_denorm_loss = (bool)(false);
	static constexpr bool has_infinity = (bool)(false);
	static constexpr bool has_quiet_NaN = (bool)(false);
	static constexpr bool has_signaling_NaN = (bool)(false);
	static constexpr bool is_bounded = (bool)(false);
	static constexpr bool is_exact = (bool)(false);
	static constexpr bool is_iec559 = (bool)(false);
	static constexpr bool is_integer = (bool)(false);
	static constexpr bool is_modulo = (bool)(false);
	static constexpr bool is_signed = (bool)(false);
	static constexpr bool is_specialized = (bool)(false);
	static constexpr bool tinyness_before = (bool)(false);
	static constexpr bool traps = (bool)(false);
	static constexpr float_round_style round_style = (float_round_style)(round_toward_zero);
	static constexpr int digits = (int)(0);
	static constexpr int digits10 = (int)(0);

	static constexpr int max_digits10 = (int)(0);

	static constexpr int max_exponent = (int)(0);
	static constexpr int max_exponent10 = (int)(0);
	static constexpr int min_exponent = (int)(0);
	static constexpr int min_exponent10 = (int)(0);
	static constexpr int radix = (int)(0);
	};

		
template<class _Ty>
	class numeric_limits
		: public _Num_base
	{	
public:
	static constexpr _Ty (min)() noexcept
		{	
		return (_Ty());
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (_Ty());
		}

	static constexpr _Ty lowest() noexcept
		{	
		return (_Ty());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (_Ty());
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (_Ty());
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (_Ty());
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (_Ty());
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (_Ty());
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (_Ty());
		}
	};

template<class _Ty>
	class numeric_limits<const _Ty>
		: public numeric_limits<_Ty>
	{	
	};

template<class _Ty>
	class numeric_limits<volatile _Ty>
		: public numeric_limits<_Ty>
	{	
	};

template<class _Ty>
	class numeric_limits<const volatile _Ty>
		: public numeric_limits<_Ty>
	{	
	};

		
struct _Num_int_base
	: public _Num_base
	{	
	static constexpr bool is_bounded = (bool)(true);
	static constexpr bool is_exact = (bool)(true);
	static constexpr bool is_integer = (bool)(true);
	static constexpr bool is_modulo = (bool)(true);
	static constexpr bool is_specialized = (bool)(true);
	static constexpr int radix = (int)(2);
	};

		
struct _Num_float_base
	: public _Num_base
	{	
	static constexpr float_denorm_style has_denorm = (float_denorm_style)(denorm_present);
	static constexpr bool has_denorm_loss = (bool)(true);
	static constexpr bool has_infinity = (bool)(true);
	static constexpr bool has_quiet_NaN = (bool)(true);
	static constexpr bool has_signaling_NaN = (bool)(true);
	static constexpr bool is_bounded = (bool)(true);
	static constexpr bool is_exact = (bool)(false);
	static constexpr bool is_iec559 = (bool)(true);
	static constexpr bool is_integer = (bool)(false);
	static constexpr bool is_modulo = (bool)(false);
	static constexpr bool is_signed = (bool)(true);
	static constexpr bool is_specialized = (bool)(true);
	static constexpr bool tinyness_before = (bool)(true);
	static constexpr bool traps = (bool)(false);
	static constexpr float_round_style round_style = (float_round_style)(round_to_nearest);
	static constexpr int radix = (int)(2);
	};

		
template<> class numeric_limits<char>
	: public _Num_int_base
	{	
public:
	typedef char _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return ((-128));
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (127);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return ((min)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (0);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (0);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (0);
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (0);
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = (bool)((-128) != 0);
	static constexpr int digits = (int)(8 - ((-128) != 0 ? 1 : 0));
	static constexpr int digits10 = (int)((8 - ((-128) != 0 ? 1 : 0)) * 301L / 1000);
#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
	};

		
template<> class numeric_limits<wchar_t>
	: public _Num_int_base
	{	
public:
	typedef wchar_t _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return ((_Ty)0x0000);
		}

	static constexpr _Ty (max)() noexcept
		{	
		return ((_Ty)0xffff);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return ((min)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (0);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (0);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (0);
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (0);
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = (bool)(0x0000 != 0);
	static constexpr int digits = (int)(8 * sizeof (wchar_t) - (0x0000 != 0 ? 1 : 0));
#line 316 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
	static constexpr int digits10 = (int)((8 * sizeof (wchar_t) - (0x0000 != 0 ? 1 : 0)) * 301L / 1000);
#line 318 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
	};

		
template<> class numeric_limits<bool>
	: public _Num_int_base
	{	
public:
	typedef bool _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return (false);
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (true);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return ((min)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (0);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (0);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (0);
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (0);
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_modulo = (bool)(false);
	static constexpr bool is_signed = (bool)(false);
	static constexpr int digits = (int)(1);
	static constexpr int digits10 = (int)(0);
	};

		
template<> class numeric_limits<signed char>
	: public _Num_int_base
	{	
public:
	typedef signed char _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return ((-128));
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (127);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return ((min)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (0);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (0);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (0);
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (0);
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = (bool)(true);
	static constexpr int digits = (int)(8 - 1);
	static constexpr int digits10 = (int)((8 - 1) * 301L / 1000);
	};

		
template<> class numeric_limits<unsigned char>
	: public _Num_int_base
	{	
public:
	typedef unsigned char _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return (0);
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (0xff);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return ((min)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (0);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (0);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (0);
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (0);
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = (bool)(false);
	static constexpr int digits = (int)(8);
	static constexpr int digits10 = (int)(8 * 301L / 1000);
	};

		
template<> class numeric_limits<short>
	: public _Num_int_base
	{	
public:
	typedef short _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return ((-32768));
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (32767);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return ((min)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (0);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (0);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (0);
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (0);
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = (bool)(true);
	static constexpr int digits = (int)(8 * sizeof (short) - 1);
	static constexpr int digits10 = (int)((8 * sizeof (short) - 1) * 301L / 1000);
#line 548 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
	};

 
		
template<> class numeric_limits<unsigned short>
	: public _Num_int_base
	{	
public:
	typedef unsigned short _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return (0);
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (0xffff);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return ((min)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (0);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (0);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (0);
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (0);
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = (bool)(false);
	static constexpr int digits = (int)(8 * sizeof (unsigned short));
	static constexpr int digits10 = (int)(8 * sizeof (unsigned short) * 301L / 1000);
#line 607 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
	};
 #line 609 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"

		
template<> class numeric_limits<char16_t>
	: public _Num_int_base
	{	
public:
	typedef char16_t _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return (0);
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (0xffff);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return ((min)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (0);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (0);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (0);
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (0);
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = (bool)(false);
	static constexpr int digits = (int)(8 * sizeof (char16_t));
	static constexpr int digits10 = (int)(8 * sizeof (char16_t) * 301L / 1000);
#line 666 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
	};

		
template<> class numeric_limits<int>
	: public _Num_int_base
	{	
public:
	typedef int _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return ((-2147483647 - 1));
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (2147483647);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return ((min)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (0);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (0);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (0);
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (0);
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = (bool)(true);
	static constexpr int digits = (int)(8 * sizeof (int) - 1);
	static constexpr int digits10 = (int)((8 * sizeof (int) - 1) * 301L / 1000);
#line 724 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
	};

		
template<> class numeric_limits<unsigned int>
	: public _Num_int_base
	{	
public:
	typedef unsigned int _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return (0);
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (0xffffffff);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return ((min)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (0);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (0);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (0);
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (0);
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = (bool)(false);
	static constexpr int digits = (int)(8 * sizeof (unsigned int));
	static constexpr int digits10 = (int)(8 * sizeof (unsigned int) * 301L / 1000);
#line 782 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
	};

		
template<> class numeric_limits<long>
	: public _Num_int_base
	{	
public:
	typedef long _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return ((-2147483647L - 1));
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (2147483647L);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return ((min)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (0);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (0);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (0);
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (0);
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = (bool)(true);
	static constexpr int digits = (int)(8 * sizeof (long) - 1);
	static constexpr int digits10 = (int)((8 * sizeof (long) - 1) * 301L / 1000);
#line 840 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
	};

		
template<> class numeric_limits<unsigned long>
	: public _Num_int_base
	{	
public:
	typedef unsigned long _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return (0);
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (0xffffffffUL);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return ((min)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (0);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (0);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (0);
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (0);
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = (bool)(false);
	static constexpr int digits = (int)(8 * sizeof (unsigned long));
	static constexpr int digits10 = (int)(8 * sizeof (unsigned long) * 301L / 1000);
#line 898 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
	};

		
template<> class numeric_limits<char32_t>
	: public _Num_int_base
	{	
public:
	typedef char32_t _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return (0);
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (0xffffffff);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return ((min)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (0);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (0);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (0);
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (0);
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = (bool)(false);
	static constexpr int digits = (int)(8 * sizeof (char32_t));
	static constexpr int digits10 = (int)(8 * sizeof (char32_t) * 301L / 1000);
#line 956 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
	};

		
template<> class numeric_limits<long long>
	: public _Num_int_base
	{	
public:
	typedef long long _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return (-0x7fffffffffffffff - 1);
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (0x7fffffffffffffff);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return ((min)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (0);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (0);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (0);
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (0);
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = (bool)(true);
	static constexpr int digits = (int)(8 * sizeof (long long) - 1);
	static constexpr int digits10 = (int)((8 * sizeof (long long) - 1) * 301L / 1000);
#line 1014 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
	};

		
template<> class numeric_limits<unsigned long long>
	: public _Num_int_base
	{	
public:
	typedef unsigned long long _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return (0);
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (0xffffffffffffffff);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return ((min)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (0);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (0);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (0);
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (0);
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = (bool)(false);
	static constexpr int digits = (int)(8 * sizeof (unsigned long long));
	static constexpr int digits10 = (int)(8 * sizeof (unsigned long long) * 301L / 1000);
#line 1072 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
	};

		
template<> class numeric_limits<float>
	: public _Num_float_base
	{	
public:
	typedef float _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return (1.175494351e-38F);
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (3.402823466e+38F);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return (-(max)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (1.192092896e-07F);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0.5F);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (1.401298464e-45F);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (__builtin_huge_valf());
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (__builtin_nanf("0"));
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (__builtin_nansf("1"));
		}

	static constexpr int digits = (int)(24);
	static constexpr int digits10 = (int)(6);

	static constexpr int max_digits10 = (int)(2 + 24 * 301L / 1000);

	static constexpr int max_exponent = (int)((int)128);
	static constexpr int max_exponent10 = (int)((int)38);
	static constexpr int min_exponent = (int)((int)(-125));
	static constexpr int min_exponent10 = (int)((int)(-37));
	};

		
template<> class numeric_limits<double>
	: public _Num_float_base
	{	
public:
	typedef double _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return (2.2250738585072014e-308);
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (1.7976931348623158e+308);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return (-(max)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (2.2204460492503131e-016);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0.5);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (4.9406564584124654e-324);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (__builtin_huge_val());
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (__builtin_nan("0"));
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (__builtin_nans("1"));
		}

	static constexpr int digits = (int)(53);
	static constexpr int digits10 = (int)(15);

	static constexpr int max_digits10 = (int)(2 + 53 * 301L / 1000);

	static constexpr int max_exponent = (int)((int)1024);
	static constexpr int max_exponent10 = (int)((int)308);
	static constexpr int min_exponent = (int)((int)(-1021));
	static constexpr int min_exponent10 = (int)((int)(-307));
	};

		
template<> class numeric_limits<long double>
	: public _Num_float_base
	{	
public:
	typedef long double _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return (2.2250738585072014e-308);
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (1.7976931348623158e+308);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return (-(max)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (2.2204460492503131e-016);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0.5L);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (4.9406564584124654e-324);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (__builtin_huge_val());
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (__builtin_nan("0"));
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (__builtin_nans("1"));
		}

	static constexpr int digits = (int)(53);
	static constexpr int digits10 = (int)(15);

	static constexpr int max_digits10 = (int)(2 + 53 * 301L / 1000);

	static constexpr int max_exponent = (int)((int)1024);
	static constexpr int max_exponent10 = (int)((int)308);
	static constexpr int min_exponent = (int)((int)(-1021));
	static constexpr int min_exponent10 = (int)((int)(-307));
	};

  









































































































































































































#line 1466 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"

 
 
 
 

 
 
 
 

 
 
 
 
}
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 1486 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
#line 1487 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"






#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"

#pragma once





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"

#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"

#pragma once








#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"







#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new_debug.h"







#pragma once




extern "C++" {

#pragma pack(push, 8)






         
    __declspec(allocator) void* __cdecl operator new(
            size_t      _Size,
            int         _BlockUse,
          char const* _FileName,
            int         _LineNumber
        );

         
    __declspec(allocator) void* __cdecl operator new[](
            size_t      _Size,
            int         _BlockUse,
          char const* _FileName,
            int         _LineNumber
        );

    void __cdecl operator delete(
        void*       _Block,
        int         _BlockUse,
        char const* _FileName,
        int         _LineNumber
        ) throw();

    void __cdecl operator delete[](
        void*       _Block,
        int         _BlockUse,
        char const* _FileName,
        int         _LineNumber
        ) throw();

#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new_debug.h"



#pragma pack(pop)

} 
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new_debug.h"
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"

__pragma(pack(push, 8)) extern "C" {



typedef void* _HFILE; 

























typedef int (__cdecl* _CRT_REPORT_HOOK )(int, char*,    int*);
typedef int (__cdecl* _CRT_REPORT_HOOKW)(int, wchar_t*, int*);





typedef int (__cdecl* _CRT_ALLOC_HOOK)(int, void*, size_t, int, long, unsigned char const*, int);























































typedef void (__cdecl* _CRT_DUMP_CLIENT)(void*, size_t);





struct _CrtMemBlockHeader;

typedef struct _CrtMemState
{
    struct _CrtMemBlockHeader* pBlockHeader;
    size_t lCounts[5];
    size_t lSizes[5];
    size_t lHighWaterCount;
    size_t lTotalCount;
} _CrtMemState;



    
    

    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
























































































#line 234 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"










    
    
    
    
    
    
    

    
    
    
    
    
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

















































































































































































































































































































#line 585 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"











    
    
    
    
    
    
    

















































































#line 685 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"











    

    
        
    #line 701 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"

    
        
    #line 705 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"

    
        
    #line 709 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"

    
    

    
    

    
    

    
    












































#line 766 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"













    
#line 781 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"



























} __pragma(pack(pop))

#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {
		

typedef _Longlong streamoff;
typedef _Longlong streamsize;

  
  

  



extern __declspec(dllimport)  const streamoff _BADOFF;
  #line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"

		
template<class _Statetype>
	class fpos
	{	
	typedef fpos<_Statetype> _Myt;

public:
	 fpos(streamoff _Off = 0)
		: _Myoff(_Off), _Fpos(0), _Mystate()
		{	
		}

	 fpos(_Statetype _State, fpos_t _Fileposition)
		: _Myoff(0), _Fpos(_Fileposition), _Mystate(_State)
		{	
		}

	_Statetype  state() const
		{	
		return (_Mystate);
		}

	void  state(_Statetype _State)
		{	
		_Mystate = _State;
		}

	fpos_t  seekpos() const
		{	
		return (_Fpos);
		}

	 operator streamoff() const
		{	
		return ((streamoff)(_Myoff + ((long long)(_Fpos))));
		}

	streamoff  operator-(const _Myt& _Right) const
		{	
		return ((streamoff)*this - (streamoff)_Right);
		}

	_Myt&  operator+=(streamoff _Off)
		{	
		_Myoff += _Off;
		return (*this);
		}

	_Myt&  operator-=(streamoff _Off)
		{	
		_Myoff -= _Off;
		return (*this);
		}

	_Myt  operator+(streamoff _Off) const
		{	
		_Myt _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Myt  operator-(streamoff _Off) const
		{	
		_Myt _Tmp = *this;
		return (_Tmp -= _Off);
		}

	bool  operator==(const _Myt& _Right) const
		{	
		return ((streamoff)*this == (streamoff)_Right);
		}

	bool  operator==(streamoff _Right) const
		{	
		return ((streamoff)*this == _Right);
		}

	bool  operator!=(const _Myt& _Right) const
		{	
		return (!(*this == _Right));
		}

private:
	streamoff _Myoff;	
	fpos_t _Fpos;	
	_Statetype _Mystate;	
	};

 

 
 

typedef fpos<_Mbstatet> streampos;

typedef streampos wstreampos;

		
template<class _Elem,
	class _Int_type>
	struct _Char_traits
	{	
	typedef _Elem char_type;
	typedef _Int_type int_type;
	typedef streampos pos_type;
	typedef streamoff off_type;
	typedef _Mbstatet state_type;

	static int __cdecl compare(
		  const _Elem *_First1,
		  const _Elem *_First2, size_t _Count)
		{	
		for (; 0 < _Count; --_Count, ++_First1, ++_First2)
			if (!eq(*_First1, *_First2))
				return (lt(*_First1, *_First2) ? -1 : +1);
		return (0);
		}

	static size_t __cdecl length(  const _Elem *_First)
		{	
		size_t _Count;
		for (_Count = 0; !eq(*_First, _Elem()); ++_First)
			++_Count;
		return (_Count);
		}

	static _Elem *__cdecl copy(
		  _Elem *_First1,
		  const _Elem *_First2, size_t _Count)
		{	
		_Elem *_Next = _First1;
		for (; 0 < _Count; --_Count, ++_Next, ++_First2)
			assign(*_Next, *_First2);
		return (_First1);
		}

	static _Elem *__cdecl _Copy_s(
		  _Elem *_First1, size_t _Dest_size,
		  const _Elem *_First2, size_t _Count)
		{	
		{ if (!(_Count <= _Dest_size)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); return (0); } };
		return (copy(_First1, _First2, _Count));
		}

	static const _Elem *__cdecl find(
		  const _Elem *_First,
		size_t _Count, const _Elem& _Ch)
		{	
		for (; 0 < _Count; --_Count, ++_First)
			if (eq(*_First, _Ch))
				return (_First);
		return (0);
		}

	static _Elem *__cdecl move(
		  _Elem *_First1,
		  const _Elem *_First2, size_t _Count)
		{	
		_Elem *_Next = _First1;
		if (_First2 < _Next && _Next < _First2 + _Count)
			for (_Next += _Count, _First2 += _Count; 0 < _Count; --_Count)
				assign(*--_Next, *--_First2);
		else
			for (; 0 < _Count; --_Count, ++_Next, ++_First2)
				assign(*_Next, *_First2);
		return (_First1);
		}

	static _Elem *__cdecl assign(
		  _Elem *_First,
		size_t _Count, _Elem _Ch)
		{	
		_Elem *_Next = _First;
		for (; 0 < _Count; --_Count, ++_Next)
			assign(*_Next, _Ch);
		return (_First);
		}

	static void __cdecl assign(_Elem& _Left, const _Elem& _Right) noexcept
		{	
		_Left = _Right;
		}

	static constexpr bool __cdecl eq(const _Elem& _Left,
		const _Elem& _Right) noexcept
		{	
		return (_Left == _Right);
		}

	static constexpr bool __cdecl lt(const _Elem& _Left,
		const _Elem& _Right) noexcept
		{	
		return (_Left < _Right);
		}

	static constexpr _Elem __cdecl to_char_type(
		const int_type& _Meta) noexcept
		{	
		return ((_Elem)_Meta);
		}

	static constexpr int_type __cdecl to_int_type(
		const _Elem& _Ch) noexcept
		{	
		return ((int_type)_Ch);
		}

	static constexpr bool __cdecl eq_int_type(const int_type& _Left,
		const int_type& _Right) noexcept
		{	
		return (_Left == _Right);
		}

	static constexpr int_type __cdecl not_eof(
		const int_type& _Meta) noexcept
		{	
		return (_Meta != eof() ? (int_type)_Meta : (int_type)!eof());
		}

	static constexpr int_type __cdecl eof() noexcept
		{	
		return ((int_type)(-1));
		}
	};

		
template<class _Elem>
	struct char_traits
		: public _Char_traits<_Elem, long>
	{	
	};

		
template<>
	struct char_traits<char16_t>
	: public _Char_traits<char16_t, unsigned short>
	{	
	};

typedef streampos u16streampos;

		
template<>
	struct char_traits<char32_t>
	: public _Char_traits<char32_t, unsigned int>
	{	
	};

typedef streampos u32streampos;

		
template<>
	struct char_traits<wchar_t>
	{	
	typedef wchar_t _Elem;
	typedef _Elem char_type;	
	typedef wint_t int_type;
	typedef streampos pos_type;
	typedef streamoff off_type;
	typedef _Mbstatet state_type;

	static int __cdecl compare(const _Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return (_Count == 0 ? 0
			: :: wmemcmp(_First1, _First2, _Count));
		}

	static size_t __cdecl length(const _Elem *_First)
		{	
		return (*_First == 0 ? 0
			: :: wcslen(_First));
		}

	static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return (_Count == 0 ? _First1
			: (_Elem *):: wmemcpy(_First1, _First2, _Count));
		}

	static _Elem *__cdecl _Copy_s(
		  _Elem *_First1, size_t _Size_in_words,
		  const _Elem *_First2, size_t _Count)
		{	
		if (0 < _Count)
			::wmemcpy_s((_First1), (_Size_in_words), (_First2), (_Count));
		return (_First1);
		}

	static const _Elem *__cdecl find(const _Elem *_First, size_t _Count,
		const _Elem& _Ch)
		{	
		return (_Count == 0 ? (const _Elem *)0
			: (const _Elem *):: wmemchr(_First, _Ch, _Count));
		}

	static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return (_Count == 0 ? _First1
			: (_Elem *):: wmemmove(_First1, _First2, _Count));
		}

	static _Elem *__cdecl assign(_Elem *_First, size_t _Count,
		_Elem _Ch)
		{	
		return ((_Elem *):: wmemset(_First, _Ch, _Count));
		}

	static void __cdecl assign(_Elem& _Left, const _Elem& _Right) noexcept
		{	
		_Left = _Right;
		}

	static constexpr bool __cdecl eq(const _Elem& _Left,
		const _Elem& _Right) noexcept
		{	
		return (_Left == _Right);
		}

	static constexpr bool __cdecl lt(const _Elem& _Left,
		const _Elem& _Right) noexcept
		{	
		return (_Left < _Right);
		}

	static constexpr _Elem __cdecl to_char_type(
		const int_type& _Meta) noexcept
		{	
		return (_Meta);
		}

	static constexpr int_type __cdecl to_int_type(
		const _Elem& _Ch) noexcept
		{	
		return (_Ch);
		}

	static constexpr bool __cdecl eq_int_type(const int_type& _Left,
		const int_type& _Right) noexcept
		{	
		return (_Left == _Right);
		}

	static constexpr int_type __cdecl not_eof(
		const int_type& _Meta) noexcept
		{	
		return (_Meta != eof() ? _Meta : !eof());
		}

	static constexpr int_type __cdecl eof() noexcept
		{	
		return (((wint_t)(0xFFFF)));
		}
	};

 
		
template<>
	struct char_traits<unsigned short>
	{	
	typedef unsigned short _Elem;
	typedef _Elem char_type;	
	typedef wint_t int_type;
	typedef streampos pos_type;
	typedef streamoff off_type;
	typedef _Mbstatet state_type;

	static int __cdecl compare(const _Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return (_Count == 0 ? 0
			: :: wmemcmp((const wchar_t *)_First1,
				(const wchar_t *)_First2, _Count));
		}

	static size_t __cdecl length(const _Elem *_First)
		{	
		return (*_First == 0 ? 0
			: :: wcslen((const wchar_t *)_First));
		}

	static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return (_Count == 0 ? _First1
			: (_Elem *):: wmemcpy((wchar_t *)_First1,
				(const wchar_t *)_First2, _Count));
		}

	static _Elem *__cdecl _Copy_s(
		  _Elem *_First1, size_t _Size_in_words,
		  const _Elem *_First2, size_t _Count)
		{	
		if (0 < _Count)
			::wmemcpy_s(((wchar_t *)_First1), (_Size_in_words), ((const wchar_t *)_First2), (_Count));
#line 431 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
		return (_First1);
		}

	static const _Elem *__cdecl find(const _Elem *_First, size_t _Count,
		const _Elem& _Ch)
		{	
		return (_Count == 0 ? (const _Elem *)0
			: (const _Elem *):: wmemchr((const wchar_t *)_First,
				_Ch, _Count));
		}

	static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return (_Count == 0 ? _First1
			: (_Elem *):: wmemmove((wchar_t *)_First1,
				(const wchar_t *)_First2, _Count));
		}

	static _Elem *__cdecl assign(_Elem *_First, size_t _Count,
		_Elem _Ch)
		{	
		return ((_Elem *):: wmemset((wchar_t *)_First, _Ch, _Count));
		}

	static void __cdecl assign(_Elem& _Left, const _Elem& _Right) noexcept
		{	
		_Left = _Right;
		}

	static constexpr bool __cdecl eq(const _Elem& _Left,
		const _Elem& _Right) noexcept
		{	
		return (_Left == _Right);
		}

	static constexpr bool __cdecl lt(const _Elem& _Left,
		const _Elem& _Right) noexcept
		{	
		return (_Left < _Right);
		}

	static constexpr _Elem __cdecl to_char_type(const int_type& _Meta)
		noexcept
		{	
		return (_Meta);
		}

	static constexpr int_type __cdecl to_int_type(const _Elem& _Ch)
		noexcept
		{	
		return (_Ch);
		}

	static constexpr bool __cdecl eq_int_type(const int_type& _Left,
		const int_type& _Right) noexcept
		{	
		return (_Left == _Right);
		}

	static constexpr int_type __cdecl not_eof(const int_type& _Meta)
		noexcept
		{	
		return (_Meta != eof() ? _Meta : !eof());
		}

	static constexpr int_type __cdecl eof() noexcept
		{	
		return (((wint_t)(0xFFFF)));
		}
	};
 #line 503 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"

		
template<> struct char_traits<char>
	{	
	typedef char _Elem;
	typedef _Elem char_type;
	typedef int int_type;
	typedef streampos pos_type;
	typedef streamoff off_type;
	typedef _Mbstatet state_type;

	static int __cdecl compare(const _Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return (_Count == 0 ? 0
			: :: memcmp(_First1, _First2, _Count));
		}

	static size_t __cdecl length(const _Elem *_First)
		{	
		return (*_First == 0 ? 0
			: :: strlen(_First));
		}

	static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return (_Count == 0 ? _First1
			: (_Elem *):: memcpy(_First1, _First2, _Count));
		}

	static _Elem *__cdecl _Copy_s(
		  _Elem *_First1, size_t _Size_in_bytes,
		  const _Elem *_First2, size_t _Count)
		{	
		if (0 < _Count)
			::memcpy_s((_First1), (_Size_in_bytes), (_First2), (_Count));
		return (_First1);
		}

	static const _Elem *__cdecl find(const _Elem *_First, size_t _Count,
		const _Elem& _Ch)
		{	
		return (_Count == 0 ? (const _Elem *)0
			: (const _Elem *):: memchr(_First, _Ch, _Count));
		}

	static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return (_Count == 0 ? _First1
			: (_Elem *):: memmove(_First1, _First2, _Count));
		}

	static _Elem *__cdecl assign(_Elem *_First, size_t _Count,
		_Elem _Ch)
		{	
		return ((_Elem *):: memset(_First, _Ch, _Count));
		}

	static void __cdecl assign(_Elem& _Left, const _Elem& _Right) noexcept
		{	
		_Left = _Right;
		}

	static constexpr bool __cdecl eq(const _Elem& _Left,
		const _Elem& _Right) noexcept
		{	
		return (_Left == _Right);
		}

	static constexpr bool __cdecl lt(const _Elem& _Left,
		const _Elem& _Right) noexcept
		{	
		return ((unsigned char)_Left < (unsigned char)_Right);
		}

	static constexpr _Elem __cdecl to_char_type(
		const int_type& _Meta) noexcept
		{	
		return ((_Elem)_Meta);
		}

	static constexpr int_type __cdecl to_int_type(
		const _Elem& _Ch) noexcept
		{	
		return ((unsigned char)_Ch);
		}

	static constexpr bool __cdecl eq_int_type(const int_type& _Left,
		const int_type& _Right) noexcept
		{	
		return (_Left == _Right);
		}

	static constexpr int_type __cdecl not_eof(
		const int_type& _Meta) noexcept
		{	
		return (_Meta != eof() ? _Meta : !eof());
		}

	static constexpr int_type __cdecl eof() noexcept
		{	
		return ((-1));
		}
	};

		
template<class _Ty>
	class allocator;
class ios_base;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_ios;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class istreambuf_iterator;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class ostreambuf_iterator;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_streambuf;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_istream;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_ostream;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_iostream;
template<class _Elem,
	class _Traits = char_traits<_Elem>,
	class _Alloc = allocator<_Elem> >
	class basic_stringbuf;
template<class _Elem,
	class _Traits = char_traits<_Elem>,
	class _Alloc = allocator<_Elem> >
	class basic_istringstream;
template<class _Elem,
	class _Traits = char_traits<_Elem>,
	class _Alloc = allocator<_Elem> >
	class basic_ostringstream;
template<class _Elem,
	class _Traits = char_traits<_Elem>,
	class _Alloc = allocator<_Elem> >
	class basic_stringstream;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_filebuf;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_ifstream;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_ofstream;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_fstream;

 
template<class _Elem,
	class _InIt >
	class num_get;
template<class _Elem,
	class _OutIt >
	class num_put;
template<class _Elem>
	class collate;
 #line 674 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"

		
typedef basic_ios<char, char_traits<char> > ios;
typedef basic_streambuf<char, char_traits<char> > streambuf;
typedef basic_istream<char, char_traits<char> > istream;
typedef basic_ostream<char, char_traits<char> > ostream;
typedef basic_iostream<char, char_traits<char> > iostream;
typedef basic_stringbuf<char, char_traits<char>,
	allocator<char> > stringbuf;
typedef basic_istringstream<char, char_traits<char>,
	allocator<char> > istringstream;
typedef basic_ostringstream<char, char_traits<char>,
	allocator<char> > ostringstream;
typedef basic_stringstream<char, char_traits<char>,
	allocator<char> > stringstream;
typedef basic_filebuf<char, char_traits<char> > filebuf;
typedef basic_ifstream<char, char_traits<char> > ifstream;
typedef basic_ofstream<char, char_traits<char> > ofstream;
typedef basic_fstream<char, char_traits<char> > fstream;

		
typedef basic_ios<wchar_t, char_traits<wchar_t> > wios;
typedef basic_streambuf<wchar_t, char_traits<wchar_t> >
	wstreambuf;
typedef basic_istream<wchar_t, char_traits<wchar_t> > wistream;
typedef basic_ostream<wchar_t, char_traits<wchar_t> > wostream;
typedef basic_iostream<wchar_t, char_traits<wchar_t> > wiostream;
typedef basic_stringbuf<wchar_t, char_traits<wchar_t>,
	allocator<wchar_t> > wstringbuf;
typedef basic_istringstream<wchar_t, char_traits<wchar_t>,
	allocator<wchar_t> > wistringstream;
typedef basic_ostringstream<wchar_t, char_traits<wchar_t>,
	allocator<wchar_t> > wostringstream;
typedef basic_stringstream<wchar_t, char_traits<wchar_t>,
	allocator<wchar_t> > wstringstream;
typedef basic_filebuf<wchar_t, char_traits<wchar_t> > wfilebuf;
typedef basic_ifstream<wchar_t, char_traits<wchar_t> > wifstream;
typedef basic_ofstream<wchar_t, char_traits<wchar_t> > wofstream;
typedef basic_fstream<wchar_t, char_traits<wchar_t> > wfstream;

 





















 
typedef num_get<char, istreambuf_iterator<char, char_traits<char> > >
	numget;
typedef num_get<wchar_t, istreambuf_iterator<wchar_t, char_traits<wchar_t> > >
	wnumget;
typedef num_put<char, ostreambuf_iterator<char, char_traits<char> > >
	numput;
typedef num_put<wchar_t, ostreambuf_iterator<wchar_t, char_traits<wchar_t> > >
	wnumput;
typedef collate<char> ncollate;
typedef collate<wchar_t> wcollate;
 #line 748 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
}

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 754 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
#line 755 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"





#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"


 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4180 4512)

namespace std {
		
template<class _FwdIt1,
	class _FwdIt2> inline
	void iter_swap(_FwdIt1 _Left, _FwdIt2 _Right)
	{	
	swap(*_Left, *_Right);
	}

		
template<class _Ty,
	size_t _Size,
	class> inline
	void swap(_Ty (&_Left)[_Size], _Ty (&_Right)[_Size])
		noexcept(_Is_nothrow_swappable<_Ty>::value)
	{	
	if (&_Left != &_Right)
		{	
		_Ty *_First1 = _Left;
		_Ty *_Last1 = _First1 + _Size;
		_Ty *_First2 = _Right;
		for (; _First1 != _Last1; ++_First1, ++_First2)
			::std:: iter_swap(_First1, _First2);
		}
	}

template<class _Ty,
	class> inline
	void swap(_Ty& _Left, _Ty& _Right)
		noexcept(is_nothrow_move_constructible<_Ty>::value && is_nothrow_move_assignable<_Ty>::value)
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
	{	
	_Ty _Tmp = ::std:: move(_Left);
	_Left = ::std:: move(_Right);
	_Right = ::std:: move(_Tmp);
	}

		
template<class _Ty> inline
	void _Swap_adl(_Ty& _Left, _Ty& _Right)
		noexcept(_Is_nothrow_swappable<_Ty>::value)
	{	
	swap(_Left, _Right);
	}

		
struct piecewise_construct_t
	{	
	};

constexpr piecewise_construct_t piecewise_construct{};

		
template<class...>
	class tuple;

template<class _Ty1,
	class _Ty2>
	struct pair
	{	
	typedef pair<_Ty1, _Ty2> _Myt;
	typedef _Ty1 first_type;
	typedef _Ty2 second_type;

	template<class _Uty1 = _Ty1,
		class _Uty2 = _Ty2,
		class = enable_if_t<is_default_constructible<_Uty1>::value
						&& is_default_constructible<_Uty2>::value> >
		constexpr pair()
		: first(), second()
		{	
		}

	template<class _Uty1 = _Ty1,
		class _Uty2 = _Ty2,
		class = enable_if_t<is_copy_constructible<_Uty1>::value
						&& is_copy_constructible<_Uty2>::value>,
		enable_if_t<is_convertible<const _Uty1&, _Uty1>::value
				&& is_convertible<const _Uty2&, _Uty2>::value, int> = 0>
		constexpr pair(const _Ty1& _Val1, const _Ty2& _Val2)
		: first(_Val1), second(_Val2)
		{	
		}

	template<class _Uty1 = _Ty1,
		class _Uty2 = _Ty2,
		class = enable_if_t<is_copy_constructible<_Uty1>::value
						&& is_copy_constructible<_Uty2>::value>,
		enable_if_t<!is_convertible<const _Uty1&, _Uty1>::value
				|| !is_convertible<const _Uty2&, _Uty2>::value, int> = 0>
		constexpr explicit pair(const _Ty1& _Val1, const _Ty2& _Val2)
		: first(_Val1), second(_Val2)
		{	
		}

	pair(const pair&) = default;
	pair(pair&&) = default;

	template<class _Other1,
		class _Other2,
		class = enable_if_t<is_constructible<_Ty1, const _Other1&>::value
						&& is_constructible<_Ty2, const _Other2&>::value>,
		enable_if_t<is_convertible<const _Other1&, _Ty1>::value
				&& is_convertible<const _Other2&, _Ty2>::value, int> = 0>
		constexpr pair(const pair<_Other1, _Other2>& _Right)
		: first(_Right.first), second(_Right.second)
		{	
		}

	template<class _Other1,
		class _Other2,
		class = enable_if_t<is_constructible<_Ty1, const _Other1&>::value
						&& is_constructible<_Ty2, const _Other2&>::value>,
		enable_if_t<!is_convertible<const _Other1&, _Ty1>::value
				|| !is_convertible<const _Other2&, _Ty2>::value, int> = 0>
		constexpr explicit pair(const pair<_Other1, _Other2>& _Right)
		: first(_Right.first), second(_Right.second)
		{	
		}

	template<class _Other1,
		class _Other2>
		_Myt& operator=(const pair<_Other1, _Other2>& _Right)
		{	
		first = _Right.first;
		second = _Right.second;
		return (*this);
		}

	template<class _Tuple1,
		class _Tuple2,
		size_t... _Indexes1,
		size_t... _Indexes2> inline
		pair(_Tuple1& _Val1,
			_Tuple2& _Val2,
			integer_sequence<size_t, _Indexes1...>,
			integer_sequence<size_t, _Indexes2...>);

	template<class... _Types1,
		class... _Types2> inline
		pair(piecewise_construct_t,
			tuple<_Types1...> _Val1,
			tuple<_Types2...> _Val2);

	template<class _Other1,
		class _Other2,
		class = enable_if_t<is_constructible<_Ty1, _Other1>::value
						&& is_constructible<_Ty2, _Other2>::value>,
		enable_if_t<is_convertible<_Other1, _Ty1>::value
				&& is_convertible<_Other2, _Ty2>::value, int> = 0>
		constexpr pair(_Other1&& _Val1, _Other2&& _Val2)
			noexcept((is_nothrow_constructible<_Ty1, _Other1>::value && is_nothrow_constructible<_Ty2, _Other2>::value))
#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
		: first(::std:: forward<_Other1>(_Val1)),
				second(::std:: forward<_Other2>(_Val2))
		{	
		}

	template<class _Other1,
		class _Other2,
		class = enable_if_t<is_constructible<_Ty1, _Other1>::value
						&& is_constructible<_Ty2, _Other2>::value>,
		enable_if_t<!is_convertible<_Other1, _Ty1>::value
				|| !is_convertible<_Other2, _Ty2>::value, int> = 0>
		constexpr explicit pair(_Other1&& _Val1, _Other2&& _Val2)
			noexcept((is_nothrow_constructible<_Ty1, _Other1>::value && is_nothrow_constructible<_Ty2, _Other2>::value))
#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
		: first(::std:: forward<_Other1>(_Val1)),
				second(::std:: forward<_Other2>(_Val2))
		{	
		}

	template<class _Other1,
		class _Other2,
		class = enable_if_t<is_constructible<_Ty1, _Other1>::value
						&& is_constructible<_Ty2, _Other2>::value>,
		enable_if_t<is_convertible<_Other1, _Ty1>::value
				&& is_convertible<_Other2, _Ty2>::value, int> = 0>
		constexpr pair(pair<_Other1, _Other2>&& _Right)
			noexcept((is_nothrow_constructible<_Ty1, _Other1>::value && is_nothrow_constructible<_Ty2, _Other2>::value))
#line 198 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
		: first(::std:: forward<_Other1>(_Right.first)),
			second(::std:: forward<_Other2>(_Right.second))
		{	
		}

	template<class _Other1,
		class _Other2,
		class = enable_if_t<is_constructible<_Ty1, _Other1>::value
						&& is_constructible<_Ty2, _Other2>::value>,
		enable_if_t<!is_convertible<_Other1, _Ty1>::value
				|| !is_convertible<_Other2, _Ty2>::value, int> = 0>
		constexpr explicit pair(pair<_Other1, _Other2>&& _Right)
			noexcept((is_nothrow_constructible<_Ty1, _Other1>::value && is_nothrow_constructible<_Ty2, _Other2>::value))
#line 212 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
		: first(::std:: forward<_Other1>(_Right.first)),
			second(::std:: forward<_Other2>(_Right.second))
		{	
		}

	template<class _Other1,
		class _Other2>
		_Myt& operator=(pair<_Other1, _Other2>&& _Right)
		{	
		first = ::std:: forward<_Other1>(_Right.first);
		second = ::std:: forward<_Other2>(_Right.second);
		return (*this);
		}

	_Myt& operator=(_Myt&& _Right)
		noexcept((is_nothrow_move_assignable<_Ty1>::value && is_nothrow_move_assignable<_Ty2>::value))
#line 229 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
		{	
		first = ::std:: forward<_Ty1>(_Right.first);
		second = ::std:: forward<_Ty2>(_Right.second);
		return (*this);
		}

	_Myt& operator=(const _Myt& _Right)
		{	
		first = _Right.first;
		second = _Right.second;
		return (*this);
		}

	_Ty1 first;		
	_Ty2 second;	

	void swap(_Myt& _Right)
		noexcept(_Is_nothrow_swappable<_Ty1>::value && _Is_nothrow_swappable<_Ty2>::value)
#line 248 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
		{	
		if (this != &_Right)
			{	
			_Swap_adl(first, _Right.first);
			_Swap_adl(second, _Right.second);
			}
		}
	};

		

template<class _Ty1,
	class _Ty2,
	class = enable_if_t<_Is_swappable<_Ty1>::value && _Is_swappable<_Ty2>::value>> inline
	void swap(pair<_Ty1, _Ty2>& _Left, pair<_Ty1, _Ty2>& _Right)
		noexcept(noexcept(_Left.swap(_Right)))
	{	
	_Left.swap(_Right);
	}

template<class _Ty1,
	class _Ty2> inline
	constexpr bool operator==(const pair<_Ty1, _Ty2>& _Left,
		const pair<_Ty1, _Ty2>& _Right)
	{	
	return (_Left.first == _Right.first && _Left.second == _Right.second);
	}

template<class _Ty1,
	class _Ty2> inline
	constexpr bool operator!=(const pair<_Ty1, _Ty2>& _Left,
		const pair<_Ty1, _Ty2>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Ty1,
	class _Ty2> inline
	constexpr bool operator<(const pair<_Ty1, _Ty2>& _Left,
		const pair<_Ty1, _Ty2>& _Right)
	{	
	return (_Left.first < _Right.first ||
		(!(_Right.first < _Left.first) && _Left.second < _Right.second));
	}

template<class _Ty1,
	class _Ty2> inline
	constexpr bool operator>(const pair<_Ty1, _Ty2>& _Left,
		const pair<_Ty1, _Ty2>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Ty1,
	class _Ty2> inline
	constexpr bool operator<=(const pair<_Ty1, _Ty2>& _Left,
		const pair<_Ty1, _Ty2>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Ty1,
	class _Ty2> inline
	constexpr bool operator>=(const pair<_Ty1, _Ty2>& _Left,
		const pair<_Ty1, _Ty2>& _Right)
	{	
	return (!(_Left < _Right));
	}

	

template<class _Ty1,
	class _Ty2> inline
	constexpr pair<typename _Unrefwrap<_Ty1>::type,
		typename _Unrefwrap<_Ty2>::type>
		make_pair(_Ty1&& _Val1, _Ty2&& _Val2)
	{	
	typedef pair<typename _Unrefwrap<_Ty1>::type,
		typename _Unrefwrap<_Ty2>::type> _Mypair;
	return (_Mypair(::std:: forward<_Ty1>(_Val1),
		::std:: forward<_Ty2>(_Val2)));
	}

		
	namespace rel_ops
		{	
template<class _Ty> inline
	bool operator!=(const _Ty& _Left, const _Ty& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Ty> inline
	bool operator>(const _Ty& _Left, const _Ty& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Ty> inline
	bool operator<=(const _Ty& _Left, const _Ty& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Ty> inline
	bool operator>=(const _Ty& _Left, const _Ty& _Right)
	{	
	return (!(_Left < _Right));
	}
		}
}

namespace std {
template<class _Ty,
	size_t _Size>
	class array;

	
template<class _Tuple>
	struct tuple_size;

template<class _Ty,
	size_t _Size>
	struct tuple_size<array<_Ty, _Size> >
		: integral_constant<size_t, _Size>
	{	
	};

template<class _Ty1,
	class _Ty2>
	struct tuple_size<pair<_Ty1, _Ty2> >
	: integral_constant<size_t, 2>
	{	
	};

template<class... _Types>
	struct tuple_size<tuple<_Types...> >
	: integral_constant<size_t, sizeof...(_Types)>
	{	
	};


template<class _Tuple>
	struct tuple_size<const _Tuple>
	: tuple_size<_Tuple>
	{	
	};

template<class _Tuple>
	struct tuple_size<volatile _Tuple>
	: tuple_size<_Tuple>
	{	
	};

template<class _Tuple>
	struct tuple_size<const volatile _Tuple>
	: tuple_size<_Tuple>
	{	
	};

 
template<class _Ty>
	constexpr size_t tuple_size_v = tuple_size<_Ty>::value;
 #line 412 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"

	
template<size_t _Index,
	class _Tuple>
	struct tuple_element;

template<size_t _Idx,
	class _Ty,
	size_t _Size>
	struct tuple_element<_Idx, array<_Ty, _Size> >
	{	
	static_assert(_Idx < _Size, "array index out of bounds");

	typedef _Ty type;
	};

template<class _Ty1,
	class _Ty2>
	struct tuple_element<0, pair<_Ty1, _Ty2> >
	{	
	typedef _Ty1 type;
	};

template<class _Ty1,
	class _Ty2>
	struct tuple_element<1, pair<_Ty1, _Ty2> >
	{	
	typedef _Ty2 type;
	};

template<size_t _Index>
	struct tuple_element<_Index, tuple<> >
	{	
	static_assert(_Always_false<integral_constant<size_t, _Index> >::value,
		"tuple index out of bounds");
	};

template<class _This,
	class... _Rest>
	struct tuple_element<0, tuple<_This, _Rest...> >
	{	
	typedef _This type;
	typedef tuple<_This, _Rest...> _Ttype;
	};

template<size_t _Index,
	class _This,
	class... _Rest>
	struct tuple_element<_Index, tuple<_This, _Rest...> >
		: public tuple_element<_Index - 1, tuple<_Rest...> >
	{	
	};


template<size_t _Index,
	class _Tuple>
	struct tuple_element<_Index, const _Tuple>
		: public tuple_element<_Index, _Tuple>
	{	
	typedef tuple_element<_Index, _Tuple> _Mybase;
	typedef typename add_const<typename _Mybase::type>::type type;
	};

template<size_t _Index,
	class _Tuple>
	struct tuple_element<_Index, volatile _Tuple>
		: public tuple_element<_Index, _Tuple>
	{	
	typedef tuple_element<_Index, _Tuple> _Mybase;
	typedef typename add_volatile<typename _Mybase::type>::type type;
	};

template<size_t _Index,
	class _Tuple>
	struct tuple_element<_Index, const volatile _Tuple>
		: public tuple_element<_Index, _Tuple>
	{	
	typedef tuple_element<_Index, _Tuple> _Mybase;
	typedef typename add_cv<typename _Mybase::type>::type type;
	};

template<size_t _Index,
	class _Tuple>
	using tuple_element_t = typename tuple_element<_Index, _Tuple>::type;

	
template<class _Ret,
	class _Pair> inline
	constexpr _Ret _Pair_get(_Pair& _Pr,
		integral_constant<size_t, 0>) noexcept
	{	
	return (_Pr.first);
	}

template<class _Ret,
	class _Pair> inline
	constexpr _Ret _Pair_get(_Pair& _Pr,
		integral_constant<size_t, 1>) noexcept
	{	
	return (_Pr.second);
	}

template<size_t _Idx,
	class _Ty1,
	class _Ty2> inline
	constexpr typename tuple_element<_Idx, pair<_Ty1, _Ty2> >::type&
		get(pair<_Ty1, _Ty2>& _Pr) noexcept
	{	
	typedef typename tuple_element<_Idx, pair<_Ty1, _Ty2> >::type& _Rtype;
	return (_Pair_get<_Rtype>(_Pr, integral_constant<size_t, _Idx>()));
	}

template<class _Ty1,
	class _Ty2> inline
	constexpr _Ty1& get(pair<_Ty1, _Ty2>& _Pr) noexcept
	{	
	return (::std:: get<0>(_Pr));
	}

template<class _Ty2,
	class _Ty1> inline
	constexpr _Ty2& get(pair<_Ty1, _Ty2>& _Pr) noexcept
	{	
	return (::std:: get<1>(_Pr));
	}

template<size_t _Idx,
	class _Ty1,
	class _Ty2> inline
	constexpr const typename tuple_element<_Idx, pair<_Ty1, _Ty2> >::type&
		get(const pair<_Ty1, _Ty2>& _Pr) noexcept
	{	
	typedef const typename tuple_element<_Idx, pair<_Ty1, _Ty2> >::type&
		_Ctype;
	return (_Pair_get<_Ctype>(_Pr, integral_constant<size_t, _Idx>()));
	}

template<class _Ty1,
	class _Ty2> inline
	constexpr const _Ty1& get(const pair<_Ty1, _Ty2>& _Pr) noexcept
	{	
	return (::std:: get<0>(_Pr));
	}

template<class _Ty2,
	class _Ty1> inline
	constexpr const _Ty2& get(const pair<_Ty1, _Ty2>& _Pr) noexcept
	{	
	return (::std:: get<1>(_Pr));
	}

template<size_t _Idx,
	class _Ty1,
	class _Ty2> inline
	constexpr typename tuple_element<_Idx, pair<_Ty1, _Ty2> >::type&&
		get(pair<_Ty1, _Ty2>&& _Pr) noexcept
	{	
	typedef typename tuple_element<_Idx, pair<_Ty1, _Ty2> >::type&& _RRtype;
	return (::std:: forward<_RRtype>(::std:: get<_Idx>(_Pr)));
	}

template<class _Ty1,
	class _Ty2> inline
	constexpr _Ty1&& get(pair<_Ty1, _Ty2>&& _Pr) noexcept
	{	
	return (::std:: get<0>(::std:: move(_Pr)));
	}

template<class _Ty2,
	class _Ty1> inline
	constexpr _Ty2&& get(pair<_Ty1, _Ty2>&& _Pr) noexcept
	{	
	return (::std:: get<1>(::std:: move(_Pr)));
	}

	
template<class _Ty,
	class _Other = _Ty> inline
	_Ty exchange(_Ty& _Val, _Other&& _New_val)
	{	
	_Ty _Old_val = ::std:: move(_Val);
	_Val = ::std:: forward<_Other>(_New_val);
	return (_Old_val);
	}

	
template<class _Ty> inline
	constexpr add_const_t<_Ty>& as_const(_Ty& _Val) noexcept
	{	
	return (_Val);
	}

template<class _Ty>
	void as_const(const _Ty&&) = delete;
}


namespace std {
namespace tr1 {	
using ::std:: get;
using ::std:: tuple_element;
using ::std:: tuple_size;
}	
}
#line 617 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 622 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
#line 623 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"





#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {
		

 












#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
  
 #line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"

		
struct _Container_proxy;
struct _Container_base12;
struct _Iterator_base12;

struct _Container_base0
	{	
	void _Orphan_all()
		{	
		}

	void _Swap_all(_Container_base0&)
		{	
		}
	};

struct _Iterator_base0
	{	
	void _Adopt(const void *)
		{	
		}

	const _Container_base0 *_Getcont() const
		{	
		return (0);
		}
	};

		
struct _Container_proxy
	{	
	_Container_proxy()
		: _Mycont(0), _Myfirstiter(0)
		{	
		}

	const _Container_base12 *_Mycont;
	_Iterator_base12 *_Myfirstiter;
	};

struct _Container_base12
	{	
public:
	_Container_base12()
		: _Myproxy(0)
		{	
		}

	_Container_base12(const _Container_base12&)
		: _Myproxy(0)
		{	
		}

	_Container_base12& operator=(const _Container_base12&)
		{	
		return (*this);
		}

	~_Container_base12() noexcept
		{	
		_Orphan_all();
		}

	_Iterator_base12 **_Getpfirst() const
		{	
		return (_Myproxy == 0 ? 0 : &_Myproxy->_Myfirstiter);
		}

	void _Orphan_all();	
	void _Swap_all(_Container_base12&);	

	_Container_proxy *_Myproxy;
	};

struct _Iterator_base12
	{	
public:
	_Iterator_base12()
		: _Myproxy(0), _Mynextiter(0)
		{	
		}

	_Iterator_base12(const _Iterator_base12& _Right)
		: _Myproxy(0), _Mynextiter(0)
		{	
		*this = _Right;
		}

	_Iterator_base12& operator=(const _Iterator_base12& _Right)
		{	
		if (_Myproxy == _Right._Myproxy)
			;
		else if (_Right._Myproxy != 0)
			_Adopt(_Right._Myproxy->_Mycont);
		else
			{	
 


#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
			}

		return (*this);
		}

	~_Iterator_base12() noexcept
		{	
 


#line 146 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
		}

	void _Adopt(const _Container_base12 *_Parent)
		{	
		if (_Parent == 0)
			{	
 


#line 156 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
			}
		else
			{	
			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;

 









#line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
			_Myproxy = _Parent_proxy;
 #line 174 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
			}
		}

	void _Clrcont()
		{	
		_Myproxy = 0;
		}

	const _Container_base12 *_Getcont() const
		{	
		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);
		}

	_Iterator_base12 **_Getpnext()
		{	
		return (&_Mynextiter);
		}

	void _Orphan_me()
		{	
 











#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
		}

	_Container_proxy *_Myproxy;
	_Iterator_base12 *_Mynextiter;
	};

		
inline void _Container_base12::_Orphan_all()
	{	
 









#line 227 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
	}

inline void _Container_base12::_Swap_all(_Container_base12& _Right)
	{	
 

#line 234 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"

	_Container_proxy *_Temp = _Myproxy;
	_Myproxy = _Right._Myproxy;
	_Right._Myproxy = _Temp;

	if (_Myproxy != 0)
		_Myproxy->_Mycont = (_Container_base12 *)this;
	if (_Right._Myproxy != 0)
		_Right._Myproxy->_Mycont = (_Container_base12 *)&_Right;
	}

 
typedef _Container_base0 _Container_base;
typedef _Iterator_base0 _Iterator_base;

 


#line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"

	
struct _Zero_then_variadic_args_t
	{	
	};	

struct _One_then_variadic_args_t
	{	
	};	

template<class _Ty1,
	class _Ty2,
	bool = is_empty<_Ty1>::value && !is_final<_Ty1>::value>
	class _Compressed_pair final
		: private _Ty1

	{	
private:
	_Ty2 _Myval2;

	typedef _Ty1 _Mybase;	

public:
	template<class... _Other2>
		constexpr explicit _Compressed_pair(_Zero_then_variadic_args_t,
			_Other2&&... _Val2)
		: _Ty1(), _Myval2(::std:: forward<_Other2>(_Val2)...)
		{	
		}

	template<class _Other1,
		class... _Other2>
		_Compressed_pair(_One_then_variadic_args_t,
			_Other1&& _Val1, _Other2&&... _Val2)
		: _Ty1(::std:: forward<_Other1>(_Val1)),
			_Myval2(::std:: forward<_Other2>(_Val2)...)
		{	
		}


	_Ty1& _Get_first() noexcept
		{	
		return (*this);
		}

	const _Ty1& _Get_first() const noexcept
		{	
		return (*this);
		}

	volatile _Ty1& _Get_first() volatile noexcept
		{	
		return (*this);
		}

	const volatile _Ty1& _Get_first() const volatile noexcept
		{	
		return (*this);
		}

	_Ty2& _Get_second() noexcept
		{	
		return (_Myval2);
		}

	const _Ty2& _Get_second() const noexcept
		{	
		return (_Myval2);
		}

	volatile _Ty2& _Get_second() volatile noexcept
		{	
		return (_Myval2);
		}

	const volatile _Ty2& _Get_second() const volatile noexcept
		{	
		return (_Myval2);
		}
	};

template<class _Ty1,
	class _Ty2>
	class _Compressed_pair<_Ty1, _Ty2, false> final

	{	
private:
	_Ty1 _Myval1;
	_Ty2 _Myval2;

public:
	template<class... _Other2>
		constexpr explicit _Compressed_pair(_Zero_then_variadic_args_t,
			_Other2&&... _Val2)
		: _Myval1(), _Myval2(::std:: forward<_Other2>(_Val2)...)
		{	
		}

	template<class _Other1,
		class... _Other2>
		_Compressed_pair(_One_then_variadic_args_t,
			_Other1&& _Val1, _Other2&&... _Val2)
		: _Myval1(::std:: forward<_Other1>(_Val1)),
			_Myval2(::std:: forward<_Other2>(_Val2)...)
		{	
		}


	_Ty1& _Get_first() noexcept
		{	
		return (_Myval1);
		}

	const _Ty1& _Get_first() const noexcept
		{	
		return (_Myval1);
		}

	volatile _Ty1& _Get_first() volatile noexcept
		{	
		return (_Myval1);
		}

	const volatile _Ty1& _Get_first() const volatile noexcept
		{	
		return (_Myval1);
		}

	_Ty2& _Get_second() noexcept
		{	
		return (_Myval2);
		}

	const _Ty2& _Get_second() const noexcept
		{	
		return (_Myval2);
		}

	volatile _Ty2& _Get_second() volatile noexcept
		{	
		return (_Myval2);
		}

	const volatile _Ty2& _Get_second() const volatile noexcept
		{	
		return (_Myval2);
		}
	};

		
template<class _Ty,
	class = void>
	struct _Is_checked_helper
		: false_type
	{	
	};

template<class _Ty>
	struct _Is_checked_helper<_Ty, void_t<
		typename _Ty::_Unchecked_type> >
		: true_type
	{	
	};

		
template<class _Iter> inline
	typename _Is_checked_helper<_Iter>::type _Is_checked(_Iter)
	{	
	return {};
	}

		
template<class _Iter> inline
	_Iter _Unchecked(_Iter _Src)
	{	
	return (_Src);
	}

 


		
 

template<class _Iter> inline
	decltype(_Unchecked(::std:: declval<_Iter>())) _Unchecked_idl0(_Iter _Src)
	{	
	return (_Unchecked(_Src));
	}

 







#line 452 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"

		
template<class _Iter,
	class _UIter> inline
	_Iter& _Rechecked(_Iter& _Dest, _UIter _Src)
	{	
	_Dest = _Src;
	return (_Dest);
	}

		




















		
		
		















#line 502 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"


		
		
struct input_iterator_tag
	{	
	};

struct _Mutable_iterator_tag	
	{	
	};

struct output_iterator_tag
	: _Mutable_iterator_tag
	{	
	};

struct forward_iterator_tag
	: input_iterator_tag, _Mutable_iterator_tag
	{	
	};

struct bidirectional_iterator_tag
	: forward_iterator_tag
	{	
	};

struct random_access_iterator_tag
	: bidirectional_iterator_tag
	{	
	};

		
struct _General_ptr_iterator_tag
	{	
	};

struct _Trivially_copyable_ptr_iterator_tag
	: _General_ptr_iterator_tag
	{	
	};

struct _Really_trivial_ptr_iterator_tag
	: _Trivially_copyable_ptr_iterator_tag
	{	
	};

	
struct _Any_tag
	{	
	constexpr _Any_tag() noexcept = default;
	template<class _Ty>
		constexpr _Any_tag(_Ty&&) noexcept {}
	};

		
template<class _Category,
	class _Ty,
	class _Diff = ptrdiff_t,
	class _Pointer = _Ty *,
	class _Reference = _Ty&>
	struct iterator
	{	
	typedef _Category iterator_category;
	typedef _Ty value_type;
	typedef _Diff difference_type;

	typedef _Pointer pointer;
	typedef _Reference reference;
	};

template<class _Category,
	class _Ty,
	class _Diff,
	class _Pointer,
	class _Reference,
	class _Base>
	struct _Iterator012
		: public _Base
	{	
	typedef _Category iterator_category;
	typedef _Ty value_type;
	typedef _Diff difference_type;

	typedef _Pointer pointer;
	typedef _Reference reference;
	};


typedef iterator<output_iterator_tag, void, void, void, void> _Outit;

		
template<class,
	class = void>
	struct _Iterator_traits_base
	{	
	};

template<class _Iter>
	struct _Iterator_traits_base<_Iter, void_t<
		typename _Iter::iterator_category,
		typename _Iter::value_type,
		typename _Iter::difference_type,
		typename _Iter::pointer,
		typename _Iter::reference
		> >
	{	
	typedef typename _Iter::iterator_category iterator_category;
	typedef typename _Iter::value_type value_type;
	typedef typename _Iter::difference_type difference_type;

	typedef typename _Iter::pointer pointer;
	typedef typename _Iter::reference reference;
	};

template<class _Iter>
	struct iterator_traits
		: _Iterator_traits_base<_Iter>
	{	
	};

template<class _Ty>
	struct iterator_traits<_Ty *>
	{	
	typedef random_access_iterator_tag iterator_category;
	typedef _Ty value_type;
	typedef ptrdiff_t difference_type;

	typedef _Ty *pointer;
	typedef _Ty& reference;
	};

template<class _Ty>
	struct iterator_traits<const _Ty *>
	{	
	typedef random_access_iterator_tag iterator_category;
	typedef _Ty value_type;
	typedef ptrdiff_t difference_type;

	typedef const _Ty *pointer;
	typedef const _Ty& reference;
	};

		
template<class _Iter>
	using _Iter_value_t = typename iterator_traits<_Iter>::value_type;

		
template<class _Iter>
	using _Iter_diff_t = typename iterator_traits<_Iter>::difference_type;

		
template<class _Iter>
	using _Iter_cat_t = typename iterator_traits<_Iter>::iterator_category;

		
template<class _Ty,
	class = void>
	struct _Is_iterator
		: false_type
	{	
	};

template<class _Ty>
	struct _Is_iterator<_Ty, void_t<
		typename iterator_traits<_Ty>::iterator_category
		> >
		: true_type
	{	
	};


		
 
template<class _Iter,
	class _Diff> inline
	auto _Unchecked_n(_Iter _Src, _Diff)
	{	
	return (_Unchecked(_Src));
	}
 

























#line 709 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"


		
template<class _Ty1,
	class _Ty2>
	struct _Is_same_size
		: bool_constant<sizeof(_Ty1) == sizeof(_Ty2)>
	{	
	};

		
template<class _Elem,
	bool _Is_enum = is_enum<_Elem>::value>
	struct _Unwrap_enum
	{	
	typedef underlying_type_t<_Elem> type;
	};

template<class _Elem>
	struct _Unwrap_enum<_Elem, false>
	{	
	typedef _Elem type;
	};

		
template<class _Ty1,
	class _Ty2>
	struct _Both_or_neither_bool
		: bool_constant<is_same<bool, _Ty1>::value == is_same<bool, _Ty2>::value>
	{	
	};

		
template<class _Source,
	class _Dest>
	struct _Ptr_cat_helper
	{	
	typedef typename _Unwrap_enum<_Source>::type _USource;
	typedef typename _Unwrap_enum<_Dest>::type _UDest;
	typedef conditional_t<
		conjunction<
			_Is_same_size<_USource, _UDest>,
			is_integral<_USource>,
			is_integral<_UDest>,
			_Both_or_neither_bool<_USource, _UDest>,
			
			negation<is_volatile<_Source>>,
			negation<is_volatile<_Dest>>
		>::value,
		_Really_trivial_ptr_iterator_tag,
		_General_ptr_iterator_tag> type;
	};

template<class _Elem>
	struct _Ptr_cat_helper<_Elem, _Elem>
	{	
	typedef conditional_t<
		is_trivially_copyable<_Elem>::value,
		conditional_t<is_trivial<_Elem>::value,
			_Really_trivial_ptr_iterator_tag,
			_Trivially_copyable_ptr_iterator_tag>,
		_General_ptr_iterator_tag> type;
	};

template<class _Anything>
	struct _Ptr_cat_helper<_Anything *, const _Anything *>
	{	
	typedef _Really_trivial_ptr_iterator_tag type;
	};

template<class _Source,
	class _Dest> inline
	_General_ptr_iterator_tag _Ptr_copy_cat(const _Source&, const _Dest&)
	{	
	return {};
	}

template<class _Source,
	class _Dest> inline
	conditional_t<is_trivially_assignable<_Dest&, _Source&>::value,
		typename _Ptr_cat_helper<remove_const_t<_Source>, _Dest>::type,
		_General_ptr_iterator_tag>
		_Ptr_copy_cat(_Source * const&, _Dest * const&)
	{	
	return {};
	}

template<class _Source,
	class _Dest> inline
	_General_ptr_iterator_tag _Ptr_move_cat(const _Source&, const _Dest&)
	{	
	return {};
	}

template<class _Source,
	class _Dest> inline
	conditional_t<is_trivially_assignable<_Dest&, _Source>::value,
		typename _Ptr_cat_helper<remove_const_t<_Source>, _Dest>::type,
		_General_ptr_iterator_tag>
		_Ptr_move_cat(_Source * const&, _Dest * const&)
	{	
	return {};
	}

		

 
  
  
  
  
  
  
  
  
  
  

 









































































































































































































#line 1030 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"

 
  
 



















#line 1054 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"

		
		
template<class _InIt,
	class _Diff> inline
	void _Advance1(_InIt& _Where, _Diff _Off, input_iterator_tag)
	{	
 


#line 1065 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"

	for (; 0 < _Off; --_Off)
		++_Where;
	}

template<class _BidIt,
	class _Diff> inline
	void _Advance1(_BidIt& _Where, _Diff _Off, bidirectional_iterator_tag)
	{	
	for (; 0 < _Off; --_Off)
		++_Where;
	for (; _Off < 0; ++_Off)
		--_Where;
	}

template<class _RanIt,
	class _Diff> inline
	void _Advance1(_RanIt& _Where, _Diff _Off, random_access_iterator_tag)
	{	
	_Where += _Off;
	}

template<class _InIt,
	class _Diff> inline
	void advance(_InIt& _Where, _Diff _Off)
	{	
		
	_Advance1(_Where, _Off, _Iter_cat_t<remove_const_t<_InIt>>());
	}

		
template<class _InIt> inline
	_Iter_diff_t<_InIt>
		_Distance1(_InIt _First, _InIt _Last, input_iterator_tag)
	{	
	_Iter_diff_t<_InIt> _Off = 0;
	for (; _First != _Last; ++_First)
		++_Off;

	return (_Off);
	}

template<class _RanIt> inline
	_Iter_diff_t<_RanIt>
		_Distance1(_RanIt _First, _RanIt _Last, random_access_iterator_tag)
	{	
 





#line 1118 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"

	return (_Last - _First);
	}

template<class _InIt> inline
	_Iter_diff_t<_InIt>
		distance(_InIt _First, _InIt _Last)
	{	
	return (_Distance1(_First, _Last, _Iter_cat_t<_InIt>()));
	}

		
template<class _InIt> inline
	_InIt next(_InIt _First, _Iter_diff_t<_InIt> _Off = 1)
	{	
	static_assert(is_base_of<input_iterator_tag,
		typename iterator_traits<_InIt>::iterator_category>::value,
		"next requires input iterator");

	::std:: advance(_First, _Off);
	return (_First);
	}

		
template<class _BidIt> inline
	_BidIt prev(_BidIt _First, _Iter_diff_t<_BidIt> _Off = 1)
	{	
	static_assert(is_base_of<bidirectional_iterator_tag,
		typename iterator_traits<_BidIt>::iterator_category>::value,
		"prev requires bidirectional iterator");

	::std:: advance(_First, -_Off);
	return (_First);
	}

		
template<class _Ty>
	struct pointer_traits;

template<class _RanIt>
	class reverse_iterator
		: public iterator<
			typename iterator_traits<_RanIt>::iterator_category,
			typename iterator_traits<_RanIt>::value_type,
			typename iterator_traits<_RanIt>::difference_type,
			typename iterator_traits<_RanIt>::pointer,
			typename iterator_traits<_RanIt>::reference>
	{	
	typedef reverse_iterator<_RanIt> _Myt;

public:
	typedef typename iterator_traits<_RanIt>::difference_type difference_type;
	typedef typename iterator_traits<_RanIt>::pointer pointer;
	typedef typename iterator_traits<_RanIt>::reference reference;
	typedef _RanIt iterator_type;

	reverse_iterator()
		: current()
		{	
		}

	explicit reverse_iterator(_RanIt _Right)
		: current(_Right)
		{	
		}

	template<class _Other>
		reverse_iterator(const reverse_iterator<_Other>& _Right)
		: current(_Right.base())
		{	
		}

	template<class _Other>
		_Myt& operator=(const reverse_iterator<_Other>& _Right)
		{	
		current = _Right.base();
		return (*this);
		}

	_RanIt base() const
		{	
		return (current);
		}

	reference operator*() const
		{	
		_RanIt _Tmp = current;
		return (*--_Tmp);
		}

	pointer operator->() const
		{	
		return (pointer_traits<pointer>::pointer_to(**this));
		}

	_Myt& operator++()
		{	
		--current;
		return (*this);
		}

	_Myt operator++(int)
		{	
		_Myt _Tmp = *this;
		--current;
		return (_Tmp);
		}

	_Myt& operator--()
		{	
		++current;
		return (*this);
		}

	_Myt operator--(int)
		{	
		_Myt _Tmp = *this;
		++current;
		return (_Tmp);
		}



	_Myt& operator+=(difference_type _Off)
		{	
		current -= _Off;
		return (*this);
		}

	_Myt operator+(difference_type _Off) const
		{	
		return (_Myt(current - _Off));
		}

	_Myt& operator-=(difference_type _Off)
		{	
		current += _Off;
		return (*this);
		}

	_Myt operator-(difference_type _Off) const
		{	
		return (_Myt(current + _Off));
		}

	reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}

protected:
	_RanIt current;	
	};

template<class _RanIt>
	struct _Is_checked_helper<reverse_iterator<_RanIt> >
		: public _Is_checked_helper<_RanIt>
	{	
	};

		
template<class _RanIt> inline
	reverse_iterator<_RanIt> operator+(
		typename reverse_iterator<_RanIt>::difference_type _Off,
		const reverse_iterator<_RanIt>& _Right)
	{	
	return (_Right + _Off);
	}

template<class _RanIt1,
	class _RanIt2>
	auto inline operator-(const reverse_iterator<_RanIt1>& _Left,
		const reverse_iterator<_RanIt2>& _Right)
			-> decltype(_Right.base() - _Left.base())
	{	
	return (_Right.base() - _Left.base());
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator==(const reverse_iterator<_RanIt1>& _Left,
		const reverse_iterator<_RanIt2>& _Right)
	{	
	return (_Left.base() == _Right.base());
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator!=(const reverse_iterator<_RanIt1>& _Left,
		const reverse_iterator<_RanIt2>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator<(const reverse_iterator<_RanIt1>& _Left,
		const reverse_iterator<_RanIt2>& _Right)
	{	
	return (_Right.base() < _Left.base());
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator>(const reverse_iterator<_RanIt1>& _Left,
		const reverse_iterator<_RanIt2>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator<=(const reverse_iterator<_RanIt1>& _Left,
		const reverse_iterator<_RanIt2>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator>=(const reverse_iterator<_RanIt1>& _Left,
		const reverse_iterator<_RanIt2>& _Right)
	{	
	return (!(_Left < _Right));
	}

		
template<class _RanIt> inline
	reverse_iterator<_RanIt> make_reverse_iterator(_RanIt _Iter)
	{	
	return (reverse_iterator<_RanIt>(_Iter));
	}

		

template<class _Container>
	auto inline begin(_Container& _Cont) -> decltype(_Cont.begin())
	{	
	return (_Cont.begin());
	}

template<class _Container>
	auto inline begin(const _Container& _Cont) -> decltype(_Cont.begin())
	{	
	return (_Cont.begin());
	}

template<class _Container>
	auto inline end(_Container& _Cont) -> decltype(_Cont.end())
	{	
	return (_Cont.end());
	}

template<class _Container>
	auto inline end(const _Container& _Cont) -> decltype(_Cont.end())
	{	
	return (_Cont.end());
	}

template<class _Ty,
	size_t _Size> inline
	constexpr _Ty *begin(_Ty (&_Array)[_Size]) noexcept
	{	
	return (_Array);
	}

template<class _Ty,
	size_t _Size> inline
	constexpr _Ty *end(_Ty (&_Array)[_Size]) noexcept
	{	
	return (_Array + _Size);
	}

		
template<class _Container>
	constexpr auto inline cbegin(const _Container& _Cont)
		noexcept(noexcept(::std:: begin(_Cont)))
		-> decltype(::std:: begin(_Cont))
	{	
	return (::std:: begin(_Cont));
	}

template<class _Container>
	constexpr auto inline cend(const _Container& _Cont)
		noexcept(noexcept(::std:: end(_Cont)))
		-> decltype(::std:: end(_Cont))
	{	
	return (::std:: end(_Cont));
	}

		
template<class _Container>
	auto inline rbegin(_Container& _Cont) -> decltype(_Cont.rbegin())
	{	
	return (_Cont.rbegin());
	}

template<class _Container>
	auto inline rbegin(const _Container& _Cont) -> decltype(_Cont.rbegin())
	{	
	return (_Cont.rbegin());
	}

template<class _Container>
	auto inline rend(_Container& _Cont) -> decltype(_Cont.rend())
	{	
	return (_Cont.rend());
	}

template<class _Container>
	auto inline rend(const _Container& _Cont) -> decltype(_Cont.rend())
	{	
	return (_Cont.rend());
	}

template<class _Ty,
	size_t _Size> inline
	reverse_iterator<_Ty *> rbegin(_Ty (&_Array)[_Size])
	{	
	return (reverse_iterator<_Ty *>(_Array + _Size));
	}

template<class _Ty,
	size_t _Size> inline
	reverse_iterator<_Ty *> rend(_Ty (&_Array)[_Size])
	{	
	return (reverse_iterator<_Ty *>(_Array));
	}

template<class _Elem> inline
	reverse_iterator<const _Elem *>
		rbegin(::std:: initializer_list<_Elem> _Ilist)
	{	
	return (reverse_iterator<const _Elem *>(_Ilist.end()));
	}

template<class _Elem> inline
	reverse_iterator<const _Elem *>
		rend(::std:: initializer_list<_Elem> _Ilist)
	{	
	return (reverse_iterator<const _Elem *>(_Ilist.begin()));
	}

		
template<class _Container>
	auto inline crbegin(const _Container& _Cont)
		-> decltype(::std:: rbegin(_Cont))
	{	
	return (::std:: rbegin(_Cont));
	}

template<class _Container>
	auto inline crend(const _Container& _Cont)
		-> decltype(::std:: rend(_Cont))
	{	
	return (::std:: rend(_Cont));
	}


template<class _Container>
	constexpr auto inline size(const _Container& _Cont)
		-> decltype(_Cont.size())
	{	
	return (_Cont.size());
	}

template<class _Ty,
	size_t _Size> inline
	constexpr size_t size(const _Ty(&)[_Size]) noexcept
	{	
	return (_Size);
	}

template<class _Container>
	constexpr auto inline empty(const _Container& _Cont)
		-> decltype(_Cont.empty())
	{	
	return (_Cont.empty());
	}

template<class _Ty,
	size_t _Size> inline
	constexpr bool empty(const _Ty(&)[_Size]) noexcept
	{	
	return (false);
	}

template<class _Elem> inline
	constexpr bool empty(
		::std:: initializer_list<_Elem> _Ilist) noexcept
	{	
	return (_Ilist.size() == 0);
	}

template<class _Container>
	constexpr auto inline data(_Container& _Cont)
		-> decltype(_Cont.data())
	{	
	return (_Cont.data());
	}

template<class _Container>
	constexpr auto inline data(const _Container& _Cont)
		-> decltype(_Cont.data())
	{	
	return (_Cont.data());
	}

template<class _Ty,
	size_t _Size> inline
	constexpr _Ty *data(_Ty(&_Array)[_Size]) noexcept
	{	
	return (_Array);
	}

template<class _Elem> inline
	constexpr const _Elem *data(
		::std:: initializer_list<_Elem> _Ilist) noexcept
	{	
	return (_Ilist.begin());
	}

		
template<class _Ty,
	size_t _Size>
	class _Array_const_iterator
		: public _Iterator012<random_access_iterator_tag,
			_Ty,
			ptrdiff_t,
			const _Ty *,
			const _Ty&,
			_Iterator_base>
	{	
public:
	typedef _Array_const_iterator<_Ty, _Size> _Myiter;
	typedef random_access_iterator_tag iterator_category;

	typedef _Ty value_type;
	typedef size_t size_type;
	typedef ptrdiff_t difference_type;
	typedef const _Ty *pointer;
	typedef const _Ty& reference;
	enum {_EEN_SIZE = _Size};	
 
	_Array_const_iterator()
		: _Ptr(0)
		{	
		}

	explicit _Array_const_iterator(pointer _Parg, size_t _Off = 0)
		: _Ptr(_Parg + _Off)
		{	
		}

	typedef pointer _Unchecked_type;

	_Myiter& _Rechecked(_Unchecked_type _Right)
		{	
		_Ptr = _Right;
		return (*this);
		}

	_Unchecked_type _Unchecked() const
		{	
		return (_Ptr);
		}

	reference operator*() const
		{	
		return (*_Ptr);
		}

	pointer operator->() const
		{	
		return (pointer_traits<pointer>::pointer_to(**this));
		}

	_Myiter& operator++()
		{	
		++_Ptr;
		return (*this);
		}

	_Myiter operator++(int)
		{	
		_Myiter _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myiter& operator--()
		{	
		--_Ptr;
		return (*this);
		}

	_Myiter operator--(int)
		{	
		_Myiter _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Myiter& operator+=(difference_type _Off)
		{	
		_Ptr += _Off;
		return (*this);
		}

	_Myiter operator+(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Myiter& operator-=(difference_type _Off)
		{	
		return (*this += -_Off);
		}

	_Myiter operator-(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp -= _Off);
		}

	difference_type operator-(const _Myiter& _Right) const
		{	
		return (_Ptr - _Right._Ptr);
		}

	reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}

	bool operator==(const _Myiter& _Right) const
		{	
		return (_Ptr == _Right._Ptr);
		}

	bool operator!=(const _Myiter& _Right) const
		{	
		return (!(*this == _Right));
		}

	bool operator<(const _Myiter& _Right) const
		{	
		return (_Ptr < _Right._Ptr);
		}

	bool operator>(const _Myiter& _Right) const
		{	
		return (_Right < *this);
		}

	bool operator<=(const _Myiter& _Right) const
		{	
		return (!(_Right < *this));
		}

	bool operator>=(const _Myiter& _Right) const
		{	
		return (!(*this < _Right));
		}

	pointer _Ptr;	

 








































































































































































































#line 1888 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
	};

template<class _Ty,
	size_t _Size> inline
	typename _Array_const_iterator<_Ty, _Size>::_Unchecked_type
		_Unchecked(_Array_const_iterator<_Ty, _Size> _Iter)
	{	
	return (_Iter._Unchecked());
	}

template<class _Ty,
	size_t _Size> inline
	_Array_const_iterator<_Ty, _Size>&
		_Rechecked(_Array_const_iterator<_Ty, _Size>& _Iter,
			typename _Array_const_iterator<_Ty, _Size>
				::_Unchecked_type _Right)
	{	
	return (_Iter._Rechecked(_Right));
	}

template<class _Ty,
	size_t _Size> inline
	_Array_const_iterator<_Ty, _Size> operator+(
		typename _Array_const_iterator<_Ty, _Size>::difference_type _Off,
		_Array_const_iterator<_Ty, _Size> _Next)
	{	
	return (_Next += _Off);
	}

		
template<class _Ty,
	size_t _Size>
	class _Array_iterator
		: public _Array_const_iterator<_Ty, _Size>
	{	
public:
	typedef _Array_iterator<_Ty, _Size> _Myiter;
	typedef _Array_const_iterator<_Ty, _Size> _Mybase;
	typedef random_access_iterator_tag iterator_category;

	typedef _Ty value_type;
	typedef size_t size_type;
	typedef ptrdiff_t difference_type;
	typedef _Ty *pointer;
	typedef _Ty& reference;

	_Array_iterator()
		{	
		}

	explicit _Array_iterator(pointer _Parg, size_t _Off = 0)
		: _Mybase(_Parg, _Off)
		{	
		}
	enum {_EEN_SIZE = _Size};	
	typedef pointer _Unchecked_type;

	_Myiter& _Rechecked(_Unchecked_type _Right)
		{	
		((_Mybase *)this)->_Rechecked(_Right);
		return (*this);
		}

	_Unchecked_type _Unchecked() const
		{	
		return ((pointer)((_Mybase *)this)->_Unchecked());
		}

	reference operator*() const
		{	
		return ((reference)**(_Mybase *)this);
		}

	pointer operator->() const
		{	
		return (pointer_traits<pointer>::pointer_to(**this));
		}

	_Myiter& operator++()
		{	
		++*(_Mybase *)this;
		return (*this);
		}

	_Myiter operator++(int)
		{	
		_Myiter _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myiter& operator--()
		{	
		--*(_Mybase *)this;
		return (*this);
		}

	_Myiter operator--(int)
		{	
		_Myiter _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Myiter& operator+=(difference_type _Off)
		{	
		*(_Mybase *)this += _Off;
		return (*this);
		}

	_Myiter operator+(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Myiter& operator-=(difference_type _Off)
		{	
		return (*this += -_Off);
		}

	_Myiter operator-(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp -= _Off);
		}

	difference_type operator-(const _Mybase& _Right) const
		{	
		return (*(_Mybase *)this - _Right);
		}

	reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}
	};

template<class _Ty,
	size_t _Size> inline
	typename _Array_iterator<_Ty, _Size>::_Unchecked_type
		_Unchecked(_Array_iterator<_Ty, _Size> _Iter)
	{	
	return (_Iter._Unchecked());
	}

template<class _Ty,
	size_t _Size> inline
	_Array_iterator<_Ty, _Size>&
		_Rechecked(_Array_iterator<_Ty, _Size>& _Iter,
			typename _Array_iterator<_Ty, _Size>
				::_Unchecked_type _Right)
	{	
	return (_Iter._Rechecked(_Right));
	}

template<class _Ty,
	size_t _Size> inline
	_Array_iterator<_Ty, _Size> operator+(
		typename _Array_iterator<_Ty, _Size>::difference_type _Off,
		_Array_iterator<_Ty, _Size> _Next)
	{	
	return (_Next += _Off);
	}

		
template<class _RanIt>
	class move_iterator
	{	
public:
	typedef move_iterator<_RanIt> _Myt;
	typedef typename iterator_traits<_RanIt>::iterator_category
		iterator_category;
	typedef typename iterator_traits<_RanIt>::value_type
		value_type;
	typedef typename iterator_traits<_RanIt>::difference_type
		difference_type;
	typedef _RanIt pointer;
	typedef typename iterator_traits<_RanIt>::reference _Ref0;
	typedef conditional_t<is_reference<_Ref0>::value,
		remove_reference_t<_Ref0>&&, _Ref0> reference;
	typedef _RanIt iterator_type;

	move_iterator()
		: current()
		{	
		}

	explicit move_iterator(iterator_type _Right)
		: current(_Right)
		{	
		}

	template<class _RanIt2>
		move_iterator(const move_iterator<_RanIt2>& _Right)
		: current(_Right.base())
		{	
		}

	template<class _RanIt2>
		_Myt& operator=(const move_iterator<_RanIt2>& _Right)
		{	
		current = _Right.base();
		return (*this);
		}

	_RanIt base() const
		{	
		return (current);
		}

	reference operator*() const
		{	
		return (static_cast<reference>(*current));
		}

	pointer operator->() const
		{	
		return (current);
		}

	_Myt& operator++()
		{	
		++current;
		return (*this);
		}

	_Myt operator++(int)
		{	
		_Myt _Tmp = *this;
		++current;
		return (_Tmp);
		}

	_Myt& operator--()
		{	
		--current;
		return (*this);
		}

	_Myt operator--(int)
		{	
		_Myt _Tmp = *this;
		--current;
		return (_Tmp);
		}

	template<class _RanIt2>
		bool _Equal(const move_iterator<_RanIt2>& _Right) const
		{	
		return (current == _Right.base());
		}



	_Myt& operator+=(difference_type _Off)
		{	
		current += _Off;
		return (*this);
		}

	_Myt operator+(difference_type _Off) const
		{	
		return (_Myt(current + _Off));
		}

	_Myt& operator-=(difference_type _Off)
		{	
		current -= _Off;
		return (*this);
		}

	_Myt operator-(difference_type _Off) const
		{	
		return (_Myt(current - _Off));
		}

	reference operator[](difference_type _Off) const
		{	
		return (::std:: move(current[_Off]));
		}

	template<class _RanIt2>
		bool _Less(const move_iterator<_RanIt2>& _Right) const
		{	
		return (current < _Right.base());
		}

	difference_type operator-(const _Myt& _Right) const
		{	
		return (current - _Right.base());
		}

protected:
	iterator_type current;	
	};

template<class _RanIt>
	struct _Is_checked_helper<move_iterator<_RanIt> >
		: public _Is_checked_helper<_RanIt>
	{	
	};

		
template<class _RanIt,
	class _Diff> inline
	move_iterator<_RanIt>
		operator+(_Diff _Off,
		const move_iterator<_RanIt>& _Right)
	{	
	return (_Right + _Off);
	}

template<class _RanIt1,
	class _RanIt2>
	auto inline operator-(
		move_iterator<_RanIt1>& _Left,
		const move_iterator<_RanIt2>& _Right)
			-> decltype(_Left.base() - _Right.base())
	{	
	return (_Left.base() - _Right.base());
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator==(
		const move_iterator<_RanIt1>& _Left,
		const move_iterator<_RanIt2>& _Right)
	{	
	return (_Left._Equal(_Right));
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator!=(
		const move_iterator<_RanIt1>& _Left,
		const move_iterator<_RanIt2>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator<(
		const move_iterator<_RanIt1>& _Left,
		const move_iterator<_RanIt2>& _Right)
	{	
	return (_Left._Less(_Right));
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator>(
		const move_iterator<_RanIt1>& _Left,
		const move_iterator<_RanIt2>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator<=(
		const move_iterator<_RanIt1>& _Left,
		const move_iterator<_RanIt2>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator>=(
		const move_iterator<_RanIt1>& _Left,
		const move_iterator<_RanIt2>& _Right)
	{	
	return (!(_Left < _Right));
	}

		
template<class _RanIt> inline
	move_iterator<_RanIt> make_move_iterator(_RanIt _Iter)
	{	
	return (move_iterator<_RanIt>(_Iter));
	}

		
template<class _Traits>
	struct _Char_traits_eq
	{
	typedef typename _Traits::char_type _Elem;

	bool operator()(_Elem _Left, _Elem _Right) const
		{
		return (_Traits::eq(_Left, _Right));
		}
	};

		
template<class _Traits>
	struct _Char_traits_lt
	{
	typedef typename _Traits::char_type _Elem;

	bool operator()(_Elem _Left, _Elem _Right) const
		{
		return (_Traits::lt(_Left, _Right));
		}
	};

		
template<class _InIt,
	class _OutIt> inline
	_OutIt _Copy_memmove(_InIt _First, _InIt _Last,
		_OutIt _Dest)
	{	
	const char * const _First_ch = reinterpret_cast<const char *>(_First);
	const char * const _Last_ch = reinterpret_cast<const char *>(_Last);
	char * const _Dest_ch = reinterpret_cast<char *>(_Dest);
	const size_t _Count = _Last_ch - _First_ch;
	:: memmove(_Dest_ch, _First_ch, _Count);
	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Copy_unchecked1(_InIt _First, _InIt _Last,
		_OutIt _Dest, _General_ptr_iterator_tag)
	{	
	for (; _First != _Last; ++_Dest, (void)++_First)
		*_Dest = *_First;
	return (_Dest);
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Copy_unchecked1(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Trivially_copyable_ptr_iterator_tag)
	{	
	return (_Copy_memmove(_First, _Last, _Dest));
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Copy_unchecked(_InIt _First, _InIt _Last,
		_OutIt _Dest)
	{	
		
	return (_Copy_unchecked1(_First, _Last,
		_Dest, _Ptr_copy_cat(_First, _Dest)));
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Copy_no_deprecate1(_InIt _First, _InIt _Last,
		_OutIt _Dest, input_iterator_tag, _Any_tag)
	{	
	return (_Rechecked(_Dest,
		_Copy_unchecked(_First, _Last, _Unchecked_idl0(_Dest))));
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Copy_no_deprecate1(_InIt _First, _InIt _Last,
		_OutIt _Dest, random_access_iterator_tag, random_access_iterator_tag)
	{	
	;
	return (_Rechecked(_Dest,
		_Copy_unchecked(_First, _Last, _Unchecked(_Dest))));
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Copy_no_deprecate(_InIt _First, _InIt _Last,
		_OutIt _Dest)
	{	
	;
	return (_Copy_no_deprecate1(_Unchecked(_First), _Unchecked(_Last),
		_Dest, _Iter_cat_t<_InIt>(), _Iter_cat_t<_OutIt>()));
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt copy(_InIt _First, _InIt _Last,
		_OutIt _Dest)
	{	
	struct _Unchecked_iterators { static void  _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
	return (_Copy_no_deprecate(_First, _Last, _Dest));
	}

 










#line 2388 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"

		
template<class _InIt,
	class _Diff,
	class _OutIt> inline
	_OutIt _Copy_n_unchecked2(_InIt _First, _Diff _Count,
		_OutIt _Dest, input_iterator_tag)
	{	
	if (0 < _Count)
		{
		*_Dest = *_First;
		while (0 < --_Count)
			*++_Dest = *++_First;
		return (++_Dest);
		}

	return (_Dest);
	}

template<class _InIt,
	class _Diff,
	class _OutIt> inline
	_OutIt _Copy_n_unchecked2(_InIt _First, _Diff _Count,
		_OutIt _Dest, forward_iterator_tag)
	{	
	for (; 0 < _Count; --_Count, (void)++_Dest, ++_First)
		*_Dest = *_First;
	return (_Dest);
	}

template<class _InIt,
	class _Diff,
	class _OutIt> inline
	_OutIt _Copy_n_unchecked1(_InIt _First, _Diff _Count,
		_OutIt _Dest, _General_ptr_iterator_tag)
	{	
		
		
	return (_Copy_n_unchecked2(_First, _Count,
		_Dest, _Iter_cat_t<_InIt>()));
	}

template<class _InIt,
	class _Diff,
	class _OutIt> inline
	_OutIt _Copy_n_unchecked1(_InIt _First, _Diff _Count,
		_OutIt _Dest, _Trivially_copyable_ptr_iterator_tag)
	{	
	if (0 < _Count)
		return (_Copy_memmove(_First, _First + _Count, _Dest));
	return (_Dest);
	}

template<class _InIt,
	class _Diff,
	class _OutIt> inline
	_OutIt _Copy_n_unchecked(_InIt _First, _Diff _Count,
		_OutIt _Dest)
	{	
	return (_Copy_n_unchecked1(_First, _Count,
		_Dest, _Ptr_copy_cat(_First, _Dest)));
	}

template<class _InIt,
	class _Diff,
	class _OutIt> inline
	_OutIt copy_n(_InIt _First, _Diff _Count,
		_OutIt _Dest)
	{	
		
	struct _Unchecked_iterators { static void  _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
	return (_Rechecked(_Dest,
		_Copy_n_unchecked(_Unchecked_n(_First, _Count), _Count, _Unchecked_n(_Dest, _Count))));
	}

 





































#line 2502 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"

		
template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Copy_backward_memmove(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest)
	{	
	const char * const _First_ch = reinterpret_cast<const char *>(_First);
	const char * const _Last_ch = reinterpret_cast<const char *>(_Last);
	char * const _Dest_ch = reinterpret_cast<char *>(_Dest);
	const size_t _Count = _Last_ch - _First_ch;
	return (static_cast<_BidIt2>(
		:: memmove(_Dest_ch - _Count, _First_ch, _Count)));
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Copy_backward_unchecked1(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest, _General_ptr_iterator_tag)
	{	
	while (_First != _Last)
		*--_Dest = *--_Last;
	return (_Dest);
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Copy_backward_unchecked1(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest, _Trivially_copyable_ptr_iterator_tag)
	{	
	return (_Copy_backward_memmove(_First, _Last, _Dest));
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Copy_backward_unchecked(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest)
	{	
	return (_Copy_backward_unchecked1(_First, _Last,
		_Dest, _Ptr_copy_cat(_First, _Dest)));
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Copy_backward1(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest, input_iterator_tag, _Any_tag)
	{	
	return (_Rechecked(_Dest,
		_Copy_backward_unchecked(_First, _Last, _Unchecked_idl0(_Dest))));
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Copy_backward1(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest, random_access_iterator_tag, random_access_iterator_tag)
	{	
	;
	return (_Rechecked(_Dest,
		_Copy_backward_unchecked(_First, _Last, _Unchecked(_Dest))));
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 copy_backward(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest)
	{	
	struct _Unchecked_iterators { static void  _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
	;
	return (_Copy_backward1(_Unchecked(_First), _Unchecked(_Last),
		_Dest, _Iter_cat_t<_BidIt1>(), _Iter_cat_t<_BidIt2>()));
	}

		
template<class _InIt,
	class _OutIt> inline
	_OutIt _Move_unchecked1(_InIt _First, _InIt _Last,
		_OutIt _Dest, _General_ptr_iterator_tag)
	{	
	for (; _First != _Last; ++_Dest, (void)++_First)
		*_Dest = ::std:: move(*_First);
	return (_Dest);
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Move_unchecked1(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Trivially_copyable_ptr_iterator_tag)
	{	
	return (_Copy_memmove(_First, _Last, _Dest));
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Move_unchecked(_InIt _First, _InIt _Last,
		_OutIt _Dest)
	{	
	return (_Move_unchecked1(_First, _Last,
		_Dest, _Ptr_move_cat(_First, _Dest)));
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Move_no_deprecate1(_InIt _First, _InIt _Last,
		_OutIt _Dest, input_iterator_tag, _Any_tag)
	{	
	return (_Rechecked(_Dest,
		_Move_unchecked(_First, _Last, _Unchecked_idl0(_Dest))));
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Move_no_deprecate1(_InIt _First, _InIt _Last,
		_OutIt _Dest, random_access_iterator_tag, random_access_iterator_tag)
	{	
	;
	return (_Rechecked(_Dest,
		_Move_unchecked(_First, _Last, _Unchecked(_Dest))));
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Move_no_deprecate(_InIt _First, _InIt _Last,
		_OutIt _Dest)
	{	
	;
	return (_Move_no_deprecate1(_Unchecked(_First), _Unchecked(_Last),
		_Dest, _Iter_cat_t<_InIt>(), _Iter_cat_t<_OutIt>()));
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt move(_InIt _First, _InIt _Last,
		_OutIt _Dest)
	{	
	struct _Unchecked_iterators { static void  _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
	return (_Move_no_deprecate(_First, _Last, _Dest));
	}

 










#line 2652 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"

		
template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Move_backward_unchecked1(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest, _General_ptr_iterator_tag)
	{	
	while (_First != _Last)
		*--_Dest = ::std:: move(*--_Last);
	return (_Dest);
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Move_backward_unchecked1(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest, _Trivially_copyable_ptr_iterator_tag)
	{	
	return (_Copy_backward_memmove(_First, _Last, _Dest));
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Move_backward_unchecked(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest)
	{	
	return (_Move_backward_unchecked1(_First, _Last,
		_Dest, _Ptr_move_cat(_First, _Dest)));
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Move_backward1(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest, input_iterator_tag, _Any_tag)
	{	
	return (_Rechecked(_Dest,
		_Move_backward_unchecked(_First, _Last, _Unchecked_idl0(_Dest))));
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Move_backward1(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest, random_access_iterator_tag, random_access_iterator_tag)
	{	
	;
	return (_Rechecked(_Dest,
		_Move_backward_unchecked(_First, _Last, _Unchecked(_Dest))));
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 move_backward(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest)
	{	
	struct _Unchecked_iterators { static void  _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
	;
	return (_Move_backward1(_Unchecked(_First), _Unchecked(_Last),
		_Dest, _Iter_cat_t<_BidIt1>(), _Iter_cat_t<_BidIt2>()));
	}

		
template<class _Ty>
	struct _Is_character
		: false_type
		{	
		};

template<>
	struct _Is_character<char>
		: true_type
		{	
		};

template<>
	struct _Is_character<signed char>
		: true_type
		{	
		};

template<>
	struct _Is_character<unsigned char>
		: true_type
		{	
		};

template<class _FwdIt,
	class _Ty>
	struct _Fill_memset_is_safe_helper
	{	
	typedef _Iter_value_t<_FwdIt> _Value_type;
	typedef typename conjunction<
		is_pointer<_FwdIt>,
		disjunction<
			conjunction<
				_Is_character<_Ty>,
				_Is_character<_Value_type>>,
			conjunction<
				is_same<bool, _Ty>,
				is_same<bool, _Value_type>>
		>>::type type;
	};

template<class _FwdIt,
	class _Ty> inline
	typename _Fill_memset_is_safe_helper<_FwdIt, _Ty>::type
	_Fill_memset_is_safe(const _FwdIt&, const _Ty&)
	{	
	return {};
	}

template<class _FwdIt,
	class _Ty> inline
	void _Fill_unchecked1(_FwdIt _First, _FwdIt _Last, const _Ty& _Val, false_type)
	{	
	for (; _First != _Last; ++_First)
		*_First = _Val;
	}

template<class _FwdIt,
	class _Ty> inline
	void _Fill_unchecked1(_FwdIt _First, _FwdIt _Last, const _Ty& _Val, true_type)
	{	
	:: memset(_First, _Val, _Last - _First);
	}

template<class _FwdIt,
	class _Ty> inline
	void _Fill_unchecked(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
	{	
	_Fill_unchecked1(_First, _Last, _Val, _Fill_memset_is_safe(_First, _Val));
	}

template<class _FwdIt,
	class _Ty> inline
	void fill(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
	{	
	;
	_Fill_unchecked(_Unchecked(_First), _Unchecked(_Last), _Val);
	}

		
template<class _OutIt,
	class _Diff,
	class _Ty> inline
	_OutIt _Fill_n_unchecked1(_OutIt _Dest, _Diff _Count, const _Ty& _Val, false_type)
	{	
	for (; 0 < _Count; --_Count, (void)++_Dest)
		*_Dest = _Val;
	return (_Dest);
	}

template<class _OutIt,
	class _Diff,
	class _Ty> inline
	_OutIt _Fill_n_unchecked1(_OutIt _Dest, _Diff _Count, const _Ty& _Val, true_type)
	{	
	if (0 < _Count)
		{
		:: memset(_Dest, _Val, _Count);
		return (_Dest + _Count);
		}

	return (_Dest);
	}

template<class _OutIt,
	class _Diff,
	class _Ty> inline
	_OutIt _Fill_n_unchecked(_OutIt _Dest, _Diff _Count, const _Ty& _Val)
	{	
		
	return (_Fill_n_unchecked1(_Dest, _Count, _Val, _Fill_memset_is_safe(_Dest, _Val)));
	}

template<class _OutIt,
	class _Diff,
	class _Ty> inline
	_OutIt fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val)
	{	
	return (_Rechecked(_Dest,
		_Fill_n_unchecked(_Unchecked_n(_Dest, _Count), _Count, _Val)));
	}

		
template<class _Elem1,
	class _Elem2>
	struct _Value_equality_is_bitwise_equality
		: bool_constant<static_cast<_Elem1>(-1) == static_cast<_Elem2>(-1)>
	{	
		
		
		
	};

template<class _Elem1,
	class _Elem2,
	class _Pr>
	struct _Equal_memcmp_is_safe_helper
		: false_type
	{	
		
	};

template<class _Elem1,
	class _Elem2>
	struct _Equal_memcmp_is_safe_helper<_Elem1, _Elem2, equal_to<>>
		: conjunction<
			_Is_same_size<_Elem1, _Elem2>,
			is_integral<_Elem1>,
			is_integral<_Elem2>,
			negation<is_same<bool, _Elem1>>,
			negation<is_same<bool, _Elem2>>,
			negation<is_volatile<_Elem1>>,
			negation<is_volatile<_Elem2>>,
			
			
			_Value_equality_is_bitwise_equality<_Elem1, _Elem2>
		>::type
	{	
	};

template<class _Elem1,
	class _Elem2>
	struct _Equal_memcmp_is_safe_helper<_Elem1 *, _Elem2 *, equal_to<>>
		: is_same<remove_cv_t<_Elem1>, remove_cv_t<_Elem2>>::type
	{	
	};

template<class _Elem>
	struct _Equal_memcmp_is_safe_helper<_Elem, _Elem, _Char_traits_eq<char_traits<_Elem>>>
		: _Equal_memcmp_is_safe_helper<_Elem, _Elem, equal_to<>>::type
	{	
	};

template<class _Elem>
	struct _Equal_memcmp_is_safe_helper<_Elem, _Elem, equal_to<_Elem>>
		: _Equal_memcmp_is_safe_helper<_Elem, _Elem, equal_to<>>::type
	{	
		
	};

template<class _Iter1,
	class _Iter2,
	class _Pr> inline
	false_type _Equal_memcmp_is_safe(const _Iter1&, const _Iter2&, const _Pr&)
	{	
	return {};
	}

template<class _Obj1,
	class _Obj2,
	class _Pr> inline
	typename _Equal_memcmp_is_safe_helper<
		remove_const_t<_Obj1>,
		remove_const_t<_Obj2>,
		_Pr>::type
		_Equal_memcmp_is_safe(_Obj1 * const&, _Obj2 * const&, const _Pr&)
	{	
	return {};
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Equal_unchecked1(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _Pr& _Pred, false_type)
	{	
	for (; _First1 != _Last1; ++_First1, (void)++_First2)
		if (!_Pred(*_First1, *_First2))
			return (false);
	return (true);
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Equal_unchecked1(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _Pr&, true_type)
	{	
	const char * const _First1_ch = reinterpret_cast<const char *>(_First1);
	const char * const _First2_ch = reinterpret_cast<const char *>(_First2);
	const size_t _Count = reinterpret_cast<const char *>(_Last1) - _First1_ch;
	return (:: memcmp(_First1_ch, _First2_ch, _Count) == 0);
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Equal_unchecked(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _Pr& _Pred)
	{	
	return (_Equal_unchecked1(_First1, _Last1, _First2, _Pred,
		_Equal_memcmp_is_safe(_First1, _First2, _Pred)));
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Equal_no_deprecate1(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _Pr& _Pred, input_iterator_tag, input_iterator_tag)
	{	
	return (_Equal_unchecked(_First1, _Last1, _Unchecked_idl0(_First2), _Pred));
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Equal_no_deprecate1(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _Pr& _Pred, random_access_iterator_tag, random_access_iterator_tag)
	{	
	;
	return (_Equal_unchecked(_First1, _Last1, _Unchecked(_First2), _Pred));
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Equal_no_deprecate(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _Pr& _Pred)
	{	
	;
	;
	return (_Equal_no_deprecate1(_Unchecked(_First1), _Unchecked(_Last1),
		_First2, _Pred, _Iter_cat_t<_InIt1>(), _Iter_cat_t<_InIt2>()));
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool equal(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _Pr _Pred)
	{	
	struct _Unchecked_iterators { static void  _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_First2)));
	return (_Equal_no_deprecate(_First1, _Last1, _First2, _Pred));
	}

 











#line 3000 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"

		
template<class _InIt1,
	class _InIt2> inline
	bool equal(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2)
	{	
	return (::std:: equal(_First1, _Last1, _First2,
		equal_to<>()));
	}

 









#line 3022 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"

		
template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Equal_unchecked(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _Pr& _Pred,
			input_iterator_tag, input_iterator_tag)
	{	
		
	;
	for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void)++_First2)
		if (!_Pred(*_First1, *_First2))
			return (false);
	return (_First1 == _Last1 && _First2 == _Last2);
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Equal_unchecked(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _Pr& _Pred,
			random_access_iterator_tag, random_access_iterator_tag)
	{	
		
	if (_Last1 - _First1 != _Last2 - _First2)
		return (false);
	;
	return (_Equal_unchecked(_First1, _Last1, _First2, _Pred));
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool equal(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
	{	
	;
	;
	return (_Equal_unchecked(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2), _Pred,
			_Iter_cat_t<_InIt1>(), _Iter_cat_t<_InIt2>()));
	}

		
template<class _InIt1,
	class _InIt2> inline
	bool equal(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2)
	{	
	return (::std:: equal(_First1, _Last1, _First2, _Last2,
		equal_to<>()));
	}

		
template<class _Elem1,
	class _Elem2,
	class _FTy>
	struct _Lex_compare_check_element_types_helper
		: conjunction<
			_Is_character<_Elem1>,
			_Is_character<_Elem2>,
			_Is_character<_FTy>,
			is_unsigned<_FTy>
		>::type
	{	
	};

template<class _Elem1,
	class _Elem2>
	struct _Lex_compare_check_element_types_helper<_Elem1, _Elem2, void>
		: conjunction<
			_Is_character<_Elem1>,
			_Is_character<_Elem2>,
			is_unsigned<_Elem1>,
			is_unsigned<_Elem2>
		>::type
	{	
	};

template<class _Memcmp_pr>
	struct _Lex_compare_optimize
	{	
	};

template<class _Memcmp_pr,
	class _Obj1,
	class _Obj2,
	class _FTy>
	using _Lex_compare_check_element_types = _Lex_compare_optimize<conditional_t<
		_Lex_compare_check_element_types_helper<remove_const_t<_Obj1>, remove_const_t<_Obj2>, _FTy>::value,
		_Memcmp_pr, void>>;	

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	_Lex_compare_optimize<void> _Lex_compare_memcmp_classify(const _InIt1&, const _InIt2&, const _Pr&)
	{	
		
	return {};
	}

template<class _Obj1,
	class _Obj2,
	class _FTy> inline
	_Lex_compare_check_element_types<less<int>, _Obj1, _Obj2, _FTy>
		_Lex_compare_memcmp_classify(_Obj1 * const&, _Obj2 * const&, const less<_FTy>&)
	{	
	return {};
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Lex_compare_unchecked1(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _Pr& _Pred, _Lex_compare_optimize<void>)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void)++_First2)
		{	
		if (_Pred(*_First1, *_First2))
			return (true);
		else if (_Pred(*_First2, *_First1))
			return (false);
		}

	return (_First1 == _Last1 && _First2 != _Last2);
	}

template<class _InIt1,
	class _InIt2,
	class _Pr,
	class _Memcmp_pr> inline
	bool _Lex_compare_unchecked1(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _Pr&, _Lex_compare_optimize<_Memcmp_pr>)
	{	
	const size_t _Num1 = _Last1 - _First1;
	const size_t _Num2 = _Last2 - _First2;
	const int _Ans = :: memcmp(_First1, _First2, _Num1 < _Num2 ? _Num1 : _Num2);
	return (_Memcmp_pr{}(_Ans, 0) || _Ans == 0 && _Num1 < _Num2);
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Lex_compare_unchecked(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _Pr& _Pred)
	{	
	return (_Lex_compare_unchecked1(_First1, _Last1, _First2, _Last2, _Pred,
		_Lex_compare_memcmp_classify(_First1, _First2, _Pred)));
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
	{	
	;
	;
	;
	return (_Lex_compare_unchecked(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2), _Pred));
	}

		
template<class _InIt1,
	class _InIt2> inline
	bool lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2)
	{	
	return (::std:: lexicographical_compare(_First1, _Last1,
		_First2, _Last2, less<>()));
	}

		
template<class _Ty> inline
	bool _Within_limits(const _Ty& _Val, true_type, true_type, _Any_tag)
	{	
	return ((-128) <= _Val && _Val <= 127);
	}

template<class _Ty> inline
	bool _Within_limits(const _Ty& _Val, true_type, false_type, true_type)
	{	
	return (_Val <= 127 || static_cast<_Ty>((-128)) <= _Val);
	}

template<class _Ty> inline
	bool _Within_limits(const _Ty& _Val, true_type, false_type, false_type)
	{	
	return (_Val <= 127);
	}

template<class _Ty> inline
	bool _Within_limits(const _Ty& _Val, false_type, true_type, _Any_tag)
	{	
	return (0 <= _Val && _Val <= 0xff);
	}

template<class _Ty> inline
	bool _Within_limits(const _Ty& _Val, false_type, false_type, _Any_tag)
	{	
	return (_Val <= 0xff);
	}

template<class _InIt,
	class _Ty> inline
	bool _Within_limits(_InIt, const _Ty& _Val)
	{	
	typedef typename remove_pointer<_InIt>::type _Elem;
	return (_Within_limits(_Val, is_signed<_Elem>(), is_signed<_Ty>(),
		integral_constant<bool, -1 == static_cast<_Ty>(-1)>()));
	}

template<class _InIt> inline
	bool _Within_limits(_InIt, const bool&)
	{	
	return (true);
	}

template<class _InIt,
	class _Ty> inline
	_InIt _Find_unchecked1(_InIt _First, _InIt _Last, const _Ty& _Val, true_type)
	{	
	if (!_Within_limits(_First, _Val))
		return (_Last);
	_First = static_cast<_InIt>(:: memchr(
		_First, static_cast<unsigned char>(_Val), _Last - _First));
	return (_First ? _First : _Last);
	}

template<class _InIt,
	class _Ty> inline
	_InIt _Find_unchecked1(_InIt _First, _InIt _Last, const _Ty& _Val, false_type)
	{	
	for (; _First != _Last; ++_First)
		if (*_First == _Val)
			break;
	return (_First);
	}

template<class _InIt,
	class _Ty> inline
	_InIt _Find_unchecked(_InIt _First, _InIt _Last, const _Ty& _Val)
	{	
	
	typedef integral_constant<bool,
		(is_same<_InIt, char *>::value
		|| is_same<_InIt, signed char *>::value
		|| is_same<_InIt, unsigned char *>::value
		|| is_same<_InIt, const char *>::value
		|| is_same<_InIt, const signed char *>::value
		|| is_same<_InIt, const unsigned char *>::value)
		&& is_integral<_Ty>::value
	> _Memchr_opt;
	return (_Find_unchecked1(_First, _Last, _Val, _Memchr_opt()));
	}

template<class _InIt,
	class _Ty> inline
	_InIt find(_InIt _First, _InIt _Last, const _Ty& _Val)
	{	
	;
	return (_Rechecked(_First,
		_Find_unchecked(_Unchecked(_First), _Unchecked(_Last), _Val)));
	}

		
template<class _InIt,
	class _Ty,
	class _Pr> inline
	_InIt _Find_pr(_InIt _First, _InIt _Last, const _Ty& _Val, _Pr& _Pred)
	{	
	for (; _First != _Last; ++_First)
		if (_Pred(*_First, _Val))
			break;
	return (_First);
	}

		
template<class _InIt,
	class _Ty> inline
	_Iter_diff_t<_InIt>
		_Count_unchecked(_InIt _First, _InIt _Last, const _Ty& _Val)
	{	
	_Iter_diff_t<_InIt> _Count = 0;

	for (; _First != _Last; ++_First)
		if (*_First == _Val)
			++_Count;
	return (_Count);
	}

template<class _InIt,
	class _Ty> inline
	_Iter_diff_t<_InIt>
		count(_InIt _First, _InIt _Last, const _Ty& _Val)
	{	
	;
	return (_Count_unchecked(_Unchecked(_First), _Unchecked(_Last), _Val));
	}

		
template<class _InIt,
	class _Ty,
	class _Pr> inline
	_Iter_diff_t<_InIt>
		_Count_pr(_InIt _First, _InIt _Last, const _Ty& _Val, _Pr& _Pred)
	{	
	_Iter_diff_t<_InIt> _Count = 0;

	for (; _First != _Last; ++_First)
		if (_Pred(*_First, _Val))
			++_Count;
	return (_Count);
	}

		
template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	void _Trim_matching_suffixes(_FwdIt1&, _FwdIt2&, _Pr&,
		forward_iterator_tag, forward_iterator_tag)
	{	
	}

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	void _Trim_matching_suffixes(_FwdIt1& _Last1, _FwdIt2& _Last2, _Pr& _Pred,
		bidirectional_iterator_tag, bidirectional_iterator_tag)
	{	
	
	while (_Pred(*--_Last1, *--_Last2))
		;	
	++_Last1;
	++_Last2;
	}

		
template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	bool _Check_match_counts(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr& _Pred)
	{	
	_Trim_matching_suffixes(_Last1, _Last2, _Pred,
		_Iter_cat_t<_FwdIt1>(), _Iter_cat_t<_FwdIt2>());
	for (_FwdIt1 _Next1 = _First1; _Next1 != _Last1; ++_Next1)
		if (_Next1 == _Find_pr(_First1, _Next1, *_Next1, _Pred))
			{	
			_Iter_diff_t<_FwdIt2> _Count2 = _Count_pr(_First2, _Last2, *_Next1, _Pred);
			if (_Count2 == 0)
				return (false);	
			_FwdIt1 _Skip1 = ::std:: next(_Next1);
			_Iter_diff_t<_FwdIt1> _Count1 = _Count_pr(_Skip1, _Last1, *_Next1, _Pred) + 1;
			if (_Count2 != _Count1)
				return (false);	
			}

	return (true);
	}

		
template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	bool _Is_permutation_unchecked(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _Pr& _Pred)
	{	
	for (; _First1 != _Last1; ++_First1, (void)++_First2)
		if (!_Pred(*_First1, *_First2))
			{	
			_FwdIt2 _Last2 = ::std:: next(_First2,
				::std:: distance(_First1, _Last1));
			return (_Check_match_counts(_First1, _Last1,
				_First2, _Last2, _Pred));
			}

	return (true);
	}

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	bool _Is_permutation_no_deprecate1(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _Pr& _Pred, forward_iterator_tag, forward_iterator_tag)
	{	
	return (_Is_permutation_unchecked(_First1, _Last1, _Unchecked_idl0(_First2), _Pred));
	}

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	bool _Is_permutation_no_deprecate1(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _Pr& _Pred, random_access_iterator_tag, random_access_iterator_tag)
	{	
	;
	return (_Is_permutation_unchecked(_First1, _Last1, _Unchecked(_First2), _Pred));
	}

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	bool _Is_permutation_no_deprecate(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _Pr& _Pred)
	{	
	;
	;
	return (_Is_permutation_no_deprecate1(_Unchecked(_First1), _Unchecked(_Last1),
		_First2, _Pred, _Iter_cat_t<_FwdIt1>(), _Iter_cat_t<_FwdIt2>()));
	}

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _Pr _Pred)
	{	
	struct _Unchecked_iterators { static void  _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_First2)));
	return (_Is_permutation_no_deprecate(_First1, _Last1, _First2, _Pred));
	}

 











#line 3458 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"

		
template<class _FwdIt1,
	class _FwdIt2> inline
	bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2)
	{	
	return (::std:: is_permutation(_First1, _Last1,
		_First2, equal_to<>()));
	}


 








#line 3480 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"

		
template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	bool _Is_permutation_unchecked(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr& _Pred,
		forward_iterator_tag, forward_iterator_tag)
	{	
		
	;
	for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void)++_First2)
		if (!_Pred(*_First1, *_First2))
			{	
			if (::std:: distance(_First1, _Last1)
				!= ::std:: distance(_First2, _Last2))
				return (false);	
			else
				return (_Check_match_counts(_First1, _Last1,
					_First2, _Last2, _Pred));
			}

	return (_First1 == _Last1 && _First2 == _Last2);
	}

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	bool _Is_permutation_unchecked(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr& _Pred,
		random_access_iterator_tag, random_access_iterator_tag)
	{	
		
	if (_Last1 - _First1 != _Last2 - _First2)
		return (false);
	;
	return (_Is_permutation_unchecked(_First1, _Last1, _First2, _Pred));
	}

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)
	{	
		
	;
	;
	return (_Is_permutation_unchecked(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2), _Pred,
		_Iter_cat_t<_FwdIt1>(), _Iter_cat_t<_FwdIt2>()));
	}

		
template<class _FwdIt1,
	class _FwdIt2> inline
	bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2)
	{	
	return (::std:: is_permutation(_First1, _Last1,
		_First2, _Last2, equal_to<>()));
	}

		
template<class _BidIt> inline
	void _Reverse_unchecked(_BidIt _First, _BidIt _Last)
	{	
	for (; _First != _Last && _First != --_Last; ++_First)
		::std:: iter_swap(_First, _Last);
	}

template<class _BidIt> inline
	void reverse(_BidIt _First, _BidIt _Last)
	{	
	;
	_Reverse_unchecked(_Unchecked(_First), _Unchecked(_Last));
	}

		
template<class _FwdIt> inline
	_FwdIt _Rotate_unchecked1(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last,
		forward_iterator_tag)
	{	
	for (_FwdIt _Next = _Mid, _Res = _Last; ; )
		{	
		::std:: iter_swap(_First, _Next);
		if (++_First == _Mid)
			{	
			if (++_Next == _Last)
				return (_Res == _Last ? _Mid : _Res);
			else
				_Mid = _Next;	
			}
		else if (++_Next == _Last)
			{	
			if (_Res == _Last)
				_Res = _First;
			_Next = _Mid;
			}
		}
	}

template<class _BidIt> inline
	pair<_BidIt, _BidIt> _Reverse_until_sentinel_unchecked(
		_BidIt _First, _BidIt _Sentinel, _BidIt _Last)
	{	
	while (_First != _Sentinel && _Last != _Sentinel)
		::std:: iter_swap(_First++, --_Last);
	return (::std:: make_pair(_First, _Last));
	}

template<class _BidIt> inline
	_BidIt _Rotate_unchecked1(_BidIt _First, _BidIt _Mid, _BidIt _Last,
		bidirectional_iterator_tag)
	{	
	_Reverse_unchecked(_First, _Mid);
	_Reverse_unchecked(_Mid, _Last);
	pair<_BidIt, _BidIt> _Tmp = _Reverse_until_sentinel_unchecked(_First, _Mid, _Last);
	_Reverse_unchecked(_Tmp.first, _Tmp.second);
	return (_Mid != _Tmp.first ? _Tmp.first : _Tmp.second);
	}

template<class _RanIt> inline
	_RanIt _Rotate_unchecked1(_RanIt _First, _RanIt _Mid, _RanIt _Last,
		random_access_iterator_tag)
	{	
	_Reverse_unchecked(_First, _Mid);
	_Reverse_unchecked(_Mid, _Last);
	_Reverse_unchecked(_First, _Last);
	return (_First + (_Last - _Mid));
	}

template<class _FwdIt> inline
	_FwdIt _Rotate_unchecked(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last)
	{	
	if (_First == _Mid)
		return (_Last);
	if (_Mid == _Last)
		return (_First);
	return (_Rotate_unchecked1(_First, _Mid, _Last, _Iter_cat_t<_FwdIt>()));
	}

template<class _FwdIt> inline
	_FwdIt rotate(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last)
	{	
	;
	;
	return (_Rechecked(_First,
		_Rotate_unchecked(_Unchecked(_First), _Unchecked(_Mid),
		_Unchecked(_Last))));
	}

	
template<class _Diff,
	class _Urng>
	class _Rng_from_urng
	{	
public:
	typedef typename make_unsigned<_Diff>::type _Ty0;
	typedef typename _Urng::result_type _Ty1;

	typedef typename _If<sizeof (_Ty1) < sizeof (_Ty0),
		_Ty0, _Ty1>::type _Udiff;


	explicit _Rng_from_urng(_Urng& _Func)
		: _Ref(_Func), _Bits(8 * sizeof (_Udiff)), _Bmask(_Udiff(-1))
		{	
		for (; (_Urng::max)() - (_Urng::min)() < _Bmask; _Bmask >>= 1)
			--_Bits;
		}

	_Diff operator()(_Diff _Index)
		{	
		for (; ; )
			{	
			_Udiff _Ret = 0;	
			_Udiff _Mask = 0;	

			while (_Mask < _Udiff(_Index - 1))
				{	
				_Ret <<= _Bits - 1;	
				_Ret <<= 1;
				_Ret |= _Get_bits();
				_Mask <<= _Bits - 1;	
				_Mask <<= 1;
				_Mask |= _Bmask;
				}

			
			if (_Ret / _Index < _Mask / _Index
				|| _Mask % _Index == _Udiff(_Index - 1))
				return (_Ret % _Index);
			}
		}

	_Udiff _Get_all_bits()
		{	
		_Udiff _Ret = 0;

		for (size_t _Num = 0; _Num < 8 * sizeof (_Udiff);
			_Num += _Bits)
			{	
			_Ret <<= _Bits - 1;	
			_Ret <<= 1;
			_Ret |= _Get_bits();
			}

		return (_Ret);
		}

	_Rng_from_urng(const _Rng_from_urng&) = delete;
	_Rng_from_urng& operator=(const _Rng_from_urng&) = delete;

private:
	_Udiff _Get_bits()
		{	
		for (; ; )
			{	
			_Udiff _Val = _Ref() - (_Urng::min)();

			if (_Val <= _Bmask)
				return (_Val);
			}
		}

	_Urng& _Ref;	
	size_t _Bits;	
	_Udiff _Bmask;	
	};

		
template<class _Elem>
	class __declspec(dllimport) _Yarn
	{	
public:
	typedef _Yarn<_Elem> _Myt;

	 _Yarn()
		: _Myptr(0), _Nul(0)
		{	
		}

	 _Yarn(const _Myt& _Right)
		: _Myptr(0), _Nul(0)
		{	
		*this = _Right;
		}

	 _Yarn(const _Elem *_Right)
		: _Myptr(0), _Nul(0)
		{	
		*this = _Right;
		}

	_Myt&  operator=(const _Myt& _Right)
		{	
		return (*this = _Right._Myptr);
		}

	_Myt&  operator=(const _Elem *_Right)
		{	
		if (_Myptr != _Right)
			{	
			_Tidy();

			if (_Right != 0)
				{	
				const _Elem *_Ptr = _Right;
				while (*_Ptr != (_Elem)0)
					++_Ptr;
				size_t _Count = ((const char *)++_Ptr - (const char *)_Right);

 




				_Myptr = (_Elem *):: malloc(_Count);
 #line 3760 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"

				if (_Myptr != 0)
					:: memcpy(_Myptr, _Right, _Count);
				}
			}

		return (*this);
		}

	 ~_Yarn() noexcept
		{	
		_Tidy();
		}

	bool  empty() const
		{	
		return (_Myptr == 0);
		}

	const _Elem * c_str() const
		{	
		return (_Myptr != 0 ? _Myptr : &_Nul);
		}

	bool  _Empty() const
		{	
		return (_Myptr == 0);
		}

	const _Elem * _C_str() const
		{	
		return (_Myptr != 0 ? _Myptr : &_Nul);
		}

private:
	void  _Tidy()
		{	
		if (_Myptr != 0)

 



			:: free(_Myptr);
 #line 3805 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"

		_Myptr = 0;
		}

	_Elem *_Myptr;	
	_Elem _Nul;		
	};

	
template<class _Ty,
	class _Alloc>
	struct _Has_allocator_type
	{	
	template<class _Uty>
		static auto _Fn(int)
			-> is_convertible<_Alloc,
				typename _Uty::allocator_type>;
	template<class _Uty>
		static auto _Fn(_Wrap_int)
			-> false_type;

	typedef decltype(_Fn<_Ty>(0)) type;
	};

		
struct allocator_arg_t
	{	
	};

constexpr allocator_arg_t allocator_arg{};

[[noreturn]] __declspec(dllimport) void __cdecl _Xbad_alloc();
[[noreturn]] __declspec(dllimport) void __cdecl _Xinvalid_argument(  const char *);
[[noreturn]] __declspec(dllimport) void __cdecl _Xlength_error(  const char *);
[[noreturn]] __declspec(dllimport) void __cdecl _Xout_of_range(  const char *);
[[noreturn]] __declspec(dllimport) void __cdecl _Xoverflow_error(  const char *);
[[noreturn]] __declspec(dllimport) void __cdecl _Xruntime_error(  const char *);
}

namespace std {
		
template<class _Ty,
	class _Alloc>
	struct uses_allocator
		: _Has_allocator_type<_Ty, _Alloc>::type
	{	
	};

 
template<class _Ty,
	class _Alloc>
	constexpr bool uses_allocator_v = uses_allocator<_Ty, _Alloc>::value;
 #line 3858 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}	
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 3863 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
#line 3864 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"






#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 
  
 #line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

 #pragma warning(disable: 4100)

namespace std {



 




 #line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

 









		
inline
	__declspec(allocator) void *_Allocate(size_t _Count, size_t _Sz,
		bool _Try_aligned_allocation = true)
	{	
	void *_Ptr = 0;

	if (_Count == 0)
		return (_Ptr);

	
	if ((size_t)(-1) / _Sz < _Count)
		_Xbad_alloc();	
	const size_t _User_size = _Count * _Sz;

 
	if (_Try_aligned_allocation
		&& 4096 <= _User_size)
		{	
		static_assert(sizeof (void *) < 32,
			"Big allocations should at least match vector register size");
		const size_t _Block_size = (sizeof(void *) + 32 - 1) + _User_size;
		if (_Block_size <= _User_size)
			_Xbad_alloc();	
		const uintptr_t _Ptr_container =
			reinterpret_cast<uintptr_t>(::operator new(_Block_size));
		{ if (!(_Ptr_container != 0)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
		_Ptr = reinterpret_cast<void *>((_Ptr_container + (sizeof(void *) + 32 - 1))
			& ~(32 - 1));
		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

 


		}
	else
 #line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

		{	
		_Ptr = ::operator new(_User_size);
		{ if (!(_Ptr != 0)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
		}
	return (_Ptr);
	}

		
inline
	void _Deallocate(void * _Ptr, size_t _Count, size_t _Sz)
	{	
 
	{ if (!(_Count <= (size_t)(-1) / _Sz)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
	const size_t _User_size = _Count * _Sz;
	if (4096 <= _User_size)
		{	
		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
		{ if (!((_Ptr_user & (32 - 1)) == 0)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
		const uintptr_t _Ptr_container =
			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

 







		
		{ if (!(_Ptr_container < _Ptr_user)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };

 




		{ if (!(sizeof(void *) <= _Ptr_user - _Ptr_container)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
 #line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

		{ if (!(_Ptr_user - _Ptr_container <= (sizeof(void *) + 32 - 1))) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

		_Ptr = reinterpret_cast<void *>(_Ptr_container);
		}
 #line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

	::operator delete(_Ptr);
	}

		
template<class _Ty1,
	class _Ty2> inline
	void _Construct(_Ty1 *_Ptr, _Ty2&& _Val)
	{	
	void *_Vptr = _Ptr;
	::new (_Vptr) _Ty1(::std:: forward<_Ty2>(_Val));
	}

template<class _Ty1> inline
	void _Construct(_Ty1 *_Ptr)
	{	
	void *_Vptr = _Ptr;

	::new (_Vptr) _Ty1();
	}

		
template<class _Alty>
	struct _Is_simple_alloc
		: _Cat_base<is_same<typename _Alty::size_type, size_t>::value
		&& is_same<typename _Alty::difference_type, ptrdiff_t>::value
		&& is_same<typename _Alty::pointer,
			typename _Alty::value_type *>::value
		&& is_same<typename _Alty::const_pointer,
			const typename _Alty::value_type *>::value
		&& is_same<typename _Alty::reference,
			typename _Alty::value_type&>::value
		&& is_same<typename _Alty::const_reference,
			const typename _Alty::value_type&>::value>
	{	
	};

		
template<class _Value_type>
	struct _Simple_types
	{	
	typedef _Value_type value_type;
	typedef size_t size_type;
	typedef ptrdiff_t difference_type;
	typedef value_type *pointer;
	typedef const value_type *const_pointer;
	typedef value_type& reference;
	typedef const value_type& const_reference;
	};

		
template<class _Alty,
	class _Pointer>
	struct _Get_voidptr
	{	
	typedef typename _Alty::template rebind<void>::other _Alvoid;
	typedef typename _Alvoid::pointer type;
	};

template<class _Alty,
	class _Ty>
	struct _Get_voidptr<_Alty, _Ty *>
	{	
	typedef void *type;
	};

		
template<class _Ty>
	struct _Get_first_parameter;

template<template<class, class...> class _Ty,
	class _First,
	class... _Rest>
	struct _Get_first_parameter<_Ty<_First, _Rest...> >
	{	
	typedef _First type;
	};

		
template<class _Newfirst,
	class _Ty>
	struct _Replace_first_parameter;

template<class _Newfirst,
	template<class, class...> class _Ty,
	class _First,
	class... _Rest>
	struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...> >
	{	
	typedef _Ty<_Newfirst, _Rest...> type;
	};

		
template<class _Ty>
	struct _Get_element_type
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::element_type>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename _Get_first_parameter<_Uty>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };
#line 228 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

		
template<class _Ty>
	struct _Get_ptr_difference_type
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::difference_type>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<ptrdiff_t>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };
#line 234 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

		
template<class _Ty,
	class _Other>
	struct _Get_rebind_type
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::template rebind<_Other>::other>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename _Replace_first_parameter<_Other , _Uty>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };
#line 241 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

		
template<class _Ty>
	struct pointer_traits
	{	
	typedef typename _Get_element_type<_Ty>::type element_type;
	typedef _Ty pointer;
	typedef typename _Get_ptr_difference_type<_Ty>::type difference_type;

	template<class _Other>
		using rebind = typename _Get_rebind_type<_Ty, _Other>::type;

	typedef typename _If<is_void<element_type>::value,
		char&,
		typename add_lvalue_reference<element_type>::type>::type _Reftype;

	static pointer pointer_to(_Reftype _Val)
		{	
		return (_Ty::pointer_to(_Val));
		}
	};

		
template<class _Ty>
	struct pointer_traits<_Ty *>
	{	
	typedef _Ty element_type;
	typedef _Ty *pointer;
	typedef ptrdiff_t difference_type;

	template<class _Other>
		using rebind = _Other *;

	typedef typename _If<is_void<_Ty>::value,
		char&,
		typename add_lvalue_reference<_Ty>::type>::type _Reftype;

	static pointer pointer_to(_Reftype _Val)
		{	
		return (::std:: addressof(_Val));
		}
	};


		
template<class _Ptrty> inline
	void _Destroy(_Ptrty _Ptr)
	{	
	typedef typename pointer_traits<_Ptrty>::element_type _Ty;
	_Ptr->~_Ty();
	}

		
template<class _Ptrty> inline
	auto _Const_cast(_Ptrty _Ptr)
	{	
	using _Elem = typename pointer_traits<_Ptrty>::element_type;
	using _Modifiable = remove_const_t<_Elem>;
	using _Dest = typename pointer_traits<_Ptrty>::template rebind<_Modifiable>;

	return (pointer_traits<_Dest>::pointer_to(const_cast<_Modifiable&>(*_Ptr)));
	}

template<class _Ty> inline
	auto _Const_cast(_Ty * _Ptr)
	{	
	return (const_cast<remove_const_t<_Ty> *>(_Ptr));
	}


		
template<class _Ty>
	struct _Get_pointer_type
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename _Ty::value_type *>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };
#line 316 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

		
template<class _Ty>
	struct _Get_const_pointer_type
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::const_pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename pointer_traits<typename _Get_pointer_type<_Ty>::type> ::template rebind<const typename _Ty::value_type>>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };
#line 323 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

		
template<class _Ty>
	struct _Get_void_pointer_type
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::void_pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename pointer_traits<typename _Get_pointer_type<_Ty>::type> ::template rebind<void>>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };
#line 330 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

		
template<class _Ty>
	struct _Get_const_void_pointer_type
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::const_void_pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename pointer_traits<typename _Get_pointer_type<_Ty>::type> ::template rebind<const void>>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };
#line 337 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

		
template<class _Ty>
	struct _Get_difference_type
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::difference_type>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename _Get_ptr_difference_type< typename _Get_pointer_type<_Ty>::type>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };
#line 344 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

		
template<class _Ty>
	struct _Get_size_type
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::size_type>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename make_unsigned< typename _Get_difference_type<_Ty>::type>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };
#line 351 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

		
template<class _Ty>
	struct _Get_propagate_on_container_copy
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::propagate_on_container_copy_assignment>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<false_type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };
#line 357 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

		
template<class _Ty>
	struct _Get_propagate_on_container_move
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::propagate_on_container_move_assignment>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<false_type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };
#line 363 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

		
template<class _Ty>
	struct _Get_propagate_on_container_swap
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::propagate_on_container_swap>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<false_type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };
#line 369 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

		
template<class _Ty>
	struct _Get_is_always_equal
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::is_always_equal>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename is_empty<_Ty>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };
#line 375 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

		
template<class _Ty>
	class allocator;
template<class _Alloc>
	struct _Wrap_alloc;

template<class _Alloc>
	struct _Unwrap_alloc
	{	
	typedef _Alloc type;
	};

template<class _Alloc>
	struct _Unwrap_alloc<_Wrap_alloc<_Alloc>>
	{	
	typedef _Alloc type;
	};


		
template<class _Alloc>
	using _Unwrap_alloc_t = typename _Unwrap_alloc<_Alloc>::type;


		
template<class _Alloc,
	class = void>
	struct _Is_default_allocator
		: false_type
	{	
	};

template<class _Ty>
	struct _Is_default_allocator<allocator<_Ty>, typename allocator<_Ty>::_Not_user_specialized>
		: true_type
	{	
	};

		
struct _Alloc_allocate
	{	
		

	template<class _Alloc,
		class _Size_type,
		class _Const_void_pointer>
		static auto _Fn(int, _Alloc& _Al,
			_Size_type _Count,
			_Const_void_pointer _Hint)
			-> decltype(_Al.allocate(_Count, _Hint))
		{	
		return (_Al.allocate(_Count, _Hint));
		}

	template<class _Alloc,
		class _Size_type,
		class _Const_void_pointer>
		static auto _Fn(_Wrap_int, _Alloc& _Al,
			_Size_type _Count,
			_Const_void_pointer)
			-> decltype(_Al.allocate(_Count))
		{	
		return (_Al.allocate(_Count));
		}
	};

		
struct _Has_no_alloc_construct_tag
	{	
	};

template<class _Void,
	class... _Types>
	struct _Has_no_alloc_construct
		: true_type
	{	
	};

template<class _Alloc,
	class _Ptr,
	class... _Args>
	struct _Has_no_alloc_construct<
		void_t<
			_Has_no_alloc_construct_tag,	
			decltype(::std:: declval<_Alloc&>().construct(::std:: declval<_Ptr>(), ::std:: declval<_Args>()...))>,
		_Alloc, _Ptr, _Args...>
		: false_type
	{	
	};

template<class _Alloc,
	class _Ptr,
	class... _Args>
	using _Uses_default_construct = disjunction<
		_Is_default_allocator<_Alloc>,
		_Has_no_alloc_construct<void, _Alloc, _Ptr, _Args...>>;

template<class _Alloc,
	class _Ptr,
	class... _Args>
	using _Uses_default_construct_t = typename _Uses_default_construct<_Alloc, _Ptr, _Args...>::type;


		
struct _Has_no_alloc_destroy_tag
	{	
	};

template<class _Alloc,
	class _Ptr,
	class = void>
	struct _Has_no_alloc_destroy
		: true_type
	{	
	};

template<class _Alloc,
	class _Ptr>
	struct _Has_no_alloc_destroy<_Alloc, _Ptr, void_t<
			_Has_no_alloc_destroy_tag,	
			decltype(::std:: declval<_Alloc&>().destroy(::std:: declval<_Ptr>()))>>
		: false_type
	{	
	};

template<class _Alloc,
	class _Ptr>
	using _Uses_default_destroy = disjunction<
		_Is_default_allocator<_Alloc>,
		_Has_no_alloc_destroy<_Alloc, _Ptr>>;

template<class _Alloc,
	class _Ptr>
	using _Uses_default_destroy_t = typename _Uses_default_destroy<_Alloc, _Ptr>::type;


		
struct _Alloc_max_size
	{	
	template<class _Ty>
		static auto _Fn(int, const _Ty& _Al) noexcept
			-> decltype(_Al.max_size())
		{	
		return (_Al.max_size());
		}

	template<class _Ty>
		static auto _Fn(_Wrap_int, const _Ty&) noexcept
			-> typename _Get_size_type<_Ty>::type
		{	
		return ((numeric_limits<typename _Get_size_type<_Ty>::type>::max)()
			/ sizeof(typename _Ty::value_type));
		}
	};

		
struct _Alloc_select
	{	
		

	template<class _Ty>
		static auto _Fn(int, const _Ty& _Al)
			-> decltype((_Ty)_Al.select_on_container_copy_construction())
		{	
		return (_Al.select_on_container_copy_construction());
		}

	template<class _Ty>
		static auto _Fn(_Wrap_int, const _Ty& _Al)
			-> _Ty
		{	
		return (_Al);
		}
	};

		
template<class _Alloc>
	struct allocator_traits
	{	
	typedef _Alloc allocator_type;
	typedef typename _Alloc::value_type value_type;

	typedef typename _Get_pointer_type<_Alloc>::type
		pointer;
	typedef typename _Get_const_pointer_type<_Alloc>::type
		const_pointer;
	typedef typename _Get_void_pointer_type<_Alloc>::type
		void_pointer;
	typedef typename _Get_const_void_pointer_type<_Alloc>::type
		const_void_pointer;

	typedef typename _Get_size_type<_Alloc>::type size_type;
	typedef typename _Get_difference_type<_Alloc>::type difference_type;

	typedef typename _Get_propagate_on_container_copy<_Alloc>::type
		propagate_on_container_copy_assignment;
	typedef typename _Get_propagate_on_container_move<_Alloc>::type
		propagate_on_container_move_assignment;
	typedef typename _Get_propagate_on_container_swap<_Alloc>::type
		propagate_on_container_swap;
	typedef typename _Get_is_always_equal<_Alloc>::type
		is_always_equal;

	template<class _Other>
		using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;

	template<class _Other>
		using rebind_traits = allocator_traits<rebind_alloc<_Other> >;

	static __declspec(allocator) pointer allocate(_Alloc& _Al, size_type _Count)
		{	
		return (_Al.allocate(_Count));
		}

	static __declspec(allocator) pointer allocate(_Alloc& _Al, size_type _Count,
		const_void_pointer _Hint)
		{	
		return (_Alloc_allocate::_Fn(0, _Al, _Count, _Hint));
		}

	static void deallocate(_Alloc& _Al,
		pointer _Ptr, size_type _Count)
		{	
		_Al.deallocate(_Ptr, _Count);
		}

	template<class _Ty,
		class... _Types>
		static void _Construct1(true_type, _Alloc&, _Ty *_Ptr,
			_Types&&... _Args)
		{	
		::new (static_cast<void *>(_Ptr))
			_Ty(::std:: forward<_Types>(_Args)...);
		}

	template<class _Ty,
		class... _Types>
		static void _Construct1(false_type, _Alloc& _Al, _Ty *_Ptr,
			_Types&&... _Args)
		{	
		_Al.construct(_Ptr, ::std:: forward<_Types>(_Args)...);
		}

	template<class _Ty,
		class... _Types>
		static void construct(_Alloc& _Al, _Ty *_Ptr,
			_Types&&... _Args)
		{	
		_Construct1(_Uses_default_construct_t<_Unwrap_alloc_t<_Alloc>, _Ty *, _Types...>(),
			_Al, _Ptr, ::std:: forward<_Types>(_Args)...);
		}

	template<class _Ty>
		static void _Destroy1(_Alloc&, _Ty *_Ptr, true_type)
		{	
		_Ptr->~_Ty();
		}

	template<class _Ty>
		static void _Destroy1(_Alloc& _Al, _Ty *_Ptr, false_type)
		{	
		_Al.destroy(_Ptr);
		}

	template<class _Ty>
		static void destroy(_Alloc& _Al, _Ty *_Ptr)
		{	
		_Destroy1(_Al, _Ptr, _Uses_default_destroy_t<_Unwrap_alloc_t<_Alloc>, _Ty *>());
		}

	static size_type max_size(const _Alloc& _Al) noexcept
		{	
		return (_Alloc_max_size::_Fn(0, _Al));
		}

	static _Alloc select_on_container_copy_construction(
		const _Alloc& _Al)
		{	
		return (_Alloc_select::_Fn(0, _Al));
		}
	};

		
template<class _Ty>
	class allocator
	{	
public:
	static_assert(!is_const<_Ty>::value,
		"The C++ Standard forbids containers of const elements "
		"because allocator<const T> is ill-formed.");

	typedef void _Not_user_specialized;

	typedef _Ty value_type;

	typedef value_type *pointer;
	typedef const value_type *const_pointer;

	typedef value_type& reference;
	typedef const value_type& const_reference;

	typedef size_t size_type;
	typedef ptrdiff_t difference_type;

	typedef true_type propagate_on_container_move_assignment;
	typedef true_type is_always_equal;

	template<class _Other>
		struct rebind
		{	
		typedef allocator<_Other> other;
		};

	pointer address(reference _Val) const noexcept
		{	
		return (::std:: addressof(_Val));
		}

	const_pointer address(const_reference _Val) const noexcept
		{	
		return (::std:: addressof(_Val));
		}

	allocator() noexcept
		{	
		}

	allocator(const allocator<_Ty>&) noexcept
		{	
		}

	template<class _Other>
		allocator(const allocator<_Other>&) noexcept
		{	
		}

	template<class _Other>
		allocator<_Ty>& operator=(const allocator<_Other>&)
		{	
		return (*this);
		}

	void deallocate(pointer _Ptr, size_type _Count)
		{	
		_Deallocate(_Ptr, _Count, sizeof (_Ty));
		}

	__declspec(allocator) pointer allocate(size_type _Count)
		{	
		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
		}

	__declspec(allocator) pointer allocate(size_type _Count, const void *)
		{	
		return (allocate(_Count));
		}

	template<class _Objty,
		class... _Types>
		void construct(_Objty *_Ptr, _Types&&... _Args)
		{	
		::new ((void *)_Ptr) _Objty(::std:: forward<_Types>(_Args)...);
		}


	template<class _Uty>
		void destroy(_Uty *_Ptr)
		{	
		_Ptr->~_Uty();
		}

	size_t max_size() const noexcept
		{	
		return ((size_t)(-1) / sizeof (_Ty));
		}
	};

		
template<>
	class allocator<void>
	{	
public:
	typedef void _Not_user_specialized;

	typedef void value_type;

	typedef void *pointer;
	typedef const void *const_pointer;

	template<class _Other>
		struct rebind
		{	
		typedef allocator<_Other> other;
		};

	allocator() noexcept
		{	
		}

	allocator(const allocator<void>&) noexcept
		{	
		}

	template<class _Other>
		allocator(const allocator<_Other>&) noexcept
		{	
		}

	template<class _Other>
		allocator<void>& operator=(const allocator<_Other>&)
		{	
		return (*this);
		}
	};

template<class _Ty,
	class _Other> inline
	bool operator==(const allocator<_Ty>&,
		const allocator<_Other>&) noexcept
	{	
	return (true);
	}

template<class _Ty,
	class _Other> inline
	bool operator!=(const allocator<_Ty>& _Left,
		const allocator<_Other>& _Right) noexcept
	{	
	return (false);
	}

		
template<class _Ty>
	struct allocator_traits<allocator<_Ty> >
	{	
	typedef allocator<_Ty> _Alloc;

	typedef _Alloc allocator_type;
	typedef _Ty value_type;

	typedef value_type *pointer;
	typedef const value_type *const_pointer;
	typedef void *void_pointer;
	typedef const void *const_void_pointer;

	typedef size_t size_type;
	typedef ptrdiff_t difference_type;

	typedef false_type propagate_on_container_copy_assignment;
	typedef true_type propagate_on_container_move_assignment;
	typedef false_type propagate_on_container_swap;
	typedef true_type is_always_equal;

	template<class _Other>
		using rebind_alloc = allocator<_Other>;

	template<class _Other>
		using rebind_traits = allocator_traits<allocator<_Other> >;

	static __declspec(allocator) pointer allocate(_Alloc& _Al, size_type _Count)
		{	
		return (_Al.allocate(_Count));
		}

	static __declspec(allocator) pointer allocate(_Alloc& _Al, size_type _Count,
		const_void_pointer _Hint)
		{	
		return (_Al.allocate(_Count, _Hint));
		}

	static void deallocate(_Alloc& _Al,
		pointer _Ptr, size_type _Count)
		{	
		_Al.deallocate(_Ptr, _Count);
		}

	template<class _Objty,
		class... _Types>
		static void construct(_Alloc& _Al, _Objty *_Ptr,
			_Types&&... _Args)
		{	
		_Al.construct(_Ptr, ::std:: forward<_Types>(_Args)...);
		}


	template<class _Uty>
		static void destroy(_Alloc& _Al, _Uty *_Ptr)
		{	
		_Al.destroy(_Ptr);
		}

	static size_type max_size(const _Alloc& _Al) noexcept
		{	
		return (_Al.max_size());
		}

	static _Alloc select_on_container_copy_construction(
		const _Alloc& _Al)
		{	
		return (_Al);
		}
	};

		
template<class _Alloc>
	struct _Wrap_alloc
		: public _Alloc
	{	
	typedef _Alloc _Mybase;
	typedef allocator_traits<_Alloc> _Mytraits;

	typedef typename _Mytraits::value_type value_type;

	typedef typename _Mytraits::pointer pointer;
	typedef typename _Mytraits::const_pointer const_pointer;
	typedef typename _Mytraits::void_pointer void_pointer;
	typedef typename _Mytraits::const_void_pointer const_void_pointer;

	typedef typename _If<is_void<value_type>::value,
		int, value_type>::type& reference;
	typedef typename _If<is_void<const value_type>::value,
		const int, const value_type>::type& const_reference;

	typedef typename _Mytraits::size_type size_type;
	typedef typename _Mytraits::difference_type difference_type;

	typedef typename _Mytraits::propagate_on_container_copy_assignment
		propagate_on_container_copy_assignment;
	typedef typename _Mytraits::propagate_on_container_move_assignment
		propagate_on_container_move_assignment;
	typedef typename _Mytraits::propagate_on_container_swap
		propagate_on_container_swap;
	typedef typename _Mytraits::is_always_equal
		is_always_equal;

	_Wrap_alloc select_on_container_copy_construction(_Nil = _Nil()) const
		{	
		return (_Mytraits::select_on_container_copy_construction(*this));
		}

	template<class _Other>
		struct rebind
		{	
		typedef typename _Mytraits::template rebind_alloc<_Other>
			_Other_alloc;
		typedef _Wrap_alloc<_Other_alloc> other;
		};

	pointer address(reference _Val) const
		{	
		return (pointer_traits<pointer>::pointer_to(_Val));
		}

	const_pointer address(const_reference _Val) const
		{	
		return (pointer_traits<const_pointer>::pointer_to(_Val));
		}

	_Wrap_alloc() noexcept(is_nothrow_default_constructible<_Alloc>::value)
		: _Mybase()
		{	
		}

	_Wrap_alloc(const _Wrap_alloc& _Right) noexcept
		: _Mybase(_Right)
		{	
		}

	_Wrap_alloc(_Wrap_alloc&& _Right) noexcept
		: _Mybase(::std:: move(_Right))
		{	
		}

	template<class _Other>
		_Wrap_alloc(_Other&& _Right) noexcept
		: _Mybase(::std:: forward<_Other>(_Right))
		{	
		}

	_Wrap_alloc& operator=(const _Wrap_alloc& _Right)
		{	
		_Mybase::operator=(_Right);
		return (*this);
		}

	_Wrap_alloc& operator=(_Wrap_alloc&& _Right)
		{	
		_Mybase::operator=(::std:: move(_Right));
		return (*this);
		}

	template<class _Other>
		_Wrap_alloc& operator=(_Other&& _Right)
		{	
		_Mybase::operator=(::std:: forward<_Other>(_Right));
		return (*this);
		}

	__declspec(allocator) pointer allocate(size_type _Count)
		{	
		return (_Mybase::allocate(_Count));
		}

	__declspec(allocator) pointer allocate(size_type _Count,
		const_void_pointer _Hint, _Nil = _Nil())
		{	
		return (_Mytraits::allocate(*this, _Count, _Hint));
		}

	void deallocate(pointer _Ptr, size_type _Count)
		{	
		_Mybase::deallocate(_Ptr, _Count);
		}

	template<class _Ty,
		class... _Types>
		void construct(_Ty *_Ptr,
			_Types&&... _Args)
		{	
		_Mytraits::construct(*this, _Ptr,
			::std:: forward<_Types>(_Args)...);
		}


	template<class _Ty>
		void destroy(_Ty *_Ptr)
		{	
		_Mytraits::destroy(*this, _Ptr);
		}

	size_type max_size(_Nil = _Nil()) const noexcept
		{	
		return (_Mytraits::max_size(*this));
		}
	};

template<class _Ty,
	class _Other> inline
	bool operator==(const _Wrap_alloc<_Ty>& _Left,
		const _Wrap_alloc<_Other>& _Right) noexcept
	{	
	return (static_cast<const _Ty&>(_Left)
		== static_cast<const _Other&>(_Right));
	}

template<class _Ty,
	class _Other> inline
	bool operator!=(const _Wrap_alloc<_Ty>& _Left,
		const _Wrap_alloc<_Other>& _Right) noexcept
	{	
	return (!(_Left == _Right));
	}

		
template<class _Alty> inline
	void _Pocca(_Alty& _Left, const _Alty& _Right, true_type) noexcept
	{	
	_Left = _Right;
	}

template<class _Alty> inline
	void _Pocca(_Alty&, const _Alty&, false_type) noexcept
	{	
	}

template<class _Alty> inline
	void _Pocca(_Alty& _Left, const _Alty& _Right) noexcept
	{	
	typename _Alty::propagate_on_container_copy_assignment _Tag;
	_Pocca(_Left, _Right, _Tag);
	}

		
template<class _Alty> inline
	void _Pocma(_Alty& _Left, _Alty& _Right, true_type) noexcept
	{	
	_Left = ::std:: move(_Right);
	}

template<class _Alty> inline
	void _Pocma(_Alty&, _Alty&, false_type) noexcept
	{	
	}

template<class _Alty> inline
	void _Pocma(_Alty& _Left, _Alty& _Right) noexcept
	{	
	typename _Alty::propagate_on_container_move_assignment _Tag;
	_Pocma(_Left, _Right, _Tag);
	}

		
template<class _Alty> inline
	void _Pocs(_Alty& _Left, _Alty& _Right, true_type) noexcept
	{	
	_Swap_adl(_Left, _Right);
	}

template<class _Alty> inline
	void _Pocs(_Alty& _Left, _Alty& _Right, false_type) noexcept
	{	
	if (_Left != _Right)
		{	
 

#line 1082 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
		::std:: terminate();
 #line 1084 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
		}
	}

template<class _Alty> inline
	void _Pocs(_Alty& _Left, _Alty& _Right) noexcept
	{	
	typename _Alty::propagate_on_container_swap _Tag;
	_Pocs(_Left, _Right, _Tag);
	}


		
template<class _Alloc,
	class _Ptr = typename _Wrap_alloc<_Alloc>::pointer> inline
	void _Destroy_range1(_Ptr _First, _Ptr _Last, _Wrap_alloc<_Alloc>& _Al, false_type)
	{	
	for (; _First != _Last; ++_First)
		_Al.destroy(_Unfancy(_First));
	}

template<class _Alloc,
	class _Ptr = typename _Wrap_alloc<_Alloc>::pointer> inline
	void _Destroy_range1(_Ptr, _Ptr, _Wrap_alloc<_Alloc>&, true_type)
	{	
		
	}

template<class _Alloc,
	class _Ptr = typename _Wrap_alloc<_Alloc>::pointer> inline
	void _Destroy_range(_Ptr _First, _Ptr _Last, _Wrap_alloc<_Alloc>& _Al)
	{	
		
		
	typedef typename _Alloc::value_type _Val;
	_Destroy_range1(_First, _Last, _Al, typename conjunction<
		is_trivially_destructible<_Val>,
		_Uses_default_destroy<_Alloc, _Val *>>::type());
	}


		
template<class _FwdIt> inline
	void _Destroy_range1(_FwdIt _First, _FwdIt _Last, false_type)
	{	
	for (; _First != _Last; ++_First)
		_Destroy(_First);
	}

template<class _FwdIt> inline
	void _Destroy_range1(_FwdIt, _FwdIt, true_type)
	{	
		
	}

template<class _FwdIt> inline
	void _Destroy_range(_FwdIt _First, _FwdIt _Last)
	{	
		
		
	_Destroy_range1(_First, _Last, is_trivially_destructible<_Iter_value_t<_FwdIt>>());
	}
}

		
  #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {
		
typedef enum memory_order {
	memory_order_relaxed,
	memory_order_consume,
	memory_order_acquire,
	memory_order_release,
	memory_order_acq_rel,
	memory_order_seq_cst
	} memory_order;

typedef _Uint32t _Uint4_t;
typedef _Uint4_t _Atomic_integral_t;

	
	




  
  
  
  
  

  
   
  

#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"

		

typedef long _Atomic_flag_t;

  

		
typedef _Atomic_integral_t _Atomic_counter_t;

inline _Atomic_integral_t
	_Get_atomic_count(const _Atomic_counter_t& _Counter)
	{	
	return (_Counter);
	}

inline void _Init_atomic_counter(_Atomic_counter_t& _Counter,
	_Atomic_integral_t _Value)
	{	
	_Counter = _Value;
	}

 
  
   
  

#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
 #line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"

		
extern "C" {
__declspec(dllimport) void __cdecl _Lock_shared_ptr_spin_lock();
__declspec(dllimport) void __cdecl _Unlock_shared_ptr_spin_lock();
}
}
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"





#line 1149 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

  
   #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"












#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"































































































































































































































































































































#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"







#pragma once


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"































































































































































































































































































































#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"









__pragma(pack(push, 8)) extern "C" {
























#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"

    typedef struct __declspec(align(16)) _SETJMP_FLOAT128
    {
        unsigned __int64 Part[2];
    } SETJMP_FLOAT128;

    
    typedef SETJMP_FLOAT128 _JBTYPE;

    typedef struct _JUMP_BUFFER
    {
        unsigned __int64 Frame;
        unsigned __int64 Rbx;
        unsigned __int64 Rsp;
        unsigned __int64 Rbp;
        unsigned __int64 Rsi;
        unsigned __int64 Rdi;
        unsigned __int64 R12;
        unsigned __int64 R13;
        unsigned __int64 R14;
        unsigned __int64 R15;
        unsigned __int64 Rip;
        unsigned long MxCsr;
        unsigned short FpCsr;
        unsigned short Spare;

        SETJMP_FLOAT128 Xmm6;
        SETJMP_FLOAT128 Xmm7;
        SETJMP_FLOAT128 Xmm8;
        SETJMP_FLOAT128 Xmm9;
        SETJMP_FLOAT128 Xmm10;
        SETJMP_FLOAT128 Xmm11;
        SETJMP_FLOAT128 Xmm12;
        SETJMP_FLOAT128 Xmm13;
        SETJMP_FLOAT128 Xmm14;
        SETJMP_FLOAT128 Xmm15;
    } _JUMP_BUFFER;






















































#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"





    
    typedef _JBTYPE jmp_buf[16];
#line 147 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"




    
#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"




int __cdecl _setjmp(
      jmp_buf _Buf
    );


    #pragma warning(push)
    #pragma warning(disable:4987) 
    __declspec(noreturn) void __cdecl longjmp(
          jmp_buf _Buf,
          int     _Value
        ) throw(...);
    #pragma warning(pop)





#line 175 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"


} __pragma(pack(pop))
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"



    
        #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"













#pragma once



#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"







#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\wmmintrin.h"
















#pragma once



#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\wmmintrin.h"







#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\wmmintrin.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"

















#pragma once



#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"

















#pragma once



#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"










#pragma once



#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"







#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"
















#pragma once



#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"







#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"




















#pragma once



#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"







#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"



#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"



























#pragma once



#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"







#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"














#pragma once






#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"



#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"


extern "C" { 


#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"

typedef union __declspec(intrin_type) __declspec(align(8)) __m64
{
    unsigned __int64    m64_u64;
    float               m64_f32[2];
    __int8              m64_i8[8];
    __int16             m64_i16[4];
    __int32             m64_i32[2];
    __int64             m64_i64;
    unsigned __int8     m64_u8[8];
    unsigned __int16    m64_u16[4];
    unsigned __int32    m64_u32[2];
} __m64;









































































































































#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"


}; 
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"

#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"
#line 191 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"
#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"

















typedef union __declspec(intrin_type) __declspec(align(16)) __m128 {
     float               m128_f32[4];
     unsigned __int64    m128_u64[2];
     __int8              m128_i8[16];
     __int16             m128_i16[8];
     __int32             m128_i32[4];
     __int64             m128_i64[2];
     unsigned __int8     m128_u8[16];
     unsigned __int16    m128_u16[8];
     unsigned __int32    m128_u32[4];
 } __m128;




#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"

 
 
 
 
 
 
 
 
 
 




 
 
 
 
 
 
 
 
 
 












































































 
 
 


extern "C" { 
  
#line 191 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"





extern __m128 _mm_add_ss(__m128 _A, __m128 _B);
extern __m128 _mm_add_ps(__m128 _A, __m128 _B);
extern __m128 _mm_sub_ss(__m128 _A, __m128 _B);
extern __m128 _mm_sub_ps(__m128 _A, __m128 _B);
extern __m128 _mm_mul_ss(__m128 _A, __m128 _B);
extern __m128 _mm_mul_ps(__m128 _A, __m128 _B);
extern __m128 _mm_div_ss(__m128 _A, __m128 _B);
extern __m128 _mm_div_ps(__m128 _A, __m128 _B);
extern __m128 _mm_sqrt_ss(__m128 _A);
extern __m128 _mm_sqrt_ps(__m128 _A);
extern __m128 _mm_rcp_ss(__m128 _A);
extern __m128 _mm_rcp_ps(__m128 _A);
extern __m128 _mm_rsqrt_ss(__m128 _A);
extern __m128 _mm_rsqrt_ps(__m128 _A);
extern __m128 _mm_min_ss(__m128 _A, __m128 _B);
extern __m128 _mm_min_ps(__m128 _A, __m128 _B);
extern __m128 _mm_max_ss(__m128 _A, __m128 _B);
extern __m128 _mm_max_ps(__m128 _A, __m128 _B);





extern __m128 _mm_and_ps(__m128 _A, __m128 _B);
extern __m128 _mm_andnot_ps(__m128 _A, __m128 _B);
extern __m128 _mm_or_ps(__m128 _A, __m128 _B);
extern __m128 _mm_xor_ps(__m128 _A, __m128 _B);





extern __m128 _mm_cmpeq_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpeq_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmplt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmplt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmple_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmple_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpgt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpgt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpge_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpge_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpneq_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpneq_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnlt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnlt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnle_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnle_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpngt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpngt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnge_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnge_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpord_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpord_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpunord_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpunord_ps(__m128 _A, __m128 _B);
extern int _mm_comieq_ss(__m128 _A, __m128 _B);
extern int _mm_comilt_ss(__m128 _A, __m128 _B);
extern int _mm_comile_ss(__m128 _A, __m128 _B);
extern int _mm_comigt_ss(__m128 _A, __m128 _B);
extern int _mm_comige_ss(__m128 _A, __m128 _B);
extern int _mm_comineq_ss(__m128 _A, __m128 _B);
extern int _mm_ucomieq_ss(__m128 _A, __m128 _B);
extern int _mm_ucomilt_ss(__m128 _A, __m128 _B);
extern int _mm_ucomile_ss(__m128 _A, __m128 _B);
extern int _mm_ucomigt_ss(__m128 _A, __m128 _B);
extern int _mm_ucomige_ss(__m128 _A, __m128 _B);
extern int _mm_ucomineq_ss(__m128 _A, __m128 _B);





extern int _mm_cvt_ss2si(__m128 _A);
extern int _mm_cvtt_ss2si(__m128 _A);
extern __m128 _mm_cvt_si2ss(__m128, int);
extern float _mm_cvtss_f32(__m128 _A);








#line 282 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"





extern __int64 _mm_cvtss_si64(__m128 _A);
extern __int64 _mm_cvttss_si64(__m128 _A);
extern __m128  _mm_cvtsi64_ss(__m128 _A, __int64 _B);
#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"





extern __m128 _mm_shuffle_ps(__m128 _A, __m128 _B, unsigned int _Imm8);
extern __m128 _mm_unpackhi_ps(__m128 _A, __m128 _B);
extern __m128 _mm_unpacklo_ps(__m128 _A, __m128 _B);
extern __m128 _mm_loadh_pi(__m128, __m64 const*);
extern __m128 _mm_movehl_ps(__m128, __m128);
extern __m128 _mm_movelh_ps(__m128, __m128);
extern void _mm_storeh_pi(__m64 *, __m128);
extern __m128 _mm_loadl_pi(__m128, __m64 const*);
extern void _mm_storel_pi(__m64 *, __m128);
extern int _mm_movemask_ps(__m128 _A);



















#line 326 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"





extern __m128 _mm_set_ss(float _A);
extern __m128 _mm_set_ps1(float _A);
extern __m128 _mm_set_ps(float _A, float _B, float _C, float _D);
extern __m128 _mm_setr_ps(float _A, float _B, float _C, float _D);
extern __m128 _mm_setzero_ps(void);
extern __m128 _mm_load_ss(float const*_A);
extern __m128 _mm_load_ps1(float const*_A);
extern __m128 _mm_load_ps(float const*_A);
extern __m128 _mm_loadr_ps(float const*_A);
extern __m128 _mm_loadu_ps(float const*_A);
extern void _mm_store_ss(float *_V, __m128 _A);
extern void _mm_store_ps1(float *_V, __m128 _A);
extern void _mm_store_ps(float *_V, __m128 _A);
extern void _mm_storer_ps(float *_V, __m128 _A);
extern void _mm_storeu_ps(float *_V, __m128 _A);
extern void _mm_prefetch(char const*_A, int _Sel);


#line 350 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern void _mm_stream_ps(float *, __m128);
extern __m128 _mm_move_ss(__m128 _A, __m128 _B);

extern void _mm_sfence(void);
extern unsigned int _mm_getcsr(void);
extern void _mm_setcsr(unsigned int);
























#line 381 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"







 
 
 


















































































































#line 506 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"



}; 
#line 511 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"

#line 513 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
#line 514 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
#line 515 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"

typedef union __declspec(intrin_type) __declspec(align(16)) __m128i {
    __int8              m128i_i8[16];
    __int16             m128i_i16[8];
    __int32             m128i_i32[4];
    __int64             m128i_i64[2];
    unsigned __int8     m128i_u8[16];
    unsigned __int16    m128i_u16[8];
    unsigned __int32    m128i_u32[4];
    unsigned __int64    m128i_u64[2];
} __m128i;

typedef struct __declspec(intrin_type) __declspec(align(16)) __m128d {
    double              m128d_f64[2];
} __m128d;






 
 
 


extern "C" { 
  
#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"





extern __m128d _mm_add_sd(__m128d _A, __m128d _B);
extern __m128d _mm_add_pd(__m128d _A, __m128d _B);
extern __m128d _mm_sub_sd(__m128d _A, __m128d _B);
extern __m128d _mm_sub_pd(__m128d _A, __m128d _B);
extern __m128d _mm_mul_sd(__m128d _A, __m128d _B);
extern __m128d _mm_mul_pd(__m128d _A, __m128d _B);
extern __m128d _mm_sqrt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_sqrt_pd(__m128d _A);
extern __m128d _mm_div_sd(__m128d _A, __m128d _B);
extern __m128d _mm_div_pd(__m128d _A, __m128d _B);
extern __m128d _mm_min_sd(__m128d _A, __m128d _B);
extern __m128d _mm_min_pd(__m128d _A, __m128d _B);
extern __m128d _mm_max_sd(__m128d _A, __m128d _B);
extern __m128d _mm_max_pd(__m128d _A, __m128d _B);





extern __m128d _mm_and_pd(__m128d _A, __m128d _B);
extern __m128d _mm_andnot_pd(__m128d _A, __m128d _B);
extern __m128d _mm_or_pd(__m128d _A, __m128d _B);
extern __m128d _mm_xor_pd(__m128d _A, __m128d _B);





extern __m128d _mm_cmpeq_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpeq_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmplt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmplt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmple_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmple_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpgt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpgt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpge_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpge_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpneq_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpneq_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnlt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnlt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnle_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnle_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpngt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpngt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnge_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnge_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpord_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpord_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpunord_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpunord_sd(__m128d _A, __m128d _B);
extern int _mm_comieq_sd(__m128d _A, __m128d _B);
extern int _mm_comilt_sd(__m128d _A, __m128d _B);
extern int _mm_comile_sd(__m128d _A, __m128d _B);
extern int _mm_comigt_sd(__m128d _A, __m128d _B);
extern int _mm_comige_sd(__m128d _A, __m128d _B);
extern int _mm_comineq_sd(__m128d _A, __m128d _B);
extern int _mm_ucomieq_sd(__m128d _A, __m128d _B);
extern int _mm_ucomilt_sd(__m128d _A, __m128d _B);
extern int _mm_ucomile_sd(__m128d _A, __m128d _B);
extern int _mm_ucomigt_sd(__m128d _A, __m128d _B);
extern int _mm_ucomige_sd(__m128d _A, __m128d _B);
extern int _mm_ucomineq_sd(__m128d _A, __m128d _B);





extern __m128d _mm_cvtepi32_pd(__m128i _A);
extern __m128i _mm_cvtpd_epi32(__m128d _A);
extern __m128i _mm_cvttpd_epi32(__m128d _A);
extern __m128 _mm_cvtepi32_ps(__m128i _A);
extern __m128i _mm_cvtps_epi32(__m128 _A);
extern __m128i _mm_cvttps_epi32(__m128 _A);
extern __m128 _mm_cvtpd_ps(__m128d _A);
extern __m128d _mm_cvtps_pd(__m128 _A);
extern __m128 _mm_cvtsd_ss(__m128 _A, __m128d _B);
extern __m128d _mm_cvtss_sd(__m128d _A, __m128 _B);

extern int _mm_cvtsd_si32(__m128d _A);
extern int _mm_cvttsd_si32(__m128d _A);
extern __m128d _mm_cvtsi32_sd(__m128d _A, int _B);





#line 166 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"





extern __m128d _mm_unpackhi_pd(__m128d _A, __m128d _B);
extern __m128d _mm_unpacklo_pd(__m128d _A, __m128d _B);
extern int _mm_movemask_pd(__m128d _A);
extern __m128d _mm_shuffle_pd(__m128d _A, __m128d _B, int _I);





extern __m128d _mm_load_pd(double const*_Dp);
extern __m128d _mm_load1_pd(double const*_Dp);
extern __m128d _mm_loadr_pd(double const*_Dp);
extern __m128d _mm_loadu_pd(double const*_Dp);
extern __m128d _mm_load_sd(double const*_Dp);
extern __m128d _mm_loadh_pd(__m128d _A, double const*_Dp);
extern __m128d _mm_loadl_pd(__m128d _A, double const*_Dp);





extern __m128d _mm_set_sd(double _W);
extern __m128d _mm_set1_pd(double _A);
extern __m128d _mm_set_pd(double _Z, double _Y);
extern __m128d _mm_setr_pd(double _Y, double _Z);
extern __m128d _mm_setzero_pd(void);
extern __m128d _mm_move_sd(__m128d _A, __m128d _B);





extern void _mm_store_sd(double *_Dp, __m128d _A);
extern void _mm_store1_pd(double *_Dp, __m128d _A);
extern void _mm_store_pd(double *_Dp, __m128d _A);
extern void _mm_storeu_pd(double *_Dp, __m128d _A);
extern void _mm_storer_pd(double *_Dp, __m128d _A);
extern void _mm_storeh_pd(double *_Dp, __m128d _A);
extern void _mm_storel_pd(double *_Dp, __m128d _A);





extern __m128i _mm_add_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_add_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_add_epi32(__m128i _A, __m128i _B);


#line 221 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_add_epi64(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epu16(__m128i _A, __m128i _B);
extern __m128i _mm_avg_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_avg_epu16(__m128i _A, __m128i _B);
extern __m128i _mm_madd_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_max_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_max_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_min_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_min_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_mulhi_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_mulhi_epu16(__m128i _A, __m128i _B);
extern __m128i _mm_mullo_epi16(__m128i _A, __m128i _B);


#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_mul_epu32(__m128i _A, __m128i _B);
extern __m128i _mm_sad_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_sub_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_sub_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_sub_epi32(__m128i _A, __m128i _B);


#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_sub_epi64(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epu16(__m128i _A, __m128i _B);





extern __m128i _mm_and_si128(__m128i _A, __m128i _B);
extern __m128i _mm_andnot_si128(__m128i _A, __m128i _B);
extern __m128i _mm_or_si128(__m128i _A, __m128i _B);
extern __m128i _mm_xor_si128(__m128i _A, __m128i _B);





extern __m128i _mm_slli_si128(__m128i _A, int _Imm);
extern __m128i _mm_slli_epi16(__m128i _A, int _Count);
extern __m128i _mm_sll_epi16(__m128i _A, __m128i _Count);
extern __m128i _mm_slli_epi32(__m128i _A, int _Count);
extern __m128i _mm_sll_epi32(__m128i _A, __m128i _Count);
extern __m128i _mm_slli_epi64(__m128i _A, int _Count);
extern __m128i _mm_sll_epi64(__m128i _A, __m128i _Count);
extern __m128i _mm_srai_epi16(__m128i _A, int _Count);
extern __m128i _mm_sra_epi16(__m128i _A, __m128i _Count);
extern __m128i _mm_srai_epi32(__m128i _A, int _Count);
extern __m128i _mm_sra_epi32(__m128i _A, __m128i _Count);
extern __m128i _mm_srli_si128(__m128i _A, int _Imm);
extern __m128i _mm_srli_epi16(__m128i _A, int _Count);
extern __m128i _mm_srl_epi16(__m128i _A, __m128i _Count);
extern __m128i _mm_srli_epi32(__m128i _A, int _Count);
extern __m128i _mm_srl_epi32(__m128i _A, __m128i _Count);
extern __m128i _mm_srli_epi64(__m128i _A, int _Count);
extern __m128i _mm_srl_epi64(__m128i _A, __m128i _Count);





extern __m128i _mm_cmpeq_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_cmpeq_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_cmpeq_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_cmpgt_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_cmpgt_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_cmpgt_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_cmplt_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_cmplt_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_cmplt_epi32(__m128i _A, __m128i _B);





extern __m128i _mm_cvtsi32_si128(int _A);
extern int _mm_cvtsi128_si32(__m128i _A);





extern __m128i _mm_packs_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_packs_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_packus_epi16(__m128i _A, __m128i _B);
extern int _mm_extract_epi16(__m128i _A, int _Imm);
extern __m128i _mm_insert_epi16(__m128i _A, int _B, int _Imm);
extern int _mm_movemask_epi8(__m128i _A);
extern __m128i _mm_shuffle_epi32(__m128i _A, int _Imm);
extern __m128i _mm_shufflehi_epi16(__m128i _A, int _Imm);
extern __m128i _mm_shufflelo_epi16(__m128i _A, int _Imm);
extern __m128i _mm_unpackhi_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_unpackhi_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_unpackhi_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_unpackhi_epi64(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi64(__m128i _A, __m128i _B);





extern __m128i _mm_load_si128(__m128i const*_P);
extern __m128i _mm_loadu_si128(__m128i const*_P);
extern __m128i _mm_loadl_epi64(__m128i const*_P);







#line 343 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_set_epi64x(__int64 _I1,__int64 _I0);
extern __m128i _mm_set_epi32(int _I3, int _I2, int _I1, int _I0);
extern __m128i _mm_set_epi16(short _W7, short _W6, short _W5, short _W4,
                             short _W3, short _W2, short _W1, short _W0);
extern __m128i _mm_set_epi8(char _B15, char _B14, char _B13, char _B12,
                            char _B11, char _B10, char _B9, char _B8,
                            char _B7, char _B6, char _B5, char _B4,
                            char _B3, char _B2, char _B1, char _B0);


#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_set1_epi64x(__int64 i);
extern __m128i _mm_set1_epi32(int _I);
extern __m128i _mm_set1_epi16(short _W);
extern __m128i _mm_set1_epi8(char _B);
extern __m128i _mm_setl_epi64(__m128i _Q);


#line 362 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_setr_epi32(int _I0, int _I1, int _I2, int _I3);
extern __m128i _mm_setr_epi16(short _W0, short _W1, short _W2, short _W3,
                              short _W4, short _W5, short _W6, short _W7);
extern __m128i _mm_setr_epi8(char _B15, char _B14, char _B13, char _B12,
                             char _B11, char _B10, char _B9, char _B8,
                             char _B7, char _B6, char _B5, char _B4,
                             char _B3, char _B2, char _B1, char _B0);
extern __m128i _mm_setzero_si128(void);





extern void _mm_store_si128(__m128i *_P, __m128i _B);
extern void _mm_storeu_si128(__m128i *_P, __m128i _B);
extern void _mm_storel_epi64(__m128i *_P, __m128i _Q);
extern void _mm_maskmoveu_si128(__m128i _D, __m128i _N, char *_P);





extern __m128i _mm_move_epi64(__m128i _Q);



#line 389 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"





extern void _mm_stream_pd(double *_Dp, __m128d _A);
extern void _mm_stream_si128(__m128i *_P, __m128i _A);
extern void _mm_clflush(void const*_P);
extern void _mm_lfence(void);
extern void _mm_mfence(void);
extern void _mm_stream_si32(int *_P, int _I);
extern void _mm_pause(void);





extern double _mm_cvtsd_f64(__m128d _A);







extern __m128  _mm_castpd_ps(__m128d);
extern __m128i _mm_castpd_si128(__m128d);
extern __m128d _mm_castps_pd(__m128);
extern __m128i _mm_castps_si128(__m128);
extern __m128  _mm_castsi128_ps(__m128i);
extern __m128d _mm_castsi128_pd(__m128i);






extern __int64 _mm_cvtsd_si64(__m128d);
extern __int64 _mm_cvttsd_si64(__m128d);
extern __m128d _mm_cvtsi64_sd(__m128d, __int64);
extern __m128i _mm_cvtsi64_si128(__int64);
extern __int64 _mm_cvtsi128_si64(__m128i);


#line 434 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"


}; 
#line 438 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"

#line 440 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
#line 441 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
#line 442 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"

 
 
 














 
 
 


extern "C" { 
  
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"





extern __m128 _mm_addsub_ps(__m128 , __m128 );
extern __m128 _mm_hadd_ps(__m128 , __m128 );
extern __m128 _mm_hsub_ps(__m128 , __m128 );
extern __m128 _mm_movehdup_ps(__m128 );
extern __m128 _mm_moveldup_ps(__m128 );





extern __m128d _mm_addsub_pd(__m128d , __m128d );
extern __m128d _mm_hadd_pd(__m128d , __m128d );
extern __m128d _mm_hsub_pd(__m128d , __m128d );
extern __m128d _mm_loaddup_pd(double const * );
extern __m128d _mm_movedup_pd(__m128d );




extern __m128i _mm_lddqu_si128(__m128i const * );







extern void _mm_monitor(void const * , unsigned , unsigned );




extern void _mm_mwait(unsigned , unsigned );


}; 
#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"

#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"
#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"
#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"









extern "C" {
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"

    
    
    
    
    
    

    extern __m128i _mm_hadd_epi16 (__m128i, __m128i);
    extern __m128i _mm_hadd_epi32 (__m128i, __m128i);
    extern __m128i _mm_hadds_epi16 (__m128i, __m128i);





#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"

    
    
    
    
    
    
    

    extern __m128i _mm_hsub_epi16 (__m128i, __m128i);
    extern __m128i _mm_hsub_epi32 (__m128i, __m128i);
    extern __m128i _mm_hsubs_epi16 (__m128i, __m128i);





#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"

    
    
    
    
    
    
    
    

    extern __m128i _mm_maddubs_epi16 (__m128i, __m128i);



#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"

    
    

    extern __m128i _mm_mulhrs_epi16 (__m128i, __m128i);



#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"

    
    

    extern __m128i _mm_shuffle_epi8 (__m128i, __m128i);



#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"

    
    

    extern __m128i _mm_sign_epi8 (__m128i, __m128i);
    extern __m128i _mm_sign_epi16 (__m128i, __m128i);
    extern __m128i _mm_sign_epi32 (__m128i, __m128i);





#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"

    
    

    extern __m128i _mm_alignr_epi8 (__m128i, __m128i, int);



#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"

    
    

    extern __m128i _mm_abs_epi8 (__m128i);
    extern __m128i _mm_abs_epi16 (__m128i);
    extern __m128i _mm_abs_epi32 (__m128i);





#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"


};
#line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"

#line 146 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
#line 147 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
#line 148 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"


















































extern "C" {
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"

        
        

        extern __m128i _mm_blend_epi16 (__m128i, __m128i, const int );
        extern __m128i _mm_blendv_epi8 (__m128i, __m128i, __m128i mask);

        
        

        extern __m128  _mm_blend_ps (__m128, __m128, const int );
        extern __m128  _mm_blendv_ps(__m128, __m128, __m128 );

        
        

        extern __m128d _mm_blend_pd (__m128d, __m128d, const int );
        extern __m128d _mm_blendv_pd(__m128d, __m128d, __m128d );

        
        

        extern __m128  _mm_dp_ps(__m128, __m128, const int );
        extern __m128d _mm_dp_pd(__m128d, __m128d, const int );

        
        

        extern __m128i _mm_cmpeq_epi64(__m128i, __m128i);

        

        extern __m128i _mm_min_epi8 (__m128i, __m128i);
        extern __m128i _mm_max_epi8 (__m128i, __m128i);

        extern __m128i _mm_min_epu16(__m128i, __m128i);
        extern __m128i _mm_max_epu16(__m128i, __m128i);

        extern __m128i _mm_min_epi32(__m128i, __m128i);
        extern __m128i _mm_max_epi32(__m128i, __m128i);
        extern __m128i _mm_min_epu32(__m128i, __m128i);
        extern __m128i _mm_max_epu32(__m128i, __m128i);

        
        

        extern __m128i _mm_mullo_epi32(__m128i, __m128i);

        
        

        extern __m128i _mm_mul_epi32(__m128i, __m128i);

        
        

        extern int _mm_testz_si128(__m128i , __m128i );

        
        

        extern int _mm_testc_si128(__m128i , __m128i );

        
        
        

        extern int _mm_testnzc_si128(__m128i , __m128i );

        
        
        
        
        

        extern __m128 _mm_insert_ps(__m128 , __m128 , const int );

        




        
        

        extern int _mm_extract_ps(__m128 , const int );

        
        




        
        





        
        

        extern __m128i _mm_insert_epi8 (__m128i , int , const int );
        extern __m128i _mm_insert_epi32(__m128i , int , const int );


        extern __m128i _mm_insert_epi64(__m128i , __int64 , const int );
#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
        
        

        extern int   _mm_extract_epi8 (__m128i , const int );
        extern int   _mm_extract_epi32(__m128i , const int );


        extern __int64 _mm_extract_epi64(__m128i , const int );
#line 203 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"

        
        

        extern __m128i _mm_minpos_epu16(__m128i);

        

        extern __m128d _mm_round_pd(__m128d , int );
        extern __m128d _mm_round_sd(__m128d , __m128d , int );

        

        extern __m128  _mm_round_ps(__m128  , int );
        extern __m128  _mm_round_ss(__m128 , __m128  , int );

        

        extern __m128i _mm_cvtepi8_epi32 (__m128i);
        extern __m128i _mm_cvtepi16_epi32(__m128i);
        extern __m128i _mm_cvtepi8_epi64 (__m128i);
        extern __m128i _mm_cvtepi32_epi64(__m128i);
        extern __m128i _mm_cvtepi16_epi64(__m128i);
        extern __m128i _mm_cvtepi8_epi16 (__m128i);

        

        extern __m128i _mm_cvtepu8_epi32 (__m128i);
        extern __m128i _mm_cvtepu16_epi32(__m128i);
        extern __m128i _mm_cvtepu8_epi64 (__m128i);
        extern __m128i _mm_cvtepu32_epi64(__m128i);
        extern __m128i _mm_cvtepu16_epi64(__m128i);
        extern __m128i _mm_cvtepu8_epi16 (__m128i);


        
        

        extern __m128i _mm_packus_epi32(__m128i, __m128i);

        
        
        

        extern __m128i _mm_mpsadbw_epu8(__m128i , __m128i , const int );

        



        extern __m128i _mm_stream_load_si128(const __m128i*);


}; 
#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"

#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"



extern "C" {
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"













































    extern __m128i _mm_cmpistrm (__m128i , __m128i , const int );
    extern int     _mm_cmpistri (__m128i , __m128i , const int );

    extern __m128i _mm_cmpestrm (__m128i , int , __m128i , int , const int );
    extern int     _mm_cmpestri (__m128i , int , __m128i , int , const int );





    extern int     _mm_cmpistrz (__m128i , __m128i , const int );
    extern int     _mm_cmpistrc (__m128i , __m128i , const int );
    extern int     _mm_cmpistrs (__m128i , __m128i , const int );
    extern int     _mm_cmpistro (__m128i , __m128i , const int );
    extern int     _mm_cmpistra (__m128i , __m128i , const int );

    extern int     _mm_cmpestrz (__m128i , int , __m128i , int , const int );
    extern int     _mm_cmpestrc (__m128i , int , __m128i , int , const int );
    extern int     _mm_cmpestrs (__m128i , int , __m128i , int , const int );
    extern int     _mm_cmpestro (__m128i , int , __m128i , int , const int );
    extern int     _mm_cmpestra (__m128i , int , __m128i , int , const int );






    extern __m128i _mm_cmpgt_epi64(__m128i , __m128i );





    extern int _mm_popcnt_u32(unsigned int );


    extern __int64 _mm_popcnt_u64(unsigned __int64 );
#line 121 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"





    extern unsigned int _mm_crc32_u8 (unsigned int , unsigned char );
    extern unsigned int _mm_crc32_u16(unsigned int , unsigned short );
    extern unsigned int _mm_crc32_u32(unsigned int , unsigned int );


    extern unsigned __int64 _mm_crc32_u64(unsigned __int64 , unsigned __int64 );
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"


}; 
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"

#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\wmmintrin.h"



extern "C" {
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\wmmintrin.h"





extern __m128i _mm_aesdec_si128(__m128i , __m128i );





extern __m128i _mm_aesdeclast_si128(__m128i , __m128i );





extern __m128i _mm_aesenc_si128(__m128i , __m128i );





extern __m128i _mm_aesenclast_si128(__m128i , __m128i );





extern __m128i _mm_aesimc_si128(__m128i );






extern __m128i _mm_aeskeygenassist_si128(__m128i , const int );







extern __m128i _mm_clmulepi64_si128(__m128i , __m128i ,
                                            const int );



}; 
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\wmmintrin.h"

#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\wmmintrin.h"
#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\wmmintrin.h"
#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\wmmintrin.h"
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"


extern "C" {
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"




typedef union __declspec(intrin_type) __declspec(align(32)) __m256 {
    float m256_f32[8];
} __m256;

typedef struct __declspec(intrin_type) __declspec(align(32)) __m256d {
    double m256d_f64[4];
} __m256d;

typedef union  __declspec(intrin_type) __declspec(align(32)) __m256i {
    __int8              m256i_i8[32];
    __int16             m256i_i16[16];
    __int32             m256i_i32[8];
    __int64             m256i_i64[4];
    unsigned __int8     m256i_u8[32];
    unsigned __int16    m256i_u16[16];
    unsigned __int32    m256i_u32[8];
    unsigned __int64    m256i_u64[4];
} __m256i;



















































extern __m256d __cdecl _mm256_add_pd(__m256d, __m256d);









extern __m256 __cdecl _mm256_add_ps(__m256, __m256);












extern __m256d __cdecl _mm256_addsub_pd(__m256d, __m256d);












extern __m256 __cdecl _mm256_addsub_ps(__m256, __m256);








extern __m256d __cdecl _mm256_and_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_and_ps(__m256, __m256);








extern __m256d __cdecl _mm256_andnot_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_andnot_ps(__m256, __m256);













extern __m256d __cdecl _mm256_blend_pd(__m256d, __m256d, const int);













extern __m256 __cdecl _mm256_blend_ps(__m256, __m256, const int);









extern __m256d __cdecl _mm256_blendv_pd(__m256d, __m256d, __m256d);









extern __m256 __cdecl _mm256_blendv_ps(__m256, __m256, __m256);








extern __m256d __cdecl _mm256_div_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_div_ps(__m256, __m256);














extern __m256 __cdecl _mm256_dp_ps(__m256, __m256, const int);








extern __m256d __cdecl _mm256_hadd_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_hadd_ps(__m256, __m256);








extern __m256d __cdecl _mm256_hsub_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_hsub_ps(__m256, __m256);








extern __m256d __cdecl _mm256_max_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_max_ps(__m256, __m256);








extern __m256d __cdecl _mm256_min_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_min_ps(__m256, __m256);









extern __m256d __cdecl _mm256_mul_pd(__m256d, __m256d);









extern __m256 __cdecl _mm256_mul_ps(__m256, __m256);








extern __m256d __cdecl _mm256_or_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_or_ps(__m256, __m256);











extern __m256d __cdecl _mm256_shuffle_pd(__m256d, __m256d, const int);












extern __m256 __cdecl _mm256_shuffle_ps(__m256, __m256, const int);








extern __m256d __cdecl _mm256_sub_pd(__m256d, __m256d);









extern __m256 __cdecl _mm256_sub_ps(__m256, __m256);








extern __m256d __cdecl _mm256_xor_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_xor_ps(__m256, __m256);















extern __m128d __cdecl _mm_cmp_pd(__m128d, __m128d, const int);
extern __m256d __cdecl _mm256_cmp_pd(__m256d, __m256d, const int);















extern __m128 __cdecl _mm_cmp_ps(__m128, __m128, const int);
extern __m256 __cdecl _mm256_cmp_ps(__m256, __m256, const int);












extern __m128d __cdecl _mm_cmp_sd(__m128d, __m128d, const int);





extern int __cdecl _mm_comi_sd(__m128d, __m128d, const int);












extern __m128 __cdecl _mm_cmp_ss(__m128, __m128, const int);





extern int __cdecl _mm_comi_ss(__m128, __m128, const int);








extern __m256d __cdecl _mm256_cvtepi32_pd(__m128i);








extern __m256  __cdecl _mm256_cvtepi32_ps(__m256i);









extern __m128  __cdecl _mm256_cvtpd_ps(__m256d);








extern __m256i __cdecl _mm256_cvtps_epi32(__m256);









extern __m256d __cdecl _mm256_cvtps_pd(__m128);












extern __m128i __cdecl _mm256_cvttpd_epi32(__m256d);








extern __m128i __cdecl _mm256_cvtpd_epi32(__m256d);












extern __m256i __cdecl _mm256_cvttps_epi32(__m256);







extern __m128  __cdecl _mm256_extractf128_ps(__m256, const int);
extern __m128d __cdecl _mm256_extractf128_pd(__m256d, const int);
extern __m128i __cdecl _mm256_extractf128_si256(__m256i, const int);






extern void __cdecl _mm256_zeroall(void);







extern void __cdecl _mm256_zeroupper(void);









extern __m256  __cdecl _mm256_permutevar_ps(__m256, __m256i);
extern __m128  __cdecl _mm_permutevar_ps(__m128, __m128i);









extern __m256  __cdecl _mm256_permute_ps(__m256, int);
extern __m128  __cdecl _mm_permute_ps(__m128, int);









extern __m256d __cdecl _mm256_permutevar_pd(__m256d, __m256i);
extern __m128d __cdecl _mm_permutevar_pd(__m128d, __m128i);









extern __m256d __cdecl _mm256_permute_pd(__m256d, int);
extern __m128d __cdecl _mm_permute_pd(__m128d, int);








extern __m256  __cdecl _mm256_permute2f128_ps(__m256, __m256, int);
extern __m256d __cdecl _mm256_permute2f128_pd(__m256d, __m256d, int);
extern __m256i __cdecl _mm256_permute2f128_si256(__m256i, __m256i, int);








extern __m256  __cdecl _mm256_broadcast_ss(float const *);
extern __m128  __cdecl _mm_broadcast_ss(float const *);







extern __m256d __cdecl _mm256_broadcast_sd(double const *);







extern __m256  __cdecl _mm256_broadcast_ps(__m128 const *);
extern __m256d __cdecl _mm256_broadcast_pd(__m128d const *);









extern __m256  __cdecl _mm256_insertf128_ps(__m256, __m128, int);
extern __m256d __cdecl _mm256_insertf128_pd(__m256d, __m128d, int);
extern __m256i __cdecl _mm256_insertf128_si256(__m256i, __m128i, int);








extern __m256d __cdecl _mm256_load_pd(double const *);
extern void    __cdecl _mm256_store_pd(double *, __m256d);








extern __m256  __cdecl _mm256_load_ps(float const *);
extern void    __cdecl _mm256_store_ps(float *, __m256);








extern __m256d __cdecl _mm256_loadu_pd(double const *);
extern void    __cdecl _mm256_storeu_pd(double *, __m256d);








extern __m256  __cdecl _mm256_loadu_ps(float const *);
extern void    __cdecl _mm256_storeu_ps(float *, __m256);








extern __m256i __cdecl _mm256_load_si256(__m256i const *);
extern void    __cdecl _mm256_store_si256(__m256i *, __m256i);








extern __m256i __cdecl _mm256_loadu_si256(__m256i const *);
extern void    __cdecl _mm256_storeu_si256(__m256i *, __m256i);







































































extern __m256d __cdecl _mm256_maskload_pd(double const *, __m256i);
extern void    __cdecl _mm256_maskstore_pd(double *, __m256i, __m256d);
extern __m128d __cdecl _mm_maskload_pd(double const *, __m128i);
extern void    __cdecl _mm_maskstore_pd(double *, __m128i, __m128d);



















extern __m256  __cdecl _mm256_maskload_ps(float const *, __m256i);
extern void    __cdecl _mm256_maskstore_ps(float *, __m256i, __m256);
extern __m128  __cdecl _mm_maskload_ps(float const *, __m128i);
extern void    __cdecl _mm_maskstore_ps(float *, __m128i, __m128);







extern __m256  __cdecl _mm256_movehdup_ps(__m256);







extern __m256  __cdecl _mm256_moveldup_ps(__m256);







extern __m256d __cdecl _mm256_movedup_pd(__m256d);









extern __m256i __cdecl _mm256_lddqu_si256(__m256i const *);







extern void    __cdecl _mm256_stream_si256(__m256i *, __m256i);








extern void    __cdecl _mm256_stream_pd(double *, __m256d);








extern void    __cdecl _mm256_stream_ps(float *, __m256);









extern __m256  __cdecl _mm256_rcp_ps(__m256);










extern __m256  __cdecl _mm256_rsqrt_ps(__m256);








extern __m256d __cdecl _mm256_sqrt_pd(__m256d);








extern __m256  __cdecl _mm256_sqrt_ps(__m256);












extern __m256d __cdecl _mm256_round_pd(__m256d, int);














extern __m256  __cdecl _mm256_round_ps(__m256, int);









extern __m256d __cdecl _mm256_unpackhi_pd(__m256d, __m256d);







extern __m256  __cdecl _mm256_unpackhi_ps(__m256, __m256);







extern __m256d __cdecl _mm256_unpacklo_pd(__m256d, __m256d);







extern __m256  __cdecl _mm256_unpacklo_ps(__m256, __m256);









extern int     __cdecl _mm256_testz_si256(__m256i, __m256i);



extern int     __cdecl _mm256_testc_si256(__m256i, __m256i);



extern int     __cdecl _mm256_testnzc_si256(__m256i, __m256i);














extern int     __cdecl _mm256_testz_pd(__m256d, __m256d);
extern int     __cdecl _mm256_testc_pd(__m256d, __m256d);
extern int     __cdecl _mm256_testnzc_pd(__m256d, __m256d);
extern int     __cdecl _mm_testz_pd(__m128d, __m128d);
extern int     __cdecl _mm_testc_pd(__m128d, __m128d);
extern int     __cdecl _mm_testnzc_pd(__m128d, __m128d);












extern int     __cdecl _mm256_testz_ps(__m256, __m256);
extern int     __cdecl _mm256_testc_ps(__m256, __m256);
extern int     __cdecl _mm256_testnzc_ps(__m256, __m256);
extern int     __cdecl _mm_testz_ps(__m128, __m128);
extern int     __cdecl _mm_testc_ps(__m128, __m128);
extern int     __cdecl _mm_testnzc_ps(__m128, __m128);








extern int     __cdecl _mm256_movemask_pd(__m256d);








extern int     __cdecl _mm256_movemask_ps(__m256);




extern __m256d __cdecl _mm256_setzero_pd(void);
extern __m256  __cdecl _mm256_setzero_ps(void);
extern __m256i __cdecl _mm256_setzero_si256(void);




extern __m256d __cdecl _mm256_set_pd(double, double, double, double);
extern __m256  __cdecl _mm256_set_ps(float, float, float, float,
                                            float, float, float, float);
extern __m256i __cdecl _mm256_set_epi8(char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char);
extern __m256i __cdecl _mm256_set_epi16(short, short, short, short,
                                               short, short, short, short,
                                               short, short, short, short,
                                               short, short, short, short);
extern __m256i __cdecl _mm256_set_epi32(int, int, int, int,
                                               int, int, int, int);
extern __m256i __cdecl _mm256_set_epi64x(__int64, __int64,
                                                __int64, __int64);










extern __m256d __cdecl _mm256_setr_pd(double, double, double, double);
extern __m256  __cdecl _mm256_setr_ps(float, float, float, float,
                                             float, float, float, float);
extern __m256i __cdecl _mm256_setr_epi8(char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char);
extern __m256i __cdecl _mm256_setr_epi16(short, short, short, short,
                                                short, short, short, short,
                                                short, short, short, short,
                                                short, short, short, short);
extern __m256i __cdecl _mm256_setr_epi32(int, int, int, int,
                                                int, int, int, int);
extern __m256i __cdecl _mm256_setr_epi64x(__int64, __int64,
                                                 __int64, __int64);







extern __m256d __cdecl _mm256_set1_pd(double);
extern __m256  __cdecl _mm256_set1_ps(float);
extern __m256i __cdecl _mm256_set1_epi8(char);
extern __m256i __cdecl _mm256_set1_epi16(short);
extern __m256i __cdecl _mm256_set1_epi32(int);
extern __m256i __cdecl _mm256_set1_epi64x(long long);







extern __m256  __cdecl _mm256_castpd_ps(__m256d);
extern __m256d __cdecl _mm256_castps_pd(__m256);
extern __m256i __cdecl _mm256_castps_si256(__m256);
extern __m256i __cdecl _mm256_castpd_si256(__m256d);
extern __m256  __cdecl _mm256_castsi256_ps(__m256i);
extern __m256d __cdecl _mm256_castsi256_pd(__m256i);
extern __m128  __cdecl _mm256_castps256_ps128(__m256);
extern __m128d __cdecl _mm256_castpd256_pd128(__m256d);
extern __m128i __cdecl _mm256_castsi256_si128(__m256i);
extern __m256  __cdecl _mm256_castps128_ps256(__m128);
extern __m256d __cdecl _mm256_castpd128_pd256(__m128d);
extern __m256i __cdecl _mm256_castsi128_si256(__m128i);






extern __m128  __cdecl _mm_cvtph_ps(__m128i);
extern __m256  __cdecl _mm256_cvtph_ps(__m128i);
extern __m128i __cdecl _mm_cvtps_ph(__m128 , const int );
extern __m128i __cdecl _mm256_cvtps_ph(__m256, int);




















extern unsigned __int64 __cdecl _xgetbv(unsigned int);


extern void __cdecl _xsetbv(unsigned int, unsigned __int64);






extern void __cdecl _xsave(void *, unsigned __int64);

extern void __cdecl _xsave64(void *, unsigned __int64);
#line 1233 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"






extern void __cdecl _xsaveopt(void *, unsigned __int64);

extern void __cdecl _xsaveopt64(void *, unsigned __int64);
#line 1243 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"





extern void __cdecl _xsavec(void *, unsigned __int64);

extern void __cdecl _xsavec64(void *, unsigned __int64);
#line 1252 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"






extern void __cdecl _xrstor(void const *, unsigned __int64);

extern void __cdecl _xrstor64(void const *, unsigned __int64);
#line 1262 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"






extern void __cdecl _xsaves(void *, unsigned __int64);

extern void __cdecl _xsaves64(void *, unsigned __int64);
#line 1272 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"






extern void __cdecl _xrstors(void const *, unsigned __int64);

extern void __cdecl _xrstors64(void const *, unsigned __int64);
#line 1282 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"





extern void __cdecl _fxsave(void *);

extern void __cdecl _fxsave64(void *);
#line 1291 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"





extern void __cdecl _fxrstor(void const *);

extern void __cdecl _fxrstor64(void const *);
#line 1300 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"







extern int __cdecl _rdrand16_step(unsigned short *);
extern int __cdecl _rdrand32_step(unsigned int *);

extern int __cdecl _rdrand64_step(unsigned __int64 *);
#line 1312 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"





extern unsigned int     __cdecl _readfsbase_u32();
extern unsigned int     __cdecl _readgsbase_u32();
extern unsigned __int64 __cdecl _readfsbase_u64();
extern unsigned __int64 __cdecl _readgsbase_u64();




extern void __cdecl _writefsbase_u32(unsigned int);
extern void __cdecl _writegsbase_u32(unsigned int);
extern void __cdecl _writefsbase_u64(unsigned __int64);
extern void __cdecl _writegsbase_u64(unsigned __int64);
#line 1330 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"




extern __m128  __cdecl _mm_fmadd_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmadd_pd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fmadd_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmadd_sd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fmsub_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmsub_pd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fmsub_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmsub_sd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fnmadd_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmadd_pd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fnmadd_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmadd_sd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fnmsub_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmsub_pd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fnmsub_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmsub_sd(__m128d, __m128d, __m128d);

extern __m256  __cdecl _mm256_fmadd_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmadd_pd(__m256d, __m256d, __m256d);
extern __m256  __cdecl _mm256_fmsub_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmsub_pd(__m256d, __m256d, __m256d);
extern __m256  __cdecl _mm256_fnmadd_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fnmadd_pd(__m256d, __m256d, __m256d);
extern __m256  __cdecl _mm256_fnmsub_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fnmsub_pd(__m256d, __m256d, __m256d);





extern __m128  __cdecl _mm_fmaddsub_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmaddsub_pd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fmsubadd_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmsubadd_pd(__m128d, __m128d, __m128d);

extern __m256  __cdecl _mm256_fmaddsub_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmaddsub_pd(__m256d, __m256d, __m256d);
extern __m256  __cdecl _mm256_fmsubadd_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmsubadd_pd(__m256d, __m256d, __m256d);





extern __m256i __cdecl _mm256_cmpeq_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpeq_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpeq_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpeq_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_cmpgt_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpgt_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpgt_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpgt_epi64(__m256i, __m256i);





extern __m256i __cdecl _mm256_max_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epu16(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epu32(__m256i, __m256i);

extern __m256i __cdecl _mm256_min_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epu16(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epu32(__m256i, __m256i);





extern __m256i __cdecl _mm256_and_si256(__m256i, __m256i);
extern __m256i __cdecl _mm256_andnot_si256(__m256i, __m256i);
extern __m256i __cdecl _mm256_or_si256(__m256i, __m256i);
extern __m256i __cdecl _mm256_xor_si256(__m256i, __m256i);





extern __m256i __cdecl _mm256_abs_epi8(__m256i);
extern __m256i __cdecl _mm256_abs_epi16(__m256i);
extern __m256i __cdecl _mm256_abs_epi32(__m256i);

extern __m256i __cdecl _mm256_add_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_add_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_add_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_add_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_adds_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_adds_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_adds_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_adds_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_sub_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_sub_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_sub_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_sub_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_subs_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_subs_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_subs_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_subs_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_avg_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_avg_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_hadd_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_hadd_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_hadds_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_hsub_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_hsub_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_hsubs_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_madd_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_maddubs_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_mulhi_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_mulhi_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_mullo_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_mullo_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_mul_epu32(__m256i, __m256i);
extern __m256i __cdecl _mm256_mul_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_sign_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_sign_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_sign_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_mulhrs_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_sad_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_mpsadbw_epu8(__m256i, __m256i, const int);





extern __m256i __cdecl _mm256_slli_si256(__m256i, const int);

extern __m256i __cdecl _mm256_srli_si256(__m256i, const int);


extern __m256i __cdecl _mm256_sll_epi16(__m256i, __m128i);
extern __m256i __cdecl _mm256_sll_epi32(__m256i, __m128i);
extern __m256i __cdecl _mm256_sll_epi64(__m256i, __m128i);

extern __m256i __cdecl _mm256_slli_epi16(__m256i, int);
extern __m256i __cdecl _mm256_slli_epi32(__m256i, int);
extern __m256i __cdecl _mm256_slli_epi64(__m256i, int);

extern __m256i __cdecl _mm256_sllv_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_sllv_epi64(__m256i, __m256i);

extern __m128i __cdecl _mm_sllv_epi32(__m128i, __m128i);
extern __m128i __cdecl _mm_sllv_epi64(__m128i, __m128i);

extern __m256i __cdecl _mm256_sra_epi16(__m256i, __m128i);
extern __m256i __cdecl _mm256_sra_epi32(__m256i, __m128i);

extern __m256i __cdecl _mm256_srai_epi16(__m256i, int);
extern __m256i __cdecl _mm256_srai_epi32(__m256i, int);

extern __m256i __cdecl _mm256_srav_epi32(__m256i, __m256i);

extern __m128i __cdecl _mm_srav_epi32(__m128i, __m128i);

extern __m256i __cdecl _mm256_srl_epi16(__m256i, __m128i);
extern __m256i __cdecl _mm256_srl_epi32(__m256i, __m128i);
extern __m256i __cdecl _mm256_srl_epi64(__m256i, __m128i);

extern __m256i __cdecl _mm256_srli_epi16(__m256i, int);
extern __m256i __cdecl _mm256_srli_epi32(__m256i, int);
extern __m256i __cdecl _mm256_srli_epi64(__m256i, int);

extern __m256i __cdecl _mm256_srlv_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_srlv_epi64(__m256i, __m256i);

extern __m128i __cdecl _mm_srlv_epi32(__m128i, __m128i);
extern __m128i __cdecl _mm_srlv_epi64(__m128i, __m128i);





extern __m128i __cdecl _mm_blend_epi32(__m128i, __m128i, const int);

extern __m256i __cdecl _mm256_blend_epi32(__m256i,__m256i, const int);

extern __m256i __cdecl _mm256_alignr_epi8(__m256i, __m256i, const int);

extern __m256i __cdecl _mm256_blendv_epi8(__m256i, __m256i, __m256i);
extern __m256i __cdecl _mm256_blend_epi16(__m256i, __m256i, const int);

extern __m256i __cdecl _mm256_packs_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_packs_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_packus_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_packus_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_unpackhi_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpackhi_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpackhi_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpackhi_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_unpacklo_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpacklo_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpacklo_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpacklo_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_shuffle_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_shuffle_epi32(__m256i, const int);

extern __m256i __cdecl _mm256_shufflehi_epi16(__m256i, const int);
extern __m256i __cdecl _mm256_shufflelo_epi16(__m256i, const int);

extern __m128i __cdecl _mm256_extracti128_si256(__m256i, const int);
extern __m256i __cdecl _mm256_inserti128_si256(__m256i, __m128i, const int);





extern __m128  __cdecl _mm_broadcastss_ps(__m128);
extern __m128d __cdecl _mm_broadcastsd_pd(__m128d);

extern __m128i __cdecl _mm_broadcastb_epi8(__m128i);
extern __m128i __cdecl _mm_broadcastw_epi16(__m128i);
extern __m128i __cdecl _mm_broadcastd_epi32(__m128i);
extern __m128i __cdecl _mm_broadcastq_epi64(__m128i);

extern __m256  __cdecl _mm256_broadcastss_ps(__m128);
extern __m256d __cdecl _mm256_broadcastsd_pd(__m128d);

extern __m256i __cdecl _mm256_broadcastb_epi8(__m128i);
extern __m256i __cdecl _mm256_broadcastw_epi16(__m128i);
extern __m256i __cdecl _mm256_broadcastd_epi32(__m128i);
extern __m256i __cdecl _mm256_broadcastq_epi64(__m128i);

extern __m256i __cdecl _mm256_broadcastsi128_si256(__m128i);






extern __m256i __cdecl _mm256_cvtepi8_epi16(__m128i);
extern __m256i __cdecl _mm256_cvtepi8_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepi8_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepi16_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepi16_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepi32_epi64(__m128i);

extern __m256i __cdecl _mm256_cvtepu8_epi16(__m128i);
extern __m256i __cdecl _mm256_cvtepu8_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepu8_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepu16_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepu16_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepu32_epi64(__m128i);






extern int __cdecl _mm256_movemask_epi8(__m256i);





extern __m128i __cdecl _mm_maskload_epi32(int const * ,
                                          __m128i     );
extern __m128i __cdecl _mm_maskload_epi64(__int64 const * ,
                                          __m128i         );

extern void __cdecl _mm_maskstore_epi32(int *   ,
                                        __m128i ,
                                        __m128i );
extern void __cdecl _mm_maskstore_epi64(__int64 * ,
                                        __m128i   ,
                                        __m128i   );

extern __m256i __cdecl _mm256_maskload_epi32(int const * ,
                                             __m256i     );
extern __m256i __cdecl _mm256_maskload_epi64(__int64 const * ,
                                             __m256i         );

extern void __cdecl _mm256_maskstore_epi32(int *   ,
                                           __m256i ,
                                           __m256i );
extern void __cdecl _mm256_maskstore_epi64(__int64 * ,
                                           __m256i   ,
                                           __m256i   );





extern __m256i __cdecl _mm256_permutevar8x32_epi32(__m256i, __m256i);
extern __m256  __cdecl _mm256_permutevar8x32_ps(__m256, __m256i);

extern __m256i __cdecl _mm256_permute4x64_epi64(__m256i, const int);
extern __m256d __cdecl _mm256_permute4x64_pd(__m256d, const int);

extern __m256i __cdecl _mm256_permute2x128_si256(__m256i, __m256i, const int);





extern __m256i  __cdecl _mm256_stream_load_si256(__m256i const *);






extern __m256d __cdecl _mm256_mask_i32gather_pd(__m256d        ,
                                                double const * ,
                                                __m128i        ,
                                                __m256d        ,
                                                const int      );
extern __m256  __cdecl _mm256_mask_i32gather_ps(__m256         ,
                                                float const *  ,
                                                __m256i        ,
                                                __m256         ,
                                                const int      );
extern __m256d __cdecl _mm256_mask_i64gather_pd(__m256d        ,
                                                double const * ,
                                                __m256i        ,
                                                __m256d        ,
                                                const int      );
extern __m128  __cdecl _mm256_mask_i64gather_ps(__m128         ,
                                                float const *  ,
                                                __m256i        ,
                                                __m128         ,
                                                const int      );

extern __m128d __cdecl _mm_mask_i32gather_pd(__m128d        ,
                                             double const * ,
                                             __m128i        ,
                                             __m128d        ,
                                             const int      );
extern __m128  __cdecl _mm_mask_i32gather_ps(__m128         ,
                                             float const *  ,
                                             __m128i        ,
                                             __m128         ,
                                             const int      );
extern __m128d __cdecl _mm_mask_i64gather_pd(__m128d        ,
                                             double const * ,
                                             __m128i        ,
                                             __m128d        ,
                                             const int      );
extern __m128  __cdecl _mm_mask_i64gather_ps(__m128         ,
                                             float const *  ,
                                             __m128i        ,
                                             __m128         ,
                                             const int      );


extern __m256i __cdecl _mm256_mask_i32gather_epi32(__m256i     ,
                                                   int const * ,
                                                   __m256i     ,
                                                   __m256i     ,
                                                   const int   );
extern __m256i __cdecl _mm256_mask_i32gather_epi64(__m256i     ,
                                                   __int64 const * ,
                                                   __m128i     ,
                                                   __m256i     ,
                                                   const int   );
extern __m128i __cdecl _mm256_mask_i64gather_epi32(__m128i     ,
                                                   int     const * ,
                                                   __m256i     ,
                                                   __m128i     ,
                                                   const int   );
extern __m256i __cdecl _mm256_mask_i64gather_epi64(__m256i     ,
                                                   __int64 const * ,
                                                   __m256i     ,
                                                   __m256i     ,
                                                   const int   );

extern __m128i __cdecl _mm_mask_i32gather_epi32(__m128i         ,
                                                int const *     ,
                                                __m128i         ,
                                                __m128i         ,
                                                const int       );
extern __m128i __cdecl _mm_mask_i32gather_epi64(__m128i         ,
                                                __int64 const * ,
                                                __m128i         ,
                                                __m128i         ,
                                                const int       );
extern __m128i __cdecl _mm_mask_i64gather_epi32(__m128i         ,
                                                int     const * ,
                                                __m128i         ,
                                                __m128i         ,
                                                const int       );
extern __m128i __cdecl _mm_mask_i64gather_epi64(__m128i         ,
                                                __int64 const * ,
                                                __m128i         ,
                                                __m128i         ,
                                                const int       );





extern __m256d __cdecl _mm256_i32gather_pd(double const * ,
                                           __m128i        ,
                                           const int      );
extern __m256  __cdecl _mm256_i32gather_ps(float  const * ,
                                           __m256i        ,
                                           const int      );
extern __m256d __cdecl _mm256_i64gather_pd(double const * ,
                                           __m256i        ,
                                           const int      );
extern __m128  __cdecl _mm256_i64gather_ps(float  const * ,
                                           __m256i        ,
                                           const int      );

extern __m128d __cdecl _mm_i32gather_pd(double const * ,
                                        __m128i        ,
                                        const int      );
extern __m128  __cdecl _mm_i32gather_ps(float  const * ,
                                        __m128i        ,
                                        const int      );
extern __m128d __cdecl _mm_i64gather_pd(double const * ,
                                        __m128i        ,
                                        const int      );
extern __m128  __cdecl _mm_i64gather_ps(float  const * ,
                                        __m128i        ,
                                        const int      );

extern __m256i __cdecl _mm256_i32gather_epi32(int const *     ,
                                              __m256i         ,
                                              const int       );
extern __m256i __cdecl _mm256_i32gather_epi64(__int64 const * ,
                                              __m128i         ,
                                              const int       );
extern __m128i __cdecl _mm256_i64gather_epi32(int const *     ,
                                              __m256i         ,
                                              const int       );
extern __m256i __cdecl _mm256_i64gather_epi64(__int64 const * ,
                                              __m256i         ,
                                              const int       );

extern __m128i __cdecl _mm_i32gather_epi32(int const *     ,
                                           __m128i         ,
                                           const int       );
extern __m128i __cdecl _mm_i32gather_epi64(__int64 const * ,
                                           __m128i         ,
                                           const int       );
extern __m128i __cdecl _mm_i64gather_epi32(int     const * ,
                                           __m128i         ,
                                           const int       );
extern __m128i __cdecl _mm_i64gather_epi64(__int64 const * ,
                                           __m128i         ,
                                           const int       );







extern unsigned int     _bextr_u32(unsigned int ,
                                   unsigned int ,
                                   unsigned int );
extern unsigned int     _blsi_u32(unsigned int);
extern unsigned int     _blsmsk_u32(unsigned int);
extern unsigned int     _blsr_u32(unsigned int);
extern unsigned int     _bzhi_u32(unsigned int ,
                                  unsigned int );
extern unsigned int     _mulx_u32(unsigned int ,
                                  unsigned int ,
                                  unsigned int * );
extern unsigned int     _pdep_u32(unsigned int ,
                                  unsigned int );
extern unsigned int     _pext_u32(unsigned int ,
                                  unsigned int );
extern unsigned int     _rorx_u32(unsigned int ,
                                  const unsigned int );
extern int              _sarx_i32(int ,
                                  unsigned int );
extern unsigned int     _shlx_u32(unsigned int ,
                                  unsigned int );
extern unsigned int     _shrx_u32(unsigned int ,
                                          unsigned int );


extern unsigned __int64 _bextr_u64(unsigned __int64 ,
                                   unsigned int ,
                                   unsigned int );
extern unsigned __int64 _blsi_u64(unsigned __int64);
extern unsigned __int64 _blsmsk_u64(unsigned __int64);
extern unsigned __int64 _blsr_u64(unsigned __int64);
extern unsigned __int64 _bzhi_u64(unsigned __int64 ,
                                  unsigned int );
extern unsigned __int64 _mulx_u64(unsigned __int64 ,
                                  unsigned __int64 ,
                                  unsigned __int64 * );
extern unsigned __int64 _pdep_u64(unsigned __int64 ,
                                  unsigned __int64 );
extern unsigned __int64 _pext_u64(unsigned __int64 ,
                                  unsigned __int64 );
extern unsigned __int64 _rorx_u64(unsigned __int64 ,
                                  const unsigned int );
extern __int64          _sarx_i64(__int64 ,
                                  unsigned int );
extern unsigned __int64 _shlx_u64(unsigned __int64 ,
                                  unsigned int );
extern unsigned __int64 _shrx_u64(unsigned __int64 ,
                                          unsigned int );
#line 1854 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"








extern unsigned int     _lzcnt_u32(unsigned int);

extern unsigned __int64 _lzcnt_u64(unsigned __int64);
#line 1866 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"








extern unsigned int     _tzcnt_u32(unsigned int);

extern unsigned __int64 _tzcnt_u64(unsigned __int64);
#line 1878 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"






extern void __cdecl _invpcid(unsigned int , void * );


extern void _Store_HLERelease(long volatile *,long);
extern void _StorePointer_HLERelease(void * volatile *,void *);

extern long _InterlockedExchange_HLEAcquire(long volatile *,long);
extern long _InterlockedExchange_HLERelease(long volatile *,long);
extern void * _InterlockedExchangePointer_HLEAcquire(void *volatile *,void *);
extern void * _InterlockedExchangePointer_HLERelease(void *volatile *,void *);

extern long _InterlockedCompareExchange_HLEAcquire(long volatile *,long,long);
extern long _InterlockedCompareExchange_HLERelease(long volatile *,long,long);
extern __int64 _InterlockedCompareExchange64_HLEAcquire(__int64 volatile *,__int64,__int64);
extern __int64 _InterlockedCompareExchange64_HLERelease(__int64 volatile *,__int64,__int64);
extern void * _InterlockedCompareExchangePointer_HLEAcquire(void *volatile *,void *,void *);
extern void * _InterlockedCompareExchangePointer_HLERelease(void *volatile *,void *,void *);

extern long _InterlockedExchangeAdd_HLEAcquire(long volatile *,long);
extern long _InterlockedExchangeAdd_HLERelease(long volatile *,long);

extern long _InterlockedAnd_HLEAcquire(long volatile *,long);
extern long _InterlockedAnd_HLERelease(long volatile *,long);
extern long _InterlockedOr_HLEAcquire(long volatile *,long);
extern long _InterlockedOr_HLERelease(long volatile *,long);
extern long _InterlockedXor_HLEAcquire(long volatile *,long);
extern long _InterlockedXor_HLERelease(long volatile *,long);

extern unsigned char _interlockedbittestandset_HLEAcquire(long *,long);
extern unsigned char _interlockedbittestandset_HLERelease(long *,long);
extern unsigned char _interlockedbittestandreset_HLEAcquire(long *,long);
extern unsigned char _interlockedbittestandreset_HLERelease(long *,long);


extern void _Store64_HLERelease(__int64 volatile *,__int64);
extern __int64 _InterlockedExchange64_HLEAcquire(__int64 volatile *,__int64);
extern __int64 _InterlockedExchange64_HLERelease(__int64 volatile *,__int64);

extern __int64 _InterlockedExchangeAdd64_HLEAcquire(__int64 volatile *,__int64);
extern __int64 _InterlockedExchangeAdd64_HLERelease(__int64 volatile *,__int64);

extern __int64 _InterlockedAnd64_HLEAcquire(__int64 volatile *,__int64);
extern __int64 _InterlockedAnd64_HLERelease(__int64 volatile *,__int64);
extern __int64 _InterlockedOr64_HLEAcquire(__int64 volatile *,__int64);
extern __int64 _InterlockedOr64_HLERelease(__int64 volatile *,__int64);
extern __int64 _InterlockedXor64_HLEAcquire(__int64 volatile *,__int64);
extern __int64 _InterlockedXor64_HLERelease(__int64 volatile *,__int64);

extern unsigned char _interlockedbittestandset64_HLEAcquire(__int64 *,__int64);
extern unsigned char _interlockedbittestandset64_HLERelease(__int64 *,__int64);
extern unsigned char _interlockedbittestandreset64_HLEAcquire(__int64 *,__int64);
extern unsigned char _interlockedbittestandreset64_HLERelease(__int64 *,__int64);
#line 1937 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"











extern unsigned int     __cdecl _xbegin(void);
extern void             __cdecl _xend(void);
extern void             __cdecl _xabort(const unsigned int);
extern unsigned char    __cdecl _xtest(void);








extern int __cdecl _rdseed16_step(unsigned short *);
extern int __cdecl _rdseed32_step(unsigned int *);

extern int __cdecl _rdseed64_step(unsigned __int64 *);
#line 1965 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"










extern unsigned char __cdecl _addcarryx_u32(unsigned char ,
                                                   unsigned int ,
                                                   unsigned int ,
                                                   unsigned int * );



extern unsigned char __cdecl _addcarryx_u64(unsigned char ,
                                                   unsigned __int64 ,
                                                   unsigned __int64 ,
                                                   unsigned __int64 * );
#line 1987 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"





extern unsigned short   __cdecl _load_be_u16(void const*);
extern unsigned int     __cdecl _load_be_u32(void const*);
extern unsigned __int64 __cdecl _load_be_u64(void const*);







extern void __cdecl _store_be_u16(void *, unsigned short);
extern void __cdecl _store_be_u32(void *, unsigned int);
extern void __cdecl _store_be_u64(void *, unsigned __int64);







extern __m128i __cdecl _mm_sha1msg1_epu32(__m128i, __m128i);
extern __m128i __cdecl _mm_sha1msg2_epu32(__m128i, __m128i);
extern __m128i __cdecl _mm_sha1nexte_epu32(__m128i, __m128i);
extern __m128i __cdecl _mm_sha1rnds4_epu32(__m128i, __m128i, const int);

extern __m128i __cdecl _mm_sha256msg1_epu32(__m128i, __m128i);
extern __m128i __cdecl _mm_sha256msg2_epu32(__m128i, __m128i);
extern __m128i __cdecl _mm_sha256rnds2_epu32(__m128i, __m128i, __m128i);




extern void * __cdecl _bnd_set_ptr_bounds(const void *, size_t);
extern void * __cdecl _bnd_narrow_ptr_bounds(const void *, const void *, size_t);
extern void * __cdecl _bnd_copy_ptr_bounds(const void *, const void *);
extern void * __cdecl _bnd_init_ptr_bounds(const void *);
extern void __cdecl _bnd_store_ptr_bounds(const void **, const void *);
extern void __cdecl _bnd_chk_ptr_lbounds(const void *);
extern void __cdecl _bnd_chk_ptr_ubounds(const void *);
extern void __cdecl _bnd_chk_ptr_bounds(const void *, size_t);
extern void * __cdecl _bnd_load_ptr_bounds(const void **, const void *);
extern const void * __cdecl _bnd_get_ptr_lbound(const void *);
extern const void * __cdecl _bnd_get_ptr_ubound(const void *);


}; 
#line 2039 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"

#line 2041 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
#line 2042 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
#line 2043 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"

#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
        #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"












#pragma once



#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"







#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"



#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"


extern "C" { 
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"





























































































__m128 _mm_macc_ps(__m128, __m128, __m128);
__m128d _mm_macc_pd(__m128d, __m128d, __m128d);
__m128 _mm_macc_ss(__m128, __m128, __m128);
__m128d _mm_macc_sd(__m128d, __m128d, __m128d);
__m128 _mm_maddsub_ps(__m128, __m128, __m128);
__m128d _mm_maddsub_pd(__m128d, __m128d, __m128d);
__m128 _mm_msubadd_ps(__m128, __m128, __m128);
__m128d _mm_msubadd_pd(__m128d, __m128d, __m128d);
__m128 _mm_msub_ps(__m128, __m128, __m128);
__m128d _mm_msub_pd(__m128d, __m128d, __m128d);
__m128 _mm_msub_ss(__m128, __m128, __m128);
__m128d _mm_msub_sd(__m128d, __m128d, __m128d);
__m128 _mm_nmacc_ps(__m128, __m128, __m128);
__m128d _mm_nmacc_pd(__m128d, __m128d, __m128d);
__m128 _mm_nmacc_ss(__m128, __m128, __m128);
__m128d _mm_nmacc_sd(__m128d, __m128d, __m128d);
__m128 _mm_nmsub_ps(__m128, __m128, __m128);
__m128d _mm_nmsub_pd(__m128d, __m128d, __m128d);
__m128 _mm_nmsub_ss(__m128, __m128, __m128);
__m128d _mm_nmsub_sd(__m128d, __m128d, __m128d);


__m128i _mm_maccs_epi16(__m128i, __m128i, __m128i);
__m128i _mm_macc_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maccsd_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maccd_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maccs_epi32(__m128i, __m128i, __m128i);
__m128i _mm_macc_epi32(__m128i, __m128i, __m128i);
__m128i _mm_maccslo_epi32(__m128i, __m128i, __m128i);
__m128i _mm_macclo_epi32(__m128i, __m128i, __m128i);
__m128i _mm_maccshi_epi32(__m128i, __m128i, __m128i);
__m128i _mm_macchi_epi32(__m128i, __m128i, __m128i);
__m128i _mm_maddsd_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maddd_epi16(__m128i, __m128i, __m128i);


__m128i _mm_haddw_epi8(__m128i);
__m128i _mm_haddd_epi8(__m128i);
__m128i _mm_haddq_epi8(__m128i);
__m128i _mm_haddd_epi16(__m128i);
__m128i _mm_haddq_epi16(__m128i);
__m128i _mm_haddq_epi32(__m128i);
__m128i _mm_haddw_epu8(__m128i);
__m128i _mm_haddd_epu8(__m128i);
__m128i _mm_haddq_epu8(__m128i);
__m128i _mm_haddd_epu16(__m128i);
__m128i _mm_haddq_epu16(__m128i);
__m128i _mm_haddq_epu32(__m128i);
__m128i _mm_hsubw_epi8(__m128i);
__m128i _mm_hsubd_epi16(__m128i);
__m128i _mm_hsubq_epi32(__m128i);


__m128i _mm_cmov_si128(__m128i, __m128i, __m128i);
__m128i _mm_perm_epi8(__m128i, __m128i, __m128i);


__m128i _mm_rot_epi8(__m128i, __m128i);
__m128i _mm_rot_epi16(__m128i, __m128i);
__m128i _mm_rot_epi32(__m128i, __m128i);
__m128i _mm_rot_epi64(__m128i, __m128i);
__m128i _mm_roti_epi8(__m128i, int);
__m128i _mm_roti_epi16(__m128i, int);
__m128i _mm_roti_epi32(__m128i, int);
__m128i _mm_roti_epi64(__m128i, int);
__m128i _mm_shl_epi8(__m128i, __m128i);
__m128i _mm_shl_epi16(__m128i, __m128i);
__m128i _mm_shl_epi32(__m128i, __m128i);
__m128i _mm_shl_epi64(__m128i, __m128i);
__m128i _mm_sha_epi8(__m128i, __m128i);
__m128i _mm_sha_epi16(__m128i, __m128i);
__m128i _mm_sha_epi32(__m128i, __m128i);
__m128i _mm_sha_epi64(__m128i, __m128i);



__m128i _mm_com_epu8(__m128i, __m128i, int);
__m128i _mm_com_epu16(__m128i, __m128i, int);
__m128i _mm_com_epu32(__m128i, __m128i, int);
__m128i _mm_com_epu64(__m128i, __m128i, int);
__m128i _mm_com_epi8(__m128i, __m128i, int);
__m128i _mm_com_epi16(__m128i, __m128i, int);
__m128i _mm_com_epi32(__m128i, __m128i, int);
__m128i _mm_com_epi64(__m128i, __m128i, int);



__m128 _mm_frcz_ps(__m128);
__m128d _mm_frcz_pd(__m128d);
__m128 _mm_frcz_ss(__m128, __m128);
__m128d _mm_frcz_sd(__m128d, __m128d);








__m128 _mm_permute2_ps(__m128, __m128, __m128i, int);
__m128d _mm_permute2_pd(__m128d, __m128d, __m128i, int);



__m256 _mm256_macc_ps(__m256, __m256, __m256);
__m256d _mm256_macc_pd(__m256d, __m256d, __m256d);
__m256 _mm256_maddsub_ps(__m256, __m256, __m256);
__m256d _mm256_maddsub_pd(__m256d, __m256d, __m256d);
__m256 _mm256_msubadd_ps(__m256, __m256, __m256);
__m256d _mm256_msubadd_pd(__m256d, __m256d, __m256d);
__m256 _mm256_msub_ps(__m256, __m256, __m256);
__m256d _mm256_msub_pd(__m256d, __m256d, __m256d);
__m256 _mm256_nmacc_ps(__m256, __m256, __m256);
__m256d _mm256_nmacc_pd(__m256d, __m256d, __m256d);
__m256 _mm256_nmsub_ps(__m256, __m256, __m256);
__m256d _mm256_nmsub_pd(__m256d, __m256d, __m256d);
__m256i _mm256_cmov_si256(__m256i, __m256i, __m256i);
__m256 _mm256_frcz_ps(__m256);
__m256d _mm256_frcz_pd(__m256d);
__m256 _mm256_permute2_ps(__m256, __m256, __m256i, int);
__m256d _mm256_permute2_pd(__m256d, __m256d, __m256i, int);


void __llwpcb(void *);
void *__slwpcb();
void __lwpval32(unsigned int, unsigned int, unsigned int);
unsigned char __lwpins32(unsigned int, unsigned int, unsigned int);

void __lwpval64(unsigned __int64, unsigned int, unsigned int);
unsigned char __lwpins64(unsigned __int64, unsigned int, unsigned int);
#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"


unsigned int _bextr_u32(unsigned int, unsigned int, unsigned int);
unsigned int _andn_u32(unsigned int, unsigned int);
unsigned int _tzcnt_u32(unsigned int);
unsigned int _lzcnt_u32(unsigned int);
unsigned int _blsr_u32(unsigned int);
unsigned int _blsmsk_u32(unsigned int);
unsigned int _blsi_u32(unsigned int);

unsigned __int64 _bextr_u64(unsigned __int64, unsigned int, unsigned int);
unsigned __int64 _andn_u64(unsigned __int64, unsigned __int64);
unsigned __int64 _tzcnt_u64(unsigned __int64);
unsigned __int64 _lzcnt_u64(unsigned __int64);
unsigned __int64 _blsr_u64(unsigned __int64);
unsigned __int64 _blsmsk_u64(unsigned __int64);
unsigned __int64 _blsi_u64(unsigned __int64);
#line 276 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"


unsigned int _bextri_u32(unsigned int, unsigned int);
unsigned int _blcfill_u32(unsigned int);
unsigned int _blsfill_u32(unsigned int);
unsigned int _blcs_u32(unsigned int);
unsigned int _tzmsk_u32(unsigned int);
unsigned int _blcic_u32(unsigned int);
unsigned int _blsic_u32(unsigned int);
unsigned int _t1mskc_u32(unsigned int);
unsigned int _blcmsk_u32(unsigned int);
unsigned int _blci_u32(unsigned int);

unsigned __int64 _bextri_u64(unsigned __int64, unsigned int);
unsigned __int64 _blcfill_u64(unsigned __int64);
unsigned __int64 _blsfill_u64(unsigned __int64);
unsigned __int64 _blcs_u64(unsigned __int64);
unsigned __int64 _tzmsk_u64(unsigned __int64);
unsigned __int64 _blcic_u64(unsigned __int64);
unsigned __int64 _blsic_u64(unsigned __int64);
unsigned __int64 _t1mskc_u64(unsigned __int64);
unsigned __int64 _blcmsk_u64(unsigned __int64);
unsigned __int64 _blci_u64(unsigned __int64);
#line 300 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"

void _mm_monitorx(void const *, unsigned int, unsigned int);
void _mm_mwaitx(unsigned int, unsigned int, unsigned int);

void _mm_clzero(void const *);


}; 
#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"

#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
#line 312 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
#line 313 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
    #line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"

    

#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"

    


#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"

    


#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"


extern "C" {
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"




























#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"


#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"






#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"




#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"




#line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"




#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"






#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"




#line 112 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"




#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"




#line 122 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"




#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"


void * _AddressOfReturnAddress(void);
unsigned char _BitScanForward(unsigned long * _Index, unsigned long _Mask);
unsigned char _BitScanForward64(unsigned long * _Index, unsigned __int64 _Mask);

unsigned char _BitScanReverse(unsigned long * _Index, unsigned long _Mask);
unsigned char _BitScanReverse64(unsigned long * _Index, unsigned __int64 _Mask);
























long _InterlockedAnd(long volatile * _Value, long _Mask);
short _InterlockedAnd16(short volatile * _Value, short _Mask);


short _InterlockedAnd16_np(short volatile * _Value, short _Mask);

__int64 _InterlockedAnd64(__int64 volatile * _Value, __int64 _Mask);


__int64 _InterlockedAnd64_np(__int64 volatile * _Value, __int64 _Mask);

char _InterlockedAnd8(char volatile * _Value, char _Mask);


char _InterlockedAnd8_np(char volatile * _Value, char _Mask);



long _InterlockedAnd_np(long volatile * _Value, long _Mask);

long  _InterlockedCompareExchange(long volatile * _Destination, long _Exchange, long _Comparand);

unsigned char _InterlockedCompareExchange128(__int64 volatile * _Destination, __int64 _ExchangeHigh, __int64 _ExchangeLow, __int64 * _ComparandResult);


unsigned char _InterlockedCompareExchange128_np(__int64 volatile * _Destination, __int64 _ExchangeHigh, __int64 _ExchangeLow, __int64 * _ComparandResult);

short _InterlockedCompareExchange16(short volatile * _Destination, short _Exchange, short _Comparand);


short _InterlockedCompareExchange16_np(short volatile * _Destination, short _Exchange, short _Comparand);

__int64 _InterlockedCompareExchange64(__int64 volatile * _Destination, __int64 _Exchange, __int64 _Comparand);


__int64 _InterlockedCompareExchange64_np(__int64 volatile * _Destination, __int64 _Exchange, __int64 _Comparand);

char _InterlockedCompareExchange8(char volatile * _Destination, char _Exchange, char _Comparand);



void * _InterlockedCompareExchangePointer(void * volatile * _Destination, void * _Exchange, void * _Comparand);


void * _InterlockedCompareExchangePointer_np(void * volatile * _Destination, void * _Exchange, void * _Comparand);



long _InterlockedCompareExchange_np(long volatile * _Destination, long _Exchange, long _Comparand);

long  _InterlockedDecrement(long volatile * _Addend);

short _InterlockedDecrement16(short volatile * _Addend);



__int64 _InterlockedDecrement64(__int64 volatile * _Addend);






long  _InterlockedExchange(long volatile * _Target, long _Value);

short _InterlockedExchange16(short volatile * _Target, short _Value);



__int64 _InterlockedExchange64(__int64 volatile * _Target, __int64 _Value);



char _InterlockedExchange8(char volatile * _Target, char _Value);



long  _InterlockedExchangeAdd(long volatile * _Addend, long _Value);
short _InterlockedExchangeAdd16(short volatile * _Addend, short _Value);



__int64 _InterlockedExchangeAdd64(__int64 volatile * _Addend, __int64 _Value);



char _InterlockedExchangeAdd8(char volatile * _Addend, char _Value);






void * _InterlockedExchangePointer(void * volatile * _Target, void * _Value);






long  _InterlockedIncrement(long volatile * _Addend);

short _InterlockedIncrement16(short volatile * _Addend);



__int64 _InterlockedIncrement64(__int64 volatile * _Addend);






long _InterlockedOr(long volatile * _Value, long _Mask);
short _InterlockedOr16(short volatile * _Value, short _Mask);


short _InterlockedOr16_np(short volatile * _Value, short _Mask);

__int64 _InterlockedOr64(__int64 volatile * _Value, __int64 _Mask);


__int64 _InterlockedOr64_np(__int64 volatile * _Value, __int64 _Mask);

char _InterlockedOr8(char volatile * _Value, char _Mask);


char _InterlockedOr8_np(char volatile * _Value, char _Mask);



long _InterlockedOr_np(long volatile * _Value, long _Mask);

long _InterlockedXor(long volatile * _Value, long _Mask);
short _InterlockedXor16(short volatile * _Value, short _Mask);


short _InterlockedXor16_np(short volatile * _Value, short _Mask);

__int64 _InterlockedXor64(__int64 volatile * _Value, __int64 _Mask);


__int64 _InterlockedXor64_np(__int64 volatile * _Value, __int64 _Mask);

char _InterlockedXor8(char volatile * _Value, char _Mask);


char _InterlockedXor8_np(char volatile * _Value, char _Mask);



long _InterlockedXor_np(long volatile * _Value, long _Mask);









void _ReadBarrier(void);






void _ReadWriteBarrier(void);
void * _ReturnAddress(void);

void _WriteBarrier(void);









void __addgsbyte(unsigned long, unsigned char);
void __addgsdword(unsigned long, unsigned long);
void __addgsqword(unsigned long, unsigned __int64);
void __addgsword(unsigned long, unsigned short);




void __code_seg(const char *);
void __cpuid(int[4], int);
void __cpuidex(int[4], int, int);
void __cdecl __debugbreak(void);

__int64 __emul(int, int);
unsigned __int64 __emulu(unsigned int, unsigned int);
__declspec(noreturn) void __fastfail(unsigned int);
void __faststorefence(void);
unsigned int __getcallerseflags(void);
void __halt(void);


unsigned char __inbyte(unsigned short);
void __inbytestring(unsigned short, unsigned char *, unsigned long);



void __incgsbyte(unsigned long);
void __incgsdword(unsigned long);
void __incgsqword(unsigned long);
void __incgsword(unsigned long);




unsigned long __indword(unsigned short);
void __indwordstring(unsigned short, unsigned long *, unsigned long);
void __int2c(void);
void __invlpg(void *);
unsigned short __inword(unsigned short);
void __inwordstring(unsigned short, unsigned short *, unsigned long);









void __lidt(void *);
unsigned __int64 __ll_lshift(unsigned __int64, int);
__int64 __ll_rshift(__int64, int);
unsigned int __lzcnt(unsigned int);
unsigned short __lzcnt16(unsigned short);
unsigned __int64 __lzcnt64(unsigned __int64);
void __movsb(unsigned char *, unsigned char const *, size_t);
void __movsd(unsigned long *, unsigned long const *, size_t);
void __movsq(unsigned long long *, unsigned long long const *, size_t);
void __movsw(unsigned short *, unsigned short const *, size_t);
__int64 __mulh(__int64, __int64);
void __nop(void);
void __nvreg_restore_fence(void);
void __nvreg_save_fence(void);
void __outbyte(unsigned short, unsigned char);
void __outbytestring(unsigned short, unsigned char *, unsigned long);
void __outdword(unsigned short, unsigned long);
void __outdwordstring(unsigned short, unsigned long *, unsigned long);
void __outword(unsigned short, unsigned short);
void __outwordstring(unsigned short, unsigned short *, unsigned long);
unsigned int __popcnt(unsigned int);
unsigned short __popcnt16(unsigned short);
unsigned __int64 __popcnt64(unsigned __int64);



unsigned __int64 __rdtsc(void);
unsigned __int64 __rdtscp(unsigned int *);
unsigned __int64 __readcr0(void);

unsigned __int64 __readcr2(void);

unsigned __int64 __readcr3(void);

unsigned __int64 __readcr4(void);

unsigned __int64 __readcr8(void);

unsigned __int64 __readdr(unsigned int);

unsigned __int64 __readeflags(void);





unsigned char __readgsbyte(unsigned long);
unsigned long __readgsdword(unsigned long);
unsigned __int64 __readgsqword(unsigned long);
unsigned short __readgsword(unsigned long);
unsigned __int64 __readmsr(unsigned long);
unsigned __int64 __readpmc(unsigned long);




unsigned long __segmentlimit(unsigned long);

unsigned __int64 __shiftleft128(unsigned __int64 _LowPart, unsigned __int64 _HighPart, unsigned char _Shift);
unsigned __int64 __shiftright128(unsigned __int64 _LowPart, unsigned __int64 _HighPart, unsigned char _Shift);
void __sidt(void *);

void __stosb(unsigned char *, unsigned char, size_t);
void __stosd(unsigned long *, unsigned long, size_t);
void __stosq(unsigned __int64 *, unsigned __int64, size_t);
void __stosw(unsigned short *, unsigned short, size_t);
void __svm_clgi(void);
void __svm_invlpga(void *, int);
void __svm_skinit(int);
void __svm_stgi(void);
void __svm_vmload(size_t);
void __svm_vmrun(size_t);
void __svm_vmsave(size_t);





void __ud2(void);
unsigned __int64 __ull_rshift(unsigned __int64, int);
unsigned __int64 __umulh(unsigned __int64, unsigned __int64);
void __vmx_off(void);
unsigned char __vmx_on(unsigned __int64 *);
unsigned char __vmx_vmclear(unsigned __int64 *);
unsigned char __vmx_vmlaunch(void);
unsigned char __vmx_vmptrld(unsigned __int64 *);
void __vmx_vmptrst(unsigned __int64 *);
unsigned char __vmx_vmread(size_t, size_t *);
unsigned char __vmx_vmresume(void);
unsigned char __vmx_vmwrite(size_t, size_t);
void __wbinvd(void);


void __writecr0(unsigned __int64);

void __writecr3(unsigned __int64);

void __writecr4(unsigned __int64);

void __writecr8(unsigned __int64);

void __writedr(unsigned int, unsigned __int64);

void __writeeflags(unsigned __int64);





void __writegsbyte(unsigned long, unsigned char);
void __writegsdword(unsigned long, unsigned long);
void __writegsqword(unsigned long, unsigned __int64);
void __writegsword(unsigned long, unsigned short);
void __writemsr(unsigned long, unsigned __int64);





unsigned char _bittest(long const *, long);
unsigned char _bittest64(__int64 const *, __int64);
unsigned char _bittestandcomplement(long *, long);
unsigned char _bittestandcomplement64(__int64 *, __int64);
unsigned char _bittestandreset(long *, long);
unsigned char _bittestandreset64(__int64 *, __int64);
unsigned char _bittestandset(long *, long);
unsigned char _bittestandset64(__int64 *, __int64);
  unsigned __int64 __cdecl _byteswap_uint64(  unsigned __int64);
  unsigned long __cdecl _byteswap_ulong(  unsigned long);
  unsigned short __cdecl _byteswap_ushort(  unsigned short);
void __cdecl _disable(void);
void __cdecl _enable(void);
unsigned char _interlockedbittestandreset(long volatile *, long);
unsigned char _interlockedbittestandreset64(__int64 volatile *, __int64);






unsigned char _interlockedbittestandset(long volatile *, long);
unsigned char _interlockedbittestandset64(__int64 volatile *, __int64);
















  unsigned long __cdecl _lrotl(  unsigned long,   int);
  unsigned long __cdecl _lrotr(  unsigned long,   int);




























































void _m_prefetch(void *);
void _m_prefetchw(volatile const void *);



































__m128i _mm_abs_epi16(__m128i);
__m128i _mm_abs_epi32(__m128i);
__m128i _mm_abs_epi8(__m128i);



__m128i _mm_add_epi16(__m128i, __m128i);
__m128i _mm_add_epi32(__m128i, __m128i);
__m128i _mm_add_epi64(__m128i, __m128i);
__m128i _mm_add_epi8(__m128i, __m128i);
__m128d _mm_add_pd(__m128d, __m128d);
__m128 _mm_add_ps(__m128, __m128);
__m128d _mm_add_sd(__m128d, __m128d);

__m128 _mm_add_ss(__m128, __m128);
__m128i _mm_adds_epi16(__m128i, __m128i);
__m128i _mm_adds_epi8(__m128i, __m128i);
__m128i _mm_adds_epu16(__m128i, __m128i);
__m128i _mm_adds_epu8(__m128i, __m128i);
__m128d _mm_addsub_pd(__m128d, __m128d);
__m128 _mm_addsub_ps(__m128, __m128);
__m128i _mm_alignr_epi8(__m128i, __m128i, int);

__m128d _mm_and_pd(__m128d, __m128d);
__m128 _mm_and_ps(__m128, __m128);
__m128i _mm_and_si128(__m128i, __m128i);
__m128d _mm_andnot_pd(__m128d, __m128d);
__m128 _mm_andnot_ps(__m128, __m128);
__m128i _mm_andnot_si128(__m128i, __m128i);
__m128i _mm_avg_epu16(__m128i, __m128i);
__m128i _mm_avg_epu8(__m128i, __m128i);
__m128i _mm_blend_epi16(__m128i, __m128i, int);
__m128d _mm_blend_pd(__m128d, __m128d, int);
__m128 _mm_blend_ps(__m128, __m128, int);
__m128i _mm_blendv_epi8(__m128i, __m128i, __m128i);
__m128d _mm_blendv_pd(__m128d, __m128d, __m128d);
__m128 _mm_blendv_ps(__m128, __m128, __m128);
void _mm_clflush(void const *);
void _mm_clflushopt(void const *);
void _mm_clwb(void const *);
void _mm_clzero(void const *);
__m128i _mm_cmpeq_epi16(__m128i, __m128i);
__m128i _mm_cmpeq_epi32(__m128i, __m128i);
__m128i _mm_cmpeq_epi64(__m128i, __m128i);
__m128i _mm_cmpeq_epi8(__m128i, __m128i);
__m128d _mm_cmpeq_pd(__m128d, __m128d);
__m128 _mm_cmpeq_ps(__m128, __m128);
__m128d _mm_cmpeq_sd(__m128d, __m128d);
__m128 _mm_cmpeq_ss(__m128, __m128);
int _mm_cmpestra(__m128i, int, __m128i, int, int);
int _mm_cmpestrc(__m128i, int, __m128i, int, int);
int _mm_cmpestri(__m128i, int, __m128i, int, int);
__m128i _mm_cmpestrm(__m128i, int, __m128i, int, int);
int _mm_cmpestro(__m128i, int, __m128i, int, int);
int _mm_cmpestrs(__m128i, int, __m128i, int, int);
int _mm_cmpestrz(__m128i, int, __m128i, int, int);
__m128d _mm_cmpge_pd(__m128d, __m128d);
__m128 _mm_cmpge_ps(__m128, __m128);
__m128d _mm_cmpge_sd(__m128d, __m128d);
__m128 _mm_cmpge_ss(__m128, __m128);
__m128i _mm_cmpgt_epi16(__m128i, __m128i);
__m128i _mm_cmpgt_epi32(__m128i, __m128i);
__m128i _mm_cmpgt_epi64(__m128i, __m128i);
__m128i _mm_cmpgt_epi8(__m128i, __m128i);
__m128d _mm_cmpgt_pd(__m128d, __m128d);
__m128 _mm_cmpgt_ps(__m128, __m128);
__m128d _mm_cmpgt_sd(__m128d, __m128d);
__m128 _mm_cmpgt_ss(__m128, __m128);
int _mm_cmpistra(__m128i, __m128i, int);
int _mm_cmpistrc(__m128i, __m128i, int);
int _mm_cmpistri(__m128i, __m128i, int);
__m128i _mm_cmpistrm(__m128i, __m128i, int);
int _mm_cmpistro(__m128i, __m128i, int);
int _mm_cmpistrs(__m128i, __m128i, int);
int _mm_cmpistrz(__m128i, __m128i, int);
__m128d _mm_cmple_pd(__m128d, __m128d);
__m128 _mm_cmple_ps(__m128, __m128);
__m128d _mm_cmple_sd(__m128d, __m128d);
__m128 _mm_cmple_ss(__m128, __m128);
__m128i _mm_cmplt_epi16(__m128i, __m128i);
__m128i _mm_cmplt_epi32(__m128i, __m128i);
__m128i _mm_cmplt_epi8(__m128i, __m128i);
__m128d _mm_cmplt_pd(__m128d, __m128d);
__m128 _mm_cmplt_ps(__m128, __m128);
__m128d _mm_cmplt_sd(__m128d, __m128d);
__m128 _mm_cmplt_ss(__m128, __m128);
__m128d _mm_cmpneq_pd(__m128d, __m128d);
__m128 _mm_cmpneq_ps(__m128, __m128);
__m128d _mm_cmpneq_sd(__m128d, __m128d);
__m128 _mm_cmpneq_ss(__m128, __m128);
__m128d _mm_cmpnge_pd(__m128d, __m128d);
__m128 _mm_cmpnge_ps(__m128, __m128);
__m128d _mm_cmpnge_sd(__m128d, __m128d);
__m128 _mm_cmpnge_ss(__m128, __m128);
__m128d _mm_cmpngt_pd(__m128d, __m128d);
__m128 _mm_cmpngt_ps(__m128, __m128);
__m128d _mm_cmpngt_sd(__m128d, __m128d);
__m128 _mm_cmpngt_ss(__m128, __m128);
__m128d _mm_cmpnle_pd(__m128d, __m128d);
__m128 _mm_cmpnle_ps(__m128, __m128);
__m128d _mm_cmpnle_sd(__m128d, __m128d);
__m128 _mm_cmpnle_ss(__m128, __m128);
__m128d _mm_cmpnlt_pd(__m128d, __m128d);
__m128 _mm_cmpnlt_ps(__m128, __m128);
__m128d _mm_cmpnlt_sd(__m128d, __m128d);
__m128 _mm_cmpnlt_ss(__m128, __m128);
__m128d _mm_cmpord_pd(__m128d, __m128d);
__m128 _mm_cmpord_ps(__m128, __m128);
__m128d _mm_cmpord_sd(__m128d, __m128d);
__m128 _mm_cmpord_ss(__m128, __m128);
__m128d _mm_cmpunord_pd(__m128d, __m128d);
__m128 _mm_cmpunord_ps(__m128, __m128);
__m128d _mm_cmpunord_sd(__m128d, __m128d);
__m128 _mm_cmpunord_ss(__m128, __m128);
int _mm_comieq_sd(__m128d, __m128d);
int _mm_comieq_ss(__m128, __m128);
int _mm_comige_sd(__m128d, __m128d);
int _mm_comige_ss(__m128, __m128);
int _mm_comigt_sd(__m128d, __m128d);
int _mm_comigt_ss(__m128, __m128);
int _mm_comile_sd(__m128d, __m128d);
int _mm_comile_ss(__m128, __m128);
int _mm_comilt_sd(__m128d, __m128d);
int _mm_comilt_ss(__m128, __m128);
int _mm_comineq_sd(__m128d, __m128d);
int _mm_comineq_ss(__m128, __m128);
unsigned int _mm_crc32_u16(unsigned int, unsigned short);
unsigned int _mm_crc32_u32(unsigned int, unsigned int);
unsigned __int64 _mm_crc32_u64(unsigned __int64, unsigned __int64);
unsigned int _mm_crc32_u8(unsigned int, unsigned char);


__m128 _mm_cvt_si2ss(__m128, int);
int _mm_cvt_ss2si(__m128);
__m128i _mm_cvtepi16_epi32(__m128i);
__m128i _mm_cvtepi16_epi64(__m128i);
__m128i _mm_cvtepi32_epi64(__m128i);
__m128d _mm_cvtepi32_pd(__m128i);
__m128 _mm_cvtepi32_ps(__m128i);
__m128i _mm_cvtepi8_epi16(__m128i);
__m128i _mm_cvtepi8_epi32(__m128i);
__m128i _mm_cvtepi8_epi64(__m128i);
__m128i _mm_cvtepu16_epi32(__m128i);
__m128i _mm_cvtepu16_epi64(__m128i);
__m128i _mm_cvtepu32_epi64(__m128i);
__m128i _mm_cvtepu8_epi16(__m128i);
__m128i _mm_cvtepu8_epi32(__m128i);
__m128i _mm_cvtepu8_epi64(__m128i);
__m128i _mm_cvtpd_epi32(__m128d);

__m128 _mm_cvtpd_ps(__m128d);

__m128i _mm_cvtps_epi32(__m128);
__m128d _mm_cvtps_pd(__m128);
int _mm_cvtsd_si32(__m128d);
__int64 _mm_cvtsd_si64(__m128d);
__int64 _mm_cvtsd_si64x(__m128d);
__m128 _mm_cvtsd_ss(__m128, __m128d);
int _mm_cvtsi128_si32(__m128i);
__int64 _mm_cvtsi128_si64(__m128i);
__int64 _mm_cvtsi128_si64x(__m128i);
__m128d _mm_cvtsi32_sd(__m128d, int);
__m128i _mm_cvtsi32_si128(int);
__m128d _mm_cvtsi64_sd(__m128d, __int64);
__m128i _mm_cvtsi64_si128(__int64);
__m128 _mm_cvtsi64_ss(__m128, __int64);
__m128d _mm_cvtsi64x_sd(__m128d, __int64);
__m128i _mm_cvtsi64x_si128(__int64);
__m128 _mm_cvtsi64x_ss(__m128, __int64);
__m128d _mm_cvtss_sd(__m128d, __m128);
__int64 _mm_cvtss_si64(__m128);
__int64 _mm_cvtss_si64x(__m128);

int _mm_cvtt_ss2si(__m128);
__m128i _mm_cvttpd_epi32(__m128d);

__m128i _mm_cvttps_epi32(__m128);
int _mm_cvttsd_si32(__m128d);
__int64 _mm_cvttsd_si64(__m128d);
__int64 _mm_cvttsd_si64x(__m128d);
__int64 _mm_cvttss_si64(__m128);
__int64 _mm_cvttss_si64x(__m128);
__m128d _mm_div_pd(__m128d, __m128d);
__m128 _mm_div_ps(__m128, __m128);
__m128d _mm_div_sd(__m128d, __m128d);
__m128 _mm_div_ss(__m128, __m128);
__m128d _mm_dp_pd(__m128d, __m128d, int);
__m128 _mm_dp_ps(__m128, __m128, int);
int _mm_extract_epi16(__m128i, int);
int _mm_extract_epi32(__m128i, int);
__int64 _mm_extract_epi64(__m128i, int);
int _mm_extract_epi8(__m128i, int);
int _mm_extract_ps(__m128, int);
__m128i _mm_extract_si64(__m128i, __m128i);
__m128i _mm_extracti_si64(__m128i, int, int);
unsigned int _mm_getcsr(void);
__m128i _mm_hadd_epi16(__m128i, __m128i);
__m128i _mm_hadd_epi32(__m128i, __m128i);
__m128d _mm_hadd_pd(__m128d, __m128d);


__m128 _mm_hadd_ps(__m128, __m128);
__m128i _mm_hadds_epi16(__m128i, __m128i);

__m128i _mm_hsub_epi16(__m128i, __m128i);
__m128i _mm_hsub_epi32(__m128i, __m128i);
__m128d _mm_hsub_pd(__m128d, __m128d);


__m128 _mm_hsub_ps(__m128, __m128);
__m128i _mm_hsubs_epi16(__m128i, __m128i);

__m128i _mm_insert_epi16(__m128i, int, int);
__m128i _mm_insert_epi32(__m128i, int, int);
__m128i _mm_insert_epi64(__m128i, __int64, int);
__m128i _mm_insert_epi8(__m128i, int, int);
__m128 _mm_insert_ps(__m128, __m128, int);
__m128i _mm_insert_si64(__m128i, __m128i);
__m128i _mm_inserti_si64(__m128i, __m128i, int, int);
__m128i _mm_lddqu_si128(__m128i const *);
void _mm_lfence(void);
__m128d _mm_load1_pd(double const *);
__m128d _mm_load_pd(double const *);
__m128 _mm_load_ps(float const *);
__m128 _mm_load_ps1(float const *);
__m128d _mm_load_sd(double const *);
__m128i _mm_load_si128(__m128i const *);
__m128 _mm_load_ss(float const *);
__m128d _mm_loaddup_pd(double const *);
__m128d _mm_loadh_pd(__m128d, double const *);
__m128 _mm_loadh_pi(__m128, __m64 const *);
__m128i _mm_loadl_epi64(__m128i const *);
__m128d _mm_loadl_pd(__m128d, double const *);
__m128 _mm_loadl_pi(__m128, __m64 const *);
__m128d _mm_loadr_pd(double const *);
__m128 _mm_loadr_ps(float const *);
__m128d _mm_loadu_pd(double const *);
__m128 _mm_loadu_ps(float const *);
__m128i _mm_loadu_si128(__m128i const *);
__m128i _mm_madd_epi16(__m128i, __m128i);
__m128i _mm_maddubs_epi16(__m128i, __m128i);

void _mm_maskmoveu_si128(__m128i, __m128i, char *);
__m128i _mm_max_epi16(__m128i, __m128i);
__m128i _mm_max_epi32(__m128i, __m128i);
__m128i _mm_max_epi8(__m128i, __m128i);
__m128i _mm_max_epu16(__m128i, __m128i);
__m128i _mm_max_epu32(__m128i, __m128i);
__m128i _mm_max_epu8(__m128i, __m128i);
__m128d _mm_max_pd(__m128d, __m128d);
__m128 _mm_max_ps(__m128, __m128);
__m128d _mm_max_sd(__m128d, __m128d);
__m128 _mm_max_ss(__m128, __m128);
void _mm_mfence(void);
__m128i _mm_min_epi16(__m128i, __m128i);
__m128i _mm_min_epi32(__m128i, __m128i);
__m128i _mm_min_epi8(__m128i, __m128i);
__m128i _mm_min_epu16(__m128i, __m128i);
__m128i _mm_min_epu32(__m128i, __m128i);
__m128i _mm_min_epu8(__m128i, __m128i);
__m128d _mm_min_pd(__m128d, __m128d);
__m128 _mm_min_ps(__m128, __m128);
__m128d _mm_min_sd(__m128d, __m128d);
__m128 _mm_min_ss(__m128, __m128);
__m128i _mm_minpos_epu16(__m128i);
void _mm_monitor(void const *, unsigned int, unsigned int);
__m128i _mm_move_epi64(__m128i);
__m128d _mm_move_sd(__m128d, __m128d);
__m128 _mm_move_ss(__m128, __m128);
__m128d _mm_movedup_pd(__m128d);
__m128 _mm_movehdup_ps(__m128);
__m128 _mm_movehl_ps(__m128, __m128);
__m128 _mm_moveldup_ps(__m128);
__m128 _mm_movelh_ps(__m128, __m128);
int _mm_movemask_epi8(__m128i);
int _mm_movemask_pd(__m128d);
int _mm_movemask_ps(__m128);


__m128i _mm_mpsadbw_epu8(__m128i, __m128i, int);
__m128i _mm_mul_epi32(__m128i, __m128i);
__m128i _mm_mul_epu32(__m128i, __m128i);
__m128d _mm_mul_pd(__m128d, __m128d);
__m128 _mm_mul_ps(__m128, __m128);
__m128d _mm_mul_sd(__m128d, __m128d);
__m128 _mm_mul_ss(__m128, __m128);

__m128i _mm_mulhi_epi16(__m128i, __m128i);
__m128i _mm_mulhi_epu16(__m128i, __m128i);
__m128i _mm_mulhrs_epi16(__m128i, __m128i);

__m128i _mm_mullo_epi16(__m128i, __m128i);
__m128i _mm_mullo_epi32(__m128i, __m128i);
void _mm_mwait(unsigned int, unsigned int);
__m128d _mm_or_pd(__m128d, __m128d);
__m128 _mm_or_ps(__m128, __m128);
__m128i _mm_or_si128(__m128i, __m128i);
__m128i _mm_packs_epi16(__m128i, __m128i);
__m128i _mm_packs_epi32(__m128i, __m128i);
__m128i _mm_packus_epi16(__m128i, __m128i);
__m128i _mm_packus_epi32(__m128i, __m128i);
void _mm_pause(void);
int _mm_popcnt_u32(unsigned int);
__int64 _mm_popcnt_u64(unsigned __int64);
void _mm_prefetch(char const *, int);
__m128 _mm_rcp_ps(__m128);
__m128 _mm_rcp_ss(__m128);
__m128d _mm_round_pd(__m128d, int);
__m128 _mm_round_ps(__m128, int);
__m128d _mm_round_sd(__m128d, __m128d, int);
__m128 _mm_round_ss(__m128, __m128, int);
__m128 _mm_rsqrt_ps(__m128);
__m128 _mm_rsqrt_ss(__m128);
__m128i _mm_sad_epu8(__m128i, __m128i);
__m128i _mm_set1_epi16(short);
__m128i _mm_set1_epi32(int);

__m128i _mm_set1_epi64x(__int64);
__m128i _mm_set1_epi8(char);
__m128d _mm_set1_pd(double);



__m128i _mm_set_epi16(short, short, short, short, short, short, short, short);
__m128i _mm_set_epi32(int, int, int, int);

__m128i _mm_set_epi64x(__int64, __int64);
__m128i _mm_set_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char);
__m128d _mm_set_pd(double, double);



__m128 _mm_set_ps(float, float, float, float);
__m128 _mm_set_ps1(float);
__m128d _mm_set_sd(double);
__m128 _mm_set_ss(float);
void _mm_setcsr(unsigned int);
__m128i _mm_setl_epi64(__m128i);
__m128i _mm_setr_epi16(short, short, short, short, short, short, short, short);
__m128i _mm_setr_epi32(int, int, int, int);

__m128i _mm_setr_epi64x(__int64, __int64);
__m128i _mm_setr_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char);
__m128d _mm_setr_pd(double, double);



__m128 _mm_setr_ps(float, float, float, float);
__m128d _mm_setzero_pd(void);
__m128 _mm_setzero_ps(void);
__m128i _mm_setzero_si128(void);

void _mm_sfence(void);
__m128i _mm_shuffle_epi32(__m128i, int);
__m128i _mm_shuffle_epi8(__m128i, __m128i);
__m128d _mm_shuffle_pd(__m128d, __m128d, int);

__m128 _mm_shuffle_ps(__m128, __m128, unsigned int);
__m128i _mm_shufflehi_epi16(__m128i, int);
__m128i _mm_shufflelo_epi16(__m128i, int);
__m128i _mm_sign_epi16(__m128i, __m128i);
__m128i _mm_sign_epi32(__m128i, __m128i);
__m128i _mm_sign_epi8(__m128i, __m128i);



__m128i _mm_sll_epi16(__m128i, __m128i);
__m128i _mm_sll_epi32(__m128i, __m128i);
__m128i _mm_sll_epi64(__m128i, __m128i);
__m128i _mm_slli_epi16(__m128i, int);
__m128i _mm_slli_epi32(__m128i, int);
__m128i _mm_slli_epi64(__m128i, int);
__m128i _mm_slli_si128(__m128i, int);
__m128d _mm_sqrt_pd(__m128d);
__m128 _mm_sqrt_ps(__m128);
__m128d _mm_sqrt_sd(__m128d, __m128d);
__m128 _mm_sqrt_ss(__m128);
__m128i _mm_sra_epi16(__m128i, __m128i);
__m128i _mm_sra_epi32(__m128i, __m128i);
__m128i _mm_srai_epi16(__m128i, int);
__m128i _mm_srai_epi32(__m128i, int);
__m128i _mm_srl_epi16(__m128i, __m128i);
__m128i _mm_srl_epi32(__m128i, __m128i);
__m128i _mm_srl_epi64(__m128i, __m128i);
__m128i _mm_srli_epi16(__m128i, int);
__m128i _mm_srli_epi32(__m128i, int);
__m128i _mm_srli_epi64(__m128i, int);
__m128i _mm_srli_si128(__m128i, int);
void _mm_store1_pd(double *, __m128d);
void _mm_store_pd(double *, __m128d);
void _mm_store_ps(float *, __m128);
void _mm_store_ps1(float *, __m128);
void _mm_store_sd(double *, __m128d);
void _mm_store_si128(__m128i *, __m128i);
void _mm_store_ss(float *, __m128);
void _mm_storeh_pd(double *, __m128d);
void _mm_storeh_pi(__m64 *, __m128);
void _mm_storel_epi64(__m128i *, __m128i);
void _mm_storel_pd(double *, __m128d);
void _mm_storel_pi(__m64 *, __m128);
void _mm_storer_pd(double *, __m128d);
void _mm_storer_ps(float *, __m128);
void _mm_storeu_pd(double *, __m128d);
void _mm_storeu_ps(float *, __m128);
void _mm_storeu_si128(__m128i *, __m128i);
__m128i _mm_stream_load_si128(const __m128i *);
void _mm_stream_pd(double *, __m128d);

void _mm_stream_ps(float *, __m128);
void _mm_stream_sd(double *, __m128d);
void _mm_stream_si128(__m128i *, __m128i);
void _mm_stream_si32(int *, int);
void _mm_stream_si64x(__int64 *, __int64);
void _mm_stream_ss(float *, __m128);
__m128i _mm_sub_epi16(__m128i, __m128i);
__m128i _mm_sub_epi32(__m128i, __m128i);
__m128i _mm_sub_epi64(__m128i, __m128i);
__m128i _mm_sub_epi8(__m128i, __m128i);
__m128d _mm_sub_pd(__m128d, __m128d);
__m128 _mm_sub_ps(__m128, __m128);
__m128d _mm_sub_sd(__m128d, __m128d);

__m128 _mm_sub_ss(__m128, __m128);
__m128i _mm_subs_epi16(__m128i, __m128i);
__m128i _mm_subs_epi8(__m128i, __m128i);
__m128i _mm_subs_epu16(__m128i, __m128i);
__m128i _mm_subs_epu8(__m128i, __m128i);
int _mm_testc_si128(__m128i, __m128i);
int _mm_testnzc_si128(__m128i, __m128i);
int _mm_testz_si128(__m128i, __m128i);
int _mm_ucomieq_sd(__m128d, __m128d);
int _mm_ucomieq_ss(__m128, __m128);
int _mm_ucomige_sd(__m128d, __m128d);
int _mm_ucomige_ss(__m128, __m128);
int _mm_ucomigt_sd(__m128d, __m128d);
int _mm_ucomigt_ss(__m128, __m128);
int _mm_ucomile_sd(__m128d, __m128d);
int _mm_ucomile_ss(__m128, __m128);
int _mm_ucomilt_sd(__m128d, __m128d);
int _mm_ucomilt_ss(__m128, __m128);
int _mm_ucomineq_sd(__m128d, __m128d);
int _mm_ucomineq_ss(__m128, __m128);
__m128i _mm_unpackhi_epi16(__m128i, __m128i);
__m128i _mm_unpackhi_epi32(__m128i, __m128i);
__m128i _mm_unpackhi_epi64(__m128i, __m128i);
__m128i _mm_unpackhi_epi8(__m128i, __m128i);
__m128d _mm_unpackhi_pd(__m128d, __m128d);
__m128 _mm_unpackhi_ps(__m128, __m128);
__m128i _mm_unpacklo_epi16(__m128i, __m128i);
__m128i _mm_unpacklo_epi32(__m128i, __m128i);
__m128i _mm_unpacklo_epi64(__m128i, __m128i);
__m128i _mm_unpacklo_epi8(__m128i, __m128i);
__m128d _mm_unpacklo_pd(__m128d, __m128d);
__m128 _mm_unpacklo_ps(__m128, __m128);
__m128d _mm_xor_pd(__m128d, __m128d);
__m128 _mm_xor_ps(__m128, __m128);
__m128i _mm_xor_si128(__m128i, __m128i);
__int64 _mul128(__int64 _Multiplier, __int64 _Multiplicand, __int64 * _HighProduct);
unsigned int __cdecl _rotl(  unsigned int _Value,   int _Shift);
unsigned short __cdecl _rotl16(unsigned short _Value, unsigned char _Shift);
unsigned __int64 __cdecl _rotl64(  unsigned __int64 _Value,   int _Shift);
unsigned char __cdecl _rotl8(unsigned char _Value, unsigned char _Shift);
unsigned int __cdecl _rotr(  unsigned int _Value,   int _Shift);
unsigned short __cdecl _rotr16(unsigned short _Value, unsigned char _Shift);
unsigned __int64 __cdecl _rotr64(  unsigned __int64 _Value,   int _Shift);
unsigned char __cdecl _rotr8(unsigned char _Value, unsigned char _Shift);
int __cdecl _setjmp(jmp_buf);
int __cdecl _setjmpex(jmp_buf);
unsigned __int64 _umul128(unsigned __int64 _Multiplier, unsigned __int64 _Multiplicand, unsigned __int64 * _HighProduct);
void _rsm(void);
void _lgdt(void *);
void _sgdt(void *);
void _clac(void);
void _stac(void);
unsigned char __cdecl _addcarry_u8(unsigned char, unsigned char, unsigned char, unsigned char *);
unsigned char __cdecl _subborrow_u8(unsigned char, unsigned char, unsigned char, unsigned char *);
unsigned char __cdecl _addcarry_u16(unsigned char, unsigned short, unsigned short, unsigned short *);
unsigned char __cdecl _subborrow_u16(unsigned char, unsigned short, unsigned short, unsigned short *);
unsigned char __cdecl _addcarry_u32(unsigned char, unsigned int, unsigned int, unsigned int *);
unsigned char __cdecl _subborrow_u32(unsigned char, unsigned int, unsigned int, unsigned int *);
unsigned char __cdecl _addcarry_u64(unsigned char, unsigned __int64, unsigned __int64, unsigned __int64 *);
unsigned char __cdecl _subborrow_u64(unsigned char, unsigned __int64, unsigned __int64, unsigned __int64 *);
void _mm_monitorx(void const *, unsigned int, unsigned int);
void _mm_mwaitx(unsigned int, unsigned int, unsigned int);


}
#line 1134 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
#line 1135 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
#line 1136 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"

#line 1152 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

   

   


  






#line 1166 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 1171 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
#line 1172 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"






#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {
 #pragma warning(disable: 4127)

  #pragma warning(disable: 4251)

template<class _Elem,
	class _Traits = char_traits<_Elem>,
	class _Ax = allocator<_Elem> >
	class basic_string;

		
template<class _Mystr>
	class _String_const_iterator
		: public _Iterator012<random_access_iterator_tag,
			typename _Mystr::value_type,
			typename _Mystr::difference_type,
			typename _Mystr::const_pointer,
			typename _Mystr::const_reference,
			_Iterator_base>
	{	
public:
	typedef _String_const_iterator<_Mystr> _Myiter;
	typedef random_access_iterator_tag iterator_category;

	typedef typename _Mystr::value_type value_type;
	typedef typename _Mystr::difference_type difference_type;
	typedef typename _Mystr::const_pointer pointer;
	typedef typename _Mystr::const_reference reference;

	_String_const_iterator()
		: _Ptr()
		{	
		}

	_String_const_iterator(pointer _Parg, const _Container_base *_Pstring)
		: _Ptr(_Parg)
		{	
		this->_Adopt(_Pstring);
		}

	typedef pointer _Unchecked_type;

	_Myiter& _Rechecked(_Unchecked_type _Right)
		{	
		_Ptr = _Right;
		return (*this);
		}

	_Unchecked_type _Unchecked() const
		{	
		return (_Ptr);
		}

	reference operator*() const
		{	
 











#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"





#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"

		;

		return (*_Ptr);
		}

	pointer operator->() const
		{	
		return (pointer_traits<pointer>::pointer_to(**this));
		}

	_Myiter& operator++()
		{	
 









#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"




#line 116 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"

		++_Ptr;
		return (*this);
		}

	_Myiter operator++(int)
		{	
		_Myiter _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myiter& operator--()
		{	
 









#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"




#line 146 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"

		--_Ptr;
		return (*this);
		}

	_Myiter operator--(int)
		{	
		_Myiter _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Myiter& operator+=(difference_type _Off)
		{	
 














#line 176 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"









#line 186 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"

		_Ptr += _Off;
		return (*this);
		}

	_Myiter operator+(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Myiter& operator-=(difference_type _Off)
		{	
		return (*this += -_Off);
		}

	_Myiter operator-(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp -= _Off);
		}

	difference_type operator-(const _Myiter& _Right) const
		{	
		_Compat(_Right);
		return (_Ptr - _Right._Ptr);
		}

	reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}

	bool operator==(const _Myiter& _Right) const
		{	
		_Compat(_Right);
		return (_Ptr == _Right._Ptr);
		}

	bool operator!=(const _Myiter& _Right) const
		{	
		return (!(*this == _Right));
		}

	bool operator<(const _Myiter& _Right) const
		{	
		_Compat(_Right);
		return (_Ptr < _Right._Ptr);
		}

	bool operator>(const _Myiter& _Right) const
		{	
		return (_Right < *this);
		}

	bool operator<=(const _Myiter& _Right) const
		{	
		return (!(_Right < *this));
		}

	bool operator>=(const _Myiter& _Right) const
		{	
		return (!(*this < _Right));
		}

 









#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"





#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
	void _Compat(const _Myiter&) const
		{	
		}
 #line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"

	pointer _Ptr;	
	};

template<class _Mystr> inline
	typename _String_const_iterator<_Mystr>::_Unchecked_type
		_Unchecked(_String_const_iterator<_Mystr> _Iter)
	{	
	return (_Iter._Unchecked());
	}

template<class _Mystr> inline
	_String_const_iterator<_Mystr>
		_Rechecked(_String_const_iterator<_Mystr>& _Iter,
			typename _String_const_iterator<_Mystr>
				::_Unchecked_type _Right)
	{	
	return (_Iter._Rechecked(_Right));
	}

template<class _Mystr> inline
	_String_const_iterator<_Mystr> operator+(
		typename _String_const_iterator<_Mystr>
			::difference_type _Off,
		_String_const_iterator<_Mystr> _Next)
	{	
	return (_Next += _Off);
	}

		
template<class _Mystr>
	class _String_iterator
		: public _String_const_iterator<_Mystr>
	{	
public:
	typedef _String_iterator<_Mystr> _Myiter;
	typedef _String_const_iterator<_Mystr> _Mybase;
	typedef random_access_iterator_tag iterator_category;

	typedef typename _Mystr::value_type value_type;
	typedef typename _Mystr::difference_type difference_type;
	typedef typename _Mystr::pointer pointer;
	typedef typename _Mystr::reference reference;

	_String_iterator()
		{	
		}

	_String_iterator(pointer _Parg, const _Container_base *_Pstring)
		: _Mybase(_Parg, _Pstring)
		{	
		}

	typedef pointer _Unchecked_type;

	_Myiter& _Rechecked(_Unchecked_type _Right)
		{	
		this->_Ptr = _Right;
		return (*this);
		}

	_Unchecked_type _Unchecked() const
		{	
		return (_Const_cast(this->_Ptr));
		}

	reference operator*() const
		{	
		return ((reference)**(_Mybase *)this);
		}

	pointer operator->() const
		{	
		return (pointer_traits<pointer>::pointer_to(**this));
		}

	_Myiter& operator++()
		{	
		++*(_Mybase *)this;
		return (*this);
		}

	_Myiter operator++(int)
		{	
		_Myiter _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myiter& operator--()
		{	
		--*(_Mybase *)this;
		return (*this);
		}

	_Myiter operator--(int)
		{	
		_Myiter _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Myiter& operator+=(difference_type _Off)
		{	
		*(_Mybase *)this += _Off;
		return (*this);
		}

	_Myiter operator+(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Myiter& operator-=(difference_type _Off)
		{	
		return (*this += -_Off);
		}

	_Myiter operator-(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp -= _Off);
		}

	difference_type operator-(const _Mybase& _Right) const
		{	
		return (*(_Mybase *)this - _Right);
		}

	reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}
	};

template<class _Mystr> inline
	typename _String_iterator<_Mystr>::_Unchecked_type
		_Unchecked(_String_iterator<_Mystr> _Iter)
	{	
	return (_Iter._Unchecked());
	}

template<class _Mystr> inline
	_String_iterator<_Mystr>
		_Rechecked(_String_iterator<_Mystr>& _Iter,
			typename _String_iterator<_Mystr>
				::_Unchecked_type _Right)
	{	
	return (_Iter._Rechecked(_Right));
	}

template<class _Mystr> inline
	_String_iterator<_Mystr> operator+(
		typename _String_iterator<_Mystr>
			::difference_type _Off,
		_String_iterator<_Mystr> _Next)
	{	
	return (_Next += _Off);
	}

		
template<class _Value_type,
	class _Size_type,
	class _Difference_type,
	class _Pointer,
	class _Const_pointer,
	class _Reference,
	class _Const_reference>
	struct _String_iter_types
	{	
	typedef _Value_type value_type;
	typedef _Size_type size_type;
	typedef _Difference_type difference_type;
	typedef _Pointer pointer;
	typedef _Const_pointer const_pointer;
	typedef _Reference reference;
	typedef _Const_reference const_reference;
	};

template<class _Ty,
	class _Alloc0>
	struct _String_base_types
	{	
	typedef _Alloc0 _Alloc;
	typedef _String_base_types<_Ty, _Alloc> _Myt;

	typedef _Wrap_alloc<_Alloc> _Alty0;
	typedef typename _Alty0::template rebind<_Ty>::other _Alty;


	typedef typename _If<_Is_simple_alloc<_Alty>::value,
		_Simple_types<typename _Alty::value_type>,
		_String_iter_types<typename _Alty::value_type,
			typename _Alty::size_type,
			typename _Alty::difference_type,
			typename _Alty::pointer,
			typename _Alty::const_pointer,
			typename _Alty::reference,
			typename _Alty::const_reference> >::type
		_Val_types;
	};

		
template<class _Val_types>
	class _String_val
		: public _Container_base
	{	
public:
	typedef _String_val<_Val_types> _Myt;

	typedef typename _Val_types::value_type value_type;
	typedef typename _Val_types::size_type size_type;
	typedef typename _Val_types::difference_type difference_type;
	typedef typename _Val_types::pointer pointer;
	typedef typename _Val_types::const_pointer const_pointer;
	typedef typename _Val_types::reference reference;
	typedef typename _Val_types::const_reference const_reference;

	typedef _String_iterator<_Myt> iterator;
	typedef _String_const_iterator<_Myt> const_iterator;

	_String_val()
		: _Bx(),
		_Mysize(0),
		_Myres(0)
		{	
		}

	enum
		{	
		_BUF_SIZE = 16 / sizeof (value_type) < 1 ? 1
			: 16 / sizeof (value_type)};
	enum
		{	
		_ALLOC_MASK = sizeof (value_type) <= 1 ? 15
			: sizeof (value_type) <= 2 ? 7
			: sizeof (value_type) <= 4 ? 3
			: sizeof (value_type) <= 8 ? 1 : 0};

	value_type *_Myptr()
		{	
		return (this->_BUF_SIZE <= _Myres
			? _Unfancy(_Bx._Ptr)
			: _Bx._Buf);
		}

	const value_type *_Myptr() const
		{	
		return (this->_BUF_SIZE <= _Myres
			? _Unfancy(_Bx._Ptr)
			: _Bx._Buf);
		}

	union _Bxty
		{	
		_Bxty()
			{	
			}

		~_Bxty() noexcept
			{	
			}

		value_type _Buf[_BUF_SIZE];
		pointer _Ptr;
		char _Alias[_BUF_SIZE];	
		} _Bx;

	size_type _Mysize;	
	size_type _Myres;	
	};

		
template<class _Alloc_types>
	class _String_alloc
	{	
public:
	typedef _String_alloc<_Alloc_types> _Myt;
	typedef typename _Alloc_types::_Alloc _Alloc;
	typedef typename _Alloc_types::_Alty _Alty;
	typedef typename _Alloc_types::_Val_types _Val_types;

	typedef typename _Val_types::value_type value_type;
	typedef typename _Val_types::size_type size_type;
	typedef typename _Val_types::difference_type difference_type;
	typedef typename _Val_types::pointer pointer;
	typedef typename _Val_types::const_pointer const_pointer;
	typedef typename _Val_types::reference reference;
	typedef typename _Val_types::const_reference const_reference;

	typedef _String_iterator<_String_val<_Val_types> > iterator;
	typedef _String_const_iterator<_String_val<_Val_types> > const_iterator;

	enum
		{	
		_BUF_SIZE = _String_val<_Val_types>::_BUF_SIZE
		};

	enum
		{	
		_ALLOC_MASK = _String_val<_Val_types>::_ALLOC_MASK
		};

	value_type *_Myptr()
		{	
		return (_Get_data()._Myptr());
		}

	const value_type *_Myptr() const
		{	
		return (_Get_data()._Myptr());
		}

 
	_String_alloc()
		: _Mypair(_Zero_then_variadic_args_t())
		{	
		}

	template<class _Any_alloc,
		class = enable_if_t<!is_same<decay_t<_Any_alloc>, _Myt>::value> >
		_String_alloc(_Any_alloc&& _Al)
		: _Mypair(_One_then_variadic_args_t(),
			::std:: forward<_Any_alloc>(_Al))
		{	
		}

	void _Copy_alloc(const _Alty& _Al)
		{	
		_Pocca(_Getal(), _Al);
		}

	void _Move_alloc(_Alty& _Al)
		{	
		_Pocma(_Getal(), _Al);
		}

 



































































#line 679 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"

	void _Orphan_all()
		{	
		_Get_data()._Orphan_all();
		}

	void _Swap_all(_Myt& _Right)
		{	
		_Get_data()._Swap_all(_Right._Get_data());
		}

	_Alty& _Getal() noexcept
		{	
		return (_Mypair._Get_first());
		}

	const _Alty& _Getal() const noexcept
		{	
		return (_Mypair._Get_first());
		}

	_String_val<_Val_types>& _Get_data() noexcept
		{	
		return (_Mypair._Get_second());
		}

	const _String_val<_Val_types>& _Get_data() const noexcept
		{	
		return (_Mypair._Get_second());
		}

	typedef typename _String_val<_Val_types>::_Bxty _Bxty;

	_Bxty& _Bx() noexcept
		{	
		return (_Get_data()._Bx);
		}

	const _Bxty& _Bx() const noexcept
		{	
		return (_Get_data()._Bx);
		}

	size_type& _Mysize() noexcept
		{	
		return (_Get_data()._Mysize);
		}

	const size_type& _Mysize() const noexcept
		{	
		return (_Get_data()._Mysize);
		}

	size_type& _Myres() noexcept
		{	
		return (_Get_data()._Myres);
		}

	const size_type& _Myres() const noexcept
		{	
		return (_Get_data()._Myres);
		}

private:
	_Compressed_pair<_Alty, _String_val<_Val_types> > _Mypair;
	};

		
template<class _Elem,
	class _Traits,
	class _Alloc>
	class basic_string
		: public _String_alloc<_String_base_types<_Elem, _Alloc> >
	{	
public:
	typedef basic_string<_Elem, _Traits, _Alloc> _Myt;
	typedef _String_alloc<_String_base_types<_Elem, _Alloc> > _Mybase;
	typedef _Traits traits_type;
	typedef _Alloc allocator_type;

	typedef typename _Mybase::_Alty _Alty;

	typedef typename _Mybase::value_type value_type;
	typedef typename _Mybase::size_type size_type;
	typedef typename _Mybase::difference_type difference_type;
	typedef typename _Mybase::pointer pointer;
	typedef typename _Mybase::const_pointer const_pointer;
	typedef typename _Mybase::reference reference;
	typedef typename _Mybase::const_reference const_reference;

	typedef typename _Mybase::iterator iterator;
	typedef typename _Mybase::const_iterator const_iterator;

	typedef ::std:: reverse_iterator<iterator> reverse_iterator;
	typedef ::std:: reverse_iterator<const_iterator> const_reverse_iterator;

	basic_string(const _Myt& _Right)

		: _Mybase(_Right._Getal().select_on_container_copy_construction())


		{	
		_Tidy();
		assign(_Right, 0, npos);
		}

	basic_string(const _Myt& _Right, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Tidy();
		assign(_Right, 0, npos);
		}

	basic_string() noexcept(is_nothrow_default_constructible<_Alloc>::value)
		: _Mybase()
		{	
		_Tidy();
		}

	explicit basic_string(const _Alloc& _Al) noexcept
		: _Mybase(_Al)
		{	
		_Tidy();
		}

	basic_string(const _Myt& _Right, size_type _Roff,
		size_type _Count = npos)
		: _Mybase(_Right._Getal())
		{	
		_Tidy();
		assign(_Right, _Roff, _Count);
		}

	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
		const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Tidy();
		assign(_Right, _Roff, _Count);
		}

	basic_string(const _Elem *_Ptr, size_type _Count)
		: _Mybase()
		{	
		_Tidy();
		assign(_Ptr, _Count);
		}

	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Tidy();
		assign(_Ptr, _Count);
		}

	basic_string(const _Elem *_Ptr)
		: _Mybase()
		{	
		_Tidy();
		assign(_Ptr);
		}

	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Tidy();
		assign(_Ptr);
		}

	basic_string(size_type _Count, _Elem _Ch)
		: _Mybase()
		{	
		_Tidy();
		assign(_Count, _Ch);
		}

	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Tidy();
		assign(_Count, _Ch);
		}

	template<class _Iter,
		class = typename enable_if<_Is_iterator<_Iter>::value,
			void>::type>
		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc())
		: _Mybase(_Al)
		{	
		;
		_Tidy();
		_Construct(_Unchecked(_First), _Unchecked(_Last), _Iter_cat_t<_Iter>());
		}

	template<class _Iter>
		void _Construct(_Iter _First,
			_Iter _Last, input_iterator_tag)
		{	
		try {
		for (; _First != _Last; ++_First)
			append((size_type)1, (_Elem)*_First);
		} catch (...) {
		_Tidy(true);
		throw;
		}
		}

	template<class _Iter>
		void _Construct(_Iter _First,
			_Iter _Last, forward_iterator_tag)
		{	
		size_type _Count = ::std:: distance(_First, _Last);
		reserve(_Count);
		_Construct(_First, _Last, input_iterator_tag());
		}

	void _Construct(_Elem *_First,
		_Elem *_Last, random_access_iterator_tag)
		{	
		if (_First != _Last)
			assign(_First, _Last - _First);
		}

	void _Construct(const _Elem *_First,
		const _Elem *_Last, random_access_iterator_tag)
		{	
		if (_First != _Last)
			assign(_First, _Last - _First);
		}

	basic_string(_Myt&& _Right) noexcept
		: _Mybase(::std:: move(_Right._Getal()))
		{	
		_Tidy();
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	basic_string(_Myt&& _Right, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		if (this->_Getal() != _Right._Getal())
			assign(_Right.begin(), _Right.end());
		else
			_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	_Myt& operator=(_Myt&& _Right)
		noexcept(_Alty::propagate_on_container_move_assignment::value || _Alty::is_always_equal::value)
#line 928 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
		{	
		if (this != &_Right)
			{	
			_Tidy(true);

			if (_Alty::propagate_on_container_move_assignment::value
				&& this->_Getal() != _Right._Getal())
				this->_Move_alloc(_Right._Getal());

			if (this->_Getal() != _Right._Getal())
				assign(_Right.begin(), _Right.end());
			else
				_Assign_rv(::std:: forward<_Myt>(_Right));
			}
		return (*this);
		}

	_Myt& assign(_Myt&& _Right) noexcept
		{	
		if (this == &_Right)
			;
		else if (get_allocator() != _Right.get_allocator()
			&& this->_BUF_SIZE <= _Right._Myres())
			*this = _Right;
		else
			{	
			_Tidy(true);
			_Assign_rv(::std:: forward<_Myt>(_Right));
			}
		return (*this);
		}

	void _Assign_rv(_Myt&& _Right)
		{	
		if (_Right._Myres() < this->_BUF_SIZE)
			_Traits::move(this->_Bx()._Buf, _Right._Bx()._Buf,
				_Right._Mysize() + 1);
		else
			{	
			this->_Getal().construct(::std:: addressof(this->_Bx()._Ptr), _Right._Bx()._Ptr);
			_Right._Bx()._Ptr = pointer();
			}
		this->_Mysize() = _Right._Mysize();
		this->_Myres() = _Right._Myres();
		_Right._Tidy();
		}

	basic_string(::std:: initializer_list<_Elem> _Ilist,
		const _Alloc& _Al = allocator_type())
		: _Mybase(_Al)
		{	
		_Tidy();
		assign(_Ilist.begin(), _Ilist.end());
		}

	_Myt& operator=(::std:: initializer_list<_Elem> _Ilist)
		{	
		return (assign(_Ilist.begin(), _Ilist.end()));
		}

	_Myt& operator+=(::std:: initializer_list<_Elem> _Ilist)
		{	
		return (append(_Ilist.begin(), _Ilist.end()));
		}

	_Myt& assign(::std:: initializer_list<_Elem> _Ilist)
		{	
		return (assign(_Ilist.begin(), _Ilist.end()));
		}

	_Myt& append(::std:: initializer_list<_Elem> _Ilist)
		{	
		return (append(_Ilist.begin(), _Ilist.end()));
		}

	iterator insert(const_iterator _Where,
		::std:: initializer_list<_Elem> _Ilist)
		{	
		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
		}

	_Myt& replace(const_iterator _First, const_iterator _Last,
		::std:: initializer_list<_Elem> _Ilist)
		{	
		return (replace(_First, _Last, _Ilist.begin(), _Ilist.end()));
		}

	~basic_string() noexcept
		{	
		_Tidy(true);
		}

	 static const size_type npos;	

	_Myt& operator=(const _Myt& _Right)
		{	
		if (this != &_Right)
			{	
			if (this->_Getal() != _Right._Getal()
				&& _Alty::propagate_on_container_copy_assignment::value)
				{	
				_Tidy(true);
				this->_Copy_alloc(_Right._Getal());
				}

			assign(_Right);
			}
		return (*this);
		}

	_Myt& operator=(const _Elem *_Ptr)
		{	
		return (assign(_Ptr));
		}

	_Myt& operator=(_Elem _Ch)
		{	
		return (assign(1, _Ch));
		}

	_Myt& operator+=(const _Myt& _Right)
		{	
		return (append(_Right));
		}

	_Myt& operator+=(const _Elem *_Ptr)
		{	
		return (append(_Ptr));
		}

	_Myt& operator+=(_Elem _Ch)
		{	
		return (append((size_type)1, _Ch));
		}

	_Myt& append(const _Myt& _Right)
		{	
		return (append(_Right, 0, npos));
		}

	_Myt& append(const _Myt& _Right,
		size_type _Roff, size_type _Count = npos)
		{	
		_Right._Check_offset(_Roff);
		_Count = _Right._Clamp_suffix_size(_Roff, _Count);
		if (npos - this->_Mysize() <= _Count)
			_Xlen();	

		const size_type _Num = this->_Mysize() + _Count;
		if (0 < _Count && _Grow(_Num))
			{	
			_Traits::copy(this->_Myptr() + this->_Mysize(),
				_Right._Myptr() + _Roff, _Count);
			_Eos(_Num);
			}
		return (*this);
		}

	_Myt& append(const _Elem *_Ptr, size_type _Count)
		{	
		;
		if (_Inside(_Ptr))
			return (append(*this,
				_Ptr - this->_Myptr(), _Count));	
		if (npos - this->_Mysize() <= _Count)
			_Xlen();	

		const size_type _Num = this->_Mysize() + _Count;
		if (0 < _Count && _Grow(_Num))
			{	
			_Traits::copy(this->_Myptr() + this->_Mysize(), _Ptr, _Count);
			_Eos(_Num);
			}
		return (*this);
		}

	_Myt& append(const _Elem *_Ptr)
		{	
		;
		return (append(_Ptr, _Traits::length(_Ptr)));
		}

	_Myt& append(size_type _Count, _Elem _Ch)
		{	
		if (npos - this->_Mysize() <= _Count)
			_Xlen();	

		const size_type _Num = this->_Mysize() + _Count;
		if (0 < _Count && _Grow(_Num))
			{	
			_Chassign(this->_Mysize(), _Count, _Ch);
			_Eos(_Num);
			}
		return (*this);
		}

	template<class _Iter>
		typename enable_if<_Is_iterator<_Iter>::value,
			_Myt&>::type
		append(_Iter _First, _Iter _Last)
		{	
		return (replace(end(), end(), _First, _Last));
		}

	_Myt& append(const_pointer _First, const_pointer _Last)
		{	
		return (replace(end(), end(), _First, _Last));
		}

	_Myt& append(const_iterator _First, const_iterator _Last)
		{	
		return (replace(end(), end(), _First, _Last));
		}

	_Myt& assign(const _Myt& _Right)
		{	
		return (assign(_Right, 0, npos));
		}

	_Myt& assign(const _Myt& _Right,
		size_type _Roff, size_type _Count = npos)
		{	
		_Right._Check_offset(_Roff);
		_Count = _Right._Clamp_suffix_size(_Roff, _Count);

		if (this == &_Right)
			erase((size_type)(_Roff + _Count)), erase(0, _Roff);	
		else if (_Grow(_Count))
			{	
			_Traits::copy(this->_Myptr(),
				_Right._Myptr() + _Roff, _Count);
			_Eos(_Count);
			}
		return (*this);
		}

	_Myt& assign(const _Elem *_Ptr, size_type _Count)
		{	
		;
		if (_Inside(_Ptr))
			return (assign(*this,
				_Ptr - this->_Myptr(), _Count));	

		if (_Grow(_Count))
			{	
			_Traits::copy(this->_Myptr(), _Ptr, _Count);
			_Eos(_Count);
			}
		return (*this);
		}

	_Myt& assign(const _Elem *_Ptr)
		{	
		;
		return (assign(_Ptr, _Traits::length(_Ptr)));
		}

	_Myt& assign(size_type _Count, _Elem _Ch)
		{	
		if (_Count == npos)
			_Xlen();	

		if (_Grow(_Count))
			{	
			_Chassign(0, _Count, _Ch);
			_Eos(_Count);
			}
		return (*this);
		}

	template<class _Iter>
		typename enable_if<_Is_iterator<_Iter>::value,
			_Myt&>::type
		assign(_Iter _First, _Iter _Last)
		{	
		return (replace(begin(), end(), _First, _Last));
		}

	_Myt& assign(const_pointer _First, const_pointer _Last)
		{	
		return (replace(begin(), end(), _First, _Last));
		}

	_Myt& assign(const_iterator _First, const_iterator _Last)
		{	
		return (replace(begin(), end(), _First, _Last));
		}

	_Myt& insert(size_type _Off, const _Myt& _Right)
		{	
		return (insert(_Off, _Right, 0, npos));
		}

	_Myt& insert(size_type _Off,
		const _Myt& _Right, size_type _Roff, size_type _Count = npos)
		{	
		_Check_offset(_Off);
		_Right._Check_offset(_Roff);
		_Count = _Right._Clamp_suffix_size(_Roff, _Count);
		if (npos - this->_Mysize() <= _Count)
			_Xlen();	

		const size_type _Num = this->_Mysize() + _Count;
		if (0 < _Count && _Grow(_Num))
			{	
			_Traits::move(this->_Myptr() + _Off + _Count,
				this->_Myptr() + _Off,
				this->_Mysize() - _Off);	
			if (this == &_Right)
				_Traits::move(this->_Myptr() + _Off,
					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
						_Count);	
			else
				_Traits::copy(this->_Myptr() + _Off,
					_Right._Myptr() + _Roff, _Count);	
			_Eos(_Num);
			}
		return (*this);
		}

	_Myt& insert(size_type _Off,
		const _Elem *_Ptr, size_type _Count)
		{	
		;
		if (_Inside(_Ptr))
			return (insert(_Off, *this,
				_Ptr - this->_Myptr(), _Count));	
		_Check_offset(_Off);
		if (npos - this->_Mysize() <= _Count)
			_Xlen();	
		const size_type _Num = this->_Mysize() + _Count;
		if (0 < _Count && _Grow(_Num))
			{	
			_Traits::move(this->_Myptr() + _Off + _Count,
				this->_Myptr() + _Off,
				this->_Mysize() - _Off);	
			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	
			_Eos(_Num);
			}
		return (*this);
		}

	_Myt& insert(size_type _Off, const _Elem *_Ptr)
		{	
		;
		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
		}

	_Myt& insert(size_type _Off,
		size_type _Count, _Elem _Ch)
		{	
		_Check_offset(_Off);
		if (npos - this->_Mysize() <= _Count)
			_Xlen();	
		const size_type _Num = this->_Mysize() + _Count;
		if (0 < _Count && _Grow(_Num))
			{	
			_Traits::move(this->_Myptr() + _Off + _Count,
				this->_Myptr() + _Off,
				this->_Mysize() - _Off);	
			_Chassign(_Off, _Count, _Ch);	
			_Eos(_Num);
			}
		return (*this);
		}

	iterator insert(const_iterator _Where)
		{	
		return (insert(_Where, _Elem()));
		}

	iterator insert(const_iterator _Where, _Elem _Ch)
		{	
		size_type _Off = _Where - begin();
		insert(_Off, 1, _Ch);
		return (begin() + _Off);
		}

	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
		{	
		size_type _Off = _Where - begin();
		insert(_Off, _Count, _Ch);
		return (begin() + _Off);
		}

	template<class _Iter>
		typename enable_if<_Is_iterator<_Iter>::value,
			iterator>::type
		insert(const_iterator _Where, _Iter _First, _Iter _Last)
		{	
		size_type _Off = _Where - begin();
		replace(_Where, _Where, _First, _Last);
		return (begin() + _Off);
		}

	iterator insert(const_iterator _Where,
		const_pointer _First, const_pointer _Last)
		{	
		size_type _Off = _Where - begin();
		replace(_Where, _Where, _First, _Last);
		return (begin() + _Off);
		}

	iterator insert(const_iterator _Where,
		const_iterator _First, const_iterator _Last)
		{	
		size_type _Off = _Where - begin();
		replace(_Where, _Where, _First, _Last);
		return (begin() + _Off);
		}

	_Myt& erase(size_type _Off = 0)
		{	
		_Check_offset(_Off);
		_Eos(_Off);
		return (*this);
		}

	_Myt& erase(size_type _Off, size_type _Count)
		{	
		_Check_offset(_Off);
		if (this->_Mysize() - _Off <= _Count)
			_Eos(_Off);	
		else if (0 < _Count)
			{	
			value_type *_Ptr = this->_Myptr() + _Off;
			size_type _Newsize = this->_Mysize() - _Count;
			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
			_Eos(_Newsize);
			}
		return (*this);
		}

	iterator erase(const_iterator _Where)
		{	
		size_type _Count = _Where - begin();
		erase(_Count, 1);
		return (begin() + _Count);
		}

	iterator erase(const_iterator _First, const_iterator _Last)
		{	
		;
		size_type _Count = _First - begin();
		erase(_Count, _Last - _First);
		return (begin() + _Count);
		}

	void clear() noexcept
		{	
		_Eos(0);
		}

	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
		{	
		return (replace(_Off, _N0, _Right, 0, npos));
		}

	_Myt& replace(size_type _Off,
		size_type _N0, const _Myt& _Right, size_type _Roff,
			size_type _Count = npos)
		{	
		_Check_offset(_Off);
		_Right._Check_offset(_Roff);
		_N0 = _Clamp_suffix_size(_Off, _N0);
		_Count = _Right._Clamp_suffix_size(_Roff, _Count);
		if (npos - _Count <= this->_Mysize() - _N0)
			_Xlen();	

		const size_type _Nm = this->_Mysize() - _N0 - _Off;	
		const size_type _Newsize = this->_Mysize() + _Count - _N0;
		if (this->_Mysize() < _Newsize)
			_Grow(_Newsize);

		if (_Count == _N0)
			{	
			_Traits::move(this->_Myptr() + _Off,
				_Right._Myptr() + _Roff, _Count);	
			}
		else if (this != &_Right)
			{	
			_Traits::move(this->_Myptr() + _Off + _Count,
				this->_Myptr() + _Off + _N0, _Nm);	
			_Traits::copy(this->_Myptr() + _Off,
				_Right._Myptr() + _Roff, _Count);	
			}
		else if (_Count < _N0)
			{	
			_Traits::move(this->_Myptr() + _Off,
				this->_Myptr() + _Roff, _Count);	
			_Traits::move(this->_Myptr() + _Off + _Count,
				this->_Myptr() + _Off + _N0, _Nm);	
			}
		else if (_Roff <= _Off)
			{	
			_Traits::move(this->_Myptr() + _Off + _Count,
				this->_Myptr() + _Off + _N0, _Nm);	
			_Traits::move(this->_Myptr() + _Off,
				this->_Myptr() + _Roff, _Count);	
			}
		else if (_Off + _N0 <= _Roff)
			{	
			_Traits::move(this->_Myptr() + _Off + _Count,
				this->_Myptr() + _Off + _N0, _Nm);	
			_Traits::move(this->_Myptr() + _Off,
				this->_Myptr() + (_Roff + _Count - _N0),
				_Count);	
			}
		else
			{	
			_Traits::move(this->_Myptr() + _Off,
				this->_Myptr() + _Roff, _N0);	
			_Traits::move(this->_Myptr() + _Off + _Count,
				this->_Myptr() + _Off + _N0, _Nm);	
			_Traits::move(this->_Myptr() + _Off + _N0,
				this->_Myptr() + _Roff + _Count,
				_Count - _N0);	
			}

		_Eos(_Newsize);
		return (*this);
		}

	_Myt& replace(size_type _Off,
		size_type _N0, const _Elem *_Ptr, size_type _Count)
		{	
		;
		if (_Inside(_Ptr))
			return (replace(_Off, _N0, *this,
				_Ptr - this->_Myptr(),
				_Count));	
		_Check_offset(_Off);
		_N0 = _Clamp_suffix_size(_Off, _N0);
		if (npos - _Count <= this->_Mysize() - _N0)
			_Xlen();	
		size_type _Nm = this->_Mysize() - _N0 - _Off;

		if (_Count < _N0)
			_Traits::move(this->_Myptr() + _Off + _Count,
				this->_Myptr() + _Off + _N0,
				_Nm);	
		const size_type _Num = this->_Mysize() + _Count - _N0;
		if ((0 < _Count || 0 < _N0)
			&& _Grow(_Num))
			{	
			if (_N0 < _Count)
				_Traits::move(this->_Myptr() + _Off + _Count,
					this->_Myptr() + _Off + _N0, _Nm);	
			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	
			_Eos(_Num);
			}
		return (*this);
		}

	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
		{	
		;
		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
		}

	_Myt& replace(size_type _Off,
		size_type _N0, size_type _Count, _Elem _Ch)
		{	
		_Check_offset(_Off);
		_N0 = _Clamp_suffix_size(_Off, _N0);
		if (npos - _Count <= this->_Mysize() - _N0)
			_Xlen();	
		size_type _Nm = this->_Mysize() - _N0 - _Off;

		if (_Count < _N0)
			_Traits::move(this->_Myptr() + _Off + _Count,
				this->_Myptr() + _Off + _N0,
				_Nm);	
		const size_type _Num = this->_Mysize() + _Count - _N0;
		if ((0 < _Count || 0 < _N0)
			&& _Grow(_Num))
			{	
			if (_N0 < _Count)
				_Traits::move(this->_Myptr() + _Off + _Count,
					this->_Myptr() + _Off + _N0, _Nm);	
			_Chassign(_Off, _Count, _Ch);	
			_Eos(_Num);
			}
		return (*this);
		}

	_Myt& replace(const_iterator _First, const_iterator _Last,
		const _Myt& _Right)
		{	
		return (replace(_First - begin(), _Last - _First, _Right));
		}

	_Myt& replace(const_iterator _First, const_iterator _Last,
		const _Elem *_Ptr, size_type _Count)
		{	
		return (replace(_First - begin(), _Last - _First, _Ptr, _Count));
		}

	_Myt& replace(const_iterator _First, const_iterator _Last,
		const _Elem *_Ptr)
		{	
		return (replace(_First - begin(), _Last - _First, _Ptr));
		}

	_Myt& replace(const_iterator _First, const_iterator _Last,
		size_type _Count, _Elem _Ch)
		{	
		return (replace(_First - begin(), _Last - _First, _Count, _Ch));
		}

	template<class _Iter>
		typename enable_if<_Is_iterator<_Iter>::value,
			_Myt&>::type
		replace(const_iterator _First, const_iterator _Last,
			_Iter _First2, _Iter _Last2)
		{	
		_Myt _Right(_First2, _Last2);
		replace(_First, _Last, _Right);
		return (*this);
		}

	_Myt& replace(const_iterator _First, const_iterator _Last,
		const_pointer _First2, const_pointer _Last2)
		{	
		if (_First2 == _Last2)
			erase(_First - begin(), _Last - _First);
		else
			replace(_First - begin(), _Last - _First,
				&*_First2, _Last2 - _First2);
		return (*this);
		}

	_Myt& replace(const_iterator _First, const_iterator _Last,
		pointer _First2, pointer _Last2)
		{	
		if (_First2 == _Last2)
			erase(_First - begin(), _Last - _First);
		else
			replace(_First - begin(), _Last - _First,
				&*_First2, _Last2 - _First2);
		return (*this);
		}

	_Myt& replace(const_iterator _First, const_iterator _Last,
		const_iterator _First2, const_iterator _Last2)
		{	
		if (_First2 == _Last2)
			erase(_First - begin(), _Last - _First);
		else
			replace(_First - begin(), _Last - _First,
				&*_First2, _Last2 - _First2);
		return (*this);
		}

	_Myt& replace(const_iterator _First, const_iterator _Last,
		iterator _First2, iterator _Last2)
		{	
		if (_First2 == _Last2)
			erase(_First - begin(), _Last - _First);
		else
			replace(_First - begin(), _Last - _First,
				&*_First2, _Last2 - _First2);
		return (*this);
		}

	iterator begin() noexcept
		{	
		auto _Mydata = &this->_Get_data();
		return (iterator(this->_Getal().address(*_Mydata->_Myptr()), _Mydata));
		}

	const_iterator begin() const noexcept
		{	
		auto _Mydata = &this->_Get_data();
		return (const_iterator(this->_Getal().address(*_Mydata->_Myptr()), _Mydata));
		}

	iterator end() noexcept
		{	
		auto _Mydata = &this->_Get_data();
		return (iterator(this->_Getal().address(*_Mydata->_Myptr()) + _Mydata->_Mysize, _Mydata));
		}

	const_iterator end() const noexcept
		{	
		auto _Mydata = &this->_Get_data();
		return (const_iterator(this->_Getal().address(*_Mydata->_Myptr()) + _Mydata->_Mysize, _Mydata));
		}

	reverse_iterator rbegin() noexcept
		{	
		return (reverse_iterator(end()));
		}

	const_reverse_iterator rbegin() const noexcept
		{	
		return (const_reverse_iterator(end()));
		}

	reverse_iterator rend() noexcept
		{	
		return (reverse_iterator(begin()));
		}

	const_reverse_iterator rend() const noexcept
		{	
		return (const_reverse_iterator(begin()));
		}

	const_iterator cbegin() const noexcept
		{	
		return (begin());
		}

	const_iterator cend() const noexcept
		{	
		return (end());
		}

	const_reverse_iterator crbegin() const noexcept
		{	
		return (rbegin());
		}

	const_reverse_iterator crend() const noexcept
		{	
		return (rend());
		}

	void shrink_to_fit()
		{	
		if ((size() | this->_ALLOC_MASK) < capacity())
			{	
			_Myt _Tmp(*this);
			swap(_Tmp);
			}
		}

	reference at(size_type _Off)
		{	
		_Check_offset_exclusive(_Off);
		return (this->_Myptr()[_Off]);
		}

	const_reference at(size_type _Off) const
		{	
		_Check_offset_exclusive(_Off);
		return (this->_Myptr()[_Off]);
		}

	reference operator[](size_type _Off)
		{	
 



#line 1685 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"

#line 1687 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"

		return (this->_Myptr()[_Off]);
		}

	const_reference operator[](size_type _Off) const
		{	
 



#line 1698 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"

#line 1700 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"

		return (this->_Myptr()[_Off]);
		}

	void push_back(_Elem _Ch)
		{	
		auto& _Dx = this->_Get_data();
		auto& _Sz = _Dx._Mysize;
		if (_Sz == _Dx._Myres)
			_Grow(_Sz + 1); 
		auto _Ptr = _Dx._Myptr();
		_Traits::assign(_Ptr[_Sz], _Ch);
		++_Sz;
		_Traits::assign(_Ptr[_Sz], _Elem());
		}

	void pop_back()
		{	
		erase(this->_Mysize() - 1);	
		}

	reference front()
		{	
		return (*begin());
		}

	const_reference front() const
		{	
		return (*begin());
		}

	reference back()
		{	
		return (*(end() - 1));
		}

	const_reference back() const
		{	
		return (*(end() - 1));
		}

	const _Elem *c_str() const noexcept
		{	
		return (this->_Myptr());
		}

	const _Elem *data() const noexcept
		{	
		return (this->_Myptr());
		}






#line 1757 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"

	size_type length() const noexcept
		{	
		return (this->_Mysize());
		}

	size_type size() const noexcept
		{	
		return (this->_Mysize());
		}

	size_type max_size() const noexcept
		{	
		const size_type _Num = this->_Getal().max_size();
		return (_Num <= 1 ? 1 : _Num - 1);
		}

	void resize(size_type _Newsize)
		{	
		resize(_Newsize, _Elem());
		}

	void resize(size_type _Newsize, _Elem _Ch)
		{	
		if (_Newsize <= this->_Mysize())
			_Eos(_Newsize);
		else
			append(_Newsize - this->_Mysize(), _Ch);
		}

	size_type capacity() const noexcept
		{	
		return (this->_Myres());
		}

	void reserve(size_type _Newcap = 0)
		{	
		if (this->_Mysize() <= _Newcap && this->_Myres() != _Newcap)
			{	
			size_type _Size = this->_Mysize();
			if (_Grow(_Newcap, true))
				_Eos(_Size);
			}
		}

	bool empty() const noexcept
		{	
		return (this->_Mysize() == 0);
		}

	
	size_type copy(_Elem *_Ptr,
		size_type _Count, size_type _Off = 0) const
		{	
		;
		_Check_offset(_Off);
		_Count = _Clamp_suffix_size(_Off, _Count);
		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
		return (_Count);
		}

	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
		size_type _Count, size_type _Off = 0) const
		{	
		;
		_Check_offset(_Off);
		_Count = _Clamp_suffix_size(_Off, _Count);
		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
		return (_Count);
		}

	void _Swap_bx(_Myt& _Right)
		{	
		if (this->_BUF_SIZE <= this->_Myres())
			if (this->_BUF_SIZE <= _Right._Myres())
				_Swap_adl(this->_Bx()._Ptr, _Right._Bx()._Ptr);
			else
				{	
				pointer _Ptr = this->_Bx()._Ptr;
				this->_Getal().destroy(::std:: addressof(this->_Bx()._Ptr));
				_Traits::copy(this->_Bx()._Buf,
					_Right._Bx()._Buf, _Right._Mysize() + 1);
				this->_Getal().construct(::std:: addressof(_Right._Bx()._Ptr), _Ptr);
				}
		else
			if (_Right._Myres() < this->_BUF_SIZE)
				::std:: swap(this->_Bx()._Buf, _Right._Bx()._Buf);
			else
				{	
				pointer _Ptr = _Right._Bx()._Ptr;
				this->_Getal().destroy(::std:: addressof(_Right._Bx()._Ptr));
				_Traits::copy(_Right._Bx()._Buf,
					this->_Bx()._Buf, this->_Mysize() + 1);
				this->_Getal().construct(::std:: addressof(this->_Bx()._Ptr), _Ptr);
				}
		}

	void swap(_Myt& _Right)
		noexcept(_Alty::propagate_on_container_swap::value || _Alty::is_always_equal::value)
#line 1857 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
		{	
		if (this != &_Right)
			{	
			_Pocs(this->_Getal(), _Right._Getal());
			this->_Swap_all(_Right);
			_Swap_bx(_Right);
			::std:: swap(this->_Mysize(), _Right._Mysize());
			::std:: swap(this->_Myres(), _Right._Myres());
			}
		}

	size_type find(const _Myt& _Right, size_type _Off = 0) const noexcept
		{	
		return (find(_Right._Myptr(), _Off, _Right.size()));
		}

	size_type find(const _Elem *_Ptr,
		size_type _Off, size_type _Count) const
		{	
		;
		if (_Count == 0 && _Off <= this->_Mysize())
			return (_Off);	

		size_type _Nm;
		if (_Off < this->_Mysize() && _Count <= (_Nm = this->_Mysize() - _Off))
			{	
			const _Elem *_Uptr, *_Vptr;
			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
					return (_Uptr - this->_Myptr());	
			}

		return (npos);	
		}

	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
		{	
		;
		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
		}

	size_type find(_Elem _Ch, size_type _Off = 0) const
		{	
		return (find((const _Elem *)&_Ch, _Off, 1));
		}

	size_type rfind(const _Myt& _Right, size_type _Off = npos) const noexcept
		{	
		return (rfind(_Right._Myptr(), _Off, _Right.size()));
		}

	size_type rfind(const _Elem *_Ptr,
		size_type _Off, size_type _Count) const
		{	
		;
		if (_Count == 0)
			return (_Off < this->_Mysize() ? _Off
				: this->_Mysize());	
		if (_Count <= this->_Mysize())
			{	
			const _Elem *_Uptr = this->_Myptr() +
				(_Off < this->_Mysize() - _Count ? _Off
					: this->_Mysize() - _Count);
			for (; ; --_Uptr)
				if (_Traits::eq(*_Uptr, *_Ptr)
					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
					return (_Uptr - this->_Myptr());	
				else if (_Uptr == this->_Myptr())
					break;	
			}

		return (npos);	
		}

	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
		{	
		;
		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
		}

	size_type rfind(_Elem _Ch, size_type _Off = npos) const
		{	
		return (rfind((const _Elem *)&_Ch, _Off, 1));
		}

	size_type find_first_of(const _Myt& _Right,
		size_type _Off = 0) const noexcept
		{	
		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
		}

	size_type find_first_of(const _Elem *_Ptr,
		size_type _Off, size_type _Count) const
		{	
		;
		if (0 < _Count && _Off < this->_Mysize())
			{	
			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
			for (const _Elem *_Uptr = this->_Myptr() + _Off;
				_Uptr < _Vptr; ++_Uptr)
				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
					return (_Uptr - this->_Myptr());	
			}

		return (npos);	
		}

	size_type find_first_of(const _Elem *_Ptr,
		size_type _Off = 0) const
		{	
		;
		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
		}

	size_type find_first_of(_Elem _Ch,
		size_type _Off = 0) const
		{	
		return (find((const _Elem *)&_Ch, _Off, 1));
		}

	size_type find_last_of(const _Myt& _Right,
		size_type _Off = npos) const noexcept
		{	
		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
		}

	size_type find_last_of(const _Elem *_Ptr,
		size_type _Off, size_type _Count) const
		{	
		;
		if (0 < _Count && 0 < this->_Mysize())
			{	
			const _Elem *_Uptr = this->_Myptr()
				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
			for (; ; --_Uptr)
				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
					return (_Uptr - this->_Myptr());	
				else if (_Uptr == this->_Myptr())
					break;	
			}

		return (npos);	
		}

	size_type find_last_of(const _Elem *_Ptr,
		size_type _Off = npos) const
		{	
		;
		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
		}

	size_type find_last_of(_Elem _Ch,
		size_type _Off = npos) const
		{	
		return (rfind((const _Elem *)&_Ch, _Off, 1));
		}

	size_type find_first_not_of(const _Myt& _Right,
		size_type _Off = 0) const noexcept
		{	
		return (find_first_not_of(_Right._Myptr(), _Off,
			_Right.size()));
		}

	size_type find_first_not_of(const _Elem *_Ptr,
		size_type _Off, size_type _Count) const
		{	
		;
		if (_Off < this->_Mysize())
			{	
			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
			for (const _Elem *_Uptr = this->_Myptr() + _Off;
				_Uptr < _Vptr; ++_Uptr)
				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
					return (_Uptr - this->_Myptr());
			}
		return (npos);
		}

	size_type find_first_not_of(const _Elem *_Ptr,
		size_type _Off = 0) const
		{	
		;
		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
		}

	size_type find_first_not_of(_Elem _Ch,
		size_type _Off = 0) const
		{	
		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
		}

	size_type find_last_not_of(const _Myt& _Right,
		size_type _Off = npos) const noexcept
		{	
		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
		}

	size_type find_last_not_of(const _Elem *_Ptr,
		size_type _Off, size_type _Count) const
		{	
		;
		if (0 < this->_Mysize())
			{	
			const _Elem *_Uptr = this->_Myptr()
				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
			for (; ; --_Uptr)
				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
					return (_Uptr - this->_Myptr());
				else if (_Uptr == this->_Myptr())
					break;
			}
		return (npos);
		}

	size_type find_last_not_of(const _Elem *_Ptr,
		size_type _Off = npos) const
		{	
		;
		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
		}

	size_type find_last_not_of(_Elem _Ch,
		size_type _Off = npos) const
		{	
		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
		}

	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
		{	
		return (_Myt(*this, _Off, _Count, get_allocator()));
		}

	static int _Traits_compare(const _Elem * const _Left, const size_type _Left_size,
		const _Elem * const _Right, const size_type _Right_size)
		{	
		const size_type _Min_size = _Left_size < _Right_size ? _Left_size : _Right_size;
		const int _Ans = _Traits::compare(_Left, _Right, _Min_size);

		if (_Ans != 0)
			return (_Ans);

		if (_Left_size < _Right_size)
			return (-1);

		if (_Left_size > _Right_size)
			return (1);

		return (0);
		}

	size_type _Clamp_suffix_size(const size_type _Off, const size_type _Size) const
		{	
		const size_type _Max_effective_size = this->_Mysize() - _Off;
		if (_Size <= _Max_effective_size)
			return (_Size);
		else
			return (_Max_effective_size);
		}

	int compare(const _Myt& _Right) const noexcept
		{	
		return (_Traits_compare(this->_Myptr(), this->_Mysize(),
			_Right._Myptr(), _Right._Mysize()));
		}

	int compare(size_type _Off,
		size_type _N0, const _Myt& _Right) const
		{	
		_Check_offset(_Off);
		return (_Traits_compare(this->_Myptr() + _Off, _Clamp_suffix_size(_Off, _N0),
			_Right._Myptr(), _Right._Mysize()));
		}

	int compare(size_type _Off,
		size_type _N0, const _Myt& _Right,
		size_type _Roff, size_type _Count = npos) const
		{	
		_Check_offset(_Off);
		_Right._Check_offset(_Roff);
		return (_Traits_compare(this->_Myptr() + _Off, _Clamp_suffix_size(_Off, _N0),
			_Right._Myptr() + _Roff, _Right._Clamp_suffix_size(_Roff, _Count)));
		}

	int compare(const _Elem *_Ptr) const
		{	
		;
		return (_Traits_compare(this->_Myptr(), this->_Mysize(),
			_Ptr, _Traits::length(_Ptr)));
		}

	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
		{	
		;
		_Check_offset(_Off);
		return (_Traits_compare(this->_Myptr() + _Off, _Clamp_suffix_size(_Off, _N0),
			_Ptr, _Traits::length(_Ptr)));
		}

	int compare(size_type _Off,
		size_type _N0, const _Elem *_Ptr, size_type _Count) const
		{	
		;
		_Check_offset(_Off);
		return (_Traits_compare(this->_Myptr() + _Off, _Clamp_suffix_size(_Off, _N0),
			_Ptr, _Count));
		}

	allocator_type get_allocator() const noexcept
		{	
		allocator_type _Ret(this->_Getal());
		return (_Ret);
		}

	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
		{	
		if (_Count == 1)
			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
		else
			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
		}

	void _Copy(size_type _Newsize, size_type _Oldlen)
		{	
		size_type _Newres = _Newsize | this->_ALLOC_MASK;
		if (max_size() < _Newres)
			_Newres = _Newsize;	
		else if (this->_Myres() / 2 <= _Newres / 3)
			;
		else if (this->_Myres() <= max_size() - this->_Myres() / 2)
			_Newres = this->_Myres()
				+ this->_Myres() / 2;	
		else
			_Newres = max_size();	

		pointer _Ptr;
		try {
			_Ptr = this->_Getal().allocate(_Newres + 1);
		} catch (...) {
			_Newres = _Newsize;	
			try {
				_Ptr = this->_Getal().allocate(_Newres + 1);
			} catch (...) {
			_Tidy(true);	
			throw;
			}
		}

		if (0 < _Oldlen)
			_Traits::copy(_Unfancy(_Ptr), this->_Myptr(),
				_Oldlen);	
		_Tidy(true);
		this->_Getal().construct(::std:: addressof(this->_Bx()._Ptr), _Ptr);
		this->_Myres() = _Newres;
		_Eos(_Oldlen);
		}

	void _Eos(size_type _Newsize)
		{	
		auto& _Dx = this->_Get_data();
		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());
		}

	bool _Grow(size_type _Newsize,
		bool _Trim = false)
		{	
		if (max_size() < _Newsize)
			_Xlen();	
		if (this->_Myres() < _Newsize)
			_Copy(_Newsize, this->_Mysize());	
		else if (_Trim && _Newsize < this->_BUF_SIZE)
			_Tidy(true,	
				_Newsize < this->_Mysize() ? _Newsize : this->_Mysize());
		else if (_Newsize == 0)
			_Eos(0);	
		return (0 < _Newsize);	
		}

	bool _Inside(const _Elem *_Ptr)
		{	
		if (_Ptr == nullptr_t{} || _Ptr < this->_Myptr()
			|| this->_Myptr() + this->_Mysize() <= _Ptr)
			return (false);	
		else
			return (true);
		}

	void _Tidy(bool _Built = false,
		size_type _Newsize = 0)
		{	
		if (!_Built)
			;
		else if (this->_BUF_SIZE <= this->_Myres())
			{	
			pointer _Ptr = this->_Bx()._Ptr;
			this->_Getal().destroy(::std:: addressof(this->_Bx()._Ptr));
			if (0 < _Newsize)
				_Traits::copy(this->_Bx()._Buf,
					_Unfancy(_Ptr), _Newsize);
			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);
			}
		this->_Myres() = this->_BUF_SIZE - 1;
		_Eos(_Newsize);
		}

	[[noreturn]] void _Xlen() const
		{	
		_Xlength_error("string too long");
		}

	void _Check_offset(const size_type _Off) const
		{	
		if (this->_Mysize() < _Off)
			_Xran();
		}

	void _Check_offset_exclusive(const size_type _Off) const
		{	
		if (this->_Mysize() <= _Off)
			_Xran();
		}

	[[noreturn]] void _Xran() const
		{	
		_Xout_of_range("invalid string position");
		}
	};

		
template<class _Elem,
	class _Traits,
	class _Alloc>
	 const typename basic_string<_Elem, _Traits, _Alloc>::size_type
		basic_string<_Elem, _Traits, _Alloc>::npos =
			(typename basic_string<_Elem, _Traits, _Alloc>::size_type)(-1);

		

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	void swap(basic_string<_Elem, _Traits, _Alloc>& _Left,
		basic_string<_Elem, _Traits, _Alloc>& _Right)
			noexcept(noexcept(_Left.swap(_Right)))
	{	
	_Left.swap(_Right);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	basic_string<_Elem, _Traits, _Alloc> _Ans;
	_Ans.reserve(_Left.size() + _Right.size());
	_Ans += _Left;
	_Ans += _Right;
	return (_Ans);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		const _Elem *_Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	basic_string<_Elem, _Traits, _Alloc> _Ans;
	_Ans.reserve(_Traits::length(_Left) + _Right.size());
	_Ans += _Left;
	_Ans += _Right;
	return (_Ans);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		const _Elem _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	basic_string<_Elem, _Traits, _Alloc> _Ans;
	_Ans.reserve(1 + _Right.size());
	_Ans += _Left;
	_Ans += _Right;
	return (_Ans);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const _Elem *_Right)
	{	
	basic_string<_Elem, _Traits, _Alloc> _Ans;
	_Ans.reserve(_Left.size() + _Traits::length(_Right));
	_Ans += _Left;
	_Ans += _Right;
	return (_Ans);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const _Elem _Right)
	{	
	basic_string<_Elem, _Traits, _Alloc> _Ans;
	_Ans.reserve(_Left.size() + 1);
	_Ans += _Left;
	_Ans += _Right;
	return (_Ans);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		basic_string<_Elem, _Traits, _Alloc>&& _Right)
	{	
	return (::std:: move(_Right.insert(0, _Left)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		basic_string<_Elem, _Traits, _Alloc>&& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (::std:: move(_Left.append(_Right)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		basic_string<_Elem, _Traits, _Alloc>&& _Left,
		basic_string<_Elem, _Traits, _Alloc>&& _Right)
	{	
	if (_Right.size() <= _Left.capacity() - _Left.size()
		|| _Right.capacity() - _Right.size() < _Left.size())
		return (::std:: move(_Left.append(_Right)));
	else
		return (::std:: move(_Right.insert(0, _Left)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		const _Elem *_Left,
		basic_string<_Elem, _Traits, _Alloc>&& _Right)
	{	
	return (::std:: move(_Right.insert(0, _Left)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		const _Elem _Left,
		basic_string<_Elem, _Traits, _Alloc>&& _Right)
	{	
	typedef typename basic_string<_Elem, _Traits, _Alloc>::size_type
		size_type;
	return (::std:: move(_Right.insert((size_type)0, (size_type)1, _Left)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		basic_string<_Elem, _Traits, _Alloc>&& _Left,
		const _Elem *_Right)
	{	
	return (::std:: move(_Left.append(_Right)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		basic_string<_Elem, _Traits, _Alloc>&& _Left,
		const _Elem _Right)
	{	
	return (::std:: move(_Left.append(1, _Right)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator==(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
	{	
	return (_Left.compare(_Right) == 0);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator==(
		const _Elem * _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (_Right.compare(_Left) == 0);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator==(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const _Elem *_Right)
	{	
	return (_Left.compare(_Right) == 0);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator!=(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
	{	
	return (!(_Left == _Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator!=(
		const _Elem *_Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator!=(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const _Elem *_Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator<(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
	{	
	return (_Left.compare(_Right) < 0);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator<(
		const _Elem * _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (_Right.compare(_Left) > 0);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator<(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const _Elem *_Right)
	{	
	return (_Left.compare(_Right) < 0);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator>(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
	{	
	return (_Right < _Left);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator>(
		const _Elem * _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator>(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const _Elem *_Right)
	{	
	return (_Right < _Left);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator<=(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
	{	
	return (!(_Right < _Left));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator<=(
		const _Elem * _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator<=(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const _Elem *_Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator>=(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
	{	
	return (!(_Left < _Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator>=(
		const _Elem * _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (!(_Left < _Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator>=(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const _Elem *_Right)
	{	
	return (!(_Left < _Right));
	}

typedef basic_string<char, char_traits<char>, allocator<char> >
	string;
typedef basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >
	wstring;

	
template<class _Elem,
	class _Traits,
	class _Alloc>
	struct hash<basic_string<_Elem, _Traits, _Alloc> >
	{	
	typedef basic_string<_Elem, _Traits, _Alloc> argument_type;
	typedef size_t result_type;

	size_t operator()(const argument_type& _Keyval) const
		{	
		return (_Hash_seq((const unsigned char *)_Keyval.c_str(),
			_Keyval.size() * sizeof (_Elem)));
		}
	};

typedef basic_string<char16_t, char_traits<char16_t>, allocator<char16_t> >
	u16string;
typedef basic_string<char32_t, char_traits<char32_t>, allocator<char32_t> >
	u32string;
}

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 2664 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
#line 2665 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"






#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 
namespace std {
		
class logic_error
	: public ::std:: exception
	{	
public:
	typedef ::std:: exception _Mybase;

	explicit logic_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit logic_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
	};

		
class domain_error
	: public logic_error
	{	
public:
	typedef logic_error _Mybase;

	explicit domain_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit domain_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
	};

		
class invalid_argument
	: public logic_error
	{	
public:
	typedef logic_error _Mybase;

	explicit invalid_argument(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit invalid_argument(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
	};

		
class length_error
	: public logic_error
	{	
public:
	typedef logic_error _Mybase;

	explicit length_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit length_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
	};

		
class out_of_range
	: public logic_error
	{	
public:
	typedef logic_error _Mybase;

	explicit out_of_range(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit out_of_range(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 152 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
	};

		
class runtime_error
	: public ::std:: exception
	{	
public:
	typedef ::std:: exception _Mybase;

	explicit runtime_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit runtime_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
	};

		
class overflow_error
	: public runtime_error
	{	
public:
	typedef runtime_error _Mybase;

	explicit overflow_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit overflow_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 208 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
	};

		
class underflow_error
	: public runtime_error
	{	
public:
	typedef runtime_error _Mybase;

	explicit underflow_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit underflow_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 236 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
	};

		
class range_error
	: public runtime_error
	{	
public:
	typedef runtime_error _Mybase;

	explicit range_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit range_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
	};
}
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"





#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\typeinfo"














#pragma once







#pragma pack(push,8)
#pragma warning(push,3)


#pragma warning(disable: 4275)

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"







#pragma once

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"































































































































































































































































































































#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"


#pragma pack(push, 8)






#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
    struct __type_info_node;
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"




    extern __type_info_node __type_info_root_node;
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"



__pragma(pack(push, 8)) extern "C" {


#pragma warning(push)
#pragma warning(disable: 4510 4512 4610) 
struct __std_type_info_data
{
    char const* _UndecoratedName;
    char const  _DecoratedName[1];
};
#pragma warning(pop)

__declspec(dllimport) int __cdecl __std_type_info_compare(
      __std_type_info_data const* _Lhs,
      __std_type_info_data const* _Rhs
    );

__declspec(dllimport) size_t __cdecl __std_type_info_hash(
      __std_type_info_data const* _Data
    );

__declspec(dllimport) char const* __cdecl __std_type_info_name(
      __std_type_info_data* _Data,
      __type_info_node*     _RootNode
    );

} __pragma(pack(pop))



class type_info
{
public:

    type_info(type_info const&) = delete;
    type_info& operator=(type_info const&) = delete;

    size_t hash_code() const throw()
    {
        return __std_type_info_hash(&_Data);
    }

    bool operator==(type_info const& _Other) const throw()
    {
        return __std_type_info_compare(&_Data, &_Other._Data) == 0;
    }

    bool operator!=(type_info const& _Other) const throw()
    {
        return __std_type_info_compare(&_Data, &_Other._Data) != 0;
    }

    bool before(type_info const& _Other) const throw()
    {
        return __std_type_info_compare(&_Data, &_Other._Data) < 0;
    }

    char const* name() const throw()
    {
        


        return __std_type_info_name(&_Data, &__type_info_root_node);
        #line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
    }

    char const* raw_name() const throw()
    {
        return _Data._DecoratedName;
    }

    virtual ~type_info() throw();

private:

    mutable __std_type_info_data _Data;
};

namespace std {
	using ::type_info;
}



namespace std {

class bad_cast
    : public exception
{
public:

    bad_cast() throw()
        : exception("bad cast", 1)
    {
    }

    static bad_cast __construct_from_string_literal(char const* const _Message) throw()
    {
        return bad_cast(_Message, 1);
    }

private:

    bad_cast(char const* const _Message, int) throw()
        : exception(_Message, 1)
    {
    }
};

class bad_typeid
    : public exception
{
public:

    bad_typeid() throw()
        : exception("bad typeid", 1)
    {
    }

    static bad_typeid __construct_from_string_literal(char const* const _Message) throw()
    {
        return bad_typeid(_Message, 1);
    }

private:

    friend class __non_rtti_object;

    bad_typeid(char const* const _Message, int) throw()
        : exception(_Message, 1)
    {
    }
};

class __non_rtti_object
    : public bad_typeid
{
public:

    static __non_rtti_object __construct_from_string_literal(char const* const _Message) throw()
    {
        return __non_rtti_object(_Message, 1);
    }

private:

    __non_rtti_object(char const* const _Message, int) throw()
        : bad_typeid(_Message, 1)
    {
    }
};

} 

#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
#pragma pack(pop)
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\typeinfo"

 























































#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\typeinfo"


#pragma pack(pop)
#pragma warning(pop)
#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\typeinfo"
#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\typeinfo"







#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"

#pragma once



#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"







#pragma once





__pragma(pack(push, 8)) extern "C" {









  __declspec(dllimport) int __cdecl _isctype(  int _C,   int _Type);
  __declspec(dllimport) int __cdecl _isctype_l(  int _C,   int _Type,   _locale_t _Locale);
   __declspec(dllimport) int __cdecl isalpha(  int _C);
  __declspec(dllimport) int __cdecl _isalpha_l(  int _C,   _locale_t _Locale);
   __declspec(dllimport) int __cdecl isupper(  int _C);
  __declspec(dllimport) int __cdecl _isupper_l(  int _C,   _locale_t _Locale);
   __declspec(dllimport) int __cdecl islower(  int _C);
  __declspec(dllimport) int __cdecl _islower_l(  int _C,   _locale_t _Locale);


   __declspec(dllimport) int __cdecl isdigit(  int _C);

  __declspec(dllimport) int __cdecl _isdigit_l(  int _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl isxdigit(  int _C);
  __declspec(dllimport) int __cdecl _isxdigit_l(  int _C,   _locale_t _Locale);


   __declspec(dllimport) int __cdecl isspace(  int _C);

  __declspec(dllimport) int __cdecl _isspace_l(  int _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl ispunct(  int _C);
  __declspec(dllimport) int __cdecl _ispunct_l(  int _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl isblank(  int _C);
  __declspec(dllimport) int __cdecl _isblank_l(  int _C,   _locale_t _Locale);
   __declspec(dllimport) int __cdecl isalnum(  int _C);
  __declspec(dllimport) int __cdecl _isalnum_l(  int _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl isprint(  int _C);
  __declspec(dllimport) int __cdecl _isprint_l(  int _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl isgraph(  int _C);
  __declspec(dllimport) int __cdecl _isgraph_l(  int _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl iscntrl(  int _C);
  __declspec(dllimport) int __cdecl _iscntrl_l(  int _C,   _locale_t _Locale);


   __declspec(dllimport) int __cdecl toupper(  int _C);


   __declspec(dllimport) int __cdecl tolower(  int _C);

   __declspec(dllimport) int __cdecl _tolower(  int _C);
  __declspec(dllimport) int __cdecl _tolower_l(  int _C,   _locale_t _Locale);
   __declspec(dllimport) int __cdecl _toupper(  int _C);
  __declspec(dllimport) int __cdecl _toupper_l(  int _C,   _locale_t _Locale);

  __declspec(dllimport) int __cdecl __isascii(  int _C);
  __declspec(dllimport) int __cdecl __toascii(  int _C);
  __declspec(dllimport) int __cdecl __iscsymf(  int _C);
  __declspec(dllimport) int __cdecl __iscsym(  int _C);









 
    
    
    






















    
    
    



        
    #line 115 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"



    
    
    
    
    
    
    
    



    












#line 143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"

    __inline __crt_locale_data_public* __cdecl __acrt_get_locale_data_prefix(void const volatile* const _LocalePointers)
    {
        _locale_t const _TypedLocalePointers = (_locale_t)_LocalePointers;
        return (__crt_locale_data_public*)_TypedLocalePointers->locinfo;
    }

    



    __inline int __cdecl _chvalidchk_l(
              int       const _C,
              int       const _Mask,
          _locale_t const _Locale
        )
    {
        


        if (_Locale)
        {
            return __acrt_get_locale_data_prefix(_Locale)->_locale_pctype[_C] & _Mask;
        }
            
        return (__pctype_func()[(_C)] & (_Mask));
        #line 170 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
    }

    
    

    __inline int __cdecl _ischartype_l(
              int       const _C,
              int       const _Mask,
          _locale_t const _Locale
        )
    {
        if (_Locale && __acrt_get_locale_data_prefix(_Locale)->_locale_mb_cur_max > 1)
        {
            return _isctype_l(_C, _Mask, _Locale);
        }

        return _chvalidchk_l(_C, _Mask, _Locale);
    }

    
    
    
    
    
    
    
    
    
    
    
    

    
    

    
    


    
    
    
    
    

    
    
    
    

#line 221 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"



    
    
    
    
    
#line 230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"



#line 234 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
} __pragma(pack(pop))
#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"







#pragma once




__pragma(pack(push, 8)) extern "C" {















struct lconv
{
    char*    decimal_point;
    char*    thousands_sep;
    char*    grouping;
    char*    int_curr_symbol;
    char*    currency_symbol;
    char*    mon_decimal_point;
    char*    mon_thousands_sep;
    char*    mon_grouping;
    char*    positive_sign;
    char*    negative_sign;
    char     int_frac_digits;
    char     frac_digits;
    char     p_cs_precedes;
    char     p_sep_by_space;
    char     n_cs_precedes;
    char     n_sep_by_space;
    char     p_sign_posn;
    char     n_sign_posn;
    wchar_t* _W_decimal_point;
    wchar_t* _W_thousands_sep;
    wchar_t* _W_int_curr_symbol;
    wchar_t* _W_currency_symbol;
    wchar_t* _W_mon_decimal_point;
    wchar_t* _W_mon_thousands_sep;
    wchar_t* _W_positive_sign;
    wchar_t* _W_negative_sign;
};





















__declspec(dllimport) void __cdecl _lock_locales(void);
__declspec(dllimport) void __cdecl _unlock_locales(void);


__declspec(dllimport) int __cdecl _configthreadlocale(
      int _Flag
    );


__declspec(dllimport) char* __cdecl setlocale(
            int         _Category,
      char const* _Locale
    );


__declspec(dllimport) struct lconv* __cdecl localeconv(void);


__declspec(dllimport) _locale_t __cdecl _get_current_locale(void);


__declspec(dllimport) _locale_t __cdecl _create_locale(
        int         _Category,
      char const* _Locale
    );

__declspec(dllimport) void __cdecl _free_locale(
      _locale_t _Locale
    );



__declspec(dllimport) wchar_t* __cdecl _wsetlocale(
            int            _Category,
      wchar_t const* _Locale
    );


__declspec(dllimport) _locale_t __cdecl _wcreate_locale(
        int            _Category,
      wchar_t const* _Locale
    );



__declspec(dllimport) wchar_t**    __cdecl ___lc_locale_name_func(void);
__declspec(dllimport) unsigned int __cdecl ___lc_codepage_func   (void);
__declspec(dllimport) unsigned int __cdecl ___lc_collate_cp_func (void);



} __pragma(pack(pop))
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"



 #pragma pack(push,8)
 #pragma warning(push,3)
 
 


 
  
extern "C" {
  #line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
 #line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"

		












		










 
 
 
 
 
 
 
 

typedef struct _Collvec
	{	
	unsigned int _Page;		
	wchar_t *_LocaleName;
	} _Collvec;

typedef struct _Ctypevec
	{	
	unsigned int _Page;		
	const short *_Table;
	int _Delfl;
	wchar_t *_LocaleName;
	} _Ctypevec;

typedef struct _Cvtvec
	{	
	unsigned int _Page;		
	unsigned int _Mbcurmax;
	int _Isclocale;	
	unsigned char _Isleadbyte[32];	
	} _Cvtvec;

		
__declspec(dllimport) _Collvec __cdecl _Getcoll(void);
__declspec(dllimport) _Ctypevec __cdecl _Getctype(void);
__declspec(dllimport) _Cvtvec __cdecl _Getcvt(void);
__declspec(dllimport) int __cdecl _Getdateorder(void);

 








__declspec(dllimport) int __cdecl _Mbrtowc(  wchar_t *, const char *, size_t,
	mbstate_t *, const _Cvtvec *);
 #line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"

__declspec(dllimport) float __cdecl _Stof(const char *,
	    char **, long);
__declspec(dllimport) double __cdecl _Stod(const char *,
	    char **, long);
__declspec(dllimport) long double __cdecl _Stold(const char *,
	    char **, long);

__declspec(dllimport) int __cdecl _Strcoll(const char *, const char *,
	const char *, const char *, const _Collvec *);
__declspec(dllimport) size_t __cdecl _Strxfrm(
	    char *_String1,
	  char *_End1, const char *, const char *, const _Collvec *);
__declspec(dllimport) int __cdecl _Tolower(int, const _Ctypevec *);
__declspec(dllimport) int __cdecl _Toupper(int, const _Ctypevec *);
__declspec(dllimport) int __cdecl _Wcrtomb(  char *, wchar_t, mbstate_t *,
	const _Cvtvec *);
__declspec(dllimport) int __cdecl _Wcscoll(const wchar_t *, const wchar_t *,
	const wchar_t *, const wchar_t *, const _Collvec *);
__declspec(dllimport) size_t __cdecl _Wcsxfrm(
	    wchar_t *_String1,
	  wchar_t *_End1, const wchar_t *, const wchar_t *, const _Collvec *);

__declspec(dllimport) short __cdecl _Getwctype(wchar_t, const _Ctypevec *);
__declspec(dllimport) const wchar_t *__cdecl _Getwctypes(const wchar_t *,
	const wchar_t *, short *, const _Ctypevec *);
__declspec(dllimport) wchar_t __cdecl _Towlower(wchar_t, const _Ctypevec *);
__declspec(dllimport) wchar_t __cdecl _Towupper(wchar_t, const _Ctypevec *);

 
  
}
  #line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
 #line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"


extern "C" {
 
 
__declspec(dllimport) char *__cdecl _Getdays(void);

 
 
__declspec(dllimport) char *__cdecl _Getmonths(void);

__declspec(dllimport) void *__cdecl _Gettnames(void);

 
__declspec(dllimport) size_t __cdecl _Strftime(  char *,
	  size_t _Maxsize,   const char *,   const struct tm *,
	  void *);

 
 
__declspec(dllimport) wchar_t *__cdecl _W_Getdays(void);

 
 
__declspec(dllimport) wchar_t *__cdecl _W_Getmonths(void);

__declspec(dllimport) void *__cdecl _W_Gettnames(void);

 
__declspec(dllimport) size_t __cdecl _Wcsftime(  wchar_t *,
	  size_t _Maxsize,   const wchar_t *,   const struct tm *,
	  void *);
}

 







__declspec(dllimport) _locale_t __cdecl _GetLocaleForCP(unsigned int);
 #line 174 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 179 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"



 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4412)

namespace std {
		
class __declspec(dllimport) _Timevec
	{	
public:
	 _Timevec(void *_Ptr = 0)
		: _Timeptr(_Ptr)
		{	
		}

	 _Timevec(const _Timevec& _Right)
		{	
		*this = _Right;
		}

	 ~_Timevec() noexcept
		{	
		free(_Timeptr);
		}

	_Timevec&  operator=(const _Timevec& _Right)
		{	
		_Timeptr = _Right._Timeptr;
		((_Timevec *)&_Right)->_Timeptr = 0;
		return (*this);
		}

	void * _Getptr() const
		{	
		return (_Timeptr);
		}

private:
	void *_Timeptr;	
	};

		
class __declspec(dllimport) _Locinfo
	{	
public:
	typedef ::_Collvec _Collvec;
	typedef ::_Ctypevec _Ctypevec;
	typedef ::_Cvtvec _Cvtvec;
	typedef ::std:: _Timevec _Timevec;

	static  void __cdecl _Locinfo_ctor(
		_Locinfo *, const char *);
	static  void __cdecl _Locinfo_ctor(
		_Locinfo *, int, const char *);
	static  void __cdecl _Locinfo_dtor(
		_Locinfo *);
	static  _Locinfo& __cdecl _Locinfo_Addcats(
		_Locinfo *, int, const char *);

	 _Locinfo(const char *_Pch = "C")
 
		: _Lock(0)
 #line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"

		{	
		if (_Pch == 0)
			throw runtime_error("bad locale name");
		_Locinfo_ctor(this, _Pch);
		}

	 _Locinfo(int _Cat, const char *_Pch)
 
		: _Lock(0)
 #line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"

		{	
		if (_Pch == 0)
			throw runtime_error("bad locale name");
		_Locinfo_ctor(this, _Cat, _Pch);
		}

	 ~_Locinfo() noexcept
		{	
		_Locinfo_dtor(this);
		}

	_Locinfo&  _Addcats(int _Cat, const char *_Pch)
		{	
		if (_Pch == 0)
			throw runtime_error("bad locale name");
		return (_Locinfo_Addcats(this, _Cat, _Pch));
		}

	const char * _Getname() const
		{	
		return (_Newlocname._C_str());
		}

	_Collvec  _Getcoll() const
		{	
		return (::_Getcoll());
		}

	_Ctypevec  _Getctype() const
		{	
		return (::_Getctype());
		}

	_Cvtvec  _Getcvt() const
		{	
		return (::_Getcvt());
		}

	const lconv * _Getlconv() const
		{	
		return (localeconv());
		}

	_Timevec  _Gettnames() const
		{	
		return (_Timevec(::_Gettnames()));
		}

	const char * _Getdays() const
		{	
		const char *_Ptr = ::_Getdays();

		if (_Ptr != 0)
			{	
			((_Locinfo *)this)->_Days = _Ptr;
			free((void *)_Ptr);
			}
		return (!_Days._Empty() ? _Days._C_str()
			: ":Sun:Sunday:Mon:Monday:Tue:Tuesday:Wed:Wednesday"
				":Thu:Thursday:Fri:Friday:Sat:Saturday");
		}

	const char * _Getmonths() const
		{	
		const char *_Ptr = ::_Getmonths();

		if (_Ptr != 0)
			{	
			((_Locinfo *)this)->_Months = _Ptr;
			free((void *)_Ptr);
			}
		return (!_Months._Empty() ? _Months._C_str()
			: ":Jan:January:Feb:February:Mar:March"
				":Apr:April:May:May:Jun:June"
				":Jul:July:Aug:August:Sep:September"
				":Oct:October:Nov:November:Dec:December");
		}

	const char * _Getfalse() const
		{	
		return ("false");
		}

	const char * _Gettrue() const
		{	
		return ("true");
		}

	int  _Getdateorder() const
		{	
		return (::_Getdateorder());
		}

	_Timevec  _W_Gettnames() const
		{	
		return (_Timevec(::_W_Gettnames()));
		}

	const unsigned short * _W_Getdays() const
		{	
		const wchar_t *_Ptr = ::_W_Getdays();

		if (_Ptr != 0)
			{	
			((_Locinfo *)this)->_W_Days = _Ptr;
			free((void *)_Ptr);
			}
		return ((const unsigned short *)(!_W_Days._Empty()
			? _W_Days._C_str()
			: L":Sun:Sunday:Mon:Monday:Tue:Tuesday:Wed:Wednesday"
				L":Thu:Thursday:Fri:Friday:Sat:Saturday"));
		}

	const unsigned short * _W_Getmonths() const
		{	
		const wchar_t *_Ptr = ::_W_Getmonths();

		if (_Ptr != 0)
			{	
			((_Locinfo *)this)->_W_Months = _Ptr;
			free((void *)_Ptr);
			}
		return ((const unsigned short *)(!_W_Months._Empty()
			? _W_Months._C_str()
			: L":Jan:January:Feb:February:Mar:March"
				L":Apr:April:May:May:Jun:June"
				L":Jul:July:Aug:August:Sep:September"
				L":Oct:October:Nov:November:Dec:December"));
		}

	_Locinfo(const _Locinfo&) = delete;
	_Locinfo& operator=(const _Locinfo&) = delete;

private:
 



	_Lockit _Lock;	
 #line 227 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"

	_Yarn<char> _Days;	
	_Yarn<char> _Months;	
	_Yarn<wchar_t> _W_Days;	
	_Yarn<wchar_t> _W_Months;	
	_Yarn<char> _Oldlocname;	
	_Yarn<char> _Newlocname;	
	};

		
template<class _Elem> inline
	int __cdecl _LStrcoll(const _Elem *_First1, const _Elem *_Last1,
		const _Elem *_First2, const _Elem *_Last2,
			const _Locinfo::_Collvec *)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, ++_First2)
		if (*_First1 < *_First2)
			return (-1);	
		else if (*_First2 < *_First1)
			return (+1);	
	return (_First2 != _Last2 ? -1 : _First1 != _Last1 ? +1 : 0);
	}

template<> inline
	int __cdecl _LStrcoll(const char *_First1, const char *_Last1,
		const char *_First2, const char *_Last2,
			const _Locinfo::_Collvec *_Vector)
	{	
	return (_Strcoll(_First1, _Last1, _First2, _Last2, _Vector));
	}

template<> inline
	int __cdecl _LStrcoll(const wchar_t *_First1, const wchar_t *_Last1,
		const wchar_t *_First2, const wchar_t *_Last2,
			const _Locinfo::_Collvec *_Vector)
	{	
	return (_Wcscoll(_First1, _Last1, _First2, _Last2, _Vector));
	}

		
template<class _Elem> inline
	size_t __cdecl _LStrxfrm(_Elem *_First1, _Elem *_Last1,
		const _Elem *_First2, const _Elem *_Last2,
			const _Locinfo::_Collvec *)
	{	
	size_t _Count = _Last2 - _First2;
	if (_Count <= (size_t)(_Last1 - _First1))
		::memcpy_s((_First1), ((_Last1 - _First1) * sizeof (_Elem)), (_First2), (_Count * sizeof (_Elem)));
#line 276 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
	return (_Count);
	}

template<> inline
	size_t __cdecl _LStrxfrm( 
		  char *_First1,   char *_Last1,
		const char *_First2, const char *_Last2,
			const _Locinfo::_Collvec *_Vector)
	{	
	return (_Strxfrm(_First1, _Last1, _First2, _Last2, _Vector));
	}

template<> inline
	size_t __cdecl _LStrxfrm( 
		  wchar_t *_First1,   wchar_t *_Last1,
		const wchar_t *_First2, const wchar_t *_Last2,
			const _Locinfo::_Collvec *_Vector)
	{	
	return (_Wcsxfrm(_First1, _Last1, _First2, _Last2, _Vector));
	}
}
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 301 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
#line 302 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"





#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xfacet"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 
 






namespace std {
	
class __declspec(dllimport) _Facet_base
	{	
public:
	virtual  ~_Facet_base() noexcept
		{	
		}

	
	virtual void  _Incref() = 0;

	
	virtual _Facet_base *  _Decref() = 0;
	};

 


#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xfacet"
void __cdecl _Facet_Register(_Facet_base *);
 #line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xfacet"
}
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xfacet"
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xfacet"

 



#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4412 28197)

namespace std {
		
template<class _Dummy>
	class _Locbase
	{	
public:
	 static const int collate = ((1 << (1)) >> 1);
	 static const int ctype = ((1 << (2)) >> 1);
	 static const int monetary = ((1 << (3)) >> 1);
	 static const int numeric = ((1 << (4)) >> 1);
	 static const int time = ((1 << (5)) >> 1);
	 static const int messages = ((1 << (6)) >> 1);
	 static const int all = (((1 << ((6 + 1))) >> 1) - 1);
	 static const int none = 0;
	};

template<class _Dummy>
	const int _Locbase<_Dummy>::collate;
template<class _Dummy>
	const int _Locbase<_Dummy>::ctype;
template<class _Dummy>
	const int _Locbase<_Dummy>::monetary;
template<class _Dummy>
	const int _Locbase<_Dummy>::numeric;
template<class _Dummy>
	const int _Locbase<_Dummy>::time;
template<class _Dummy>
	const int _Locbase<_Dummy>::messages;
template<class _Dummy>
	const int _Locbase<_Dummy>::all;
template<class _Dummy>
	const int _Locbase<_Dummy>::none;

		
class locale;
template<class _Facet>
	const _Facet& __cdecl use_facet(const locale&);
template<class _Elem>
	class collate;

struct __declspec(dllimport) _Crt_new_delete
	{	
  
































	};

class locale
	: public _Locbase<int>, public _Crt_new_delete
	{	
public:
	typedef int category;

			
	class __declspec(dllimport) id
		{	
	public:
		 id(size_t _Val = 0)
			: _Id(_Val)
			{	
			}

		 operator size_t()
			{	
			if (_Id == 0)
				{	
				{ ::std:: _Lockit _Lock(0);
					if (_Id == 0)
						_Id = ++_Id_cnt;
				}
				}
			return (_Id);
			}

	private:
		size_t _Id;	

		 static int _Id_cnt;

	public:
		 id(const id&) = delete;
		id&  operator=(const id&) = delete;
		};

	class _Locimp;

			
	class __declspec(dllimport) facet
		: public _Facet_base, public _Crt_new_delete
		{	
	public:
		static size_t __cdecl _Getcat(const facet ** = 0,
			const locale * = 0)
			{	
			return ((size_t)(-1));
			}

		virtual void  _Incref()
			{	
			_InterlockedIncrement(reinterpret_cast<volatile long *>(&_Myrefs));
			}

		virtual _Facet_base * _Decref()
			{	
			if (_InterlockedDecrement(reinterpret_cast<volatile long *>(&_Myrefs)) == 0)
				return (this);
			else
				return (0);
			}

	private:
		_Atomic_counter_t _Myrefs;	

	protected:
		explicit  facet(size_t _Initrefs = 0)
			{	
			_Init_atomic_counter(_Myrefs, (_Atomic_integral_t)_Initrefs);
			}

		virtual  ~facet() noexcept
			{	
			}

	public:
		 facet(const facet&) = delete;
		facet&  operator=(const facet&) = delete;
		};

			
 #pragma warning(push)
 #pragma warning(disable: 4275)

	class __declspec(dllimport) _Locimp
		: public facet
		{	
	protected:
		 ~_Locimp() noexcept
		{	
		_Locimp_dtor(this);
		}

	private:
		static  _Locimp *__cdecl
			_New_Locimp(bool _Transparent = false);
		static  _Locimp *__cdecl
			_New_Locimp(const _Locimp& _Right);

		static  void __cdecl
			_Locimp_dtor(_Locimp *);
		static  void __cdecl
			_Locimp_Addfac(_Locimp *, facet *, size_t);	
		static void __cdecl
			_Locimp_ctor(_Locimp *, const _Locimp&);

		friend class locale;

		 _Locimp(bool _Transparent)
			: locale::facet(1), _Facetvec(0), _Facetcount(0),
				_Catmask(none), _Xparent(_Transparent),
					_Name("*")
			{	
			}

		 _Locimp(const _Locimp& _Right)
			: locale::facet(1), _Facetvec(0), _Facetcount(_Right._Facetcount),
				_Catmask(_Right._Catmask), _Xparent(_Right._Xparent),
					_Name(_Right._Name.c_str())
			{	
			_Locimp_ctor(this, _Right);
			}

		void  _Addfac(facet *_Pfacet, size_t _Id)
			{	
			_Locimp_Addfac(this, _Pfacet, _Id);
			}

		static _Locimp *__cdecl _Makeloc(const _Locinfo&,
			category, _Locimp *, const locale *);	

		static void __cdecl _Makewloc(const _Locinfo&,
			category, _Locimp *, const locale *);	

 
		static void __cdecl _Makeushloc(const _Locinfo&,
			category, _Locimp *, const locale *);	
 #line 237 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"

		static void __cdecl _Makexloc(const _Locinfo&,
			category, _Locimp *, const locale *);	

		facet **_Facetvec;	
		size_t _Facetcount;	
		category _Catmask;	
		bool _Xparent;	
		_Yarn<char> _Name;	

		 static _Locimp *_Clocptr;

public:
		_Locimp&  operator=(const _Locimp&) = delete;
		};

 #pragma warning(pop)

	template<class _Elem,
		class _Traits,
		class _Alloc>
		bool operator()(const basic_string<_Elem, _Traits, _Alloc>& _Left,
			const basic_string<_Elem, _Traits, _Alloc>& _Right) const
		{	
		const ::std:: collate<_Elem>& _Coll_fac =
			use_facet< ::std:: collate<_Elem> >(*this);

		return (_Coll_fac.compare(_Left.c_str(), _Left.c_str() + _Left.size(),
			_Right.c_str(), _Right.c_str() + _Right.size()) < 0);
		}

	template<class _Facet>
		locale combine(const locale& _Loc) const
		{	
		_Facet *_Facptr;

		try {
			_Facptr = (_Facet *)&use_facet<_Facet>(_Loc);
		} catch (...) {
			_Xruntime_error("locale::combine facet missing");
		}

		_Locimp *_Newimp = _Locimp::_New_Locimp(*_Ptr);
		_Newimp->_Addfac(_Facptr, _Facet::id);
		_Newimp->_Catmask = none;
		_Newimp->_Name = "*";
		return (locale(_Newimp));
		}

	template<class _Facet>
		locale(const locale& _Loc, const _Facet *_Facptr)
			: _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
		{	
		if (_Facptr != 0)
			{	
			_Ptr->_Addfac((_Facet *)_Facptr, _Facet::id);
			_Ptr->_Catmask = none;
			_Ptr->_Name = "*";
			}
		}

	locale(_Uninitialized)
		{	
		}

 



















#line 323 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
	locale(const locale& _Right) noexcept
		: _Ptr(_Right._Ptr)
		{	
		_Ptr->_Incref();
		}

	locale() noexcept
		: _Ptr(_Init(true))
		{	
		}

 
	locale(const locale& _Loc, const locale& _Other,
		category _Cat)
		: _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
		{	
		if (_Cat != none)
			{	
			try {
				{ _Locinfo _Lobj;
					_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, &_Other);
					_Lobj._Addcats(_Loc._Ptr->_Catmask,
						_Loc.name().c_str());
					_Lobj._Addcats(_Other._Ptr->_Catmask,
						_Other.name().c_str());
					_Ptr->_Catmask = _Loc._Ptr->_Catmask
						| _Other._Ptr->_Catmask;
					_Ptr->_Name = _Lobj._Getname();
				}
			} catch (...) {
			delete _Ptr->_Decref();
			throw;
			}
			}
		}

private:
	void _Construct(const string &_Str,
		category _Cat)
		{	
		bool _Bad = false;
		_Init();
		if (_Cat != none)
			{	
			try {
				{ _Locinfo _Lobj(_Cat, _Str.c_str());
					if (_Badname(_Lobj))
						_Bad = true;
					else
						{	
						_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0);
						_Ptr->_Catmask = _Cat;
						_Ptr->_Name = _Str.c_str();
						}
				}
			} catch (...) {
			delete _Ptr->_Decref();
			throw;
			}
			}

		if (_Bad)
			{	
			delete _Ptr->_Decref();
			_Xruntime_error("bad locale name");
			}
		}

public:
	explicit locale(const char *_Locname,
		category _Cat = all)
		: _Ptr(_Locimp::_New_Locimp())
		{	
		
		
		if (_Locname == 0)
			_Xruntime_error("bad locale name");
		_Construct(_Locname, _Cat);
		}

	locale(const locale& _Loc, const char *_Locname,
		category _Cat)
		: _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
		{	
		
		
		if (_Locname == 0)
			_Xruntime_error("bad locale name");
		_Construct(_Locname, _Cat);
		}

	explicit locale(const string& _Str,
		category _Cat = all)
		: _Ptr(_Locimp::_New_Locimp())
		{	
		_Construct(_Str, _Cat);
		}

	locale(const locale& _Loc, const string& _Str,
		category _Cat)
		: _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
		{	
		_Construct(_Str, _Cat);
		}
 #line 428 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"

	~locale() noexcept
		{	
		if (_Ptr != 0)
			delete _Ptr->_Decref();
		}

	locale& operator=(const locale& _Right) noexcept
		{	
		if (_Ptr != _Right._Ptr)
			{	
			delete _Ptr->_Decref();
			_Ptr = _Right._Ptr;
			_Ptr->_Incref();
			}
		return (*this);
		}
 #line 446 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"

	string name() const
		{	
		return (_Ptr == 0 ? string() : _Ptr->_Name.c_str());
		}

	const char *c_str() const
		{	
		return (_Ptr == 0 ? "" : _Ptr->_Name.c_str());
		}

	const facet *_Getfacet(size_t _Id) const
		{	
		const facet *_Facptr = _Id < _Ptr->_Facetcount
			? _Ptr->_Facetvec[_Id] : 0;	
		if (_Facptr != 0 || !_Ptr->_Xparent)
			return (_Facptr);	
		else
			{	
			locale::_Locimp *_Ptr0 = _Getgloballocale();
			return (_Id < _Ptr0->_Facetcount
				? _Ptr0->_Facetvec[_Id]	
				: 0);	
			}
		}

	bool operator==(const locale& _Loc) const
		{	
		return (_Ptr == _Loc._Ptr
			|| (name().compare("*") != 0
				&& name().compare(_Loc.name()) == 0));
		}

	bool operator!=(const locale& _Right) const
		{	
		return (!(*this == _Right));
		}

	static __declspec(dllimport) const locale& __cdecl
		classic();	

	static __declspec(dllimport) locale __cdecl
		global(const locale&);	

	static __declspec(dllimport) locale __cdecl
		empty();	

private:
	locale(_Locimp *_Ptrimp)
		: _Ptr(_Ptrimp)
		{	
		}

	static __declspec(dllimport) _Locimp *__cdecl
		_Init(bool _Do_incref = false);	
	static __declspec(dllimport) _Locimp *__cdecl
		_Getgloballocale();
	static __declspec(dllimport) void __cdecl
		_Setgloballocale(void *);

	bool _Badname(const _Locinfo& _Lobj)
		{	
		return (:: strcmp(_Lobj._Getname(), "*") == 0);
		}

	_Locimp *_Ptr;	
	};

		

 
















#line 534 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"

template<class _Facet>
	struct _Facetptr
	{	
	 static const locale::facet *_Psave;
	};

template<class _Facet>
	 const locale::facet *_Facetptr<_Facet>::
		_Psave = 0;

  

  


template<class _Facet> inline
	const _Facet& __cdecl use_facet(const locale& _Loc)

	{	
 



#line 559 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
	{ ::std:: _Lockit _Lock(0);	
		const locale::facet *_Psave =
			_Facetptr<_Facet>::_Psave;	

		size_t _Id = _Facet::id;
		const locale::facet *_Pf = _Loc._Getfacet(_Id);

		if (_Pf != 0)
			;	
		else if (_Psave != 0)
			_Pf = _Psave;	
		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

 

			throw ::std:: bad_cast();	

 

#line 579 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"

		else
			{	
			_Pf = _Psave;
			_Facetptr<_Facet>::_Psave = _Psave;

			locale::facet *_Pfmod = (_Facet *)_Psave;
			_Pfmod->_Incref();

 


#line 592 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
			_Facet_Register(_Pfmod);
 #line 594 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
			}

		return ((const _Facet&)(*_Pf));	
	}
 #line 599 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
	}	

		
template<class _Elem,
	class _InIt> inline
	int __cdecl _Getloctxt(_InIt& _First, _InIt& _Last, size_t _Numfields,
		const _Elem *_Ptr)
	{	
	for (size_t _Off = 0; _Ptr[_Off] != (_Elem)0; ++_Off)
		if (_Ptr[_Off] == _Ptr[0])
			++_Numfields;	
	string _Str(_Numfields, '\0');	

	int _Ans = -2;	
	for (size_t _Column = 1; ; ++_Column, (void)++_First, _Ans = -1)
		{	
		bool _Prefix = false;	
		size_t _Off = 0;	
		size_t _Field = 0;	

		for (; _Field < _Numfields; ++_Field)
			{	
			for (; _Ptr[_Off] != (_Elem)0 && _Ptr[_Off] != _Ptr[0]; ++_Off)
				;	

			if (_Str[_Field] != '\0')
				_Off += _Str[_Field];	
			else if (_Ptr[_Off += _Column] == _Ptr[0]
				|| _Ptr[_Off] == (_Elem)0)
				{	
				_Str[_Field] = (char)(_Column < 127
					? _Column : 127);	
				_Ans = (int)_Field;	
				}
			else if (_First == _Last || _Ptr[_Off] != *_First)
				_Str[_Field] = (char)(_Column < 127
					? _Column : 127);	
			else
				_Prefix = true;	
			}

		if (!_Prefix || _First == _Last)
			break;	
		}
	return (_Ans);	
	}

		



template<class _Elem> inline
	char __cdecl _Maklocbyte(_Elem _Char,
		const _Locinfo::_Cvtvec&)
	{	
	return ((char)(unsigned char)_Char);
	}

template<> inline
	char __cdecl _Maklocbyte(wchar_t _Char,
		const _Locinfo::_Cvtvec& _Cvt)
	{	
	char _Byte = '\0';
	mbstate_t _Mbst1 = {};
	_Wcrtomb(&_Byte, _Char, &_Mbst1, &_Cvt);
	return (_Byte);
	}

 
template<> inline
	char __cdecl _Maklocbyte(unsigned short _Char,
		const _Locinfo::_Cvtvec &_Cvt)
	{	
	char _Byte = '\0';
	mbstate_t _Mbst1 = {};
	_Wcrtomb(&_Byte, (wchar_t)_Char, &_Mbst1, &_Cvt);
	return (_Byte);
	}
 #line 678 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"

		



template<class _Elem> inline
	_Elem __cdecl _Maklocchr(char _Byte, _Elem *,
		const _Locinfo::_Cvtvec&)
	{	
	return ((_Elem)(unsigned char)_Byte);
	}

template<> inline
	wchar_t __cdecl _Maklocchr(char _Byte, wchar_t *,
		const _Locinfo::_Cvtvec& _Cvt)
	{	
	wchar_t _Wc = L'\0';
	mbstate_t _Mbst1 = {};
	_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst1, &_Cvt);
	return (_Wc);
	}

 
template<> inline
	unsigned short __cdecl _Maklocchr(char _Byte, unsigned short *,
		const _Locinfo::_Cvtvec &_Cvt)
	{	
	unsigned short _Wc = (unsigned short)0;
	mbstate_t _Mbst1 = {};
	_Mbrtowc((wchar_t *)&_Wc, &_Byte, 1, &_Mbst1, &_Cvt);
	return (_Wc);
	}
 #line 711 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"

		



template<class _Elem> inline
	_Elem *__cdecl _Maklocstr(const char *_Ptr, _Elem *,
		const _Locinfo::_Cvtvec&)
	{	
	size_t _Count = :: strlen(_Ptr) + 1;

	_Elem *_Ptrdest = (_Elem *)calloc(_Count, sizeof (_Elem));
#line 724 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"

	if (!_Ptrdest)
		_Xbad_alloc();

 #pragma warning(push)
 #pragma warning(disable: 6011)	
	for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)
		*_Ptrnext = (_Elem)(unsigned char)*_Ptr;
 #pragma warning(pop)

	return (_Ptrdest);
	}

template<> inline
	wchar_t *__cdecl _Maklocstr(const char *_Ptr, wchar_t *,
		const _Locinfo::_Cvtvec& _Cvt)
	{	
	size_t _Count, _Count1;
	size_t _Wchars;
	const char *_Ptr1;
	int _Bytes;
	wchar_t _Wc;
	mbstate_t _Mbst1 = {};

	_Count1 = :: strlen(_Ptr) + 1;
	for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;
		_Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)
		if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)
			break;
	++_Wchars;	

	wchar_t *_Ptrdest = (wchar_t *)calloc(_Wchars, sizeof (wchar_t));
#line 757 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"

	if (!_Ptrdest)
		_Xbad_alloc();
	wchar_t *_Ptrnext = _Ptrdest;
	mbstate_t _Mbst2 = {};

 #pragma warning(push)
 #pragma warning(disable: 6011)	
	for (; 0 < _Wchars;
		_Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)
		if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)
			break;
	*_Ptrnext = L'\0';
 #pragma warning(pop)

	return (_Ptrdest);
	}

 
template<> inline
	unsigned short *__cdecl _Maklocstr(const char *_Ptr, unsigned short *,
		const _Locinfo::_Cvtvec &_Cvt)
	{	
	size_t _Count, _Count1;
	size_t _Wchars;
	const char *_Ptr1;
	int _Bytes;
	unsigned short _Wc;
	mbstate_t _Mbst1 = {};

	_Count1 = :: strlen(_Ptr) + 1;
	for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;
		_Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)
		if ((_Bytes =
			_Mbrtowc((wchar_t *)&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)
			break;
	++_Wchars;	

	wchar_t *_Ptrdest = (wchar_t *)calloc(_Wchars, sizeof (wchar_t));
#line 797 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"

	if (!_Ptrdest)
		_Xbad_alloc();

	wchar_t *_Ptrnext = _Ptrdest;
	mbstate_t _Mbst2 = {};
	for (; 0 < _Wchars;
		_Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)
		if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)
			break;
	*_Ptrnext = L'\0';
	return ((unsigned short *)_Ptrdest);
	}
 #line 811 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"

		
 #pragma warning(push)
 #pragma warning(disable: 4275)

class __declspec(dllimport) codecvt_base
	: public locale::facet
	{	
public:
	enum
		{	
		ok, partial, error, noconv};
	typedef int result;

	 codecvt_base(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		}

	bool  always_noconv() const noexcept
		{	
		return (do_always_noconv());
		}

	int  max_length() const noexcept
		{	
		return (do_max_length());
		}

	int  encoding() const noexcept
		{	
		return (do_encoding());
		}

	 ~codecvt_base() noexcept
		{	
		}

protected:
	virtual bool  do_always_noconv() const noexcept
		{	
		return (false);
		}

	virtual int  do_max_length() const noexcept
		{	
		return (1);
		}

	virtual int  do_encoding() const noexcept
		{	
		return (1);	
		}
	};

 #pragma warning(pop)

		
template<class _Elem,
	class _Byte,
	class _Statype>
	class codecvt
		: public codecvt_base
	{	
public:
	typedef _Elem intern_type;
	typedef _Byte extern_type;
	typedef _Statype state_type;

	result  in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		return (do_in(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_out(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  unshift(_Statype& _State,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_unshift(_State, _First2, _Last2, _Mid2));
		}

	int  length(_Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		return (do_length(_State, _First1, _Last1, _Count));
		}

	 static locale::id id;	

	explicit  codecvt(size_t _Refs = 0)
		: codecvt_base(_Refs)
		{	
		_Init(_Locinfo());
		}

	 codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
		: codecvt_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new codecvt<_Elem, _Byte, _Statype>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

protected:
	virtual  ~codecvt() noexcept
		{	
		}

	void  _Init(const _Locinfo&)
		{	
		}

	virtual bool  do_always_noconv() const noexcept
		{	
		return (is_same<_Byte, _Elem>::value);
		}

	virtual result  do_in(_Statype&,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		_Mid1 = _First1, _Mid2 = _First2;
		if (is_same<_Byte, _Elem>::value)
			return (noconv);	
		else
			{	
			for (; _Mid1 != _Last1 && _Mid2 != _Last2; ++_Mid1, ++_Mid2)
				*_Mid2 = (_Elem)*_Mid1;
			return (ok);
			}
		}

	virtual result  do_out(_Statype&,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		_Mid1 = _First1, _Mid2 = _First2;
		if (is_same<_Byte, _Elem>::value)
			return (noconv);	
		else
			{	
			for (; _Mid1 != _Last1 && _Mid2 != _Last2; ++_Mid1, ++_Mid2)
				*_Mid2 = (_Byte)*_Mid1;
			return (ok);
			}
		}

	virtual result  do_unshift(_Statype&,
		_Byte *_First2, _Byte *, _Byte *&_Mid2) const
		{	
		_Mid2 = _First2;
		return (ok);	
		}

	virtual int  do_length(_Statype&, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		return ((int)(_Count < (size_t)(_Last1 - _First1)
			? _Count : _Last1 - _First1));	
		}
	};

		
template<class _Elem,
	class _Byte,
	class _Statype>
	 locale::id codecvt<_Elem, _Byte, _Statype>::id;

		
enum _Codecvt_mode {
	_Consume_header = 4,
	_Generate_header = 2
	};

		
template<>
	class __declspec(dllimport) codecvt<char16_t, char, _Mbstatet>
	: public codecvt_base
	{	
public:
	typedef codecvt<char16_t, char, _Mbstatet> _Mybase;
	typedef char16_t _Elem;
	typedef char _Byte;
	typedef _Mbstatet _Statype;
	typedef _Elem intern_type;
	typedef _Byte extern_type;
	typedef _Statype state_type;

	result  in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		return (do_in(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_out(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  unshift(_Statype& _State,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_unshift(_State,
			_First2, _Last2, _Mid2));
		}

	int  length(_Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		return (do_length(_State, _First1, _Last1, _Count));
		}

	 static locale::id id;

	explicit  codecvt(size_t _Refs = 0)
		: codecvt_base(_Refs), _Maxcode(0x10ffff), _Mode(_Consume_header)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
		: codecvt_base(_Refs), _Maxcode(0x10ffff), _Mode(_Consume_header)
		{	
		_Init(_Lobj);
		}

	 codecvt(const _Locinfo& _Lobj, unsigned long _Maxcode_arg,
		_Codecvt_mode _Mode_arg, size_t _Refs = 0)
		: codecvt_base(_Refs), _Maxcode(_Maxcode_arg), _Mode(_Mode_arg)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new codecvt<_Elem, _Byte, _Statype>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

protected:
	virtual  ~codecvt() noexcept
		{	
		}

	void  _Init(const _Locinfo&)
		{	
		}

	virtual result  do_in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		unsigned short *_Pstate = (unsigned short *)&_State;
		_Mid1 = _First1;
		_Mid2 = _First2;

		for (; _Mid1 != _Last1 && _Mid2 != _Last2; )
			{	
			unsigned char _By = (unsigned char)*_Mid1;
			unsigned long _Ch;
			int _Nextra, _Nskip;

			if (*_Pstate <= 1)
				;	
			else if (_By < 0x80 || 0xc0 <= _By)
				return (_Mybase::error);	
			else
				{	
				++_Mid1;
				*_Mid2++ = (_Elem)(*_Pstate | (_By & 0x3f));
				*_Pstate = 1;
				continue;
				}

			if (_By < 0x80)
				_Ch = _By, _Nextra = 0;
			else if (_By < 0xc0)
				{	
				++_Mid1;
				return (_Mybase::error);
				}
			else if (_By < 0xe0)
				_Ch = _By & 0x1f, _Nextra = 1;
			else if (_By < 0xf0)
				_Ch = _By & 0x0f, _Nextra = 2;
			else if (_By < 0xf8)
				_Ch = _By & 0x07, _Nextra = 3;
			else
				_Ch = _By & 0x03, _Nextra = _By < 0xfc ? 4 : 5;

			_Nskip = _Nextra < 3 ? 0 : 1;	
			_First1 = _Mid1;	

			if (_Nextra == 0)
				++_Mid1;
			else if (_Last1 - _Mid1 < _Nextra + 1 - _Nskip)
				break;	
			else
				for (++_Mid1; _Nskip < _Nextra; --_Nextra, ++_Mid1)
					if ((_By = (unsigned char)*_Mid1) < 0x80 || 0xc0 <= _By)
						return (_Mybase::error);	
					else
						_Ch = _Ch << 6 | (_By & 0x3f);
			if (0 < _Nskip)
				_Ch <<= 6;	

			if ((_Maxcode < 0x10ffff ? _Maxcode : 0x10ffff) < _Ch)
				return (_Mybase::error);	
			else if (0xffff < _Ch)
				{	
				unsigned short _Ch0 =
					(unsigned short)(0xd800 | (_Ch >> 10) - 0x0040);

				*_Mid2++ = (_Elem)_Ch0;
				*_Pstate = (unsigned short)(0xdc00 | (_Ch & 0x03ff));
				continue;
				}

			if (_Nskip == 0)
				;
			else if (_Mid1 == _Last1)
				{	
				_Mid1 = _First1;
				break;
				}
			else if ((_By = (unsigned char)*_Mid1++) < 0x80 || 0xc0 <= _By)
				return (_Mybase::error);	
			else
				_Ch |= _By & 0x3f;	

			if (*_Pstate == 0)
				{	
				*_Pstate = 1;

				if ((_Mode & _Consume_header) != 0 && _Ch == 0xfeff)
					{	
					result _Ans = do_in(_State, _Mid1, _Last1, _Mid1,
						_First2, _Last2, _Mid2);

					if (_Ans == _Mybase::partial)
						{	
						*_Pstate = 0;
						_Mid1 = _First1;
						}
					return (_Ans);
					}
				}

			*_Mid2++ = (_Elem)_Ch;
			}

		return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
		}

	virtual result  do_out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		unsigned short *_Pstate = (unsigned short *)&_State;
		_Mid1 = _First1;
		_Mid2 = _First2;

		for (; _Mid1 != _Last1 && _Mid2 != _Last2; )
			{	
			unsigned long _Ch;
			unsigned short _Ch1 = (unsigned short)*_Mid1;
			bool _Save = false;

			if (1 < *_Pstate)
				{	
				if (_Ch1 < 0xdc00 || 0xe000 <= _Ch1)
					return (_Mybase::error);	
				_Ch = (*_Pstate << 10) | (_Ch1 - 0xdc00);
				}
			else if (0xd800 <= _Ch1 && _Ch1 < 0xdc00)
				{	
				_Ch = (_Ch1 - 0xd800 + 0x0040) << 10;
				_Save = true;	
				}
			else
				_Ch = _Ch1;	

			_Byte _By;
			int _Nextra;

			if (_Ch < 0x0080)
				_By = (_Byte)_Ch, _Nextra = 0;
			else if (_Ch < 0x0800)
				_By = (_Byte)(0xc0 | _Ch >> 6), _Nextra = 1;
			else if (_Ch < 0x10000)
				_By = (_Byte)(0xe0 | _Ch >> 12), _Nextra = 2;
			else
				_By = (_Byte)(0xf0 | _Ch >> 18), _Nextra = 3;

			int _Nput = _Nextra < 3 ? _Nextra + 1 : _Save ? 1 : 3;

			if (_Last2 - _Mid2 < _Nput)
				break;	
			else if (*_Pstate != 0 || (_Mode & _Generate_header) == 0)
				;	
			else if (_Last2 - _Mid2 < 3 + _Nput)
				break;	
			else
				{	
				*_Mid2++ = (_Byte)(unsigned char)0xef;
				*_Mid2++ = (_Byte)(unsigned char)0xbb;
				*_Mid2++ = (_Byte)(unsigned char)0xbf;
				}

			++_Mid1;
			if (_Save || _Nextra < 3)
				{	
				*_Mid2++ = _By;
				--_Nput;
				}
			for (; 0 < _Nput; --_Nput)
				*_Mid2++ = (_Byte)((_Ch >> 6 * --_Nextra & 0x3f) | 0x80);

			*_Pstate = (unsigned short)(_Save ? _Ch >> 10 : 1);
			}

		return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
		}

	virtual result  do_unshift(_Statype& _State,
		_Byte *_First2, _Byte *, _Byte *& _Mid2) const
		{	
		unsigned short *_Pstate = (unsigned short *)&_State;
		_Mid2 = _First2;

		return (1 < *_Pstate
			? _Mybase::error : _Mybase::ok);	
		}

	virtual int  do_length(_Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		size_t _Wchars = 0;
		_Statype _Mystate = _State;

		for (; _Wchars < _Count && _First1 != _Last1; )
			{	
			const _Byte *_Mid1;
			_Elem *_Mid2;
			_Elem _Ch;

			switch (do_in(_Mystate, _First1, _Last1, _Mid1,
				&_Ch, &_Ch + 1, _Mid2))
				{	
			case _Mybase::noconv:
				return ((int)(_Wchars + (_Last1 - _First1)));

			case _Mybase::ok:
				if (_Mid2 == &_Ch + 1)
					++_Wchars;	
				_First1 = _Mid1;
				break;

			default:
				return ((int)_Wchars);	
				}
			}

		return ((int)_Wchars);
		}

	virtual bool  do_always_noconv() const noexcept
		{	
		return (false);
		}

	virtual int  do_max_length() const noexcept
		{	
		return ((_Mode & _Consume_header) != 0 ? 9	
			: (_Mode & _Generate_header) != 0 ? 7	
			: 6);	
		}

	virtual int do_encoding() const noexcept
		{	
		return (0);	
		}

private:
	unsigned long _Maxcode;	
	_Codecvt_mode _Mode;	
	};

		
template<>
	class __declspec(dllimport) codecvt<char32_t, char, _Mbstatet>
	: public codecvt_base
	{	
public:
	typedef codecvt<char32_t, char, _Mbstatet> _Mybase;
	typedef char32_t _Elem;
	typedef char _Byte;
	typedef _Mbstatet _Statype;
	typedef _Elem intern_type;
	typedef _Byte extern_type;
	typedef _Statype state_type;

	result  in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		return (do_in(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_out(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  unshift(_Statype& _State,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_unshift(_State,
			_First2, _Last2, _Mid2));
		}

	int  length(_Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		return (do_length(_State, _First1, _Last1, _Count));
		}

	 static locale::id id;

	explicit  codecvt(size_t _Refs = 0)
		: codecvt_base(_Refs), _Maxcode(0xffffffff), _Mode(_Consume_header)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
		: codecvt_base(_Refs), _Maxcode(0xffffffff), _Mode(_Consume_header)
		{	
		_Init(_Lobj);
		}

	 codecvt(const _Locinfo& _Lobj, unsigned long _Maxcode_arg,
		_Codecvt_mode _Mode_arg, size_t _Refs = 0)
		: codecvt_base(_Refs), _Maxcode(_Maxcode_arg), _Mode(_Mode_arg)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new codecvt<_Elem, _Byte, _Statype>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

protected:
	virtual  ~codecvt() noexcept
		{	
		}

	void  _Init(const _Locinfo&)
		{	
		}

	virtual result  do_in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		char *_Pstate = (char *)&_State;
		_Mid1 = _First1;
		_Mid2 = _First2;

		for (; _Mid1 != _Last1 && _Mid2 != _Last2; )
			{	
			unsigned char _By = (unsigned char)*_Mid1;
			unsigned long _Ch;
			int _Nextra;

			if (_By < 0x80)
				_Ch = _By, _Nextra = 0;
			else if (_By < 0xc0)
				{	
				++_Mid1;
				return (_Mybase::error);
				}
			else if (_By < 0xe0)
				_Ch = _By & 0x1f, _Nextra = 1;
			else if (_By < 0xf0)
				_Ch = _By & 0x0f, _Nextra = 2;
			else if (_By < 0xf8)
				_Ch = _By & 0x07, _Nextra = 3;
			else
				_Ch = _By & 0x03, _Nextra = _By < 0xfc ? 4 : 5;

			if (_Nextra == 0)
				++_Mid1;
			else if (_Last1 - _Mid1 < _Nextra + 1)
				break;	
			else
				for (++_Mid1; 0 < _Nextra; --_Nextra, ++_Mid1)
					if ((_By = (unsigned char)*_Mid1) < 0x80 || 0xc0 <= _By)
						return (_Mybase::error);	
					else
						_Ch = _Ch << 6 | (_By & 0x3f);

			if (*_Pstate == 0)
				{	
				*_Pstate = 1;

				if ((_Mode & _Consume_header) != 0 && _Ch == 0xfeff)
					{	
					result _Ans = do_in(_State, _Mid1, _Last1, _Mid1,
						_First2, _Last2, _Mid2);

					if (_Ans == _Mybase::partial)
						{	
						*_Pstate = 0;
						_Mid1 = _First1;
						}
					return (_Ans);
					}
				}

			if (_Maxcode < _Ch)
				return (_Mybase::error);	
			*_Mid2++ = (_Elem)_Ch;
			}

		return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
		}

	virtual result  do_out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		char *_Pstate = (char *)&_State;
		_Mid1 = _First1;
		_Mid2 = _First2;

		for (; _Mid1 != _Last1 && _Mid2 != _Last2; )
			{	
			_Byte _By;
			int _Nextra;
			unsigned long _Ch = (unsigned long)*_Mid1;

			if (_Maxcode < _Ch)
				return (_Mybase::error);

			if (_Ch < 0x0080)
				_By = (_Byte)_Ch, _Nextra = 0;
			else if (_Ch < 0x0800)
				_By = (_Byte)(0xc0 | _Ch >> 6), _Nextra = 1;
			else if (_Ch < 0x00010000)
				_By = (_Byte)(0xe0 | _Ch >> 12), _Nextra = 2;
			else if (_Ch < 0x00200000)
				_By = (_Byte)(0xf0 | _Ch >> 18), _Nextra = 3;
			else if (_Ch < 0x04000000)
				_By = (_Byte)(0xf8 | _Ch >> 24), _Nextra = 4;
			else
				_By = (_Byte)(0xfc | (_Ch >> 30 & 0x03)), _Nextra = 5;

			if (*_Pstate == 0)
				{	
				*_Pstate = 1;
				if ((_Mode & _Generate_header) == 0)
					;
				else if (_Last2 - _Mid2 < 3 + 1 + _Nextra)
					return (_Mybase::partial);	
				else
					{	
					*_Mid2++ = (_Byte)(unsigned char)0xef;
					*_Mid2++ = (_Byte)(unsigned char)0xbb;
					*_Mid2++ = (_Byte)(unsigned char)0xbf;
					}
				}

			if (_Last2 - _Mid2 < 1 + _Nextra)
				break;	

			++_Mid1;
			for (*_Mid2++ = _By; 0 < _Nextra; )
				*_Mid2++ = (_Byte)((_Ch >> 6 * --_Nextra & 0x3f) | 0x80);
			}
		return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
		}

	virtual result  do_unshift(_Statype&,
		_Byte *_First2, _Byte *, _Byte *& _Mid2) const
		{	
		_Mid2 = _First2;
		return (_Mybase::ok);
		}

	virtual int  do_length(_Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		int _Wchars = 0;
		_Statype _Mystate = _State;

		for (; (size_t)_Wchars < _Count && _First1 != _Last1; )
			{	
			const _Byte *_Mid1;
			_Elem *_Mid2;
			_Elem _Ch;

			switch (do_in(_Mystate, _First1, _Last1, _Mid1,
				&_Ch, &_Ch + 1, _Mid2))
				{	
			case _Mybase::noconv:
				return ((int)(_Wchars + (int)(_Last1 - _First1)));

			case _Mybase::ok:
				if (_Mid2 == &_Ch + 1)
					++_Wchars;	
				_First1 = _Mid1;
				break;

			default:
				return ((int)_Wchars);	
				}
			}

		return ((int)_Wchars);
		}

	virtual bool  do_always_noconv() const noexcept
		{	
		return (false);
		}

	virtual int  do_max_length() const noexcept
		{	
		return ((_Mode & (_Consume_header | _Generate_header)) != 0
			? 9 : 6);
		}

	virtual int  do_encoding() const noexcept
		{	
		return ((_Mode & (_Consume_header | _Generate_header)) != 0
			? -1 : 0);	
		}

private:
	unsigned long _Maxcode;	
	_Codecvt_mode _Mode;	
	};

		
template<>
	class __declspec(dllimport) codecvt<wchar_t, char, _Mbstatet>
	: public codecvt_base
	{	
public:
	typedef wchar_t _Elem;
	typedef char _Byte;
	typedef _Mbstatet _Statype;
	typedef _Elem intern_type;
	typedef _Byte extern_type;
	typedef _Statype state_type;

	result  in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		return (do_in(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_out(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  unshift(_Statype& _State,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_unshift(_State,
			_First2, _Last2, _Mid2));
		}

	int  length(_Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		return (do_length(_State, _First1, _Last1, _Count));
		}

	 static locale::id id;

	explicit  codecvt(size_t _Refs = 0)
		: codecvt_base(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
		: codecvt_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new codecvt<_Elem, _Byte, _Statype>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

protected:
	virtual  ~codecvt() noexcept
		{	
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Cvt = _Lobj._Getcvt();
		}

	virtual result  do_in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
			_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		;
		;
		_Mid1 = _First1, _Mid2 = _First2;
		result _Ans = _Mid1 == _Last1 ? ok : partial;
		int _Bytes;

		while (_Mid1 != _Last1 && _Mid2 != _Last2)
			switch (_Bytes = _Mbrtowc(_Mid2, _Mid1, _Last1 - _Mid1,
				&_State, &_Cvt))
			{	
			case -2:	
				_Mid1 = _Last1;
				return (_Ans);

			case -1:	
				return (error);

			case 0:	
				if (*_Mid2 == (_Elem)0)
					_Bytes = (int):: strlen(_Mid1) + 1;
				

			default:	
				if (_Bytes == -3)
					_Bytes = 0;	
				_Mid1 += _Bytes;
				++_Mid2;
				_Ans = ok;
			}
		return (_Ans);
		}

	virtual result  do_out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
			_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		;
		;
		_Mid1 = _First1, _Mid2 = _First2;
		int _Bytes;

		while (_Mid1 != _Last1 && _Mid2 != _Last2)
			if ((int)5 <= _Last2 - _Mid2)
				if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1,
					&_State, &_Cvt)) < 0)
					return (error);	
				else
					++_Mid1, _Mid2 += _Bytes;
			else
				{	
				_Byte _Buf[5];
				_Statype _Stsave = _State;

				if ((_Bytes = _Wcrtomb(_Buf, *_Mid1,
					&_State, &_Cvt)) < 0)
					return (error);	
				else if (_Last2 - _Mid2 < _Bytes)
					{	
					_State = _Stsave;
					break;
					}
				else
					{	
					:: memcpy(_Mid2, _Buf, _Bytes);
					++_Mid1, _Mid2 += _Bytes;
					}
				}
		return (_Mid1 == _Last1 ? ok : partial);
		}

	virtual result  do_unshift(_Statype& _State,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		;
		_Mid2 = _First2;
		result _Ans = ok;
		int _Bytes;
		_Byte _Buf[5];
		_Statype _Stsave = _State;

		if ((_Bytes = _Wcrtomb(_Buf, L'\0', &_State, &_Cvt)) <= 0)
			_Ans = error;	
		else if (_Last2 - _Mid2 < --_Bytes)
			{	
			_State = _Stsave;
			_Ans = partial;
			}
		else if (0 < _Bytes)
			{	
			:: memcpy(_Mid2, _Buf, _Bytes);
			_Mid2 += _Bytes;
			}
		return (_Ans);
		}

	virtual int  do_length(_Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		;
		int _Wchars;
		const _Byte *_Mid1;
		_Statype _Mystate = _State;

		for (_Wchars = 0, _Mid1 = _First1;
			(size_t)_Wchars < _Count && _Mid1 != _Last1; )
			{	
			int _Bytes;
			_Elem _Ch;

			switch (_Bytes = _Mbrtowc(&_Ch, _Mid1, _Last1 - _Mid1,
				&_Mystate, &_Cvt))
				{	
			case -2:	
				return (_Wchars);

			case -1:	
				return (_Wchars);

			case 0:	
				if (_Ch == (_Elem)0)
					_Bytes = (int):: strlen(_Mid1) + 1;
				

			default:	
				if (_Bytes == -3)
					_Bytes = 0;	
				_Mid1 += _Bytes;
				++_Wchars;
				}
			}
		return (_Wchars);
		}

	virtual bool  do_always_noconv() const noexcept
		{	
		return (false);
		}

	virtual int  do_max_length() const noexcept
		{	
		return (5);
		}

	virtual int  do_encoding() const noexcept
		{	
		return (0);	
		}

private:
	_Locinfo::_Cvtvec _Cvt;	
	};

 
		
template<>
	class __declspec(dllimport) codecvt<unsigned short, char, _Mbstatet>
	: public codecvt_base
	{	
public:
	typedef unsigned short _Elem;
	typedef char _Byte;
	typedef _Mbstatet _Statype;
	typedef _Elem intern_type;
	typedef _Byte extern_type;
	typedef _Statype state_type;

	result  in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		return (do_in(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_out(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  unshift(_Statype& _State,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_unshift(_State,
			_First2, _Last2, _Mid2));
		}

	int  length(_Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		return (do_length(_State, _First1, _Last1, _Count));
		}

	 static locale::id id;

	explicit  codecvt(size_t _Refs = 0)
		: codecvt_base(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
		: codecvt_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new codecvt<_Elem, _Byte, _Statype>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

protected:
	virtual  ~codecvt() noexcept
		{	
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Cvt = _Lobj._Getcvt();
		}

	virtual result  do_in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
			_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		;
		;
		_Mid1 = _First1, _Mid2 = _First2;
		result _Ans = _Mid1 == _Last1 ? ok : partial;
		int _Bytes;

		while (_Mid1 != _Last1 && _Mid2 != _Last2)
			switch (_Bytes = _Mbrtowc((wchar_t *)_Mid2, _Mid1, _Last1 - _Mid1,
				&_State, &_Cvt))
			{	
			case -2:	
				_Mid1 = _Last1;
				return (_Ans);

			case -1:	
				return (error);

			case 0:	
				if (*_Mid2 == (_Elem)0)
					_Bytes = (int):: strlen(_Mid1) + 1;
				

			default:	
				if (_Bytes == -3)
					_Bytes = 0;	
				_Mid1 += _Bytes;
				++_Mid2;
				_Ans = ok;
			}
		return (_Ans);
		}

	virtual result  do_out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
			_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		;
		;
		_Mid1 = _First1, _Mid2 = _First2;
		int _Bytes;

		while (_Mid1 != _Last1 && _Mid2 != _Last2)
			if ((int)5 <= _Last2 - _Mid2)
				if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1,
					&_State, &_Cvt)) < 0)
					return (error);	
				else
					++_Mid1, _Mid2 += _Bytes;
			else
				{	
				_Byte _Buf[5];
				_Statype _Stsave = _State;

				if ((_Bytes = _Wcrtomb(_Buf, *_Mid1,
					&_State, &_Cvt)) < 0)
					return (error);	
				else if (_Last2 - _Mid2 < _Bytes)
					{	
					_State = _Stsave;
					break;
					}
				else
					{	
					:: memcpy(_Mid2, _Buf, _Bytes);
					++_Mid1, _Mid2 += _Bytes;
					}
				}
		return (_Mid1 == _Last1 ? ok : partial);
		}

	virtual result  do_unshift(_Statype& _State,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		;
		_Mid2 = _First2;
		result _Ans = ok;
		int _Bytes;
		_Byte _Buf[5];
		_Statype _Stsave = _State;

		if ((_Bytes = _Wcrtomb(_Buf, L'\0', &_State, &_Cvt)) <= 0)
			_Ans = error;	
		else if (_Last2 - _Mid2 < --_Bytes)
			{	
			_State = _Stsave;
			_Ans = partial;
			}
		else if (0 < _Bytes)
			{	
			:: memcpy(_Mid2, _Buf, _Bytes);
			_Mid2 += _Bytes;
			}
		return (_Ans);
		}

	virtual int  do_length(_Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		;
		int _Wchars;
		const _Byte *_Mid1;
		_Statype _Mystate = _State;

		for (_Wchars = 0, _Mid1 = _First1;
			(size_t)_Wchars < _Count && _Mid1 != _Last1; )
			{	
			int _Bytes;
			_Elem _Ch;

			switch (_Bytes = _Mbrtowc((wchar_t *)&_Ch, _Mid1, _Last1 - _Mid1,
				&_Mystate, &_Cvt))
				{	
			case -2:	
				return (_Wchars);

			case -1:	
				return (_Wchars);

			case 0:	
				if (_Ch == (_Elem)0)
					_Bytes = (int):: strlen(_Mid1) + 1;
				

			default:	
				if (_Bytes == -3)
					_Bytes = 0;	
				_Mid1 += _Bytes;
				++_Wchars;
				}
			}
		return (_Wchars);
		}

	virtual bool  do_always_noconv() const noexcept
		{	
		return (false);
		}

	virtual int  do_max_length() const noexcept
		{	
		return (5);
		}

	virtual int  do_encoding() const noexcept
		{	
		return (0);	
		}

private:
	_Locinfo::_Cvtvec _Cvt;	
	};
 #line 2060 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"

		
template<class _Elem,
	class _Byte,
	class _Statype>
	class codecvt_byname
		: public codecvt<_Elem, _Byte, _Statype>
	{	
public:
	explicit  codecvt_byname(const char *_Locname, size_t _Refs = 0)
		: codecvt<_Elem, _Byte, _Statype>(_Locinfo(_Locname), _Refs)
		{	
		}

	explicit  codecvt_byname(const string& _Str, size_t _Refs = 0)
		: codecvt<_Elem, _Byte, _Statype>(_Locinfo(_Str.c_str()), _Refs)
		{	
		}

protected:
	virtual  ~codecvt_byname() noexcept
		{	
		}
	};

		
 #pragma warning(push)
 #pragma warning(disable: 4275)

struct __declspec(dllimport) ctype_base
	: public locale::facet
	{	
	enum
		{	
		alnum = 0x04 | 0x02 | 0x01 | 0x100, alpha = 0x02 | 0x01 | 0x100,
		cntrl = 0x20, digit = 0x04, graph = 0x04 | 0x02 | 0x10 | 0x01 | 0x100,
		lower = 0x02, print = 0x04 | 0x02 | 0x10 | 0x40 | 0x01 | 0x100 | 0x80,
		punct = 0x10, space = 0x08 | 0x40 | 0x000, upper = 0x01,
		xdigit = 0x80, blank = 0x08 | 0x40 | 0x000 | 0x000};
	typedef short mask;	

	 ctype_base(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		}

	 ~ctype_base() noexcept
		{	
		}
	};

 #pragma warning(pop)

		
template<class _Elem>
	class ctype
		: public ctype_base
	{	
public:
	typedef _Elem char_type;

	bool  is(mask _Maskval, _Elem _Ch) const
		{	
		return (do_is(_Maskval, _Ch));
		}

	const _Elem * is(const _Elem *_First, const _Elem *_Last,
		mask *_Dest) const
		{	
		return (do_is(_First, _Last, _Dest));
		}

	const _Elem * scan_is(mask _Maskval, const _Elem *_First,
		const _Elem *_Last) const
		{	
		return (do_scan_is(_Maskval, _First, _Last));
		}

	const _Elem * scan_not(mask _Maskval, const _Elem *_First,
		const _Elem *_Last) const
		{	
		return (do_scan_not(_Maskval, _First, _Last));
		}

	_Elem  tolower(_Elem _Ch) const
		{	
		return (do_tolower(_Ch));
		}

	const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_tolower(_First, _Last));
		}

	_Elem  toupper(_Elem _Ch) const
		{	
		return (do_toupper(_Ch));
		}

	const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_toupper(_First, _Last));
		}

	_Elem  widen(char _Byte) const
		{	
		return (do_widen(_Byte));
		}

	const char * widen(const char *_First, const char *_Last,
		_Elem *_Dest) const
		{	
		return (do_widen(_First, _Last, _Dest));
		}

	char  narrow(_Elem _Ch, char _Dflt = '\0') const
		{	
		return (do_narrow(_Ch, _Dflt));
		}

	const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
		char _Dflt, char *_Dest) const
		{	
		return (do_narrow(_First, _Last, _Dflt, _Dest));
		}

	 static locale::id id;

	explicit  ctype(size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new ctype<_Elem>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

protected:
	virtual  ~ctype() noexcept
		{	
		if (_Ctype._Delfl)
			:: free((void *)_Ctype._Table);

		:: free(_Ctype._LocaleName);
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Ctype = _Lobj._Getctype();
		_Cvt = _Lobj._Getcvt();
		}

	virtual bool  do_is(mask _Maskval, _Elem _Ch) const
		{	
		return ((_Ctype._Table[(unsigned char)narrow(_Ch)]
			& _Maskval) != 0);
		}

	virtual const _Elem * do_is(const _Elem *_First, const _Elem *_Last,
		mask *_Dest) const
		{	
		;
		for (; _First != _Last; ++_First, ++_Dest)
			*_Dest = _Ctype._Table[(unsigned char)narrow(*_First)];
		return (_First);
		}

	virtual const _Elem * do_scan_is(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		;
		for (; _First != _Last && !is(_Maskval, *_First); ++_First)
			;
		return (_First);
		}

	virtual const _Elem * do_scan_not(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		;
		for (; _First != _Last && is(_Maskval, *_First); ++_First)
			;
		return (_First);
		}

	virtual _Elem  do_tolower(_Elem _Ch) const
		{	
		unsigned char _Byte = (unsigned char)narrow(_Ch, '\0');
		if (_Byte == '\0')
			return (_Ch);
		else
			return (widen((char)_Tolower(_Byte, &_Ctype)));
		}

	virtual const _Elem * do_tolower(_Elem *_First,
		const _Elem *_Last) const
		{	
		;
		for (; _First != _Last; ++_First)
			{	
			unsigned char _Byte = (unsigned char)narrow(*_First, '\0');
			if (_Byte != '\0')
				*_First = (widen((char)_Tolower(_Byte, &_Ctype)));
			}
		return ((const _Elem *)_First);
		}

	virtual _Elem  do_toupper(_Elem _Ch) const
		{	
		unsigned char _Byte = (unsigned char)narrow(_Ch, '\0');
		if (_Byte == '\0')
			return (_Ch);
		else
			return (widen((char)_Toupper(_Byte, &_Ctype)));
		}

	virtual const _Elem * do_toupper(_Elem *_First,
		const _Elem *_Last) const
		{	
		;
		for (; _First != _Last; ++_First)
			{	
			unsigned char _Byte = (unsigned char)narrow(*_First, '\0');
			if (_Byte != '\0')
				*_First = (widen((char)_Toupper(_Byte, &_Ctype)));
			}
		return ((const _Elem *)_First);
		}

	virtual _Elem  do_widen(char _Byte) const
		{	
		return (_Maklocchr(_Byte, (_Elem *)0, _Cvt));
		}

	virtual const char * do_widen(const char *_First,
		const char *_Last, _Elem *_Dest) const
		{	
		;
		for (; _First != _Last; ++_First, ++_Dest)
			*_Dest = _Maklocchr(*_First, (_Elem *)0, _Cvt);
		return (_First);
		}

	char  _Donarrow(_Elem _Ch, char _Dflt) const
		{	
		char _Byte;
		if (_Ch == (_Elem)0)
			return ('\0');
		else if ((_Byte = _Maklocbyte((_Elem)_Ch, _Cvt)) == '\0')
			return (_Dflt);
		else
			return (_Byte);
		}

	virtual char  do_narrow(_Elem _Ch, char _Dflt) const
		{	
		return (_Donarrow(_Ch, _Dflt));
		}

	virtual const _Elem * do_narrow(const _Elem *_First,
		const _Elem *_Last, char _Dflt, char *_Dest) const
		{	
		;
		for (; _First != _Last; ++_First, ++_Dest)
			*_Dest = _Donarrow(*_First, _Dflt);
		return (_First);
		}

private:
	_Locinfo::_Ctypevec _Ctype;	
	_Locinfo::_Cvtvec _Cvt;		
	};

		
template<class _Elem>
	locale::id ctype<_Elem>::id;

		
template<>
	class __declspec(dllimport) ctype<char>
	: public ctype_base
	{	
	typedef ctype<char> _Myt;

public:
	typedef char _Elem;
	typedef _Elem char_type;

	bool  is(mask _Maskval, _Elem _Ch) const
		{	
		return ((_Ctype._Table[(unsigned char)_Ch] & _Maskval) != 0);
		}

	const _Elem * is(const _Elem *_First,
		const _Elem *_Last, mask *_Dest) const
		{	
		;
		for (; _First != _Last; ++_First, ++_Dest)
			*_Dest = _Ctype._Table[(unsigned char)*_First];
		return (_First);
		}

	const _Elem * scan_is(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		;
		for (; _First != _Last && !is(_Maskval, *_First); ++_First)
			;
		return (_First);
		}

	const _Elem * scan_not(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		;
		for (; _First != _Last && is(_Maskval, *_First); ++_First)
			;
		return (_First);
		}

	_Elem  tolower(_Elem _Ch) const
		{	
		return (do_tolower(_Ch));
		}

	const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_tolower(_First, _Last));
		}

	_Elem  toupper(_Elem _Ch) const
		{	
		return (do_toupper(_Ch));
		}

	const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_toupper(_First, _Last));
		}

	_Elem  widen(char _Byte) const
		{	
		return (do_widen(_Byte));
		}

	const _Elem * widen(const char *_First, const char *_Last,
		_Elem *_Dest) const
		{	
		return (do_widen(_First, _Last, _Dest));
		}

	_Elem  narrow(_Elem _Ch, char _Dflt = '\0') const
		{	
		return (do_narrow(_Ch, _Dflt));
		}

	const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
		char _Dflt, char *_Dest) const
		{	
		return (do_narrow(_First, _Last, _Dflt, _Dest));
		}

	 static locale::id id;

	explicit  ctype(const mask *_Table = 0,
		bool _Deletetable = false,
		size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}

		_Tidy();	
		if (_Table != 0)
			{	
			_Ctype._Table = _Table;
			_Ctype._Delfl = _Deletetable ? -1 : 0;
			}
		else
			{	
			_Ctype._Table = classic_table();
			_Ctype._Delfl = 0;
			}
		}

	 ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new ctype<_Elem>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

	const mask * table() const noexcept
		{	
		return (_Ctype._Table);
		}

	static const mask *__cdecl classic_table() noexcept
		{	
		const _Myt& _Ctype_fac = use_facet< _Myt >(locale::classic());
		return (_Ctype_fac.table());
		}

	 static const size_t table_size =
		1 << 8;	

protected:
	virtual  ~ctype() noexcept
		{	
		_Tidy();
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Ctype = _Lobj._Getctype();
		}

	void  _Tidy()
		{	
		if (0 < _Ctype._Delfl)
			:: free((void *)_Ctype._Table);
		else if (_Ctype._Delfl < 0)
			delete[] _Ctype._Table;

		:: free(_Ctype._LocaleName);
		}

	virtual _Elem  do_tolower(_Elem _Ch) const
		{	
		return ((_Elem)_Tolower((unsigned char)_Ch, &_Ctype));
		}

	virtual const _Elem * do_tolower(_Elem *_First,
		const _Elem *_Last) const
		{	
		;
		for (; _First != _Last; ++_First)
			*_First = (_Elem)_Tolower((unsigned char)*_First, &_Ctype);
		return ((const _Elem *)_First);
		}

	virtual _Elem  do_toupper(_Elem _Ch) const
		{	
		return ((_Elem)_Toupper((unsigned char)_Ch, &_Ctype));
		}

	virtual const _Elem * do_toupper(_Elem *_First,
		const _Elem *_Last) const
		{	
		;
		for (; _First != _Last; ++_First)
			*_First = (_Elem)_Toupper((unsigned char)*_First, &_Ctype);
		return ((const _Elem *)_First);
		}

	virtual _Elem  do_widen(char _Byte) const
		{	
		return (_Byte);
		}

	virtual const _Elem * do_widen(const char *_First,
		const char *_Last, _Elem *_Dest) const
		{	
		;
		:: memcpy(_Dest, _First, _Last - _First);
		return (_Last);
		}

	virtual _Elem  do_narrow(_Elem _Ch, char) const
		{	
		return (_Ch);
		}

	virtual const _Elem * do_narrow(const _Elem *_First,
		const _Elem *_Last, char, char *_Dest) const
		{	
		;
		:: memcpy(_Dest, _First, _Last - _First);
		return (_Last);
		}

private:
	_Locinfo::_Ctypevec _Ctype;	
	};

		
template<>
	class __declspec(dllimport) ctype<wchar_t>
	: public ctype_base
	{	
	typedef ctype<wchar_t> _Myt;

public:
	typedef wchar_t _Elem;
	typedef _Elem char_type;

	bool  is(mask _Maskval, _Elem _Ch) const
		{	
		return (do_is(_Maskval, _Ch));
		}

	const _Elem * is(const _Elem *_First, const _Elem *_Last,
		mask *_Dest) const
		{	
		return (do_is(_First, _Last, _Dest));
		}

	const _Elem * scan_is(mask _Maskval, const _Elem *_First,
		const _Elem *_Last) const
		{	
		return (do_scan_is(_Maskval, _First, _Last));
		}

	const _Elem * scan_not(mask _Maskval, const _Elem *_First,
		const _Elem *_Last) const
		{	
		return (do_scan_not(_Maskval, _First, _Last));
		}

	_Elem  tolower(_Elem _Ch) const
		{	
		return (do_tolower(_Ch));
		}

	const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_tolower(_First, _Last));
		}

	_Elem  toupper(_Elem _Ch) const
		{	
		return (do_toupper(_Ch));
		}

	const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_toupper(_First, _Last));
		}

	_Elem  widen(char _Byte) const
		{	
		return (do_widen(_Byte));
		}

	const char * widen(const char *_First, const char *_Last,
		_Elem *_Dest) const
		{	
		return (do_widen(_First, _Last, _Dest));
		}

	char  narrow(_Elem _Ch, char _Dflt = '\0') const
		{	
		return (do_narrow(_Ch, _Dflt));
		}

	const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
		char _Dflt, char *_Dest) const
		{	
		return (do_narrow(_First, _Last, _Dflt, _Dest));
		}

	 static locale::id id;

	explicit  ctype(size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new ctype<_Elem>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

protected:
	virtual  ~ctype() noexcept
		{	
		if (_Ctype._Delfl)
			:: free((void *)_Ctype._Table);

		:: free(_Ctype._LocaleName);
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Ctype = _Lobj._Getctype();
		_Cvt = _Lobj._Getcvt();
		}

	virtual bool  do_is(mask _Maskval, _Elem _Ch) const
		{	
		return ((:: _Getwctype(_Ch, &_Ctype) & _Maskval) != 0);
		}

	virtual const _Elem * do_is(const _Elem *_First,
		const _Elem *_Last, mask *_Dest) const
		{	
		;
		return (:: _Getwctypes(_First, _Last, _Dest, &_Ctype));
		}

	virtual const _Elem * do_scan_is(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		;
		for (; _First != _Last && !is(_Maskval, *_First); ++_First)
			;
		return (_First);
		}

	virtual const _Elem * do_scan_not(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		;
		for (; _First != _Last && is(_Maskval, *_First); ++_First)
			;
		return (_First);
		}

	virtual _Elem  do_tolower(_Elem _Ch) const
		{	
		return (_Towlower(_Ch, &_Ctype));
		}

	virtual const _Elem * do_tolower(_Elem *_First,
		const _Elem *_Last) const
		{	
		;
		for (; _First != _Last; ++_First)
			*_First = _Towlower(*_First, &_Ctype);
		return ((const _Elem *)_First);
		}

	virtual _Elem  do_toupper(_Elem _Ch) const
		{	
		return (_Towupper(_Ch, &_Ctype));
		}

	virtual const _Elem * do_toupper(_Elem *_First,
		const _Elem *_Last) const
		{	
		;
		for (; _First != _Last; ++_First)
			*_First = _Towupper(*_First, &_Ctype);
		return ((const _Elem *)_First);
		}

	_Elem  _Dowiden(char _Byte) const
		{	
		mbstate_t _Mbst = {};
		wchar_t _Wc;
		return (_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst, &_Cvt) < 0
			? (wchar_t)((wint_t)(0xFFFF)) : _Wc);
		}

	virtual _Elem  do_widen(char _Byte) const
		{	
		return (_Dowiden(_Byte));
		}

	virtual const char * do_widen(const char *_First,
		const char *_Last, _Elem *_Dest) const
		{	
		;
		for (; _First != _Last; ++_First, ++_Dest)
			*_Dest = _Dowiden(*_First);
		return (_First);
		}

	char  _Donarrow(_Elem _Ch, char _Dflt) const
		{	
		char _Buf[5];
		mbstate_t _Mbst = {};
		return (_Wcrtomb(_Buf, _Ch, &_Mbst, &_Cvt) != 1
			? _Dflt : _Buf[0]);
		}

	virtual char  do_narrow(_Elem _Ch, char _Dflt) const
		{	
		return (_Donarrow(_Ch, _Dflt));
		}

	virtual const _Elem * do_narrow(const _Elem *_First,
		const _Elem *_Last, char _Dflt, char *_Dest) const
		{	
		;
		for (; _First != _Last; ++_First, ++_Dest)
			*_Dest = _Donarrow(*_First, _Dflt);
		return (_First);
		}

private:
	_Locinfo::_Ctypevec _Ctype;	
	_Locinfo::_Cvtvec _Cvt;		
	};

 
		
template<>
	class __declspec(dllimport) ctype<unsigned short>
	: public ctype_base
	{	
	typedef ctype<unsigned short> _Myt;

public:
	typedef unsigned short _Elem;
	typedef _Elem char_type;

	bool  is(mask _Maskval, _Elem _Ch) const
		{	
		return (do_is(_Maskval, _Ch));
		}

	const _Elem * is(const _Elem *_First, const _Elem *_Last,
		mask *_Dest) const
		{	
		return (do_is(_First, _Last, _Dest));
		}

	const _Elem * scan_is(mask _Maskval, const _Elem *_First,
		const _Elem *_Last) const
		{	
		return (do_scan_is(_Maskval, _First, _Last));
		}

	const _Elem * scan_not(mask _Maskval, const _Elem *_First,
		const _Elem *_Last) const
		{	
		return (do_scan_not(_Maskval, _First, _Last));
		}

	_Elem  tolower(_Elem _Ch) const
		{	
		return (do_tolower(_Ch));
		}

	const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_tolower(_First, _Last));
		}

	_Elem  toupper(_Elem _Ch) const
		{	
		return (do_toupper(_Ch));
		}

	const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_toupper(_First, _Last));
		}

	_Elem  widen(char _Byte) const
		{	
		return (do_widen(_Byte));
		}

	const char * widen(const char *_First, const char *_Last,
		_Elem *_Dest) const
		{	
		return (do_widen(_First, _Last, _Dest));
		}

	char  narrow(_Elem _Ch, char _Dflt = '\0') const
		{	
		return (do_narrow(_Ch, _Dflt));
		}

	const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
		char _Dflt, char *_Dest) const
		{	
		return (do_narrow(_First, _Last, _Dflt, _Dest));
		}

	 static locale::id id;

	explicit  ctype(size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new ctype<_Elem>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

protected:
	virtual  ~ctype() noexcept
		{	
		if (_Ctype._Delfl)
			:: free((void *)_Ctype._Table);

		:: free(_Ctype._LocaleName);
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Ctype = _Lobj._Getctype();
		_Cvt = _Lobj._Getcvt();
		}

	virtual bool  do_is(mask _Maskval, _Elem _Ch) const
		{	
		return ((:: _Getwctype(_Ch, &_Ctype) & _Maskval) != 0);
		}

	virtual const _Elem * do_is(const _Elem *_First,
		const _Elem *_Last, mask *_Dest) const
		{	
		;
		return ((const _Elem *):: _Getwctypes((const wchar_t *)_First,
			(const wchar_t *)_Last, _Dest, &_Ctype));
		}

	virtual const _Elem * do_scan_is(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		;
		for (; _First != _Last && !is(_Maskval, *_First); ++_First)
			;
		return (_First);
		}

	virtual const _Elem * do_scan_not(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		;
		for (; _First != _Last && is(_Maskval, *_First); ++_First)
			;
		return (_First);
		}

	virtual _Elem  do_tolower(_Elem _Ch) const
		{	
		return (_Towlower(_Ch, &_Ctype));
		}

	virtual const _Elem * do_tolower(_Elem *_First,
		const _Elem *_Last) const
		{	
		;
		for (; _First != _Last; ++_First)
			*_First = _Towlower(*_First, &_Ctype);
		return ((const _Elem *)_First);
		}

	virtual _Elem  do_toupper(_Elem _Ch) const
		{	
		return (_Towupper(_Ch, &_Ctype));
		}

	virtual const _Elem * do_toupper(_Elem *_First,
		const _Elem *_Last) const
		{	
		;
		for (; _First != _Last; ++_First)
			*_First = _Towupper(*_First, &_Ctype);
		return ((const _Elem *)_First);
		}

	_Elem  _Dowiden(char _Byte) const
		{	
		mbstate_t _Mbst = {};
		unsigned short _Wc;
		return (_Mbrtowc((wchar_t *)&_Wc, &_Byte, 1, &_Mbst, &_Cvt) < 0
			? (unsigned short)((wint_t)(0xFFFF)) : _Wc);
		}

	virtual _Elem  do_widen(char _Byte) const
		{	
		return (_Dowiden(_Byte));
		}

	virtual const char * do_widen(const char *_First,
		const char *_Last, _Elem *_Dest) const
		{	
		;
		for (; _First != _Last; ++_First, ++_Dest)
			*_Dest = _Dowiden(*_First);
		return (_First);
		}

	char  _Donarrow(_Elem _Ch, char _Dflt) const
		{	
		char _Buf[5];
		mbstate_t _Mbst = {};
		return (_Wcrtomb(_Buf, _Ch, &_Mbst, &_Cvt) != 1
			? _Dflt : _Buf[0]);
		}

	virtual char  do_narrow(_Elem _Ch, char _Dflt) const
		{	
		return (_Donarrow(_Ch, _Dflt));
		}

	virtual const _Elem * do_narrow(const _Elem *_First,
		const _Elem *_Last, char _Dflt, char *_Dest) const
		{	
		;
		for (; _First != _Last; ++_First, ++_Dest)
			*_Dest = _Donarrow(*_First, _Dflt);
		return (_First);
		}

private:
	_Locinfo::_Ctypevec _Ctype;	
	_Locinfo::_Cvtvec _Cvt;		
	};
 #line 3016 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"

		
template<class _Elem>
	class ctype_byname
	: public ctype<_Elem>
	{	
public:
	explicit  ctype_byname(const char *_Locname, size_t _Refs = 0)
		: ctype<_Elem>(_Locinfo(_Locname), _Refs)
		{	
		}

	explicit  ctype_byname(const string& _Str, size_t _Refs = 0)
		: ctype<_Elem>(_Locinfo(_Str.c_str()), _Refs)
		{	
		}

protected:
	virtual  ~ctype_byname() noexcept
		{	
		}
	};

		
template<>
	class ctype_byname<char>
	: public ctype<char>
	{	
public:
	explicit  ctype_byname(const char *_Locname, size_t _Refs = 0)
		: ctype<char>(_Locinfo(_Locname), _Refs)
		{	
		}

	explicit  ctype_byname(const string& _Str, size_t _Refs = 0)
		: ctype<char>(_Locinfo(_Str.c_str()), _Refs)
		{	
		}

protected:
	virtual  ~ctype_byname() noexcept
		{	
		}
	};

 

  
template class __declspec(dllimport) codecvt<char, char, _Mbstatet>;
  #line 3066 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
 #line 3067 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 3072 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
#line 3073 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"






#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"

 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cerrno"

#pragma once











 
#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cerrno"




#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cerrno"
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cerrno"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"



 #pragma pack(push,8)
 #pragma warning(push,3)
 
 


 




namespace std {
		

enum class errc {	
	address_family_not_supported = 102,
	address_in_use = 100,
	address_not_available = 101,
	already_connected = 113,
	argument_list_too_long = 7,
	argument_out_of_domain = 33,
	bad_address = 14,
	bad_file_descriptor = 9,
	bad_message = 104,
	broken_pipe = 32,
	connection_aborted = 106,
	connection_already_in_progress = 103,
	connection_refused = 107,
	connection_reset = 108,
	cross_device_link = 18,
	destination_address_required = 109,
	device_or_resource_busy = 16,
	directory_not_empty = 41,
	executable_format_error = 8,
	file_exists = 17,
	file_too_large = 27,
	filename_too_long = 38,
	function_not_supported = 40,
	host_unreachable = 110,
	identifier_removed = 111,
	illegal_byte_sequence = 42,
	inappropriate_io_control_operation = 25,
	interrupted = 4,
	invalid_argument = 22,
	invalid_seek = 29,
	io_error = 5,
	is_a_directory = 21,
	message_size = 115,
	network_down = 116,
	network_reset = 117,
	network_unreachable = 118,
	no_buffer_space = 119,
	no_child_process = 10,
	no_link = 121,
	no_lock_available = 39,
	no_message_available = 120,
	no_message = 122,
	no_protocol_option = 123,
	no_space_on_device = 28,
	no_stream_resources = 124,
	no_such_device_or_address = 6,
	no_such_device = 19,
	no_such_file_or_directory = 2,
	no_such_process = 3,
	not_a_directory = 20,
	not_a_socket = 128,
	not_a_stream = 125,
	not_connected = 126,
	not_enough_memory = 12,
	not_supported = 129,
	operation_canceled = 105,
	operation_in_progress = 112,
	operation_not_permitted = 1,
	operation_not_supported = 130,
	operation_would_block = 140,
	owner_dead = 133,
	permission_denied = 13,
	protocol_error = 134,
	protocol_not_supported = 135,
	read_only_file_system = 30,
	resource_deadlock_would_occur = 36,
	resource_unavailable_try_again = 11,
	result_out_of_range = 34,
	state_not_recoverable = 127,
	stream_timeout = 137,
	text_file_busy = 139,
	timed_out = 138,
	too_many_files_open_in_system = 23,
	too_many_files_open = 24,
	too_many_links = 31,
	too_many_symbolic_link_levels = 114,
	value_too_large = 132,
	wrong_protocol_type = 136
	};

typedef errc _Errc;

		

enum class io_errc {	
	stream = 1
	};

typedef io_errc _Io_errc;

		
template<class _Enum>
	struct is_error_code_enum
		: public false_type
	{	
	};

template<>
	struct is_error_code_enum<_Io_errc>
		: public true_type
	{	
	};

 
template<class _Ty>
	constexpr bool is_error_code_enum_v = is_error_code_enum<_Ty>::value;
 #line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"

		
template<class _Enum>
	struct is_error_condition_enum
		: public false_type
	{	
	};

template<>
	struct is_error_condition_enum<_Errc>
		: public true_type
	{	
	};

 
template<class _Ty>
	constexpr bool is_error_condition_enum_v = is_error_condition_enum<_Ty>::value;
 #line 150 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"

class error_code;
class error_condition;
error_code make_error_code(_Errc) noexcept;
error_code make_error_code(_Io_errc) noexcept;
error_condition make_error_condition(_Errc) noexcept;
error_condition make_error_condition(_Io_errc) noexcept;

		
class error_category;

const error_category& generic_category() noexcept;
const error_category& iostream_category() noexcept;
const error_category& system_category() noexcept;

class error_category
	{	
public:
	 error_category() noexcept	
		{	
		_Addr = reinterpret_cast<uintptr_t>(this);
		}

	virtual ~error_category() noexcept
		{	
		}

	virtual const char *name() const noexcept = 0;

	virtual string message(int _Errval) const = 0;

	virtual error_condition
		default_error_condition(int _Errval) const noexcept;

	virtual bool equivalent(int _Errval,
		const error_condition& _Cond) const noexcept;

	virtual bool equivalent(const error_code& _Code,
		int _Errval) const noexcept;

	bool operator==(const error_category& _Right) const noexcept
		{	
		return (_Addr == _Right._Addr);
		}

	bool operator!=(const error_category& _Right) const noexcept
		{	
		return (!(*this == _Right));
		}

	bool operator<(const error_category& _Right) const noexcept
		{	
		return (_Addr < _Right._Addr);
		}

	error_category(const error_category&) = delete;
	error_category& operator=(const error_category&) = delete;

protected:
	uintptr_t _Addr;

	enum : uintptr_t
		{	
		_Future_addr = 1,
		_Generic_addr = 3,
		_Iostream_addr = 5,
		_System_addr = 7
		};
	};

		
class error_code
	{	
public:
	typedef error_code _Myt;

	error_code() noexcept
		: _Myval(0),
			_Mycat(&system_category())
		{	
		}

	error_code(int _Val, const error_category& _Cat) noexcept
		: _Myval(_Val), _Mycat(&_Cat)
		{	
		}

	template<class _Enum,
		class = typename enable_if<is_error_code_enum<_Enum>::value,
			void>::type>
		error_code(_Enum _Errcode) noexcept
		: _Myval(0), _Mycat(0)
		{	
		*this = make_error_code(_Errcode);	
		}

	void assign(int _Val, const error_category& _Cat) noexcept
		{	
		_Myval = _Val;
		_Mycat = &_Cat;
		}

	template<class _Enum>
		typename enable_if<is_error_code_enum<_Enum>::value,
			error_code>::type& operator=(_Enum _Errcode) noexcept
		{	
		*this = make_error_code(_Errcode);	
		return (*this);
		}

	void clear() noexcept
		{	
		_Myval = 0;
		_Mycat = &system_category();
		}

	int value() const noexcept
		{	
		return (_Myval);
		}

	const error_category& category() const noexcept
		{	
		return (*_Mycat);
		}

	error_condition default_error_condition() const noexcept;

	string message() const
		{	
		return (category().message(value()));
		}

	explicit operator bool() const noexcept
		{	
		return (value() != 0);
		}

private:
	int _Myval;	
	const error_category *_Mycat;	
	};

		
class error_condition
	{	
public:
	typedef error_condition _Myt;

	error_condition() noexcept
		: _Myval(0),
			_Mycat(&generic_category())
		{	
		}

	error_condition(int _Val, const error_category& _Cat) noexcept
		: _Myval(_Val), _Mycat(&_Cat)
		{	
		}

	template<class _Enum,
		class = typename enable_if<is_error_condition_enum<_Enum>::value,
			void>::type>
		error_condition(_Enum _Errcode) noexcept
		: _Myval(0), _Mycat(0)
		{	
		*this = make_error_condition(_Errcode);	
		}

	void assign(int _Val, const error_category& _Cat) noexcept
		{	
		_Myval = _Val;
		_Mycat = &_Cat;
		}

	template<class _Enum>
		typename enable_if<is_error_condition_enum<_Enum>::value,
			error_condition>::type& operator=(_Enum _Errcode) noexcept
		{	
		*this = make_error_condition(_Errcode);	
		return (*this);
		}

	void clear() noexcept
		{	
		_Myval = 0;
		_Mycat = &generic_category();
		}

	int value() const noexcept
		{	
		return (_Myval);
		}

	const error_category& category() const noexcept
		{	
		return (*_Mycat);
		}

	string message() const
		{	
		return (category().message(value()));
		}

	explicit operator bool() const noexcept
		{	
		return (value() != 0);
		}

private:
	int _Myval;	
	const error_category *_Mycat;	
	};

		
inline bool operator==(
	const error_code& _Left,
	const error_code& _Right) noexcept
	{	
	return (_Left.category() == _Right.category()
		&& _Left.value() == _Right.value());
	}

inline bool operator==(
	const error_code& _Left,
	const error_condition& _Right) noexcept
	{	
	return (_Left.category().equivalent(_Left.value(), _Right)
		|| _Right.category().equivalent(_Left, _Right.value()));
	}

inline bool operator==(
	const error_condition& _Left,
	const error_code& _Right) noexcept
	{	
	return (_Right.category().equivalent(_Right.value(), _Left)
		|| _Left.category().equivalent(_Right, _Left.value()));
	}

inline bool operator==(
	const error_condition& _Left,
	const error_condition& _Right) noexcept
	{	
	return (_Left.category() == _Right.category()
		&& _Left.value() == _Right.value());
	}

		
inline bool operator!=(
	const error_code& _Left,
	const error_code& _Right) noexcept
	{	
	return (!(_Left == _Right));
	}

inline bool operator!=(
	const error_code& _Left,
	const error_condition& _Right) noexcept
	{	
	return (!(_Left == _Right));
	}

inline bool operator!=(
	const error_condition& _Left,
	const error_code& _Right) noexcept
	{	
	return (!(_Left == _Right));
	}

inline bool operator!=(
	const error_condition& _Left,
	const error_condition& _Right) noexcept
	{	
	return (!(_Left == _Right));
	}

		
inline bool operator<(
	const error_code& _Left,
	const error_code& _Right) noexcept
	{	
	return (_Left.category() < _Right.category()
		|| (_Left.category() == _Right.category()
			&& _Left.value() < _Right.value()));
	}

inline bool operator<(
	const error_condition& _Left,
	const error_condition& _Right) noexcept
	{	
	return (_Left.category() < _Right.category()
		|| (_Left.category() == _Right.category()
			&& _Left.value() < _Right.value()));
	}

		
inline error_condition
	error_category::default_error_condition(int _Errval) const noexcept
	{	
	return (error_condition(_Errval, *this));
	}

inline bool
	error_category::equivalent(int _Errval,
		const error_condition& _Cond) const noexcept
	{	
	return (default_error_condition(_Errval) == _Cond);
	}

inline bool
	error_category::equivalent(const error_code& _Code,
		int _Errval) const noexcept
	{	
	return (*this == _Code.category() && _Code.value() == _Errval);
	}

		
inline error_condition error_code::default_error_condition() const noexcept
	{	
	return (category().default_error_condition(value()));
	}

		
inline error_code make_error_code(_Errc _Errno) noexcept
	{	
	return (error_code((int)_Errno, generic_category()));
	}

inline error_code make_error_code(_Io_errc _Errno) noexcept
	{	
	return (error_code((int)_Errno, iostream_category()));
	}

		
inline error_condition make_error_condition(_Errc _Errno) noexcept
	{	
	return (error_condition((int)_Errno, generic_category()));
	}

inline error_condition make_error_condition(_Io_errc _Errno) noexcept
	{	
	return (error_condition((int)_Errno, iostream_category()));
	}

		
template<>
	struct hash<error_code>
	{	
	typedef error_code argument_type;
	typedef size_t result_type;

	size_t operator()(const argument_type& _Keyval) const
		{	
		return (hash<int>()(_Keyval.value()));
		}
	};

		
class _System_error
	: public runtime_error
	{	
private:
	static string _Makestr(error_code _Errcode, string _Message)
		{	
		if (!_Message.empty())
			_Message.append(": ");
		_Message.append(_Errcode.message());
		return (_Message);
		}

protected:
	_System_error(error_code _Errcode, const string& _Message)
		: runtime_error(_Makestr(_Errcode, _Message)), _Mycode(_Errcode)
		{	
		}

	error_code _Mycode;	
	};

class system_error
	: public _System_error
	{	
private:
	typedef _System_error _Mybase;

public:
	system_error(error_code _Errcode)
		: _Mybase(_Errcode, "")
		{	
		}

	system_error(error_code _Errcode, const string& _Message)
		: _Mybase(_Errcode, _Message)
		{	
		}

	system_error(error_code _Errcode, const char *_Message)
		: _Mybase(_Errcode, _Message)
		{	
		}

	system_error(int _Errval, const error_category& _Errcat)
		: _Mybase(error_code(_Errval, _Errcat), "")
		{	
		}

	system_error(int _Errval, const error_category& _Errcat,
		const string& _Message)
		: _Mybase(error_code(_Errval, _Errcat), _Message)
		{	
		}

	system_error(int _Errval, const error_category& _Errcat,
		const char *_Message)
		: _Mybase(error_code(_Errval, _Errcat), _Message)
		{	
		}

	const error_code& code() const noexcept
		{	
		return (_Mycode);
		}

 

 





#line 582 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
	};

__declspec(dllimport) const char *__cdecl _Syserror_map(int);
__declspec(dllimport) int __cdecl _Winerror_map(int);
__declspec(dllimport) unsigned long __cdecl _Winerror_message(
	unsigned long _Message_id, char *_Narrow, unsigned long _Size);

		
class _Generic_error_category
	: public error_category
	{	
public:
	_Generic_error_category() noexcept
		{	
		_Addr = _Generic_addr;
		}

	virtual const char *name() const noexcept
		{	
		return ("generic");
		}

	virtual string message(int _Errcode) const
		{	
		return (_Syserror_map(_Errcode));
		}
	};

		
class _Iostream_error_category
	: public _Generic_error_category
	{	
public:
	_Iostream_error_category() noexcept
		{	
		_Addr = _Iostream_addr;
		}

	virtual const char *name() const noexcept
		{	
		return ("iostream");
		}

	virtual string message(int _Errcode) const
		{	
		if (_Errcode == (int)io_errc::stream)
			return ("iostream stream error");
		else
			return (_Generic_error_category::message(_Errcode));
		}
	};

		
class _System_error_category
	: public error_category
	{	
public:
	_System_error_category() noexcept
		{	
		_Addr = _System_addr;
		}

	virtual const char *name() const noexcept
		{	
		return ("system");
		}

	virtual string message(int _Errcode) const
		{	
		const unsigned long _Size = 32767;
		string _Narrow(_Size, '\0');

		const unsigned long _Val = _Winerror_message(
			static_cast<unsigned long>(_Errcode), &_Narrow[0], _Size);

		if (_Val == 0)
			return ("unknown error");

		_Narrow.resize(_Val);
		_Narrow.shrink_to_fit();
		return (_Narrow);
		}

	virtual error_condition
		default_error_condition(int _Errval) const noexcept
		{	
		int _Posv = _Winerror_map(_Errval);

		if (_Posv != 0)
			return (error_condition(_Posv, generic_category()));
		else
			return (error_condition(_Errval, system_category()));
		}
	};

template<class _Ty>
	struct _Immortalizer
	{	
	_Immortalizer()
		{	
		::new (static_cast<void *>(&_Storage)) _Ty();
		}

	~_Immortalizer() noexcept
		{	
		}

	_Immortalizer(const _Immortalizer&) = delete;
	_Immortalizer& operator=(const _Immortalizer&) = delete;

	typename aligned_union<1, _Ty>::type _Storage;
	};

template<class _Ty> inline
	_Ty& _Immortalize()
	{	
	 static _Immortalizer<_Ty> _Static;
	return (*reinterpret_cast<_Ty *>(&_Static._Storage));
	}

inline const error_category& generic_category() noexcept
	{	
	return (_Immortalize<_Generic_error_category>());
	}

inline const error_category& iostream_category() noexcept
	{	
	return (_Immortalize<_Iostream_error_category>());
	}

inline const error_category& system_category() noexcept
	{	
	return (_Immortalize<_System_error_category>());
	}
}
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 721 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
#line 722 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"





#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"

 #line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\share.h"







#pragma once



#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4412)

 

namespace std {
 
 
 
 
 
 
 
 
 
 
 
 
 
 

 

 
 

 
 
 

		
template<class _Dummy>
	class _Iosb
	{	
public:
	enum _Dummy_enum {_Dummy_enum_val = 1};	
	enum _Fmtflags
		{	
		_Fmtmask = 0xffff, _Fmtzero = 0};

	static constexpr _Fmtflags skipws = (_Fmtflags)0x0001;
	static constexpr _Fmtflags unitbuf = (_Fmtflags)0x0002;
	static constexpr _Fmtflags uppercase = (_Fmtflags)0x0004;
	static constexpr _Fmtflags showbase = (_Fmtflags)0x0008;
	static constexpr _Fmtflags showpoint = (_Fmtflags)0x0010;
	static constexpr _Fmtflags showpos = (_Fmtflags)0x0020;
	static constexpr _Fmtflags left = (_Fmtflags)0x0040;
	static constexpr _Fmtflags right = (_Fmtflags)0x0080;
	static constexpr _Fmtflags internal = (_Fmtflags)0x0100;
	static constexpr _Fmtflags dec = (_Fmtflags)0x0200;
	static constexpr _Fmtflags oct = (_Fmtflags)0x0400;
	static constexpr _Fmtflags hex = (_Fmtflags)0x0800;
	static constexpr _Fmtflags scientific = (_Fmtflags)0x1000;
	static constexpr _Fmtflags fixed = (_Fmtflags)0x2000;

	static constexpr _Fmtflags hexfloat =
		(_Fmtflags)0x3000;	

	static constexpr _Fmtflags boolalpha = (_Fmtflags)0x4000;
	static constexpr _Fmtflags _Stdio = (_Fmtflags)0x8000;
	static constexpr _Fmtflags adjustfield = (_Fmtflags)(0x0040
		| 0x0080 | 0x0100);
	static constexpr _Fmtflags basefield = (_Fmtflags)(0x0200
		| 0x0400 | 0x0800);
	static constexpr _Fmtflags floatfield = (_Fmtflags)(0x1000
		| 0x2000);

	enum _Iostate
		{	
		_Statmask = 0x17};

	static constexpr _Iostate goodbit = (_Iostate)0x0;
	static constexpr _Iostate eofbit = (_Iostate)0x1;
	static constexpr _Iostate failbit = (_Iostate)0x2;
	static constexpr _Iostate badbit = (_Iostate)0x4;

	enum _Openmode
		{	
		_Openmask = 0xff};

	static constexpr _Openmode in = (_Openmode)0x01;
	static constexpr _Openmode out = (_Openmode)0x02;
	static constexpr _Openmode ate = (_Openmode)0x04;
	static constexpr _Openmode app = (_Openmode)0x08;
	static constexpr _Openmode trunc = (_Openmode)0x10;
	static constexpr _Openmode _Nocreate = (_Openmode)0x40;
	static constexpr _Openmode _Noreplace = (_Openmode)0x80;
	static constexpr _Openmode binary = (_Openmode)0x20;

	enum _Seekdir
		{	
		_Seekbeg,
		_Seekcur,
		_Seekend
		};

	static constexpr _Seekdir beg = _Seekbeg;
	static constexpr _Seekdir cur = _Seekcur;
	static constexpr _Seekdir end = _Seekend;

	enum
		{	
		_Openprot = 0x40};
	};

template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::skipws;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::unitbuf;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::uppercase;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showbase;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showpoint;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showpos;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::left;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::right;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::internal;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::dec;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::oct;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::hex;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::scientific;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::fixed;

template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags
		_Iosb<_Dummy>::hexfloat;	

template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::boolalpha;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::_Stdio;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::adjustfield;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::basefield;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::floatfield;

template<class _Dummy>
	const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::goodbit;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::eofbit;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::failbit;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::badbit;

template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::in;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::out;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::ate;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::app;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::trunc;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::_Nocreate;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::_Noreplace;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::binary;

template<class _Dummy>
	const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::beg;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::cur;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::end;

		
class __declspec(dllimport) ios_base
	: public _Iosb<int>
	{	
public:
	typedef int fmtflags;
	typedef int iostate;
	typedef int openmode;
	typedef int seekdir;

 
	typedef ::std:: streamoff streamoff;
	typedef ::std:: streampos streampos;
 #line 212 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"

	enum event
		{	
		erase_event, imbue_event, copyfmt_event};

	typedef void (__cdecl *event_callback)(event, ios_base&, int);

 
	typedef unsigned int io_state, open_mode, seek_dir;
 #line 222 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"

			
	class failure

		: public system_error
		{	
	public:
		explicit failure(const string &_Message,
			const error_code& _Errcode = make_error_code(io_errc::stream))
			: system_error(_Errcode, _Message)
			{	
			}

		explicit failure(const char *_Message,
			const error_code& _Errcode = make_error_code(io_errc::stream))
			: system_error(_Errcode, _Message)
			{	
			}


 

 





#line 251 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
		};

			
	class __declspec(dllimport) Init
		{	
	public:
		 Init()
			{	
			_Init_ctor(this);
			}

		 ~Init() noexcept
			{	
			_Init_dtor(this);
			}

	private:
		static  void __cdecl _Init_ctor(Init *);
		static  void __cdecl _Init_dtor(Init *);

		 static int _Init_cnt;	

		static  int& __cdecl _Init_cnt_func();
		};

	explicit  operator bool() const
		{	
		return (!fail());
		}

	bool  operator!() const
		{	
		return (fail());
		}

	void  clear(iostate _State, bool _Reraise)
		{	
		_Mystate = (iostate)(_State & _Statmask);
		if ((_Mystate & _Except) == 0)
			;
		else if (_Reraise)
			throw;
		else if (_Mystate & _Except & badbit)
			throw failure("ios_base::badbit set");
		else if (_Mystate & _Except & failbit)
			throw failure("ios_base::failbit set");
		else
			throw failure("ios_base::eofbit set");
		}

	void  clear(iostate _State = goodbit)
		{	
		clear(_State, false);
		}

 
	void  clear(io_state _State)
		{	
		clear((iostate)_State);
		}
 #line 312 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"

	iostate  rdstate() const
		{	
		return (_Mystate);
		}

	void  setstate(iostate _State, bool _Exreraise)
		{	
		if (_State != goodbit)
			clear((iostate)((int)rdstate() | (int)_State), _Exreraise);
		}

	void  setstate(iostate _State)
		{	
		if (_State != goodbit)
			clear((iostate)((int)rdstate() | (int)_State), false);
		}

 
	void  setstate(io_state _State)
		{	
		setstate((iostate)_State);
		}
 #line 336 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"

	bool  good() const
		{	
		return (rdstate() == goodbit);
		}

	bool  eof() const
		{	
		return ((int)rdstate() & (int)eofbit);
		}

	bool  fail() const
		{	
		return (((int)rdstate()
			& ((int)badbit | (int)failbit)) != 0);
		}

	bool  bad() const
		{	
		return (((int)rdstate() & (int)badbit) != 0);
		}

	iostate  exceptions() const
		{	
		return (_Except);
		}

	void  exceptions(iostate _Newexcept)
		{	
		_Except = (iostate)((int)_Newexcept & (int)_Statmask);
		clear(_Mystate);
		}

 
	void  exceptions(io_state _State)
		{	
		exceptions((iostate)_State);
		}
 #line 375 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"

	fmtflags  flags() const
		{	
		return (_Fmtfl);
		}

	fmtflags  flags(fmtflags _Newfmtflags)
		{	
		fmtflags _Oldfmtflags = _Fmtfl;
		_Fmtfl = (fmtflags)((int)_Newfmtflags & (int)_Fmtmask);
		return (_Oldfmtflags);
		}

	fmtflags  setf(fmtflags _Newfmtflags)
		{	
		ios_base::fmtflags _Oldfmtflags = _Fmtfl;
		_Fmtfl = (fmtflags)((int)_Fmtfl
			| ((int)_Newfmtflags & (int)_Fmtmask));
		return (_Oldfmtflags);
		}

	fmtflags  setf(fmtflags _Newfmtflags, fmtflags _Mask)
		{	
		ios_base::fmtflags _Oldfmtflags = _Fmtfl;
		_Fmtfl = (fmtflags)(((int)_Fmtfl & (int)~_Mask)
			| ((int)_Newfmtflags & (int)_Mask & (int)_Fmtmask));
		return (_Oldfmtflags);
		}

	void  unsetf(fmtflags _Mask)
		{	
		_Fmtfl = (fmtflags)((int)_Fmtfl & (int)~_Mask);
		}

	streamsize  precision() const
		{	
		return (_Prec);
		}

	streamsize  precision(streamsize _Newprecision)
		{	
		streamsize _Oldprecision = _Prec;
		_Prec = _Newprecision;
		return (_Oldprecision);
		}

	streamsize  width() const
		{	
		return (_Wide);
		}

	streamsize  width(streamsize _Newwidth)
		{	
		streamsize _Oldwidth = _Wide;
		_Wide = _Newwidth;
		return (_Oldwidth);
		}

	locale  getloc() const
		{	
		return (*_Ploc);
		}

	locale  imbue(const locale& _Loc)
		{	
		locale _Oldlocale = *_Ploc;
		*_Ploc = _Loc;
		_Callfns(imbue_event);
		return (_Oldlocale);
		}

	static int __cdecl xalloc()
		{	
		{ ::std:: _Lockit _Lock(2);	
			return (_Index++);
		}
		}

	long&  iword(int _Idx)
		{	
		return (_Findarr(_Idx)._Lo);
		}

	void *&  pword(int _Idx)
		{	
		return (_Findarr(_Idx)._Vp);
		}

	void  register_callback(event_callback _Pfn,
		int _Idx)
		{	
		_Calls = new _Fnarray(_Idx, _Pfn, _Calls);
		}

	ios_base&  copyfmt(const ios_base& _Other)
		{	
		if (this != &_Other)
			{	
			_Tidy();
			*_Ploc = *_Other._Ploc;
			_Fmtfl = _Other._Fmtfl;
			_Prec = _Other._Prec;
			_Wide = _Other._Wide;
			_Iosarray *_Ptr = _Other._Arr;

			for (_Arr = 0; _Ptr != 0; _Ptr = _Ptr->_Next)
				if (_Ptr->_Lo != 0 || _Ptr->_Vp != 0)
					{	
					iword(_Ptr->_Index) = _Ptr->_Lo;
					pword(_Ptr->_Index) = _Ptr->_Vp;
					}

			for (_Fnarray *_Pfa = _Other._Calls; _Pfa != 0;
				_Pfa = _Pfa->_Next)
				register_callback(_Pfa->_Pfn, _Pfa->_Index);

			_Callfns(copyfmt_event);	
			exceptions(_Other._Except);	
			}
		return (*this);
		}

	static bool __cdecl sync_with_stdio(bool _Newsync = true)
		{	
		{ ::std:: _Lockit _Lock(2);	
			const bool _Oldsync = _Sync;
			_Sync = _Newsync;
			return (_Oldsync);
		}
		}

	void  swap(ios_base& _Right)
		{	
		if (this != &_Right)
			{	
			::std:: swap(_Mystate, _Right._Mystate);
			::std:: swap(_Except, _Right._Except);
			::std:: swap(_Fmtfl, _Right._Fmtfl);
			::std:: swap(_Prec, _Right._Prec);
			::std:: swap(_Wide, _Right._Wide);

			::std:: swap(_Arr, _Right._Arr);
			::std:: swap(_Calls, _Right._Calls);
			::std:: swap(_Ploc, _Right._Ploc);
			}
		}

	virtual  ~ios_base() noexcept	
		{	
		_Ios_base_dtor(this);
		}

	static  void __cdecl
		_Addstd(ios_base *);	

	size_t _Stdstr;	

protected:
	 ios_base()
		{	
		}

	void  _Init()
		{	
		_Ploc = 0;
		_Stdstr = 0;
		_Except = goodbit;
		_Fmtfl = (fmtflags)(skipws | dec);
		_Prec = 6;
		_Wide = 0;
		_Arr = 0;
		_Calls = 0;
		clear(goodbit);
		_Ploc = new locale;
		}

private:
			
	struct _Iosarray
		: public _Crt_new_delete
		{	
	public:
		 _Iosarray(int _Idx, _Iosarray *_Link)
			: _Next(_Link), _Index(_Idx), _Lo(0), _Vp(0)
			{	
			}

		_Iosarray *_Next;	
		int _Index;	
		long _Lo;	
		void *_Vp;	
		};

			
	struct _Fnarray
		: public _Crt_new_delete
		{	
		 _Fnarray(int _Idx, event_callback _Pnew, _Fnarray *_Link)
			: _Next(_Link), _Index(_Idx), _Pfn(_Pnew)
			{	
			}

		_Fnarray *_Next;	
		int _Index;	
		event_callback _Pfn;	
		};

	void  _Callfns(event _Ev)
		{	
		for (_Fnarray *_Pfa = _Calls; _Pfa != 0; _Pfa = _Pfa->_Next)
			(*_Pfa->_Pfn)(_Ev, *this, _Pfa->_Index);
		}

	_Iosarray&  _Findarr(int _Idx)
		{	
		_Iosarray *_Ptr1, *_Ptr2;

		for (_Ptr1 = _Arr, _Ptr2 = 0; _Ptr1 != 0; _Ptr1 = _Ptr1->_Next)
			if (_Ptr1->_Index == _Idx)
				return (*_Ptr1);	
			else if (_Ptr2 == 0 && _Ptr1->_Lo == 0 && _Ptr1->_Vp == 0)
				_Ptr2 = _Ptr1;	

		if (_Ptr2 != 0)
			{	
			_Ptr2->_Index = _Idx;
			return (*_Ptr2);
			}

		_Arr = new _Iosarray(_Idx, _Arr);	
		return (*_Arr);
		}

	void  _Tidy()
		{	
		_Callfns(erase_event);
		_Iosarray *_Ptr1, *_Ptr2;

		for (_Ptr1 = _Arr; _Ptr1 != 0; _Ptr1 = _Ptr2)
			{	
			_Ptr2 = _Ptr1->_Next;
			delete _Ptr1;
			}
		_Arr = 0;

		_Fnarray *_Pfa1, *_Pfa2;
		for (_Pfa1 = _Calls; _Pfa1 != 0; _Pfa1 = _Pfa2)
			{	
			_Pfa2 = _Pfa1->_Next;
			delete _Pfa1;
			}
		_Calls = 0;
		}

	iostate _Mystate;	
	iostate _Except;	
	fmtflags _Fmtfl;	
	streamsize _Prec;	
	streamsize _Wide;	
	_Iosarray *_Arr;	
	_Fnarray *_Calls;	
	locale *_Ploc;	

	 static int _Index;
	 static bool _Sync;

	static  void __cdecl
		_Ios_base_dtor(ios_base *);

public:
	ios_base(const ios_base&) = delete;
	ios_base& operator=(const ios_base&) = delete;
	};





}
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 658 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
#line 659 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4251)

namespace std {
		
template<class _Elem,
	class _Traits>
	class basic_streambuf
	{	
	typedef basic_streambuf<_Elem, _Traits> _Myt;

protected:
	 basic_streambuf()
		: _Plocale(new locale)
		{	
		_Init();
		}

	 basic_streambuf(_Uninitialized)
		{	
		}

	 basic_streambuf(const _Myt& _Right)
		: _Plocale(new locale(_Right.getloc()))
		{	
		_Init();
		setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
		setg(_Right.eback(), _Right.gptr(), _Right.egptr());
		}

	_Myt&  operator=(const _Myt& _Right)
		{	
		if (this != &_Right)
			{	
			setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
			setg(_Right.eback(), _Right.gptr(), _Right.egptr());
			pubimbue(_Right.getloc());
			}
		return (*this);
		}

	void  swap(_Myt& _Right)
		{	
		if (this != &_Right)
			{	
			_Elem *_Pfirst0 = pbase();
			_Elem *_Pnext0 = pptr();
			_Elem *_Pend = epptr();
			_Elem *_Gfirst0 = eback();
			_Elem *_Gnext0 = gptr();
			_Elem *_Gend = egptr();

			setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
			_Right.setp(_Pfirst0, _Pnext0, _Pend);

			setg(_Right.eback(), _Right.gptr(), _Right.egptr());
			_Right.setg(_Gfirst0, _Gnext0, _Gend);

			::std:: swap(_Plocale, _Right._Plocale);
			}
		}

public:
	typedef _Elem char_type;
	typedef _Traits traits_type;

	virtual  ~basic_streambuf() noexcept
		{	
		delete _Plocale;
		}

	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

	pos_type  pubseekoff(off_type _Off,
		ios_base::seekdir _Way,
		ios_base::openmode _Mode = ios_base::in | ios_base::out)
		{	
		return (seekoff(_Off, _Way, _Mode));
		}

 
	pos_type  pubseekoff(off_type _Off,
		ios_base::seek_dir _Way,
		ios_base::open_mode _Mode)
		{	
		return (pubseekoff(_Off, (ios_base::seekdir)_Way,
			(ios_base::openmode)_Mode));
		}
 #line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"

	pos_type  pubseekpos(pos_type _Pos,
		ios_base::openmode _Mode = ios_base::in | ios_base::out)
		{	
		return (seekpos(_Pos, _Mode));
		}

 
	pos_type  pubseekpos(pos_type _Pos,
		ios_base::open_mode _Mode)
		{	
		return (seekpos(_Pos, (ios_base::openmode)_Mode));
		}
 #line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"

	_Myt * pubsetbuf(_Elem *_Buffer,
		streamsize _Count)
		{	
		return (setbuf(_Buffer, _Count));
		}

	locale  pubimbue(const locale &_Newlocale)
		{	
		locale _Oldlocale = *_Plocale;
		imbue(_Newlocale);
		*_Plocale = _Newlocale;
		return (_Oldlocale);
		}

	locale  getloc() const
		{	
		return (*_Plocale);
		}

	streamsize  in_avail()
		{	
		streamsize _Res = _Gnavail();
		return (0 < _Res ? _Res : showmanyc());
		}

	int  pubsync()
		{	
		return (sync());
		}

	int_type  sbumpc()
		{	
		return (0 < _Gnavail()
			? _Traits::to_int_type(*_Gninc()) : uflow());
		}

	int_type  sgetc()
		{	
		return (0 < _Gnavail()
			? _Traits::to_int_type(*gptr()) : underflow());
		}

	streamsize  sgetn(_Elem *_Ptr,
		streamsize _Count)
		{	
		return (xsgetn(_Ptr, _Count));
		}

	int_type  snextc()
		{	
		return (1 < _Gnavail()
			? _Traits::to_int_type(*_Gnpreinc())
			: _Traits::eq_int_type(_Traits::eof(), sbumpc())
				? _Traits::eof() : sgetc());
		}

	int_type  sputbackc(_Elem _Ch)
		{	
		return (gptr() != 0 && eback() < gptr()
			&& _Traits::eq(_Ch, gptr()[-1])
			? _Traits::to_int_type(*_Gndec())
			: pbackfail(_Traits::to_int_type(_Ch)));
		}

 
	void  stossc()
		{	
		if (0 < _Gnavail())
			_Gninc();
		else
			uflow();
		}
 #line 191 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"

	int_type  sungetc()
		{	
		return (gptr() != 0 && eback() < gptr()
			? _Traits::to_int_type(*_Gndec()) : pbackfail());
		}

	int_type  sputc(_Elem _Ch)
		{	
		return (0 < _Pnavail()
			? _Traits::to_int_type(*_Pninc() = _Ch)
			: overflow(_Traits::to_int_type(_Ch)));
		}

	streamsize  sputn(const _Elem *_Ptr,
		streamsize _Count)
		{	
		return (xsputn(_Ptr, _Count));
		}

	virtual void  _Lock()
		{	
		}

	virtual void  _Unlock()
		{	
		}

protected:
	_Elem * eback() const
		{	
		return (*_IGfirst);
		}

	_Elem * gptr() const
		{	
		return (*_IGnext);
		}

	_Elem * pbase() const
		{	
		return (*_IPfirst);
		}

	_Elem * pptr() const
		{	
		return (*_IPnext);
		}

	_Elem * egptr() const
		{	
		return (*_IGnext + *_IGcount);
		}

	void  gbump(int _Off)
		{	
		*_IGcount -= _Off;
		*_IGnext += _Off;
		}

	void  setg(_Elem *_First, _Elem *_Next, _Elem *_Last)
		{	
		*_IGfirst = _First;
		*_IGnext = _Next;
		*_IGcount = (int)(_Last - _Next);
		}

	_Elem * epptr() const
		{	
		return (*_IPnext + *_IPcount);
		}

	_Elem * _Gndec()
		{	
		++*_IGcount;
		return (--*_IGnext);
		}

	_Elem * _Gninc()
		{	
		--*_IGcount;
		return ((*_IGnext)++);
		}

	_Elem * _Gnpreinc()
		{	
		--*_IGcount;
		return (++(*_IGnext));
		}

	streamsize  _Gnavail() const
		{	
		return (*_IGnext != 0 ? *_IGcount : 0);
		}

	void  pbump(int _Off)
		{	
		*_IPcount -= _Off;
		*_IPnext += _Off;
		}

	void  setp(_Elem *_First, _Elem *_Last)
		{	
		*_IPfirst = _First;
		*_IPnext = _First;
		*_IPcount = (int)(_Last - _First);
		}

	void  setp(_Elem *_First, _Elem *_Next, _Elem *_Last)
		{	
		*_IPfirst = _First;
		*_IPnext = _Next;
		*_IPcount = (int)(_Last - _Next);
		}

	_Elem * _Pninc()
		{	
		--*_IPcount;
		return ((*_IPnext)++);
		}

	streamsize  _Pnavail() const
		{	
		return (*_IPnext != 0 ? *_IPcount : 0);
		}

	void  _Init()
		{	
		_IGfirst = &_Gfirst;
		_IPfirst = &_Pfirst;
		_IGnext = &_Gnext;
		_IPnext = &_Pnext;
		_IGcount = &_Gcount;
		_IPcount = &_Pcount;
		setp(0, 0);
		setg(0, 0, 0);
		}

	void  _Init(_Elem **_Gf, _Elem **_Gn, int *_Gc,
		_Elem **_Pf, _Elem **_Pn, int *_Pc)
		{	
		_IGfirst = _Gf;
		_IPfirst = _Pf;
		_IGnext = _Gn;
		_IPnext = _Pn;
		_IGcount = _Gc;
		_IPcount = _Pc;
		}

	virtual int_type  overflow(int_type = _Traits::eof())
		{	
		return (_Traits::eof());
		}

	virtual int_type  pbackfail(int_type = _Traits::eof())
		{	
		return (_Traits::eof());
		}

	virtual streamsize  showmanyc()
		{	
		return (0);
		}

	virtual int_type  underflow()
		{	
		return (_Traits::eof());
		}

	virtual int_type  uflow()
		{	
		return (_Traits::eq_int_type(_Traits::eof(), underflow())
			? _Traits::eof() : _Traits::to_int_type(*_Gninc()));
		}

	virtual streamsize  xsgetn(_Elem * _Ptr,
		streamsize _Count)
		{	
		int_type _Meta;
		streamsize _Size, _Copied;

		for (_Copied = 0; 0 < _Count; )
			if (0 < (_Size = _Gnavail()))
				{	
				if (_Count < _Size)
					_Size = _Count;
				_Traits::copy(_Ptr, gptr(), (size_t)_Size);
				_Ptr += _Size;
				_Copied += _Size;
				_Count -= _Size;
				gbump((int)_Size);
				}
			else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))
				break;	
			else
				{	
				*_Ptr++ = _Traits::to_char_type(_Meta);
				++_Copied;
				--_Count;
				}

		return (_Copied);
		}

	virtual streamsize  xsputn(const _Elem *_Ptr,
		streamsize _Count)
		{	
		streamsize _Size, _Copied;

		for (_Copied = 0; 0 < _Count; )
			if (0 < (_Size = _Pnavail()))
				{	
				if (_Count < _Size)
					_Size = _Count;
				_Traits::copy(pptr(), _Ptr, (size_t)_Size);
				_Ptr += _Size;
				_Copied += _Size;
				_Count -= _Size;
				pbump((int)_Size);
				}
			else if (_Traits::eq_int_type(_Traits::eof(),
				overflow(_Traits::to_int_type(*_Ptr))))
				break;	
			else
				{	
				++_Ptr;
				++_Copied;
				--_Count;
				}

		return (_Copied);
		}

	virtual pos_type  seekoff(off_type,
		ios_base::seekdir,
		ios_base::openmode = ios_base::in | ios_base::out)
		{	
		return (streampos(_BADOFF));
		}

	virtual pos_type  seekpos(pos_type,
		ios_base::openmode = ios_base::in | ios_base::out)
		{	
		return (streampos(_BADOFF));
		}

	virtual _Myt * setbuf(_Elem *, streamsize)
		{	
		return (this);
		}

	virtual int  sync()
		{	
		return (0);
		}

	virtual void  imbue(const locale&)
		{	
		}

private:
	_Elem *_Gfirst;	
	_Elem *_Pfirst;	
	_Elem **_IGfirst;	
	_Elem **_IPfirst;	
	_Elem *_Gnext;	
	_Elem *_Pnext;	
	_Elem **_IGnext;	
	_Elem **_IPnext;	

	int _Gcount;	
	int _Pcount;	
	int *_IGcount;	
	int *_IPcount;	

protected:
	locale *_Plocale;	
	};

 

  
template class __declspec(dllimport) basic_streambuf<char, char_traits<char> >;
template class __declspec(dllimport) basic_streambuf<wchar_t, char_traits<wchar_t> >;
  #line 476 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"

  



 #line 482 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"

		
template<class _Elem,
	class _Traits>
	class istreambuf_iterator
		: public iterator<input_iterator_tag,
			_Elem, typename _Traits::off_type, const _Elem *, _Elem>
	{	
	typedef istreambuf_iterator<_Elem, _Traits> _Myt;
public:
	typedef _Elem char_type;
	typedef _Traits traits_type;
	typedef basic_streambuf<_Elem, _Traits> streambuf_type;
	typedef basic_istream<_Elem, _Traits> istream_type;

	typedef typename traits_type::int_type int_type;
	typedef const _Elem *pointer;

	constexpr istreambuf_iterator(streambuf_type *_Sb = 0) noexcept
		: _Strbuf(_Sb), _Got(_Sb == 0), _Val()
		{	
		}

	istreambuf_iterator(istream_type& _Istr) noexcept
		: _Strbuf(_Istr.rdbuf()), _Got(_Istr.rdbuf() == 0)
		{	
		}

	_Elem operator*() const
		{	
		if (!_Got)
			_Peek();

 


#line 519 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"

		return (_Val);
		}

	const _Elem *operator->() const
		{	
		return (pointer_traits<pointer>::pointer_to(**this));
		}

	_Myt& operator++()
		{	
 


#line 534 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"

		_Inc();
		return (*this);
		}

	_Myt operator++(int)
		{	
		if (!_Got)
			_Peek();
		_Myt _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	bool equal(const _Myt& _Right) const
		{	
		if (!_Got)
			_Peek();
		if (!_Right._Got)
			_Right._Peek();
		return ((_Strbuf == 0 && _Right._Strbuf == 0)
			|| (_Strbuf != 0 && _Right._Strbuf != 0));
		}

private:
	void _Inc()
		{	
		if (_Strbuf == 0
			|| traits_type::eq_int_type(traits_type::eof(),
				_Strbuf->sbumpc()))
			_Strbuf = 0, _Got = true;
		else
			_Got = false;
		}

	_Elem _Peek() const
		{	
		int_type _Meta;
		if (_Strbuf == 0
			|| traits_type::eq_int_type(traits_type::eof(),
				_Meta = _Strbuf->sgetc()))
			_Strbuf = 0;
		else
			_Val = traits_type::to_char_type(_Meta);
		_Got = true;
		return (_Val);
		}

	mutable streambuf_type *_Strbuf;	
	mutable bool _Got;	
	mutable _Elem _Val;	
	};

template<class _Elem,
	class _Traits>
	struct _Is_checked_helper<istreambuf_iterator<_Elem, _Traits> >
		: public true_type
	{	
	};

		
template<class _Elem,
	class _Traits> inline
	bool  operator==(
		const istreambuf_iterator<_Elem, _Traits>& _Left,
		const istreambuf_iterator<_Elem, _Traits>& _Right)
	{	
	return (_Left.equal(_Right));
	}

template<class _Elem,
	class _Traits> inline
	bool  operator!=(
		const istreambuf_iterator<_Elem, _Traits>& _Left,
		const istreambuf_iterator<_Elem, _Traits>& _Right)
	{	
	return (!(_Left == _Right));
	}

		
template<class _Elem,
	class _Traits>
	class ostreambuf_iterator
		: public _Outit
	{	
	typedef ostreambuf_iterator<_Elem, _Traits> _Myt;
public:
	typedef _Elem char_type;
	typedef _Traits traits_type;
	typedef basic_streambuf<_Elem, _Traits> streambuf_type;
	typedef basic_ostream<_Elem, _Traits> ostream_type;

	ostreambuf_iterator(streambuf_type *_Sb) noexcept
		: _Failed(false), _Strbuf(_Sb)
		{	
		}

	ostreambuf_iterator(ostream_type& _Ostr) noexcept
		: _Failed(false), _Strbuf(_Ostr.rdbuf())
		{	
		}

	_Myt& operator=(_Elem _Right)
		{	
		if (_Strbuf == 0
			|| traits_type::eq_int_type(_Traits::eof(),
				_Strbuf->sputc(_Right)))
			_Failed = true;
		return (*this);
		}

	_Myt& operator*()
		{	
		return (*this);
		}

	_Myt& operator++()
		{	
		return (*this);
		}

	_Myt& operator++(int)
		{	
		return (*this);
		}

	bool failed() const noexcept
		{	
		return (_Failed);
		}

private:
	bool _Failed;	
	streambuf_type *_Strbuf;	
	};

template<class _Elem,
	class _Traits>
	struct _Is_checked_helper<ostreambuf_iterator<_Elem, _Traits> >
		: public true_type
	{	
	};
}

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 682 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
#line 683 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"





#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4189 4275)

		

 
extern "C" {
 #line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"

extern __declspec(dllimport) float __cdecl _Stofx(const char *,
	    char **,
	long, int *);
extern __declspec(dllimport) double __cdecl _Stodx(const char *,
	    char **,
	long, int *);
extern __declspec(dllimport) long double __cdecl _Stoldx(const char *,
	    char **,
	long, int *);
extern __declspec(dllimport) long __cdecl _Stolx(const char *,
	    char **,
	int, int *);
extern __declspec(dllimport) unsigned long __cdecl _Stoulx(const char *,
	    char **,
	int, int *);
extern __declspec(dllimport) long long __cdecl _Stollx(const char *,
	    char **,
	int, int *);
extern __declspec(dllimport) unsigned long long __cdecl _Stoullx(const char *,
	    char **,
	int, int *);

 
}
 #line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"

namespace std {

	
inline double _Stodx_v2(const char *_Str, char **_Endptr, int _Pten, int *_Perr)
	{	
	int& _Errno_ref = (*_errno());	
	const int _Orig = _Errno_ref;

	_Errno_ref = 0;
	double _Val = :: strtod(_Str, _Endptr);
	*_Perr = _Errno_ref;
	_Errno_ref = _Orig;

	if (_Pten != 0)
		_Val *= :: pow(10.0, static_cast<double>(_Pten));

	return (_Val);
	}

	
inline float _Stofx_v2(const char *_Str, char **_Endptr, int _Pten, int *_Perr)
	{	
	int& _Errno_ref = (*_errno());	
	const int _Orig = _Errno_ref;

	_Errno_ref = 0;
	float _Val = :: strtof(_Str, _Endptr);
	*_Perr = _Errno_ref;
	_Errno_ref = _Orig;

	if (_Pten != 0)
		_Val *= :: powf(10.0f, static_cast<float>(_Pten));

	return (_Val);
	}


template<class _Elem> inline
	size_t _Find_elem(_Elem *_Base, _Elem _Ch)
	{	
	_Elem *_Ptr = _Base;
	for (; *_Ptr != (_Elem)0 && *_Ptr != _Ch; ++_Ptr)
		;
	return ((size_t)(_Ptr - _Base));
	}

inline wchar_t *_Maklocwcs(const wchar_t *_Ptr)
	{	
	size_t _Count = :: wcslen(_Ptr) + 1;

	wchar_t *_Ptrdest = (wchar_t *)calloc(_Count, sizeof (wchar_t));
#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"

	if (!_Ptrdest)
		_Xbad_alloc();
	:: wmemcpy(_Ptrdest, _Ptr, _Count);
	return (_Ptrdest);
	}

		
template<class _Elem>
	class numpunct
		: public locale::facet
	{	
public:
	typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
		string_type;
	typedef _Elem char_type;

	 __declspec(dllimport) static locale::id id;	

	_Elem decimal_point() const
		{	
		return (do_decimal_point());
		}

	_Elem thousands_sep() const
		{	
		return (do_thousands_sep());
		}

	string grouping() const
		{	
		return (do_grouping());
		}

	string_type falsename() const
		{	
		return (do_falsename());
		}

	string_type truename() const
		{	
		return (do_truename());
		}

	explicit numpunct(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
			if (_Kseparator == 0)
				_Kseparator =	
					_Maklocchr(',', (_Elem *)0, _Lobj._Getcvt());
		}
		}

	numpunct(const _Locinfo& _Lobj, size_t _Refs = 0, bool _Isdef = false)
		: locale::facet(_Refs)
		{	
		_Init(_Lobj, _Isdef);
		}

	static size_t _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new numpunct<_Elem>(
				_Locinfo(_Ploc->c_str()), 0, true);
		return (4);
		}

protected:
	virtual  ~numpunct() noexcept
		{	
		_Tidy();
		}

	numpunct(const char *_Locname, size_t _Refs = 0, bool _Isdef = false)
		: locale::facet(_Refs)
		{	
		{ _Locinfo _Lobj(_Locname);
			_Init(_Lobj, _Isdef);
		}
		}

	template<class _Elem2>
		void _Getvals(_Elem2, const lconv *_Ptr, _Locinfo::_Cvtvec _Cvt)
		{	
		_Dp = _Maklocchr(_Ptr->decimal_point[0], (_Elem2 *)0, _Cvt);
		_Kseparator = _Maklocchr(_Ptr->thousands_sep[0], (_Elem2 *)0, _Cvt);
		}

	template<>
		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)
		{	
		_Dp = (_Elem)_Ptr->_W_decimal_point[0];
		_Kseparator = (_Elem)_Ptr->_W_thousands_sep[0];
		}

	void _Init(const _Locinfo& _Lobj, bool _Isdef = false)
		{	
		const lconv *_Ptr = _Lobj._Getlconv();
		_Locinfo::_Cvtvec _Cvt = _Lobj._Getcvt();	

		_Grouping = 0;
		_Falsename = 0;
		_Truename = 0;

		try {
		_Grouping = _Maklocstr(_Isdef ? "" : _Ptr->grouping, (char *)0, _Lobj._Getcvt());
#line 213 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
		_Falsename = _Maklocstr(_Lobj._Getfalse(), (_Elem *)0, _Cvt);
		_Truename = _Maklocstr(_Lobj._Gettrue(), (_Elem *)0, _Cvt);
		} catch (...) {
		_Tidy();
		throw;
		}

		if (_Isdef)
			{	

			_Dp = _Maklocchr('.', (_Elem *)0, _Cvt);
			_Kseparator = _Maklocchr(',', (_Elem *)0, _Cvt);
			}
		else
			_Getvals((_Elem)0, _Ptr, _Cvt);
		}

	virtual _Elem  do_decimal_point() const
		{	
		return (_Dp);
		}

	virtual _Elem  do_thousands_sep() const
		{	
		return (_Kseparator);
		}

	virtual string  do_grouping() const
		{	
		return (string(_Grouping));
		}

	virtual string_type  do_falsename() const
		{	
		return (string_type(_Falsename));
		}

	virtual string_type  do_truename() const
		{	
		return (string_type(_Truename));
		}

private:
	void _Tidy()
		{	
		:: free((void *)_Grouping);
		:: free((void *)_Falsename);
		:: free((void *)_Truename);
		}

	const char *_Grouping;	
	_Elem _Dp;	
	_Elem _Kseparator;	
	const _Elem *_Falsename;	
	const _Elem *_Truename;	
	};

		
template<class _Elem>
	class numpunct_byname
		: public numpunct<_Elem>
	{	
public:
	explicit numpunct_byname(const char *_Locname, size_t _Refs = 0)
		: numpunct<_Elem>(_Locname, _Refs)
		{	
		}

	explicit numpunct_byname(const string& _Str, size_t _Refs = 0)
		: numpunct<_Elem>(_Str.c_str(), _Refs)
		{	
		}

protected:
	virtual  ~numpunct_byname() noexcept
		{	
		}
	};

		
template<class _Elem>
	 locale::id numpunct<_Elem>::id;

		
template<class _Elem,
	class _InIt = istreambuf_iterator<_Elem, char_traits<_Elem> > >
	class num_get
		: public locale::facet
	{	
public:
	typedef numpunct<_Elem> _Mypunct;
	typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
		_Mystr;

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new num_get<_Elem, _InIt>(
				_Locinfo(_Ploc->c_str()));
		return (4);
		}

	 static locale::id id;	

protected:
	virtual  ~num_get() noexcept
		{	
		}

	void _Init(const _Locinfo&)
		{	
		}

public:
	explicit  num_get(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 num_get(const _Locinfo& _Lobj, size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		_Init(_Lobj);
		}

	typedef _Elem char_type;
	typedef _InIt iter_type;

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase,	ios_base::iostate& _State,
			bool& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase,	ios_base::iostate& _State,
			unsigned short& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase,	ios_base::iostate& _State,
			unsigned int& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			long& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned long& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			long long& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned long long& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			float& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			double& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			long double& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			void *& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

protected:
	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			bool& _Val) const
		{	
		;
		int _Ans = -1;	

		if (_Iosbase.flags() & ios_base::boolalpha)
			{	
			typedef typename _Mystr::size_type _Mystrsize;
			const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
			_Mystr _Str((_Mystrsize)1, (char_type)0);
			_Str += _Punct_fac.falsename();
			_Str += (char_type)0;
			_Str += _Punct_fac.truename();	
			_Ans = _Getloctxt(_First, _Last, (size_t)2, _Str.c_str());
			}
		else
			{	
			char _Ac[32], *_Ep;
			int _Errno = 0;
			const unsigned long _Ulo = :: _Stoulx(_Ac, &_Ep,
				_Getifld(_Ac, _First, _Last, _Iosbase.flags(),
					_Iosbase.getloc()), &_Errno);
			if (_Ep != _Ac && _Errno == 0 && _Ulo <= 1)
				_Ans = _Ulo;
			}

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ans < 0)
			_State |= ios_base::failbit;
		else
			_Val = _Ans != 0;	
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned short& _Val) const
		{	
		;
		char _Ac[32], *_Ep;
		int _Errno = 0;
		int _Base = _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
			_Iosbase.getloc());	
		char *_Ptr = _Ac[0] == '-' ? _Ac + 1 : _Ac;	
		const unsigned long _Ans =
			:: _Stoulx(_Ptr, &_Ep, _Base, &_Errno);	

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ptr || _Errno != 0 || 0xffff < _Ans)
			_State |= ios_base::failbit;
		else
			_Val = (unsigned short)(_Ac[0] == '-'
				? 0 -_Ans : _Ans);	
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned int& _Val) const
		{	
		;
		char _Ac[32], *_Ep;
		int _Errno = 0;
		int _Base = _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
			_Iosbase.getloc());	
		char *_Ptr = _Ac[0] == '-' ? _Ac + 1 : _Ac;	
		const unsigned long _Ans =
			:: _Stoulx(_Ptr, &_Ep, _Base, &_Errno);	

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ptr || _Errno != 0 || 0xffffffff < _Ans)
			_State |= ios_base::failbit;
		else
			_Val = _Ac[0] == '-' ? 0 -_Ans : _Ans;	
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			long& _Val) const
		{	
		;
		char _Ac[32], *_Ep;
		int _Errno = 0;
		const long _Ans = :: _Stolx(_Ac, &_Ep,
			_Getifld(_Ac, _First, _Last, _Iosbase.flags(),
				_Iosbase.getloc()), &_Errno);	

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ac || _Errno != 0)
			_State |= ios_base::failbit;
		else
			_Val = _Ans;	
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned long& _Val) const
		{	
		;
		char _Ac[32], *_Ep;
		int _Errno = 0;
		const unsigned long _Ans = :: _Stoulx(_Ac, &_Ep,
			_Getifld(_Ac, _First, _Last, _Iosbase.flags(),
				_Iosbase.getloc()), &_Errno);	

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ac || _Errno != 0)
			_State |= ios_base::failbit;
		else
			_Val = _Ans;	
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			long long& _Val) const
		{	
		;
		char _Ac[32], *_Ep;
		int _Errno = 0;
		const long long _Ans = :: _Stollx(_Ac, &_Ep,
			_Getifld(_Ac, _First, _Last, _Iosbase.flags(),
				_Iosbase.getloc()), &_Errno);	

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ac || _Errno != 0)
			_State |= ios_base::failbit;
		else
			_Val = _Ans;	
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned long long& _Val) const
		{	
		;
		char _Ac[32], *_Ep;
		int _Errno = 0;
		const unsigned long long _Ans = :: _Stoullx(_Ac, &_Ep,
			_Getifld(_Ac, _First, _Last, _Iosbase.flags(),
				_Iosbase.getloc()), &_Errno);	

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ac || _Errno != 0)
			_State |= ios_base::failbit;
		else
			_Val = _Ans;	
		return (_First);
		}







	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			float& _Val) const
		{	
		;
		char _Ac[(8 + 768 + 16)], *_Ep;
		int _Errno = 0;
		int _Hexexp = 1000000000;
		float _Ans = _Stofx_v2(_Ac, &_Ep,
			_Getffld(_Ac, _First, _Last,
				_Iosbase, &_Hexexp), &_Errno);	

		if (_Hexexp != 1000000000 && _Hexexp != 0)
			_Ans = :: ldexpf(_Ans, 4 * _Hexexp);

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ac || _Errno != 0)
			_State |= ios_base::failbit;
		else
			_Val = _Ans;	
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			double& _Val) const
		{	
		;
		char _Ac[(8 + 768 + 16)], *_Ep;
		int _Errno = 0;
		int _Hexexp = 1000000000;
		double _Ans = _Stodx_v2(_Ac, &_Ep,
			_Getffld(_Ac, _First, _Last,
				_Iosbase, &_Hexexp), &_Errno);	

		if (_Hexexp != 1000000000 && _Hexexp != 0)
			_Ans = :: ldexp(_Ans, 4 * _Hexexp);

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ac || _Errno != 0)
			_State |= ios_base::failbit;
		else
			_Val = _Ans;	
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			long double& _Val) const
		{	
		;
		char _Ac[(8 + 768 + 16)], *_Ep;
		int _Errno = 0;
		int _Hexexp = 1000000000;
		long double _Ans = _Stodx_v2(_Ac, &_Ep,
			_Getffld(_Ac, _First, _Last,
				_Iosbase, &_Hexexp), &_Errno);	

		if (_Hexexp != 1000000000 && _Hexexp != 0)
			_Ans = :: ldexpl(_Ans, 4 * _Hexexp);

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ac || _Errno != 0)
			_State |= ios_base::failbit;
		else
			_Val = _Ans;	
		return (_First);
		}



	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			void *& _Val) const
		{	
		;
		char _Ac[32], *_Ep;
		int _Errno = 0;

		int _Base = _Getifld(_Ac, _First, _Last, ios_base::hex,
			_Iosbase.getloc());	
		const unsigned long long _Ans =
			(sizeof (void *) == sizeof (unsigned long))
				? (unsigned long long):: _Stoulx(_Ac, &_Ep, _Base, &_Errno)
				: :: _Stoullx(_Ac, &_Ep, _Base, &_Errno);

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ac || _Errno != 0)
			_State |= ios_base::failbit;
		else
			_Val = (void *)((char *)0 + _Ans);	
		return (_First);
		}

private:
	int __cdecl _Getifld(char *_Ac,
		_InIt& _First, _InIt& _Last, ios_base::fmtflags _Basefield,
			const locale& _Loc) const
		{	
		const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Loc);
		const string _Grouping = _Punct_fac.grouping();
		const _Elem _Kseparator = _Grouping.size() == 0
			? (_Elem)0 : _Punct_fac.thousands_sep();

		enum {
			_NUMGET_SIGNOFF = 22,
			_NUMGET_XOFF = 24};
		static const char _Src[] = {"0123456789ABCDEFabcdef-+Xx"};	
		_Elem _Atoms[sizeof (_Src)];
		const ctype<_Elem>& _Ctype_fac =
			use_facet< ctype<_Elem> >(_Loc);
		_Ctype_fac.widen(&_Src[0], &_Src[sizeof (_Src)], _Atoms);

		char *_Ptr = _Ac;

		if (_First == _Last)
			;	
		else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
			*_Ptr++ = '+', ++_First;	
		else if (*_First == _Atoms[_NUMGET_SIGNOFF])
			*_Ptr++ = '-', ++_First;	

		_Basefield &= ios_base::basefield;
		int _Base = _Basefield == ios_base::oct ? 8
			: _Basefield == ios_base::hex ? 16
			: _Basefield == ios_base::_Fmtzero ? 0 : 10;

		bool _Seendigit = false;	
		bool _Nonzero = false;	

		if (_First != _Last && *_First == _Atoms[0])
			{	
			_Seendigit = true, ++_First;
			if (_First != _Last && (*_First == _Atoms[_NUMGET_XOFF + 1]
					|| *_First == _Atoms[_NUMGET_XOFF])
				&& (_Base == 0 || _Base == 16))
				_Base = 16, _Seendigit = false, ++_First;
			else if (_Base == 0)
				_Base = 8;
			}

		size_t _Dlen = _Base == 0 || _Base == 10 ? 10
			: _Base == 8 ? 8 : 16 + 6;
		string _Groups((size_t)1, (char)_Seendigit);
		size_t _Group = 0;

		for (char *const _Pe = &_Ac[32 - 1];
			_First != _Last; ++_First)
			{	
			size_t _Idx = _Find_elem(_Atoms, *_First);
			if (_Idx < _Dlen)
				{	
				*_Ptr = _Src[_Idx];
				if ((_Nonzero || *_Ptr != '0') && _Ptr < _Pe)
					++_Ptr, _Nonzero = true;
				_Seendigit = true;
				if (_Groups[_Group] != 127)
					++_Groups[_Group];
				}
			else if (_Groups[_Group] == '\0'
				|| _Kseparator == (_Elem)0
				|| *_First != _Kseparator)
				break;	
			else
				{	
				_Groups.append((string::size_type)1, '\0');
				++_Group;
				}
			}

		if (_Group == 0)
			;	
		else if ('\0' < _Groups[_Group])
			++_Group;	
		else
			_Seendigit = false;	

		for (const char *_Pg = &_Grouping[0]; _Seendigit && 0 < _Group; )
			if (*_Pg == 127)
				break;	
			else if ((0 < --_Group && *_Pg != _Groups[_Group])
				|| (0 == _Group && *_Pg < _Groups[_Group]))
				_Seendigit = false;	
			else if ('\0' < _Pg[1])
				++_Pg;	

		if (_Seendigit && !_Nonzero)
			*_Ptr++ = '0';	
		else if (!_Seendigit)
			_Ptr = _Ac;	
		*_Ptr = '\0';
		return (_Base);
		}

	int __cdecl _Getffld(char *_Ac,
		_InIt& _First, _InIt &_Last,
		ios_base& _Iosbase, int *_Phexexp) const
		{	
		if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::hexfloat)
			return (_Getffldx(_Ac, _First, _Last,
				_Iosbase, _Phexexp));	

		const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
		const string _Grouping = _Punct_fac.grouping();
		char *_Ptr = _Ac;
		bool _Bad = false;
		bool _Sticky = false;

		enum {
			_NUMGET_SIGNOFF = 10,
			_NUMGET_EOFF = 12};
		static const char _Src[] = {"0123456789-+Ee"};	
		_Elem _Atoms[sizeof (_Src)];
		const ctype<_Elem>& _Ctype_fac =
			use_facet< ctype<_Elem> >(_Iosbase.getloc());
		_Ctype_fac.widen(&_Src[0], &_Src[sizeof (_Src)], _Atoms);

		if (_First == _Last)
			;	
		else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
			*_Ptr++ = '+', ++_First;	
		else if (*_First == _Atoms[_NUMGET_SIGNOFF])
			*_Ptr++ = '-', ++_First;	

		char *_Leading = _Ptr;	
		*_Ptr++ = '0';	

		bool _Seendigit = false;	
		int _Significant = 0;	
		int _Pten = 0;	
		size_t _Idx;

		const int _Max_sig_dig = (*_Phexexp == 1000000000 ? 768 : 36);

		const char *_Pg = &_Grouping[0];
		if (*_Pg == 127 || *_Pg <= '\0')
			for (; _First != _Last
				&& (_Idx = _Find_elem(_Atoms, *_First)) < 10;
					_Seendigit = true, ++_First)
				if (_Max_sig_dig <= _Significant)
					{	
					++_Pten;
					if (0 < _Idx)
						_Sticky = true;
					}
				else if (_Idx == 0 && _Significant == 0)
					;	
				else
					{	
					*_Ptr++ = _Src[_Idx];
					++_Significant;
					}
		else
			{	
			const _Elem _Kseparator = _Grouping.size() == 0
				? (_Elem)0 : _Punct_fac.thousands_sep();
			string _Groups((size_t)1, '\0');
			size_t _Group = 0;

			for (; _First != _Last; ++_First)
				if ((_Idx = _Find_elem(_Atoms, *_First)) < 10)
					{	
					_Seendigit = true;
					if (_Max_sig_dig <= _Significant)
						{	
						++_Pten;
						if (0 < _Idx)
							_Sticky = true;
						}
					else if (_Idx == 0 && _Significant == 0)
						;	
					else
						{	
						*_Ptr++ = _Src[_Idx];
						++_Significant;
						}
					if (_Groups[_Group] != 127)
						++_Groups[_Group];
					}
				else if (_Groups[_Group] == '\0'
					|| _Kseparator == (_Elem)0
					|| *_First != _Kseparator)
					break;	
				else
					{	
					_Groups.append((size_t)1, '\0');
					++_Group;
					}
			if (_Group == 0)
				;	
			else if ('\0' < _Groups[_Group])
				++_Group;	
			else
				_Bad = true;	

			while (!_Bad && 0 < _Group)
				if (*_Pg == 127)
					break;	
				else if ((0 < --_Group && *_Pg != _Groups[_Group])
					|| (0 == _Group && *_Pg < _Groups[_Group]))
					_Bad = true;	
				else if ('\0' < _Pg[1])
					++_Pg;	
			}

		if (_First != _Last && *_First == _Punct_fac.decimal_point())
			*_Ptr++ = localeconv()->decimal_point[0], ++_First;	

		if (*_Phexexp != 1000000000 && _Significant == 0)
			{	
			for (; _First != _Last && *_First == _Atoms[0];
				_Seendigit = true, ++_First)
				--_Pten;	
			if (_Pten < 0)
				*_Ptr++ = '0', ++_Pten;	
			}

		for (; _First != _Last
				&& (_Idx = _Find_elem(_Atoms, *_First)) < 10;
				_Seendigit = true, ++_First)
			if (_Significant < _Max_sig_dig)
				{	
				*_Ptr++ = _Src[_Idx];
				++_Significant;
				}
			else if (0 < _Idx)
				_Sticky = true;	

		if (_Sticky)
			{	
			char *_Px = _Ptr;
			for (; --_Px != _Leading; )
				{	
				if (*_Px == localeconv()->decimal_point[0])
					;	
				else if (*_Px != '9')
					{	
					++*_Px;
					break;
					}
				else
					*_Px = '0';	
				}

			if (_Px == _Leading)
				{	
				*_Px = '1';
				++_Pten;
				}
			}

		if (_Seendigit && _First != _Last
			&& (*_First == _Atoms[_NUMGET_EOFF + 1]
				|| *_First == _Atoms[_NUMGET_EOFF]))
			{	
			*_Ptr++ = 'e', ++_First;
			_Seendigit = false, _Significant = 0;

			if (_First == _Last)
				;	
			else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
				*_Ptr++ = '+', ++_First;	
			else if (*_First == _Atoms[_NUMGET_SIGNOFF])
				*_Ptr++ = '-', ++_First;	
			for (; _First != _Last && *_First == _Atoms[0]; )
				_Seendigit = true, ++_First;	
			if (_Seendigit)
				*_Ptr++ = '0';	
			for (; _First != _Last
				&& (_Idx = _Find_elem(_Atoms, *_First)) < 10;
				_Seendigit = true, ++_First)
				if (_Significant < 8)
					{	
					*_Ptr++ = _Src[_Idx];
					++_Significant;
					}
			}

		if (_Bad || !_Seendigit)
			_Ptr = _Ac;	
		*_Ptr = '\0';
		return (_Pten);
		}

	int __cdecl _Getffldx(char *_Ac,
		_InIt& _First, _InIt &_Last,
		ios_base& _Iosbase, int *_Phexexp) const
		{	
		const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
		const string _Grouping = _Punct_fac.grouping();

		enum {
			_NUMGET_SIGNOFF = 22,
			_NUMGET_XOFF = 24,
			_NUMGET_POFF = 26};
		static const char _Src[] = {"0123456789ABCDEFabcdef-+XxPp"};	
		_Elem _Atoms[sizeof (_Src)];
		const ctype<_Elem>& _Ctype_fac =
			use_facet< ctype<_Elem> >(_Iosbase.getloc());
		_Ctype_fac.widen(&_Src[0], &_Src[sizeof (_Src)], _Atoms);

		char *_Ptr = _Ac;
		bool _Bad = false;
		size_t _Idx;

		if (_First == _Last)
			;	
		else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
			*_Ptr++ = '+', ++_First;	
		else if (*_First == _Atoms[_NUMGET_SIGNOFF])
			*_Ptr++ = '-', ++_First;	

		*_Ptr++ = '0';
		*_Ptr++ = 'x';

		bool _Seendigit = false;	
		int _Significant = 0;	
		int _Phex = 0;	

		if (_First == _Last || *_First != _Atoms[0])
			;
		else if (++_First != _Last
			&& (*_First == _Atoms[_NUMGET_XOFF + 1]
				|| *_First == _Atoms[_NUMGET_XOFF]))
			++_First;	
		else
			_Seendigit = true;	

		const int _Max_sig_dig = (*_Phexexp == 1000000000 ? 768 : 36);

		const char *_Pg = &_Grouping[0];
		if (*_Pg == 127 || *_Pg <= '\0')
			for (; _First != _Last
				&& (_Idx = _Find_elem(_Atoms, *_First)) < _NUMGET_SIGNOFF;
					_Seendigit = true, ++_First)
				if (_Max_sig_dig <= _Significant)
					++_Phex;	
				else if (_Idx == 0 && _Significant == 0)
					;	
				else
					{	
					*_Ptr++ = _Src[_Idx];
					++_Significant;
					}
		else
			{	
			const _Elem _Kseparator = _Grouping.size() == 0
				? (_Elem)0 : _Punct_fac.thousands_sep();
			string _Groups((size_t)1, '\0');
			size_t _Group = 0;

			for (; _First != _Last; ++_First)
				if ((_Idx = _Find_elem(_Atoms, *_First)) < _NUMGET_SIGNOFF)
					{	
					_Seendigit = true;
					if (_Max_sig_dig <= _Significant)
						++_Phex;	
					else if (_Idx == 0 && _Significant == 0)
						;	
					else
						{	
						*_Ptr++ = _Src[_Idx];
						++_Significant;
						}
					if (_Groups[_Group] != 127)
						++_Groups[_Group];
					}
				else if (_Groups[_Group] == '\0'
					|| _Kseparator == (_Elem)0
					|| *_First != _Kseparator)
					break;	
				else
					{	
					_Groups.append((size_t)1, '\0');
					++_Group;
					}
			if (_Group == 0)
				;	
			else if ('\0' < _Groups[_Group])
				++_Group;	
			else
				_Bad = true;	

			while (!_Bad && 0 < _Group)
				if (*_Pg == 127)
					break;	
				else if ((0 < --_Group && *_Pg != _Groups[_Group])
					|| (0 == _Group && *_Pg < _Groups[_Group]))
					_Bad = true;	
				else if ('\0' < _Pg[1])
					++_Pg;	
			}

		if (_Seendigit && _Significant == 0)
			*_Ptr++ = '0';	

		if (_First != _Last && *_First == _Punct_fac.decimal_point())
			*_Ptr++ = localeconv()->decimal_point[0], ++_First;	

		if (_Significant == 0)
			{	
			for (; _First != _Last && *_First == _Atoms[0];
				_Seendigit = true, ++_First)
				--_Phex;	
			if (_Phex < 0)
				*_Ptr++ = '0', ++_Phex;	
			}

		for (; _First != _Last
				&& (_Idx = _Find_elem(_Atoms, *_First)) < _NUMGET_SIGNOFF;
				_Seendigit = true, ++_First)
			if (_Significant < _Max_sig_dig)
				{	
				*_Ptr++ = _Src[_Idx];
				++_Significant;
				}

		if (_Seendigit && _First != _Last
			&& (*_First == _Atoms[_NUMGET_POFF + 1]
				|| *_First == _Atoms[_NUMGET_POFF]))
			{	
			*_Ptr++ = 'p', ++_First;
			_Seendigit = false, _Significant = 0;

			if (_First == _Last)
				;	
			else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
				*_Ptr++ = '+', ++_First;	
			else if (*_First == _Atoms[_NUMGET_SIGNOFF])
				*_Ptr++ = '-', ++_First;	
			for (; _First != _Last && *_First == _Atoms[0]; )
				_Seendigit = true, ++_First;	
			if (_Seendigit)
				*_Ptr++ = '0';	
			for (; _First != _Last
				&& (_Idx = _Find_elem(_Atoms, *_First)) < _NUMGET_SIGNOFF;
				_Seendigit = true, ++_First)
				if (_Significant < 8)
					{	
					*_Ptr++ = _Src[_Idx];
					++_Significant;
					}
			}

		if (_Bad || !_Seendigit)
			_Ptr = _Ac;	
		*_Ptr = '\0';
		*_Phexexp = _Phex;	
		return (0);	
		}



	};

		
template<class _Elem,
	class _InIt>
	 locale::id num_get<_Elem, _InIt>::id;

		
template<class _Elem,
	class _OutIt = ostreambuf_iterator<_Elem, char_traits<_Elem> > >
	class num_put
		: public locale::facet
	{	
public:
	typedef numpunct<_Elem> _Mypunct;
	typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
		_Mystr;

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new num_put<_Elem, _OutIt>(
				_Locinfo(_Ploc->c_str()));
		return (4);
		}

	 static locale::id id;	

protected:
	virtual  ~num_put() noexcept
		{	
		}

	void  _Init(const _Locinfo&)
		{	
		}

public:
	explicit  num_put(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 num_put(const _Locinfo& _Lobj, size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		_Init(_Lobj);
		}

	typedef _Elem char_type;
	typedef _OutIt iter_type;

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, bool _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, long _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, unsigned long _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, long long _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, unsigned long long _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, double _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, long double _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, const void *_Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

protected:
	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, bool _Val) const
		{	
		;
		if (!(_Iosbase.flags() & ios_base::boolalpha))
			return (do_put(_Dest, _Iosbase, _Fill, (long)_Val));
		else
			{	
			const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
			_Mystr _Str;
			if (_Val)
				_Str.assign(_Punct_fac.truename());
			else
				_Str.assign(_Punct_fac.falsename());

			size_t _Fillcount = _Iosbase.width() <= 0
				|| (size_t)_Iosbase.width() <= _Str.size()
					? 0 : (size_t)_Iosbase.width() - _Str.size();

			if ((_Iosbase.flags() & ios_base::adjustfield) != ios_base::left)
				{	
				_Dest = _Rep(_Dest, _Fill, _Fillcount);
				_Fillcount = 0;
				}
			_Dest = _Put(_Dest, _Str.c_str(), _Str.size());	
			_Iosbase.width(0);
			return (_Rep(_Dest, _Fill, _Fillcount));	
			}
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, long _Val) const
		{	
		char _Buf[2 * 32], _Fmt[6];

		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
			:: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "ld",
				_Iosbase.flags()), _Val)));
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, unsigned long _Val) const
		{	
		char _Buf[2 * 32], _Fmt[6];

		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
			:: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "lu",
				_Iosbase.flags()), _Val)));
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, long long _Val) const
		{	
		char _Buf[2 * 32], _Fmt[8];

		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
			:: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "Ld",
				_Iosbase.flags()), _Val)));
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, unsigned long long _Val) const
		{	
		char _Buf[2 * 32], _Fmt[8];

		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
			:: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "Lu",
				_Iosbase.flags()), _Val)));
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, double _Val) const
		{	
		string _Buf;
		char _Fmt[8];
		bool _Isfixed = (_Iosbase.flags() & ios_base::floatfield)
			== ios_base::fixed;
		streamsize _Precision = _Iosbase.precision() <= 0 && !_Isfixed
			? 6 : _Iosbase.precision();	
		size_t _Bufsize = (size_t)_Precision;
		if (_Isfixed && 1e10 < :: fabs(_Val))
			{	
			int _Ptwo;
			(void):: frexp(_Val, &_Ptwo);
			_Bufsize += :: abs(_Ptwo) * 30103L / 100000L;
			}
		_Buf.resize(_Bufsize + 50);	

		int _Ngen = :: sprintf_s((char *)_Buf.c_str(), _Buf.size(),
			_Ffmt(_Fmt, 0, _Iosbase.flags()), (int)_Precision, _Val);

		return (_Fput(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen));
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, long double _Val) const
		{	
		string _Buf;
		char _Fmt[8];
		bool _Isfixed = (_Iosbase.flags() & ios_base::floatfield)
			== ios_base::fixed;
		streamsize _Precision = _Iosbase.precision() <= 0 && !_Isfixed
			? 6 : _Iosbase.precision();	
		size_t _Bufsize = (size_t)_Precision;
		if (_Isfixed && 1e10 < :: fabsl(_Val))
			{	
			int _Ptwo;
			(void):: frexpl(_Val, &_Ptwo);
			_Bufsize += :: abs(_Ptwo) * 30103L / 100000L;
			}
		_Buf.resize(_Bufsize + 50);	

		int _Ngen = :: sprintf_s((char *)_Buf.c_str(), _Buf.size(),
			_Ffmt(_Fmt, 'L', _Iosbase.flags()), (int)_Precision, _Val);

		return (_Fput(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen));
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, const void *_Val) const
		{	
		char _Buf[2 * 32];

		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
			:: sprintf_s(_Buf, sizeof (_Buf), "%p", _Val)));
		}

private:
	char *__cdecl _Ffmt(char *_Fmt,
		char _Spec, ios_base::fmtflags _Flags) const
		{	
		char *_Ptr = _Fmt;
		*_Ptr++ = '%';

		if (_Flags & ios_base::showpos)
			*_Ptr++ = '+';
		if (_Flags & ios_base::showpoint)
			*_Ptr++ = '#';
		*_Ptr++ = '.';
		*_Ptr++ = '*';	
		if (_Spec != '\0')
			*_Ptr++ = _Spec;	

		ios_base::fmtflags _Ffl = _Flags & ios_base::floatfield;
		if (_Flags & ios_base::uppercase)
			*_Ptr++ = _Ffl == ios_base::fixed ? 'f'
				: _Ffl == ios_base::hexfloat ? 'A'	
				: _Ffl == ios_base::scientific ? 'E' : 'G';	
		else
			*_Ptr++ = _Ffl == ios_base::fixed ? 'f'
				: _Ffl == ios_base::hexfloat ? 'a'	
				: _Ffl == ios_base::scientific ? 'e' : 'g';	

		*_Ptr = '\0';
		return (_Fmt);
		}

	_OutIt __cdecl _Fput(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, const char *_Buf,
			size_t _Count) const
		{	
		;
		size_t _Prefix = 0 < _Count && (*_Buf == '+' || *_Buf == '-')
			? 1 : 0;

		const char *_Exps;
		if ((_Iosbase.flags() & ios_base::floatfield) != ios_base::hexfloat)
			_Exps = "eE";
		else
			{	
			_Exps = "pP";
			if (_Prefix + 2 <= _Count && _Buf[_Prefix] == '0'
				&& (_Buf[_Prefix + 1] == 'x' || _Buf[_Prefix + 1] == 'X'))
				_Prefix += 2;
			}
		const size_t _Eoff =
			:: strcspn(&_Buf[0], _Exps);	
		char _Dp[2] = {"."};
		_Dp[0] = :: localeconv()->decimal_point[0];
		const size_t _Poff =
			:: strcspn(&_Buf[0], &_Dp[0]);	

		const ctype<_Elem>& _Ctype_fac =
			use_facet< ctype<_Elem> >(_Iosbase.getloc());
		_Mystr _Groupstring(_Count, _Elem(0));	
		_Ctype_fac.widen(&_Buf[0], &_Buf[_Count], &_Groupstring[0]);

		const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
		const string _Grouping = _Punct_fac.grouping();
		const _Elem _Kseparator = _Punct_fac.thousands_sep();

		if (_Poff != _Count)
			_Groupstring[_Poff] = _Punct_fac.decimal_point();

		size_t _Off = _Poff == _Count ? _Eoff : _Poff;
		const char *_Pg = &_Grouping[0];
		while (*_Pg != 127 && '\0' < *_Pg
			&& (size_t)*_Pg < _Off - _Prefix)
			{	
			_Groupstring.insert(_Off -= *_Pg, (size_t)1, _Kseparator);
			if ('\0' < _Pg[1])
				++_Pg;	
			}

		_Count = _Groupstring.size();
		size_t _Fillcount = _Iosbase.width() <= 0
			|| (size_t)_Iosbase.width() <= _Count
				? 0 : (size_t)_Iosbase.width() - _Count;

		ios_base::fmtflags _Adjustfield =
			_Iosbase.flags() & ios_base::adjustfield;
		if (_Adjustfield != ios_base::left
			&& _Adjustfield != ios_base::internal)
			{	
			_Dest = _Rep(_Dest, _Fill, _Fillcount);
			_Fillcount = 0;
			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
			}
		else if (_Adjustfield == ios_base::internal)
			{	
			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
			_Dest = _Rep(_Dest, _Fill, _Fillcount);
			_Fillcount = 0;
			}
		else
			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

		_Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);
		_Iosbase.width(0);
		return (_Rep(_Dest, _Fill, _Fillcount));	
		}

	char *__cdecl _Ifmt(char *_Fmt,
		const char *_Spec, ios_base::fmtflags _Flags) const
		{	
		char *_Ptr = _Fmt;
		*_Ptr++ = '%';

		if (_Flags & ios_base::showpos)
			*_Ptr++ = '+';
		if (_Flags & ios_base::showbase)
			*_Ptr++ = '#';
		if (_Spec[0] != 'L')
			*_Ptr++ = _Spec[0];	
		else

			{	
			*_Ptr++ = 'I';
			*_Ptr++ = '6';
			*_Ptr++ = '4';
			}

		ios_base::fmtflags _Basefield = _Flags & ios_base::basefield;
		*_Ptr++ = _Basefield == ios_base::oct ? 'o'
			: _Basefield != ios_base::hex ? _Spec[1]	
			: _Flags & ios_base::uppercase ? 'X' : 'x';
		*_Ptr = '\0';
		return (_Fmt);
		}

	_OutIt __cdecl _Iput(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, char *_Buf, size_t _Count) const
		{	
		;
		size_t _Prefix = 0 < _Count && (*_Buf == '+' || *_Buf == '-')
			? 1 : 0;
		if ((_Iosbase.flags() & ios_base::basefield) == ios_base::hex
			&& _Prefix + 2 <= _Count && _Buf[_Prefix] == '0'
			&& (_Buf[_Prefix + 1] == 'x' || _Buf[_Prefix + 1] == 'X'))
			_Prefix += 2;

		const ctype<_Elem>& _Ctype_fac =
			use_facet< ctype<_Elem> >(_Iosbase.getloc());
		_Mystr _Groupstring(_Count, _Elem(0));	
		_Ctype_fac.widen(&_Buf[0], &_Buf[_Count], &_Groupstring[0]);

		const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
		const string _Grouping = _Punct_fac.grouping();
		const char *_Pg = &_Grouping[0];
		if (*_Pg != 127 && '\0' < *_Pg)
			{	
			const _Elem _Kseparator = _Punct_fac.thousands_sep();
			while (*_Pg != 127 && '\0' < *_Pg
				&& (size_t)*_Pg < _Count - _Prefix)
				{	
				_Count -= *_Pg;
				_Groupstring.insert(_Count, 1, _Kseparator);
				if ('\0' < _Pg[1])
					++_Pg;	
				}
			}

		_Count = _Groupstring.size();
		size_t _Fillcount = _Iosbase.width() <= 0
			|| (size_t)_Iosbase.width() <= _Count
				? 0 : (size_t)_Iosbase.width() - _Count;

		ios_base::fmtflags _Adjustfield =
			_Iosbase.flags() & ios_base::adjustfield;
		if (_Adjustfield != ios_base::left
			&& _Adjustfield != ios_base::internal)
			{	
			_Dest = _Rep(_Dest, _Fill, _Fillcount);
			_Fillcount = 0;
			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
			}
		else if (_Adjustfield == ios_base::internal)
			{	
			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
			_Dest = _Rep(_Dest, _Fill, _Fillcount);
			_Fillcount = 0;
			}
		else
			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

		_Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);
		_Iosbase.width(0);
		return (_Rep(_Dest, _Fill, _Fillcount));	
		}

	_OutIt __cdecl _Put(_OutIt _Dest,
		const _Elem *_Ptr, size_t _Count) const
		{	
		for (; 0 < _Count; --_Count, (void)++_Dest, ++_Ptr)
			*_Dest = *_Ptr;
		return (_Dest);
		}

	_OutIt __cdecl _Rep(_OutIt _Dest,
		_Elem _Ch, size_t _Count) const
		{	
		for (; 0 < _Count; --_Count, (void)++_Dest)
			*_Dest = _Ch;
		return (_Dest);
		}
	};

		
template<class _Elem,
	class _OutIt>
	 locale::id num_put<_Elem, _OutIt>::id;

 

  
template  locale::id numpunct<char>::id;
template class __declspec(dllimport) num_get<char,
	istreambuf_iterator<char, char_traits<char> > >;
template class __declspec(dllimport) num_put<char,
	ostreambuf_iterator<char, char_traits<char> > >;

template  locale::id numpunct<wchar_t>::id;
template class __declspec(dllimport) num_get<wchar_t,
	istreambuf_iterator<wchar_t, char_traits<wchar_t> > >;
template class __declspec(dllimport) num_put<wchar_t,
	ostreambuf_iterator<wchar_t, char_traits<wchar_t> > >;
  #line 1610 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"

  






 #line 1619 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
}
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 1624 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
#line 1625 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"






#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4189)

namespace std {
		
template<class _Elem,
	class _Traits>
	class basic_ios
		: public ios_base
	{	
public:
	typedef basic_ios<_Elem, _Traits> _Myt;
	typedef basic_ostream<_Elem, _Traits> _Myos;
	typedef basic_streambuf<_Elem, _Traits> _Mysb;
	typedef ctype<_Elem> _Ctype;
	typedef _Elem char_type;
	typedef _Traits traits_type;
	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

	explicit  basic_ios(_Mysb *_Strbuf)
		{	
		init(_Strbuf);
		}

	virtual  ~basic_ios() noexcept
		{	
		}

	void  clear(iostate _State = goodbit,
		bool _Reraise = false)
		{	
		ios_base::clear((iostate)(_Mystrbuf == 0
			? (int)_State | (int)badbit : (int)_State), _Reraise);
		}

 
	void  clear(io_state _State)
		{	
		clear((iostate)_State);
		}
 #line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"

	void  setstate(iostate _State,
		bool _Reraise = false)
		{	
		if (_State != goodbit)
			clear((iostate)((int)rdstate() | (int)_State), _Reraise);
		}

 
	void  setstate(io_state _State)
		{	
		setstate((iostate)_State);
		}
 #line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"

	_Myt&  copyfmt(const _Myt& _Right)
		{	
		_Tiestr = _Right.tie();
		_Fillch = _Right.fill();
		ios_base::copyfmt(_Right);
		return (*this);
		}

	_Myos * tie() const
		{	
		return (_Tiestr);
		}

	_Myos * tie(_Myos *_Newtie)
		{	
		_Myos *_Oldtie = _Tiestr;
		_Tiestr = _Newtie;
		return (_Oldtie);
		}

	_Mysb * rdbuf() const
		{	
		return (_Mystrbuf);
		}

	_Mysb * rdbuf(_Mysb *_Strbuf)
		{	
		_Mysb *_Oldstrbuf = _Mystrbuf;
		_Mystrbuf = _Strbuf;
		clear();
		return (_Oldstrbuf);
		}

	locale  imbue(const locale& _Loc)
		{	
		locale _Oldlocale = ios_base::imbue(_Loc);
		if (rdbuf() != 0)
			rdbuf()->pubimbue(_Loc);
		return (_Oldlocale);
		}

	_Elem  fill() const
		{	
		return (_Fillch);
		}

	_Elem  fill(_Elem _Newfill)
		{	
		_Elem _Oldfill = _Fillch;
		_Fillch = _Newfill;
		return (_Oldfill);
		}

	char  narrow(_Elem _Ch, char _Dflt = '\0') const
		{	
		const _Ctype& _Ctype_fac = use_facet< _Ctype >(getloc());
		return (_Ctype_fac.narrow(_Ch, _Dflt));
		}

	_Elem  widen(char _Byte) const
		{	
		const _Ctype& _Ctype_fac = use_facet< _Ctype >(getloc());
		return (_Ctype_fac.widen(_Byte));
		}

	void  move(_Myt& _Right)
		{	
		if (this != &_Right)
			{	
			_Mystrbuf = 0;
			_Tiestr = 0;
			this->swap(_Right);
			}
		}

	void  move(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			_Mystrbuf = 0;
			_Tiestr = 0;
			this->swap(_Right);
			}
		}

	void  swap(_Myt& _Right) noexcept
		{	
		ios_base::swap(_Right);
		::std:: swap(_Fillch, _Right._Fillch);
		::std:: swap(_Tiestr, _Right._Tiestr);
		}

	void  set_rdbuf(_Mysb *_Strbuf)
		{	
		_Mystrbuf = _Strbuf;
		}

protected:
	void  init(_Mysb *_Strbuf = 0,
		bool _Isstd = false)
		{	
		_Init();	
		_Mystrbuf = _Strbuf;
		_Tiestr = 0;
		_Fillch = widen(' ');

		if (_Mystrbuf == 0)
			setstate(badbit);

		if (_Isstd)
			_Addstd(this);	
		}

	 basic_ios()
		{	
		}

private:
	_Mysb *_Mystrbuf;	
	_Myos *_Tiestr;	
	_Elem _Fillch;	

public:
	 basic_ios(const _Myt&) = delete;
	_Myt&  operator=(const _Myt&) = delete;
	};

 

  
template class __declspec(dllimport) basic_ios<char,
	char_traits<char> >;
template class __declspec(dllimport) basic_ios<wchar_t,
	char_traits<wchar_t> >;
  #line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"

  



 #line 211 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"

		
inline ios_base& __cdecl boolalpha(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::boolalpha);
	return (_Iosbase);
	}

inline ios_base& __cdecl dec(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::dec, ios_base::basefield);
	return (_Iosbase);
	}

inline ios_base& __cdecl defaultfloat(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::floatfield);
	return (_Iosbase);
	}

inline ios_base& __cdecl fixed(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::fixed, ios_base::floatfield);
	return (_Iosbase);
	}

inline ios_base& __cdecl hex(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::hex, ios_base::basefield);
	return (_Iosbase);
	}

inline ios_base& __cdecl hexfloat(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::hexfloat, ios_base::floatfield);
	return (_Iosbase);
	}


namespace tr1 {	
using ::std:: hexfloat;
}	
#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"

inline ios_base& __cdecl internal(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::internal, ios_base::adjustfield);
	return (_Iosbase);
	}

inline ios_base& __cdecl left(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::left, ios_base::adjustfield);
	return (_Iosbase);
	}

inline ios_base& __cdecl noboolalpha(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::boolalpha);
	return (_Iosbase);
	}

inline ios_base& __cdecl noshowbase(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::showbase);
	return (_Iosbase);
	}

inline ios_base& __cdecl noshowpoint(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::showpoint);
	return (_Iosbase);
	}

inline ios_base& __cdecl noshowpos(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::showpos);
	return (_Iosbase);
	}

inline ios_base& __cdecl noskipws(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::skipws);
	return (_Iosbase);
	}

inline ios_base& __cdecl nounitbuf(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::unitbuf);
	return (_Iosbase);
	}

inline ios_base& __cdecl nouppercase(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::uppercase);
	return (_Iosbase);
	}

inline ios_base& __cdecl oct(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::oct, ios_base::basefield);
	return (_Iosbase);
	}

inline ios_base& __cdecl right(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::right, ios_base::adjustfield);
	return (_Iosbase);
	}

inline ios_base& __cdecl scientific(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::scientific, ios_base::floatfield);
	return (_Iosbase);
	}

inline ios_base& __cdecl showbase(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::showbase);
	return (_Iosbase);
	}

inline ios_base& __cdecl showpoint(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::showpoint);
	return (_Iosbase);
	}

inline ios_base& __cdecl showpos(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::showpos);
	return (_Iosbase);
	}

inline ios_base& __cdecl skipws(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::skipws);
	return (_Iosbase);
	}

inline ios_base& __cdecl unitbuf(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::unitbuf);
	return (_Iosbase);
	}

inline ios_base& __cdecl uppercase(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::uppercase);
	return (_Iosbase);
	}
}

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 368 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
#line 369 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4189 4390)

namespace std {
		

 
 

 



 



 



#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"

 #pragma vtordisp(push, 2)	

		
template<class _Elem,
	class _Traits>
	class basic_ostream
		: virtual public basic_ios<_Elem, _Traits>
	{	
public:
	typedef basic_ostream<_Elem, _Traits> _Myt;
	typedef basic_ios<_Elem, _Traits> _Myios;
	typedef basic_streambuf<_Elem, _Traits> _Mysb;
	typedef ostreambuf_iterator<_Elem, _Traits> _Iter;
	typedef num_put<_Elem, _Iter> _Nput;

	explicit  basic_ostream(
		basic_streambuf<_Elem, _Traits> *_Strbuf,

		bool _Isstd = false)
		{	
		_Myios::init(_Strbuf, _Isstd);
		}

	 basic_ostream(_Uninitialized, bool _Addit = true)
		{	
		if (_Addit)
			this->_Addstd(this);	
		}

protected:
	 basic_ostream(_Myt&& _Right)
		{	
		_Myios::init();
		_Myios::move(::std:: move(_Right));
		}

	_Myt&  operator=(_Myt&& _Right)
		{	
		this->swap(_Right);
		return (*this);
		}

	void  swap(_Myt& _Right)
		{	
		if (this != &_Right)
			_Myios::swap(_Right);
		}

public:
	 basic_ostream(const _Myt&) = delete;
	_Myt&  operator=(const _Myt&) = delete;

	virtual  ~basic_ostream() noexcept
		{	
		}

	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

	class _Sentry_base
		{	
	public:
		 _Sentry_base(_Myt& _Ostr)
			: _Myostr(_Ostr)
			{	
			if (_Myostr.rdbuf() != 0)
				_Myostr.rdbuf()->_Lock();
			}

		 ~_Sentry_base() noexcept
			{	
			if (_Myostr.rdbuf() != 0)
				_Myostr.rdbuf()->_Unlock();
			}

		_Myt& _Myostr;	

	private:
		_Sentry_base& operator=(const _Sentry_base&);
		};

	class sentry
		: public _Sentry_base
		{	
	public:
		explicit  sentry(_Myt& _Ostr)
			: _Sentry_base(_Ostr)
			{	
			if (_Ostr.good() && _Ostr.tie() != 0 && _Ostr.tie() != &_Ostr)
				_Ostr.tie()->flush();
			_Ok = _Ostr.good();	
			}

		 ~sentry() noexcept
			{	
 
			if (!::std:: uncaught_exception())
				this->_Myostr._Osfx();

 

#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
			}

		explicit  operator bool() const
			{	
			return (_Ok);
			}

		 sentry(const sentry&) = delete;
		sentry&  operator=(const sentry&) = delete;

	private:
		bool _Ok;	
		};

	bool  opfx()
		{	
		if (this->good() && _Myios::tie() != 0 && _Myios::tie() != this)
			_Myios::tie()->flush();
		return (this->good());
		}

	void  osfx()
		{	
		_Osfx();
		}

	void  _Osfx()
		{	
		try {
		if (this->good() && this->flags() & ios_base::unitbuf)
			if (_Myios::rdbuf()->pubsync() == -1)	
				_Myios::setstate(ios_base::badbit);
		} catch (...) {
		}
		}

  





















	_Myt&  operator<<(_Myt& (__cdecl *_Pfn)(_Myt&))
		{	
		;
		return ((*_Pfn)(*this));
		}

	_Myt&  operator<<(_Myios& (__cdecl *_Pfn)(_Myios&))
		{	
		;
		(*_Pfn)(*(_Myios *)this);
		return (*this);
		}

	_Myt&  operator<<(ios_base& (__cdecl *_Pfn)(ios_base&))
		{	
		;
		(*_Pfn)(*(ios_base *)this);
		return (*this);
		}

	_Myt&  operator<<(bool _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(short _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());
			ios_base::fmtflags _Bfl =
				this->flags() & ios_base::basefield;
			long _Tmp = (_Bfl == ios_base::oct
				|| _Bfl == ios_base::hex)
				? (long)(unsigned short)_Val : (long)_Val;

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Tmp).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}










	_Myt&  operator<<(unsigned short _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), (unsigned long)_Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(int _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());
			ios_base::fmtflags _Bfl =
				this->flags() & ios_base::basefield;
			long _Tmp = (_Bfl == ios_base::oct
				|| _Bfl == ios_base::hex)
				? (long)(unsigned int)_Val : (long)_Val;

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Tmp).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(unsigned int _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), (unsigned long)_Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(long _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(unsigned long _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(long long _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(unsigned long long _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(float _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), (double)_Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(double _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(long double _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(const void *_Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(_Mysb *_Strbuf)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		bool _Copied = false;
		const sentry _Ok(*this);

		if (_Ok && _Strbuf != 0)
			for (int_type _Meta = _Traits::eof(); ; _Copied = true)
				{	
				try {
				_Meta = _Traits::eq_int_type(_Traits::eof(), _Meta)
					? _Strbuf->sgetc() : _Strbuf->snextc();
				} catch (...) {
					_Myios::setstate(ios_base::failbit);
					throw;
				}

				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					break;	

				try {
					if (_Traits::eq_int_type(_Traits::eof(),
						_Myios::rdbuf()->sputc(
							_Traits::to_char_type(_Meta))))
						{	
						_State |= ios_base::badbit;
						break;
						}
				} catch (...) { _Myios::setstate(ios_base::badbit, true); }
				}

		this->width(0);
		_Myios::setstate(_Strbuf == 0 ? ios_base::badbit
			: !_Copied ? _State | ios_base::failbit : _State);
		return (*this);
		}

	_Myt&  put(_Elem _Ch)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (!_Ok)
			_State |= ios_base::badbit;
		else
			{	
			try {
			if (_Traits::eq_int_type(_Traits::eof(),
				_Myios::rdbuf()->sputc(_Ch)))
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  write(const _Elem *_Str,
		streamsize _Count)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (!_Ok)
			_State |= ios_base::badbit;
		else if (0 < _Count)
			{	
			;
			try {
			if (_Myios::rdbuf()->sputn(_Str, _Count) != _Count)
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  flush()
		{	
		if (_Myios::rdbuf() != 0)
			{	
			const sentry _Ok(*this);

			if (_Ok && _Myios::rdbuf()->pubsync() == -1)
				_Myios::setstate(ios_base::badbit);	
			}
		return (*this);
		}

	_Myt&  seekp(pos_type _Pos)
		{	
		const sentry _Ok(*this);

		if (!this->fail()
			&& (off_type)_Myios::rdbuf()->pubseekpos(_Pos,
				ios_base::out) == _BADOFF)
			_Myios::setstate(ios_base::failbit);
		return (*this);
		}

	_Myt&  seekp(off_type _Off, ios_base::seekdir _Way)
		{	
		const sentry _Ok(*this);

		if (!this->fail()
			&& (off_type)_Myios::rdbuf()->pubseekoff(_Off, _Way,
				ios_base::out) == _BADOFF)
			_Myios::setstate(ios_base::failbit);
		return (*this);
		}

	pos_type  tellp()
		{	
		const sentry _Ok(*this);

		if (!this->fail())
			return (_Myios::rdbuf()->pubseekoff(0,
				ios_base::cur, ios_base::out));
		else
			return (pos_type(_BADOFF));
		}
	};

 #pragma vtordisp(pop)	

	

  

















































 

  
template class __declspec(dllimport) basic_ostream<char,
	char_traits<char> >;
template class __declspec(dllimport) basic_ostream<wchar_t,
	char_traits<wchar_t> >;
  #line 681 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"

  



 #line 687 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"

		

template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr, const char *_Val)
	{	
	ios_base::iostate _State = ios_base::goodbit;
	streamsize _Count = (streamsize):: strlen(_Val);	
	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
		? 0 : _Ostr.width() - _Count;
	const typename basic_ostream<_Elem, _Traits>::sentry _Ok(_Ostr);

	if (!_Ok)
		_State |= ios_base::badbit;
	else
		{	
		try {
		const ctype<_Elem>& _Ctype_fac = use_facet< ctype<_Elem> >(_Ostr.getloc());
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}

		for (; _State == ios_base::goodbit && 0 < _Count; --_Count, ++_Val)
			if (_Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ctype_fac.widen(*_Val))))
					_State |= ios_base::badbit;

		if (_State == ios_base::goodbit)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}
		_Ostr.width(0);
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.setstate(_State);
	return (_Ostr);
	}

template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr, char _Ch)
	{	
	ios_base::iostate _State = ios_base::goodbit;
	const typename basic_ostream<_Elem, _Traits>::sentry _Ok(_Ostr);

	if (_Ok)
		{	
		const ctype<_Elem>& _Ctype_fac = use_facet< ctype<_Elem> >(_Ostr.getloc());
		streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

		try {
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; _State == ios_base::goodbit && 0 < _Pad;
				--_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					_State |= ios_base::badbit;

		if (_State == ios_base::goodbit
			&& _Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ctype_fac.widen(_Ch))))
			_State |= ios_base::badbit;

		for (; _State == ios_base::goodbit && 0 < _Pad;
			--_Pad)	
			if (_Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ostr.fill())))
				_State |= ios_base::badbit;
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.width(0);
	_Ostr.setstate(_State);
	return (_Ostr);
	}

template<class _Traits> inline
	basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr,
		const char *_Val)
	{	
	typedef char _Elem;
	typedef basic_ostream<_Elem, _Traits> _Myos;
	ios_base::iostate _State = ios_base::goodbit;
	streamsize _Count = (streamsize)_Traits::length(_Val);	
	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
		? 0 : _Ostr.width() - _Count;
	const typename _Myos::sentry _Ok(_Ostr);

	if (!_Ok)
		_State |= ios_base::badbit;
	else
		{	
		try {
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}

		if (_State == ios_base::goodbit
			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)
			_State |= ios_base::badbit;

		if (_State == ios_base::goodbit)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}
		_Ostr.width(0);
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.setstate(_State);
	return (_Ostr);
	}

template<class _Traits> inline
	basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr, char _Ch)
	{	
	typedef char _Elem;
	typedef basic_ostream<_Elem, _Traits> _Myos;
	ios_base::iostate _State = ios_base::goodbit;
	const typename _Myos::sentry _Ok(_Ostr);

	if (_Ok)
		{	
		streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

		try {
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; _State == ios_base::goodbit && 0 < _Pad;
				--_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					_State |= ios_base::badbit;

		if (_State == ios_base::goodbit
			&& _Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ch)))
			_State |= ios_base::badbit;

		for (; _State == ios_base::goodbit && 0 < _Pad;
			--_Pad)	
			if (_Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ostr.fill())))
				_State |= ios_base::badbit;
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.width(0);
	_Ostr.setstate(_State);
	return (_Ostr);
	}

template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr, const _Elem *_Val)
	{	
	typedef basic_ostream<_Elem, _Traits> _Myos;

	ios_base::iostate _State = ios_base::goodbit;
	streamsize _Count = (streamsize)_Traits::length(_Val);	
	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
		? 0 : _Ostr.width() - _Count;
	const typename _Myos::sentry _Ok(_Ostr);

	if (!_Ok)
		_State |= ios_base::badbit;
	else
		{	
		try {
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}

		if (_State == ios_base::goodbit
			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)
			_State |= ios_base::badbit;

		if (_State == ios_base::goodbit)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}
		_Ostr.width(0);
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.setstate(_State);
	return (_Ostr);
	}

template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr, _Elem _Ch)
	{	
	typedef basic_ostream<_Elem, _Traits> _Myos;

	ios_base::iostate _State = ios_base::goodbit;
	const typename _Myos::sentry _Ok(_Ostr);

	if (_Ok)
		{	
		streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

		try {
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; _State == ios_base::goodbit && 0 < _Pad;
				--_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					_State |= ios_base::badbit;

		if (_State == ios_base::goodbit
			&& _Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ch)))
			_State |= ios_base::badbit;

		for (; _State == ios_base::goodbit && 0 < _Pad;
			--_Pad)	
			if (_Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ostr.fill())))
				_State |= ios_base::badbit;
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.width(0);
	_Ostr.setstate(_State);
	return (_Ostr);
	}

template<class _Traits> inline
	basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr, const signed char *_Val)
	{	
	return (_Ostr << (const char *)_Val);
	}

template<class _Traits> inline
	basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr, signed char _Ch)
	{	
	return (_Ostr << (char)_Ch);
	}

template<class _Traits> inline
	basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr, const unsigned char *_Val)
	{	
	return (_Ostr << (const char *)_Val);
	}

template<class _Traits> inline
	basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr, unsigned char _Ch)
	{	
	return (_Ostr << (char)_Ch);
	}

template<class _Elem,
	class _Traits,
	class _Ty> inline
	basic_ostream<_Elem, _Traits>&
		operator<<(basic_ostream<_Elem, _Traits>&& _Ostr, const _Ty& _Val)
	{	
	return (_Ostr << _Val);
	}

		
template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>&
		__cdecl endl(basic_ostream<_Elem, _Traits>& _Ostr)
	{	
	_Ostr.put(_Ostr.widen('\n'));
	_Ostr.flush();
	return (_Ostr);
	}

template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>&
		__cdecl ends(basic_ostream<_Elem, _Traits>& _Ostr)
	{	
	_Ostr.put(_Elem());
	return (_Ostr);
	}

template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>&
		__cdecl flush(basic_ostream<_Elem, _Traits>& _Ostr)
	{	
	_Ostr.flush();
	return (_Ostr);
	}

		
template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>&
		operator<<(basic_ostream<_Elem, _Traits>& _Ostr,
			const error_code& _Errcode)
	{	
	return (_Ostr << _Errcode.category().name() << ':' << _Errcode.value());
	}
}

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 1030 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
#line 1031 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4189)

namespace std {
 #pragma vtordisp(push, 2)	

		
template<class _Elem,
	class _Traits>
	class basic_istream
		: virtual public basic_ios<_Elem, _Traits>
	{	
public:
	typedef basic_istream<_Elem, _Traits> _Myt;
	typedef basic_ios<_Elem, _Traits> _Myios;
	typedef basic_streambuf<_Elem, _Traits> _Mysb;
	typedef istreambuf_iterator<_Elem, _Traits> _Iter;
	typedef ctype<_Elem> _Ctype;
	typedef num_get<_Elem, _Iter> _Nget;

  







#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"

	explicit  basic_istream(_Mysb *_Strbuf,
		bool _Isstd = false)

		: _Chcount(0)
		{	
		_Myios::init(_Strbuf, _Isstd);
		}

	 basic_istream(_Uninitialized)
		{	
		this->_Addstd(this);
		}

protected:
	 basic_istream(_Myt&& _Right)
		: _Chcount(_Right._Chcount)
		{	
		_Myios::init();
		_Myios::move(::std:: move(_Right));
		_Right._Chcount = 0;
		}

	_Myt&  operator=(_Myt&& _Right)
		{	
		this->swap(_Right);
		return (*this);
		}

	void  swap(_Myt& _Right)
		{	
		_Myios::swap(_Right);
		::std:: swap(_Chcount, _Right._Chcount);
		}

public:
	 basic_istream(const _Myt&) = delete;
	_Myt&  operator=(const _Myt&) = delete;

	virtual  ~basic_istream() noexcept
		{	
		}

	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

		
	class _Sentry_base
		{	
	public:
		 _Sentry_base(_Myt& _Istr)
			: _Myistr(_Istr)
			{	
			if (_Myistr.rdbuf() != 0)
				_Myistr.rdbuf()->_Lock();
			}

		 ~_Sentry_base() noexcept
			{	
			if (_Myistr.rdbuf() != 0)
				_Myistr.rdbuf()->_Unlock();
			}

		_Myt& _Myistr;	

	private:
		_Sentry_base& operator=(const _Sentry_base&);
		};

	class sentry
		: public _Sentry_base
		{	
	public:
		explicit  sentry(_Myt& _Istr, bool _Noskip = false)
			: _Sentry_base(_Istr)
			{	
			_Ok = this->_Myistr._Ipfx(_Noskip);
			}

		explicit  operator bool() const
			{	
			return (_Ok);
			}

		 sentry(const sentry&) = delete;
		sentry&  operator=(const sentry&) = delete;

	private:
		bool _Ok;	
		};

	bool  _Ipfx(bool _Noskip = false)
		{	
		if (this->good())
			{	
			if (_Myios::tie() != 0)
				_Myios::tie()->flush();

			if (!_Noskip && this->flags() & ios_base::skipws)
				{	
				const _Ctype& _Ctype_fac = use_facet< _Ctype >(this->getloc());

				try {
				int_type _Meta = _Myios::rdbuf()->sgetc();

				for (; ; _Meta = _Myios::rdbuf()->snextc())
					if (_Traits::eq_int_type(_Traits::eof(), _Meta))
						{	
						_Myios::setstate(ios_base::eofbit);
						break;
						}
					else if (!_Ctype_fac.is(_Ctype::space,
						_Traits::to_char_type(_Meta)))
						break;	
				} catch (...) { _Myios::setstate(ios_base::badbit, true); }
				}

			if (this->good())
				return (true);
			}
		_Myios::setstate(ios_base::failbit);
		return (false);
		}

	bool  ipfx(bool _Noskip = false)
		{	
		return (_Ipfx(_Noskip));
		}

	void  isfx()
		{	
		}

  





















	_Myt&  operator>>(_Myt& (__cdecl *_Pfn)(_Myt&))
		{	
		;
		return ((*_Pfn)(*this));
		}

	_Myt&  operator>>(_Myios& (__cdecl *_Pfn)(_Myios&))
		{	
		;
		(*_Pfn)(*(_Myios *)this);
		return (*this);
		}

	_Myt&  operator>>(ios_base& (__cdecl *_Pfn)(ios_base&))
		{	
		;
		(*_Pfn)(*(ios_base *)this);
		return (*this);
		}

	_Myt&  operator>>(bool& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(short& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			long _Tmp = 0;
			const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Tmp);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }

			if (_State & ios_base::failbit
				|| _Tmp < (-32768) || 32767 < _Tmp)
				_State |= ios_base::failbit;
			else
				_Val = (short)_Tmp;
			}

		_Myios::setstate(_State);
		return (*this);
		}










	_Myt&  operator>>(unsigned short& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(int& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			long _Tmp = 0;
			const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Tmp);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }

			if (_State & ios_base::failbit
				|| _Tmp < (-2147483647 - 1) || 2147483647 < _Tmp)
				_State |= ios_base::failbit;
			else
				_Val = _Tmp;
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(unsigned int& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(long& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());
			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(unsigned long& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(long long& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(unsigned long long& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(float& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(double& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(long double& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());
			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(void *& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(_Mysb *_Strbuf)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		bool _Copied = false;
		const sentry _Ok(*this);

		if (_Ok && _Strbuf != 0)
			{	
			try {
			int_type _Meta = _Myios::rdbuf()->sgetc();

			for (; ; _Meta = _Myios::rdbuf()->snextc())
				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else
					{	
					try {
						if (_Traits::eq_int_type(_Traits::eof(),
							_Strbuf->sputc(_Traits::to_char_type(_Meta))))
							break;
					} catch (...) {
						break;
					}
					_Copied = true;
					}
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(!_Copied ? _State | ios_base::failbit : _State);
		return (*this);
		}

	int_type  get()
		{	
		int_type _Meta = 0;
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);

		if (!_Ok)
			_Meta = _Traits::eof();	
		else
			{	
			try {
			_Meta = _Myios::rdbuf()->sgetc();

			if (_Traits::eq_int_type(_Traits::eof(), _Meta))
				_State |= ios_base::eofbit | ios_base::failbit;	
			else
				{	
				_Myios::rdbuf()->sbumpc();
				++_Chcount;
				}
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (_Meta);
		}

	_Myt&  get(_Elem *_Str, streamsize _Count)
		{	
		return (get(_Str, _Count, _Myios::widen('\n')));
		}

	_Myt&  get(_Elem *_Str,
		streamsize _Count, _Elem _Delim)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);

		if (_Ok && 0 < _Count)
			{	
			try {
			int_type _Meta = _Myios::rdbuf()->sgetc();

			for (; 0 < --_Count; _Meta = _Myios::rdbuf()->snextc())
				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else if (_Traits::to_char_type(_Meta) == _Delim)
					break;	
				else
					{	
					;
					*_Str++ = _Traits::to_char_type(_Meta);
					++_Chcount;
					}
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_Chcount == 0
			? _State | ios_base::failbit : _State);
		*_Str = _Elem();	
		return (*this);
		}

	_Myt&  get(_Elem& _Ch)
		{	
		int_type _Meta = get();
		if (!_Traits::eq_int_type(_Traits::eof(), _Meta))
			_Ch = _Traits::to_char_type(_Meta);
		return (*this);
		}

	_Myt&  get(_Mysb& _Strbuf)
		{	
		return (get(_Strbuf, _Myios::widen('\n')));
		}

	_Myt&  get(_Mysb& _Strbuf, _Elem _Delim)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);

		if (_Ok)
			{	
			try {
			int_type _Meta = _Myios::rdbuf()->sgetc();

			for (; ; _Meta = _Myios::rdbuf()->snextc())
				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else
					{	
					try {
						_Elem _Ch = _Traits::to_char_type(_Meta);
						if (_Ch == _Delim
							|| _Traits::eq_int_type(_Traits::eof(),
								_Strbuf.sputc(_Ch)))
							break;
					} catch (...) {
						break;
					}
					++_Chcount;
					}
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		if (_Chcount == 0)
			_State |= ios_base::failbit;
		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  getline(_Elem *_Str, streamsize _Count)
		{	
		return (getline(_Str, _Count, _Myios::widen('\n')));
		}

	_Myt&  getline(_Elem *_Str,
		streamsize _Count, _Elem _Delim)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);

		if (_Ok && 0 < _Count)
			{	
			int_type _Metadelim = _Traits::to_int_type(_Delim);

			try {
			int_type _Meta = _Myios::rdbuf()->sgetc();

			for (; ; _Meta = _Myios::rdbuf()->snextc())
				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else if (_Meta == _Metadelim)
					{	
					++_Chcount;
					_Myios::rdbuf()->sbumpc();
					break;
					}
				else if (--_Count <= 0)
					{	
					_State |= ios_base::failbit;
					break;
					}
				else
					{	
					;
					*_Str++ = _Traits::to_char_type(_Meta);
					++_Chcount;
					}
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		*_Str = _Elem();	
		_Myios::setstate(_Chcount == 0 ? _State | ios_base::failbit : _State);
		return (*this);
		}

	_Myt&  ignore(streamsize _Count = 1,
		int_type _Metadelim = _Traits::eof())
		{	
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);

		if (_Ok && 0 < _Count)
			{	
			try {
			for (; ; )
				{	
				int_type _Meta;
				if (_Count != (numeric_limits<streamsize>::max)()
					&& --_Count < 0)
					break;	
				else if (_Traits::eq_int_type(_Traits::eof(),
					_Meta = _Myios::rdbuf()->sbumpc()))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else
					{	
					++_Chcount;
					if (_Meta == _Metadelim)
						break;	
					}
				}
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  read(_Elem *_Str, streamsize _Count)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);

		if (_Ok && 0 < _Count)
			{	
			try {
			;
			const streamsize _Num = _Myios::rdbuf()->sgetn(_Str, _Count);
			_Chcount += _Num;
			if (_Num != _Count)
				_State |= ios_base::eofbit | ios_base::failbit;	
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	streamsize  readsome(_Elem *_Str,
		streamsize _Count)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);
		streamsize _Num;

		if (!_Ok)
			_State |= ios_base::failbit;	
		else if ((_Num = _Myios::rdbuf()->in_avail()) < 0)
			_State |= ios_base::eofbit;	
		else if (0 < _Count && 0 < _Num)
			{	
			;
			read(_Str, _Num < _Count ? _Num : _Count);	
			}

		_Myios::setstate(_State);
		return (gcount());
		}

	int_type  peek()
		{	
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		int_type _Meta = 0;
		const sentry _Ok(*this, true);

		if (!_Ok)
			_Meta = _Traits::eof();	
		else
			{	
			try {
			if (_Traits::eq_int_type(_Traits::eof(),
				_Meta = _Myios::rdbuf()->sgetc()))
				_State |= ios_base::eofbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (_Meta);
		}

	_Myt&  putback(_Elem _Ch)
		{	
		_Chcount = 0;
		ios_base::iostate _State = ios_base::goodbit;
		ios_base::iostate _Oldstate = _Myios::rdstate();
		_Myios::clear(_Oldstate & ~ios_base::eofbit);
		const sentry _Ok(*this, true);

		if (_Ok)
			{	
			try {
			if (_Traits::eq_int_type(_Traits::eof(),
				_Myios::rdbuf()->sputbackc(_Ch)))
				_State |= ios_base::badbit | _Oldstate;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  unget()
		{	
		_Chcount = 0;
		ios_base::iostate _State = ios_base::goodbit;
		ios_base::iostate _Oldstate = _Myios::rdstate();
		_Myios::clear(_Oldstate & ~ios_base::eofbit);
		const sentry _Ok(*this, true);

		if (_Ok)
			{	
			try {
			if (_Traits::eq_int_type(_Traits::eof(),
				_Myios::rdbuf()->sungetc()))
				_State |= ios_base::badbit | _Oldstate;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	streamsize  gcount() const
		{	
		return (_Chcount);
		}

	int  sync()
		{	
		const sentry _Ok(*this, true);

		if (_Myios::rdbuf() == 0)
			return (-1);
		else if (_Myios::rdbuf()->pubsync() == -1)
			{	
			_Myios::setstate(ios_base::badbit);
			return (-1);
			}
		else
			return (0);
		}

	_Myt&  seekg(pos_type _Pos)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		ios_base::iostate _Oldstate = _Myios::rdstate();
		_Myios::clear(_Oldstate & ~ios_base::eofbit);
		const sentry _Ok(*this, true);

		if (!this->fail()
			&& (off_type)_Myios::rdbuf()->pubseekpos(_Pos,
				ios_base::in) == _BADOFF)
			_Myios::setstate(_State | ios_base::failbit);
		return (*this);
		}

	_Myt&  seekg(off_type _Off, ios_base::seekdir _Way)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		ios_base::iostate _Oldstate = _Myios::rdstate();
		_Myios::clear(_Oldstate & ~ios_base::eofbit);
		const sentry _Ok(*this, true);

		if (!this->fail()
			&& (off_type)_Myios::rdbuf()->pubseekoff(_Off, _Way,
				ios_base::in) == _BADOFF)
			_Myios::setstate(_State | ios_base::failbit);
		return (*this);
		}

	pos_type  tellg()
		{	
		const sentry _Ok(*this, true);

		if (!this->fail())
			return (_Myios::rdbuf()->pubseekoff(0,
				ios_base::cur, ios_base::in));
		else
			return (pos_type(_BADOFF));
		}

private:
	streamsize _Chcount;	
	};

	

 #pragma vtordisp(pop)	

  






















 

  
template class __declspec(dllimport) basic_istream<char, char_traits<char> >;
template class __declspec(dllimport) basic_istream<wchar_t, char_traits<wchar_t> >;
  #line 926 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"

  



 #line 932 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"

		
template<class _Elem,
	class _Traits>
	class basic_iostream
	: public basic_istream<_Elem, _Traits>,
		public basic_ostream<_Elem, _Traits>
	{	
public:
	typedef basic_iostream<_Elem, _Traits> _Myt;
	typedef basic_istream<_Elem, _Traits> _Myis;
	typedef basic_ostream<_Elem, _Traits> _Myos;
	typedef basic_ios<_Elem, _Traits> _Myios;
	typedef _Elem char_type;
	typedef _Traits traits_type;
	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

	explicit  basic_iostream(basic_streambuf<_Elem, _Traits> *_Strbuf)
		: _Myis(_Strbuf, false),
			_Myos(_Noinit, false)
		{	
		}

protected:
	 basic_iostream(_Myt&& _Right)
		: _Myis(_Right.rdbuf(), false),
			_Myos(_Noinit, false)
		{	
		_Myios::init();
		_Myios::move(::std:: forward<_Myt>(_Right));
		}

	_Myt&  operator=(_Myt&& _Right)
		{	
		this->swap(_Right);
		return (*this);
		}

	void  swap(_Myt& _Right)
		{	
		if (this != &_Right)
			_Myios::swap(_Right);
		}

public:
	 basic_iostream(const _Myt&) = delete;
	_Myt&  operator=(const _Myt&) = delete;

	virtual  ~basic_iostream() noexcept
		{	
		}
	};

	

 

  
template class __declspec(dllimport) basic_iostream<char, char_traits<char> >;
template class __declspec(dllimport) basic_iostream<wchar_t, char_traits<wchar_t> >;
  #line 995 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"

  



 #line 1001 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"

		

template<class _Elem,
	class _Traits> inline
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr, _Elem *_Str)
	{	
	;
	typedef basic_istream<_Elem, _Traits> _Myis;
	typedef ctype<_Elem> _Ctype;
	ios_base::iostate _State = ios_base::goodbit;
	_Elem *_Str0 = _Str;
	const typename _Myis::sentry _Ok(_Istr);

	if (_Ok)
		{	
		const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Istr.getloc());

		try {
		streamsize _Count = 0 < _Istr.width() ? _Istr.width()
			: (numeric_limits<streamsize>::max)();
		typename _Myis::int_type _Meta = _Istr.rdbuf()->sgetc();
		_Elem _Ch;
		for (; 0 < --_Count; _Meta = _Istr.rdbuf()->snextc())
			if (_Traits::eq_int_type(_Traits::eof(), _Meta))
				{	
				_State |= ios_base::eofbit;
				break;
				}
			else if (_Ctype_fac.is(_Ctype::space,
				_Ch = _Traits::to_char_type(_Meta))
					|| _Ch == _Elem())
				break;	
			else
				*_Str++ = _Traits::to_char_type(_Meta);	
		} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
		}

	*_Str = _Elem();	
	_Istr.width(0);
	_Istr.setstate(_Str == _Str0 ? _State | ios_base::failbit : _State);
	return (_Istr);
	}

template<class _Elem,
	class _Traits> inline
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr, _Elem& _Ch)
	{	
	typedef basic_istream<_Elem, _Traits> _Myis;

	typename _Myis::int_type _Meta;
	ios_base::iostate _State = ios_base::goodbit;
	const typename _Myis::sentry _Ok(_Istr);

	if (_Ok)
		{	
		try {
		_Meta = _Istr.rdbuf()->sbumpc();
		if (_Traits::eq_int_type(_Traits::eof(), _Meta))
			_State |= ios_base::eofbit | ios_base::failbit;	
		else
			_Ch = _Traits::to_char_type(_Meta);	
		} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
		}

	_Istr.setstate(_State);
	return (_Istr);
	}

template<class _Traits> inline
	basic_istream<char, _Traits>& operator>>(
		basic_istream<char, _Traits>& _Istr, signed char *_Str)
	{	
	return (_Istr >> (char *)_Str);
	}

template<class _Traits> inline
	basic_istream<char, _Traits>& operator>>(
		basic_istream<char, _Traits>& _Istr, signed char& _Ch)
	{	
	return (_Istr >> (char&)_Ch);
	}

template<class _Traits> inline
	basic_istream<char, _Traits>& operator>>(
		basic_istream<char, _Traits>& _Istr, unsigned char *_Str)
	{	
	return (_Istr >> (char *)_Str);
	}

template<class _Traits> inline
	basic_istream<char, _Traits>& operator>>(
		basic_istream<char, _Traits>& _Istr, unsigned char& _Ch)
	{	
	return (_Istr >> (char&)_Ch);
	}

template<class _Elem,
	class _Traits,
	class _Ty> inline
	basic_istream<_Elem, _Traits>&
		operator>>(basic_istream<_Elem, _Traits>&& _Istr, _Ty& _Val)
	{	
	return (_Istr >> _Val);
	}

		
template<class _Elem,
	class _Traits> inline
	basic_istream<_Elem, _Traits>&
		__cdecl ws(basic_istream<_Elem, _Traits>& _Istr)
	{	
	typedef basic_istream<_Elem, _Traits> _Myis;
	typedef ctype<_Elem> _Ctype;

	if (!_Istr.eof())
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const typename _Myis::sentry _Ok(_Istr, true);

		if (_Ok)
			{	
			const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Istr.getloc());

			try {
			for (typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc(); ;
				_Meta = _Istr.rdbuf()->snextc())
				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else if (!_Ctype_fac.is(_Ctype::space,
					_Traits::to_char_type(_Meta)))
					break;	
			} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
			}

		_Istr.setstate(_State);
		}
	return (_Istr);
	}
}

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 1151 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
#line 1152 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"






#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4189)
 #pragma warning(disable: 4172)
 #pragma warning(disable: 4455)

namespace std {
		
template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>&& _Istr,
		basic_string<_Elem, _Traits, _Alloc>& _Str)
	{	
	typedef ctype<_Elem> _Ctype;
	typedef basic_istream<_Elem, _Traits> _Myis;
	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
	typedef typename _Mystr::size_type _Mysizt;

	ios_base::iostate _State = ios_base::goodbit;
	bool _Changed = false;
	const typename _Myis::sentry _Ok(_Istr);

	if (_Ok)
		{	
		const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Istr.getloc());
		_Str.erase();

		try {
		_Mysizt _Size = 0 < _Istr.width()
			&& (_Mysizt)_Istr.width() < _Str.max_size()
				? (_Mysizt)_Istr.width() : _Str.max_size();
		typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

		for (; 0 < _Size; --_Size, _Meta = _Istr.rdbuf()->snextc())
			if (_Traits::eq_int_type(_Traits::eof(), _Meta))
				{	
				_State |= ios_base::eofbit;
				break;
				}
			else if (_Ctype_fac.is(_Ctype::space,
				_Traits::to_char_type(_Meta)))
				break;	
			else
				{	
				_Str.append(1, _Traits::to_char_type(_Meta));
				_Changed = true;
				}
		} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
		}

	_Istr.width(0);
	if (!_Changed)
		_State |= ios_base::failbit;
	_Istr.setstate(_State);
	return (_Istr);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_istream<_Elem, _Traits>& getline(
		basic_istream<_Elem, _Traits>&& _Istr,
		basic_string<_Elem, _Traits, _Alloc>& _Str,
		const _Elem _Delim)
	{	
	typedef basic_istream<_Elem, _Traits> _Myis;

	ios_base::iostate _State = ios_base::goodbit;
	bool _Changed = false;
	const typename _Myis::sentry _Ok(_Istr, true);

	if (_Ok)
		{	
		try {
		_Str.erase();
		const typename _Traits::int_type _Metadelim =
			_Traits::to_int_type(_Delim);
		typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

		for (; ; _Meta = _Istr.rdbuf()->snextc())
			if (_Traits::eq_int_type(_Traits::eof(), _Meta))
				{	
				_State |= ios_base::eofbit;
				break;
				}
			else if (_Traits::eq_int_type(_Meta, _Metadelim))
				{	
				_Changed = true;
				_Istr.rdbuf()->sbumpc();
				break;
				}
			else if (_Str.max_size() <= _Str.size())
				{	
				_State |= ios_base::failbit;
				break;
				}
			else
				{	
				_Str += _Traits::to_char_type(_Meta);
				_Changed = true;
				}
		} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
		}

	if (!_Changed)
		_State |= ios_base::failbit;
	_Istr.setstate(_State);
	return (_Istr);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_istream<_Elem, _Traits>& getline(
		basic_istream<_Elem, _Traits>&& _Istr,
		basic_string<_Elem, _Traits, _Alloc>& _Str)
	{	
	return (getline(_Istr, _Str, _Istr.widen('\n')));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr,
		basic_string<_Elem, _Traits, _Alloc>& _Str)
	{	
	return (::std:: move(_Istr) >> _Str);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_istream<_Elem, _Traits>& getline(
		basic_istream<_Elem, _Traits>& _Istr,
		basic_string<_Elem, _Traits, _Alloc>& _Str,
		const _Elem _Delim)
	{	
	return (getline(::std:: move(_Istr), _Str, _Delim));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_istream<_Elem, _Traits>& getline(
		basic_istream<_Elem, _Traits>& _Istr,
		basic_string<_Elem, _Traits, _Alloc>& _Str)
	{	
	return (getline(::std:: move(_Istr), _Str, _Istr.widen('\n')));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr,
		const basic_string<_Elem, _Traits, _Alloc>& _Str)
	{	
	typedef basic_ostream<_Elem, _Traits> _Myos;
	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
	typedef typename _Mystr::size_type _Mysizt;

	ios_base::iostate _State = ios_base::goodbit;
	_Mysizt _Size = _Str.size();
	_Mysizt _Pad = _Ostr.width() <= 0 || (_Mysizt)_Ostr.width() <= _Size
		? 0 : (_Mysizt)_Ostr.width() - _Size;
	const typename _Myos::sentry _Ok(_Ostr);

	if (!_Ok)
		_State |= ios_base::badbit;
	else
		{	
	try {
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}

		if (_State == ios_base::goodbit
			&& _Ostr.rdbuf()->sputn(_Str.c_str(), (streamsize)_Size)
				!= (streamsize)_Size)
				_State |= ios_base::badbit;
		else
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}
		_Ostr.width(0);
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.setstate(_State);
	return (_Ostr);
	}

		

inline int stoi(const string& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	const char *_Ptr = _Str.c_str();
	char *_Eptr;
	(*_errno()) = 0;
	long _Ans = :: strtol(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoi argument");
	if ((*_errno()) == 34 || _Ans < (-2147483647 - 1) || 2147483647 < _Ans)
		_Xout_of_range("stoi argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return ((int)_Ans);
	}

inline long stol(const string& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	const char *_Ptr = _Str.c_str();
	char *_Eptr;
	(*_errno()) = 0;
	long _Ans = :: strtol(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stol argument");
	if ((*_errno()) == 34)
		_Xout_of_range("stol argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline unsigned long stoul(const string& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	const char *_Ptr = _Str.c_str();
	char *_Eptr;
	(*_errno()) = 0;
	unsigned long _Ans = :: strtoul(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoul argument");
	if ((*_errno()) == 34)
		_Xout_of_range("stoul argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline long long stoll(const string& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	const char *_Ptr = _Str.c_str();
	char *_Eptr;
	(*_errno()) = 0;
	long long _Ans = :: strtoll(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoll argument");
	if ((*_errno()) == 34)
		_Xout_of_range("stoll argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline unsigned long long stoull(const string& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	const char *_Ptr = _Str.c_str();
	char *_Eptr;
	(*_errno()) = 0;
	unsigned long long _Ans = :: strtoull(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoull argument");
	if ((*_errno()) == 34)
		_Xout_of_range("stoull argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline float stof(const string& _Str, size_t *_Idx = 0)
	{	
	const char *_Ptr = _Str.c_str();
	char *_Eptr;
	(*_errno()) = 0;
	float _Ans = :: strtof(_Ptr, &_Eptr);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stof argument");
	if ((*_errno()) == 34)
		_Xout_of_range("stof argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline double stod(const string& _Str, size_t *_Idx = 0)
	{	
	const char *_Ptr = _Str.c_str();
	char *_Eptr;
	(*_errno()) = 0;
	double _Ans = :: strtod(_Ptr, &_Eptr);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stod argument");
	if ((*_errno()) == 34)
		_Xout_of_range("stod argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline long double stold(const string& _Str, size_t *_Idx = 0)
	{	
	const char *_Ptr = _Str.c_str();
	char *_Eptr;
	(*_errno()) = 0;
	long double _Ans = :: strtold(_Ptr, &_Eptr);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stold argument");
	if ((*_errno()) == 34)
		_Xout_of_range("stold argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

		
inline int stoi(const wstring& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	const wchar_t *_Ptr = _Str.c_str();
	wchar_t *_Eptr;
	(*_errno()) = 0;
	long _Ans = :: wcstol(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoi argument");
	if ((*_errno()) == 34 || _Ans < (-2147483647 - 1) || 2147483647 < _Ans)
		_Xout_of_range("stoi argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return ((int)_Ans);
	}

inline long stol(const wstring& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	const wchar_t *_Ptr = _Str.c_str();
	wchar_t *_Eptr;
	(*_errno()) = 0;
	long _Ans = :: wcstol(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stol argument");
	if ((*_errno()) == 34)
		_Xout_of_range("stol argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline unsigned long stoul(const wstring& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	const wchar_t *_Ptr = _Str.c_str();
	wchar_t *_Eptr;
	(*_errno()) = 0;
	unsigned long _Ans = :: wcstoul(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoul argument");
	if ((*_errno()) == 34)
		_Xout_of_range("stoul argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline long long stoll(const wstring& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	const wchar_t *_Ptr = _Str.c_str();
	wchar_t *_Eptr;
	(*_errno()) = 0;
	long long _Ans = :: wcstoll(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoll argument");
	if ((*_errno()) == 34)
		_Xout_of_range("stoll argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline unsigned long long stoull(const wstring& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	const wchar_t *_Ptr = _Str.c_str();
	wchar_t *_Eptr;
	(*_errno()) = 0;
	unsigned long long _Ans = :: wcstoull(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoull argument");
	if ((*_errno()) == 34)
		_Xout_of_range("stoull argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline float stof(const wstring& _Str, size_t *_Idx = 0)
	{	
	const wchar_t *_Ptr = _Str.c_str();
	wchar_t *_Eptr;
	(*_errno()) = 0;
	float _Ans = :: wcstof(_Ptr, &_Eptr);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stof argument");
	if ((*_errno()) == 34)
		_Xout_of_range("stof argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline double stod(const wstring& _Str, size_t *_Idx = 0)
	{	
	const wchar_t *_Ptr = _Str.c_str();
	wchar_t *_Eptr;
	(*_errno()) = 0;
	double _Ans = :: wcstod(_Ptr, &_Eptr);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stod argument");
	if ((*_errno()) == 34)
		_Xout_of_range("stod argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline long double stold(const wstring& _Str, size_t *_Idx = 0)
	{	
	const wchar_t *_Ptr = _Str.c_str();
	wchar_t *_Eptr;
	(*_errno()) = 0;
	long double _Ans = :: wcstold(_Ptr, &_Eptr);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stold argument");
	if ((*_errno()) == 34)
		_Xout_of_range("stold argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

		
 #pragma warning(push)
 #pragma warning(disable: 4127) 
template<class _Elem,
	class _UTy> inline
	_Elem* _UIntegral_to_buff(_Elem* _RNext, _UTy _UVal)
	{	
	static_assert(is_unsigned<_UTy>::value, "_UTy must be unsigned");


	auto _UVal_trunc = _UVal;

















#line 513 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"

	do
		{
		*--_RNext = '0' + _UVal_trunc % 10;
		_UVal_trunc /= 10;
		}
	while (_UVal_trunc != 0);
	return (_RNext);
	}
 #pragma warning(pop)

template<class _Elem,
	class _Ty> inline
	basic_string<_Elem> _Integral_to_string(const _Ty _Val)
	{	
	static_assert(is_integral<_Ty>::value, "_Ty must be integral");
	using _UTy = make_unsigned_t<_Ty>;
	_Elem _Buff[21]; 
	_Elem* const _Buff_end = ::std:: end(_Buff);
	_Elem* _RNext = _Buff_end;
	auto _UVal = static_cast<_UTy>(_Val);
	if (_Val < 0)
		{
		_RNext = _UIntegral_to_buff(_RNext, 0 - _UVal);
		*--_RNext = '-';
		}
	else
		_RNext = _UIntegral_to_buff(_RNext, _UVal);

	return (basic_string<_Elem>(_RNext, _Buff_end));
	}

template<class _Ty> inline
	string _Floating_to_string(const char *_Fmt, _Ty _Val)
	{	
	static_assert(is_floating_point<_Ty>::value,
		"_Ty must be floating point");

	int _Len = :: _scprintf(_Fmt, _Val);
	string _Str(_Len + 1, '\0');
	:: sprintf_s(&_Str[0], _Len + 1, _Fmt, _Val);
	_Str.resize(_Len);
	return (_Str);
	}

template<class _Ty> inline
	wstring _Floating_to_wstring(const wchar_t *_Fmt, _Ty _Val)
	{	
	static_assert(is_floating_point<_Ty>::value,
		"_Ty must be floating point");

	int _Len = :: _scwprintf(_Fmt, _Val);
	wstring _Str(_Len + 1, L'\0');
	:: swprintf_s(&_Str[0], _Len + 1, _Fmt, _Val);
	_Str.resize(_Len);
	return (_Str);
	}



		
inline string to_string(int _Val)
	{	
	return (_Integral_to_string<char>(_Val));
	}

inline string to_string(unsigned int _Val)
	{	
	return (_Integral_to_string<char>(_Val));
	}

inline string to_string(long _Val)
	{	
	return (_Integral_to_string<char>(_Val));
	}

inline string to_string(unsigned long _Val)
	{	
	return (_Integral_to_string<char>(_Val));
	}

inline string to_string(long long _Val)
	{	
	return (_Integral_to_string<char>(_Val));
	}

inline string to_string(unsigned long long _Val)
	{	
	return (_Integral_to_string<char>(_Val));
	}

inline string to_string(float _Val)
	{	
	return (_Floating_to_string("%f", _Val));
	}

inline string to_string(double _Val)
	{	
	return (_Floating_to_string("%f", _Val));
	}

inline string to_string(long double _Val)
	{	
	return (_Floating_to_string("%Lf", _Val));
	}

		
inline wstring to_wstring(int _Val)
	{	
	return (_Integral_to_string<wchar_t>(_Val));
	}

inline wstring to_wstring(unsigned int _Val)
	{	
	return (_Integral_to_string<wchar_t>(_Val));
	}

inline wstring to_wstring(long _Val)
	{	
	return (_Integral_to_string<wchar_t>(_Val));
	}

inline wstring to_wstring(unsigned long _Val)
	{	
	return (_Integral_to_string<wchar_t>(_Val));
	}

inline wstring to_wstring(long long _Val)
	{	
	return (_Integral_to_string<wchar_t>(_Val));
	}

inline wstring to_wstring(unsigned long long _Val)
	{	
	return (_Integral_to_string<wchar_t>(_Val));
	}

inline wstring to_wstring(float _Val)
	{	
	return (_Floating_to_wstring(L"%f", _Val));
	}

inline wstring to_wstring(double _Val)
	{	
	return (_Floating_to_wstring(L"%f", _Val));
	}

inline wstring to_wstring(long double _Val)
	{	
	return (_Floating_to_wstring(L"%Lf", _Val));
	}

	





inline namespace literals {
inline namespace string_literals {
inline string operator "" s(const char *_Str, size_t _Len)
	{	
	return (string(_Str, _Len));
	}

inline wstring operator "" s(const wchar_t *_Str, size_t _Len)
	{	
	return (wstring(_Str, _Len));
	}

inline u16string operator "" s(const char16_t *_Str, size_t _Len)
	{	
	return (u16string(_Str, _Len));
	}

inline u32string operator "" s(const char32_t *_Str, size_t _Len)
	{	
	return (u32string(_Str, _Len));
	}
}	
}	





}

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 705 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
#line 706 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sstream"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 
namespace std {
 #pragma warning(disable: 4251)

		
template<class _Elem,
	class _Traits,
	class _Alloc>
	class basic_stringbuf
		: public basic_streambuf<_Elem, _Traits>
	{	
public:
	typedef basic_stringbuf<_Elem, _Traits, _Alloc> _Myt;
	typedef _Alloc allocator_type;
	typedef basic_streambuf<_Elem, _Traits> _Mysb;
	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;

	explicit basic_stringbuf(ios_base::openmode _Mode =
		ios_base::in | ios_base::out)
		{	
		_Init(0, 0, _Getstate(_Mode));
		}

	explicit basic_stringbuf(const _Mystr& _Str,
		ios_base::openmode _Mode = ios_base::in | ios_base::out)
		{	
		_Init(_Str.c_str(), _Str.size(), _Getstate(_Mode));
		}

	basic_stringbuf(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	_Myt& operator=(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		return (*this);
		}

	void _Assign_rv(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			_Tidy();
			this->swap(_Right);
			}
		}

	void swap(_Myt& _Right)
		{	
		if (this != &_Right)
			{	
			_Mysb::swap(_Right);
			::std:: swap(_Seekhigh, _Right._Seekhigh);
			::std:: swap(_Mystate, _Right._Mystate);
			_Swap_adl(_Al, _Right._Al);
			}
		}

	basic_stringbuf(const _Myt&) = delete;
	_Myt& operator=(const _Myt&) = delete;

	virtual ~basic_stringbuf() noexcept
		{	
		_Tidy();
		}

	enum
		{	
		_Allocated = 1,	
		_Constant = 2,	
		_Noread = 4,	
		_Append = 8,	
		_Atend = 16};	
	typedef int _Strstate;

	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

	_Mystr str() const
		{	
		if (!(_Mystate & _Constant) && _Mysb::pptr() != 0)
			{	
			_Mystr _Str(_Mysb::pbase(), (_Seekhigh < _Mysb::pptr()
				? _Mysb::pptr() : _Seekhigh) - _Mysb::pbase());
			return (_Str);
			}
		else if (!(_Mystate & _Noread) && _Mysb::gptr() != 0)
			{	
			_Mystr _Str(_Mysb::eback(), _Mysb::egptr() - _Mysb::eback());
			return (_Str);
			}
		else
			{	
			_Mystr _Nul;
			return (_Nul);
			}
		}

	void str(const _Mystr& _Newstr)
		{	
		_Tidy();
		_Init(_Newstr.c_str(), _Newstr.size(), _Mystate);
		}

protected:
	virtual int_type overflow(int_type _Meta = _Traits::eof())
		{	
		if (_Mystate & _Constant)
			return (_Traits::eof());	
		else if (_Traits::eq_int_type(_Traits::eof(), _Meta))
			return (_Traits::not_eof(_Meta));	

		if (_Mystate & _Append
			&& _Mysb::pptr() != 0 && _Mysb::pptr() < _Seekhigh)
			_Mysb::setp(_Mysb::pbase(), _Seekhigh, _Mysb::epptr());

		if (_Mysb::pptr() != 0
			&& _Mysb::pptr() < _Mysb::epptr())
			{	
			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);
			return (_Meta);
			}
		else
			{	
			size_t _Oldsize = _Mysb::pptr() == 0
				? 0 : _Mysb::epptr() - _Mysb::eback();
			size_t _Newsize = _Oldsize;
			size_t _Inc = _Newsize / 2 < _MINSIZE
				? _MINSIZE : _Newsize / 2;	

			while (0 < _Inc && 2147483647 - _Inc < _Newsize)
				_Inc /= 2;	
			if (_Inc == 0)
				return (_Traits::eof());	

			_Newsize += _Inc;

			_Elem *_Newptr = _Al.allocate(_Newsize);
			_Elem *_Oldptr = _Mysb::eback();

			if (0 < _Oldsize)
				_Traits::copy(_Newptr, _Oldptr, _Oldsize);

			if (_Oldsize == 0)
				{	
				_Seekhigh = _Newptr;
				_Mysb::setp(_Newptr, _Newptr + _Newsize);
				if (_Mystate & _Noread)
					_Mysb::setg(_Newptr, 0, _Newptr);
				else
					_Mysb::setg(_Newptr, _Newptr, _Newptr + 1);
				}
			else
				{	
				_Seekhigh = _Newptr + (_Seekhigh - _Oldptr);
				_Mysb::setp(_Newptr + (_Mysb::pbase() - _Oldptr),
					_Newptr + (_Mysb::pptr() - _Oldptr),
					_Newptr + _Newsize);
				if (_Mystate & _Noread)
					_Mysb::setg(_Newptr, 0, _Newptr);
				else
					_Mysb::setg(_Newptr,
						_Newptr + (_Mysb::gptr() - _Oldptr),
						_Mysb::pptr() + 1);
				}

			if (_Mystate & _Allocated)
				_Al.deallocate(_Oldptr, _Oldsize);
			_Mystate |= _Allocated;

			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);
			return (_Meta);
			}
		}

	virtual int_type pbackfail(int_type _Meta = _Traits::eof())
		{	
		if (_Mysb::gptr() == 0
			|| _Mysb::gptr() <= _Mysb::eback()
			|| (!_Traits::eq_int_type(_Traits::eof(), _Meta)
			&& !_Traits::eq(_Traits::to_char_type(_Meta), _Mysb::gptr()[-1])
			&& _Mystate & _Constant))
			return (_Traits::eof());	
		else
			{	
			_Mysb::gbump(-1);
			if (!_Traits::eq_int_type(_Traits::eof(), _Meta))
				*_Mysb::gptr() = _Traits::to_char_type(_Meta);
			return (_Traits::not_eof(_Meta));
			}
		}

	virtual int_type underflow()
		{	
		if (_Mysb::gptr() == 0)
			return (_Traits::eof());	
		else if (_Mysb::gptr() < _Mysb::egptr())
			return (_Traits::to_int_type(*_Mysb::gptr()));	
		else if (_Mystate & _Noread || _Mysb::pptr() == 0
			|| (_Mysb::pptr() <= _Mysb::gptr() && _Seekhigh <= _Mysb::gptr()))
			return (_Traits::eof());	
		else
			{	
			if (_Seekhigh < _Mysb::pptr())
				_Seekhigh = _Mysb::pptr();
			_Mysb::setg(_Mysb::eback(), _Mysb::gptr(), _Seekhigh);
			return (_Traits::to_int_type(*_Mysb::gptr()));
			}
		}

	virtual pos_type seekoff(off_type _Off,
		ios_base::seekdir _Way,
		ios_base::openmode _Which = ios_base::in | ios_base::out)
		{	
		if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())
			_Seekhigh = _Mysb::pptr();	

		if (_Which & ios_base::in && _Mysb::gptr() != 0)
			{	
			if (_Way == ios_base::end)
				_Off += (off_type)(_Seekhigh - _Mysb::eback());
			else if (_Way == ios_base::cur
				&& (_Which & ios_base::out) == 0)
				_Off += (off_type)(_Mysb::gptr() - _Mysb::eback());
			else if (_Way != ios_base::beg)
				_Off = _BADOFF;

			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())
				{	
				_Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));
				if (_Which & ios_base::out && _Mysb::pptr() != 0)
					_Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),
						_Mysb::epptr());	
				}
			else
				_Off = _BADOFF;
			}
		else if (_Which & ios_base::out && _Mysb::pptr() != 0)
			{	
			if (_Way == ios_base::end)
				_Off += (off_type)(_Seekhigh - _Mysb::eback());
			else if (_Way == ios_base::cur)
				_Off += (off_type)(_Mysb::pptr() - _Mysb::eback());
			else if (_Way != ios_base::beg)
				_Off = _BADOFF;

			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())
				_Mysb::pbump((int)(_Mysb::eback()
					- _Mysb::pptr() + _Off));	
			else
				_Off = _BADOFF;
			}

		else if (_Off != 0)


			_Off = _BADOFF;	
		return (pos_type(_Off));
		}

	virtual pos_type seekpos(pos_type _Ptr,
		ios_base::openmode _Mode = ios_base::in | ios_base::out)
		{	
		streamoff _Off = (streamoff)_Ptr;
		if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())
			_Seekhigh = _Mysb::pptr();	

		if (_Off == _BADOFF)
			;
		else if (_Mode & ios_base::in && _Mysb::gptr() != 0)
			{	
			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())
				{	
				_Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));
				if (_Mode & ios_base::out && _Mysb::pptr() != 0)
					_Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),
						_Mysb::epptr());	
				}
			else
				_Off = _BADOFF;
			}
		else if (_Mode & ios_base::out && _Mysb::pptr() != 0)
			{	
			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())
				_Mysb::pbump((int)(_Mysb::eback()
					- _Mysb::pptr() + _Off));	
			else
				_Off = _BADOFF;
			}
		else
			_Off = _BADOFF;	
		return (streampos(_Off));
		}

	void _Init(const _Elem *_Ptr,
		size_t _Count, _Strstate _State)
		{	
		_Seekhigh = 0;
		_Mystate = _State;

		if (_Count != 0
			&& (_Mystate & (_Noread | _Constant)) != (_Noread | _Constant))
			{	
			_Elem *_Pnew = _Al.allocate(_Count);
			_Traits::copy(_Pnew, _Ptr, _Count);
			_Seekhigh = _Pnew + _Count;

			if (!(_Mystate & _Noread))
				_Mysb::setg(_Pnew, _Pnew,
					_Pnew + _Count);	
			if (!(_Mystate & _Constant))
				{	
				_Mysb::setp(_Pnew,
					(_Mystate & (_Atend | _Append)) ? _Pnew + _Count : _Pnew,
					_Pnew + _Count);
				if (_Mysb::gptr() == 0)
					_Mysb::setg(_Pnew, 0, _Pnew);
				}
			_Mystate |= _Allocated;
			}
		}

	void _Tidy()
		{	
		if (_Mystate & _Allocated)
			_Al.deallocate(_Mysb::eback(),
				(_Mysb::pptr() != 0 ? _Mysb::epptr()
					: _Mysb::egptr()) - _Mysb::eback());
		_Mysb::setg(0, 0, 0);
		_Mysb::setp(0, 0);
		_Seekhigh = 0;
		_Mystate &= ~_Allocated;
		}

private:
	enum
		{	
		_MINSIZE = 32};

	_Strstate _Getstate(ios_base::openmode _Mode)
		{	
		_Strstate _State = (_Strstate)0;
		if (!(_Mode & ios_base::in))
			_State |= _Noread;
		if (!(_Mode & ios_base::out))
			_State |= _Constant;
		if (_Mode & ios_base::app)
			_State |= _Append;
		if (_Mode & ios_base::ate)
			_State |= _Atend;
		return (_State);
		}

	_Elem *_Seekhigh;	
	_Strstate _Mystate;	
	allocator_type _Al;	
	};

	
template<class _Elem,
	class _Traits,
	class _Alloc> inline
	void swap(basic_stringbuf<_Elem, _Traits, _Alloc>& _Left,
		basic_stringbuf<_Elem, _Traits, _Alloc>& _Right)
	{	
	_Left.swap(_Right);
	}

		
template<class _Elem,
	class _Traits,
	class _Alloc>
	class basic_istringstream
		: public basic_istream<_Elem, _Traits>
	{	
public:
	typedef basic_istringstream<_Elem, _Traits, _Alloc> _Myt;
	typedef basic_istream<_Elem, _Traits> _Mybase;
	typedef _Alloc allocator_type;
	typedef basic_stringbuf<_Elem, _Traits, _Alloc> _Mysb;
	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;

	explicit basic_istringstream(ios_base::openmode _Mode = ios_base::in)
		: _Mybase(&_Stringbuffer),
			_Stringbuffer(_Mode | ios_base::in)
		{	
		}

	explicit basic_istringstream(const _Mystr& _Str,
		ios_base::openmode _Mode = ios_base::in)
		: _Mybase(&_Stringbuffer),
			_Stringbuffer(_Str, _Mode | ios_base::in)
		{	
		}

	basic_istringstream(_Myt&& _Right)
		: _Mybase(&_Stringbuffer)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	_Myt& operator=(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		return (*this);
		}

	void _Assign_rv(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			_Stringbuffer.str(_Mystr());
			this->swap(_Right);
			}
		}

	void swap(_Myt& _Right)
		{	
		if (this != &_Right)
			{	
			_Mybase::swap(_Right);
			_Stringbuffer.swap(_Right._Stringbuffer);
			}
		}

	basic_istringstream(const _Myt&) = delete;
	_Myt& operator=(const _Myt&) = delete;

	virtual ~basic_istringstream() noexcept
		{	
		}

	_Mysb *rdbuf() const
		{	
		return ((_Mysb *)&_Stringbuffer);
		}

	_Mystr str() const
		{	
		return (_Stringbuffer.str());
		}

	void str(const _Mystr& _Newstr)
		{	
		_Stringbuffer.str(_Newstr);
		}

private:
	_Mysb _Stringbuffer;	
	};

	
template<class _Elem,
	class _Traits,
	class _Alloc> inline
	void swap(basic_istringstream<_Elem, _Traits, _Alloc>& _Left,
		basic_istringstream<_Elem, _Traits, _Alloc>& _Right)
	{	
	_Left.swap(_Right);
	}

		
template<class _Elem,
	class _Traits,
	class _Alloc>
	class basic_ostringstream
		: public basic_ostream<_Elem, _Traits>
	{	
public:
	typedef basic_ostringstream<_Elem, _Traits, _Alloc> _Myt;
	typedef basic_ostream<_Elem, _Traits> _Mybase;
	typedef _Alloc allocator_type;
	typedef basic_stringbuf<_Elem, _Traits, _Alloc> _Mysb;
	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;

	explicit basic_ostringstream(ios_base::openmode _Mode = ios_base::out)
		: _Mybase(&_Stringbuffer),
			_Stringbuffer(_Mode | ios_base::out)
		{	
		}

	explicit basic_ostringstream(const _Mystr& _Str,
		ios_base::openmode _Mode = ios_base::out)
		: _Mybase(&_Stringbuffer),
			_Stringbuffer(_Str, _Mode | ios_base::out)
		{	
		}

	basic_ostringstream(_Myt&& _Right)
		: _Mybase(&_Stringbuffer)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	_Myt& operator=(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		return (*this);
		}

	void _Assign_rv(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			_Stringbuffer.str(_Mystr());
			this->swap(_Right);
			}
		}

	void swap(_Myt& _Right)
		{	
		if (this != &_Right)
			{	
			_Mybase::swap(_Right);
			_Stringbuffer.swap(_Right._Stringbuffer);
			}
		}

	basic_ostringstream(const _Myt&) = delete;
	_Myt& operator=(const _Myt&) = delete;

	virtual ~basic_ostringstream() noexcept
		{	
		}

	_Mysb *rdbuf() const
		{	
		return ((_Mysb *)&_Stringbuffer);
		}

	_Mystr str() const
		{	
		return (_Stringbuffer.str());
		}

	void str(const _Mystr& _Newstr)
		{	
		_Stringbuffer.str(_Newstr);
		}

private:
	_Mysb _Stringbuffer;	
	};

	
template<class _Elem,
	class _Traits,
	class _Alloc> inline
	void swap(basic_ostringstream<_Elem, _Traits, _Alloc>& _Left,
		basic_ostringstream<_Elem, _Traits, _Alloc>& _Right)
	{	
	_Left.swap(_Right);
	}

		
template<class _Elem,
	class _Traits,
	class _Alloc>
	class basic_stringstream
		: public basic_iostream<_Elem, _Traits>
	{	
public:
	typedef basic_stringstream<_Elem, _Traits, _Alloc> _Myt;
	typedef basic_iostream<_Elem, _Traits> _Mybase;
	typedef _Elem char_type;
	typedef _Traits traits_type;
	typedef _Alloc allocator_type;
	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;
	typedef basic_stringbuf<_Elem, _Traits, _Alloc> _Mysb;
	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;

	explicit basic_stringstream(ios_base::openmode _Mode =
		ios_base::in | ios_base::out)
		: _Mybase(&_Stringbuffer),
			_Stringbuffer(_Mode)
		{	
		}

	explicit basic_stringstream(const _Mystr& _Str,
		ios_base::openmode _Mode = ios_base::in | ios_base::out)
		: _Mybase(&_Stringbuffer),
			_Stringbuffer(_Str, _Mode)
		{	
		}

	basic_stringstream(_Myt&& _Right)
		: _Mybase(&_Stringbuffer)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	_Myt& operator=(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		return (*this);
		}

	void _Assign_rv(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			_Stringbuffer.str(_Mystr());
			this->swap(_Right);
			}
		}

	void swap(_Myt& _Right)
		{	
		if (this != &_Right)
			{	
			_Mybase::swap(_Right);
			_Stringbuffer.swap(_Right._Stringbuffer);
			}
		}

	basic_stringstream(const _Myt&) = delete;
	_Myt& operator=(const _Myt&) = delete;

	virtual ~basic_stringstream() noexcept
		{	
		}

	_Mysb *rdbuf() const
		{	
		return ((_Mysb *)&_Stringbuffer);
		}

	_Mystr str() const
		{	
		return (_Stringbuffer.str());
		}

	void str(const _Mystr& _Newstr)
		{	
		_Stringbuffer.str(_Newstr);
		}

private:
	_Mysb _Stringbuffer;	
	};

	
template<class _Elem,
	class _Traits,
	class _Alloc> inline
	void swap(basic_stringstream<_Elem, _Traits, _Alloc>& _Left,
		basic_stringstream<_Elem, _Traits, _Alloc>& _Right)
	{	
	_Left.swap(_Right);
	}
}
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 671 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sstream"
#line 672 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sstream"





#line 4 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {
 #pragma warning(disable: 4127)

extern __declspec(dllimport) FILE *__cdecl _Fiopen(
	const char *,
	ios_base::openmode, int);
extern __declspec(dllimport) FILE *__cdecl _Fiopen(
	const wchar_t *,
	ios_base::openmode, int);

 
extern __declspec(dllimport) FILE *__cdecl _Fiopen(
	const unsigned short *,
	ios_base::openmode, int);
 #line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"

		
template<class _Elem> inline
	bool _Fgetc(_Elem& _Ch, FILE *_File)
	{	
	return (fread(&_Ch, sizeof (_Elem), 1, _File) == 1);
	}

template<> inline bool _Fgetc(char& _Byte, FILE *_File)
	{	
	int _Meta;
	if ((_Meta = fgetc(_File)) == (-1))
		return (false);
	else
		{	
		_Byte = (char)_Meta;
		return (true);
		}
	}

template<> inline bool _Fgetc(wchar_t& _Wchar, FILE *_File)
	{	
	wint_t _Meta;
	if ((_Meta = :: fgetwc(_File)) == ((wint_t)(0xFFFF)))
		return (false);
	else
		{	
		_Wchar = (wchar_t)_Meta;
		return (true);
		}
	}

 
template<> inline bool _Fgetc(unsigned short& _Wchar, FILE *_File)
	{	
	wint_t _Meta;
	if ((_Meta = :: fgetwc(_File)) == ((wint_t)(0xFFFF)))
		return (false);
	else
		{	
		_Wchar = (unsigned short)_Meta;
		return (true);
		}
	}
 #line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"

		
template<class _Elem> inline
	bool _Fputc(_Elem _Ch, FILE *_File)
	{	
	return (fwrite(&_Ch, 1, sizeof (_Elem), _File) == sizeof (_Elem));
	}

template<> inline bool _Fputc(char _Byte, FILE *_File)
	{	
	return (fputc(_Byte, _File) != (-1));
	}

template<> inline bool _Fputc(wchar_t _Wchar, FILE *_File)
	{	
	return (:: fputwc(_Wchar, _File) != ((wint_t)(0xFFFF)));
	}

 
template<> inline bool _Fputc(unsigned short _Wchar, FILE *_File)
	{	
	return (:: fputwc(_Wchar, _File) != ((wint_t)(0xFFFF)));
	}
 #line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"

		
template<class _Elem> inline
	bool _Ungetc(const _Elem& _Ch, FILE *_File)
	{	
	return (false);
	}

template<> inline bool _Ungetc(const char& _Byte, FILE *_File)
	{	
	return (ungetc((unsigned char)_Byte, _File) != (-1));
	}

template<> inline bool _Ungetc(const signed char& _Byte, FILE *_File)
	{	
	return (ungetc((unsigned char)_Byte, _File) != (-1));
	}

template<> inline bool _Ungetc(const unsigned char& _Byte, FILE *_File)
	{	
	return (ungetc(_Byte, _File) != (-1));
	}

template<> inline bool _Ungetc(const wchar_t& _Wchar, FILE *_File)
	{	
	return (:: ungetwc(_Wchar, _File) != ((wint_t)(0xFFFF)));
	}

 
template<> inline bool _Ungetc(const unsigned short& _Wchar, FILE *_File)
	{	
	return (:: ungetwc(_Wchar, _File) != ((wint_t)(0xFFFF)));
	}
 #line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"

		
template<class _Elem,
	class _Traits>
	class basic_filebuf
		: public basic_streambuf<_Elem, _Traits>
	{	
public:
	typedef basic_filebuf<_Elem, _Traits> _Myt;
	typedef basic_streambuf<_Elem, _Traits> _Mysb;
	typedef typename _Traits::state_type _Myst;
	typedef codecvt<_Elem, char, typename _Traits::state_type> _Cvt;

	basic_filebuf(FILE *_File = 0)
		: _Mysb()
		{	
		_Init(_File, _Newfl);
		}

	virtual  ~basic_filebuf() noexcept
		{	
		if (_Myfile != 0)
			_Reset_back();	
		if (_Closef)
			close();
		}

	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

	basic_filebuf(_Uninitialized)
		: _Mysb(_Noinit)
		{	
		}

	basic_filebuf(_Myt&& _Right)
		{	
		_Init(_Right._Myfile, _Newfl);	
		_Init((FILE *)0, _Closefl);	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	_Myt& operator=(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		return (*this);
		}

	void _Assign_rv(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			close();
			this->swap(_Right);
			}
		}

	void swap(_Myt& _Right)
		{	
		if (this != &_Right)
			{	
			
			FILE *_Myfile_sav = _Myfile;
			const _Cvt *_Pcvt_sav = _Pcvt;
			typename _Traits::state_type _State_sav = _State;
			bool _Wrotesome_sav = _Wrotesome;
			bool _Closef_sav = _Closef;
			bool _Set_eback_sav = _Mysb::eback() == &_Mychar;
			bool _Set_eback_live = _Mysb::gptr() == &_Mychar;

			_Elem *_Pfirst0 = _Mysb::pbase();
			_Elem *_Pnext0 = _Mysb::pptr();
			_Elem *_Pend = _Mysb::epptr();
			_Elem *_Gfirst0 = _Mysb::eback();
			_Elem *_Gnext0 = _Mysb::gptr();
			_Elem *_Gend = _Mysb::egptr();

			
			_Init(_Right._Myfile, _Right._Myfile != 0 ? _Openfl : _Newfl);
			_Mysb::setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
			if (_Right.eback() != &_Right._Mychar)
				_Mysb::setg(_Right.eback(), _Right.gptr(), _Right.egptr());
			else if (_Right.gptr() != &_Right._Mychar)
				_Mysb::setg(&_Mychar, &_Mychar + 1, &_Mychar + 1);
			else
				_Mysb::setg(&_Mychar, &_Mychar, &_Mychar + 1);

			_Pcvt = _Right._Pcvt;
			_State = _Right._State;
			_Wrotesome = _Right._Wrotesome;
			_Closef = _Right._Closef;

			
			_Right._Init(_Myfile_sav, _Myfile_sav != 0 ? _Openfl : _Newfl);
			_Right.setp(_Pfirst0, _Pnext0, _Pend);
			if (!_Set_eback_sav)
				_Right.setg(_Gfirst0, _Gnext0, _Gend);
			else if (!_Set_eback_live)
				_Right.setg(&_Right._Mychar, &_Right._Mychar + 1,
					&_Right._Mychar + 1);
			else
				_Right.setg(&_Right._Mychar, &_Right._Mychar,
					&_Right._Mychar + 1);

			_Right._Pcvt = _Pcvt_sav;
			_Right._State = _State_sav;
			_Right._Wrotesome = _Wrotesome_sav;
			_Right._Closef = _Closef_sav;

			
			::std:: swap(_Set_eback, _Right._Set_eback);
			::std:: swap(_Set_egptr, _Right._Set_egptr);

			::std:: swap(_Mychar, _Right._Mychar);
			::std:: swap(_Mysb::_Plocale, _Right._Plocale);
			}
		}

	basic_filebuf(const _Myt&) = delete;
	_Myt& operator=(const _Myt&) = delete;

	enum _Initfl
		{	
		_Newfl, _Openfl, _Closefl};

	bool is_open() const
		{	
		return (_Myfile != 0);
		}

	_Myt *open(const char *_Filename,
		ios_base::openmode _Mode,
		int _Prot = (int)ios_base::_Openprot)
		{	
		FILE *_File;
		if (_Myfile != 0 || (_File = _Fiopen(_Filename, _Mode, _Prot)) == 0)
			return (0);	

		_Init(_File, _Openfl);
		_Initcvt(&use_facet< _Cvt >(_Mysb::getloc()));
		return (this);	
		}

	_Myt *open(const string& _Str,
		ios_base::openmode _Mode,
		int _Prot = (int)ios_base::_Openprot)
		{	
		return (open(_Str.c_str(), _Mode, _Prot));
		}

 
	_Myt *open(const char *_Filename, ios_base::open_mode _Mode)
		{	
		return (open(_Filename, (ios_base::openmode)_Mode));
		}
 #line 288 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"

	_Myt *open(const wchar_t *_Filename,
		ios_base::openmode _Mode,
		int _Prot = (int)ios_base::_Openprot)
		{	
		FILE *_File;
		if (_Myfile != 0 || (_File = _Fiopen(_Filename, _Mode, _Prot)) == 0)
			return (0);	

		_Init(_File, _Openfl);
		_Initcvt(&use_facet< _Cvt >(_Mysb::getloc()));
		return (this);	
		}

	_Myt *open(const wstring& _Str,
		ios_base::openmode _Mode,
		int _Prot = (int)ios_base::_Openprot)
		{	
		return (open(_Str.c_str(), _Mode, _Prot));
		}

 
	_Myt *open(const wchar_t *_Filename,
		ios_base::open_mode _Mode)
		{	
		return (open(_Filename, (ios_base::openmode)_Mode));
		}
 #line 316 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"

 
	_Myt *open(const unsigned short *_Filename,
		ios_base::openmode _Mode,
		int _Prot = (int)ios_base::_Openprot)
		{	
		FILE *_File;
		if (_Myfile != 0 || (_File = _Fiopen(_Filename, _Mode, _Prot)) == 0)
			return (0);	

		_Init(_File, _Openfl);
		_Initcvt(&use_facet< _Cvt >(_Mysb::getloc()));
		return (this);	
		}

 
	_Myt *open(const unsigned short *_Filename,
		ios_base::open_mode _Mode)
		{	
		return (open(_Filename, (ios_base::openmode)_Mode));
		}
 #line 338 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
 #line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"

	_Myt *close()
		{	
		_Myt *_Ans = this;
		if (_Myfile == 0)
			_Ans = 0;
		else
			{	
			if (!_Endwrite())
				_Ans = 0;
			if (fclose(_Myfile) != 0)
				_Ans = 0;
			}
		_Init(0, _Closefl);
		return (_Ans);
		}

	virtual void  _Lock()
		{	
		if (_Myfile)
			:: _lock_file(_Myfile);
		}

	virtual void  _Unlock()
		{	
		if (_Myfile)
			:: _unlock_file(_Myfile);
		}

protected:
	virtual int_type  overflow(int_type _Meta =
		_Traits::eof())
		{	
		if (_Traits::eq_int_type(_Traits::eof(), _Meta))
			return (_Traits::not_eof(_Meta));	
		else if (_Mysb::pptr() != 0
			&& _Mysb::pptr() < _Mysb::epptr())
			{	
			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);
			return (_Meta);
			}
		else if (_Myfile == 0)
			return (_Traits::eof());	
		_Reset_back();	
		if (_Pcvt == 0)
			return (_Fputc(_Traits::to_char_type(_Meta), _Myfile)
				? _Meta : _Traits::eof());	
		else
			{	
			const int _STRING_INC = 8;
			const _Elem _Ch = _Traits::to_char_type(_Meta);
			const _Elem *_Src;
			char *_Dest;

			string _Str(_STRING_INC, '\0');
			for (; ; )
				switch (_Pcvt->out(_State,
					&_Ch, &_Ch + 1, _Src,
					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Dest))
				{	
				case codecvt_base::partial:
				case codecvt_base::ok:
					{	
					size_t _Count = _Dest - &*_Str.begin();
					if (0 < _Count && _Count !=
						fwrite(&*_Str.begin(), 1, _Count, _Myfile))
						return (_Traits::eof());	

					_Wrotesome = true;	
					if (_Src != &_Ch)
						return (_Meta);	

					if (0 < _Count)
						;
					else if (_Str.size() < 4 * _STRING_INC)
						_Str.append(_STRING_INC, '\0');	
					else
						return (_Traits::eof());	
					break;
					}

				case codecvt_base::noconv:
					return (_Fputc(_Ch, _Myfile) ? _Meta
						: _Traits::eof());	

				default:
					return (_Traits::eof());	
				}
			}
	}

	virtual int_type  pbackfail(int_type _Meta =
		_Traits::eof())
		{	
		if (_Mysb::gptr() != 0
			&& _Mysb::eback() < _Mysb::gptr()
			&& (_Traits::eq_int_type(_Traits::eof(), _Meta)
			|| _Traits::eq_int_type(_Traits::to_int_type(_Mysb::gptr()[-1]),
				_Meta)))
			{	
			_Mysb::_Gndec();
			return (_Traits::not_eof(_Meta));
			}
		else if (_Myfile == 0 || _Traits::eq_int_type(_Traits::eof(), _Meta))
			return (_Traits::eof());	
		else if (_Pcvt == 0 && _Ungetc(_Traits::to_char_type(_Meta), _Myfile))
			return (_Meta);	
		else if (_Mysb::gptr() != &_Mychar)
			{	
			_Mychar = _Traits::to_char_type(_Meta);
			_Set_back();	
			return (_Meta);
			}
		else
			return (_Traits::eof());	
	}

	virtual int_type  underflow()
		{	
		int_type _Meta;
		if (_Mysb::gptr() != 0
			&& _Mysb::gptr() < _Mysb::egptr())
			return (_Traits::to_int_type(*_Mysb::gptr()));	
		else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))
			return (_Meta);	
		else
			{	
			pbackfail(_Meta);
			return (_Meta);
			}
		}

	virtual int_type  uflow()
		{	
		if (_Mysb::gptr() != 0
			&& _Mysb::gptr() < _Mysb::egptr())
			return (_Traits::to_int_type(
				*_Mysb::_Gninc()));	
		else if (_Myfile == 0)
			return (_Traits::eof());	
		_Reset_back();	
		if (_Pcvt == 0)
			{	
			_Elem _Ch = 0;
			return (_Fgetc(_Ch, _Myfile) ? _Traits::to_int_type(_Ch)
				: _Traits::eof());
			}
		else
			{	
			string _Str;

			for (; ; )
				{	
				_Elem _Ch, *_Dest;
				const char *_Src;
				int _Nleft;
				int _Meta = fgetc(_Myfile);

				if (_Meta == (-1))
					return (_Traits::eof());	

				_Str.append(1, (char)_Meta);	
				switch (_Pcvt->in(_State,
					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Src,
					&_Ch, &_Ch + 1, _Dest))
					{	
				case codecvt_base::partial:
				case codecvt_base::ok:
					if (_Dest != &_Ch)
						{	
						_Nleft = (int)(&*_Str.begin() + _Str.size() - _Src);
						for (; 0 < _Nleft; )
							ungetc(_Src[--_Nleft], _Myfile);
						return (_Traits::to_int_type(_Ch));
						}
					else
						_Str.erase((size_t)0,	
							(size_t)(_Src - &*_Str.begin()));
					break;

				case codecvt_base::noconv:
					if (_Str.size() < sizeof (_Elem))
						break;	

					::memcpy_s((&_Ch), (sizeof (_Elem)), (&*_Str.begin()), (sizeof (_Elem)));	
#line 525 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"

					return (_Traits::to_int_type(_Ch));	

				default:
					return (_Traits::eof());	
					}
				}
			}
		}

	virtual pos_type  seekoff(off_type _Off,
		ios_base::seekdir _Way,
		ios_base::openmode =
			(ios_base::openmode)(ios_base::in | ios_base::out))
		{	
		fpos_t _Fileposition;

		if (_Mysb::gptr() == &_Mychar	
			&& _Way == ios_base::cur	
			&& _Pcvt == 0)	
			_Off -= (off_type)sizeof (_Elem);	

		if (_Myfile == 0 || !_Endwrite()
			|| ((_Off != 0 || _Way != ios_base::cur)
				&& _fseeki64(_Myfile, _Off, _Way) != 0)
			|| fgetpos(_Myfile, &_Fileposition) != 0)
			return (pos_type(_BADOFF));	

		_Reset_back();	
		return (pos_type(_State, _Fileposition));	
#line 556 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
		}

	virtual pos_type  seekpos(pos_type _Pos,
		ios_base::openmode =
			(ios_base::openmode)(ios_base::in | ios_base::out))
		{	
		fpos_t _Fileposition = _Pos.seekpos();
		off_type _Off = (off_type)_Pos - (off_type)((long long)(_Fileposition));

		if (_Myfile == 0 || !_Endwrite()
			|| fsetpos(_Myfile, &_Fileposition) != 0
			|| (_Off != 0 && _fseeki64(_Myfile, _Off, 1) != 0)
			|| fgetpos(_Myfile, &_Fileposition) != 0)
			return (pos_type(_BADOFF));	

		_State = _Pos.state();

		_Reset_back();	
		return (pos_type(_State, _Fileposition));	
#line 576 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
		}

	virtual _Mysb * setbuf(_Elem *_Buffer, streamsize _Count)
		{	
		if (_Myfile == 0 || setvbuf(_Myfile, (char *)_Buffer,
			_Buffer == 0 && _Count == 0 ? 0x0004 : 0x0000,
			(size_t)_Count * sizeof (_Elem)) != 0)
			return (0);	
		else
			{	
			_Init(_Myfile, _Openfl);
			return (this);
			}
		}

	virtual int  sync()
		{	
		return (_Myfile == 0
			|| _Traits::eq_int_type(_Traits::eof(), overflow())
			|| 0 <= fflush(_Myfile) ? 0 : -1);
		}

	virtual void  imbue(const locale& _Loc)
		{	
		_Initcvt(&use_facet< _Cvt >(_Loc));
		}

	void _Init(FILE *_File, _Initfl _Which)
		{	
		 static _Myst _Stinit;	

		_Closef = _Which == _Openfl;
		_Wrotesome = false;

		_Mysb::_Init();	

 
  
  
 #line 616 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"

  #pragma warning(push)
  #pragma warning(disable: 6240)	
		if (_File != 0 && sizeof (_Elem) == 1)
  #pragma warning(pop)

			{	
			_Elem **_Pb = 0;
			_Elem **_Pn = 0;
			int *_Nr = 0;

			::_get_stream_buffer_pointers(
				_File,
				reinterpret_cast<char***>(&_Pb),
				reinterpret_cast<char***>(&_Pn),
				&_Nr);
			int *_Nw = _Nr;

			_Mysb::_Init(_Pb, _Pn, _Nr, _Pb, _Pn, _Nw);
			}

		_Myfile = _File;
		_State = _Stinit;
		_Pcvt = 0;	
		}

	bool _Endwrite()
		{	
		if (_Pcvt == 0 || !_Wrotesome)
			return (true);
		else
			{	
			const int _STRING_INC = 8;
			char *_Dest;
			if (_Traits::eq_int_type(_Traits::eof(), overflow()))
				return (false);

			string _Str(_STRING_INC, '\0');
			for (; ; )
				switch (_Pcvt->unshift(_State,
					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Dest))
				{	
				case codecvt_base::ok:
					_Wrotesome = false;	

				case codecvt_base::partial:	
					{	
					size_t _Count = _Dest - &*_Str.begin();
					if (0 < _Count && _Count !=
						fwrite(&*_Str.begin(), 1, _Count, _Myfile))
						return (false);	
					if (!_Wrotesome)
						return (true);
					if (_Count == 0)
						_Str.append(_STRING_INC, '\0');	
					break;
					}

				case codecvt_base::noconv:
					return (true);	

				default:
					return (false);	
				}
			}
		}

	void _Initcvt(const _Cvt *_Newpcvt)
		{	
		if (_Newpcvt->always_noconv())
			_Pcvt = 0;	
		else
			{	
			_Pcvt = _Newpcvt;
			_Mysb::_Init();	
			}
		}

private:
	const _Cvt *_Pcvt;	
	_Elem _Mychar;	
	bool _Wrotesome;	
	typename _Traits::state_type _State;	
	bool _Closef;	
	FILE *_Myfile;	

	void _Reset_back()
		{	
		if (_Mysb::eback() == &_Mychar)
			_Mysb::setg(_Set_eback, _Set_eback, _Set_egptr);
		}

	void _Set_back()
		{	
		if (_Mysb::eback() != &_Mychar)
			{	
			_Set_eback = _Mysb::eback();
			_Set_egptr = _Mysb::egptr();
			}
		_Mysb::setg(&_Mychar, &_Mychar, &_Mychar + 1);
		}

	_Elem *_Set_eback;	
	_Elem *_Set_egptr;	
	};

	
template<class _Elem,
	class _Traits> inline
	void swap(basic_filebuf<_Elem, _Traits>& _Left,
		basic_filebuf<_Elem, _Traits>& _Right)
	{	
	_Left.swap(_Right);
	}

		
template<class _Elem,
	class _Traits>
	class basic_ifstream
		: public basic_istream<_Elem, _Traits>
	{	
public:
	typedef basic_ifstream<_Elem, _Traits> _Myt;
	typedef basic_istream<_Elem, _Traits> _Mybase;
	typedef basic_filebuf<_Elem, _Traits> _Myfb;
	typedef basic_ios<_Elem, _Traits> _Myios;

	basic_ifstream()
		: _Mybase(&_Filebuffer)
		{	
		}

	explicit basic_ifstream(const char *_Filename,
		ios_base::openmode _Mode = ios_base::in,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}

	explicit basic_ifstream(const string& _Str,
		ios_base::openmode _Mode = ios_base::in,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Str.c_str(), _Mode | ios_base::in, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}

	explicit basic_ifstream(const wchar_t *_Filename,
		ios_base::openmode _Mode = ios_base::in,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}

	explicit basic_ifstream(const wstring& _Str,
		ios_base::openmode _Mode = ios_base::in,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Str.c_str(), _Mode | ios_base::in, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}

 
	explicit basic_ifstream(const unsigned short *_Filename,
		ios_base::openmode _Mode = ios_base::in,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}
 #line 794 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"

	explicit basic_ifstream(FILE *_File)
		: _Mybase(&_Filebuffer),
			_Filebuffer(_File)
		{	
		}

	basic_ifstream(_Myt&& _Right)
		: _Mybase(&_Filebuffer)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	_Myt& operator=(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		return (*this);
		}

	void _Assign_rv(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			_Filebuffer.close();
			this->swap(_Right);
			}
		}

	void swap(_Myt& _Right)
		{	
		if (this != &_Right)
			{	
			_Mybase::swap(_Right);
			_Filebuffer.swap(_Right._Filebuffer);
			}
		}

	basic_ifstream(const _Myt&) = delete;
	_Myt& operator=(const _Myt&) = delete;

	void open(const wchar_t *_Filename,
		ios_base::openmode _Mode = ios_base::in,
		int _Prot = (int)ios_base::_Openprot)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		else
			_Myios::clear();	
		}

	void open(const wstring& _Str,
		ios_base::openmode _Mode = ios_base::in,
		int _Prot = (int)ios_base::_Openprot)
		{	
		open(_Str.c_str(), _Mode, _Prot);
		}

 
	void open(const wchar_t *_Filename, ios_base::open_mode _Mode)
		{	
		open(_Filename, (ios_base::openmode)_Mode);
		}
 #line 857 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"

 
	void open(const unsigned short *_Filename,
		ios_base::openmode _Mode = ios_base::in,
		int _Prot = (int)ios_base::_Openprot)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		else
			_Myios::clear();	
		}

 
	void open(const unsigned short *_Filename,
		ios_base::open_mode _Mode)
		{	
		open(_Filename, (ios_base::openmode)_Mode);
		}
 #line 876 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
 #line 877 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"

	virtual  ~basic_ifstream() noexcept
		{	
		}

	_Myfb *rdbuf() const
		{	
		return ((_Myfb *)&_Filebuffer);
		}

	bool is_open() const
		{	
		return (_Filebuffer.is_open());
		}

	void open(const char *_Filename,
		ios_base::openmode _Mode = ios_base::in,
		int _Prot = (int)ios_base::_Openprot)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		else
			_Myios::clear();	
		}

	void open(const string& _Str,
		ios_base::openmode _Mode = ios_base::in,
		int _Prot = (int)ios_base::_Openprot)
		{	
		open(_Str.c_str(), _Mode, _Prot);
		}

 
	void open(const char *_Filename, ios_base::open_mode _Mode)
		{	
		open(_Filename, (ios_base::openmode)_Mode);
		}
 #line 915 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"

	void close()
		{	
		if (_Filebuffer.close() == 0)
			_Myios::setstate(ios_base::failbit);
		}

private:
	_Myfb _Filebuffer;	
	};

	
template<class _Elem,
	class _Traits> inline
	void swap(basic_ifstream<_Elem, _Traits>& _Left,
		basic_ifstream<_Elem, _Traits>& _Right)
	{	
	_Left.swap(_Right);
	}

		
template<class _Elem,
	class _Traits>
	class basic_ofstream
		: public basic_ostream<_Elem, _Traits>
	{	
public:
	typedef basic_ofstream<_Elem, _Traits> _Myt;
	typedef basic_ostream<_Elem, _Traits> _Mybase;
	typedef basic_filebuf<_Elem, _Traits> _Myfb;
	typedef basic_ios<_Elem, _Traits> _Myios;

	basic_ofstream()
		: _Mybase(&_Filebuffer)
		{	
		}

	explicit basic_ofstream(const char *_Filename,
		ios_base::openmode _Mode = ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}

	explicit basic_ofstream(const string& _Str,
		ios_base::openmode _Mode = ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Str.c_str(), _Mode | ios_base::out, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}

	explicit basic_ofstream(const wchar_t *_Filename,
		ios_base::openmode _Mode = ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}

	explicit basic_ofstream(const wstring& _Str,
		ios_base::openmode _Mode = ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Str.c_str(), _Mode | ios_base::out, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}

 
	explicit basic_ofstream(const unsigned short *_Filename,
		ios_base::openmode _Mode = ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}
 #line 998 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"

	explicit basic_ofstream(FILE *_File)
		: _Mybase(&_Filebuffer),
			_Filebuffer(_File)
		{	
		}

	basic_ofstream(_Myt&& _Right)
		: _Mybase(&_Filebuffer)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	_Myt& operator=(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		return (*this);
		}

	void _Assign_rv(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			_Filebuffer.close();
			this->swap(_Right);
			}
		}

	void swap(_Myt& _Right)
		{	
		if (this != &_Right)
			{	
			_Mybase::swap(_Right);
			_Filebuffer.swap(_Right._Filebuffer);
			}
		}

	basic_ofstream(const _Myt&) = delete;
	_Myt& operator=(const _Myt&) = delete;

	void open(const wchar_t *_Filename,
		ios_base::openmode _Mode = ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		else
			_Myios::clear();	
		}

	void open(const wstring& _Str,
		ios_base::openmode _Mode = ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		{	
		open(_Str.c_str(), _Mode, _Prot);
		}

 
	void open(const wchar_t *_Filename, ios_base::open_mode _Mode)
		{	
		open(_Filename, (ios_base::openmode)_Mode);
		}
 #line 1061 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"

 
	void open(const unsigned short *_Filename,
		ios_base::openmode _Mode = ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		else
			_Myios::clear();	
		}

 
	void open(const unsigned short *_Filename,
		ios_base::open_mode _Mode)
		{	
		open(_Filename, (ios_base::openmode)_Mode);
		}
 #line 1080 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
 #line 1081 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"

	virtual  ~basic_ofstream() noexcept
		{	
		}

	_Myfb *rdbuf() const
		{	
		return ((_Myfb *)&_Filebuffer);
		}

	bool is_open() const
		{	
		return (_Filebuffer.is_open());
		}

	void open(const char *_Filename,
		ios_base::openmode _Mode = ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		else
			_Myios::clear();	
		}

	void open(const string& _Str,
		ios_base::openmode _Mode = ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		{	
		open(_Str.c_str(), _Mode, _Prot);
		}

 
	void open(const char *_Filename, ios_base::open_mode _Mode)
		{	
		open(_Filename, (ios_base::openmode)_Mode);
		}
 #line 1119 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"

	void close()
		{	
		if (_Filebuffer.close() == 0)
			_Myios::setstate(ios_base::failbit);
		}

private:
	_Myfb _Filebuffer;	
	};

	
template<class _Elem,
	class _Traits> inline
	void swap(basic_ofstream<_Elem, _Traits>& _Left,
		basic_ofstream<_Elem, _Traits>& _Right)
	{	
	_Left.swap(_Right);
	}

		
template<class _Elem,
	class _Traits>
	class basic_fstream
		: public basic_iostream<_Elem, _Traits>
	{	
public:
	typedef basic_fstream<_Elem, _Traits> _Myt;
	typedef basic_iostream<_Elem, _Traits> _Mybase;
	typedef basic_filebuf<_Elem, _Traits> _Myfb;
	typedef basic_ios<_Elem, _Traits> _Myios;
	typedef _Elem char_type;
	typedef _Traits traits_type;
	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

	basic_fstream()
		: _Mybase(&_Filebuffer)
		{	
		}

	explicit basic_fstream(const char *_Filename,
		ios_base::openmode _Mode = ios_base::in | ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Filename, _Mode, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}

	explicit basic_fstream(const string& _Str,
		ios_base::openmode _Mode = ios_base::in | ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Str.c_str(), _Mode, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}

	explicit basic_fstream(const wchar_t *_Filename,
		ios_base::openmode _Mode = ios_base::in | ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Filename, _Mode, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}

	explicit basic_fstream(const wstring& _Str,
		ios_base::openmode _Mode = ios_base::in | ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Str.c_str(), _Mode, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}

 
	explicit basic_fstream(const unsigned short *_Filename,
		ios_base::openmode _Mode = ios_base::in | ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Filename, _Mode, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}
 #line 1207 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"

	explicit basic_fstream(FILE *_File)
		: _Mybase(&_Filebuffer),
			_Filebuffer(_File)
		{	
		}

	basic_fstream(_Myt&& _Right)
		: _Mybase(&_Filebuffer)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	_Myt& operator=(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		return (*this);
		}

	void _Assign_rv(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			_Filebuffer.close();
			this->swap(_Right);
			}
		}

	void swap(_Myt& _Right)
		{	
		if (this != &_Right)
			{	
			_Mybase::swap(_Right);
			_Filebuffer.swap(_Right._Filebuffer);
			}
		}

	basic_fstream(const _Myt&) = delete;
	_Myt& operator=(const _Myt&) = delete;

	void open(const wchar_t *_Filename,
		ios_base::openmode _Mode = ios_base::in | ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		{	
		if (_Filebuffer.open(_Filename, _Mode, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		else
			_Myios::clear();	
		}

	void open(const wstring& _Str,
		ios_base::openmode _Mode = ios_base::in | ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		{	
		open(_Str.c_str(), _Mode, _Prot);
		}

 
	void open(const wchar_t *_Filename, ios_base::open_mode _Mode)
		{	
		open(_Filename, (ios_base::openmode)_Mode);
		}
 #line 1270 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"

 
	void open(const unsigned short *_Filename,
		ios_base::openmode _Mode = ios_base::in | ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		{	
		if (_Filebuffer.open(_Filename, _Mode, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		else
			_Myios::clear();	
		}

 
	void open(const unsigned short *_Filename,
		ios_base::open_mode _Mode)
		{	
		open(_Filename, (ios_base::openmode)_Mode);
		}
 #line 1289 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
 #line 1290 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"

	virtual  ~basic_fstream() noexcept
		{	
		}

	_Myfb *rdbuf() const
		{	
		return ((_Myfb *)&_Filebuffer);
		}

	bool is_open() const
		{	
		return (_Filebuffer.is_open());
		}

	void open(const char *_Filename,
		ios_base::openmode _Mode = ios_base::in | ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		{	
		if (_Filebuffer.open(_Filename, _Mode, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		else
			_Myios::clear();	
		}

	void open(const string& _Str,
		ios_base::openmode _Mode = ios_base::in | ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		{	
		open(_Str.c_str(), _Mode, _Prot);
		}

 
	void open(const char *_Filename, ios_base::open_mode _Mode)
		{	
		open(_Filename, (ios_base::openmode)_Mode);
		}
 #line 1328 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"

	void close()
		{	
		if (_Filebuffer.close() == 0)
			_Myios::setstate(ios_base::failbit);
	}

private:
	_Myfb _Filebuffer;	
	};

	
template<class _Elem,
	class _Traits> inline
	void swap(basic_fstream<_Elem, _Traits>& _Left,
		basic_fstream<_Elem, _Traits>& _Right)
	{	
	_Left.swap(_Right);
	}
}

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 1353 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
#line 1354 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"






#line 7 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
















#line 24 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"























#line 48 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"











#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1010 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"

#line 60 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"






typedef struct {
	double *e;
	double *f;
	unsigned short N;
	
	unsigned short *Ks;
	float *Cms;
	unsigned short NModels;
	unsigned short NComps;
	unsigned short *boolModel;
	
	unsigned short Depth;
	unsigned short LognDepth;
	unsigned short nFathers;
	unsigned short nCallForFather;
	unsigned short* Fathers;
	
	unsigned short* SonNoVec;
	
	unsigned short* RelStarts;
	unsigned short* RelEnds;
	unsigned short* RelVec;
	unsigned short* SegStartI;
	unsigned short* SegEndI;
	unsigned short* SegToComp;
	unsigned short* MidComps;
	
		unsigned short* FIdxs;
	#line 95 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
	
	unsigned short *CompByLevel32;
	unsigned short *CompByFLevel32;
	unsigned short nLRel;
	unsigned short *LRelStarts;
	unsigned short *LRelEnds;
	unsigned short nFLRel;
	unsigned short *FLRelStarts;
	unsigned short *FLRelEnds;
	
	


}HMat;


typedef struct {
	unsigned short NStimuli;
	unsigned short loc;
	unsigned short comp;
	unsigned short numofdts;
	float area;
	unsigned short* dtInds;
	float* amps;
	float* durs;
	float* dels;
	float Nt;
}Stim;



typedef struct {
	float* Vs;
	float dt;
	float TFinal;
	float Celsius;
	unsigned short NRecSites;
	unsigned short* RecSites;
}Sim;


void RunByModelSerial();
void RunByModelP();

void solveByNeuron(const HMat &InMat,double* B,double* D);
float maxf(float a, float b);
float MaxAbsDiffVec(float* A,float *B, int n);

void CopyVec(float* A,float *B, int n);
void CopyVecTwoTypes(double *B,float* A, int n);
void FlipVec(float* A,float *B, int n);
void CompareArrays(const float* App, const float *Real, int n, char* Prefix);
double diffclock(clock_t clock1,clock_t clock2);



#line 152 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
void ReadSerialNeuronData(const char* FN, HMat &TheMat);
void ReadParallelNeuronData(const char* FN, HMat &TheMat,unsigned short* CompDepth,unsigned short* CompFDepth);
void FreeSerialNeuronData(HMat &InMat);
void ReadStimData(const char* FN, Stim &stim,unsigned short Nx);
void CreateStimData(Stim &stim);
void ReadSimData(const char* FN,unsigned short N, Sim &sim);
void ReadStimFromFile(const char* FN,Stim &stim);
void FreeStimData(Stim &stim);
void FreeSimData(Sim &sim);

void SaveArrayToFile(const char* FN, const int N, const float* Arr);
void SaveVHots(const char* FN,float** VHotsHost,unsigned short Nt,unsigned short NStimuli);
void ReadDebugData(const char* FN,float** DebugData,unsigned short Nsegs,unsigned short Nt);
void ReadRHSData(const char* FN,float** DebugData,unsigned short Nsegs,unsigned short Nt);
void ReadDData(const char* FN,float** DebugData,unsigned short Nsegs,unsigned short Nt);
void SetStatesFromDebug(float** StatesM,float** DebugData,unsigned short i,unsigned short N);
void SetRHSFromNeuron(float* rhs,float** DebugData,unsigned short i,unsigned short N);
void SetDFromNeuron(float* D,float** DebugData,unsigned short i,unsigned short N);
void ReadVData(const char* FN,float** DebugData,unsigned short Nsegs,unsigned short Nt);
void SetVFromNeuron(float* vs,float** DebugData,unsigned short i,unsigned short N);
void debugPrintMYFTYPE (float* A,unsigned short N,FILE* fdebug);
void debugPrintMYSECONDFTYPE(double* A,unsigned short N,FILE* fdebug);
void ReadShortFromCSV(char* line, unsigned short *ans, int n);
void ReadDoubleFromCSV(char* line, double *ans, int n);
void ReadFloatFromCSV(char* line, float *ans, int n);
float* ReadAllParams(const char* FN, unsigned short NParams, unsigned short Nx, unsigned short  &ntemp);
#line 179 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
#line 8 "c:\\pyneurogpu_winnew\\neurogpu6\\CudaStuff.cuh"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
















































 









#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
#line 61 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"

#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 63 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"


























































#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1010 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"


extern "C" {
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"

#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 66 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"

typedef float2 cuFloatComplex;

__declspec(__host__) __declspec(__device__) static __inline float cuCrealf (cuFloatComplex x) 
{ 
    return x.x; 
}

__declspec(__host__) __declspec(__device__) static __inline float cuCimagf (cuFloatComplex x) 
{ 
    return x.y; 
}

__declspec(__host__) __declspec(__device__) static __inline cuFloatComplex make_cuFloatComplex 
                                                             (float r, float i)
{
    cuFloatComplex res;
    res.x = r;
    res.y = i;
    return res;
}

__declspec(__host__) __declspec(__device__) static __inline cuFloatComplex cuConjf (cuFloatComplex x)
{
    return make_cuFloatComplex (cuCrealf(x), -cuCimagf(x));
}
__declspec(__host__) __declspec(__device__) static __inline cuFloatComplex cuCaddf (cuFloatComplex x,
                                                              cuFloatComplex y)
{
    return make_cuFloatComplex (cuCrealf(x) + cuCrealf(y), 
                                cuCimagf(x) + cuCimagf(y));
}

__declspec(__host__) __declspec(__device__) static __inline cuFloatComplex cuCsubf (cuFloatComplex x,
                                                              cuFloatComplex y)
{
        return make_cuFloatComplex (cuCrealf(x) - cuCrealf(y), 
                                    cuCimagf(x) - cuCimagf(y));
}






__declspec(__host__) __declspec(__device__) static __inline cuFloatComplex cuCmulf (cuFloatComplex x,
                                                              cuFloatComplex y)
{
    cuFloatComplex prod;
    prod = make_cuFloatComplex  ((cuCrealf(x) * cuCrealf(y)) - 
                                 (cuCimagf(x) * cuCimagf(y)),
                                 (cuCrealf(x) * cuCimagf(y)) + 
                                 (cuCimagf(x) * cuCrealf(y)));
    return prod;
}






__declspec(__host__) __declspec(__device__) static __inline cuFloatComplex cuCdivf (cuFloatComplex x,
                                                              cuFloatComplex y)
{
    cuFloatComplex quot;
    float s = fabsf(cuCrealf(y)) + fabsf(cuCimagf(y));
    float oos = 1.0f / s;
    float ars = cuCrealf(x) * oos;
    float ais = cuCimagf(x) * oos;
    float brs = cuCrealf(y) * oos;
    float bis = cuCimagf(y) * oos;
    s = (brs * brs) + (bis * bis);
    oos = 1.0f / s;
    quot = make_cuFloatComplex (((ars * brs) + (ais * bis)) * oos,
                                ((ais * brs) - (ars * bis)) * oos);
    return quot;
}









__declspec(__host__) __declspec(__device__) static __inline float cuCabsf (cuFloatComplex x)
{
    float a = cuCrealf(x);
    float b = cuCimagf(x);
    float v, w, t;
    a = fabsf(a);
    b = fabsf(b);
    if (a > b) {
        v = a;
        w = b; 
    } else {
        v = b;
        w = a;
    }
    t = w / v;
    t = 1.0f + t * t;
    t = v * sqrtf(t);
    if ((v == 0.0f) || (v > 3.402823466e38f) || (w > 3.402823466e38f)) {
        t = v + w;
    }
    return t;
}


typedef double2 cuDoubleComplex;

__declspec(__host__) __declspec(__device__) static __inline double cuCreal (cuDoubleComplex x) 
{ 
    return x.x; 
}

__declspec(__host__) __declspec(__device__) static __inline double cuCimag (cuDoubleComplex x) 
{ 
    return x.y; 
}

__declspec(__host__) __declspec(__device__) static __inline cuDoubleComplex make_cuDoubleComplex 
                                                           (double r, double i)
{
    cuDoubleComplex res;
    res.x = r;
    res.y = i;
    return res;
}

__declspec(__host__) __declspec(__device__) static __inline cuDoubleComplex cuConj(cuDoubleComplex x)
{
    return make_cuDoubleComplex (cuCreal(x), -cuCimag(x));
}

__declspec(__host__) __declspec(__device__) static __inline cuDoubleComplex cuCadd(cuDoubleComplex x,
                                                             cuDoubleComplex y)
{
    return make_cuDoubleComplex (cuCreal(x) + cuCreal(y), 
                                 cuCimag(x) + cuCimag(y));
}

__declspec(__host__) __declspec(__device__) static __inline cuDoubleComplex cuCsub(cuDoubleComplex x,
                                                             cuDoubleComplex y)
{
    return make_cuDoubleComplex (cuCreal(x) - cuCreal(y), 
                                 cuCimag(x) - cuCimag(y));
}






__declspec(__host__) __declspec(__device__) static __inline cuDoubleComplex cuCmul(cuDoubleComplex x,
                                                             cuDoubleComplex y)
{
    cuDoubleComplex prod;
    prod = make_cuDoubleComplex ((cuCreal(x) * cuCreal(y)) - 
                                 (cuCimag(x) * cuCimag(y)),
                                 (cuCreal(x) * cuCimag(y)) + 
                                 (cuCimag(x) * cuCreal(y)));
    return prod;
}






__declspec(__host__) __declspec(__device__) static __inline cuDoubleComplex cuCdiv(cuDoubleComplex x,
                                                             cuDoubleComplex y)
{
    cuDoubleComplex quot;
    double s = (fabs(cuCreal(y))) + (fabs(cuCimag(y)));
    double oos = 1.0 / s;
    double ars = cuCreal(x) * oos;
    double ais = cuCimag(x) * oos;
    double brs = cuCreal(y) * oos;
    double bis = cuCimag(y) * oos;
    s = (brs * brs) + (bis * bis);
    oos = 1.0 / s;
    quot = make_cuDoubleComplex (((ars * brs) + (ais * bis)) * oos,
                                 ((ais * brs) - (ars * bis)) * oos);
    return quot;
}







__declspec(__host__) __declspec(__device__) static __inline double cuCabs (cuDoubleComplex x)
{
    double a = cuCreal(x);
    double b = cuCimag(x);
    double v, w, t;
    a = fabs(a);
    b = fabs(b);
    if (a > b) {
        v = a;
        w = b; 
    } else {
        v = b;
        w = a;
    }
    t = w / v;
    t = 1.0 + t * t;
    t = v * sqrt(t);
    if ((v == 0.0) || 
        (v > 1.79769313486231570e+308) || (w > 1.79769313486231570e+308)) {
        t = v + w;
    }
    return t;
}


}
#line 287 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"


typedef cuFloatComplex cuComplex;
__declspec(__host__) __declspec(__device__) static __inline cuComplex make_cuComplex (float x, 
                                                                float y) 
{ 
    return make_cuFloatComplex (x, y); 
}


__declspec(__host__) __declspec(__device__) static __inline cuDoubleComplex cuComplexFloatToDouble
                                                      (cuFloatComplex c)
{
    return make_cuDoubleComplex ((double)cuCrealf(c), (double)cuCimagf(c));
}

__declspec(__host__) __declspec(__device__) static __inline cuFloatComplex cuComplexDoubleToFloat
(cuDoubleComplex c)
{
	return make_cuFloatComplex ((float)cuCreal(c), (float)cuCimag(c));
}


__declspec(__host__) __declspec(__device__) static __inline  cuComplex cuCfmaf( cuComplex x, cuComplex y, cuComplex d)
{
    float real_res;
    float imag_res;
    
    real_res = (cuCrealf(x) *  cuCrealf(y)) + cuCrealf(d);
    imag_res = (cuCrealf(x) *  cuCimagf(y)) + cuCimagf(d);
            
    real_res = -(cuCimagf(x) * cuCimagf(y))  + real_res;  
    imag_res =  (cuCimagf(x) *  cuCrealf(y)) + imag_res;          
     
    return make_cuComplex(real_res, imag_res);
}

__declspec(__host__) __declspec(__device__) static __inline  cuDoubleComplex cuCfma( cuDoubleComplex x, cuDoubleComplex y, cuDoubleComplex d)
{
    double real_res;
    double imag_res;
    
    real_res = (cuCreal(x) *  cuCreal(y)) + cuCreal(d);
    imag_res = (cuCreal(x) *  cuCimag(y)) + cuCimag(d);
            
    real_res = -(cuCimag(x) * cuCimag(y))  + real_res;  
    imag_res =  (cuCimag(x) *  cuCreal(y)) + imag_res;     
     
    return make_cuDoubleComplex(real_res, imag_res);
}

#line 339 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuComplex.h"
#line 64 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"





























































































typedef struct __declspec(align(2)) {
   unsigned short x;
} __half;

typedef struct __declspec(align(4)) {
   unsigned int x;
} __half2;


typedef __half half;
typedef __half2 half2;
#line 106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"





#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"



#line 116 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"

#line 118 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"










static __declspec(__device__) __inline __half __float2half(const float a);









static __declspec(__device__) __inline __half __float2half_rz(const float a);









static __declspec(__device__) __inline __half __float2half_rd(const float a);









static __declspec(__device__) __inline __half __float2half_ru(const float a);








static __declspec(__device__) __inline float __half2float(const __half a);










static __declspec(__device__) __inline int __half2int_rn(__half h);









static __declspec(__device__) __inline int __half2int_rz(__half h);









static __declspec(__device__) __inline int __half2int_rd(__half h);









static __declspec(__device__) __inline int __half2int_ru(__half h);










static __declspec(__device__) __inline __half __int2half_rn(int i);









static __declspec(__device__) __inline __half __int2half_rz(int i);









static __declspec(__device__) __inline __half __int2half_rd(int i);









static __declspec(__device__) __inline __half __int2half_ru(int i);











static __declspec(__device__) __inline short int __half2short_rn(__half h);









static __declspec(__device__) __inline short int __half2short_rz(__half h);









static __declspec(__device__) __inline short int __half2short_rd(__half h);









static __declspec(__device__) __inline short int __half2short_ru(__half h);











static __declspec(__device__) __inline __half __short2half_rn(short int i);









static __declspec(__device__) __inline __half __short2half_rz(short int i);









static __declspec(__device__) __inline __half __short2half_rd(short int i);









static __declspec(__device__) __inline __half __short2half_ru(short int i);










static __declspec(__device__) __inline unsigned int __half2uint_rn(__half h);









static __declspec(__device__) __inline unsigned int __half2uint_rz(__half h);









static __declspec(__device__) __inline unsigned int __half2uint_rd(__half h);









static __declspec(__device__) __inline unsigned int __half2uint_ru(__half h);










static __declspec(__device__) __inline __half __uint2half_rn(unsigned int i);









static __declspec(__device__) __inline __half __uint2half_rz(unsigned int i);









static __declspec(__device__) __inline __half __uint2half_rd(unsigned int i);









static __declspec(__device__) __inline __half __uint2half_ru(unsigned int i);











static __declspec(__device__) __inline unsigned short int __half2ushort_rn(__half h);










static __declspec(__device__) __inline unsigned short int __half2ushort_rz(__half h);









static __declspec(__device__) __inline unsigned short int __half2ushort_rd(__half h);









static __declspec(__device__) __inline unsigned short int __half2ushort_ru(__half h);











static __declspec(__device__) __inline __half __ushort2half_rn(unsigned short int i);










static __declspec(__device__) __inline __half __ushort2half_rz(unsigned short int i);









static __declspec(__device__) __inline __half __ushort2half_rd(unsigned short int i);









static __declspec(__device__) __inline __half __ushort2half_ru(unsigned short int i);











static __declspec(__device__) __inline unsigned long long int __half2ull_rn(__half h);










static __declspec(__device__) __inline unsigned long long int __half2ull_rz(__half h);









static __declspec(__device__) __inline unsigned long long int __half2ull_rd(__half h);









static __declspec(__device__) __inline unsigned long long int __half2ull_ru(__half h);











static __declspec(__device__) __inline __half __ull2half_rn(unsigned long long int i);










static __declspec(__device__) __inline __half __ull2half_rz(unsigned long long int i);









static __declspec(__device__) __inline __half __ull2half_rd(unsigned long long int i);









static __declspec(__device__) __inline __half __ull2half_ru(unsigned long long int i);











static __declspec(__device__) __inline long long int __half2ll_rn(__half h);









static __declspec(__device__) __inline long long int __half2ll_rz(__half h);









static __declspec(__device__) __inline long long int __half2ll_rd(__half h);









static __declspec(__device__) __inline long long int __half2ll_ru(__half h);











static __declspec(__device__) __inline __half __ll2half_rn(long long int i);









static __declspec(__device__) __inline __half __ll2half_rz(long long int i);









static __declspec(__device__) __inline __half __ll2half_rd(long long int i);









static __declspec(__device__) __inline __half __ll2half_ru(long long int i);










static __declspec(__device__) __inline __half htrunc(const __half h);








static __declspec(__device__) __inline __half hceil(const __half h);








static __declspec(__device__) __inline __half hfloor(const __half h);











static __declspec(__device__) __inline __half hrint(const __half h);










static __declspec(__device__) __inline __half2 h2trunc(const __half2 h);










static __declspec(__device__) __inline __half2 h2ceil(const __half2 h);










static __declspec(__device__) __inline __half2 h2floor(const __half2 h);












static __declspec(__device__) __inline __half2 h2rint(const __half2 h);












static __declspec(__device__) __inline __half2 __float2half2_rn(const float a);













static __declspec(__device__) __inline __half2 __floats2half2_rn(const float a, const float b);













static __declspec(__device__) __inline __half2 __float22half2_rn(const float2 a);









static __declspec(__device__) __inline float2 __half22float2(const __half2 a);









static __declspec(__device__) __inline float __low2float(const __half2 a);









static __declspec(__device__) __inline __half2 __half2half2(const __half a);









static __declspec(__device__) __inline float __high2float(const __half2 a);









static __declspec(__device__) __inline __half2 __lowhigh2highlow(const __half2 a);












static __declspec(__device__) __inline __half2 __lows2half2(const __half2 a, const __half2 b);












static __declspec(__device__) __inline __half2 __highs2half2(const __half2 a, const __half2 b);








static __declspec(__device__) __inline __half __high2half(const __half2 a);








static __declspec(__device__) __inline __half __low2half(const __half2 a);









static __declspec(__device__) __inline int __hisinf(const __half a);











static __declspec(__device__) __inline __half2 __halves2half2(const __half a, const __half b);










static __declspec(__device__) __inline __half2 __low2half2(const __half2 a);










static __declspec(__device__) __inline __half2 __high2half2(const __half2 a);










static __declspec(__device__) __inline short int __half_as_short(const __half h);









static __declspec(__device__) __inline unsigned short int __half_as_ushort(const __half h);









static __declspec(__device__) __inline __half __short_as_half(const short int i);









static __declspec(__device__) __inline __half __ushort_as_half(const unsigned short int i);





#line 985 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __declspec(__device__) __inline __half2 __shfl(__half2 var, int delta, int width=32);
static __declspec(__device__) __inline __half2 __shfl_up(__half2 var, unsigned int delta, int width=32);
static __declspec(__device__) __inline __half2 __shfl_down(__half2 var, unsigned int delta, int width=32);
static __declspec(__device__) __inline __half2 __shfl_xor(__half2 var, int delta, int width=32);
static __declspec(__device__) __inline __half __shfl(__half var, int delta, int width=32);
static __declspec(__device__) __inline __half __shfl_up(__half var, unsigned int delta, int width=32);
static __declspec(__device__) __inline __half __shfl_down(__half var, unsigned int delta, int width=32);
static __declspec(__device__) __inline __half __shfl_xor(__half var, int delta, int width=32);



#line 997 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 998 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"


static __declspec(__device__) __inline __half2 __ldg(const  __half2 *ptr);
static __declspec(__device__) __inline __half __ldg(const __half *ptr);
static __declspec(__device__) __inline __half2 __ldcg(const  __half2 *ptr);
static __declspec(__device__) __inline __half __ldcg(const __half *ptr);
static __declspec(__device__) __inline __half2 __ldca(const  __half2 *ptr);
static __declspec(__device__) __inline __half __ldca(const __half *ptr);
static __declspec(__device__) __inline __half2 __ldcs(const  __half2 *ptr);
static __declspec(__device__) __inline __half __ldcs(const __half *ptr);
#line 1009 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
























































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1930 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"

static __declspec(__device__) __inline int __half2int_rn(__half h)
{
   int i;
   asm("cvt.rni.s32.f16 %0, %1;" : "=r"(i) : "h"(h.x));
   return i;
}
static __declspec(__device__) __inline int __half2int_rz(__half h)
{
   int i;
   asm("cvt.rzi.s32.f16 %0, %1;" : "=r"(i) : "h"(h.x));
   return i;
}
static __declspec(__device__) __inline int __half2int_rd(__half h)
{
   int i;
   asm("cvt.rmi.s32.f16 %0, %1;" : "=r"(i) : "h"(h.x));
   return i;
}
static __declspec(__device__) __inline int __half2int_ru(__half h)
{
   int i;
   asm("cvt.rpi.s32.f16 %0, %1;" : "=r"(i) : "h"(h.x));
   return i;
}
static __declspec(__device__) __inline __half __int2half_rn(int i)
{
   __half h;
   asm("cvt.rn.f16.s32 %0, %1;" : "=h"(h.x) : "r"(i));
   return h;
}
static __declspec(__device__) __inline __half __int2half_rz(int i)
{
   __half h;
   asm("cvt.rz.f16.s32 %0, %1;" : "=h"(h.x) : "r"(i));
   return h;
}
static __declspec(__device__) __inline __half __int2half_rd(int i)
{
   __half h;
   asm("cvt.rm.f16.s32 %0, %1;" : "=h"(h.x) : "r"(i));
   return h;
}
static __declspec(__device__) __inline __half __int2half_ru(int i)
{
   __half h;
   asm("cvt.rp.f16.s32 %0, %1;" : "=h"(h.x) : "r"(i));
   return h;
}

static __declspec(__device__) __inline short int __half2short_rn(__half h)
{
   short int i;
   asm("cvt.rni.s16.f16 %0, %1;" : "=h"(i) : "h"(h.x));
   return i;
}
static __declspec(__device__) __inline short int __half2short_rz(__half h)
{
   short int i;
   asm("cvt.rzi.s16.f16 %0, %1;" : "=h"(i) : "h"(h.x));
   return i;
}
static __declspec(__device__) __inline short int __half2short_rd(__half h)
{
   short int i;
   asm("cvt.rmi.s16.f16 %0, %1;" : "=h"(i) : "h"(h.x));
   return i;
}
static __declspec(__device__) __inline short int __half2short_ru(__half h)
{
   short int i;
   asm("cvt.rpi.s16.f16 %0, %1;" : "=h"(i) : "h"(h.x));
   return i;
}
static __declspec(__device__) __inline __half __short2half_rn(short int i)
{
   __half h;
   asm("cvt.rn.f16.s16 %0, %1;" : "=h"(h.x) : "h"(i));
   return h;
}
static __declspec(__device__) __inline __half __short2half_rz(short int i)
{
   __half h;
   asm("cvt.rz.f16.s16 %0, %1;" : "=h"(h.x) : "h"(i));
   return h;
}
static __declspec(__device__) __inline __half __short2half_rd(short int i)
{
   __half h;
   asm("cvt.rm.f16.s16 %0, %1;" : "=h"(h.x) : "h"(i));
   return h;
}
static __declspec(__device__) __inline __half __short2half_ru(short int i)
{
   __half h;
   asm("cvt.rp.f16.s16 %0, %1;" : "=h"(h.x) : "h"(i));
   return h;
}

static __declspec(__device__) __inline unsigned int __half2uint_rn(__half h)
{
   unsigned int i;
   asm("cvt.rni.u32.f16 %0, %1;" : "=r"(i) : "h"(h.x));
   return i;
}
static __declspec(__device__) __inline unsigned int __half2uint_rz(__half h)
{
   unsigned int i;
   asm("cvt.rzi.u32.f16 %0, %1;" : "=r"(i) : "h"(h.x));
   return i;
}
static __declspec(__device__) __inline unsigned int __half2uint_rd(__half h)
{
   unsigned int i;
   asm("cvt.rmi.u32.f16 %0, %1;" : "=r"(i) : "h"(h.x));
   return i;
}
static __declspec(__device__) __inline unsigned int __half2uint_ru(__half h)
{
   unsigned int i;
   asm("cvt.rpi.u32.f16 %0, %1;" : "=r"(i) : "h"(h.x));
   return i;
}
static __declspec(__device__) __inline __half __uint2half_rn(unsigned int i)
{
   __half h;
   asm("cvt.rn.f16.u32 %0, %1;" : "=h"(h.x) : "r"(i));
   return h;
}
static __declspec(__device__) __inline __half __uint2half_rz(unsigned int i)
{
   __half h;
   asm("cvt.rz.f16.u32 %0, %1;" : "=h"(h.x) : "r"(i));
   return h;
}
static __declspec(__device__) __inline __half __uint2half_rd(unsigned int i)
{
   __half h;
   asm("cvt.rm.f16.u32 %0, %1;" : "=h"(h.x) : "r"(i));
   return h;
}
static __declspec(__device__) __inline __half __uint2half_ru(unsigned int i)
{
   __half h;
   asm("cvt.rp.f16.u32 %0, %1;" : "=h"(h.x) : "r"(i));
   return h;
}

static __declspec(__device__) __inline unsigned short int __half2ushort_rn(__half h)
{
   unsigned short int i;
   asm("cvt.rni.u16.f16 %0, %1;" : "=h"(i) : "h"(h.x));
   return i;
}
static __declspec(__device__) __inline unsigned short int __half2ushort_rz(__half h)
{
   unsigned short int i;
   asm("cvt.rzi.u16.f16 %0, %1;" : "=h"(i) : "h"(h.x));
   return i;
}
static __declspec(__device__) __inline unsigned short int __half2ushort_rd(__half h)
{
   unsigned short int i;
   asm("cvt.rmi.u16.f16 %0, %1;" : "=h"(i) : "h"(h.x));
   return i;
}
static __declspec(__device__) __inline unsigned short int __half2ushort_ru(__half h)
{
   unsigned short int i;
   asm("cvt.rpi.u16.f16 %0, %1;" : "=h"(i) : "h"(h.x));
   return i;
}
static __declspec(__device__) __inline __half __ushort2half_rn(unsigned short int i)
{
   __half h;
   asm("cvt.rn.f16.u16 %0, %1;" : "=h"(h.x) : "h"(i));
   return h;
}
static __declspec(__device__) __inline __half __ushort2half_rz(unsigned short int i)
{
   __half h;
   asm("cvt.rz.f16.u16 %0, %1;" : "=h"(h.x) : "h"(i));
   return h;
}
static __declspec(__device__) __inline __half __ushort2half_rd(unsigned short int i)
{
   __half h;
   asm("cvt.rm.f16.u16 %0, %1;" : "=h"(h.x) : "h"(i));
   return h;
}
static __declspec(__device__) __inline __half __ushort2half_ru(unsigned short int i)
{
   __half h;
   asm("cvt.rp.f16.u16 %0, %1;" : "=h"(h.x) : "h"(i));
   return h;
}

static __declspec(__device__) __inline unsigned long long int __half2ull_rn(__half h)
{
   unsigned long long int i;
   asm("cvt.rni.u64.f16 %0, %1;" : "=l"(i) : "h"(h.x));
   return i;
}
static __declspec(__device__) __inline unsigned long long int __half2ull_rz(__half h)
{
   unsigned long long int i;
   asm("cvt.rzi.u64.f16 %0, %1;" : "=l"(i) : "h"(h.x));
   return i;
}
static __declspec(__device__) __inline unsigned long long int __half2ull_rd(__half h)
{
   unsigned long long int i;
   asm("cvt.rmi.u64.f16 %0, %1;" : "=l"(i) : "h"(h.x));
   return i;
}
static __declspec(__device__) __inline unsigned long long int __half2ull_ru(__half h)
{
   unsigned long long int i;
   asm("cvt.rpi.u64.f16 %0, %1;" : "=l"(i) : "h"(h.x));
   return i;
}
static __declspec(__device__) __inline __half __ull2half_rn(unsigned long long int i)
{
   __half h;
   asm("cvt.rn.f16.u64 %0, %1;" : "=h"(h.x) : "l"(i));
   return h;
}
static __declspec(__device__) __inline __half __ull2half_rz(unsigned long long int i)
{
   __half h;
   asm("cvt.rz.f16.u64 %0, %1;" : "=h"(h.x) : "l"(i));
   return h;
}
static __declspec(__device__) __inline __half __ull2half_rd(unsigned long long int i)
{
   __half h;
   asm("cvt.rm.f16.u64 %0, %1;" : "=h"(h.x) : "l"(i));
   return h;
}
static __declspec(__device__) __inline __half __ull2half_ru(unsigned long long int i)
{
   __half h;
   asm("cvt.rp.f16.u64 %0, %1;" : "=h"(h.x) : "l"(i));
   return h;
}

static __declspec(__device__) __inline long long int __half2ll_rn(__half h)
{
   long long int i;
   asm("cvt.rni.s64.f16 %0, %1;" : "=l"(i) : "h"(h.x));
   return i;
}
static __declspec(__device__) __inline long long int __half2ll_rz(__half h)
{
   long long int i;
   asm("cvt.rzi.s64.f16 %0, %1;" : "=l"(i) : "h"(h.x));
   return i;
}
static __declspec(__device__) __inline long long int __half2ll_rd(__half h)
{
   long long int i;
   asm("cvt.rmi.s64.f16 %0, %1;" : "=l"(i) : "h"(h.x));
   return i;
}
static __declspec(__device__) __inline long long int __half2ll_ru(__half h)
{
   long long int i;
   asm("cvt.rpi.s64.f16 %0, %1;" : "=l"(i) : "h"(h.x));
   return i;
}
static __declspec(__device__) __inline __half __ll2half_rn(long long int i)
{
   __half h;
   asm("cvt.rn.f16.s64 %0, %1;" : "=h"(h.x) : "l"(i));
   return h;
}
static __declspec(__device__) __inline __half __ll2half_rz(long long int i)
{
   __half h;
   asm("cvt.rz.f16.s64 %0, %1;" : "=h"(h.x) : "l"(i));
   return h;
}
static __declspec(__device__) __inline __half __ll2half_rd(long long int i)
{
   __half h;
   asm("cvt.rm.f16.s64 %0, %1;" : "=h"(h.x) : "l"(i));
   return h;
}
static __declspec(__device__) __inline __half __ll2half_ru(long long int i)
{
   __half h;
   asm("cvt.rp.f16.s64 %0, %1;" : "=h"(h.x) : "l"(i));
   return h;
}

static __declspec(__device__) __inline __half htrunc(const __half h)
{
   __half r;
   asm("cvt.rzi.f16.f16 %0, %1;" : "=h"(r.x) : "h"(h.x));
   return r;
}
static __declspec(__device__) __inline __half hceil(const __half h)
{
   __half r;
   asm("cvt.rpi.f16.f16 %0, %1;" : "=h"(r.x) : "h"(h.x));
   return r;
}
static __declspec(__device__) __inline __half hfloor(const __half h)
{
   __half r;
   asm("cvt.rmi.f16.f16 %0, %1;" : "=h"(r.x) : "h"(h.x));
   return r;
}
static __declspec(__device__) __inline __half hrint(const __half h)
{
   __half r;
   asm("cvt.rni.f16.f16 %0, %1;" : "=h"(r.x) : "h"(h.x));
   return r;
}

static __declspec(__device__) __inline __half2 h2trunc(const __half2 h)
{
   __half2 val;
   asm("{.reg .f16 low,high;\n"
       "  mov.b32 {low,high}, %1;\n"
       "  cvt.rzi.f16.f16 low, low;\n"
       "  cvt.rzi.f16.f16 high, high;\n"
       "  mov.b32 %0, {low,high};}\n" : "=r"(val.x) : "r"(h.x));
   return val;
}
static __declspec(__device__) __inline __half2 h2ceil(const __half2 h)
{
   __half2 val;
   asm("{.reg .f16 low,high;\n"
       "  mov.b32 {low,high}, %1;\n"
       "  cvt.rpi.f16.f16 low, low;\n"
       "  cvt.rpi.f16.f16 high, high;\n"
       "  mov.b32 %0, {low,high};}\n" : "=r"(val.x) : "r"(h.x));
   return val;
}
static __declspec(__device__) __inline __half2 h2floor(const __half2 h)
{
   __half2 val;
   asm("{.reg .f16 low,high;\n"
       "  mov.b32 {low,high}, %1;\n"
       "  cvt.rmi.f16.f16 low, low;\n"
       "  cvt.rmi.f16.f16 high, high;\n"
       "  mov.b32 %0, {low,high};}\n" : "=r"(val.x) : "r"(h.x));
   return val;
}
static __declspec(__device__) __inline __half2 h2rint(const __half2 h)
{
   __half2 val;
   asm("{.reg .f16 low,high;\n"
       "  mov.b32 {low,high}, %1;\n"
       "  cvt.rni.f16.f16 low, low;\n"
       "  cvt.rni.f16.f16 high, high;\n"
       "  mov.b32 %0, {low,high};}\n" : "=r"(val.x) : "r"(h.x));
   return val;
}

static __declspec(__device__) __inline float2 __half22float2(const __half2 l)
{
   float hi_float;
   float lo_float;
   asm("{.reg .f16 low,high;\n"
       "  mov.b32 {low,high},%1;\n"
       "  cvt.f32.f16 %0, low;}\n" : "=f"(lo_float) : "r"(l.x));

   asm("{.reg .f16 low,high;\n"
       "  mov.b32 {low,high},%1;\n"
       "  cvt.f32.f16 %0, high;}\n" : "=f"(hi_float) : "r"(l.x));

   return make_float2(lo_float, hi_float);
}
static __declspec(__device__) __inline __half __float2half(const float f)
{
   __half val;
   asm volatile("{  cvt.rn.f16.f32 %0, %1;}\n" : "=h"(val.x) : "f"(f));
   return val;
}
static __declspec(__device__) __inline __half __float2half_rz(const float f)
{
   __half val;
   asm volatile("{  cvt.rz.f16.f32 %0, %1;}\n" : "=h"(val.x) : "f"(f));
   return val;
}
static __declspec(__device__) __inline __half __float2half_rd(const float f)
{
   __half val;
   asm volatile("{  cvt.rm.f16.f32 %0, %1;}\n" : "=h"(val.x) : "f"(f));
   return val;
}
static __declspec(__device__) __inline __half __float2half_ru(const float f)
{
   __half val;
   asm volatile("{  cvt.rp.f16.f32 %0, %1;}\n" : "=h"(val.x) : "f"(f));
   return val;
}
static __declspec(__device__) __inline float __half2float(const __half h)
{
   float val;
   asm volatile("{  cvt.f32.f16 %0, %1;}\n" : "=f"(val) : "h"(h.x));
   return val;
}
static __declspec(__device__) __inline __half2 __float2half2_rn(const float f)
{
   __half2 val;
   asm("{.reg .f16 low;\n"
       "  cvt.rn.f16.f32 low, %1;\n"
       "  mov.b32 %0, {low,low};}\n" : "=r"(val.x) : "f"(f));
   return val;
}
static __declspec(__device__) __inline __half2 __floats2half2_rn(const float f1, const float f2)
{
   __half2 val;
   asm("{.reg .f16 low,high;\n"
       "  cvt.rn.f16.f32 low, %1;\n"
       "  cvt.rn.f16.f32 high, %2;\n"
       "  mov.b32 %0, {low,high};}\n" : "=r"(val.x) : "f"(f1), "f"(f2));
   return val;
}
static __declspec(__device__) __inline __half2 __float22half2_rn(const float2 f)
{
   __half2 val = __floats2half2_rn(f.x,f.y);
   return val;
}
static __declspec(__device__) __inline float __low2float(const __half2 l)
{
   float val;
   asm("{.reg .f16 low,high;\n"
       "  mov.b32 {low,high},%1;\n"
       "  cvt.f32.f16 %0, low;}\n" : "=f"(val) : "r"(l.x));
   return val;
}
static __declspec(__device__) __inline float __high2float(const __half2 l)
{
   float val;
   asm("{.reg .f16 low,high;\n"
       "  mov.b32 {low,high},%1;\n"
       "  cvt.f32.f16 %0, high;}\n" : "=f"(val) : "r"(l.x));
   return val;
}
static __declspec(__device__) __inline __half2 __lows2half2(const __half2 l, const __half2 h)
{
   __half2 val;
   asm("{.reg .f16 alow,ahigh,blow,bhigh;\n"
       "  mov.b32 {alow,ahigh}, %1;\n"
       "  mov.b32 {blow,bhigh}, %2;\n"
       "  mov.b32 %0, {alow,blow};}\n" : "=r"(val.x) : "r"(l.x), "r"(h.x));
   return val;
}
static __declspec(__device__) __inline __half2 __highs2half2(const __half2 l, const __half2 h)
{
   __half2 val;
   asm("{.reg .f16 alow,ahigh,blow,bhigh;\n"
       "  mov.b32 {alow,ahigh}, %1;\n"
       "  mov.b32 {blow,bhigh}, %2;\n"
       "  mov.b32 %0, {ahigh,bhigh};}\n" : "=r"(val.x) : "r"(l.x), "r"(h.x));
   return val;
}
static __declspec(__device__) __inline __half __low2half(const __half2 h)
{
   __half ret;
   asm("{.reg .f16 low,high;\n"
       " mov.b32 {low,high}, %1;\n"
       " mov.b16 %0, low;}" : "=h"(ret.x) : "r"(h.x));
   return ret;
}
static __declspec(__device__) __inline int __hisinf(const __half a)
{
   if ( a.x == 0xFC00 )
      return -1;
   if ( a.x == 0x7C00 )
      return 1;
   return 0;
}
static __declspec(__device__) __inline __half2 __low2half2(const __half2 l)
{
   __half2 val;
   asm("{.reg .f16 low,high;\n"
       "  mov.b32 {low,high}, %1;\n"
       "  mov.b32 %0, {low,low};}\n" : "=r"(val.x) : "r"(l.x));
   return val;
}
static __declspec(__device__) __inline __half2 __high2half2(const __half2 l)
{
   __half2 val;
   asm("{.reg .f16 low,high;\n"
       "  mov.b32 {low,high}, %1;\n"
       "  mov.b32 %0, {high,high};}\n" : "=r"(val.x) : "r"(l.x));
   return val;
}
static __declspec(__device__) __inline __half __high2half(const __half2 h)
{
   __half ret;
   asm("{.reg .f16 low,high;\n"
       " mov.b32 {low,high}, %1;\n"
       " mov.b16 %0, high;}" : "=h"(ret.x) : "r"(h.x));
   return ret;
}
static __declspec(__device__) __inline __half2 __halves2half2(const __half l, const __half h)
{
   __half2 val;
   asm("{  mov.b32 %0, {%1,%2};}\n"
       : "=r"(val.x) : "h"(l.x), "h"(h.x));
   return val;
}
static __declspec(__device__) __inline __half2 __half2half2(const __half lh)
{
   __half2 val;
   asm("{  mov.b32 %0, {%1,%1};}\n"
       : "=r"(val.x) : "h"(lh.x));
   return val;
}
static __declspec(__device__) __inline __half2 __lowhigh2highlow(const __half2 lh)
{
   __half2 val;
   asm("{.reg .f16 low,high;\n"
       "  mov.b32 {low,high}, %1;\n"
       "  mov.b32 %0, {high,low};}\n" : "=r"(val.x) : "r"(lh.x));
   return val;
}
static __declspec(__device__) __inline short int __half_as_short(const __half h)
{
   return (short int)h.x;
}
static __declspec(__device__) __inline unsigned short int __half_as_ushort(const __half h)
{
   return h.x;
}
static __declspec(__device__) __inline __half __short_as_half(const short int i)
{
   __half h;
   h.x = (unsigned short int)i;
   return h;
}
static __declspec(__device__) __inline __half __ushort_as_half(const unsigned short int i)
{
   __half h;
   h.x = i;
   return h;
}











static __declspec(__device__) __inline __half2 __shfl(__half2 var, int delta, int width)
{
   int warpSize;
   asm("{mov.u32 %0, WARP_SZ;\n}" : "=r"(warpSize));
   int c = ((warpSize-width) << 8) | 0x1f;
   do { __half2 r; asm("{""shfl.idx.b32"" %0,%1,%2,%3;\n}" :"=r"(r.x): "r"(var.x), "r"(delta), "r"(c)); return r; } while(0);;
}
static __declspec(__device__) __inline __half2 __shfl_up(__half2 var, unsigned int delta, int width)
{
   int warpSize;
   asm("{mov.u32 %0, WARP_SZ;\n}" : "=r"(warpSize));
   int c = (warpSize-width) << 8;
   do { __half2 r; asm("{""shfl.up.b32"" %0,%1,%2,%3;\n}" :"=r"(r.x): "r"(var.x), "r"(delta), "r"(c)); return r; } while(0);;
}
static __declspec(__device__) __inline __half2 __shfl_down(__half2 var, unsigned int delta, int width)
{
   int warpSize;
   asm("{mov.u32 %0, WARP_SZ;\n}" : "=r"(warpSize));
   int c = ((warpSize-width) << 8) | 0x1f;
   do { __half2 r; asm("{""shfl.down.b32"" %0,%1,%2,%3;\n}" :"=r"(r.x): "r"(var.x), "r"(delta), "r"(c)); return r; } while(0);;
}
static __declspec(__device__) __inline __half2 __shfl_xor(__half2 var, int delta, int width)
{
   int warpSize;
   asm("{mov.u32 %0, WARP_SZ;\n}" : "=r"(warpSize));
   int c = ((warpSize-width) << 8) | 0x1f;
   do { __half2 r; asm("{""shfl.bfly.b32"" %0,%1,%2,%3;\n}" :"=r"(r.x): "r"(var.x), "r"(delta), "r"(c)); return r; } while(0);;
}

static __declspec(__device__) __inline __half __shfl(__half var, int delta, int width)
{
   __half2 temp1 = __halves2half2(var, var);
   __half2 temp2 = __shfl(temp1, delta, width);
   return __low2half(temp2);
}
static __declspec(__device__) __inline __half __shfl_up(__half var, unsigned int delta, int width)
{
   __half2 temp1 = __halves2half2(var, var);
   __half2 temp2 = __shfl_up(temp1, delta, width);
   return __low2half(temp2);
}
static __declspec(__device__) __inline __half __shfl_down(__half var, unsigned int delta, int width)
{
   __half2 temp1 = __halves2half2(var, var);
   __half2 temp2 = __shfl_down(temp1, delta, width);
   return __low2half(temp2);
}
static __declspec(__device__) __inline __half __shfl_xor(__half var, int delta, int width)
{
   __half2 temp1 = __halves2half2(var, var);
   __half2 temp2 = __shfl_xor(temp1, delta, width);
   return __low2half(temp2);
}
#line 2538 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"









#line 2548 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
static __declspec(__device__) __inline __half2 __ldg(const  __half2 *ptr)
{
   __half2 ret;
   asm volatile ("ld.global.nc.b32 %0, [%1];"  : "=r"(ret.x): "l" (ptr));
   return ret;
}
static __declspec(__device__) __inline __half __ldg(const __half *ptr)
{
   __half ret;
   asm volatile ("ld.global.nc.b16 %0, [%1];"  : "=h"(ret.x) : "l" (ptr));
   return ret;
}
static __declspec(__device__) __inline __half2 __ldcg(const  __half2 *ptr)
{
   __half2 ret;
   asm volatile ("ld.global.cg.b32 %0, [%1];"  : "=r"(ret.x): "l" (ptr));
   return ret;
}
static __declspec(__device__) __inline __half __ldcg(const __half *ptr)
{
   __half ret;
   asm volatile ("ld.global.cg.b16 %0, [%1];"  : "=h"(ret.x) : "l" (ptr));
   return ret;
}
static __declspec(__device__) __inline __half2 __ldca(const  __half2 *ptr)
{
   __half2 ret;
   asm volatile ("ld.global.ca.b32 %0, [%1];"  : "=r"(ret.x): "l" (ptr));
   return ret;
}
static __declspec(__device__) __inline __half __ldca(const __half *ptr)
{
   __half ret;
   asm volatile ("ld.global.ca.b16 %0, [%1];"  : "=h"(ret.x) : "l" (ptr));
   return ret;
}
static __declspec(__device__) __inline __half2 __ldcs(const  __half2 *ptr)
{
   __half2 ret;
   asm volatile ("ld.global.cs.b32 %0, [%1];"  : "=r"(ret.x): "l" (ptr));
   return ret;
}
static __declspec(__device__) __inline __half __ldcs(const __half *ptr)
{
   __half ret;
   asm volatile ("ld.global.cs.b16 %0, [%1];"  : "=h"(ret.x) : "l" (ptr));
   return ret;
}

#line 2598 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"




































































































































































































































































































































































































































































































































































































































































































































































































#line 3371 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"

#line 3373 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"
#line 3374 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_fp16.h"

#line 65 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"















































































#line 81 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
#line 66 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"


extern "C" {
#line 70 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"


typedef enum{
    CUSPARSE_STATUS_SUCCESS=0,
    CUSPARSE_STATUS_NOT_INITIALIZED=1,
    CUSPARSE_STATUS_ALLOC_FAILED=2,
    CUSPARSE_STATUS_INVALID_VALUE=3,
    CUSPARSE_STATUS_ARCH_MISMATCH=4,
    CUSPARSE_STATUS_MAPPING_ERROR=5,
    CUSPARSE_STATUS_EXECUTION_FAILED=6,
    CUSPARSE_STATUS_INTERNAL_ERROR=7,
    CUSPARSE_STATUS_MATRIX_TYPE_NOT_SUPPORTED=8,
    CUSPARSE_STATUS_ZERO_PIVOT=9
} cusparseStatus_t;


struct cusparseContext;
typedef struct cusparseContext *cusparseHandle_t;


struct cusparseMatDescr;
typedef struct cusparseMatDescr *cusparseMatDescr_t;


struct cusparseSolveAnalysisInfo;
typedef struct cusparseSolveAnalysisInfo *cusparseSolveAnalysisInfo_t;


struct csrsv2Info;
typedef struct csrsv2Info *csrsv2Info_t;

struct bsrsv2Info;
typedef struct bsrsv2Info *bsrsv2Info_t;

struct bsrsm2Info;
typedef struct bsrsm2Info *bsrsm2Info_t;


struct csric02Info;
typedef struct csric02Info *csric02Info_t;

struct bsric02Info;
typedef struct bsric02Info *bsric02Info_t;


struct csrilu02Info;
typedef struct csrilu02Info *csrilu02Info_t;

struct bsrilu02Info;
typedef struct bsrilu02Info *bsrilu02Info_t;


struct cusparseHybMat;
typedef struct cusparseHybMat *cusparseHybMat_t;


struct csrgemm2Info;
typedef struct csrgemm2Info *csrgemm2Info_t;


struct csru2csrInfo;
typedef struct csru2csrInfo *csru2csrInfo_t;


struct cusparseColorInfo;
typedef struct cusparseColorInfo *cusparseColorInfo_t;


typedef enum { 
    CUSPARSE_POINTER_MODE_HOST = 0,  
    CUSPARSE_POINTER_MODE_DEVICE = 1        
} cusparsePointerMode_t;

typedef enum { 
    CUSPARSE_ACTION_SYMBOLIC = 0,  
    CUSPARSE_ACTION_NUMERIC = 1        
} cusparseAction_t;

typedef enum {
    CUSPARSE_MATRIX_TYPE_GENERAL = 0, 
    CUSPARSE_MATRIX_TYPE_SYMMETRIC = 1,     
    CUSPARSE_MATRIX_TYPE_HERMITIAN = 2, 
    CUSPARSE_MATRIX_TYPE_TRIANGULAR = 3 
} cusparseMatrixType_t;

typedef enum {
    CUSPARSE_FILL_MODE_LOWER = 0, 
    CUSPARSE_FILL_MODE_UPPER = 1
} cusparseFillMode_t;

typedef enum {
    CUSPARSE_DIAG_TYPE_NON_UNIT = 0, 
    CUSPARSE_DIAG_TYPE_UNIT = 1
} cusparseDiagType_t; 

typedef enum {
    CUSPARSE_INDEX_BASE_ZERO = 0, 
    CUSPARSE_INDEX_BASE_ONE = 1
} cusparseIndexBase_t;

typedef enum {
    CUSPARSE_OPERATION_NON_TRANSPOSE = 0,  
    CUSPARSE_OPERATION_TRANSPOSE = 1,  
    CUSPARSE_OPERATION_CONJUGATE_TRANSPOSE = 2  
} cusparseOperation_t;

typedef enum {
    CUSPARSE_DIRECTION_ROW = 0,  
    CUSPARSE_DIRECTION_COLUMN = 1  
} cusparseDirection_t;

typedef enum {
    CUSPARSE_HYB_PARTITION_AUTO = 0,  
    CUSPARSE_HYB_PARTITION_USER = 1,  
    CUSPARSE_HYB_PARTITION_MAX = 2    
} cusparseHybPartition_t;


typedef enum {
    CUSPARSE_SOLVE_POLICY_NO_LEVEL = 0, 
    CUSPARSE_SOLVE_POLICY_USE_LEVEL = 1  
} cusparseSolvePolicy_t;

typedef enum {
    CUSPARSE_SIDE_LEFT =0,
    CUSPARSE_SIDE_RIGHT=1
} cusparseSideMode_t;

typedef enum {
    CUSPARSE_COLOR_ALG0 = 0, 
    CUSPARSE_COLOR_ALG1 = 1
} cusparseColorAlg_t;

typedef enum {
    CUSPARSE_ALG0 = 0, 
    CUSPARSE_ALG1 = 1  
} cusparseAlgMode_t;


cusparseStatus_t __stdcall cusparseCreate(cusparseHandle_t *handle);
cusparseStatus_t __stdcall cusparseDestroy(cusparseHandle_t handle);
cusparseStatus_t __stdcall cusparseGetVersion(cusparseHandle_t handle, int *version);
cusparseStatus_t __stdcall cusparseGetProperty(libraryPropertyType type, int *value);
cusparseStatus_t __stdcall cusparseSetStream(cusparseHandle_t handle, cudaStream_t streamId); 
cusparseStatus_t __stdcall cusparseGetStream(cusparseHandle_t handle, cudaStream_t *streamId);



cusparseStatus_t __stdcall cusparseGetPointerMode(cusparseHandle_t handle, cusparsePointerMode_t *mode);
cusparseStatus_t __stdcall cusparseSetPointerMode(cusparseHandle_t handle, cusparsePointerMode_t mode);






                                   
cusparseStatus_t __stdcall cusparseCreateMatDescr(cusparseMatDescr_t *descrA);
cusparseStatus_t __stdcall cusparseDestroyMatDescr (cusparseMatDescr_t descrA);

cusparseStatus_t __stdcall cusparseCopyMatDescr(cusparseMatDescr_t dest, const cusparseMatDescr_t src);

cusparseStatus_t __stdcall cusparseSetMatType(cusparseMatDescr_t descrA, cusparseMatrixType_t type);
cusparseMatrixType_t __stdcall cusparseGetMatType(const cusparseMatDescr_t descrA);

cusparseStatus_t __stdcall cusparseSetMatFillMode(cusparseMatDescr_t descrA, cusparseFillMode_t fillMode);
cusparseFillMode_t __stdcall cusparseGetMatFillMode(const cusparseMatDescr_t descrA);
 
cusparseStatus_t __stdcall cusparseSetMatDiagType(cusparseMatDescr_t  descrA, cusparseDiagType_t diagType);
cusparseDiagType_t __stdcall cusparseGetMatDiagType(const cusparseMatDescr_t descrA);

cusparseStatus_t __stdcall cusparseSetMatIndexBase(cusparseMatDescr_t descrA, cusparseIndexBase_t base);
cusparseIndexBase_t __stdcall cusparseGetMatIndexBase(const cusparseMatDescr_t descrA);


cusparseStatus_t __stdcall cusparseCreateSolveAnalysisInfo(cusparseSolveAnalysisInfo_t *info);
cusparseStatus_t __stdcall cusparseDestroySolveAnalysisInfo(cusparseSolveAnalysisInfo_t info);
cusparseStatus_t __stdcall cusparseGetLevelInfo(cusparseHandle_t handle, 
                                                  cusparseSolveAnalysisInfo_t info, 
                                                  int *nlevels, 
                                                  int **levelPtr, 
                                                  int **levelInd);


cusparseStatus_t __stdcall cusparseCreateCsrsv2Info(csrsv2Info_t *info);
cusparseStatus_t __stdcall cusparseDestroyCsrsv2Info(csrsv2Info_t info);


cusparseStatus_t __stdcall cusparseCreateCsric02Info(csric02Info_t *info);
cusparseStatus_t __stdcall cusparseDestroyCsric02Info(csric02Info_t info);

cusparseStatus_t __stdcall cusparseCreateBsric02Info(bsric02Info_t *info);
cusparseStatus_t __stdcall cusparseDestroyBsric02Info(bsric02Info_t info);


cusparseStatus_t __stdcall cusparseCreateCsrilu02Info(csrilu02Info_t *info);
cusparseStatus_t __stdcall cusparseDestroyCsrilu02Info(csrilu02Info_t info);

cusparseStatus_t __stdcall cusparseCreateBsrilu02Info(bsrilu02Info_t *info);
cusparseStatus_t __stdcall cusparseDestroyBsrilu02Info(bsrilu02Info_t info);


cusparseStatus_t __stdcall cusparseCreateBsrsv2Info(bsrsv2Info_t *info);
cusparseStatus_t __stdcall cusparseDestroyBsrsv2Info(bsrsv2Info_t info);

cusparseStatus_t __stdcall cusparseCreateBsrsm2Info(bsrsm2Info_t *info);
cusparseStatus_t __stdcall cusparseDestroyBsrsm2Info(bsrsm2Info_t info);


cusparseStatus_t __stdcall cusparseCreateHybMat(cusparseHybMat_t *hybA);
cusparseStatus_t __stdcall cusparseDestroyHybMat(cusparseHybMat_t hybA);


cusparseStatus_t __stdcall cusparseCreateCsru2csrInfo(csru2csrInfo_t *info);
cusparseStatus_t __stdcall cusparseDestroyCsru2csrInfo(csru2csrInfo_t info);


cusparseStatus_t __stdcall cusparseCreateColorInfo(cusparseColorInfo_t *info);
cusparseStatus_t __stdcall cusparseDestroyColorInfo(cusparseColorInfo_t info);

cusparseStatus_t __stdcall cusparseSetColorAlgs(cusparseColorInfo_t info, cusparseColorAlg_t alg);
cusparseStatus_t __stdcall cusparseGetColorAlgs(cusparseColorInfo_t info, cusparseColorAlg_t *alg);




 
cusparseStatus_t __stdcall cusparseSaxpyi(cusparseHandle_t handle, 
                                            int nnz, 
                                            const float *alpha, 
                                            const float *xVal, 
                                            const int *xInd, 
                                            float *y, 
                                            cusparseIndexBase_t idxBase);
    
cusparseStatus_t __stdcall cusparseDaxpyi(cusparseHandle_t handle, 
                                            int nnz, 
                                            const double *alpha, 
                                            const double *xVal, 
                                            const int *xInd, 
                                            double *y, 
                                            cusparseIndexBase_t idxBase);

cusparseStatus_t __stdcall cusparseCaxpyi(cusparseHandle_t handle, 
                                            int nnz, 
                                            const cuComplex *alpha, 
                                            const cuComplex *xVal, 
                                            const int *xInd, 
                                            cuComplex *y, 
                                            cusparseIndexBase_t idxBase);

cusparseStatus_t __stdcall cusparseZaxpyi(cusparseHandle_t handle, 
                                            int nnz, 
                                            const cuDoubleComplex *alpha, 
                                            const cuDoubleComplex *xVal, 
                                            const int *xInd, 
                                            cuDoubleComplex *y, 
                                            cusparseIndexBase_t idxBase);


cusparseStatus_t __stdcall cusparseSdoti(cusparseHandle_t handle,  
                                           int nnz, 
                                           const float *xVal, 
                                           const int *xInd, 
                                           const float *y,
                                           float *resultDevHostPtr,
                                           cusparseIndexBase_t idxBase);

cusparseStatus_t __stdcall cusparseDdoti(cusparseHandle_t handle, 
                                           int nnz, 
                                           const double *xVal, 
                                           const int *xInd, 
                                           const double *y, 
                                           double *resultDevHostPtr,
                                           cusparseIndexBase_t idxBase);

cusparseStatus_t __stdcall cusparseCdoti(cusparseHandle_t handle, 
                                           int nnz, 
                                           const cuComplex *xVal, 
                                           const int *xInd, 
                                           const cuComplex *y, 
                                           cuComplex *resultDevHostPtr,
                                           cusparseIndexBase_t idxBase);

cusparseStatus_t __stdcall cusparseZdoti(cusparseHandle_t handle, 
                                           int nnz, 
                                           const cuDoubleComplex *xVal, 
                                           const int *xInd, 
                                           const cuDoubleComplex *y, 
                                           cuDoubleComplex *resultDevHostPtr,
                                           cusparseIndexBase_t idxBase);



cusparseStatus_t __stdcall cusparseCdotci(cusparseHandle_t handle, 
                                            int nnz, 
                                            const cuComplex *xVal, 
                                            const int *xInd, 
                                            const cuComplex *y, 
                                            cuComplex *resultDevHostPtr,
                                            cusparseIndexBase_t idxBase);
    
cusparseStatus_t __stdcall cusparseZdotci(cusparseHandle_t handle, 
                                            int nnz, 
                                            const cuDoubleComplex *xVal, 
                                            const int *xInd, 
                                            const cuDoubleComplex *y, 
                                            cuDoubleComplex *resultDevHostPtr,
                                            cusparseIndexBase_t idxBase);




cusparseStatus_t __stdcall cusparseSgthr(cusparseHandle_t handle, 
                                           int nnz, 
                                           const float *y, 
                                           float *xVal, 
                                           const int *xInd, 
                                           cusparseIndexBase_t idxBase);
    
cusparseStatus_t __stdcall cusparseDgthr(cusparseHandle_t handle, 
                                           int nnz, 
                                           const double *y, 
                                           double *xVal, 
                                           const int *xInd, 
                                           cusparseIndexBase_t idxBase);

cusparseStatus_t __stdcall cusparseCgthr(cusparseHandle_t handle, 
                                           int nnz, 
                                           const cuComplex *y, 
                                           cuComplex *xVal, 
                                           const int *xInd, 
                                           cusparseIndexBase_t idxBase);

cusparseStatus_t __stdcall cusparseZgthr(cusparseHandle_t handle, 
                                           int nnz, 
                                           const cuDoubleComplex *y, 
                                           cuDoubleComplex *xVal, 
                                           const int *xInd, 
                                           cusparseIndexBase_t idxBase);



cusparseStatus_t __stdcall cusparseSgthrz(cusparseHandle_t handle, 
                                            int nnz, 
                                            float *y, 
                                            float *xVal, 
                                            const int *xInd, 
                                            cusparseIndexBase_t idxBase);
    
cusparseStatus_t __stdcall cusparseDgthrz(cusparseHandle_t handle, 
                                            int nnz, 
                                            double *y, 
                                            double *xVal, 
                                            const int *xInd, 
                                            cusparseIndexBase_t idxBase);

cusparseStatus_t __stdcall cusparseCgthrz(cusparseHandle_t handle, 
                                            int nnz, 
                                            cuComplex *y, 
                                            cuComplex *xVal, 
                                            const int *xInd, 
                                            cusparseIndexBase_t idxBase);

cusparseStatus_t __stdcall cusparseZgthrz(cusparseHandle_t handle, 
                                            int nnz, 
                                            cuDoubleComplex *y, 
                                            cuDoubleComplex *xVal, 
                                            const int *xInd, 
                                            cusparseIndexBase_t idxBase);



cusparseStatus_t __stdcall cusparseSsctr(cusparseHandle_t handle, 
                                           int nnz, 
                                           const float *xVal, 
                                           const int *xInd, 
                                           float *y, 
                                           cusparseIndexBase_t idxBase);
    
cusparseStatus_t __stdcall cusparseDsctr(cusparseHandle_t handle, 
                                           int nnz, 
                                           const double *xVal, 
                                           const int *xInd, 
                                           double *y, 
                                           cusparseIndexBase_t idxBase);

cusparseStatus_t __stdcall cusparseCsctr(cusparseHandle_t handle, 
                                           int nnz, 
                                           const cuComplex *xVal, 
                                           const int *xInd, 
                                           cuComplex *y, 
                                           cusparseIndexBase_t idxBase);

cusparseStatus_t __stdcall cusparseZsctr(cusparseHandle_t handle, 
                                           int nnz, 
                                           const cuDoubleComplex *xVal, 
                                           const int *xInd, 
                                           cuDoubleComplex *y, 
                                           cusparseIndexBase_t idxBase);



cusparseStatus_t __stdcall cusparseSroti(cusparseHandle_t handle, 
                                              int nnz, 
                                              float *xVal, 
                                              const int *xInd, 
                                              float *y, 
                                              const float *c, 
                                              const float *s, 
                                              cusparseIndexBase_t idxBase);

cusparseStatus_t __stdcall cusparseDroti(cusparseHandle_t handle, 
                                              int nnz, 
                                              double *xVal, 
                                              const int *xInd, 
                                              double *y, 
                                              const double *c, 
                                              const double *s, 
                                              cusparseIndexBase_t idxBase);




cusparseStatus_t  __stdcall cusparseSgemvi(cusparseHandle_t handle,
                                    cusparseOperation_t transA,
                                    int m,
                                    int n,
                                    const float *alpha, 
                                    const float *A,
                                    int lda,
                                    int nnz,
                                    const float *xVal,
                                    const int *xInd,
                                    const float *beta, 
                                    float *y,
                                    cusparseIndexBase_t   idxBase,
                                    void *pBuffer);

cusparseStatus_t __stdcall cusparseSgemvi_bufferSize( cusparseHandle_t handle,
    cusparseOperation_t transA,
    int m,
    int n,
    int nnz,
    int *pBufferSize);

cusparseStatus_t  __stdcall cusparseDgemvi(cusparseHandle_t handle,
                                    cusparseOperation_t transA,
                                    int m,
                                    int n,
                                    const double *alpha, 
                                    const double *A,
                                    int lda,
                                    int nnz,
                                    const double *xVal,
                                    const int *xInd,
                                    const double *beta, 
                                    double *y,
                                    cusparseIndexBase_t   idxBase,
                                    void *pBuffer);

cusparseStatus_t __stdcall cusparseDgemvi_bufferSize( cusparseHandle_t handle,
    cusparseOperation_t transA,
    int m,
    int n,
    int nnz,
    int *pBufferSize);

cusparseStatus_t  __stdcall cusparseCgemvi(cusparseHandle_t handle,
                                    cusparseOperation_t transA,
                                    int m,
                                    int n,
                                    const cuComplex *alpha, 
                                    const cuComplex *A,
                                    int lda,
                                    int nnz,
                                    const cuComplex *xVal,
                                    const int *xInd,
                                    const cuComplex *beta, 
                                    cuComplex *y,
                                    cusparseIndexBase_t   idxBase,
                                    void *pBuffer);

cusparseStatus_t __stdcall cusparseCgemvi_bufferSize( cusparseHandle_t handle,
    cusparseOperation_t transA,
    int m,
    int n,
    int nnz,
    int *pBufferSize);

cusparseStatus_t  __stdcall cusparseZgemvi(cusparseHandle_t handle,
                                    cusparseOperation_t transA,
                                    int m,
                                    int n,
                                    const cuDoubleComplex *alpha, 
                                    const cuDoubleComplex *A,
                                    int lda,
                                    int nnz,
                                    const cuDoubleComplex *xVal,
                                    const int *xInd,
                                    const cuDoubleComplex *beta, 
                                    cuDoubleComplex *y,
                                    cusparseIndexBase_t   idxBase,
                                    void *pBuffer);

cusparseStatus_t __stdcall cusparseZgemvi_bufferSize( cusparseHandle_t handle,
    cusparseOperation_t transA,
    int m,
    int n,
    int nnz,
    int *pBufferSize);



 
cusparseStatus_t __stdcall cusparseScsrmv(cusparseHandle_t handle,
                                            cusparseOperation_t transA, 
                                            int m, 
                                            int n, 
                                            int nnz,
                                            const float *alpha,
                                            const cusparseMatDescr_t descrA, 
                                            const float *csrSortedValA, 
                                            const int *csrSortedRowPtrA, 
                                            const int *csrSortedColIndA, 
                                            const float *x, 
                                            const float *beta, 
                                            float *y);
    
cusparseStatus_t __stdcall cusparseDcsrmv(cusparseHandle_t handle,
                                            cusparseOperation_t transA, 
                                            int m, 
                                            int n, 
                                            int nnz,
                                            const double *alpha,
                                            const cusparseMatDescr_t descrA, 
                                            const double *csrSortedValA, 
                                            const int *csrSortedRowPtrA, 
                                            const int *csrSortedColIndA, 
                                            const double *x, 
                                            const double *beta,  
                                            double *y);

cusparseStatus_t __stdcall cusparseCcsrmv(cusparseHandle_t handle,
                                            cusparseOperation_t transA, 
                                            int m, 
                                            int n,
                                            int nnz,
                                            const cuComplex *alpha,
                                            const cusparseMatDescr_t descrA, 
                                            const cuComplex *csrSortedValA, 
                                            const int *csrSortedRowPtrA, 
                                            const int *csrSortedColIndA, 
                                            const cuComplex *x, 
                                            const cuComplex *beta, 
                                            cuComplex *y);

cusparseStatus_t __stdcall cusparseZcsrmv(cusparseHandle_t handle,
                                            cusparseOperation_t transA, 
                                            int m, 
                                            int n, 
                                            int nnz,
                                            const cuDoubleComplex *alpha,
                                            const cusparseMatDescr_t descrA, 
                                            const cuDoubleComplex *csrSortedValA, 
                                            const int *csrSortedRowPtrA, 
                                            const int *csrSortedColIndA, 
                                            const cuDoubleComplex *x, 
                                            const cuDoubleComplex *beta, 
                                            cuDoubleComplex *y);  


cusparseStatus_t __stdcall cusparseCsrmvEx_bufferSize(cusparseHandle_t handle, 
                                                        cusparseAlgMode_t alg,
                                                        cusparseOperation_t transA, 
                                                        int m, 
                                                        int n, 
                                                        int nnz,
                                                        const void *alpha,
                                                        cudaDataType alphatype,
                                                        const cusparseMatDescr_t descrA,
                                                        const void *csrValA,
                                                        cudaDataType csrValAtype,
                                                        const int *csrRowPtrA,
                                                        const int *csrColIndA,
                                                        const void *x,
                                                        cudaDataType xtype,
                                                        const void *beta,
                                                        cudaDataType betatype,
                                                        void *y,
                                                        cudaDataType ytype,
                                                        cudaDataType executiontype,
                                                        size_t *bufferSizeInBytes);

cusparseStatus_t __stdcall cusparseCsrmvEx(cusparseHandle_t handle, 
                                             cusparseAlgMode_t alg,
                                             cusparseOperation_t transA, 
                                             int m, 
                                             int n, 
                                             int nnz,
                                             const void *alpha,
                                             cudaDataType alphatype,
                                             const cusparseMatDescr_t descrA,
                                             const void *csrValA,
                                             cudaDataType csrValAtype,
                                             const int *csrRowPtrA,
                                             const int *csrColIndA,
                                             const void *x,
                                             cudaDataType xtype,
                                             const void *beta,
                                             cudaDataType betatype,
                                             void *y,
                                             cudaDataType ytype,
                                             cudaDataType executiontype,
                                             void* buffer);



 
   cusparseStatus_t __stdcall cusparseScsrmv_mp(cusparseHandle_t handle,
                                            cusparseOperation_t transA, 
                                            int m, 
                                            int n, 
                                            int nnz,
                                            const float *alpha,
                                            const cusparseMatDescr_t descrA, 
                                            const float *csrSortedValA, 
                                            const int *csrSortedRowPtrA, 
                                            const int *csrSortedColIndA, 
                                            const float *x, 
                                            const float *beta, 
                                            float *y);
    
cusparseStatus_t __stdcall cusparseDcsrmv_mp(cusparseHandle_t handle,
                                            cusparseOperation_t transA, 
                                            int m, 
                                            int n, 
                                            int nnz,
                                            const double *alpha,
                                            const cusparseMatDescr_t descrA, 
                                            const double *csrSortedValA, 
                                            const int *csrSortedRowPtrA, 
                                            const int *csrSortedColIndA, 
                                            const double *x, 
                                            const double *beta,  
                                            double *y);

cusparseStatus_t __stdcall cusparseCcsrmv_mp(cusparseHandle_t handle,
                                            cusparseOperation_t transA, 
                                            int m, 
                                            int n,
                                            int nnz,
                                            const cuComplex *alpha,
                                            const cusparseMatDescr_t descrA, 
                                            const cuComplex *csrSortedValA, 
                                            const int *csrSortedRowPtrA, 
                                            const int *csrSortedColIndA, 
                                            const cuComplex *x, 
                                            const cuComplex *beta, 
                                            cuComplex *y);

cusparseStatus_t __stdcall cusparseZcsrmv_mp(cusparseHandle_t handle,
                                            cusparseOperation_t transA, 
                                            int m, 
                                            int n, 
                                            int nnz,
                                            const cuDoubleComplex *alpha,
                                            const cusparseMatDescr_t descrA, 
                                            const cuDoubleComplex *csrSortedValA, 
                                            const int *csrSortedRowPtrA, 
                                            const int *csrSortedColIndA, 
                                            const cuDoubleComplex *x, 
                                            const cuDoubleComplex *beta, 
                                            cuDoubleComplex *y);  



    
cusparseStatus_t __stdcall cusparseShybmv(cusparseHandle_t handle,
                                            cusparseOperation_t transA,
                                            const float *alpha,
                                            const cusparseMatDescr_t descrA,
                                            const cusparseHybMat_t hybA,
                                            const float *x,
                                            const float *beta,
                                            float *y);

cusparseStatus_t __stdcall cusparseDhybmv(cusparseHandle_t handle,
                                            cusparseOperation_t transA,
                                            const double *alpha,
                                            const cusparseMatDescr_t descrA,
                                            const cusparseHybMat_t hybA,
                                            const double *x,
                                            const double *beta,
                                            double *y);

cusparseStatus_t __stdcall cusparseChybmv(cusparseHandle_t handle,
                                            cusparseOperation_t transA,
                                            const cuComplex *alpha,
                                            const cusparseMatDescr_t descrA,
                                            const cusparseHybMat_t hybA,
                                            const cuComplex *x,
                                            const cuComplex *beta,
                                            cuComplex *y);

cusparseStatus_t __stdcall cusparseZhybmv(cusparseHandle_t handle,
                                            cusparseOperation_t transA,
                                            const cuDoubleComplex *alpha,
                                            const cusparseMatDescr_t descrA,
                                            const cusparseHybMat_t hybA,
                                            const cuDoubleComplex *x,
                                            const cuDoubleComplex *beta,
                                            cuDoubleComplex *y);
    


cusparseStatus_t __stdcall cusparseSbsrmv(cusparseHandle_t handle,
                                            cusparseDirection_t dirA,
                                            cusparseOperation_t transA,
                                            int mb,
                                            int nb,
                                            int nnzb,
                                            const float *alpha,
                                            const cusparseMatDescr_t descrA,
                                            const float *bsrSortedValA,
                                            const int *bsrSortedRowPtrA,
                                            const int *bsrSortedColIndA,
                                            int  blockDim,
                                            const float *x,
                                            const float *beta,
                                            float *y);

cusparseStatus_t __stdcall cusparseDbsrmv(cusparseHandle_t handle,
                                            cusparseDirection_t dirA,
                                            cusparseOperation_t transA,
                                            int mb,
                                            int nb,
                                            int nnzb,
                                            const double *alpha,
                                            const cusparseMatDescr_t descrA,
                                            const double *bsrSortedValA,
                                            const int *bsrSortedRowPtrA,
                                            const int *bsrSortedColIndA,
                                            int  blockDim,
                                            const double *x,
                                            const double *beta,
                                            double *y);

cusparseStatus_t __stdcall cusparseCbsrmv(cusparseHandle_t handle,
                                            cusparseDirection_t dirA,
                                            cusparseOperation_t transA,
                                            int mb,
                                            int nb,
                                            int nnzb,
                                            const cuComplex *alpha,
                                            const cusparseMatDescr_t descrA,
                                            const cuComplex *bsrSortedValA,
                                            const int *bsrSortedRowPtrA,
                                            const int *bsrSortedColIndA,
                                            int  blockDim,
                                            const cuComplex *x,
                                            const cuComplex *beta,
                                            cuComplex *y);

cusparseStatus_t __stdcall cusparseZbsrmv(cusparseHandle_t handle,
                                            cusparseDirection_t dirA,
                                            cusparseOperation_t transA,
                                            int mb,
                                            int nb,
                                            int nnzb,
                                            const cuDoubleComplex *alpha,
                                            const cusparseMatDescr_t descrA,
                                            const cuDoubleComplex *bsrSortedValA,
                                            const int *bsrSortedRowPtrA,
                                            const int *bsrSortedColIndA,
                                            int  blockDim,
                                            const cuDoubleComplex *x,
                                            const cuDoubleComplex *beta,
                                            cuDoubleComplex *y);




cusparseStatus_t __stdcall cusparseSbsrxmv(cusparseHandle_t handle,
                                             cusparseDirection_t dirA,
                                             cusparseOperation_t transA,
                                             int sizeOfMask,
                                             int mb,
                                             int nb,
                                             int nnzb,
                                             const float *alpha,
                                             const cusparseMatDescr_t descrA,
                                             const float *bsrSortedValA,
                                             const int *bsrSortedMaskPtrA,
                                             const int *bsrSortedRowPtrA,
                                             const int *bsrSortedEndPtrA,
                                             const int *bsrSortedColIndA,
                                             int  blockDim,
                                             const float *x,
                                             const float *beta,
                                             float *y);


cusparseStatus_t __stdcall cusparseDbsrxmv(cusparseHandle_t handle,
                                             cusparseDirection_t dirA,
                                             cusparseOperation_t transA,
                                             int sizeOfMask,
                                             int mb,
                                             int nb,
                                             int nnzb,
                                             const double *alpha,
                                             const cusparseMatDescr_t descrA,
                                             const double *bsrSortedValA,
                                             const int *bsrSortedMaskPtrA,
                                             const int *bsrSortedRowPtrA,
                                             const int *bsrSortedEndPtrA,
                                             const int *bsrSortedColIndA,
                                             int  blockDim,
                                             const double *x,
                                             const double *beta,
                                             double *y);
    
cusparseStatus_t __stdcall cusparseCbsrxmv(cusparseHandle_t handle,
                                             cusparseDirection_t dirA,
                                             cusparseOperation_t transA,
                                             int sizeOfMask,
                                             int mb,
                                             int nb,
                                             int nnzb,
                                             const cuComplex *alpha,
                                             const cusparseMatDescr_t descrA,
                                             const cuComplex *bsrSortedValA,
                                             const int *bsrSortedMaskPtrA,
                                             const int *bsrSortedRowPtrA,
                                             const int *bsrSortedEndPtrA,
                                             const int *bsrSortedColIndA,
                                             int  blockDim,
                                             const cuComplex *x,
                                             const cuComplex *beta,
                                             cuComplex *y);


cusparseStatus_t __stdcall cusparseZbsrxmv(cusparseHandle_t handle,
                                             cusparseDirection_t dirA,
                                             cusparseOperation_t transA,
                                             int sizeOfMask,
                                             int mb,
                                             int nb,
                                             int nnzb,
                                             const cuDoubleComplex *alpha,
                                             const cusparseMatDescr_t descrA,
                                             const cuDoubleComplex *bsrSortedValA,
                                             const int *bsrSortedMaskPtrA,
                                             const int *bsrSortedRowPtrA,
                                             const int *bsrSortedEndPtrA,
                                             const int *bsrSortedColIndA,
                                             int  blockDim,
                                             const cuDoubleComplex *x,
                                             const cuDoubleComplex *beta,
                                             cuDoubleComplex *y);



     
cusparseStatus_t __stdcall cusparseCsrsv_analysisEx(cusparseHandle_t handle, 
                                                     cusparseOperation_t transA, 
                                                     int m, 
                                                     int nnz,
                                                     const cusparseMatDescr_t descrA, 
                                                     const void *csrSortedValA,
                                                     cudaDataType csrSortedValAtype,
                                                     const int *csrSortedRowPtrA, 
                                                     const int *csrSortedColIndA, 
                                                     cusparseSolveAnalysisInfo_t info,
                                                     cudaDataType executiontype);

cusparseStatus_t __stdcall cusparseScsrsv_analysis(cusparseHandle_t handle, 
                                                     cusparseOperation_t transA, 
                                                     int m, 
                                                     int nnz,
                                                     const cusparseMatDescr_t descrA, 
                                                     const float *csrSortedValA, 
                                                     const int *csrSortedRowPtrA, 
                                                     const int *csrSortedColIndA, 
                                                     cusparseSolveAnalysisInfo_t info);

cusparseStatus_t __stdcall cusparseDcsrsv_analysis(cusparseHandle_t handle, 
                                                     cusparseOperation_t transA, 
                                                     int m, 
                                                     int nnz,
                                                     const cusparseMatDescr_t descrA, 
                                                     const double *csrSortedValA, 
                                                     const int *csrSortedRowPtrA, 
                                                     const int *csrSortedColIndA, 
                                                     cusparseSolveAnalysisInfo_t info);

cusparseStatus_t __stdcall cusparseCcsrsv_analysis(cusparseHandle_t handle, 
                                                     cusparseOperation_t transA, 
                                                     int m, 
                                                     int nnz,
                                                     const cusparseMatDescr_t descrA, 
                                                     const cuComplex *csrSortedValA, 
                                                     const int *csrSortedRowPtrA, 
                                                     const int *csrSortedColIndA, 
                                                     cusparseSolveAnalysisInfo_t info);

cusparseStatus_t __stdcall cusparseZcsrsv_analysis(cusparseHandle_t handle, 
                                                     cusparseOperation_t transA, 
                                                     int m, 
                                                     int nnz,
                                                     const cusparseMatDescr_t descrA, 
                                                     const cuDoubleComplex *csrSortedValA, 
                                                     const int *csrSortedRowPtrA, 
                                                     const int *csrSortedColIndA, 
                                                     cusparseSolveAnalysisInfo_t info); 

cusparseStatus_t __stdcall cusparseCsrsv_solveEx(cusparseHandle_t handle, 
                                                   cusparseOperation_t transA, 
                                                   int m,
                                                   const void *alpha, 
                                                   cudaDataType alphatype,
                                                   const cusparseMatDescr_t descrA, 
                                                   const void *csrSortedValA, 
                                                   cudaDataType csrSortedValAtype,
                                                   const int *csrSortedRowPtrA, 
                                                   const int *csrSortedColIndA, 
                                                   cusparseSolveAnalysisInfo_t info, 
                                                   const void *f, 
                                                   cudaDataType ftype,
                                                   void *x,
                                                   cudaDataType xtype,
                                                   cudaDataType executiontype);
  
cusparseStatus_t __stdcall cusparseScsrsv_solve(cusparseHandle_t handle, 
                                                  cusparseOperation_t transA, 
                                                  int m,
                                                  const float *alpha, 
                                                  const cusparseMatDescr_t descrA, 
                                                  const float *csrSortedValA, 
                                                  const int *csrSortedRowPtrA, 
                                                  const int *csrSortedColIndA, 
                                                  cusparseSolveAnalysisInfo_t info, 
                                                  const float *f, 
                                                  float *x);

cusparseStatus_t __stdcall cusparseDcsrsv_solve(cusparseHandle_t handle, 
                                                  cusparseOperation_t transA, 
                                                  int m, 
                                                  const double *alpha, 
                                                  const cusparseMatDescr_t descrA, 
                                                  const double *csrSortedValA, 
                                                  const int *csrSortedRowPtrA, 
                                                  const int *csrSortedColIndA, 
                                                  cusparseSolveAnalysisInfo_t info, 
                                                  const double *f, 
                                                  double *x);

cusparseStatus_t __stdcall cusparseCcsrsv_solve(cusparseHandle_t handle, 
                                                  cusparseOperation_t transA, 
                                                  int m, 
                                                  const cuComplex *alpha, 
                                                  const cusparseMatDescr_t descrA, 
                                                  const cuComplex *csrSortedValA, 
                                                  const int *csrSortedRowPtrA, 
                                                  const int *csrSortedColIndA, 
                                                  cusparseSolveAnalysisInfo_t info, 
                                                  const cuComplex *f, 
                                                  cuComplex *x);

cusparseStatus_t __stdcall cusparseZcsrsv_solve(cusparseHandle_t handle, 
                                                  cusparseOperation_t transA, 
                                                  int m, 
                                                  const cuDoubleComplex *alpha, 
                                                  const cusparseMatDescr_t descrA, 
                                                  const cuDoubleComplex *csrSortedValA, 
                                                  const int *csrSortedRowPtrA, 
                                                  const int *csrSortedColIndA, 
                                                  cusparseSolveAnalysisInfo_t info, 
                                                  const cuDoubleComplex *f, 
                                                  cuDoubleComplex *x);      





cusparseStatus_t __stdcall cusparseXcsrsv2_zeroPivot(cusparseHandle_t handle,
                                                       csrsv2Info_t info,
                                                       int *position);

cusparseStatus_t __stdcall cusparseScsrsv2_bufferSize(cusparseHandle_t handle,
                                                        cusparseOperation_t transA,
                                                        int m,
                                                        int nnz,
                                                        const cusparseMatDescr_t descrA,
                                                        float *csrSortedValA,
                                                        const int *csrSortedRowPtrA,
                                                        const int *csrSortedColIndA,
                                                        csrsv2Info_t info,
                                                        int *pBufferSizeInBytes);

cusparseStatus_t __stdcall cusparseDcsrsv2_bufferSize(cusparseHandle_t handle,
                                                        cusparseOperation_t transA,
                                                        int m,
                                                        int nnz,
                                                        const cusparseMatDescr_t descrA,
                                                        double *csrSortedValA,
                                                        const int *csrSortedRowPtrA,
                                                        const int *csrSortedColIndA,
                                                        csrsv2Info_t info,
                                                        int *pBufferSizeInBytes);

cusparseStatus_t __stdcall cusparseCcsrsv2_bufferSize(cusparseHandle_t handle,
                                                        cusparseOperation_t transA,
                                                        int m,
                                                        int nnz,
                                                        const cusparseMatDescr_t descrA,
                                                        cuComplex *csrSortedValA,
                                                        const int *csrSortedRowPtrA,
                                                        const int *csrSortedColIndA,
                                                        csrsv2Info_t info,
                                                        int *pBufferSizeInBytes);

cusparseStatus_t __stdcall cusparseZcsrsv2_bufferSize(cusparseHandle_t handle,
                                                        cusparseOperation_t transA,
                                                        int m,
                                                        int nnz,
                                                        const cusparseMatDescr_t descrA,
                                                        cuDoubleComplex *csrSortedValA,
                                                        const int *csrSortedRowPtrA,
                                                        const int *csrSortedColIndA,
                                                        csrsv2Info_t info,
                                                        int *pBufferSizeInBytes);

cusparseStatus_t __stdcall cusparseScsrsv2_bufferSizeExt(cusparseHandle_t handle,
                                                        cusparseOperation_t transA,
                                                        int m,
                                                        int nnz,
                                                        const cusparseMatDescr_t descrA,
                                                        float *csrSortedValA,
                                                        const int *csrSortedRowPtrA,
                                                        const int *csrSortedColIndA,
                                                        csrsv2Info_t info,
                                                        size_t *pBufferSize);

cusparseStatus_t __stdcall cusparseDcsrsv2_bufferSizeExt(cusparseHandle_t handle,
                                                        cusparseOperation_t transA,
                                                        int m,
                                                        int nnz,
                                                        const cusparseMatDescr_t descrA,
                                                        double *csrSortedValA,
                                                        const int *csrSortedRowPtrA,
                                                        const int *csrSortedColIndA,
                                                        csrsv2Info_t info,
                                                        size_t *pBufferSize);

cusparseStatus_t __stdcall cusparseCcsrsv2_bufferSizeExt(cusparseHandle_t handle,
                                                        cusparseOperation_t transA,
                                                        int m,
                                                        int nnz,
                                                        const cusparseMatDescr_t descrA,
                                                        cuComplex *csrSortedValA,
                                                        const int *csrSortedRowPtrA,
                                                        const int *csrSortedColIndA,
                                                        csrsv2Info_t info,
                                                        size_t *pBufferSize);

cusparseStatus_t __stdcall cusparseZcsrsv2_bufferSizeExt(cusparseHandle_t handle,
                                                        cusparseOperation_t transA,
                                                        int m,
                                                        int nnz,
                                                        const cusparseMatDescr_t descrA,
                                                        cuDoubleComplex *csrSortedValA,
                                                        const int *csrSortedRowPtrA,
                                                        const int *csrSortedColIndA,
                                                        csrsv2Info_t info,
                                                        size_t *pBufferSize);


cusparseStatus_t __stdcall cusparseScsrsv2_analysis(cusparseHandle_t handle,
                                                      cusparseOperation_t transA,
                                                      int m,
                                                      int nnz,
                                                      const cusparseMatDescr_t descrA,
                                                      const float *csrSortedValA,
                                                      const int *csrSortedRowPtrA,
                                                      const int *csrSortedColIndA,
                                                      csrsv2Info_t info,
                                                      cusparseSolvePolicy_t policy,
                                                      void *pBuffer);

cusparseStatus_t __stdcall cusparseDcsrsv2_analysis(cusparseHandle_t handle,
                                                      cusparseOperation_t transA,
                                                      int m,
                                                      int nnz,
                                                      const cusparseMatDescr_t descrA,
                                                      const double *csrSortedValA,
                                                      const int *csrSortedRowPtrA,
                                                      const int *csrSortedColIndA,
                                                      csrsv2Info_t info,
                                                      cusparseSolvePolicy_t policy,
                                                      void *pBuffer);

cusparseStatus_t __stdcall cusparseCcsrsv2_analysis(cusparseHandle_t handle,
                                                      cusparseOperation_t transA,
                                                      int m,
                                                      int nnz,
                                                      const cusparseMatDescr_t descrA,
                                                      const cuComplex *csrSortedValA,
                                                      const int *csrSortedRowPtrA,
                                                      const int *csrSortedColIndA,
                                                      csrsv2Info_t info,
                                                      cusparseSolvePolicy_t policy,
                                                      void *pBuffer);

cusparseStatus_t __stdcall cusparseZcsrsv2_analysis(cusparseHandle_t handle,
                                                      cusparseOperation_t transA,
                                                      int m,
                                                      int nnz,
                                                      const cusparseMatDescr_t descrA,
                                                      const cuDoubleComplex *csrSortedValA,
                                                      const int *csrSortedRowPtrA,
                                                      const int *csrSortedColIndA,
                                                      csrsv2Info_t info,
                                                      cusparseSolvePolicy_t policy,
                                                      void *pBuffer);

cusparseStatus_t __stdcall cusparseScsrsv2_solve(cusparseHandle_t handle,
                                                   cusparseOperation_t transA,
                                                   int m,
                                                   int nnz,
                                                   const float *alpha,
                                                   const cusparseMatDescr_t descrA,
                                                   const float *csrSortedValA,
                                                   const int *csrSortedRowPtrA,
                                                   const int *csrSortedColIndA,
                                                   csrsv2Info_t info,
                                                   const float *f,
                                                   float *x,
                                                   cusparseSolvePolicy_t policy,
                                                   void *pBuffer);

cusparseStatus_t __stdcall cusparseDcsrsv2_solve(cusparseHandle_t handle,
                                                   cusparseOperation_t transA,
                                                   int m,
                                                   int nnz,
                                                   const double *alpha,
                                                   const cusparseMatDescr_t descrA,
                                                   const double *csrSortedValA,
                                                   const int *csrSortedRowPtrA,
                                                   const int *csrSortedColIndA,
                                                   csrsv2Info_t info,
                                                   const double *f,
                                                   double *x,
                                                   cusparseSolvePolicy_t policy,
                                                   void *pBuffer);

cusparseStatus_t __stdcall cusparseCcsrsv2_solve(cusparseHandle_t handle,
                                                   cusparseOperation_t transA,
                                                   int m,
                                                   int nnz,
                                                   const cuComplex *alpha,
                                                   const cusparseMatDescr_t descrA,
                                                   const cuComplex *csrSortedValA,
                                                   const int *csrSortedRowPtrA,
                                                   const int *csrSortedColIndA,
                                                   csrsv2Info_t info,
                                                   const cuComplex *f,
                                                   cuComplex *x,
                                                   cusparseSolvePolicy_t policy,
                                                   void *pBuffer);

cusparseStatus_t __stdcall cusparseZcsrsv2_solve(cusparseHandle_t handle,
                                                   cusparseOperation_t transA,
                                                   int m,
                                                   int nnz,
                                                   const cuDoubleComplex *alpha,
                                                   const cusparseMatDescr_t descrA,
                                                   const cuDoubleComplex *csrSortedValA,
                                                   const int *csrSortedRowPtrA,
                                                   const int *csrSortedColIndA,
                                                   csrsv2Info_t info,
                                                   const cuDoubleComplex *f,
                                                   cuDoubleComplex *x,
                                                   cusparseSolvePolicy_t policy,
                                                   void *pBuffer);





cusparseStatus_t __stdcall cusparseXbsrsv2_zeroPivot(cusparseHandle_t handle,
                                                       bsrsv2Info_t info,
                                                       int *position);


cusparseStatus_t __stdcall cusparseSbsrsv2_bufferSize(cusparseHandle_t handle,
                                                        cusparseDirection_t dirA,
                                                        cusparseOperation_t transA,
                                                        int mb,
                                                        int nnzb,
                                                        const cusparseMatDescr_t descrA,
                                                        float *bsrSortedValA,
                                                        const int *bsrSortedRowPtrA,
                                                        const int *bsrSortedColIndA,
                                                        int blockDim,
                                                        bsrsv2Info_t info,
                                                        int *pBufferSizeInBytes);

cusparseStatus_t __stdcall cusparseDbsrsv2_bufferSize(cusparseHandle_t handle,
                                                        cusparseDirection_t dirA,
                                                        cusparseOperation_t transA,
                                                        int mb,
                                                        int nnzb,
                                                        const cusparseMatDescr_t descrA,
                                                        double *bsrSortedValA,
                                                        const int *bsrSortedRowPtrA,
                                                        const int *bsrSortedColIndA,
                                                        int blockDim,
                                                        bsrsv2Info_t info,
                                                        int *pBufferSizeInBytes);

cusparseStatus_t __stdcall cusparseCbsrsv2_bufferSize(cusparseHandle_t handle,
                                                        cusparseDirection_t dirA,
                                                        cusparseOperation_t transA,
                                                        int mb,
                                                        int nnzb,
                                                        const cusparseMatDescr_t descrA,
                                                        cuComplex *bsrSortedValA,
                                                        const int *bsrSortedRowPtrA,
                                                        const int *bsrSortedColIndA,
                                                        int blockDim,
                                                        bsrsv2Info_t info,
                                                        int *pBufferSizeInBytes);

cusparseStatus_t __stdcall cusparseZbsrsv2_bufferSize(cusparseHandle_t handle,
                                                        cusparseDirection_t dirA,
                                                        cusparseOperation_t transA,
                                                        int mb,
                                                        int nnzb,
                                                        const cusparseMatDescr_t descrA,
                                                        cuDoubleComplex *bsrSortedValA,
                                                        const int *bsrSortedRowPtrA,
                                                        const int *bsrSortedColIndA,
                                                        int blockDim,
                                                        bsrsv2Info_t info,
                                                        int *pBufferSizeInBytes);

cusparseStatus_t __stdcall cusparseSbsrsv2_bufferSizeExt(cusparseHandle_t handle,
                                                        cusparseDirection_t dirA,
                                                        cusparseOperation_t transA,
                                                        int mb,
                                                        int nnzb,
                                                        const cusparseMatDescr_t descrA,
                                                        float *bsrSortedValA,
                                                        const int *bsrSortedRowPtrA,
                                                        const int *bsrSortedColIndA,
                                                        int blockSize,
                                                        bsrsv2Info_t info,
                                                        size_t *pBufferSize);

cusparseStatus_t __stdcall cusparseDbsrsv2_bufferSizeExt(cusparseHandle_t handle,
                                                        cusparseDirection_t dirA,
                                                        cusparseOperation_t transA,
                                                        int mb,
                                                        int nnzb,
                                                        const cusparseMatDescr_t descrA,
                                                        double *bsrSortedValA,
                                                        const int *bsrSortedRowPtrA,
                                                        const int *bsrSortedColIndA,
                                                        int blockSize,
                                                        bsrsv2Info_t info,
                                                        size_t *pBufferSize);

cusparseStatus_t __stdcall cusparseCbsrsv2_bufferSizeExt(cusparseHandle_t handle,
                                                        cusparseDirection_t dirA,
                                                        cusparseOperation_t transA,
                                                        int mb,
                                                        int nnzb,
                                                        const cusparseMatDescr_t descrA,
                                                        cuComplex *bsrSortedValA,
                                                        const int *bsrSortedRowPtrA,
                                                        const int *bsrSortedColIndA,
                                                        int blockSize,
                                                        bsrsv2Info_t info,
                                                        size_t *pBufferSize);

cusparseStatus_t __stdcall cusparseZbsrsv2_bufferSizeExt(cusparseHandle_t handle,
                                                        cusparseDirection_t dirA,
                                                        cusparseOperation_t transA,
                                                        int mb,
                                                        int nnzb,
                                                        const cusparseMatDescr_t descrA,
                                                        cuDoubleComplex *bsrSortedValA,
                                                        const int *bsrSortedRowPtrA,
                                                        const int *bsrSortedColIndA,
                                                        int blockSize,
                                                        bsrsv2Info_t info,
                                                        size_t *pBufferSize);


cusparseStatus_t __stdcall cusparseSbsrsv2_analysis(cusparseHandle_t handle,
                                                      cusparseDirection_t dirA,
                                                      cusparseOperation_t transA,
                                                      int mb,
                                                      int nnzb,
                                                      const cusparseMatDescr_t descrA,
                                                      const float *bsrSortedValA,
                                                      const int *bsrSortedRowPtrA,
                                                      const int *bsrSortedColIndA,
                                                      int blockDim,
                                                      bsrsv2Info_t info,
                                                      cusparseSolvePolicy_t policy,
                                                      void *pBuffer);

cusparseStatus_t __stdcall cusparseDbsrsv2_analysis(cusparseHandle_t handle,
                                                      cusparseDirection_t dirA,
                                                      cusparseOperation_t transA,
                                                      int mb,
                                                      int nnzb,
                                                      const cusparseMatDescr_t descrA,
                                                      const double *bsrSortedValA,
                                                      const int *bsrSortedRowPtrA,
                                                      const int *bsrSortedColIndA,
                                                      int blockDim,
                                                      bsrsv2Info_t info,
                                                      cusparseSolvePolicy_t policy,
                                                      void *pBuffer);

cusparseStatus_t __stdcall cusparseCbsrsv2_analysis(cusparseHandle_t handle,
                                                      cusparseDirection_t dirA,
                                                      cusparseOperation_t transA,
                                                      int mb,
                                                      int nnzb,
                                                      const cusparseMatDescr_t descrA,
                                                      const cuComplex *bsrSortedValA,
                                                      const int *bsrSortedRowPtrA,
                                                      const int *bsrSortedColIndA,
                                                      int blockDim,
                                                      bsrsv2Info_t info,
                                                      cusparseSolvePolicy_t policy,
                                                      void *pBuffer);

cusparseStatus_t __stdcall cusparseZbsrsv2_analysis(cusparseHandle_t handle,
                                                      cusparseDirection_t dirA,
                                                      cusparseOperation_t transA,
                                                      int mb,
                                                      int nnzb,
                                                      const cusparseMatDescr_t descrA,
                                                      const cuDoubleComplex *bsrSortedValA,
                                                      const int *bsrSortedRowPtrA,
                                                      const int *bsrSortedColIndA,
                                                      int blockDim,
                                                      bsrsv2Info_t info,
                                                      cusparseSolvePolicy_t policy,
                                                      void *pBuffer);


cusparseStatus_t __stdcall cusparseSbsrsv2_solve(cusparseHandle_t handle,
                                                   cusparseDirection_t dirA,
                                                   cusparseOperation_t transA,
                                                   int mb,
                                                   int nnzb,
                                                   const float *alpha,
                                                   const cusparseMatDescr_t descrA,
                                                   const float *bsrSortedValA,
                                                   const int *bsrSortedRowPtrA,
                                                   const int *bsrSortedColIndA,
                                                   int blockDim,
                                                   bsrsv2Info_t info,
                                                   const float *f,
                                                   float *x,
                                                   cusparseSolvePolicy_t policy,
                                                   void *pBuffer);


cusparseStatus_t __stdcall cusparseDbsrsv2_solve(cusparseHandle_t handle,
                                                   cusparseDirection_t dirA,
                                                   cusparseOperation_t transA,
                                                   int mb,
                                                   int nnzb,
                                                   const double *alpha,
                                                   const cusparseMatDescr_t descrA,
                                                   const double *bsrSortedValA,
                                                   const int *bsrSortedRowPtrA,
                                                   const int *bsrSortedColIndA,
                                                   int blockDim,
                                                   bsrsv2Info_t info,
                                                   const double *f,
                                                   double *x, 
                                                   cusparseSolvePolicy_t policy,
                                                   void *pBuffer);


cusparseStatus_t __stdcall cusparseCbsrsv2_solve(cusparseHandle_t handle,
                                                   cusparseDirection_t dirA,
                                                   cusparseOperation_t transA,
                                                   int mb,
                                                   int nnzb,
                                                   const cuComplex *alpha,
                                                   const cusparseMatDescr_t descrA,
                                                   const cuComplex *bsrSortedValA,
                                                   const int *bsrSortedRowPtrA,
                                                   const int *bsrSortedColIndA,
                                                   int blockDim,
                                                   bsrsv2Info_t info,
                                                   const cuComplex *f,
                                                   cuComplex *x,
                                                   cusparseSolvePolicy_t policy,
                                                   void *pBuffer);


cusparseStatus_t __stdcall cusparseZbsrsv2_solve(cusparseHandle_t handle,
                                                   cusparseDirection_t dirA,
                                                   cusparseOperation_t transA,
                                                   int mb,
                                                   int nnzb,
                                                   const cuDoubleComplex *alpha,
                                                   const cusparseMatDescr_t descrA,
                                                   const cuDoubleComplex *bsrSortedValA,
                                                   const int *bsrSortedRowPtrA,
                                                   const int *bsrSortedColIndA,
                                                   int blockDim,
                                                   bsrsv2Info_t info,
                                                   const cuDoubleComplex *f,
                                                   cuDoubleComplex *x,
                                                   cusparseSolvePolicy_t policy,
                                                   void *pBuffer);




cusparseStatus_t __stdcall cusparseShybsv_analysis(cusparseHandle_t handle, 
                                                     cusparseOperation_t transA, 
                                                     const cusparseMatDescr_t descrA, 
                                                     cusparseHybMat_t hybA,
                                                     cusparseSolveAnalysisInfo_t info);

cusparseStatus_t __stdcall cusparseDhybsv_analysis(cusparseHandle_t handle, 
                                                     cusparseOperation_t transA, 
                                                     const cusparseMatDescr_t descrA, 
                                                     cusparseHybMat_t hybA,
                                                     cusparseSolveAnalysisInfo_t info);
    
cusparseStatus_t __stdcall cusparseChybsv_analysis(cusparseHandle_t handle, 
                                                     cusparseOperation_t transA, 
                                                     const cusparseMatDescr_t descrA, 
                                                     cusparseHybMat_t hybA,
                                                     cusparseSolveAnalysisInfo_t info);

cusparseStatus_t __stdcall cusparseZhybsv_analysis(cusparseHandle_t handle, 
                                                     cusparseOperation_t transA, 
                                                     const cusparseMatDescr_t descrA, 
                                                     cusparseHybMat_t hybA,
                                                     cusparseSolveAnalysisInfo_t info);

cusparseStatus_t __stdcall cusparseShybsv_solve(cusparseHandle_t handle, 
                                                  cusparseOperation_t trans, 
                                                  const float *alpha, 
                                                  const cusparseMatDescr_t descra,
                                                  const cusparseHybMat_t hybA,
                                                  cusparseSolveAnalysisInfo_t info,
                                                  const float *f,
                                                  float *x);

cusparseStatus_t __stdcall cusparseChybsv_solve(cusparseHandle_t handle, 
                                                  cusparseOperation_t trans,
                                                  const cuComplex *alpha, 
                                                  const cusparseMatDescr_t descra,
                                                  const cusparseHybMat_t hybA,
                                                  cusparseSolveAnalysisInfo_t info,
                                                  const cuComplex *f,
                                                  cuComplex *x);

cusparseStatus_t __stdcall cusparseDhybsv_solve(cusparseHandle_t handle,
                                                  cusparseOperation_t trans,
                                                  const double *alpha, 
                                                  const cusparseMatDescr_t descra,
                                                  const cusparseHybMat_t hybA, 
                                                  cusparseSolveAnalysisInfo_t info,
                                                  const double *f,
                                                  double *x);

cusparseStatus_t __stdcall cusparseZhybsv_solve(cusparseHandle_t handle, 
                                                  cusparseOperation_t trans,
                                                  const cuDoubleComplex *alpha, 
                                                  const cusparseMatDescr_t descra,
                                                  const cusparseHybMat_t hybA,
                                                  cusparseSolveAnalysisInfo_t info,
                                                  const cuDoubleComplex *f,
                                                  cuDoubleComplex *x);


           
 

                 
cusparseStatus_t __stdcall cusparseScsrmm(cusparseHandle_t handle,
                                            cusparseOperation_t transA, 
                                            int m, 
                                            int n, 
                                            int k,  
                                            int nnz,
                                            const float *alpha,
                                            const cusparseMatDescr_t descrA, 
                                            const float  *csrSortedValA, 
                                            const int *csrSortedRowPtrA, 
                                            const int *csrSortedColIndA, 
                                            const float *B, 
                                            int ldb, 
                                            const float *beta, 
                                            float *C, 
                                            int ldc);
                     
cusparseStatus_t __stdcall cusparseDcsrmm(cusparseHandle_t handle,
                                            cusparseOperation_t transA, 
                                            int m, 
                                            int n, 
                                            int k,  
                                            int nnz,
                                            const double *alpha,
                                            const cusparseMatDescr_t descrA, 
                                            const double *csrSortedValA, 
                                            const int *csrSortedRowPtrA, 
                                            const int *csrSortedColIndA, 
                                            const double *B, 
                                            int ldb, 
                                            const double *beta, 
                                            double *C, 
                                            int ldc);
                     
cusparseStatus_t __stdcall cusparseCcsrmm(cusparseHandle_t handle,
                                            cusparseOperation_t transA, 
                                            int m, 
                                            int n, 
                                            int k,  
                                            int nnz,
                                            const cuComplex *alpha,
                                            const cusparseMatDescr_t descrA, 
                                            const cuComplex  *csrSortedValA, 
                                            const int *csrSortedRowPtrA, 
                                            const int *csrSortedColIndA, 
                                            const cuComplex *B, 
                                            int ldb, 
                                            const cuComplex *beta, 
                                            cuComplex *C, 
                                            int ldc);
                     
cusparseStatus_t __stdcall cusparseZcsrmm(cusparseHandle_t handle,
                                            cusparseOperation_t transA, 
                                            int m, 
                                            int n, 
                                            int k,  
                                            int nnz,
                                            const cuDoubleComplex *alpha,
                                            const cusparseMatDescr_t descrA, 
                                            const cuDoubleComplex  *csrSortedValA, 
                                            const int *csrSortedRowPtrA, 
                                            const int *csrSortedColIndA, 
                                            const cuDoubleComplex *B, 
                                            int ldb, 
                                            const cuDoubleComplex *beta, 
                                            cuDoubleComplex *C, 
                                            int ldc);    



     
cusparseStatus_t __stdcall cusparseScsrmm2(cusparseHandle_t handle,
                                             cusparseOperation_t transA,
                                             cusparseOperation_t transB,
                                             int m,
                                             int n,
                                             int k,
                                             int nnz,
                                             const float *alpha,
                                             const cusparseMatDescr_t descrA,
                                             const float *csrSortedValA,
                                             const int *csrSortedRowPtrA,
                                             const int *csrSortedColIndA,
                                             const float *B,
                                             int ldb,
                                             const float *beta,
                                             float *C,
                                             int ldc);

cusparseStatus_t __stdcall cusparseDcsrmm2(cusparseHandle_t handle,
                                             cusparseOperation_t transA,
                                             cusparseOperation_t transB,
                                             int m,
                                             int n,
                                             int k,
                                             int nnz,
                                             const double *alpha,
                                             const cusparseMatDescr_t descrA,
                                             const double *csrSortedValA,
                                             const int *csrSortedRowPtrA,
                                             const int *csrSortedColIndA,
                                             const double *B,
                                             int ldb,
                                             const double *beta,
                                             double *C,
                                             int ldc);

cusparseStatus_t __stdcall cusparseCcsrmm2(cusparseHandle_t handle,
                                             cusparseOperation_t transA,
                                             cusparseOperation_t transB,
                                             int m,
                                             int n,
                                             int k,
                                             int nnz,
                                             const cuComplex *alpha,
                                             const cusparseMatDescr_t descrA,
                                             const cuComplex *csrSortedValA,
                                             const int *csrSortedRowPtrA,
                                             const int *csrSortedColIndA,
                                             const cuComplex *B,
                                             int ldb,
                                             const cuComplex *beta,
                                             cuComplex *C,
                                             int ldc);

cusparseStatus_t __stdcall cusparseZcsrmm2(cusparseHandle_t handle,
                                             cusparseOperation_t transA,
                                             cusparseOperation_t transB,
                                             int m,
                                             int n,
                                             int k,
                                             int nnz,
                                             const cuDoubleComplex *alpha,
                                             const cusparseMatDescr_t descrA,
                                             const cuDoubleComplex *csrSortedValA,
                                             const int *csrSortedRowPtrA,
                                             const int *csrSortedColIndA,
                                             const cuDoubleComplex *B,
                                             int ldb,
                                             const cuDoubleComplex *beta,
                                             cuDoubleComplex *C,
                                             int ldc);



 
cusparseStatus_t __stdcall cusparseSbsrmm(cusparseHandle_t handle,
                                            cusparseDirection_t dirA,
                                            cusparseOperation_t transA,
                                            cusparseOperation_t transB,
                                            int mb,
                                            int n,
                                            int kb,
                                            int nnzb,
                                            const float *alpha,
                                            const cusparseMatDescr_t descrA,
                                            const float *bsrSortedValA,
                                            const int *bsrSortedRowPtrA,
                                            const int *bsrSortedColIndA,
                                            const int  blockSize,
                                            const float *B,
                                            const int ldb,
                                            const float *beta,
                                            float *C,
                                            int ldc);

cusparseStatus_t __stdcall cusparseDbsrmm(cusparseHandle_t handle,
                                            cusparseDirection_t dirA,
                                            cusparseOperation_t transA,
                                            cusparseOperation_t transB,
                                            int mb,
                                            int n, 
                                            int kb, 
                                            int nnzb,
                                            const double *alpha,
                                            const cusparseMatDescr_t descrA,
                                            const double *bsrSortedValA,
                                            const int *bsrSortedRowPtrA,
                                            const int *bsrSortedColIndA,
                                            const int  blockSize,
                                            const double *B,
                                            const int ldb,
                                            const double *beta,
                                            double *C,
                                            int ldc);

cusparseStatus_t __stdcall cusparseCbsrmm(cusparseHandle_t handle,
                                            cusparseDirection_t dirA,
                                            cusparseOperation_t transA,
                                            cusparseOperation_t transB,
                                            int mb,
                                            int n, 
                                            int kb, 
                                            int nnzb,
                                            const cuComplex *alpha,
                                            const cusparseMatDescr_t descrA,
                                            const cuComplex *bsrSortedValA,
                                            const int *bsrSortedRowPtrA,
                                            const int *bsrSortedColIndA,
                                            const int  blockSize,
                                            const cuComplex *B,
                                            const int ldb,
                                            const cuComplex *beta,
                                            cuComplex *C,
                                            int ldc);

cusparseStatus_t __stdcall cusparseZbsrmm(cusparseHandle_t handle,
                                            cusparseDirection_t dirA,
                                            cusparseOperation_t transA,
                                            cusparseOperation_t transB,
                                            int mb,
                                            int n, 
                                            int kb, 
                                            int nnzb,
                                            const cuDoubleComplex *alpha,
                                            const cusparseMatDescr_t descrA,
                                            const cuDoubleComplex *bsrSortedValA,
                                            const int *bsrSortedRowPtrA,
                                            const int *bsrSortedColIndA,
                                            const int  blockSize,
                                            const cuDoubleComplex *B,
                                            const int ldb,
                                            const cuDoubleComplex *beta,
                                            cuDoubleComplex *C,
                                            int ldc);





cusparseStatus_t  __stdcall cusparseSgemmi(cusparseHandle_t handle,
                                             int m,
                                             int n,
					     int k,
					     int nnz, 
                                             const float *alpha, 
                                             const float *A,
                                             int lda,
                                             const float *cscValB,
					     const int *cscColPtrB, 
					     const int *cscRowIndB, 
                                             const float *beta, 
                                             float *C,
                                             int ldc);

cusparseStatus_t  __stdcall cusparseDgemmi(cusparseHandle_t handle,
                                             int m,
                                             int n,
					     int k,
					     int nnz, 
                                             const double *alpha, 
                                             const double *A,
                                             int lda,
                                             const double *cscValB,
					     const int *cscColPtrB, 
					     const int *cscRowIndB, 
                                             const double *beta, 
                                             double *C,
                                             int ldc);

cusparseStatus_t  __stdcall cusparseCgemmi(cusparseHandle_t handle,
                                             int m,
                                             int n,
					     int k,
					     int nnz, 
                                             const cuComplex *alpha, 
                                             const cuComplex *A,
                                             int lda,
                                             const cuComplex *cscValB,
					     const int *cscColPtrB, 
					     const int *cscRowIndB, 
                                             const cuComplex *beta, 
                                             cuComplex *C,
                                             int ldc);

cusparseStatus_t  __stdcall cusparseZgemmi(cusparseHandle_t handle,
                                             int m,
                                             int n,
					     int k,
					     int nnz, 
                                             const cuDoubleComplex *alpha, 
                                             const cuDoubleComplex *A,
                                             int lda,
                                             const cuDoubleComplex *cscValB,
					     const int *cscColPtrB, 
					     const int *cscRowIndB, 
                                             const cuDoubleComplex *beta, 
                                             cuDoubleComplex *C,
                                             int ldc);






cusparseStatus_t __stdcall cusparseScsrsm_analysis(cusparseHandle_t handle, 
                                                     cusparseOperation_t transA, 
                                                     int m, 
                                                     int nnz,
                                                     const cusparseMatDescr_t descrA, 
                                                     const float *csrSortedValA, 
                                                     const int *csrSortedRowPtrA, 
                                                     const int *csrSortedColIndA, 
                                                     cusparseSolveAnalysisInfo_t info);

cusparseStatus_t __stdcall cusparseDcsrsm_analysis(cusparseHandle_t handle, 
                                                     cusparseOperation_t transA, 
                                                     int m, 
                                                     int nnz,
                                                     const cusparseMatDescr_t descrA, 
                                                     const double *csrSortedValA, 
                                                     const int *csrSortedRowPtrA, 
                                                     const int *csrSortedColIndA, 
                                                     cusparseSolveAnalysisInfo_t info);

cusparseStatus_t __stdcall cusparseCcsrsm_analysis(cusparseHandle_t handle, 
                                                     cusparseOperation_t transA, 
                                                     int m, 
                                                     int nnz,
                                                     const cusparseMatDescr_t descrA, 
                                                     const cuComplex *csrSortedValA, 
                                                     const int *csrSortedRowPtrA, 
                                                     const int *csrSortedColIndA, 
                                                     cusparseSolveAnalysisInfo_t info);

cusparseStatus_t __stdcall cusparseZcsrsm_analysis(cusparseHandle_t handle, 
                                                     cusparseOperation_t transA, 
                                                     int m, 
                                                     int nnz,
                                                     const cusparseMatDescr_t descrA, 
                                                     const cuDoubleComplex *csrSortedValA, 
                                                     const int *csrSortedRowPtrA, 
                                                     const int *csrSortedColIndA, 
                                                     cusparseSolveAnalysisInfo_t info); 


cusparseStatus_t __stdcall cusparseScsrsm_solve(cusparseHandle_t handle, 
                                                  cusparseOperation_t transA, 
                                                  int m,
                                                  int n,
                                                  const float *alpha, 
                                                  const cusparseMatDescr_t descrA, 
                                                  const float *csrSortedValA, 
                                                  const int *csrSortedRowPtrA, 
                                                  const int *csrSortedColIndA, 
                                                  cusparseSolveAnalysisInfo_t info, 
                                                  const float *F, 
                                                  int ldf,
                                                  float *X,
                                                  int ldx);

cusparseStatus_t __stdcall cusparseDcsrsm_solve(cusparseHandle_t handle, 
                                                  cusparseOperation_t transA, 
                                                  int m, 
                                                  int n,
                                                  const double *alpha, 
                                                  const cusparseMatDescr_t descrA, 
                                                  const double *csrSortedValA, 
                                                  const int *csrSortedRowPtrA, 
                                                  const int *csrSortedColIndA, 
                                                  cusparseSolveAnalysisInfo_t info, 
                                                  const double *F, 
                                                  int ldf,
                                                  double *X,
                                                  int ldx);

cusparseStatus_t __stdcall cusparseCcsrsm_solve(cusparseHandle_t handle, 
                                                  cusparseOperation_t transA, 
                                                  int m, 
                                                  int n,
                                                  const cuComplex *alpha, 
                                                  const cusparseMatDescr_t descrA, 
                                                  const cuComplex *csrSortedValA, 
                                                  const int *csrSortedRowPtrA, 
                                                  const int *csrSortedColIndA, 
                                                  cusparseSolveAnalysisInfo_t info, 
                                                  const cuComplex *F,
                                                  int ldf,
                                                  cuComplex *X,
                                                  int ldx);

cusparseStatus_t __stdcall cusparseZcsrsm_solve(cusparseHandle_t handle, 
                                                  cusparseOperation_t transA, 
                                                  int m, 
                                                  int n,
                                                  const cuDoubleComplex *alpha, 
                                                  const cusparseMatDescr_t descrA, 
                                                  const cuDoubleComplex *csrSortedValA, 
                                                  const int *csrSortedRowPtrA, 
                                                  const int *csrSortedColIndA, 
                                                  cusparseSolveAnalysisInfo_t info, 
                                                  const cuDoubleComplex *F,
                                                  int ldf,
                                                  cuDoubleComplex *X,
                                                  int ldx);                                                                 
                    




cusparseStatus_t __stdcall cusparseXbsrsm2_zeroPivot(cusparseHandle_t handle,
                                                       bsrsm2Info_t info,
                                                       int *position);

cusparseStatus_t __stdcall cusparseSbsrsm2_bufferSize(cusparseHandle_t handle,
                                                        cusparseDirection_t dirA,
                                                        cusparseOperation_t transA,
                                                        cusparseOperation_t transXY,
                                                        int mb,
                                                        int n,
                                                        int nnzb,
                                                        const cusparseMatDescr_t descrA,
                                                        float *bsrSortedVal,
                                                        const int *bsrSortedRowPtr,
                                                        const int *bsrSortedColInd,
                                                        int blockSize,
                                                        bsrsm2Info_t info,
                                                        int *pBufferSizeInBytes);

cusparseStatus_t __stdcall cusparseDbsrsm2_bufferSize(cusparseHandle_t handle,
                                                        cusparseDirection_t dirA,
                                                        cusparseOperation_t transA,
                                                        cusparseOperation_t transXY,
                                                        int mb,
                                                        int n,
                                                        int nnzb,
                                                        const cusparseMatDescr_t descrA,
                                                        double *bsrSortedVal,
                                                        const int *bsrSortedRowPtr,
                                                        const int *bsrSortedColInd,
                                                        int blockSize,
                                                        bsrsm2Info_t info,
                                                        int *pBufferSizeInBytes);

cusparseStatus_t __stdcall cusparseCbsrsm2_bufferSize(cusparseHandle_t handle,
                                                        cusparseDirection_t dirA,
                                                        cusparseOperation_t transA,
                                                        cusparseOperation_t transXY,
                                                        int mb,
                                                        int n,
                                                        int nnzb,
                                                        const cusparseMatDescr_t descrA,
                                                        cuComplex *bsrSortedVal,
                                                        const int *bsrSortedRowPtr,
                                                        const int *bsrSortedColInd,
                                                        int blockSize,
                                                        bsrsm2Info_t info,
                                                        int *pBufferSizeInBytes);

cusparseStatus_t __stdcall cusparseZbsrsm2_bufferSize(cusparseHandle_t handle,
                                                        cusparseDirection_t dirA,
                                                        cusparseOperation_t transA,
                                                        cusparseOperation_t transXY,
                                                        int mb,
                                                        int n,
                                                        int nnzb,
                                                        const cusparseMatDescr_t descrA,
                                                        cuDoubleComplex *bsrSortedVal,
                                                        const int *bsrSortedRowPtr,
                                                        const int *bsrSortedColInd,
                                                        int blockSize,
                                                        bsrsm2Info_t info,
                                                        int *pBufferSizeInBytes);


cusparseStatus_t __stdcall cusparseSbsrsm2_bufferSizeExt(cusparseHandle_t handle,
                                                           cusparseDirection_t dirA,
                                                           cusparseOperation_t transA,
                                                           cusparseOperation_t transB,
                                                           int mb,
                                                           int n,
                                                           int nnzb,
                                                           const cusparseMatDescr_t descrA,
                                                           float *bsrSortedVal,
                                                           const int *bsrSortedRowPtr,
                                                           const int *bsrSortedColInd,
                                                           int blockSize,
                                                           bsrsm2Info_t info,
                                                           size_t *pBufferSize);

cusparseStatus_t __stdcall cusparseDbsrsm2_bufferSizeExt(cusparseHandle_t handle,
                                                           cusparseDirection_t dirA,
                                                           cusparseOperation_t transA,
                                                           cusparseOperation_t transB,
                                                           int mb,
                                                           int n,
                                                           int nnzb,
                                                           const cusparseMatDescr_t descrA,
                                                           double *bsrSortedVal,
                                                           const int *bsrSortedRowPtr,
                                                           const int *bsrSortedColInd,
                                                           int blockSize,
                                                           bsrsm2Info_t info,
                                                           size_t *pBufferSize);

cusparseStatus_t __stdcall cusparseCbsrsm2_bufferSizeExt(cusparseHandle_t handle,
                                                           cusparseDirection_t dirA,
                                                           cusparseOperation_t transA,
                                                           cusparseOperation_t transB,
                                                           int mb,
                                                           int n,
                                                           int nnzb,
                                                           const cusparseMatDescr_t descrA,
                                                           cuComplex *bsrSortedVal,
                                                           const int *bsrSortedRowPtr,
                                                           const int *bsrSortedColInd,
                                                           int blockSize,
                                                           bsrsm2Info_t info,
                                                           size_t *pBufferSize);

cusparseStatus_t __stdcall cusparseZbsrsm2_bufferSizeExt(cusparseHandle_t handle,
                                                           cusparseDirection_t dirA,
                                                           cusparseOperation_t transA,
                                                           cusparseOperation_t transB,
                                                           int mb,
                                                           int n,
                                                           int nnzb,
                                                           const cusparseMatDescr_t descrA,
                                                           cuDoubleComplex *bsrSortedVal,
                                                           const int *bsrSortedRowPtr,
                                                           const int *bsrSortedColInd,
                                                           int blockSize,
                                                           bsrsm2Info_t info,
                                                           size_t *pBufferSize);


cusparseStatus_t __stdcall cusparseSbsrsm2_analysis(cusparseHandle_t handle,
                                                      cusparseDirection_t dirA,
                                                      cusparseOperation_t transA,
                                                      cusparseOperation_t transXY,
                                                      int mb,
                                                      int n,
                                                      int nnzb,
                                                      const cusparseMatDescr_t descrA,
                                                      const float *bsrSortedVal,
                                                      const int *bsrSortedRowPtr,
                                                      const int *bsrSortedColInd,
                                                      int blockSize,
                                                      bsrsm2Info_t info,
                                                      cusparseSolvePolicy_t policy,
                                                      void *pBuffer);

cusparseStatus_t __stdcall cusparseDbsrsm2_analysis(cusparseHandle_t handle,
                                                      cusparseDirection_t dirA,
                                                      cusparseOperation_t transA,
                                                      cusparseOperation_t transXY,
                                                      int mb,
                                                      int n,
                                                      int nnzb,
                                                      const cusparseMatDescr_t descrA,
                                                      const double *bsrSortedVal,
                                                      const int *bsrSortedRowPtr,
                                                      const int *bsrSortedColInd,
                                                      int blockSize,
                                                      bsrsm2Info_t info,
                                                      cusparseSolvePolicy_t policy,
                                                      void *pBuffer);

cusparseStatus_t __stdcall cusparseCbsrsm2_analysis(cusparseHandle_t handle,
                                                      cusparseDirection_t dirA,
                                                      cusparseOperation_t transA,
                                                      cusparseOperation_t transXY,
                                                      int mb,
                                                      int n,
                                                      int nnzb,
                                                      const cusparseMatDescr_t descrA,
                                                      const cuComplex *bsrSortedVal,
                                                      const int *bsrSortedRowPtr,
                                                      const int *bsrSortedColInd,
                                                      int blockSize,
                                                      bsrsm2Info_t info,
                                                      cusparseSolvePolicy_t policy,
                                                      void *pBuffer);

cusparseStatus_t __stdcall cusparseZbsrsm2_analysis(cusparseHandle_t handle,
                                                      cusparseDirection_t dirA,
                                                      cusparseOperation_t transA,
                                                      cusparseOperation_t transXY,
                                                      int mb,
                                                      int n,
                                                      int nnzb,
                                                      const cusparseMatDescr_t descrA,
                                                      const cuDoubleComplex *bsrSortedVal,
                                                      const int *bsrSortedRowPtr,
                                                      const int *bsrSortedColInd,
                                                      int blockSize,
                                                      bsrsm2Info_t info,
                                                      cusparseSolvePolicy_t policy,
                                                      void *pBuffer);


cusparseStatus_t __stdcall cusparseSbsrsm2_solve(cusparseHandle_t handle,
                                                   cusparseDirection_t dirA,
                                                   cusparseOperation_t transA,
                                                   cusparseOperation_t transXY,
                                                   int mb,
                                                   int n,
                                                   int nnzb,
                                                   const float *alpha,
                                                   const cusparseMatDescr_t descrA,
                                                   const float *bsrSortedVal,
                                                   const int *bsrSortedRowPtr,
                                                   const int *bsrSortedColInd,
                                                   int blockSize,
                                                   bsrsm2Info_t info,
                                                   const float *F,
                                                   int ldf,
                                                   float *X,
                                                   int ldx,
                                                   cusparseSolvePolicy_t policy,
                                                   void *pBuffer);

cusparseStatus_t __stdcall cusparseDbsrsm2_solve(cusparseHandle_t handle,
                                                   cusparseDirection_t dirA,
                                                   cusparseOperation_t transA,
                                                   cusparseOperation_t transXY,
                                                   int mb,
                                                   int n,
                                                   int nnzb,
                                                   const double *alpha,
                                                   const cusparseMatDescr_t descrA,
                                                   const double *bsrSortedVal,
                                                   const int *bsrSortedRowPtr,
                                                   const int *bsrSortedColInd,
                                                   int blockSize,
                                                   bsrsm2Info_t info,
                                                   const double *F,
                                                   int ldf,
                                                   double *X,
                                                   int ldx,
                                                   cusparseSolvePolicy_t policy,
                                                   void *pBuffer);

cusparseStatus_t __stdcall cusparseCbsrsm2_solve(cusparseHandle_t handle,
                                                   cusparseDirection_t dirA,
                                                   cusparseOperation_t transA,
                                                   cusparseOperation_t transXY,
                                                   int mb,
                                                   int n,
                                                   int nnzb,
                                                   const cuComplex *alpha,
                                                   const cusparseMatDescr_t descrA,
                                                   const cuComplex *bsrSortedVal,
                                                   const int *bsrSortedRowPtr,
                                                   const int *bsrSortedColInd,
                                                   int blockSize,
                                                   bsrsm2Info_t info,
                                                   const cuComplex *F,
                                                   int ldf,
                                                   cuComplex *X,
                                                   int ldx,
                                                   cusparseSolvePolicy_t policy,
                                                   void *pBuffer);

cusparseStatus_t __stdcall cusparseZbsrsm2_solve(cusparseHandle_t handle,
                                                   cusparseDirection_t dirA,
                                                   cusparseOperation_t transA,
                                                   cusparseOperation_t transXY,
                                                   int mb,
                                                   int n,
                                                   int nnzb,
                                                   const cuDoubleComplex *alpha,
                                                   const cusparseMatDescr_t descrA,
                                                   const cuDoubleComplex *bsrSortedVal,
                                                   const int *bsrSortedRowPtr,
                                                   const int *bsrSortedColInd,
                                                   int blockSize,
                                                   bsrsm2Info_t info,
                                                   const cuDoubleComplex *F,
                                                   int ldf,
                                                   cuDoubleComplex *X,
                                                   int ldx,
                                                   cusparseSolvePolicy_t policy,
                                                   void *pBuffer);


 





cusparseStatus_t __stdcall cusparseCsrilu0Ex(cusparseHandle_t handle, 
                                              cusparseOperation_t trans, 
                                              int m, 
                                              const cusparseMatDescr_t descrA, 
                                              void *csrSortedValA_ValM, 
                                              cudaDataType csrSortedValA_ValMtype,
                                              

                                              const int *csrSortedRowPtrA, 
                                              const int *csrSortedColIndA,
                                              cusparseSolveAnalysisInfo_t info,
                                              cudaDataType executiontype);

cusparseStatus_t __stdcall cusparseScsrilu0(cusparseHandle_t handle, 
                                              cusparseOperation_t trans, 
                                              int m, 
                                              const cusparseMatDescr_t descrA, 
                                              float *csrSortedValA_ValM, 
                                              

                                              const int *csrSortedRowPtrA, 
                                              const int *csrSortedColIndA,
                                              cusparseSolveAnalysisInfo_t info);

cusparseStatus_t __stdcall cusparseDcsrilu0(cusparseHandle_t handle, 
                                              cusparseOperation_t trans, 
                                              int m, 
                                              const cusparseMatDescr_t descrA, 
                                              double *csrSortedValA_ValM, 
                                              

                                              const int *csrSortedRowPtrA, 
                                              const int *csrSortedColIndA, 
                                              cusparseSolveAnalysisInfo_t info);

cusparseStatus_t __stdcall cusparseCcsrilu0(cusparseHandle_t handle, 
                                              cusparseOperation_t trans, 
                                              int m, 
                                              const cusparseMatDescr_t descrA, 
                                              cuComplex *csrSortedValA_ValM, 
                                              

                                              const int *csrSortedRowPtrA, 
                                              const int *csrSortedColIndA, 
                                              cusparseSolveAnalysisInfo_t info);

cusparseStatus_t __stdcall cusparseZcsrilu0(cusparseHandle_t handle, 
                                              cusparseOperation_t trans, 
                                              int m, 
                                              const cusparseMatDescr_t descrA, 
                                              cuDoubleComplex *csrSortedValA_ValM, 
                                              

                                              const int *csrSortedRowPtrA, 
                                              const int *csrSortedColIndA, 
                                              cusparseSolveAnalysisInfo_t info);





cusparseStatus_t __stdcall cusparseScsrilu02_numericBoost(cusparseHandle_t handle,
                                                            csrilu02Info_t info,
                                                            int enable_boost,    
                                                            double *tol,
                                                            float *boost_val);

cusparseStatus_t __stdcall cusparseDcsrilu02_numericBoost(cusparseHandle_t handle,
                                                            csrilu02Info_t info,
                                                            int enable_boost,    
                                                            double *tol,
                                                            double *boost_val);

cusparseStatus_t __stdcall cusparseCcsrilu02_numericBoost(cusparseHandle_t handle,
                                                            csrilu02Info_t info,
                                                            int enable_boost,    
                                                            double *tol,
                                                            cuComplex *boost_val);

cusparseStatus_t __stdcall cusparseZcsrilu02_numericBoost(cusparseHandle_t handle,
                                                            csrilu02Info_t info,
                                                            int enable_boost,    
                                                            double *tol,
                                                            cuDoubleComplex *boost_val);

cusparseStatus_t __stdcall cusparseXcsrilu02_zeroPivot(cusparseHandle_t handle,
                                                         csrilu02Info_t info,
                                                         int *position);

cusparseStatus_t __stdcall cusparseScsrilu02_bufferSize(cusparseHandle_t handle,
                                                          int m,
                                                          int nnz,
                                                          const cusparseMatDescr_t descrA,
                                                          float *csrSortedValA,
                                                          const int *csrSortedRowPtrA,
                                                          const int *csrSortedColIndA,
                                                          csrilu02Info_t info,
                                                          int *pBufferSizeInBytes);

cusparseStatus_t __stdcall cusparseDcsrilu02_bufferSize(cusparseHandle_t handle,
                                                          int m,
                                                          int nnz,
                                                          const cusparseMatDescr_t descrA,
                                                          double *csrSortedValA,
                                                          const int *csrSortedRowPtrA,
                                                          const int *csrSortedColIndA,
                                                          csrilu02Info_t info,
                                                          int *pBufferSizeInBytes);

cusparseStatus_t __stdcall cusparseCcsrilu02_bufferSize(cusparseHandle_t handle,
                                                          int m,
                                                          int nnz,
                                                          const cusparseMatDescr_t descrA,
                                                          cuComplex *csrSortedValA,
                                                          const int *csrSortedRowPtrA,
                                                          const int *csrSortedColIndA,
                                                          csrilu02Info_t info,
                                                          int *pBufferSizeInBytes);

cusparseStatus_t __stdcall cusparseZcsrilu02_bufferSize(cusparseHandle_t handle,
                                                          int m,
                                                          int nnz,
                                                          const cusparseMatDescr_t descrA,
                                                          cuDoubleComplex *csrSortedValA,
                                                          const int *csrSortedRowPtrA,
                                                          const int *csrSortedColIndA,
                                                          csrilu02Info_t info,
                                                          int *pBufferSizeInBytes);

cusparseStatus_t __stdcall cusparseScsrilu02_bufferSizeExt(cusparseHandle_t handle,
                                                             int m,
                                                             int nnz,
                                                             const cusparseMatDescr_t descrA,
                                                             float *csrSortedVal,
                                                             const int *csrSortedRowPtr,
                                                             const int *csrSortedColInd,
                                                             csrilu02Info_t info,
                                                             size_t *pBufferSize);

cusparseStatus_t __stdcall cusparseDcsrilu02_bufferSizeExt(cusparseHandle_t handle,
                                                             int m,
                                                             int nnz,
                                                             const cusparseMatDescr_t descrA,
                                                             double *csrSortedVal,
                                                             const int *csrSortedRowPtr,
                                                             const int *csrSortedColInd,
                                                             csrilu02Info_t info,
                                                             size_t *pBufferSize);

cusparseStatus_t __stdcall cusparseCcsrilu02_bufferSizeExt(cusparseHandle_t handle,
                                                             int m,
                                                             int nnz,
                                                             const cusparseMatDescr_t descrA,
                                                             cuComplex *csrSortedVal,
                                                             const int *csrSortedRowPtr,
                                                             const int *csrSortedColInd,
                                                             csrilu02Info_t info,
                                                             size_t *pBufferSize);

cusparseStatus_t __stdcall cusparseZcsrilu02_bufferSizeExt(cusparseHandle_t handle,
                                                             int m,
                                                             int nnz,
                                                             const cusparseMatDescr_t descrA,
                                                             cuDoubleComplex *csrSortedVal,
                                                             const int *csrSortedRowPtr,
                                                             const int *csrSortedColInd,
                                                             csrilu02Info_t info,
                                                             size_t *pBufferSize);

cusparseStatus_t __stdcall cusparseScsrilu02_analysis(cusparseHandle_t handle,
                                                        int m,
                                                        int nnz,
                                                        const cusparseMatDescr_t descrA,
                                                        const float *csrSortedValA,
                                                        const int *csrSortedRowPtrA,
                                                        const int *csrSortedColIndA,
                                                        csrilu02Info_t info,
                                                        cusparseSolvePolicy_t policy,
                                                        void *pBuffer);

cusparseStatus_t __stdcall cusparseDcsrilu02_analysis(cusparseHandle_t handle,
                                                        int m,
                                                        int nnz,
                                                        const cusparseMatDescr_t descrA,
                                                        const double *csrSortedValA,
                                                        const int *csrSortedRowPtrA,
                                                        const int *csrSortedColIndA,
                                                        csrilu02Info_t info,
                                                        cusparseSolvePolicy_t policy,
                                                        void *pBuffer);

cusparseStatus_t __stdcall cusparseCcsrilu02_analysis(cusparseHandle_t handle,
                                                        int m,
                                                        int nnz,
                                                        const cusparseMatDescr_t descrA,
                                                        const cuComplex *csrSortedValA,
                                                        const int *csrSortedRowPtrA,
                                                        const int *csrSortedColIndA,
                                                        csrilu02Info_t info,
                                                        cusparseSolvePolicy_t policy,
                                                        void *pBuffer);

cusparseStatus_t __stdcall cusparseZcsrilu02_analysis(cusparseHandle_t handle,
                                                        int m,
                                                        int nnz,
                                                        const cusparseMatDescr_t descrA,
                                                        const cuDoubleComplex *csrSortedValA,
                                                        const int *csrSortedRowPtrA,
                                                        const int *csrSortedColIndA,
                                                        csrilu02Info_t info,
                                                        cusparseSolvePolicy_t policy,
                                                        void *pBuffer);

cusparseStatus_t __stdcall cusparseScsrilu02(cusparseHandle_t handle,
                                               int m,
                                               int nnz,
                                               const cusparseMatDescr_t descrA,
                                               float *csrSortedValA_valM,
                                               

                                               const int *csrSortedRowPtrA,
                                               const int *csrSortedColIndA,
                                               csrilu02Info_t info,
                                               cusparseSolvePolicy_t policy,
                                               void *pBuffer);

cusparseStatus_t __stdcall cusparseDcsrilu02(cusparseHandle_t handle,
                                               int m,
                                               int nnz,
                                               const cusparseMatDescr_t descrA,
                                               double *csrSortedValA_valM,
                                               

                                               const int *csrSortedRowPtrA,
                                               const int *csrSortedColIndA,
                                               csrilu02Info_t info,
                                               cusparseSolvePolicy_t policy,
                                               void *pBuffer);

cusparseStatus_t __stdcall cusparseCcsrilu02(cusparseHandle_t handle,
                                               int m,
                                               int nnz,
                                               const cusparseMatDescr_t descrA,
                                               cuComplex *csrSortedValA_valM,
                                               

                                               const int *csrSortedRowPtrA,
                                               const int *csrSortedColIndA,
                                               csrilu02Info_t info,
                                               cusparseSolvePolicy_t policy,
                                               void *pBuffer);

cusparseStatus_t __stdcall cusparseZcsrilu02(cusparseHandle_t handle,
                                               int m,
                                               int nnz,
                                               const cusparseMatDescr_t descrA,
                                               cuDoubleComplex *csrSortedValA_valM,
                                               

                                               const int *csrSortedRowPtrA,
                                               const int *csrSortedColIndA,
                                               csrilu02Info_t info,
                                               cusparseSolvePolicy_t policy,
                                               void *pBuffer);





cusparseStatus_t __stdcall cusparseSbsrilu02_numericBoost(cusparseHandle_t handle,
                                                            bsrilu02Info_t info,
                                                            int enable_boost,
                                                            double *tol,
                                                            float *boost_val);

cusparseStatus_t __stdcall cusparseDbsrilu02_numericBoost(cusparseHandle_t handle,
                                                            bsrilu02Info_t info,
                                                            int enable_boost,
                                                            double *tol,
                                                            double *boost_val);

cusparseStatus_t __stdcall cusparseCbsrilu02_numericBoost(cusparseHandle_t handle,
                                                            bsrilu02Info_t info,
                                                            int enable_boost,
                                                            double *tol,
                                                            cuComplex *boost_val);

cusparseStatus_t __stdcall cusparseZbsrilu02_numericBoost(cusparseHandle_t handle,
                                                            bsrilu02Info_t info,
                                                            int enable_boost,
                                                            double *tol,
                                                            cuDoubleComplex *boost_val);

cusparseStatus_t __stdcall cusparseXbsrilu02_zeroPivot(cusparseHandle_t handle,
                                                         bsrilu02Info_t info,
                                                         int *position);

cusparseStatus_t __stdcall cusparseSbsrilu02_bufferSize(cusparseHandle_t handle,
                                                          cusparseDirection_t dirA,
                                                          int mb,
                                                          int nnzb,
                                                          const cusparseMatDescr_t descrA,
                                                          float *bsrSortedVal,
                                                          const int *bsrSortedRowPtr,
                                                          const int *bsrSortedColInd,
                                                          int blockDim,
                                                          bsrilu02Info_t info,
                                                          int *pBufferSizeInBytes);

cusparseStatus_t __stdcall cusparseDbsrilu02_bufferSize(cusparseHandle_t handle,
                                                          cusparseDirection_t dirA,
                                                          int mb,
                                                          int nnzb,
                                                          const cusparseMatDescr_t descrA,
                                                          double *bsrSortedVal,
                                                          const int *bsrSortedRowPtr,
                                                          const int *bsrSortedColInd,
                                                          int blockDim,
                                                          bsrilu02Info_t info,
                                                          int *pBufferSizeInBytes);

cusparseStatus_t __stdcall cusparseCbsrilu02_bufferSize(cusparseHandle_t handle,
                                                          cusparseDirection_t dirA,
                                                          int mb,
                                                          int nnzb,
                                                          const cusparseMatDescr_t descrA,
                                                          cuComplex *bsrSortedVal,
                                                          const int *bsrSortedRowPtr,
                                                          const int *bsrSortedColInd,
                                                          int blockDim,
                                                          bsrilu02Info_t info,
                                                          int *pBufferSizeInBytes);

cusparseStatus_t __stdcall cusparseZbsrilu02_bufferSize(cusparseHandle_t handle,
                                                          cusparseDirection_t dirA,
                                                          int mb,
                                                          int nnzb,
                                                          const cusparseMatDescr_t descrA,
                                                          cuDoubleComplex *bsrSortedVal,
                                                          const int *bsrSortedRowPtr,
                                                          const int *bsrSortedColInd,
                                                          int blockDim,
                                                          bsrilu02Info_t info,
                                                          int *pBufferSizeInBytes);

cusparseStatus_t __stdcall cusparseSbsrilu02_bufferSizeExt(cusparseHandle_t handle,
                                                          cusparseDirection_t dirA,
                                                          int mb,
                                                          int nnzb,
                                                          const cusparseMatDescr_t descrA,
                                                          float *bsrSortedVal,
                                                          const int *bsrSortedRowPtr,
                                                          const int *bsrSortedColInd,
                                                          int blockSize,
                                                          bsrilu02Info_t info,
                                                          size_t *pBufferSize);

cusparseStatus_t __stdcall cusparseDbsrilu02_bufferSizeExt(cusparseHandle_t handle,
                                                          cusparseDirection_t dirA,
                                                          int mb,
                                                          int nnzb,
                                                          const cusparseMatDescr_t descrA,
                                                          double *bsrSortedVal,
                                                          const int *bsrSortedRowPtr,
                                                          const int *bsrSortedColInd,
                                                          int blockSize,
                                                          bsrilu02Info_t info,
                                                          size_t *pBufferSize);

cusparseStatus_t __stdcall cusparseCbsrilu02_bufferSizeExt(cusparseHandle_t handle,
                                                          cusparseDirection_t dirA,
                                                          int mb,
                                                          int nnzb,
                                                          const cusparseMatDescr_t descrA,
                                                          cuComplex *bsrSortedVal,
                                                          const int *bsrSortedRowPtr,
                                                          const int *bsrSortedColInd,
                                                          int blockSize,
                                                          bsrilu02Info_t info,
                                                          size_t *pBufferSize);

cusparseStatus_t __stdcall cusparseZbsrilu02_bufferSizeExt(cusparseHandle_t handle,
                                                          cusparseDirection_t dirA,
                                                          int mb,
                                                          int nnzb,
                                                          const cusparseMatDescr_t descrA,
                                                          cuDoubleComplex *bsrSortedVal,
                                                          const int *bsrSortedRowPtr,
                                                          const int *bsrSortedColInd,
                                                          int blockSize,
                                                          bsrilu02Info_t info,
                                                          size_t *pBufferSize);


cusparseStatus_t __stdcall cusparseSbsrilu02_analysis(cusparseHandle_t handle,
                                                        cusparseDirection_t dirA,
                                                        int mb,
                                                        int nnzb,
                                                        const cusparseMatDescr_t descrA,
                                                        float *bsrSortedVal,
                                                        const int *bsrSortedRowPtr,
                                                        const int *bsrSortedColInd,
                                                        int blockDim,
                                                        bsrilu02Info_t info,
                                                        cusparseSolvePolicy_t policy,
                                                        void *pBuffer);

cusparseStatus_t __stdcall cusparseDbsrilu02_analysis(cusparseHandle_t handle,
                                                        cusparseDirection_t dirA,
                                                        int mb,
                                                        int nnzb,
                                                        const cusparseMatDescr_t descrA,
                                                        double *bsrSortedVal,
                                                        const int *bsrSortedRowPtr,
                                                        const int *bsrSortedColInd,
                                                        int blockDim,
                                                        bsrilu02Info_t info,
                                                        cusparseSolvePolicy_t policy,
                                                        void *pBuffer);

cusparseStatus_t __stdcall cusparseCbsrilu02_analysis(cusparseHandle_t handle,
                                                        cusparseDirection_t dirA,
                                                        int mb,
                                                        int nnzb,
                                                        const cusparseMatDescr_t descrA,
                                                        cuComplex *bsrSortedVal,
                                                        const int *bsrSortedRowPtr,
                                                        const int *bsrSortedColInd,
                                                        int blockDim,
                                                        bsrilu02Info_t info,
                                                        cusparseSolvePolicy_t policy,
                                                        void *pBuffer);

cusparseStatus_t __stdcall cusparseZbsrilu02_analysis(cusparseHandle_t handle,
                                                        cusparseDirection_t dirA,
                                                        int mb,
                                                        int nnzb,
                                                        const cusparseMatDescr_t descrA,
                                                        cuDoubleComplex *bsrSortedVal,
                                                        const int *bsrSortedRowPtr,
                                                        const int *bsrSortedColInd,
                                                        int blockDim,
                                                        bsrilu02Info_t info,
                                                        cusparseSolvePolicy_t policy,
                                                        void *pBuffer);


cusparseStatus_t __stdcall cusparseSbsrilu02(cusparseHandle_t handle,
                                               cusparseDirection_t dirA,
                                               int mb,
                                               int nnzb,
                                               const cusparseMatDescr_t descra,
                                               float *bsrSortedVal,
                                               const int *bsrSortedRowPtr,
                                               const int *bsrSortedColInd,
                                               int blockDim,
                                               bsrilu02Info_t info,
                                               cusparseSolvePolicy_t policy,
                                               void *pBuffer);

cusparseStatus_t __stdcall cusparseDbsrilu02(cusparseHandle_t handle,
                                               cusparseDirection_t dirA,
                                               int mb,
                                               int nnzb,
                                               const cusparseMatDescr_t descra,
                                               double *bsrSortedVal,
                                               const int *bsrSortedRowPtr,
                                               const int *bsrSortedColInd,
                                               int blockDim,
                                               bsrilu02Info_t info,
                                               cusparseSolvePolicy_t policy,
                                               void *pBuffer);

cusparseStatus_t __stdcall cusparseCbsrilu02(cusparseHandle_t handle,
                                               cusparseDirection_t dirA,
                                               int mb,
                                               int nnzb,
                                               const cusparseMatDescr_t descra,
                                               cuComplex *bsrSortedVal,
                                               const int *bsrSortedRowPtr,
                                               const int *bsrSortedColInd,
                                               int blockDim,
                                               bsrilu02Info_t info,
                                               cusparseSolvePolicy_t policy,
                                               void *pBuffer);

cusparseStatus_t __stdcall cusparseZbsrilu02(cusparseHandle_t handle,
                                               cusparseDirection_t dirA,
                                               int mb,
                                               int nnzb,
                                               const cusparseMatDescr_t descra,
                                               cuDoubleComplex *bsrSortedVal,
                                               const int *bsrSortedRowPtr,
                                               const int *bsrSortedColInd,
                                               int blockDim,
                                               bsrilu02Info_t info,
                                               cusparseSolvePolicy_t policy,
                                               void *pBuffer);





cusparseStatus_t __stdcall cusparseScsric0(cusparseHandle_t handle, 
                                              cusparseOperation_t trans, 
                                              int m, 
                                              const cusparseMatDescr_t descrA,
                                              float *csrSortedValA_ValM,
                                              
 
                                              const int *csrSortedRowPtrA, 
                                              const int *csrSortedColIndA,
                                              cusparseSolveAnalysisInfo_t info);

cusparseStatus_t __stdcall cusparseDcsric0(cusparseHandle_t handle, 
                                              cusparseOperation_t trans, 
                                              int m, 
                                              const cusparseMatDescr_t descrA, 
                                              double *csrSortedValA_ValM, 
                                              

                                              const int *csrSortedRowPtrA, 
                                              const int *csrSortedColIndA, 
                                              cusparseSolveAnalysisInfo_t info);

cusparseStatus_t __stdcall cusparseCcsric0(cusparseHandle_t handle, 
                                              cusparseOperation_t trans, 
                                              int m, 
                                              const cusparseMatDescr_t descrA, 
                                              cuComplex *csrSortedValA_ValM, 
                                              

                                              const int *csrSortedRowPtrA, 
                                              const int *csrSortedColIndA, 
                                              cusparseSolveAnalysisInfo_t info);

cusparseStatus_t __stdcall cusparseZcsric0(cusparseHandle_t handle, 
                                              cusparseOperation_t trans, 
                                              int m, 
                                              const cusparseMatDescr_t descrA, 
                                              cuDoubleComplex *csrSortedValA_ValM, 
                                              

                                              const int *csrSortedRowPtrA, 
                                              const int *csrSortedColIndA, 
                                              cusparseSolveAnalysisInfo_t info);





cusparseStatus_t __stdcall cusparseXcsric02_zeroPivot(cusparseHandle_t handle,
                                                        csric02Info_t info,
                                                        int *position);

cusparseStatus_t __stdcall cusparseScsric02_bufferSize(cusparseHandle_t handle,
                                                         int m,
                                                         int nnz,
                                                         const cusparseMatDescr_t descrA,
                                                         float *csrSortedValA,
                                                         const int *csrSortedRowPtrA,
                                                         const int *csrSortedColIndA,
                                                         csric02Info_t info,
                                                         int *pBufferSizeInBytes);

cusparseStatus_t __stdcall cusparseDcsric02_bufferSize(cusparseHandle_t handle,
                                                         int m,
                                                         int nnz,
                                                         const cusparseMatDescr_t descrA,
                                                         double *csrSortedValA,
                                                         const int *csrSortedRowPtrA,
                                                         const int *csrSortedColIndA,
                                                         csric02Info_t info,
                                                         int *pBufferSizeInBytes);

cusparseStatus_t __stdcall cusparseCcsric02_bufferSize(cusparseHandle_t handle,
                                                         int m,
                                                         int nnz,
                                                         const cusparseMatDescr_t descrA,
                                                         cuComplex *csrSortedValA,
                                                         const int *csrSortedRowPtrA,
                                                         const int *csrSortedColIndA,
                                                         csric02Info_t info,
                                                         int *pBufferSizeInBytes);

cusparseStatus_t __stdcall cusparseZcsric02_bufferSize(cusparseHandle_t handle,
                                                         int m,
                                                         int nnz,
                                                         const cusparseMatDescr_t descrA,
                                                         cuDoubleComplex *csrSortedValA,
                                                         const int *csrSortedRowPtrA,
                                                         const int *csrSortedColIndA,
                                                         csric02Info_t info,
                                                         int *pBufferSizeInBytes);

cusparseStatus_t __stdcall cusparseScsric02_bufferSizeExt(cusparseHandle_t handle,
                                                            int m,
                                                            int nnz,
                                                            const cusparseMatDescr_t descrA,
                                                            float *csrSortedVal,
                                                            const int *csrSortedRowPtr,
                                                            const int *csrSortedColInd,
                                                            csric02Info_t info,
                                                            size_t *pBufferSize);

cusparseStatus_t __stdcall cusparseDcsric02_bufferSizeExt(cusparseHandle_t handle,
                                                            int m,
                                                            int nnz,
                                                            const cusparseMatDescr_t descrA,
                                                            double *csrSortedVal,
                                                            const int *csrSortedRowPtr,
                                                            const int *csrSortedColInd,
                                                            csric02Info_t info,
                                                            size_t *pBufferSize);

cusparseStatus_t __stdcall cusparseCcsric02_bufferSizeExt(cusparseHandle_t handle,
                                                            int m,
                                                            int nnz,
                                                            const cusparseMatDescr_t descrA,
                                                            cuComplex *csrSortedVal,
                                                            const int *csrSortedRowPtr,
                                                            const int *csrSortedColInd,
                                                            csric02Info_t info,
                                                            size_t *pBufferSize);

cusparseStatus_t __stdcall cusparseZcsric02_bufferSizeExt(cusparseHandle_t handle,
                                                            int m,
                                                            int nnz,
                                                            const cusparseMatDescr_t descrA,
                                                            cuDoubleComplex *csrSortedVal,
                                                            const int *csrSortedRowPtr,
                                                            const int *csrSortedColInd,
                                                            csric02Info_t info,
                                                            size_t *pBufferSize);


cusparseStatus_t __stdcall cusparseScsric02_analysis(cusparseHandle_t handle,
                                                       int m,
                                                       int nnz,
                                                       const cusparseMatDescr_t descrA,
                                                       const float *csrSortedValA,
                                                       const int *csrSortedRowPtrA,
                                                       const int *csrSortedColIndA,
                                                       csric02Info_t info,
                                                       cusparseSolvePolicy_t policy,
                                                       void *pBuffer);


cusparseStatus_t __stdcall cusparseDcsric02_analysis(cusparseHandle_t handle,
                                                       int m,
                                                       int nnz,
                                                       const cusparseMatDescr_t descrA,
                                                       const double *csrSortedValA,
                                                       const int *csrSortedRowPtrA,
                                                       const int *csrSortedColIndA,
                                                       csric02Info_t info,
                                                       cusparseSolvePolicy_t policy,
                                                       void *pBuffer);

cusparseStatus_t __stdcall cusparseCcsric02_analysis(cusparseHandle_t handle,
                                                       int m,
                                                       int nnz,
                                                       const cusparseMatDescr_t descrA,
                                                       const cuComplex *csrSortedValA,
                                                       const int *csrSortedRowPtrA,
                                                       const int *csrSortedColIndA, 
                                                       csric02Info_t info,
                                                       cusparseSolvePolicy_t policy,
                                                       void *pBuffer);

cusparseStatus_t __stdcall cusparseZcsric02_analysis(cusparseHandle_t handle,
                                                       int m,
                                                       int nnz,
                                                       const cusparseMatDescr_t descrA,
                                                       const cuDoubleComplex *csrSortedValA,
                                                       const int *csrSortedRowPtrA,
                                                       const int *csrSortedColIndA,
                                                       csric02Info_t info,
                                                       cusparseSolvePolicy_t policy,
                                                       void *pBuffer);

cusparseStatus_t __stdcall cusparseScsric02(cusparseHandle_t handle,
                                              int m,
                                              int nnz,
                                              const cusparseMatDescr_t descrA,
                                              float *csrSortedValA_valM,
                                              

                                              const int *csrSortedRowPtrA,
                                              const int *csrSortedColIndA,
                                              csric02Info_t info,
                                              cusparseSolvePolicy_t policy,
                                              void *pBuffer);

cusparseStatus_t __stdcall cusparseDcsric02(cusparseHandle_t handle,
                                              int m,
                                              int nnz,
                                              const cusparseMatDescr_t descrA,
                                              double *csrSortedValA_valM,
                                              

                                              const int *csrSortedRowPtrA,
                                              const int *csrSortedColIndA,
                                              csric02Info_t info,
                                              cusparseSolvePolicy_t policy,
                                              void *pBuffer);

cusparseStatus_t __stdcall cusparseCcsric02(cusparseHandle_t handle,
                                              int m,
                                              int nnz,
                                              const cusparseMatDescr_t descrA,
                                              cuComplex *csrSortedValA_valM,
                                              

                                              const int *csrSortedRowPtrA,
                                              const int *csrSortedColIndA,
                                              csric02Info_t info,
                                              cusparseSolvePolicy_t policy,
                                              void *pBuffer);

cusparseStatus_t __stdcall cusparseZcsric02(cusparseHandle_t handle,
                                              int m,
                                              int nnz,
                                              const cusparseMatDescr_t descrA,
                                              cuDoubleComplex *csrSortedValA_valM,
                                              

                                              const int *csrSortedRowPtrA,
                                              const int *csrSortedColIndA,
                                              csric02Info_t info,
                                              cusparseSolvePolicy_t policy,
                                              void *pBuffer);





cusparseStatus_t __stdcall cusparseXbsric02_zeroPivot(cusparseHandle_t handle,
                                                        bsric02Info_t info,
                                                        int *position);

cusparseStatus_t __stdcall cusparseSbsric02_bufferSize(cusparseHandle_t handle,
                                                         cusparseDirection_t dirA,
                                                         int mb,
                                                         int nnzb,
                                                         const cusparseMatDescr_t descrA,
                                                         float *bsrSortedVal,
                                                         const int *bsrSortedRowPtr,
                                                         const int *bsrSortedColInd,
                                                         int blockDim,
                                                         bsric02Info_t info,
                                                         int *pBufferSizeInBytes);

cusparseStatus_t __stdcall cusparseDbsric02_bufferSize(cusparseHandle_t handle,
                                                         cusparseDirection_t dirA,
                                                         int mb,
                                                         int nnzb,
                                                         const cusparseMatDescr_t descrA,
                                                         double *bsrSortedVal,
                                                         const int *bsrSortedRowPtr,
                                                         const int *bsrSortedColInd,
                                                         int blockDim,
                                                         bsric02Info_t info,
                                                         int *pBufferSizeInBytes);

cusparseStatus_t __stdcall cusparseCbsric02_bufferSize(cusparseHandle_t handle,
                                                         cusparseDirection_t dirA,
                                                         int mb,
                                                         int nnzb,
                                                         const cusparseMatDescr_t descrA,
                                                         cuComplex *bsrSortedVal,
                                                         const int *bsrSortedRowPtr,
                                                         const int *bsrSortedColInd,
                                                         int blockDim,
                                                         bsric02Info_t info,
                                                         int *pBufferSizeInBytes);

cusparseStatus_t __stdcall cusparseZbsric02_bufferSize(cusparseHandle_t handle,
                                                         cusparseDirection_t dirA,
                                                         int mb,
                                                         int nnzb,
                                                         const cusparseMatDescr_t descrA,
                                                         cuDoubleComplex *bsrSortedVal,
                                                         const int *bsrSortedRowPtr,
                                                         const int *bsrSortedColInd,
                                                         int blockDim,
                                                         bsric02Info_t info,
                                                         int *pBufferSizeInBytes); 

cusparseStatus_t __stdcall cusparseSbsric02_bufferSizeExt(cusparseHandle_t handle,
                                                         cusparseDirection_t dirA,
                                                         int mb,
                                                         int nnzb,
                                                         const cusparseMatDescr_t descrA,
                                                         float *bsrSortedVal,
                                                         const int *bsrSortedRowPtr,
                                                         const int *bsrSortedColInd,
                                                         int blockSize,
                                                         bsric02Info_t info,
                                                         size_t *pBufferSize);

cusparseStatus_t __stdcall cusparseDbsric02_bufferSizeExt(cusparseHandle_t handle,
                                                         cusparseDirection_t dirA,
                                                         int mb,
                                                         int nnzb,
                                                         const cusparseMatDescr_t descrA,
                                                         double *bsrSortedVal,
                                                         const int *bsrSortedRowPtr,
                                                         const int *bsrSortedColInd,
                                                         int blockSize,
                                                         bsric02Info_t info,
                                                         size_t *pBufferSize);

cusparseStatus_t __stdcall cusparseCbsric02_bufferSizeExt(cusparseHandle_t handle,
                                                         cusparseDirection_t dirA,
                                                         int mb,
                                                         int nnzb,
                                                         const cusparseMatDescr_t descrA,
                                                         cuComplex *bsrSortedVal,
                                                         const int *bsrSortedRowPtr,
                                                         const int *bsrSortedColInd,
                                                         int blockSize,
                                                         bsric02Info_t info,
                                                         size_t *pBufferSize);

cusparseStatus_t __stdcall cusparseZbsric02_bufferSizeExt(cusparseHandle_t handle,
                                                         cusparseDirection_t dirA,
                                                         int mb,
                                                         int nnzb,
                                                         const cusparseMatDescr_t descrA,
                                                         cuDoubleComplex *bsrSortedVal,
                                                         const int *bsrSortedRowPtr,
                                                         const int *bsrSortedColInd,
                                                         int blockSize,
                                                         bsric02Info_t info,
                                                         size_t *pBufferSize);



cusparseStatus_t __stdcall cusparseSbsric02_analysis(cusparseHandle_t handle,
                                                       cusparseDirection_t dirA,
                                                       int mb,
                                                       int nnzb,
                                                       const cusparseMatDescr_t descrA,
                                                       const float *bsrSortedVal,
                                                       const int *bsrSortedRowPtr,
                                                       const int *bsrSortedColInd,
                                                       int blockDim,
                                                       bsric02Info_t info,
                                                       cusparseSolvePolicy_t policy,
                                                       void *pInputBuffer);

cusparseStatus_t __stdcall cusparseDbsric02_analysis(cusparseHandle_t handle,
                                                       cusparseDirection_t dirA,
                                                       int mb,
                                                       int nnzb,
                                                       const cusparseMatDescr_t descrA,
                                                       const double *bsrSortedVal,
                                                       const int *bsrSortedRowPtr,
                                                       const int *bsrSortedColInd,
                                                       int blockDim,
                                                       bsric02Info_t info,
                                                       cusparseSolvePolicy_t policy,
                                                       void *pInputBuffer);

cusparseStatus_t __stdcall cusparseCbsric02_analysis(cusparseHandle_t handle,
                                                       cusparseDirection_t dirA,
                                                       int mb,
                                                       int nnzb,
                                                       const cusparseMatDescr_t descrA,
                                                       const cuComplex *bsrSortedVal,
                                                       const int *bsrSortedRowPtr,
                                                       const int *bsrSortedColInd,
                                                       int blockDim,
                                                       bsric02Info_t info,
                                                       cusparseSolvePolicy_t policy,
                                                       void *pInputBuffer);

cusparseStatus_t __stdcall cusparseZbsric02_analysis(cusparseHandle_t handle,
                                                       cusparseDirection_t dirA,
                                                       int mb,
                                                       int nnzb,
                                                       const cusparseMatDescr_t descrA,
                                                       const cuDoubleComplex *bsrSortedVal,
                                                       const int *bsrSortedRowPtr,
                                                       const int *bsrSortedColInd,
                                                       int blockDim,
                                                       bsric02Info_t info,
                                                       cusparseSolvePolicy_t policy,
                                                       void *pInputBuffer);

cusparseStatus_t __stdcall cusparseSbsric02(cusparseHandle_t handle,
                                              cusparseDirection_t dirA,
                                              int mb,
                                              int nnzb,
                                              const cusparseMatDescr_t descrA,
                                              float *bsrSortedVal,
                                              const int *bsrSortedRowPtr,
                                              const int *bsrSortedColInd,
                                              int blockDim,
                                              bsric02Info_t info,
                                              cusparseSolvePolicy_t policy,
                                              void *pBuffer);

cusparseStatus_t __stdcall cusparseDbsric02(cusparseHandle_t handle,
                                              cusparseDirection_t dirA,
                                              int mb,
                                              int nnzb,
                                              const cusparseMatDescr_t descrA,
                                              double *bsrSortedVal,
                                              const int *bsrSortedRowPtr,
                                              const int *bsrSortedColInd,
                                              int blockDim,
                                              bsric02Info_t info,
                                              cusparseSolvePolicy_t policy,
                                              void *pBuffer);

cusparseStatus_t __stdcall cusparseCbsric02(cusparseHandle_t handle,
                                              cusparseDirection_t dirA,
                                              int mb,
                                              int nnzb,
                                              const cusparseMatDescr_t descrA,
                                              cuComplex *bsrSortedVal,
                                              const int *bsrSortedRowPtr,
                                              const int *bsrSortedColInd,
                                              int blockDim,
                                              bsric02Info_t info,
                                              cusparseSolvePolicy_t policy,
                                              void *pBuffer);

cusparseStatus_t __stdcall cusparseZbsric02(cusparseHandle_t handle,
                                              cusparseDirection_t dirA,
                                              int mb,
                                              int nnzb,
                                              const cusparseMatDescr_t descrA,
                                              cuDoubleComplex *bsrSortedVal,
                                              const int *bsrSortedRowPtr,
                                              const int *bsrSortedColInd,
                                              int blockDim,
                                              bsric02Info_t info,
                                              cusparseSolvePolicy_t policy,
                                              void *pBuffer);







cusparseStatus_t __stdcall cusparseSgtsv(cusparseHandle_t handle,
                                           int m,        
                                           int n,        
                                           const float *dl, 
                                           const float  *d,   
                                           const float *du, 
                                           float *B,    
                                           int ldb);
                                 
cusparseStatus_t __stdcall cusparseDgtsv(cusparseHandle_t handle,
                                           int m,        
                                           int n,       
                                           const double *dl,  
                                           const double  *d,   
                                           const double *du, 
                                           double *B,    
                                           int ldb);
                                                                 
cusparseStatus_t __stdcall cusparseCgtsv(cusparseHandle_t handle,
                                           int m,        
                                           int n,       
                                           const cuComplex *dl, 
                                           const cuComplex  *d,  
                                           const cuComplex *du, 
                                           cuComplex *B,     
                                           int ldb);

cusparseStatus_t __stdcall cusparseZgtsv(cusparseHandle_t handle,
                                           int m,        
                                           int n,       
                                           const cuDoubleComplex *dl,  
                                           const cuDoubleComplex  *d,  
                                           const cuDoubleComplex *du,
                                           cuDoubleComplex *B,     
                                           int ldb);





                               
cusparseStatus_t __stdcall cusparseSgtsv_nopivot(cusparseHandle_t handle,
                                                   int m,        
                                                   int n,        
                                                   const float *dl, 
                                                   const float  *d,   
                                                   const float *du, 
                                                   float *B,    
                                                   int ldb);
                                 
cusparseStatus_t __stdcall cusparseDgtsv_nopivot(cusparseHandle_t handle,
                                                   int m,        
                                                   int n,       
                                                   const double *dl,  
                                                   const double  *d,   
                                                   const double *du, 
                                                   double *B,    
                                                   int ldb);
                                                                 
cusparseStatus_t __stdcall cusparseCgtsv_nopivot(cusparseHandle_t handle,
                                                   int m,        
                                                   int n,       
                                                   const cuComplex *dl, 
                                                   const cuComplex  *d,  
                                                   const cuComplex *du, 
                                                   cuComplex *B,     
                                                   int ldb);

cusparseStatus_t __stdcall cusparseZgtsv_nopivot(cusparseHandle_t handle,
                                                   int m,        
                                                   int n,       
                                                   const cuDoubleComplex *dl,  
                                                   const cuDoubleComplex  *d,  
                                                   const cuDoubleComplex *du,
                                                   cuDoubleComplex *B,     
                                                   int ldb);                               
                                  





cusparseStatus_t __stdcall cusparseSgtsvStridedBatch(cusparseHandle_t handle,
                                                       int m, 
                                                       const float *dl,
                                                       const float  *d,
                                                       const float *du,
                                                       float *x,
                                                       int batchCount,
                                                       int batchStride);
                                        
                                        
cusparseStatus_t __stdcall cusparseDgtsvStridedBatch(cusparseHandle_t handle,
                                                       int m, 
                                                       const double *dl,
                                                       const double  *d,
                                                       const double *du,
                                                       double *x,
                                                       int batchCount,
                                                       int batchStride);
                                        
cusparseStatus_t __stdcall cusparseCgtsvStridedBatch(cusparseHandle_t handle,
                                                       int m, 
                                                       const cuComplex *dl,
                                                       const cuComplex  *d,
                                                       const cuComplex *du,
                                                       cuComplex *x,
                                                       int batchCount,
                                                       int batchStride);
                                        
cusparseStatus_t __stdcall cusparseZgtsvStridedBatch(cusparseHandle_t handle,
                                                       int m, 
                                                       const cuDoubleComplex *dl,
                                                       const cuDoubleComplex  *d,
                                                       const cuDoubleComplex *du,
                                                       cuDoubleComplex *x,
                                                       int batchCount,
                                                       int batchStride);                                        
                                         




cusparseStatus_t __stdcall cusparseXcsrgemmNnz(cusparseHandle_t handle,
                                                 cusparseOperation_t transA, 
                                                 cusparseOperation_t transB, 
                                                 int m, 
                                                 int n, 
                                                 int k, 
                                                 const cusparseMatDescr_t descrA,
                                                 const int nnzA,
                                                 const int *csrSortedRowPtrA, 
                                                 const int *csrSortedColIndA,     
                                                 const cusparseMatDescr_t descrB,
                                                 const int nnzB,
                                                 const int *csrSortedRowPtrB, 
                                                 const int *csrSortedColIndB,  
                                                 const cusparseMatDescr_t descrC,                                                
                                                 int *csrSortedRowPtrC, 
                                                 int *nnzTotalDevHostPtr);                                              
                                              
cusparseStatus_t __stdcall cusparseScsrgemm(cusparseHandle_t handle,
                                              cusparseOperation_t transA, 
                                              cusparseOperation_t transB, 
                                              int m, 
                                              int n, 
                                              int k, 
                                              const cusparseMatDescr_t descrA,
                                              const int nnzA,      
                                              const float *csrSortedValA, 
                                              const int *csrSortedRowPtrA, 
                                              const int *csrSortedColIndA,
                                              const cusparseMatDescr_t descrB,
                                              const int nnzB,                                                    
                                              const float *csrSortedValB, 
                                              const int *csrSortedRowPtrB, 
                                              const int *csrSortedColIndB,
                                              const cusparseMatDescr_t descrC, 
                                              float *csrSortedValC, 
                                              const int *csrSortedRowPtrC, 
                                              int *csrSortedColIndC);

cusparseStatus_t __stdcall cusparseDcsrgemm(cusparseHandle_t handle,
                                              cusparseOperation_t transA, 
                                              cusparseOperation_t transB, 
                                              int m, 
                                              int n, 
                                              int k, 
                                              const cusparseMatDescr_t descrA,
                                              int nnzA,      
                                              const double *csrSortedValA, 
                                              const int *csrSortedRowPtrA, 
                                              const int *csrSortedColIndA,
                                              const cusparseMatDescr_t descrB,
                                              int nnzB,                                                    
                                              const double *csrSortedValB, 
                                              const int *csrSortedRowPtrB, 
                                              const int *csrSortedColIndB,
                                              const cusparseMatDescr_t descrC, 
                                              double *csrSortedValC, 
                                              const int *csrSortedRowPtrC, 
                                              int *csrSortedColIndC);
                                              
cusparseStatus_t __stdcall cusparseCcsrgemm(cusparseHandle_t handle,
                                              cusparseOperation_t transA, 
                                              cusparseOperation_t transB, 
                                              int m, 
                                              int n, 
                                              int k, 
                                              const cusparseMatDescr_t descrA,
                                              int nnzA,      
                                              const cuComplex *csrSortedValA, 
                                              const int *csrSortedRowPtrA, 
                                              const int *csrSortedColIndA,
                                              const cusparseMatDescr_t descrB,
                                              int nnzB,                                                    
                                              const cuComplex *csrSortedValB, 
                                              const int *csrSortedRowPtrB, 
                                              const int *csrSortedColIndB,
                                              const cusparseMatDescr_t descrC, 
                                              cuComplex *csrSortedValC, 
                                              const int *csrSortedRowPtrC, 
                                              int *csrSortedColIndC); 
                                              
cusparseStatus_t __stdcall cusparseZcsrgemm(cusparseHandle_t handle,
                                              cusparseOperation_t transA, 
                                              cusparseOperation_t transB, 
                                              int m, 
                                              int n, 
                                              int k, 
                                              const cusparseMatDescr_t descrA,
                                              int nnzA,      
                                              const cuDoubleComplex *csrSortedValA, 
                                              const int *csrSortedRowPtrA, 
                                              const int *csrSortedColIndA,
                                              const cusparseMatDescr_t descrB,
                                              int nnzB,                                                    
                                              const cuDoubleComplex *csrSortedValB, 
                                              const int *csrSortedRowPtrB, 
                                              const int *csrSortedColIndB,
                                              const cusparseMatDescr_t descrC, 
                                              cuDoubleComplex *csrSortedValC, 
                                              const int *csrSortedRowPtrC, 
                                              int *csrSortedColIndC);




cusparseStatus_t __stdcall cusparseCreateCsrgemm2Info(csrgemm2Info_t *info);

cusparseStatus_t __stdcall cusparseDestroyCsrgemm2Info(csrgemm2Info_t info);

cusparseStatus_t __stdcall cusparseScsrgemm2_bufferSizeExt(cusparseHandle_t handle,
                                                             int m,
                                                             int n,
                                                             int k,
                                                             const float *alpha,
                                                             const cusparseMatDescr_t descrA,
                                                             int nnzA,
                                                             const int *csrSortedRowPtrA,
                                                             const int *csrSortedColIndA,
                                                             const cusparseMatDescr_t descrB,
                                                             int nnzB,
                                                             const int *csrSortedRowPtrB,
                                                             const int *csrSortedColIndB,
                                                             const float *beta,
                                                             const cusparseMatDescr_t descrD,
                                                             int nnzD,
                                                             const int *csrSortedRowPtrD,
                                                             const int *csrSortedColIndD,
                                                             csrgemm2Info_t info,
                                                             size_t *pBufferSizeInBytes );

cusparseStatus_t __stdcall cusparseDcsrgemm2_bufferSizeExt(cusparseHandle_t handle,
                                                             int m,
                                                             int n,
                                                             int k,
                                                             const double *alpha,
                                                             const cusparseMatDescr_t descrA,
                                                             int nnzA,
                                                             const int *csrSortedRowPtrA,
                                                             const int *csrSortedColIndA,
                                                             const cusparseMatDescr_t descrB,
                                                             int nnzB,
                                                             const int *csrSortedRowPtrB,
                                                             const int *csrSortedColIndB,
                                                             const double *beta,
                                                             const cusparseMatDescr_t descrD,
                                                             int nnzD,
                                                             const int *csrSortedRowPtrD,
                                                             const int *csrSortedColIndD,
                                                             csrgemm2Info_t info,
                                                             size_t *pBufferSizeInBytes );

cusparseStatus_t __stdcall cusparseCcsrgemm2_bufferSizeExt(cusparseHandle_t handle,
                                                             int m,
                                                             int n,
                                                             int k,
                                                             const cuComplex *alpha,
                                                             const cusparseMatDescr_t descrA,
                                                             int nnzA,
                                                             const int *csrSortedRowPtrA,
                                                             const int *csrSortedColIndA,
                                                             const cusparseMatDescr_t descrB,
                                                             int nnzB,
                                                             const int *csrSortedRowPtrB,
                                                             const int *csrSortedColIndB,
                                                             const cuComplex *beta,
                                                             const cusparseMatDescr_t descrD,
                                                             int nnzD,
                                                             const int *csrSortedRowPtrD,
                                                             const int *csrSortedColIndD,
                                                             csrgemm2Info_t info,
                                                             size_t *pBufferSizeInBytes );

cusparseStatus_t __stdcall cusparseZcsrgemm2_bufferSizeExt(cusparseHandle_t handle,
                                                             int m,
                                                             int n,
                                                             int k,
                                                             const cuDoubleComplex *alpha,
                                                             const cusparseMatDescr_t descrA,
                                                             int nnzA,
                                                             const int *csrSortedRowPtrA,
                                                             const int *csrSortedColIndA,
                                                             const cusparseMatDescr_t descrB,
                                                             int nnzB,
                                                             const int *csrSortedRowPtrB,
                                                             const int *csrSortedColIndB,
                                                             const cuDoubleComplex *beta,
                                                             const cusparseMatDescr_t descrD,
                                                             int nnzD,
                                                             const int *csrSortedRowPtrD,
                                                             const int *csrSortedColIndD,
                                                             csrgemm2Info_t info,
                                                             size_t *pBufferSizeInBytes );


cusparseStatus_t __stdcall cusparseXcsrgemm2Nnz(cusparseHandle_t handle,
                                                  int m,
                                                  int n, 
                                                  int k,
                                                  const cusparseMatDescr_t descrA,
                                                  int nnzA,
                                                  const int *csrSortedRowPtrA,
                                                  const int *csrSortedColIndA,
                                                  const cusparseMatDescr_t descrB,
                                                  int nnzB,
                                                  const int *csrSortedRowPtrB,
                                                  const int *csrSortedColIndB,
                                                  const cusparseMatDescr_t descrD,
                                                  int nnzD,
                                                  const int *csrSortedRowPtrD,
                                                  const int *csrSortedColIndD,
                                                  const cusparseMatDescr_t descrC,
                                                  int *csrSortedRowPtrC,
                                                  int *nnzTotalDevHostPtr,
                                                  const csrgemm2Info_t info,
                                                  void *pBuffer );


cusparseStatus_t __stdcall cusparseScsrgemm2(cusparseHandle_t handle,
                                               int m,
                                               int n,
                                               int k,
                                               const float *alpha,
                                               const cusparseMatDescr_t descrA,
                                               int nnzA,
                                               const float *csrSortedValA,
                                               const int *csrSortedRowPtrA,
                                               const int *csrSortedColIndA,
                                               const cusparseMatDescr_t descrB,
                                               int nnzB,
                                               const float *csrSortedValB,
                                               const int *csrSortedRowPtrB,
                                               const int *csrSortedColIndB,
                                               const float *beta,
                                               const cusparseMatDescr_t descrD,
                                               int nnzD,
                                               const float *csrSortedValD,
                                               const int *csrSortedRowPtrD,
                                               const int *csrSortedColIndD,
                                               const cusparseMatDescr_t descrC,
                                               float *csrSortedValC,
                                               const int *csrSortedRowPtrC,
                                               int *csrSortedColIndC,
                                               const csrgemm2Info_t info,
                                               void *pBuffer );

cusparseStatus_t __stdcall cusparseDcsrgemm2(cusparseHandle_t handle,
                                               int m,
                                               int n,
                                               int k,
                                               const double *alpha,
                                               const cusparseMatDescr_t descrA,
                                               int nnzA,
                                               const double *csrSortedValA,
                                               const int *csrSortedRowPtrA,
                                               const int *csrSortedColIndA,
                                               const cusparseMatDescr_t descrB,
                                               int nnzB,
                                               const double *csrSortedValB,
                                               const int *csrSortedRowPtrB,
                                               const int *csrSortedColIndB,
                                               const double *beta,
                                               const cusparseMatDescr_t descrD,
                                               int nnzD,
                                               const double *csrSortedValD,
                                               const int *csrSortedRowPtrD,
                                               const int *csrSortedColIndD,
                                               const cusparseMatDescr_t descrC,
                                               double *csrSortedValC,
                                               const int *csrSortedRowPtrC,
                                               int *csrSortedColIndC,
                                               const csrgemm2Info_t info,
                                               void *pBuffer );


cusparseStatus_t __stdcall cusparseCcsrgemm2(cusparseHandle_t handle,
                                               int m,
                                               int n,
                                               int k,
                                               const cuComplex *alpha,
                                               const cusparseMatDescr_t descrA,
                                               int nnzA,
                                               const cuComplex *csrSortedValA,
                                               const int *csrSortedRowPtrA,
                                               const int *csrSortedColIndA,
                                               const cusparseMatDescr_t descrB,
                                               int nnzB,
                                               const cuComplex *csrSortedValB,
                                               const int *csrSortedRowPtrB,
                                               const int *csrSortedColIndB,
                                               const cuComplex *beta,
                                               const cusparseMatDescr_t descrD,
                                               int nnzD,
                                               const cuComplex *csrSortedValD,
                                               const int *csrSortedRowPtrD,
                                               const int *csrSortedColIndD,
                                               const cusparseMatDescr_t descrC,
                                               cuComplex *csrSortedValC,
                                               const int *csrSortedRowPtrC,
                                               int *csrSortedColIndC,
                                               const csrgemm2Info_t info,
                                               void *pBuffer );


cusparseStatus_t __stdcall cusparseZcsrgemm2(cusparseHandle_t handle,
                                               int m,
                                               int n,
                                               int k,
                                               const cuDoubleComplex *alpha,
                                               const cusparseMatDescr_t descrA,
                                               int nnzA,
                                               const cuDoubleComplex *csrSortedValA,
                                               const int *csrSortedRowPtrA,
                                               const int *csrSortedColIndA,
                                               const cusparseMatDescr_t descrB,
                                               int nnzB,
                                               const cuDoubleComplex *csrSortedValB,
                                               const int *csrSortedRowPtrB,
                                               const int *csrSortedColIndB,
                                               const cuDoubleComplex *beta,
                                               const cusparseMatDescr_t descrD,
                                               int nnzD,
                                               const cuDoubleComplex *csrSortedValD,
                                               const int *csrSortedRowPtrD,
                                               const int *csrSortedColIndD,
                                               const cusparseMatDescr_t descrC,
                                               cuDoubleComplex *csrSortedValC,
                                               const int *csrSortedRowPtrC,
                                               int *csrSortedColIndC,
                                               const csrgemm2Info_t info,
                                               void *pBuffer );




cusparseStatus_t __stdcall cusparseXcsrgeamNnz(cusparseHandle_t handle,
                                                 int m,
                                                 int n,
                                                 const cusparseMatDescr_t descrA,
                                                 int nnzA,
                                                 const int *csrSortedRowPtrA,
                                                 const int *csrSortedColIndA,
                                                 const cusparseMatDescr_t descrB,
                                                 int nnzB,
                                                 const int *csrSortedRowPtrB,
                                                 const int *csrSortedColIndB,
                                                 const cusparseMatDescr_t descrC,
                                                 int *csrSortedRowPtrC,
                                                 int *nnzTotalDevHostPtr);

cusparseStatus_t __stdcall cusparseScsrgeam(cusparseHandle_t handle,
                                              int m,
                                              int n,
                                              const float *alpha,
                                              const cusparseMatDescr_t descrA,
                                              int nnzA,
                                              const float *csrSortedValA,
                                              const int *csrSortedRowPtrA,
                                              const int *csrSortedColIndA,
                                              const float *beta,
                                              const cusparseMatDescr_t descrB,
                                              int nnzB,
                                              const float *csrSortedValB,
                                              const int *csrSortedRowPtrB,
                                              const int *csrSortedColIndB,
                                              const cusparseMatDescr_t descrC,
                                              float *csrSortedValC,
                                              int *csrSortedRowPtrC,
                                              int *csrSortedColIndC);

cusparseStatus_t __stdcall cusparseDcsrgeam(cusparseHandle_t handle,
                                              int m,
                                              int n,
                                              const double *alpha,
                                              const cusparseMatDescr_t descrA,
                                              int nnzA,
                                              const double *csrSortedValA,
                                              const int *csrSortedRowPtrA,
                                              const int *csrSortedColIndA,
                                              const double *beta,
                                              const cusparseMatDescr_t descrB,
                                              int nnzB,
                                              const double *csrSortedValB,
                                              const int *csrSortedRowPtrB,
                                              const int *csrSortedColIndB,
                                              const cusparseMatDescr_t descrC,
                                              double *csrSortedValC,
                                              int *csrSortedRowPtrC,
                                              int *csrSortedColIndC);
    
cusparseStatus_t __stdcall cusparseCcsrgeam(cusparseHandle_t handle,
                                              int m,
                                              int n,
                                              const cuComplex *alpha,
                                              const cusparseMatDescr_t descrA,
                                              int nnzA,
                                              const cuComplex *csrSortedValA,
                                              const int *csrSortedRowPtrA,
                                              const int *csrSortedColIndA,
                                              const cuComplex *beta,
                                              const cusparseMatDescr_t descrB,
                                              int nnzB,
                                              const cuComplex *csrSortedValB,
                                              const int *csrSortedRowPtrB,
                                              const int *csrSortedColIndB,
                                              const cusparseMatDescr_t descrC,
                                              cuComplex *csrSortedValC,
                                              int *csrSortedRowPtrC,
                                              int *csrSortedColIndC);
    
cusparseStatus_t __stdcall cusparseZcsrgeam(cusparseHandle_t handle,
                                              int m,
                                              int n,
                                              const cuDoubleComplex *alpha,
                                              const cusparseMatDescr_t descrA,
                                              int nnzA,
                                              const cuDoubleComplex *csrSortedValA,
                                              const int *csrSortedRowPtrA,
                                              const int *csrSortedColIndA,
                                              const cuDoubleComplex *beta,
                                              const cusparseMatDescr_t descrB,
                                              int nnzB,
                                              const cuDoubleComplex *csrSortedValB,
                                              const int *csrSortedRowPtrB,
                                              const int *csrSortedColIndB,
                                              const cusparseMatDescr_t descrC,
                                              cuDoubleComplex *csrSortedValC,
                                              int *csrSortedRowPtrC,
                                              int *csrSortedColIndC);





cusparseStatus_t __stdcall cusparseScsrcolor(cusparseHandle_t handle,
                                               int m, 
                                               int nnz,
                                               const cusparseMatDescr_t descrA, 
                                               const float *csrSortedValA, 
                                               const int *csrSortedRowPtrA, 
                                               const int *csrSortedColIndA,
                                               const float *fractionToColor,
                                               int *ncolors,
                                               int *coloring,
                                               int *reordering,
                                               const cusparseColorInfo_t info);

cusparseStatus_t __stdcall cusparseDcsrcolor(cusparseHandle_t handle,
                                               int m, 
                                               int nnz,
                                               const cusparseMatDescr_t descrA, 
                                               const double *csrSortedValA, 
                                               const int *csrSortedRowPtrA, 
                                               const int *csrSortedColIndA,
                                               const double *fractionToColor,
                                               int *ncolors,
                                               int *coloring,
                                               int *reordering,
                                               const cusparseColorInfo_t info);

cusparseStatus_t __stdcall cusparseCcsrcolor(cusparseHandle_t handle,
                                               int m, 
                                               int nnz,
                                               const cusparseMatDescr_t descrA, 
                                               const cuComplex *csrSortedValA, 
                                               const int *csrSortedRowPtrA, 
                                               const int *csrSortedColIndA,
                                               const float *fractionToColor,
                                               int *ncolors,
                                               int *coloring,
                                               int *reordering,
                                               const cusparseColorInfo_t info);

cusparseStatus_t __stdcall cusparseZcsrcolor(cusparseHandle_t handle,
                                               int m, 
                                               int nnz,
                                               const cusparseMatDescr_t descrA, 
                                               const cuDoubleComplex *csrSortedValA, 
                                               const int *csrSortedRowPtrA, 
                                               const int *csrSortedColIndA,
                                               const double *fractionToColor,
                                               int *ncolors,
                                               int *coloring,
                                               int *reordering,
                                               const cusparseColorInfo_t info);





cusparseStatus_t __stdcall cusparseSnnz(cusparseHandle_t handle, 
                                          cusparseDirection_t dirA, 
                                          int m, 
                                          int n, 
                                          const cusparseMatDescr_t  descrA,
                                          const float *A, 
                                          int lda, 
                                          int *nnzPerRowCol, 
                                          int *nnzTotalDevHostPtr);

cusparseStatus_t __stdcall cusparseDnnz(cusparseHandle_t handle, 
                                          cusparseDirection_t dirA,  
                                          int m, 
                                          int n, 
                                          const cusparseMatDescr_t  descrA,
                                          const double *A, 
                                          int lda, 
                                          int *nnzPerRowCol, 
                                          int *nnzTotalDevHostPtr);

cusparseStatus_t __stdcall cusparseCnnz(cusparseHandle_t handle, 
                                          cusparseDirection_t dirA,  
                                          int m, 
                                          int n, 
                                          const cusparseMatDescr_t  descrA,
                                          const cuComplex *A,
                                          int lda, 
                                          int *nnzPerRowCol, 
                                          int *nnzTotalDevHostPtr);

cusparseStatus_t __stdcall cusparseZnnz(cusparseHandle_t handle, 
                                          cusparseDirection_t dirA,  
                                          int m, 
                                          int n, 
                                          const cusparseMatDescr_t  descrA,
                                          const cuDoubleComplex *A,
                                          int lda, 
                                          int *nnzPerRowCol, 
                                          int *nnzTotalDevHostPtr);





cusparseStatus_t __stdcall cusparseSnnz_compress(cusparseHandle_t handle, 
                                          int m, 
                                          const cusparseMatDescr_t descr,
                                          const float *values, 
                                          const int *rowPtr, 
                                          int *nnzPerRow, 
                                          int *nnzTotal,
                                          float tol);

cusparseStatus_t __stdcall cusparseDnnz_compress(cusparseHandle_t handle, 
                                          int m, 
                                          const cusparseMatDescr_t descr,
                                          const double *values, 
                                          const int *rowPtr, 
                                          int *nnzPerRow, 
                                          int *nnzTotal,
                                          double tol);

cusparseStatus_t __stdcall cusparseCnnz_compress(cusparseHandle_t handle, 
                                          int m, 
                                          const cusparseMatDescr_t descr,
                                          const cuComplex *values, 
                                          const int *rowPtr, 
                                          int *nnzPerRow, 
                                          int *nnzTotal,
                                          cuComplex tol);

cusparseStatus_t __stdcall cusparseZnnz_compress(cusparseHandle_t handle, 
                                          int m, 
                                          const cusparseMatDescr_t descr,
                                          const cuDoubleComplex *values, 
                                          const int *rowPtr, 
                                          int *nnzPerRow, 
                                          int *nnzTotal,
                                          cuDoubleComplex tol);



cusparseStatus_t __stdcall cusparseScsr2csr_compress(cusparseHandle_t handle,
                                                      int m, 
                                                      int n,
                                                      const cusparseMatDescr_t descra,
                                                      const float *inVal,
                                                      const int *inColInd,
                                                      const int * inRowPtr, 
                                                      int inNnz,
                                                      int *nnzPerRow, 
                                                      float *outVal,
                                                      int *outColInd,
                                                      int *outRowPtr,
                                                      float tol);        

cusparseStatus_t __stdcall cusparseDcsr2csr_compress(cusparseHandle_t handle,
                                                      int m, 
                                                      int n,
                                                      const cusparseMatDescr_t descra,
                                                      const double *inVal, 
                                                      const int *inColInd,
                                                      const int * inRowPtr,  
                                                      int inNnz,
                                                      int *nnzPerRow, 
                                                      double *outVal,
                                                      int *outColInd,
                                                      int *outRowPtr,
                                                      double tol);

cusparseStatus_t __stdcall cusparseCcsr2csr_compress(cusparseHandle_t handle,
                                                        int m, 
                                                        int n,
                                                        const cusparseMatDescr_t descra,
                                                        const cuComplex *inVal, 
                                                        const int *inColInd,
                                                        const int * inRowPtr,  
                                                        int inNnz,
                                                        int *nnzPerRow, 
                                                        cuComplex *outVal,
                                                        int *outColInd,
                                                        int *outRowPtr,
                                                        cuComplex tol);                       

cusparseStatus_t __stdcall cusparseZcsr2csr_compress(cusparseHandle_t handle,
                                                      int m, 
                                                      int n,
                                                      const cusparseMatDescr_t descra,
                                                      const cuDoubleComplex *inVal, 
                                                      const int *inColInd,
                                                      const int * inRowPtr,  
                                                      int inNnz,
                                                      int *nnzPerRow, 
                                                      cuDoubleComplex *outVal,
                                                      int *outColInd,
                                                      int *outRowPtr,
                                                      cuDoubleComplex tol);                        
                                                                                                        



cusparseStatus_t __stdcall cusparseSdense2csr(cusparseHandle_t handle,
                                                int m, 
                                                int n,  
                                                const cusparseMatDescr_t descrA,                            
                                                const float *A, 
                                                int lda,
                                                const int *nnzPerRow,                                                 
                                                float *csrSortedValA, 
                                                int *csrSortedRowPtrA, 
                                                int *csrSortedColIndA);
 
cusparseStatus_t __stdcall cusparseDdense2csr(cusparseHandle_t handle,
                                                int m, 
                                                int n, 
                                                const cusparseMatDescr_t descrA,                                     
                                                const double *A, 
                                                int lda, 
                                                const int *nnzPerRow,                                                 
                                                double *csrSortedValA, 
                                                int *csrSortedRowPtrA, 
                                                int *csrSortedColIndA);
    
cusparseStatus_t __stdcall cusparseCdense2csr(cusparseHandle_t handle,
                                                int m, 
                                                int n, 
                                                const cusparseMatDescr_t descrA,                                     
                                                const cuComplex *A, 
                                                int lda, 
                                                const int *nnzPerRow,                                                 
                                                cuComplex *csrSortedValA, 
                                                int *csrSortedRowPtrA, 
                                                int *csrSortedColIndA);
 
cusparseStatus_t __stdcall cusparseZdense2csr(cusparseHandle_t handle,
                                                int m, 
                                                int n,  
                                                const cusparseMatDescr_t descrA,                                    
                                                const cuDoubleComplex *A, 
                                                int lda, 
                                                const int *nnzPerRow,                                                 
                                                cuDoubleComplex *csrSortedValA, 
                                                int *csrSortedRowPtrA, 
                                                int *csrSortedColIndA);



cusparseStatus_t __stdcall cusparseScsr2dense(cusparseHandle_t handle,
                                                int m, 
                                                int n, 
                                                const cusparseMatDescr_t descrA,  
                                                const float *csrSortedValA, 
                                                const int *csrSortedRowPtrA, 
                                                const int *csrSortedColIndA,
                                                float *A, 
                                                int lda);
    
cusparseStatus_t __stdcall cusparseDcsr2dense(cusparseHandle_t handle, 
                                                int m, 
                                                int n, 
                                                const cusparseMatDescr_t descrA, 
                                                const double *csrSortedValA, 
                                                const int *csrSortedRowPtrA, 
                                                const int *csrSortedColIndA,
                                                double *A, 
                                                int lda);
    
cusparseStatus_t __stdcall cusparseCcsr2dense(cusparseHandle_t handle, 
                                                int m, 
                                                int n, 
                                                const cusparseMatDescr_t descrA, 
                                                const cuComplex *csrSortedValA, 
                                                const int *csrSortedRowPtrA, 
                                                const int *csrSortedColIndA,
                                                cuComplex *A, 
                                                int lda);
    
cusparseStatus_t __stdcall cusparseZcsr2dense(cusparseHandle_t handle,
                                                int m, 
                                                int n, 
                                                const cusparseMatDescr_t descrA, 
                                                const cuDoubleComplex *csrSortedValA, 
                                                const int *csrSortedRowPtrA, 
                                                const int *csrSortedColIndA,
                                                cuDoubleComplex *A, 
                                                int lda); 
                                 



cusparseStatus_t __stdcall cusparseSdense2csc(cusparseHandle_t handle,
                                                int m, 
                                                int n,  
                                                const cusparseMatDescr_t descrA,                            
                                                const float *A, 
                                                int lda,
                                                const int *nnzPerCol,                                                 
                                                float *cscSortedValA, 
                                                int *cscSortedRowIndA, 
                                                int *cscSortedColPtrA);
 
cusparseStatus_t __stdcall cusparseDdense2csc(cusparseHandle_t handle,
                                                int m, 
                                                int n, 
                                                const cusparseMatDescr_t descrA,                                     
                                                const double *A, 
                                                int lda,
                                                const int *nnzPerCol,                                                
                                                double *cscSortedValA, 
                                                int *cscSortedRowIndA, 
                                                int *cscSortedColPtrA); 

cusparseStatus_t __stdcall cusparseCdense2csc(cusparseHandle_t handle,
                                                int m, 
                                                int n, 
                                                const cusparseMatDescr_t descrA,                                     
                                                const cuComplex *A, 
                                                int lda, 
                                                const int *nnzPerCol,                                                 
                                                cuComplex *cscSortedValA, 
                                                int *cscSortedRowIndA, 
                                                int *cscSortedColPtrA);
    
cusparseStatus_t __stdcall cusparseZdense2csc(cusparseHandle_t handle,
                                                int m, 
                                                int n,  
                                                const cusparseMatDescr_t descrA,                                    
                                                const cuDoubleComplex *A, 
                                                int lda, 
                                                const int *nnzPerCol,
                                                cuDoubleComplex *cscSortedValA, 
                                                int *cscSortedRowIndA, 
                                                int *cscSortedColPtrA);



cusparseStatus_t __stdcall cusparseScsc2dense(cusparseHandle_t handle,
                                                int m, 
                                                int n, 
                                                const cusparseMatDescr_t descrA,  
                                                const float *cscSortedValA, 
                                                const int *cscSortedRowIndA, 
                                                const int *cscSortedColPtrA,
                                                float *A, 
                                                int lda);
    
cusparseStatus_t __stdcall cusparseDcsc2dense(cusparseHandle_t handle,
                                                int m, 
                                                int n, 
                                                const cusparseMatDescr_t descrA, 
                                                const double *cscSortedValA, 
                                                const int *cscSortedRowIndA, 
                                                const int *cscSortedColPtrA,
                                                double *A, 
                                                int lda);

cusparseStatus_t __stdcall cusparseCcsc2dense(cusparseHandle_t handle,
                                                int m, 
                                                int n, 
                                                const cusparseMatDescr_t descrA, 
                                                const cuComplex *cscSortedValA, 
                                                const int *cscSortedRowIndA, 
                                                const int *cscSortedColPtrA,
                                                cuComplex *A, 
                                                int lda);

cusparseStatus_t __stdcall cusparseZcsc2dense(cusparseHandle_t handle,
                                                int m, 
                                                int n, 
                                                const cusparseMatDescr_t descrA, 
                                                const cuDoubleComplex *cscSortedValA, 
                                                const int *cscSortedRowIndA, 
                                                const int *cscSortedColPtrA,
                                                cuDoubleComplex *A, 
                                                int lda);
    



cusparseStatus_t __stdcall cusparseXcoo2csr(cusparseHandle_t handle,
                                              const int *cooRowInd, 
                                              int nnz, 
                                              int m, 
                                              int *csrSortedRowPtr, 
                                              cusparseIndexBase_t idxBase);
    



cusparseStatus_t __stdcall cusparseXcsr2coo(cusparseHandle_t handle,
                                              const int *csrSortedRowPtr, 
                                              int nnz, 
                                              int m, 
                                              int *cooRowInd, 
                                              cusparseIndexBase_t idxBase);     
    



cusparseStatus_t __stdcall cusparseCsr2cscEx(cusparseHandle_t handle,
                                              int m, 
                                              int n, 
                                              int nnz,
                                              const void  *csrSortedVal, 
                                              cudaDataType csrSortedValtype,
                                              const int *csrSortedRowPtr, 
                                              const int *csrSortedColInd, 
                                              void *cscSortedVal, 
                                              cudaDataType cscSortedValtype,
                                              int *cscSortedRowInd, 
                                              int *cscSortedColPtr, 
                                              cusparseAction_t copyValues, 
                                              cusparseIndexBase_t idxBase,
                                              cudaDataType executiontype);
    
cusparseStatus_t __stdcall cusparseScsr2csc(cusparseHandle_t handle,
                                              int m, 
                                              int n, 
                                              int nnz,
                                              const float  *csrSortedVal, 
                                              const int *csrSortedRowPtr, 
                                              const int *csrSortedColInd, 
                                              float *cscSortedVal, 
                                              int *cscSortedRowInd, 
                                              int *cscSortedColPtr, 
                                              cusparseAction_t copyValues, 
                                              cusparseIndexBase_t idxBase);
    
cusparseStatus_t __stdcall cusparseDcsr2csc(cusparseHandle_t handle,
                                              int m, 
                                              int n,
                                              int nnz,
                                              const double  *csrSortedVal, 
                                              const int *csrSortedRowPtr, 
                                              const int *csrSortedColInd,
                                              double *cscSortedVal, 
                                              int *cscSortedRowInd, 
                                              int *cscSortedColPtr,
                                              cusparseAction_t copyValues, 
                                              cusparseIndexBase_t idxBase);

cusparseStatus_t __stdcall cusparseCcsr2csc(cusparseHandle_t handle,
                                              int m, 
                                              int n,
                                              int nnz,
                                              const cuComplex  *csrSortedVal, 
                                              const int *csrSortedRowPtr, 
                                              const int *csrSortedColInd,
                                              cuComplex *cscSortedVal, 
                                              int *cscSortedRowInd, 
                                              int *cscSortedColPtr, 
                                              cusparseAction_t copyValues, 
                                              cusparseIndexBase_t idxBase);

cusparseStatus_t __stdcall cusparseZcsr2csc(cusparseHandle_t handle,
                                              int m, 
                                              int n, 
                                              int nnz,
                                              const cuDoubleComplex *csrSortedVal, 
                                              const int *csrSortedRowPtr, 
                                              const int *csrSortedColInd, 
                                              cuDoubleComplex *cscSortedVal, 
                                              int *cscSortedRowInd, 
                                              int *cscSortedColPtr,
                                              cusparseAction_t copyValues, 
                                              cusparseIndexBase_t idxBase);



cusparseStatus_t __stdcall cusparseSdense2hyb(cusparseHandle_t handle,
                                                int m,
                                                int n,
                                                const cusparseMatDescr_t descrA,
                                                const float *A,
                                                int lda,
                                                const int *nnzPerRow,
                                                cusparseHybMat_t hybA,
                                                int userEllWidth,
                                                cusparseHybPartition_t partitionType);

cusparseStatus_t __stdcall cusparseDdense2hyb(cusparseHandle_t handle,
                                                int m,
                                                int n,
                                                const cusparseMatDescr_t descrA,
                                                const double *A,
                                                int lda,
                                                const int *nnzPerRow,
                                                cusparseHybMat_t hybA,
                                                int userEllWidth,
                                                cusparseHybPartition_t partitionType);

cusparseStatus_t __stdcall cusparseCdense2hyb(cusparseHandle_t handle,
                                                int m,
                                                int n,
                                                const cusparseMatDescr_t descrA,
                                                const cuComplex *A,
                                                int lda,
                                                const int *nnzPerRow,
                                                cusparseHybMat_t hybA,
                                                int userEllWidth,
                                                cusparseHybPartition_t partitionType);

cusparseStatus_t __stdcall cusparseZdense2hyb(cusparseHandle_t handle,
                                                int m,
                                                int n,
                                                const cusparseMatDescr_t descrA,
                                                const cuDoubleComplex *A,
                                                int lda,
                                                const int *nnzPerRow,
                                                cusparseHybMat_t hybA,
                                                int userEllWidth,
                                                cusparseHybPartition_t partitionType);



cusparseStatus_t __stdcall cusparseShyb2dense(cusparseHandle_t handle,
                                                const cusparseMatDescr_t descrA,
                                                const cusparseHybMat_t hybA,
                                                float *A,
                                                int lda);

cusparseStatus_t __stdcall cusparseDhyb2dense(cusparseHandle_t handle,
                                                const cusparseMatDescr_t descrA,
                                                const cusparseHybMat_t hybA,
                                                double *A,
                                                int lda);
    
cusparseStatus_t __stdcall cusparseChyb2dense(cusparseHandle_t handle,
                                                const cusparseMatDescr_t descrA,
                                                const cusparseHybMat_t hybA,
                                                cuComplex *A,
                                                int lda);

cusparseStatus_t __stdcall cusparseZhyb2dense(cusparseHandle_t handle,
                                                const cusparseMatDescr_t descrA,
                                                const cusparseHybMat_t hybA,
                                                cuDoubleComplex *A,
                                                int lda);



cusparseStatus_t __stdcall cusparseScsr2hyb(cusparseHandle_t handle,
                                              int m,
                                              int n,
                                              const cusparseMatDescr_t descrA,
                                              const float *csrSortedValA,
                                              const int *csrSortedRowPtrA,
                                              const int *csrSortedColIndA,
                                              cusparseHybMat_t hybA,
                                              int userEllWidth,
                                              cusparseHybPartition_t partitionType);
    
cusparseStatus_t __stdcall cusparseDcsr2hyb(cusparseHandle_t handle,
                                              int m,
                                              int n,
                                              const cusparseMatDescr_t descrA,
                                              const double *csrSortedValA,
                                              const int *csrSortedRowPtrA,
                                              const int *csrSortedColIndA,
                                              cusparseHybMat_t hybA,
                                              int userEllWidth,
                                              cusparseHybPartition_t partitionType);

cusparseStatus_t __stdcall cusparseCcsr2hyb(cusparseHandle_t handle,
                                              int m,
                                              int n,
                                              const cusparseMatDescr_t descrA,
                                              const cuComplex *csrSortedValA,
                                              const int *csrSortedRowPtrA,
                                              const int *csrSortedColIndA,
                                              cusparseHybMat_t hybA,
                                              int userEllWidth,
                                              cusparseHybPartition_t partitionType);

cusparseStatus_t __stdcall cusparseZcsr2hyb(cusparseHandle_t handle,
                                              int m,
                                              int n,
                                              const cusparseMatDescr_t descrA,
                                              const cuDoubleComplex *csrSortedValA,
                                              const int *csrSortedRowPtrA,
                                              const int *csrSortedColIndA,
                                              cusparseHybMat_t hybA,
                                              int userEllWidth,
                                              cusparseHybPartition_t partitionType);



cusparseStatus_t __stdcall cusparseShyb2csr(cusparseHandle_t handle,
                                              const cusparseMatDescr_t descrA,
                                              const cusparseHybMat_t hybA,
                                              float *csrSortedValA,
                                              int *csrSortedRowPtrA,
                                              int *csrSortedColIndA);

cusparseStatus_t __stdcall cusparseDhyb2csr(cusparseHandle_t handle,
                                              const cusparseMatDescr_t descrA,
                                              const cusparseHybMat_t hybA,
                                              double *csrSortedValA,
                                              int *csrSortedRowPtrA,
                                              int *csrSortedColIndA);              

cusparseStatus_t __stdcall cusparseChyb2csr(cusparseHandle_t handle,
                                              const cusparseMatDescr_t descrA,
                                              const cusparseHybMat_t hybA,
                                              cuComplex *csrSortedValA,
                                              int *csrSortedRowPtrA,
                                              int *csrSortedColIndA);

cusparseStatus_t __stdcall cusparseZhyb2csr(cusparseHandle_t handle,
                                              const cusparseMatDescr_t descrA,
                                              const cusparseHybMat_t hybA,
                                              cuDoubleComplex *csrSortedValA,
                                              int *csrSortedRowPtrA,
                                              int *csrSortedColIndA);



cusparseStatus_t __stdcall cusparseScsc2hyb(cusparseHandle_t handle,
                                              int m,
                                              int n,
                                              const cusparseMatDescr_t descrA,
                                              const float *cscSortedValA,
                                              const int *cscSortedRowIndA,
                                              const int *cscSortedColPtrA,
                                              cusparseHybMat_t hybA,
                                              int userEllWidth,
                                              cusparseHybPartition_t partitionType);

cusparseStatus_t __stdcall cusparseDcsc2hyb(cusparseHandle_t handle,
                                              int m,
                                              int n,
                                              const cusparseMatDescr_t descrA,
                                              const double *cscSortedValA,
                                              const int *cscSortedRowIndA,
                                              const int *cscSortedColPtrA,
                                              cusparseHybMat_t hybA,
                                              int userEllWidth,
                                              cusparseHybPartition_t partitionType);

cusparseStatus_t __stdcall cusparseCcsc2hyb(cusparseHandle_t handle,
                                              int m,
                                              int n,
                                              const cusparseMatDescr_t descrA,
                                              const cuComplex *cscSortedValA,
                                              const int *cscSortedRowIndA,
                                              const int *cscSortedColPtrA,
                                              cusparseHybMat_t hybA,
                                              int userEllWidth,
                                              cusparseHybPartition_t partitionType);

cusparseStatus_t __stdcall cusparseZcsc2hyb(cusparseHandle_t handle,
                                              int m,
                                              int n,
                                              const cusparseMatDescr_t descrA,
                                              const cuDoubleComplex *cscSortedValA,
                                              const int *cscSortedRowIndA,
                                              const int *cscSortedColPtrA,
                                              cusparseHybMat_t hybA,
                                              int userEllWidth,
                                              cusparseHybPartition_t partitionType);



cusparseStatus_t __stdcall cusparseShyb2csc(cusparseHandle_t handle,
                                              const cusparseMatDescr_t descrA,
                                              const cusparseHybMat_t hybA,
                                              float *cscSortedVal,
                                              int *cscSortedRowInd,
                                              int *cscSortedColPtr);

cusparseStatus_t __stdcall cusparseDhyb2csc(cusparseHandle_t handle,
                                              const cusparseMatDescr_t descrA,
                                              const cusparseHybMat_t hybA,
                                              double *cscSortedVal,
                                              int *cscSortedRowInd,
                                              int *cscSortedColPtr);

cusparseStatus_t __stdcall cusparseChyb2csc(cusparseHandle_t handle,
                                              const cusparseMatDescr_t descrA,
                                              const cusparseHybMat_t hybA,
                                              cuComplex *cscSortedVal,
                                              int *cscSortedRowInd,
                                              int *cscSortedColPtr);

cusparseStatus_t __stdcall cusparseZhyb2csc(cusparseHandle_t handle,
                                              const cusparseMatDescr_t descrA,
                                              const cusparseHybMat_t hybA,
                                              cuDoubleComplex *cscSortedVal,
                                              int *cscSortedRowInd,
                                              int *cscSortedColPtr);



cusparseStatus_t __stdcall cusparseXcsr2bsrNnz(cusparseHandle_t handle,
                                                 cusparseDirection_t dirA,
                                                 int m,
                                                 int n,
                                                 const cusparseMatDescr_t descrA,
                                                 const int *csrSortedRowPtrA,
                                                 const int *csrSortedColIndA,
                                                 int blockDim,
                                                 const cusparseMatDescr_t descrC,
                                                 int *bsrSortedRowPtrC,
                                                 int *nnzTotalDevHostPtr);

cusparseStatus_t __stdcall cusparseScsr2bsr(cusparseHandle_t handle,
                                              cusparseDirection_t dirA,
                                              int m,
                                              int n,
                                              const cusparseMatDescr_t descrA,
                                              const float *csrSortedValA,
                                              const int *csrSortedRowPtrA,
                                              const int *csrSortedColIndA,
                                              int blockDim,
                                              const cusparseMatDescr_t descrC,
                                              float *bsrSortedValC,
                                              int *bsrSortedRowPtrC,
                                              int *bsrSortedColIndC);

cusparseStatus_t __stdcall cusparseDcsr2bsr(cusparseHandle_t handle,
                                              cusparseDirection_t dirA,
                                              int m,
                                              int n,
                                              const cusparseMatDescr_t descrA,
                                              const double *csrSortedValA,
                                              const int *csrSortedRowPtrA,
                                              const int *csrSortedColIndA,
                                              int blockDim,
                                              const cusparseMatDescr_t descrC,
                                              double *bsrSortedValC,
                                              int *bsrSortedRowPtrC,
                                              int *bsrSortedColIndC);

cusparseStatus_t __stdcall cusparseCcsr2bsr(cusparseHandle_t handle,
                                              cusparseDirection_t dirA,
                                              int m,
                                              int n,
                                              const cusparseMatDescr_t descrA,
                                              const cuComplex *csrSortedValA,
                                              const int *csrSortedRowPtrA,
                                              const int *csrSortedColIndA,
                                              int blockDim,
                                              const cusparseMatDescr_t descrC,
                                              cuComplex *bsrSortedValC,
                                              int *bsrSortedRowPtrC,
                                              int *bsrSortedColIndC);

cusparseStatus_t __stdcall cusparseZcsr2bsr(cusparseHandle_t handle,
                                              cusparseDirection_t dirA,
                                              int m,
                                              int n,
                                              const cusparseMatDescr_t descrA,
                                              const cuDoubleComplex *csrSortedValA,
                                              const int *csrSortedRowPtrA,
                                              const int *csrSortedColIndA,
                                              int blockDim,
                                              const cusparseMatDescr_t descrC,
                                              cuDoubleComplex *bsrSortedValC,
                                              int *bsrSortedRowPtrC,
                                              int *bsrSortedColIndC);



cusparseStatus_t __stdcall cusparseSbsr2csr(cusparseHandle_t handle,
                                              cusparseDirection_t dirA,
                                              int mb,
                                              int nb,
                                              const cusparseMatDescr_t descrA,
                                              const float *bsrSortedValA,
                                              const int *bsrSortedRowPtrA,
                                              const int *bsrSortedColIndA,
                                              int blockDim,
                                              const cusparseMatDescr_t descrC,
                                              float *csrSortedValC,
                                              int *csrSortedRowPtrC,
                                              int *csrSortedColIndC);

cusparseStatus_t __stdcall cusparseDbsr2csr(cusparseHandle_t handle,
                                              cusparseDirection_t dirA,
                                              int mb,
                                              int nb,
                                              const cusparseMatDescr_t descrA,
                                              const double *bsrSortedValA,
                                              const int *bsrSortedRowPtrA,
                                              const int *bsrSortedColIndA,
                                              int   blockDim,
                                              const cusparseMatDescr_t descrC,
                                              double *csrSortedValC,
                                              int *csrSortedRowPtrC,
                                              int *csrSortedColIndC);

cusparseStatus_t __stdcall cusparseCbsr2csr(cusparseHandle_t handle,
                                              cusparseDirection_t dirA,
                                              int mb,
                                              int nb,
                                              const cusparseMatDescr_t descrA,
                                              const cuComplex *bsrSortedValA,
                                              const int *bsrSortedRowPtrA,
                                              const int *bsrSortedColIndA,
                                              int blockDim,
                                              const cusparseMatDescr_t descrC,
                                              cuComplex *csrSortedValC,
                                              int *csrSortedRowPtrC,
                                              int *csrSortedColIndC);

cusparseStatus_t __stdcall cusparseZbsr2csr(cusparseHandle_t handle,
                                              cusparseDirection_t dirA,
                                              int mb,
                                              int nb,
                                              const cusparseMatDescr_t descrA,
                                              const cuDoubleComplex *bsrSortedValA,
                                              const int *bsrSortedRowPtrA,
                                              const int *bsrSortedColIndA,
                                              int blockDim,
                                              const cusparseMatDescr_t descrC,
                                              cuDoubleComplex *csrSortedValC,
                                              int *csrSortedRowPtrC,
                                              int *csrSortedColIndC);



cusparseStatus_t __stdcall cusparseSgebsr2gebsc_bufferSize(cusparseHandle_t handle,
                                                             int mb,
                                                             int nb,
                                                             int nnzb,
                                                             const float *bsrSortedVal,
                                                             const int *bsrSortedRowPtr,
                                                             const int *bsrSortedColInd,
                                                             int rowBlockDim,
                                                             int colBlockDim,
                                                             int *pBufferSizeInBytes);

cusparseStatus_t __stdcall cusparseDgebsr2gebsc_bufferSize(cusparseHandle_t handle,
                                                             int mb,
                                                             int nb,
                                                             int nnzb,
                                                             const double *bsrSortedVal,
                                                             const int *bsrSortedRowPtr,
                                                             const int *bsrSortedColInd,
                                                             int rowBlockDim,
                                                             int colBlockDim,
                                                             int *pBufferSizeInBytes);

cusparseStatus_t __stdcall cusparseCgebsr2gebsc_bufferSize(cusparseHandle_t handle,
                                                             int mb,
                                                             int nb,
                                                             int nnzb,
                                                             const cuComplex *bsrSortedVal,
                                                             const int *bsrSortedRowPtr,
                                                             const int *bsrSortedColInd,
                                                             int rowBlockDim,
                                                             int colBlockDim,
                                                             int *pBufferSizeInBytes);

cusparseStatus_t __stdcall cusparseZgebsr2gebsc_bufferSize(cusparseHandle_t handle,
                                                             int mb,
                                                             int nb,
                                                             int nnzb,
                                                             const cuDoubleComplex *bsrSortedVal,
                                                             const int *bsrSortedRowPtr,
                                                             const int *bsrSortedColInd,
                                                             int rowBlockDim,
                                                             int colBlockDim,
                                                             int *pBufferSizeInBytes);

cusparseStatus_t __stdcall cusparseSgebsr2gebsc_bufferSizeExt(cusparseHandle_t handle,
                                                                int mb,
                                                                int nb,
                                                                int nnzb,
                                                                const float *bsrSortedVal,
                                                                const int *bsrSortedRowPtr,
                                                                const int *bsrSortedColInd,
                                                                int rowBlockDim,
                                                                int colBlockDim,
                                                                size_t *pBufferSize);

cusparseStatus_t __stdcall cusparseDgebsr2gebsc_bufferSizeExt(cusparseHandle_t handle,
                                                                int mb,
                                                                int nb,
                                                                int nnzb,
                                                                const double *bsrSortedVal,
                                                                const int *bsrSortedRowPtr,
                                                                const int *bsrSortedColInd,
                                                                int rowBlockDim,
                                                                int colBlockDim,
                                                                size_t *pBufferSize);

cusparseStatus_t __stdcall cusparseCgebsr2gebsc_bufferSizeExt(cusparseHandle_t handle,
                                                                int mb,
                                                                int nb,
                                                                int nnzb,
                                                                const cuComplex *bsrSortedVal,
                                                                const int *bsrSortedRowPtr,
                                                                const int *bsrSortedColInd,
                                                                int rowBlockDim,
                                                                int colBlockDim,
                                                                size_t *pBufferSize);

cusparseStatus_t __stdcall cusparseZgebsr2gebsc_bufferSizeExt(cusparseHandle_t handle,
                                                                int mb,
                                                                int nb,
                                                                int nnzb,
                                                                const cuDoubleComplex *bsrSortedVal,
                                                                const int *bsrSortedRowPtr,
                                                                const int *bsrSortedColInd,
                                                                int rowBlockDim,
                                                                int colBlockDim,
                                                                size_t *pBufferSize);


cusparseStatus_t __stdcall cusparseSgebsr2gebsc(cusparseHandle_t handle,
                                                  int mb,
                                                  int nb,
                                                  int nnzb,
                                                  const float *bsrSortedVal,
                                                  const int *bsrSortedRowPtr,
                                                  const int *bsrSortedColInd,
                                                  int rowBlockDim,
                                                  int colBlockDim,
                                                  float *bscVal,
                                                  int *bscRowInd,
                                                  int *bscColPtr,
                                                  cusparseAction_t copyValues,
                                                  cusparseIndexBase_t baseIdx, 
                                                  void *pBuffer);

cusparseStatus_t __stdcall cusparseDgebsr2gebsc(cusparseHandle_t handle,
                                                  int mb,
                                                  int nb,
                                                  int nnzb,
                                                  const double *bsrSortedVal,
                                                  const int *bsrSortedRowPtr,
                                                  const int *bsrSortedColInd,
                                                  int rowBlockDim,
                                                  int colBlockDim,
                                                  double *bscVal,
                                                  int *bscRowInd,
                                                  int *bscColPtr,
                                                  cusparseAction_t copyValues,
                                                  cusparseIndexBase_t baseIdx,
                                                  void *pBuffer);

cusparseStatus_t __stdcall cusparseCgebsr2gebsc(cusparseHandle_t handle,
                                                  int mb,
                                                  int nb,
                                                  int nnzb,
                                                  const cuComplex *bsrSortedVal,
                                                  const int *bsrSortedRowPtr,
                                                  const int *bsrSortedColInd,
                                                  int rowBlockDim,
                                                  int colBlockDim,
                                                  cuComplex *bscVal,
                                                  int *bscRowInd,
                                                  int *bscColPtr,
                                                  cusparseAction_t copyValues,
                                                  cusparseIndexBase_t baseIdx,
                                                  void *pBuffer);

cusparseStatus_t __stdcall cusparseZgebsr2gebsc(cusparseHandle_t handle,
                                                  int mb,
                                                  int nb,
                                                  int nnzb,
                                                  const cuDoubleComplex *bsrSortedVal,
                                                  const int *bsrSortedRowPtr,
                                                  const int *bsrSortedColInd,
                                                  int rowBlockDim,
                                                  int colBlockDim,
                                                  cuDoubleComplex *bscVal,
                                                  int *bscRowInd,
                                                  int *bscColPtr,
                                                  cusparseAction_t copyValues,
                                                  cusparseIndexBase_t baseIdx,
                                                  void *pBuffer);



cusparseStatus_t __stdcall cusparseXgebsr2csr(cusparseHandle_t handle,
                                                cusparseDirection_t dirA,
                                                int mb,
                                                int nb,
                                                const cusparseMatDescr_t descrA,
                                                const int    *bsrSortedRowPtrA,
                                                const int    *bsrSortedColIndA,
                                                int   rowBlockDim,
                                                int   colBlockDim,
                                                const cusparseMatDescr_t descrC,
                                                int    *csrSortedRowPtrC,
                                                int    *csrSortedColIndC );

cusparseStatus_t __stdcall cusparseSgebsr2csr(cusparseHandle_t handle,
                                                cusparseDirection_t dirA,
                                                int mb,
                                                int nb,
                                                const cusparseMatDescr_t descrA,
                                                const float *bsrSortedValA,
                                                const int    *bsrSortedRowPtrA,
                                                const int    *bsrSortedColIndA,
                                                int   rowBlockDim,
                                                int   colBlockDim,
                                                const cusparseMatDescr_t descrC,
                                                float  *csrSortedValC,
                                                int    *csrSortedRowPtrC,
                                                int    *csrSortedColIndC );


cusparseStatus_t __stdcall cusparseDgebsr2csr(cusparseHandle_t handle,
                                                cusparseDirection_t dirA,
                                                int mb,
                                                int nb,
                                                const cusparseMatDescr_t descrA,
                                                const double *bsrSortedValA,
                                                const int    *bsrSortedRowPtrA,
                                                const int    *bsrSortedColIndA,
                                                int   rowBlockDim,
                                                int   colBlockDim,
                                                const cusparseMatDescr_t descrC,
                                                double  *csrSortedValC,
                                                int    *csrSortedRowPtrC,
                                                int    *csrSortedColIndC );


cusparseStatus_t __stdcall cusparseCgebsr2csr(cusparseHandle_t handle,
                                                cusparseDirection_t dirA,
                                                int mb,
                                                int nb,
                                                const cusparseMatDescr_t descrA,
                                                const cuComplex *bsrSortedValA,
                                                const int    *bsrSortedRowPtrA,
                                                const int    *bsrSortedColIndA,
                                                int   rowBlockDim,
                                                int   colBlockDim,
                                                const cusparseMatDescr_t descrC,
                                                cuComplex  *csrSortedValC,
                                                int    *csrSortedRowPtrC,
                                                int    *csrSortedColIndC );


cusparseStatus_t __stdcall cusparseZgebsr2csr(cusparseHandle_t handle,
                                                cusparseDirection_t dirA,
                                                int mb,
                                                int nb,
                                                const cusparseMatDescr_t descrA,
                                                const cuDoubleComplex *bsrSortedValA,
                                                const int    *bsrSortedRowPtrA,
                                                const int    *bsrSortedColIndA,
                                                int   rowBlockDim,
                                                int   colBlockDim,
                                                const cusparseMatDescr_t descrC,
                                                cuDoubleComplex  *csrSortedValC,
                                                int    *csrSortedRowPtrC,
                                                int    *csrSortedColIndC );



cusparseStatus_t __stdcall cusparseScsr2gebsr_bufferSize(cusparseHandle_t handle,
                                                           cusparseDirection_t dirA,
                                                           int m,
                                                           int n,
                                                           const cusparseMatDescr_t descrA,
                                                           const float *csrSortedValA,
                                                           const int *csrSortedRowPtrA,
                                                           const int *csrSortedColIndA,
                                                           int rowBlockDim,
                                                           int colBlockDim,
                                                           int *pBufferSizeInBytes);

cusparseStatus_t __stdcall cusparseDcsr2gebsr_bufferSize(cusparseHandle_t handle,
                                                           cusparseDirection_t dirA,
                                                           int m,
                                                           int n,
                                                           const cusparseMatDescr_t descrA,
                                                           const double *csrSortedValA,
                                                           const int *csrSortedRowPtrA,
                                                           const int *csrSortedColIndA,
                                                           int rowBlockDim,
                                                           int colBlockDim,
                                                           int *pBufferSizeInBytes);

cusparseStatus_t __stdcall cusparseCcsr2gebsr_bufferSize(cusparseHandle_t handle,
                                                           cusparseDirection_t dirA,
                                                           int m,
                                                           int n,
                                                           const cusparseMatDescr_t descrA,
                                                           const cuComplex *csrSortedValA,
                                                           const int *csrSortedRowPtrA,
                                                           const int *csrSortedColIndA,
                                                           int rowBlockDim,
                                                           int colBlockDim,
                                                           int *pBufferSizeInBytes);

cusparseStatus_t __stdcall cusparseZcsr2gebsr_bufferSize(cusparseHandle_t handle,
                                                           cusparseDirection_t dirA,
                                                           int m,
                                                           int n,
                                                           const cusparseMatDescr_t descrA,
                                                           const cuDoubleComplex *csrSortedValA,
                                                           const int *csrSortedRowPtrA,
                                                           const int *csrSortedColIndA,
                                                           int rowBlockDim,
                                                           int colBlockDim,
                                                           int *pBufferSizeInBytes);

cusparseStatus_t __stdcall cusparseScsr2gebsr_bufferSizeExt(cusparseHandle_t handle,
                                                              cusparseDirection_t dirA,
                                                              int m,
                                                              int n,
                                                              const cusparseMatDescr_t descrA,
                                                              const float *csrSortedValA,
                                                              const int *csrSortedRowPtrA,
                                                              const int *csrSortedColIndA,
                                                              int rowBlockDim,
                                                              int colBlockDim,
                                                              size_t *pBufferSize);

cusparseStatus_t __stdcall cusparseDcsr2gebsr_bufferSizeExt(cusparseHandle_t handle,
                                                              cusparseDirection_t dirA,
                                                              int m,
                                                              int n,
                                                              const cusparseMatDescr_t descrA,
                                                              const double *csrSortedValA,
                                                              const int *csrSortedRowPtrA,
                                                              const int *csrSortedColIndA,
                                                              int rowBlockDim,
                                                              int colBlockDim,
                                                              size_t *pBufferSize);

cusparseStatus_t __stdcall cusparseCcsr2gebsr_bufferSizeExt(cusparseHandle_t handle,
                                                              cusparseDirection_t dirA,
                                                              int m,
                                                              int n,
                                                              const cusparseMatDescr_t descrA,
                                                              const cuComplex *csrSortedValA,
                                                              const int *csrSortedRowPtrA,
                                                              const int *csrSortedColIndA,
                                                              int rowBlockDim,
                                                              int colBlockDim,
                                                              size_t *pBufferSize);

cusparseStatus_t __stdcall cusparseZcsr2gebsr_bufferSizeExt(cusparseHandle_t handle,
                                                              cusparseDirection_t dirA,
                                                              int m,
                                                              int n,
                                                              const cusparseMatDescr_t descrA,
                                                              const cuDoubleComplex *csrSortedValA,
                                                              const int *csrSortedRowPtrA,
                                                              const int *csrSortedColIndA,
                                                              int rowBlockDim,
                                                              int colBlockDim,
                                                              size_t *pBufferSize);



cusparseStatus_t __stdcall cusparseXcsr2gebsrNnz(cusparseHandle_t handle,
                                                   cusparseDirection_t dirA,
                                                   int m,
                                                   int n,
                                                   const cusparseMatDescr_t descrA,
                                                   const int *csrSortedRowPtrA,
                                                   const int *csrSortedColIndA,
                                                   const cusparseMatDescr_t descrC,
                                                   int *bsrSortedRowPtrC,
                                                   int rowBlockDim,
                                                   int colBlockDim,
                                                   int *nnzTotalDevHostPtr,
                                                   void *pBuffer );

cusparseStatus_t __stdcall cusparseScsr2gebsr(cusparseHandle_t handle,
                                                cusparseDirection_t dirA,
                                                int m,
                                                int n,
                                                const cusparseMatDescr_t descrA,
                                                const float *csrSortedValA,
                                                const int *csrSortedRowPtrA,
                                                const int *csrSortedColIndA,
                                                const cusparseMatDescr_t descrC,
                                                float *bsrSortedValC,
                                                int *bsrSortedRowPtrC,
                                                int *bsrSortedColIndC,
                                                int rowBlockDim,
                                                int colBlockDim,
                                                void *pBuffer);

cusparseStatus_t __stdcall cusparseDcsr2gebsr(cusparseHandle_t handle,
                                                cusparseDirection_t dirA,
                                                int m,
                                                int n,
                                                const cusparseMatDescr_t descrA,
                                                const double *csrSortedValA,
                                                const int *csrSortedRowPtrA,
                                                const int *csrSortedColIndA,
                                                const cusparseMatDescr_t descrC,
                                                double *bsrSortedValC,
                                                int *bsrSortedRowPtrC,
                                                int *bsrSortedColIndC,
                                                int rowBlockDim,
                                                int colBlockDim,
                                                void *pBuffer);

cusparseStatus_t __stdcall cusparseCcsr2gebsr(cusparseHandle_t handle,
                                                cusparseDirection_t dirA,
                                                int m,
                                                int n,
                                                const cusparseMatDescr_t descrA,
                                                const cuComplex *csrSortedValA,
                                                const int *csrSortedRowPtrA,
                                                const int *csrSortedColIndA,
                                                const cusparseMatDescr_t descrC,
                                                cuComplex *bsrSortedValC,
                                                int *bsrSortedRowPtrC,
                                                int *bsrSortedColIndC,
                                                int rowBlockDim,
                                                int colBlockDim,
                                                void *pBuffer);

cusparseStatus_t __stdcall cusparseZcsr2gebsr(cusparseHandle_t handle,
                                                cusparseDirection_t dirA,
                                                int m,
                                                int n,
                                                const cusparseMatDescr_t descrA,
                                                const cuDoubleComplex *csrSortedValA,
                                                const int *csrSortedRowPtrA,
                                                const int *csrSortedColIndA,
                                                const cusparseMatDescr_t descrC,
                                                cuDoubleComplex *bsrSortedValC,
                                                int *bsrSortedRowPtrC,
                                                int *bsrSortedColIndC,
                                                int rowBlockDim,
                                                int colBlockDim,
                                                void *pBuffer);



cusparseStatus_t __stdcall cusparseSgebsr2gebsr_bufferSize(cusparseHandle_t handle,
                                                             cusparseDirection_t dirA,
                                                             int mb,
                                                             int nb,
                                                             int nnzb,
                                                             const cusparseMatDescr_t descrA,
                                                             const float *bsrSortedValA,
                                                             const int *bsrSortedRowPtrA,
                                                             const int *bsrSortedColIndA,
                                                             int rowBlockDimA,
                                                             int colBlockDimA,
                                                             int rowBlockDimC,
                                                             int colBlockDimC,
                                                             int *pBufferSizeInBytes );

cusparseStatus_t __stdcall cusparseDgebsr2gebsr_bufferSize(cusparseHandle_t handle,
                                                             cusparseDirection_t dirA,
                                                             int mb,
                                                             int nb,
                                                             int nnzb,
                                                             const cusparseMatDescr_t descrA,
                                                             const double *bsrSortedValA,
                                                             const int *bsrSortedRowPtrA,
                                                             const int *bsrSortedColIndA,
                                                             int rowBlockDimA,
                                                             int colBlockDimA,
                                                             int rowBlockDimC,
                                                             int colBlockDimC,
                                                             int *pBufferSizeInBytes );

cusparseStatus_t __stdcall cusparseCgebsr2gebsr_bufferSize(cusparseHandle_t handle,
                                                             cusparseDirection_t dirA,
                                                             int mb,
                                                             int nb,
                                                             int nnzb,
                                                             const cusparseMatDescr_t descrA,
                                                             const cuComplex *bsrSortedValA,
                                                             const int *bsrSortedRowPtrA,
                                                             const int *bsrSortedColIndA,
                                                             int rowBlockDimA,
                                                             int colBlockDimA,
                                                             int rowBlockDimC,
                                                             int colBlockDimC,
                                                             int *pBufferSizeInBytes );

cusparseStatus_t __stdcall cusparseZgebsr2gebsr_bufferSize(cusparseHandle_t handle,
                                                             cusparseDirection_t dirA,
                                                             int mb,
                                                             int nb,
                                                             int nnzb,
                                                             const cusparseMatDescr_t descrA,
                                                             const cuDoubleComplex *bsrSortedValA,
                                                             const int *bsrSortedRowPtrA,
                                                             const int *bsrSortedColIndA,
                                                             int rowBlockDimA,
                                                             int colBlockDimA,
                                                             int rowBlockDimC,
                                                             int colBlockDimC,
                                                             int *pBufferSizeInBytes );


cusparseStatus_t __stdcall cusparseSgebsr2gebsr_bufferSizeExt(cusparseHandle_t handle,
                                                                cusparseDirection_t dirA,
                                                                int mb,
                                                                int nb,
                                                                int nnzb,
                                                                const cusparseMatDescr_t descrA,
                                                                const float *bsrSortedValA,
                                                                const int    *bsrSortedRowPtrA,
                                                                const int    *bsrSortedColIndA,
                                                                int   rowBlockDimA,
                                                                int   colBlockDimA,
                                                                int   rowBlockDimC,
                                                                int   colBlockDimC,
                                                                size_t  *pBufferSize );

cusparseStatus_t __stdcall cusparseDgebsr2gebsr_bufferSizeExt(cusparseHandle_t handle,
                                                                cusparseDirection_t dirA,
                                                                int mb,
                                                                int nb,
                                                                int nnzb,
                                                                const cusparseMatDescr_t descrA,
                                                                const double *bsrSortedValA,
                                                                const int    *bsrSortedRowPtrA,
                                                                const int    *bsrSortedColIndA,
                                                                int   rowBlockDimA,
                                                                int   colBlockDimA,
                                                                int   rowBlockDimC,
                                                                int   colBlockDimC,
                                                                size_t  *pBufferSize );

cusparseStatus_t __stdcall cusparseCgebsr2gebsr_bufferSizeExt(cusparseHandle_t handle,
                                                                cusparseDirection_t dirA,
                                                                int mb,
                                                                int nb,
                                                                int nnzb,
                                                                const cusparseMatDescr_t descrA,
                                                                const cuComplex *bsrSortedValA,
                                                                const int    *bsrSortedRowPtrA,
                                                                const int    *bsrSortedColIndA,
                                                                int   rowBlockDimA,
                                                                int   colBlockDimA,
                                                                int   rowBlockDimC,
                                                                int   colBlockDimC,
                                                                size_t  *pBufferSize );

cusparseStatus_t __stdcall cusparseZgebsr2gebsr_bufferSizeExt(cusparseHandle_t handle,
                                                                cusparseDirection_t dirA,
                                                                int mb,
                                                                int nb,
                                                                int nnzb,
                                                                const cusparseMatDescr_t descrA,
                                                                const cuDoubleComplex *bsrSortedValA,
                                                                const int    *bsrSortedRowPtrA,
                                                                const int    *bsrSortedColIndA,
                                                                int   rowBlockDimA,
                                                                int   colBlockDimA,
                                                                int   rowBlockDimC,
                                                                int   colBlockDimC,
                                                                size_t  *pBufferSize );



cusparseStatus_t __stdcall cusparseXgebsr2gebsrNnz(cusparseHandle_t handle,
                                                     cusparseDirection_t dirA,
                                                     int mb,
                                                     int nb,
                                                     int nnzb,
                                                     const cusparseMatDescr_t descrA,
                                                     const int *bsrSortedRowPtrA,
                                                     const int *bsrSortedColIndA,
                                                     int rowBlockDimA,
                                                     int colBlockDimA,
                                                     const cusparseMatDescr_t descrC,
                                                     int *bsrSortedRowPtrC,
                                                     int rowBlockDimC,
                                                     int colBlockDimC,
                                                     int *nnzTotalDevHostPtr,
                                                     void *pBuffer);

cusparseStatus_t __stdcall cusparseSgebsr2gebsr(cusparseHandle_t handle,
                                                  cusparseDirection_t dirA,
                                                  int mb,
                                                  int nb,
                                                  int nnzb,
                                                  const cusparseMatDescr_t descrA,
                                                  const float *bsrSortedValA,
                                                  const int *bsrSortedRowPtrA,
                                                  const int *bsrSortedColIndA,
                                                  int rowBlockDimA,
                                                  int colBlockDimA,
                                                  const cusparseMatDescr_t descrC,
                                                  float *bsrSortedValC,
                                                  int *bsrSortedRowPtrC,
                                                  int *bsrSortedColIndC,
                                                  int rowBlockDimC,
                                                  int colBlockDimC,
                                                  void *pBuffer);

cusparseStatus_t __stdcall cusparseDgebsr2gebsr(cusparseHandle_t handle,
                                                  cusparseDirection_t dirA,
                                                  int mb,
                                                  int nb,
                                                  int nnzb,
                                                  const cusparseMatDescr_t descrA,
                                                  const double *bsrSortedValA,
                                                  const int *bsrSortedRowPtrA,
                                                  const int *bsrSortedColIndA,
                                                  int rowBlockDimA,
                                                  int colBlockDimA,
                                                  const cusparseMatDescr_t descrC,
                                                  double *bsrSortedValC,
                                                  int *bsrSortedRowPtrC,
                                                  int *bsrSortedColIndC,
                                                  int rowBlockDimC,
                                                  int colBlockDimC,
                                                  void *pBuffer);

cusparseStatus_t __stdcall cusparseCgebsr2gebsr(cusparseHandle_t handle,
                                                  cusparseDirection_t dirA,
                                                  int mb,
                                                  int nb,
                                                  int nnzb,
                                                  const cusparseMatDescr_t descrA,
                                                  const cuComplex *bsrSortedValA,
                                                  const int *bsrSortedRowPtrA,
                                                  const int *bsrSortedColIndA,
                                                  int rowBlockDimA,
                                                  int colBlockDimA,
                                                  const cusparseMatDescr_t descrC,
                                                  cuComplex *bsrSortedValC,
                                                  int *bsrSortedRowPtrC,
                                                  int *bsrSortedColIndC,
                                                  int rowBlockDimC,
                                                  int colBlockDimC,
                                                  void *pBuffer);

cusparseStatus_t __stdcall cusparseZgebsr2gebsr(cusparseHandle_t handle,
                                                  cusparseDirection_t dirA,
                                                  int mb,
                                                  int nb,
                                                  int nnzb,
                                                  const cusparseMatDescr_t descrA,
                                                  const cuDoubleComplex *bsrSortedValA,
                                                  const int *bsrSortedRowPtrA,
                                                  const int *bsrSortedColIndA,
                                                  int rowBlockDimA,
                                                  int colBlockDimA,
                                                  const cusparseMatDescr_t descrC,
                                                  cuDoubleComplex *bsrSortedValC,
                                                  int *bsrSortedRowPtrC,
                                                  int *bsrSortedColIndC,
                                                  int rowBlockDimC,
                                                  int colBlockDimC,
                                                  void *pBuffer);




cusparseStatus_t __stdcall cusparseCreateIdentityPermutation(cusparseHandle_t handle,
                                                               int n,
                                                               int *p);


cusparseStatus_t __stdcall cusparseXcoosort_bufferSizeExt(cusparseHandle_t handle,
                                                            int m,
                                                            int n,
                                                            int nnz,
                                                            const int *cooRowsA,
                                                            const int *cooColsA,
                                                            size_t *pBufferSizeInBytes);

cusparseStatus_t __stdcall cusparseXcoosortByRow(cusparseHandle_t handle,
                                                   int m,
                                                   int n,
                                                   int nnz,
                                                   int *cooRowsA,
                                                   int *cooColsA,
                                                   int *P,
                                                   void *pBuffer);

cusparseStatus_t __stdcall cusparseXcoosortByColumn(cusparseHandle_t handle,
                                                      int m,
                                                      int n, 
                                                      int nnz,
                                                      int *cooRowsA,
                                                      int *cooColsA,
                                                      int *P,
                                                      void *pBuffer);


cusparseStatus_t __stdcall cusparseXcsrsort_bufferSizeExt(cusparseHandle_t handle,
                                                            int m,
                                                            int n,
                                                            int nnz,
                                                            const int *csrRowPtrA,
                                                            const int *csrColIndA,
                                                            size_t *pBufferSizeInBytes);

cusparseStatus_t __stdcall cusparseXcsrsort(cusparseHandle_t handle,
                                              int m,
                                              int n,
                                              int nnz,
                                              const cusparseMatDescr_t descrA,
                                              const int *csrRowPtrA,
                                              int *csrColIndA,
                                              int *P,
                                              void *pBuffer);
    

cusparseStatus_t __stdcall cusparseXcscsort_bufferSizeExt(cusparseHandle_t handle,
                                                            int m,
                                                            int n,
                                                            int nnz,
                                                            const int *cscColPtrA,
                                                            const int *cscRowIndA,
                                                            size_t *pBufferSizeInBytes);

cusparseStatus_t __stdcall cusparseXcscsort(cusparseHandle_t handle,
                                              int m,
                                              int n,
                                              int nnz,
                                              const cusparseMatDescr_t descrA,
                                              const int *cscColPtrA,
                                              int *cscRowIndA,
                                              int *P,
                                              void *pBuffer);



cusparseStatus_t __stdcall cusparseScsru2csr_bufferSizeExt(cusparseHandle_t handle,
                                                             int m,
                                                             int n,
                                                             int nnz,
                                                             float *csrVal,
                                                             const int *csrRowPtr,
                                                             int *csrColInd,
                                                             csru2csrInfo_t  info,
                                                             size_t *pBufferSizeInBytes);

cusparseStatus_t __stdcall cusparseDcsru2csr_bufferSizeExt(cusparseHandle_t handle,
                                                             int m,
                                                             int n,
                                                             int nnz,
                                                             double *csrVal,
                                                             const int *csrRowPtr,
                                                             int *csrColInd,
                                                             csru2csrInfo_t  info,
                                                             size_t *pBufferSizeInBytes);

cusparseStatus_t __stdcall cusparseCcsru2csr_bufferSizeExt(cusparseHandle_t handle,
                                                             int m,
                                                             int n,
                                                             int nnz,
                                                             cuComplex *csrVal,
                                                             const int *csrRowPtr,
                                                             int *csrColInd,
                                                             csru2csrInfo_t  info,
                                                             size_t *pBufferSizeInBytes);

cusparseStatus_t __stdcall cusparseZcsru2csr_bufferSizeExt(cusparseHandle_t handle,
                                                             int m,
                                                             int n,
                                                             int nnz,
                                                             cuDoubleComplex *csrVal,
                                                             const int *csrRowPtr,
                                                             int *csrColInd,
                                                             csru2csrInfo_t  info,
                                                             size_t *pBufferSizeInBytes);

cusparseStatus_t __stdcall cusparseScsru2csr(cusparseHandle_t handle,
                                               int m,
                                               int n,
                                               int nnz,
                                               const cusparseMatDescr_t descrA,
                                               float *csrVal,
                                               const int *csrRowPtr,
                                               int *csrColInd,
                                               csru2csrInfo_t  info,
                                               void *pBuffer);

cusparseStatus_t __stdcall cusparseDcsru2csr(cusparseHandle_t handle,
                                               int m,
                                               int n,
                                               int nnz,
                                               const cusparseMatDescr_t descrA,
                                               double *csrVal,
                                               const int *csrRowPtr,
                                               int *csrColInd,
                                               csru2csrInfo_t  info,
                                               void *pBuffer);

cusparseStatus_t __stdcall cusparseCcsru2csr(cusparseHandle_t handle,
                                               int m,
                                               int n,
                                               int nnz,
                                               const cusparseMatDescr_t descrA,
                                               cuComplex *csrVal,
                                               const int *csrRowPtr,
                                               int *csrColInd,
                                               csru2csrInfo_t  info,
                                               void *pBuffer);

cusparseStatus_t __stdcall cusparseZcsru2csr(cusparseHandle_t handle,
                                               int m,
                                               int n,
                                               int nnz,
                                               const cusparseMatDescr_t descrA,
                                               cuDoubleComplex *csrVal,
                                               const int *csrRowPtr,
                                               int *csrColInd,
                                               csru2csrInfo_t  info,
                                               void *pBuffer);



cusparseStatus_t __stdcall cusparseScsr2csru(cusparseHandle_t handle,
                                               int m,
                                               int n,
                                               int nnz,
                                               const cusparseMatDescr_t descrA,
                                               float *csrVal,
                                               const int *csrRowPtr,
                                               int *csrColInd,
                                               csru2csrInfo_t  info,
                                               void *pBuffer);

cusparseStatus_t __stdcall cusparseDcsr2csru(cusparseHandle_t handle,
                                               int m,
                                               int n,
                                               int nnz,
                                               const cusparseMatDescr_t descrA,
                                               double *csrVal,
                                               const int *csrRowPtr,
                                               int *csrColInd,
                                               csru2csrInfo_t  info,
                                               void *pBuffer);

cusparseStatus_t __stdcall cusparseCcsr2csru(cusparseHandle_t handle,
                                               int m,
                                               int n,
                                               int nnz,
                                               const cusparseMatDescr_t descrA,
                                               cuComplex *csrVal,
                                               const int *csrRowPtr,
                                               int *csrColInd,
                                               csru2csrInfo_t  info,
                                               void *pBuffer);

cusparseStatus_t __stdcall cusparseZcsr2csru(cusparseHandle_t handle,
                                               int m,
                                               int n,
                                               int nnz,
                                               const cusparseMatDescr_t descrA,
                                               cuDoubleComplex *csrVal,
                                               const int *csrRowPtr,
                                               int *csrColInd,
                                               csru2csrInfo_t  info,
                                               void *pBuffer);


}
#line 5404 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"

#line 5406 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cusparse.h"


#line 9 "c:\\pyneurogpu_winnew\\neurogpu6\\CudaStuff.cuh"
extern __declspec(__shared__) char smem[];

cudaError_t stEfork2Main(Stim stim, Sim sim, float* ParamsM, HMat& InMat, float* V,unsigned short CompDepth,unsigned short CompFDepth,unsigned short NSets);
cudaError_t stEfork2TimeLoopGPU(Stim stim, Sim sim, float* ParamsM, HMat& InMat, float* V,unsigned short CompDepth,unsigned short CompFDepth,unsigned short NSets);
void ReadParamsMatX(const char* FN, float* ParamsM,unsigned short NParams,unsigned short Nx);
void ReadParamsMat(const char* FN, float** ParamsM,unsigned short NParams,unsigned short Nx);
float* ReadAllParams(const char* FN, unsigned short NParams,unsigned short Nx,unsigned short &NSets);
void FreeParallelNeuronData(HMat &InMat);

#line 19 "c:\\pyneurogpu_winnew\\neurogpu6\\CudaStuff.cuh"
#line 2 "C:/pyNeuroGPU_winnew/NeuroGPU6/CudaStuff.cu"
#line 1 "c:\\pyneurogpu_winnew\\neurogpu6\\AllModels.cu"



#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1010 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"

#line 5 "c:\\pyneurogpu_winnew\\neurogpu6\\AllModels.cu"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1938 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"

#line 6 "c:\\pyneurogpu_winnew\\neurogpu6\\AllModels.cu"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\device_launch_parameters.h"





















































































































#line 119 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\device_launch_parameters.h"
#line 7 "c:\\pyneurogpu_winnew\\neurogpu6\\AllModels.cu"
#line 1 "c:\\pyneurogpu_winnew\\neurogpu6\\AllModels.h"






#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1938 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"

#line 8 "c:\\pyneurogpu_winnew\\neurogpu6\\AllModels.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\device_launch_parameters.h"





















































































































#line 119 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\device_launch_parameters.h"
#line 9 "c:\\pyneurogpu_winnew\\neurogpu6\\AllModels.h"












__declspec(__device__) float calc_determinant(float mat[10-1][10-1], int n);
__declspec(__device__) void init_state_probs(float q[10][10], float y[10]);
__declspec(__device__) float calc_prob(float q[10][10], int skip);
__declspec(__device__) float rhs(float q[10][10], int index, float y[10]);
__declspec(__device__) void Cubackwards_euler(double dt, int N, int nkinStates,float y[10],float matq[10][10]);

__declspec(__device__) void CuInitModel_ca(float v,float &m,float &h,float gbar_ca,float cao_ca, float cai, float &ica);
__declspec(__device__) void CuDerivModel_ca(float dt, float v,float &m,float &h,float gbar_ca,float cao_ca, float cai, float &ica);
__declspec(__device__) void CuBreakpointModel_ca(double &sumCurrents, float &sumConductivity, float v,float &m,float &h,float gbar_ca,float cao_ca, float cai, float &ica) ;

__declspec(__device__) void CuInitModel_cad(float v,float &	ca		, float ica, float &cai);
__declspec(__device__) void CuDerivModel_cad(float dt, float v,float &	ca		, float ica, float &cai);
__declspec(__device__) void CuBreakpointModel_cad(double &sumCurrents, float &sumConductivity, float v,float &	ca		, float ica, float &cai) ;

__declspec(__device__) void CuInitModel_kca(float v,float &n,float gbar_kca,float caix_kca,float Ra_kca,float Rb_kca, float cai);
__declspec(__device__) void CuDerivModel_kca(float dt, float v,float &n,float gbar_kca,float caix_kca,float Ra_kca,float Rb_kca, float cai);
__declspec(__device__) void CuBreakpointModel_kca(double &sumCurrents, float &sumConductivity, float v,float &n,float gbar_kca,float caix_kca,float Ra_kca,float Rb_kca, float cai) ;

__declspec(__device__) void CuInitModel_km(float v,float &n,float gbar_km,float tha_km,float qa_km,float Ra_km,float Rb_km);
__declspec(__device__) void CuDerivModel_km(float dt, float v,float &n,float gbar_km,float tha_km,float qa_km,float Ra_km,float Rb_km);
__declspec(__device__) void CuBreakpointModel_km(double &sumCurrents, float &sumConductivity, float v,float &n,float gbar_km,float tha_km,float qa_km,float Ra_km,float Rb_km) ;

__declspec(__device__) void CuInitModel_kv(float v,float &n,float gbar_kv,float tha_kv,float qa_kv,float Ra_kv,float Rb_kv);
__declspec(__device__) void CuDerivModel_kv(float dt, float v,float &n,float gbar_kv,float tha_kv,float qa_kv,float Ra_kv,float Rb_kv);
__declspec(__device__) void CuBreakpointModel_kv(double &sumCurrents, float &sumConductivity, float v,float &n,float gbar_kv,float tha_kv,float qa_kv,float Ra_kv,float Rb_kv) ;

__declspec(__device__) void CuInitModel_na(float v,float &m,float &h,float gbar_na,float tha_na,float qa_na,float Ra_na,float Rb_na,float thi1_na,float thi2_na,float qi_na,float thinf_na,float qinf_na,float Rg_na,float Rd_na);
__declspec(__device__) void CuDerivModel_na(float dt, float v,float &m,float &h,float gbar_na,float tha_na,float qa_na,float Ra_na,float Rb_na,float thi1_na,float thi2_na,float qi_na,float thinf_na,float qinf_na,float Rg_na,float Rd_na);
__declspec(__device__) void CuBreakpointModel_na(double &sumCurrents, float &sumConductivity, float v,float &m,float &h,float gbar_na,float tha_na,float qa_na,float Ra_na,float Rb_na,float thi1_na,float thi2_na,float qi_na,float thinf_na,float qinf_na,float Rg_na,float Rd_na) ;








































#line 91 "c:\\pyneurogpu_winnew\\neurogpu6\\AllModels.h"
#line 8 "c:\\pyneurogpu_winnew\\neurogpu6\\AllModels.cu"



















































__declspec(__device__) void Cutrates_ca(float v ,float gbar_ca,float cao_ca,float &hinf,float &htau,float &minf,float &mtau);
__declspec(__device__) void Curates_ca(float vm ,float gbar_ca,float cao_ca,float &hinf,float &htau,float &minf,float &mtau);
__declspec(__device__) void Curates_kca(float cai,float gbar_kca,float caix_kca,float Ra_kca,float Rb_kca,float &a,float &b,float &ninf,float &ntau);
__declspec(__device__) void Cutrates_km(float v ,float gbar_km,float tha_km,float qa_km,float Ra_km,float Rb_km,float &a,float &b,float &ninf,float &ntau);
__declspec(__device__) void Curates_km(float v ,float gbar_km,float tha_km,float qa_km,float Ra_km,float Rb_km,float &a,float &b,float &ninf,float &ntau);
__declspec(__device__) void Cutrates_kv(float v ,float gbar_kv,float tha_kv,float qa_kv,float Ra_kv,float Rb_kv,float &a,float &b,float &ninf,float &ntau);
__declspec(__device__) void Curates_kv(float v ,float gbar_kv,float tha_kv,float qa_kv,float Ra_kv,float Rb_kv,float &a,float &b,float &ninf,float &ntau);
__declspec(__device__) void Cutrates_na(float v,float gbar_na,float tha_na,float qa_na,float Ra_na,float Rb_na,float thi1_na,float thi2_na,float qi_na,float thinf_na,float qinf_na,float Rg_na,float Rd_na,float &hinf,float &htau,float &minf,float &mtau);
__declspec(__device__) void Curates_na(float vm,float gbar_na,float tha_na,float qa_na,float Ra_na,float Rb_na,float thi1_na,float thi2_na,float qi_na,float thinf_na,float qinf_na,float Rg_na,float Rd_na,float &hinf,float &htau,float &minf,float &mtau);
float Cunernst(float ci,float co, float z) {
	if (z == 0) {
		return 0.;
	}
	if (ci <= 0.) {
		return 1e6;
	}else if (co <= 0.) {
		return -1e6;
	}else{
		return (1000.*8.3134*((37.0) + 273.15)/(96485.309f))/z*log(co/ci);
	}	
}


__declspec(__device__) float Cuefun_ca(float z){
	if (fabs(z) < 1e-4) {;
		return  1 - z/2;
	}else{;
		return  z/(exp(z) - 1);
	};
};
__declspec(__device__) float Cuefun_km(float z){
	if (fabs(z) < 1e-4) {;
		return  1 - z/2;
	}else{;
		return  z/(exp(z) - 1);
	};
};
__declspec(__device__) float Cuefun_kv(float z){
	if (fabs(z) < 1e-4) {;
		return  1 - z/2;
	}else{;
		return  z/(exp(z) - 1);
	};
};
__declspec(__device__) float Cutrap0_na(float v,float th,float a,float q){
	if (fabs((v-th)/q) > 1e-6) {;
	        return  a * (v - th) / (1 - exp(-(v - th)/q));
	} else {;
	        return  a * q;
	};
}	;


__declspec(__device__) void Cutrates_ca(float v ,float gbar_ca,float cao_ca,float &hinf,float &htau,float &minf,float &mtau) {

	Curates_ca(v,gbar_ca,cao_ca,hinf,htau,minf,mtau);
};
__declspec(__device__) void Curates_ca(float vm ,float gbar_ca,float cao_ca,float &hinf,float &htau,float &minf,float &mtau) {
float  a, b;

a = 0.209*Cuefun_ca(-(27+vm)/3.8);
	b = 0.94*exp((-75-vm)/17);
	;
	mtau = 1/(3.20936395327)/(a+b);
	minf = a/(a+b);
		;
	a = 0.000457*exp((-13-vm)/50);
	b = 0.0065/(exp((-vm-15)/28) + 1);
	htau = 1/(3.20936395327)/(a+b);
	hinf = a/(a+b);
};
__declspec(__device__) void Curates_kca(float cai,float gbar_kca,float caix_kca,float Ra_kca,float Rb_kca,float &a,float &b,float &ninf,float &ntau) {

;
a =pow((float) Ra_kca * cai,(float)caix_kca);
b = Rb_kca;

ntau = 1/(3.20936395327)/(a+b);
	ninf = a/(a+b);
;
};
__declspec(__device__) void Cutrates_km(float v ,float gbar_km,float tha_km,float qa_km,float Ra_km,float Rb_km,float &a,float &b,float &ninf,float &ntau) {

;
	Curates_km(v,gbar_km,tha_km,qa_km,Ra_km,Rb_km,a,b,ninf,ntau);
};
__declspec(__device__) void Curates_km(float v ,float gbar_km,float tha_km,float qa_km,float Ra_km,float Rb_km,float &a,float &b,float &ninf,float &ntau) {

;
;
a = Ra_km * qa_km * Cuefun_km(-(v - tha_km)/qa_km);
;
b = Rb_km * qa_km * Cuefun_km((v - tha_km)/qa_km);

ntau = 1/(3.20936395327)/(a+b);
	ninf = a/(a+b);
};
__declspec(__device__) void Cutrates_kv(float v ,float gbar_kv,float tha_kv,float qa_kv,float Ra_kv,float Rb_kv,float &a,float &b,float &ninf,float &ntau) {

;
	Curates_kv(v,gbar_kv,tha_kv,qa_kv,Ra_kv,Rb_kv,a,b,ninf,ntau);
};
__declspec(__device__) void Curates_kv(float v ,float gbar_kv,float tha_kv,float qa_kv,float Ra_kv,float Rb_kv,float &a,float &b,float &ninf,float &ntau) {

;
;
a = Ra_kv * qa_kv * Cuefun_kv(-(v - tha_kv)/qa_kv);
;
b = Rb_kv * qa_kv * Cuefun_kv((v - tha_kv)/qa_kv);

ntau = 1/(3.20936395327)/(a+b);
	ninf = a/(a+b);
};
__declspec(__device__) void Cutrates_na(float v,float gbar_na,float tha_na,float qa_na,float Ra_na,float Rb_na,float thi1_na,float thi2_na,float qi_na,float thinf_na,float qinf_na,float Rg_na,float Rd_na,float &hinf,float &htau,float &minf,float &mtau) {

;
;
	;
	Curates_na(v,gbar_na,tha_na,qa_na,Ra_na,Rb_na,thi1_na,thi2_na,qi_na,thinf_na,qinf_na,Rg_na,Rd_na,hinf,htau,minf,mtau);
};
__declspec(__device__) void Curates_na(float vm,float gbar_na,float tha_na,float qa_na,float Ra_na,float Rb_na,float thi1_na,float thi2_na,float qi_na,float thinf_na,float qinf_na,float Rg_na,float Rd_na,float &hinf,float &htau,float &minf,float &mtau) {
float  a, b;
	a = Cutrap0_na(vm,tha_na,Ra_na,qa_na);
	b = Cutrap0_na(-vm,-tha_na,Rb_na,qa_na);

	mtau = 1/(3.20936395327)/(a+b);
	minf = a/(a+b);
		;
	a = Cutrap0_na(vm,thi1_na,Rd_na,qi_na);
	b = Cutrap0_na(-vm,-thi2_na,Rg_na,qi_na);
	htau = 1/(3.20936395327)/(a+b);
	hinf = 1/(1+exp((vm-thinf_na)/qinf_na));
};




__declspec(__device__) void CuInitModel_ca(float v,float &m,float &h,float gbar_ca,float cao_ca, float cai, float &ica){
float hinf,htau,minf,mtau;
   
   Cutrates_ca(v+(0.0),gbar_ca,cao_ca,hinf,htau,minf,mtau);
   m = minf;
   h = hinf;
};


__declspec(__device__) void CuInitModel_cad(float v,float &	ca		, float ica, float &cai){
   ca = (0.0001);
   cai = ca;
};


__declspec(__device__) void CuInitModel_kca(float v,float &n,float gbar_kca,float caix_kca,float Ra_kca,float Rb_kca, float cai){
float a,b,ninf,ntau;
   Curates_kca(cai,gbar_kca,caix_kca,Ra_kca,Rb_kca,a,b,ninf,ntau);
   n = ninf;
};


__declspec(__device__) void CuInitModel_km(float v,float &n,float gbar_km,float tha_km,float qa_km,float Ra_km,float Rb_km){
float a,b,ninf,ntau;
   
   Cutrates_km(v,gbar_km,tha_km,qa_km,Ra_km,Rb_km,a,b,ninf,ntau);
   n = ninf;
};


__declspec(__device__) void CuInitModel_kv(float v,float &n,float gbar_kv,float tha_kv,float qa_kv,float Ra_kv,float Rb_kv){
float a,b,ninf,ntau;
   
   Cutrates_kv(v,gbar_kv,tha_kv,qa_kv,Ra_kv,Rb_kv,a,b,ninf,ntau);
   n = ninf;
};


__declspec(__device__) void CuInitModel_na(float v,float &m,float &h,float gbar_na,float tha_na,float qa_na,float Ra_na,float Rb_na,float thi1_na,float thi2_na,float qi_na,float thinf_na,float qinf_na,float Rg_na,float Rd_na){
float hinf,htau,minf,mtau;
   
   Cutrates_na(v+(-5.0),gbar_na,tha_na,qa_na,Ra_na,Rb_na,thi1_na,thi2_na,qi_na,thinf_na,qinf_na,Rg_na,Rd_na,hinf,htau,minf,mtau);
   m = minf;
   h = hinf;
};


__declspec(__device__) void CuDerivModel_ca(float dt, float v,float &m,float &h,float gbar_ca,float cao_ca, float cai, float &ica){

float hinf,htau,minf,mtau;
   Cutrates_ca (   v + (0.0) ,gbar_ca,cao_ca,hinf,htau,minf,mtau);
    m = m + (1. - exp(dt*(( ( ( - 1.0 ) ) ) / mtau)))*(- ( ( ( minf ) ) / mtau ) / ( ( ( ( - 1.0) ) ) / mtau ) - m) ;
    h = h + (1. - exp(dt*(( ( ( - 1.0 ) ) ) / htau)))*(- ( ( ( hinf ) ) / htau ) / ( ( ( ( - 1.0) ) ) / htau ) - h) ;
}

__declspec(__device__) void CuDerivModel_cad(float dt, float v,float &	ca		, float ica, float &cai){
float drive_channel;
   drive_channel = - ( 10000.0 ) * ica / ( 2.0 * (96485.309f) * (0.1) ) ;
   if ( drive_channel <= 0. ) {
     drive_channel = 0. ;
     }
    ca = ca + (1. - exp(dt*(( ( ( - 1.0 ) ) ) / (200.0))))*(- ( drive_channel + ( ( (0.0001) ) ) / (200.0) ) / ( ( ( ( - 1.0) ) ) / (200.0) ) - ca) ;
   cai = ca ;
}

__declspec(__device__) void CuDerivModel_kca(float dt, float v,float &n,float gbar_kca,float caix_kca,float Ra_kca,float Rb_kca, float cai){
float (-90.0f);
float a,b,ninf,ntau;
   Curates_kca (   cai ,gbar_kca,caix_kca,Ra_kca,Rb_kca,a,b,ninf,ntau);
    n = n + (1. - exp(dt*(( ( ( - 1.0 ) ) ) / ntau)))*(- ( ( ( ninf ) ) / ntau ) / ( ( ( ( - 1.0) ) ) / ntau ) - n) ;
}

__declspec(__device__) void CuDerivModel_km(float dt, float v,float &n,float gbar_km,float tha_km,float qa_km,float Ra_km,float Rb_km){

float a,b,ninf,ntau;
   Cutrates_km (   v ,gbar_km,tha_km,qa_km,Ra_km,Rb_km,a,b,ninf,ntau);
    n = n + (1. - exp(dt*(( ( ( - 1.0 ) ) ) / ntau)))*(- ( ( ( ninf ) ) / ntau ) / ( ( ( ( - 1.0) ) ) / ntau ) - n) ;
}

__declspec(__device__) void CuDerivModel_kv(float dt, float v,float &n,float gbar_kv,float tha_kv,float qa_kv,float Ra_kv,float Rb_kv){

float a,b,ninf,ntau;
   Cutrates_kv (   v ,gbar_kv,tha_kv,qa_kv,Ra_kv,Rb_kv,a,b,ninf,ntau);
    n = n + (1. - exp(dt*(( ( ( - 1.0 ) ) ) / ntau)))*(- ( ( ( ninf ) ) / ntau ) / ( ( ( ( - 1.0) ) ) / ntau ) - n) ;
}

__declspec(__device__) void CuDerivModel_na(float dt, float v,float &m,float &h,float gbar_na,float tha_na,float qa_na,float Ra_na,float Rb_na,float thi1_na,float thi2_na,float qi_na,float thinf_na,float qinf_na,float Rg_na,float Rd_na){

float hinf,htau,minf,mtau;
   Cutrates_na (   v + (-5.0) ,gbar_na,tha_na,qa_na,Ra_na,Rb_na,thi1_na,thi2_na,qi_na,thinf_na,qinf_na,Rg_na,Rd_na,hinf,htau,minf,mtau);
    m = m + (1. - exp(dt*(( ( ( - 1.0 ) ) ) / mtau)))*(- ( ( ( minf ) ) / mtau ) / ( ( ( ( - 1.0) ) ) / mtau ) - m) ;
    h = h + (1. - exp(dt*(( ( ( - 1.0 ) ) ) / htau)))*(- ( ( ( hinf ) ) / htau ) / ( ( ( ( - 1.0) ) ) / htau ) - h) ;
}





__declspec(__device__) void CuBreakpointModel_ca(double &sumCurrents, float &sumConductivity, float v,float &m,float &h,float gbar_ca,float cao_ca, float cai, float &ica) {
float gca, mtau, hinf, minf, htau;
float ;
gca=(3.20936395327)*gbar_ca*m*m*h;
ica=(1e-4)*gca*(v-(140.0f));
sumCurrents+= ica;
sumConductivity+= gca;
};
;


__declspec(__device__) void CuBreakpointModel_cad(double &sumCurrents, float &sumConductivity, float v,float &	ca		, float ica, float &cai) {
float gca;
float ;
};
;


__declspec(__device__) void CuBreakpointModel_kca(double &sumCurrents, float &sumConductivity, float v,float &n,float gbar_kca,float caix_kca,float Ra_kca,float Rb_kca, float cai) {
float ntau, gca, gk, ninf;
float ik;
gk=(3.20936395327)*gbar_kca*n;
ik=(1e-4)*gk*(v-(-90.0f));
sumCurrents+= ik;
sumConductivity+= gk;
};
;


__declspec(__device__) void CuBreakpointModel_km(double &sumCurrents, float &sumConductivity, float v,float &n,float gbar_km,float tha_km,float qa_km,float Ra_km,float Rb_km) {
float ntau, gk, ninf;
float ik;
gk=(3.20936395327)*gbar_km*n;
ik=(1e-4)*gk*(v-(-90.0f));
sumCurrents+= ik;
sumConductivity+= gk;
};
;


__declspec(__device__) void CuBreakpointModel_kv(double &sumCurrents, float &sumConductivity, float v,float &n,float gbar_kv,float tha_kv,float qa_kv,float Ra_kv,float Rb_kv) {
float ntau, gk, ninf;
float ik;
gk=(3.20936395327)*gbar_kv*n;
ik=(1e-4)*gk*(v-(-90.0f));
sumCurrents+= ik;
sumConductivity+= gk;
};
;


__declspec(__device__) void CuBreakpointModel_na(double &sumCurrents, float &sumConductivity, float v,float &m,float &h,float gbar_na,float tha_na,float qa_na,float Ra_na,float Rb_na,float thi1_na,float thi2_na,float qi_na,float thinf_na,float qinf_na,float Rg_na,float Rd_na) {
float mtau, gna, hinf, minf, htau;
float ina;
gna=(3.20936395327)*gbar_na*m*m*m*h;
ina=(1e-4)*gna*(v-(60.0f));
sumCurrents+= ina;
sumConductivity+= gna;
};
;
#line 3 "C:/pyNeuroGPU_winnew/NeuroGPU6/CudaStuff.cu"


__declspec(__constant__) float cCm[384];
__declspec(__constant__) double cE[384];
__declspec(__constant__) double cF[384];
__declspec(__constant__) unsigned short cFIdxs[384*6];
__declspec(__constant__) unsigned short cKs[384];
__declspec(__constant__) unsigned short cSegToComp[384];
__declspec(__constant__) unsigned short cBoolModel[384 * 6];
__declspec(__constant__) unsigned short cRelStarts[99];
__declspec(__constant__) unsigned short cRelEnds[99];
__declspec(__constant__) unsigned short cFathers[99];
__declspec(__constant__) unsigned short cRelVec[186];
__declspec(__constant__) unsigned short cSegStartI[186+1];
__declspec(__constant__) unsigned short cSegEndI[186+1];

__declspec(__constant__) unsigned short cCompByLevel32[28*32];
__declspec(__constant__) unsigned short cCompByFLevel32[28*32];
__declspec(__constant__) unsigned short cLRelStarts[24];
__declspec(__constant__) unsigned short cLRelEnds[24];
__declspec(__constant__) unsigned short cFLRelStarts[23];
__declspec(__constant__) unsigned short cFLRelEnds[23];
__declspec(__constant__) unsigned short cSonNoVec[384];




































	
#line 64 "C:/pyNeuroGPU_winnew/NeuroGPU6/CudaStuff.cu"



















































































































inline void gpuAssert(cudaError_t code, const char *file, int line, bool abort = true)
{
	if (code != cudaSuccess)
	{
		fprintf((__acrt_iob_func(2)), "GPUassert: %s %s %d\n", cudaGetErrorString(code), file, line);
		if (abort) exit(code);
	}
}

__declspec(__device__) void BeforeLU(HMat InMat, double* uHP, double* bHP, unsigned short Depth)
{
	unsigned short PIdx=threadIdx.x;
	unsigned short i,j,CurJ,CurB,t, CurLevel,LRelIndex;
	unsigned short JumctionI;
	LRelIndex=cLRelStarts[CurLevel];
	LRelIndex=LRelIndex+cLRelEnds[CurLevel];
	for(CurLevel=0;CurLevel<=Depth;CurLevel++) {
		
		for(LRelIndex=cLRelStarts[CurLevel];LRelIndex<=cLRelEnds[CurLevel];LRelIndex++){ 
		
			JumctionI=cCompByLevel32[LRelIndex*32+PIdx]-1;
			for(i=cSegStartI[JumctionI]-1;i<cSegEndI[JumctionI];i++) {
				double uHPm1=uHP[i-1];
			
				uHP[i]=uHP[i]-cF[i-1]*(cE[i-1]/uHPm1); 
				uHPm1=uHP[i-1];
				double bHPm1=bHP[i-1];
				bHP[i]=bHP[i]-bHPm1*cE[i-1]/uHPm1; 
			}
		}
		if(CurLevel<Depth) {
			for(LRelIndex=cFLRelStarts[CurLevel];LRelIndex<=cFLRelEnds[CurLevel];LRelIndex++){ 
				CurB=cCompByFLevel32[(LRelIndex)*32+PIdx]-1;
				CurJ=cFathers[CurB]-1;
				unsigned short St=cRelStarts[CurB];
				unsigned short En=cRelEnds[CurB];
				for(j=St;j<=En;j++) {
					t=cRelVec[j-1]-1;
					double uHPm1=uHP[t-1];
					uHP[CurJ]-=cF[t-1]*(cE[t-1]/uHPm1); 
					uHPm1=uHP[t-1];
					double bHPm1=bHP[t-1];
					bHP[CurJ]-=bHPm1*cE[t-1]/uHPm1; 
				}
			}
		}	
	}
}


__declspec(__device__) void BkSub(HMat InMat, double* PX, double* PF,double* uHP, double* bHP, unsigned short LognDepth)
{
	

unsigned short PIdx_1 =threadIdx.x+(32*(1 -1)); unsigned short NextID_1 ;unsigned short PIdx_2 =threadIdx.x+(32*(2 -1)); unsigned short NextID_2 ;unsigned short PIdx_3 =threadIdx.x+(32*(3 -1)); unsigned short NextID_3 ;unsigned short PIdx_4 =threadIdx.x+(32*(4 -1)); unsigned short NextID_4 ;unsigned short PIdx_5 =threadIdx.x+(32*(5 -1)); unsigned short NextID_5 ;unsigned short PIdx_6 =threadIdx.x+(32*(6 -1)); unsigned short NextID_6 ;unsigned short PIdx_7 =threadIdx.x+(32*(7 -1)); unsigned short NextID_7 ;unsigned short PIdx_8 =threadIdx.x+(32*(8 -1)); unsigned short NextID_8 ;unsigned short PIdx_9 =threadIdx.x+(32*(9 -1)); unsigned short NextID_9 ;unsigned short PIdx_10 =threadIdx.x+(32*(10 -1)); unsigned short NextID_10 ;unsigned short PIdx_11 =threadIdx.x+(32*(11 -1)); unsigned short NextID_11 ;unsigned short PIdx_12 =threadIdx.x+(32*(12 -1)); unsigned short NextID_12 ;
	unsigned short i;
	
	PX=bHP;
	PF=uHP;
	

PX[PIdx_1 ]=PX[PIdx_1 ]/PF[PIdx_1 ]; PF[PIdx_1 ]=-cF[PIdx_1 ]/PF[PIdx_1 ];PX[PIdx_2 ]=PX[PIdx_2 ]/PF[PIdx_2 ]; PF[PIdx_2 ]=-cF[PIdx_2 ]/PF[PIdx_2 ];PX[PIdx_3 ]=PX[PIdx_3 ]/PF[PIdx_3 ]; PF[PIdx_3 ]=-cF[PIdx_3 ]/PF[PIdx_3 ];PX[PIdx_4 ]=PX[PIdx_4 ]/PF[PIdx_4 ]; PF[PIdx_4 ]=-cF[PIdx_4 ]/PF[PIdx_4 ];PX[PIdx_5 ]=PX[PIdx_5 ]/PF[PIdx_5 ]; PF[PIdx_5 ]=-cF[PIdx_5 ]/PF[PIdx_5 ];PX[PIdx_6 ]=PX[PIdx_6 ]/PF[PIdx_6 ]; PF[PIdx_6 ]=-cF[PIdx_6 ]/PF[PIdx_6 ];PX[PIdx_7 ]=PX[PIdx_7 ]/PF[PIdx_7 ]; PF[PIdx_7 ]=-cF[PIdx_7 ]/PF[PIdx_7 ];PX[PIdx_8 ]=PX[PIdx_8 ]/PF[PIdx_8 ]; PF[PIdx_8 ]=-cF[PIdx_8 ]/PF[PIdx_8 ];PX[PIdx_9 ]=PX[PIdx_9 ]/PF[PIdx_9 ]; PF[PIdx_9 ]=-cF[PIdx_9 ]/PF[PIdx_9 ];PX[PIdx_10 ]=PX[PIdx_10 ]/PF[PIdx_10 ]; PF[PIdx_10 ]=-cF[PIdx_10 ]/PF[PIdx_10 ];PX[PIdx_11 ]=PX[PIdx_11 ]/PF[PIdx_11 ]; PF[PIdx_11 ]=-cF[PIdx_11 ]/PF[PIdx_11 ];PX[PIdx_12 ]=PX[PIdx_12 ]/PF[PIdx_12 ]; PF[PIdx_12 ]=-cF[PIdx_12 ]/PF[PIdx_12 ];

	PX[InMat.N]=0;
	PF[InMat.N]=1;
	for(i=0;i<LognDepth;i++) {	
		

NextID_1 =cFIdxs[i*InMat.N+PIdx_1 ]-1; float OldPXj_1 =PX[PIdx_1 ]; float OldPXNextID_1 =PX[NextID_1 ]; PX[PIdx_1 ]=OldPXj_1 +OldPXNextID_1 *PF[PIdx_1 ];NextID_2 =cFIdxs[i*InMat.N+PIdx_2 ]-1; float OldPXj_2 =PX[PIdx_2 ]; float OldPXNextID_2 =PX[NextID_2 ]; PX[PIdx_2 ]=OldPXj_2 +OldPXNextID_2 *PF[PIdx_2 ];NextID_3 =cFIdxs[i*InMat.N+PIdx_3 ]-1; float OldPXj_3 =PX[PIdx_3 ]; float OldPXNextID_3 =PX[NextID_3 ]; PX[PIdx_3 ]=OldPXj_3 +OldPXNextID_3 *PF[PIdx_3 ];NextID_4 =cFIdxs[i*InMat.N+PIdx_4 ]-1; float OldPXj_4 =PX[PIdx_4 ]; float OldPXNextID_4 =PX[NextID_4 ]; PX[PIdx_4 ]=OldPXj_4 +OldPXNextID_4 *PF[PIdx_4 ];NextID_5 =cFIdxs[i*InMat.N+PIdx_5 ]-1; float OldPXj_5 =PX[PIdx_5 ]; float OldPXNextID_5 =PX[NextID_5 ]; PX[PIdx_5 ]=OldPXj_5 +OldPXNextID_5 *PF[PIdx_5 ];NextID_6 =cFIdxs[i*InMat.N+PIdx_6 ]-1; float OldPXj_6 =PX[PIdx_6 ]; float OldPXNextID_6 =PX[NextID_6 ]; PX[PIdx_6 ]=OldPXj_6 +OldPXNextID_6 *PF[PIdx_6 ];NextID_7 =cFIdxs[i*InMat.N+PIdx_7 ]-1; float OldPXj_7 =PX[PIdx_7 ]; float OldPXNextID_7 =PX[NextID_7 ]; PX[PIdx_7 ]=OldPXj_7 +OldPXNextID_7 *PF[PIdx_7 ];NextID_8 =cFIdxs[i*InMat.N+PIdx_8 ]-1; float OldPXj_8 =PX[PIdx_8 ]; float OldPXNextID_8 =PX[NextID_8 ]; PX[PIdx_8 ]=OldPXj_8 +OldPXNextID_8 *PF[PIdx_8 ];NextID_9 =cFIdxs[i*InMat.N+PIdx_9 ]-1; float OldPXj_9 =PX[PIdx_9 ]; float OldPXNextID_9 =PX[NextID_9 ]; PX[PIdx_9 ]=OldPXj_9 +OldPXNextID_9 *PF[PIdx_9 ];NextID_10 =cFIdxs[i*InMat.N+PIdx_10 ]-1; float OldPXj_10 =PX[PIdx_10 ]; float OldPXNextID_10 =PX[NextID_10 ]; PX[PIdx_10 ]=OldPXj_10 +OldPXNextID_10 *PF[PIdx_10 ];NextID_11 =cFIdxs[i*InMat.N+PIdx_11 ]-1; float OldPXj_11 =PX[PIdx_11 ]; float OldPXNextID_11 =PX[NextID_11 ]; PX[PIdx_11 ]=OldPXj_11 +OldPXNextID_11 *PF[PIdx_11 ];NextID_12 =cFIdxs[i*InMat.N+PIdx_12 ]-1; float OldPXj_12 =PX[PIdx_12 ]; float OldPXNextID_12 =PX[NextID_12 ]; PX[PIdx_12 ]=OldPXj_12 +OldPXNextID_12 *PF[PIdx_12 ];

		
		
		

float OldPFj_1 =PF[PIdx_1 ]; float OldPFNextID_1 =PF[NextID_1 ]; PF[PIdx_1 ]=OldPFj_1 *OldPFNextID_1 ;float OldPFj_2 =PF[PIdx_2 ]; float OldPFNextID_2 =PF[NextID_2 ]; PF[PIdx_2 ]=OldPFj_2 *OldPFNextID_2 ;float OldPFj_3 =PF[PIdx_3 ]; float OldPFNextID_3 =PF[NextID_3 ]; PF[PIdx_3 ]=OldPFj_3 *OldPFNextID_3 ;float OldPFj_4 =PF[PIdx_4 ]; float OldPFNextID_4 =PF[NextID_4 ]; PF[PIdx_4 ]=OldPFj_4 *OldPFNextID_4 ;float OldPFj_5 =PF[PIdx_5 ]; float OldPFNextID_5 =PF[NextID_5 ]; PF[PIdx_5 ]=OldPFj_5 *OldPFNextID_5 ;float OldPFj_6 =PF[PIdx_6 ]; float OldPFNextID_6 =PF[NextID_6 ]; PF[PIdx_6 ]=OldPFj_6 *OldPFNextID_6 ;float OldPFj_7 =PF[PIdx_7 ]; float OldPFNextID_7 =PF[NextID_7 ]; PF[PIdx_7 ]=OldPFj_7 *OldPFNextID_7 ;float OldPFj_8 =PF[PIdx_8 ]; float OldPFNextID_8 =PF[NextID_8 ]; PF[PIdx_8 ]=OldPFj_8 *OldPFNextID_8 ;float OldPFj_9 =PF[PIdx_9 ]; float OldPFNextID_9 =PF[NextID_9 ]; PF[PIdx_9 ]=OldPFj_9 *OldPFNextID_9 ;float OldPFj_10 =PF[PIdx_10 ]; float OldPFNextID_10 =PF[NextID_10 ]; PF[PIdx_10 ]=OldPFj_10 *OldPFNextID_10 ;float OldPFj_11 =PF[PIdx_11 ]; float OldPFNextID_11 =PF[NextID_11 ]; PF[PIdx_11 ]=OldPFj_11 *OldPFNextID_11 ;float OldPFj_12 =PF[PIdx_12 ]; float OldPFNextID_12 =PF[NextID_12 ]; PF[PIdx_12 ]=OldPFj_12 *OldPFNextID_12 ;
	}
}
#line 257 "C:/pyNeuroGPU_winnew/NeuroGPU6/CudaStuff.cu"





































__declspec(__device__) void runSimulation(HMat InMat,float* ParamsM, float* V,Stim stim,Sim sim,float* VHotGlobal,float* SMemVHot,float* amps,unsigned short offset)
{


	double *uHP,*bHP;
	unsigned short StimID=threadIdx.y;
		





  unsigned short PerStimulus=((InMat.N+2)*2*sizeof(double))+(32 + sim.NRecSites*(32))*sizeof(float);
  PerStimulus =ceilf(double(PerStimulus)/sizeof(double))*sizeof(double); 
#line 309 "C:/pyNeuroGPU_winnew/NeuroGPU6/CudaStuff.cu"
	
	
	offset+=PerStimulus*threadIdx.y;
	uHP = (double*) &smem[offset];
	offset+=(InMat.N+2)*sizeof(double);
	
	bHP = (double*) &smem[offset];
	offset+=(InMat.N+2)*sizeof(double);
	
	offset = ceilf(double(offset)/sizeof(double))*sizeof(double);
	
	
	
	SMemVHot = (float*) &smem[offset];
	offset+=(32)*sim.NRecSites*sizeof(float);
	SMemVHot[32]=0;
    amps = (float*) &smem[offset];
    offset+=32*sizeof(float);
	unsigned short NeuronID = blockIdx.x;
	int Nt=stim.Nt;
	float t=0;
	double *PX,*PF;
	PX=bHP;
	PF=uHP;
	
unsigned short PIdx_1 =threadIdx.x+(32*(1 -1));unsigned short PIdx_2 =threadIdx.x+(32*(2 -1));unsigned short PIdx_3 =threadIdx.x+(32*(3 -1));unsigned short PIdx_4 =threadIdx.x+(32*(4 -1));unsigned short PIdx_5 =threadIdx.x+(32*(5 -1));unsigned short PIdx_6 =threadIdx.x+(32*(6 -1));unsigned short PIdx_7 =threadIdx.x+(32*(7 -1));unsigned short PIdx_8 =threadIdx.x+(32*(8 -1));unsigned short PIdx_9 =threadIdx.x+(32*(9 -1));unsigned short PIdx_10 =threadIdx.x+(32*(10 -1));unsigned short PIdx_11 =threadIdx.x+(32*(11 -1));unsigned short PIdx_12 =threadIdx.x+(32*(12 -1));

	 
float isModel_1 , dVec_1 , Vmid_1 ; float ModelStates_1 [10]; float v_1 =V[PIdx_1 ]; float dv_1;float isModel_2 , dVec_2 , Vmid_2 ; float ModelStates_2 [10]; float v_2 =V[PIdx_2 ]; float dv_2;float isModel_3 , dVec_3 , Vmid_3 ; float ModelStates_3 [10]; float v_3 =V[PIdx_3 ]; float dv_3;float isModel_4 , dVec_4 , Vmid_4 ; float ModelStates_4 [10]; float v_4 =V[PIdx_4 ]; float dv_4;float isModel_5 , dVec_5 , Vmid_5 ; float ModelStates_5 [10]; float v_5 =V[PIdx_5 ]; float dv_5;float isModel_6 , dVec_6 , Vmid_6 ; float ModelStates_6 [10]; float v_6 =V[PIdx_6 ]; float dv_6;float isModel_7 , dVec_7 , Vmid_7 ; float ModelStates_7 [10]; float v_7 =V[PIdx_7 ]; float dv_7;float isModel_8 , dVec_8 , Vmid_8 ; float ModelStates_8 [10]; float v_8 =V[PIdx_8 ]; float dv_8;float isModel_9 , dVec_9 , Vmid_9 ; float ModelStates_9 [10]; float v_9 =V[PIdx_9 ]; float dv_9;float isModel_10 , dVec_10 , Vmid_10 ; float ModelStates_10 [10]; float v_10 =V[PIdx_10 ]; float dv_10;float isModel_11 , dVec_11 , Vmid_11 ; float ModelStates_11 [10]; float v_11 =V[PIdx_11 ]; float dv_11;float isModel_12 , dVec_12 , Vmid_12 ; float ModelStates_12 [10]; float v_12 =V[PIdx_12 ]; float dv_12;

	 
double sumCurrents_1=0 ,sumCurrentsDv_1=0; float  sumConductivity_1=0 ,sumConductivityDv_1=0 ;double sumCurrents_2=0 ,sumCurrentsDv_2=0; float  sumConductivity_2=0 ,sumConductivityDv_2=0 ;double sumCurrents_3=0 ,sumCurrentsDv_3=0; float  sumConductivity_3=0 ,sumConductivityDv_3=0 ;double sumCurrents_4=0 ,sumCurrentsDv_4=0; float  sumConductivity_4=0 ,sumConductivityDv_4=0 ;double sumCurrents_5=0 ,sumCurrentsDv_5=0; float  sumConductivity_5=0 ,sumConductivityDv_5=0 ;double sumCurrents_6=0 ,sumCurrentsDv_6=0; float  sumConductivity_6=0 ,sumConductivityDv_6=0 ;double sumCurrents_7=0 ,sumCurrentsDv_7=0; float  sumConductivity_7=0 ,sumConductivityDv_7=0 ;double sumCurrents_8=0 ,sumCurrentsDv_8=0; float  sumConductivity_8=0 ,sumConductivityDv_8=0 ;double sumCurrents_9=0 ,sumCurrentsDv_9=0; float  sumConductivity_9=0 ,sumConductivityDv_9=0 ;double sumCurrents_10=0 ,sumCurrentsDv_10=0; float  sumConductivity_10=0 ,sumConductivityDv_10=0 ;double sumCurrents_11=0 ,sumCurrentsDv_11=0; float  sumConductivity_11=0 ,sumConductivityDv_11=0 ;double sumCurrents_12=0 ,sumCurrentsDv_12=0; float  sumConductivity_12=0 ,sumConductivityDv_12=0 ;
	
ModelStates_1 [0]=0;ModelStates_1 [1]=0;ModelStates_1 [2]=0;ModelStates_1 [3]=0;ModelStates_1 [4]=0;ModelStates_1 [5]=0;ModelStates_1 [6]=0;ModelStates_1 [7]=0;ModelStates_1 [8]=0;ModelStates_1 [9]=0;;ModelStates_2 [0]=0;ModelStates_2 [1]=0;ModelStates_2 [2]=0;ModelStates_2 [3]=0;ModelStates_2 [4]=0;ModelStates_2 [5]=0;ModelStates_2 [6]=0;ModelStates_2 [7]=0;ModelStates_2 [8]=0;ModelStates_2 [9]=0;;ModelStates_3 [0]=0;ModelStates_3 [1]=0;ModelStates_3 [2]=0;ModelStates_3 [3]=0;ModelStates_3 [4]=0;ModelStates_3 [5]=0;ModelStates_3 [6]=0;ModelStates_3 [7]=0;ModelStates_3 [8]=0;ModelStates_3 [9]=0;;ModelStates_4 [0]=0;ModelStates_4 [1]=0;ModelStates_4 [2]=0;ModelStates_4 [3]=0;ModelStates_4 [4]=0;ModelStates_4 [5]=0;ModelStates_4 [6]=0;ModelStates_4 [7]=0;ModelStates_4 [8]=0;ModelStates_4 [9]=0;;ModelStates_5 [0]=0;ModelStates_5 [1]=0;ModelStates_5 [2]=0;ModelStates_5 [3]=0;ModelStates_5 [4]=0;ModelStates_5 [5]=0;ModelStates_5 [6]=0;ModelStates_5 [7]=0;ModelStates_5 [8]=0;ModelStates_5 [9]=0;;ModelStates_6 [0]=0;ModelStates_6 [1]=0;ModelStates_6 [2]=0;ModelStates_6 [3]=0;ModelStates_6 [4]=0;ModelStates_6 [5]=0;ModelStates_6 [6]=0;ModelStates_6 [7]=0;ModelStates_6 [8]=0;ModelStates_6 [9]=0;;ModelStates_7 [0]=0;ModelStates_7 [1]=0;ModelStates_7 [2]=0;ModelStates_7 [3]=0;ModelStates_7 [4]=0;ModelStates_7 [5]=0;ModelStates_7 [6]=0;ModelStates_7 [7]=0;ModelStates_7 [8]=0;ModelStates_7 [9]=0;;ModelStates_8 [0]=0;ModelStates_8 [1]=0;ModelStates_8 [2]=0;ModelStates_8 [3]=0;ModelStates_8 [4]=0;ModelStates_8 [5]=0;ModelStates_8 [6]=0;ModelStates_8 [7]=0;ModelStates_8 [8]=0;ModelStates_8 [9]=0;;ModelStates_9 [0]=0;ModelStates_9 [1]=0;ModelStates_9 [2]=0;ModelStates_9 [3]=0;ModelStates_9 [4]=0;ModelStates_9 [5]=0;ModelStates_9 [6]=0;ModelStates_9 [7]=0;ModelStates_9 [8]=0;ModelStates_9 [9]=0;;ModelStates_10 [0]=0;ModelStates_10 [1]=0;ModelStates_10 [2]=0;ModelStates_10 [3]=0;ModelStates_10 [4]=0;ModelStates_10 [5]=0;ModelStates_10 [6]=0;ModelStates_10 [7]=0;ModelStates_10 [8]=0;ModelStates_10 [9]=0;;ModelStates_11 [0]=0;ModelStates_11 [1]=0;ModelStates_11 [2]=0;ModelStates_11 [3]=0;ModelStates_11 [4]=0;ModelStates_11 [5]=0;ModelStates_11 [6]=0;ModelStates_11 [7]=0;ModelStates_11 [8]=0;ModelStates_11 [9]=0;;ModelStates_12 [0]=0;ModelStates_12 [1]=0;ModelStates_12 [2]=0;ModelStates_12 [3]=0;ModelStates_12 [4]=0;ModelStates_12 [5]=0;ModelStates_12 [6]=0;ModelStates_12 [7]=0;ModelStates_12 [8]=0;ModelStates_12 [9]=0;;
	
unsigned short SonNo_1 =cSonNoVec[PIdx_1 ];unsigned short SonNo_2 =cSonNoVec[PIdx_2 ];unsigned short SonNo_3 =cSonNoVec[PIdx_3 ];unsigned short SonNo_4 =cSonNoVec[PIdx_4 ];unsigned short SonNo_5 =cSonNoVec[PIdx_5 ];unsigned short SonNo_6 =cSonNoVec[PIdx_6 ];unsigned short SonNo_7 =cSonNoVec[PIdx_7 ];unsigned short SonNo_8 =cSonNoVec[PIdx_8 ];unsigned short SonNo_9 =cSonNoVec[PIdx_9 ];unsigned short SonNo_10 =cSonNoVec[PIdx_10 ];unsigned short SonNo_11 =cSonNoVec[PIdx_11 ];unsigned short SonNo_12 =cSonNoVec[PIdx_12 ];
	
	
bHP[PIdx_1]=0;dv_1 =0;bHP[PIdx_2]=0;dv_2 =0;bHP[PIdx_3]=0;dv_3 =0;bHP[PIdx_4]=0;dv_4 =0;bHP[PIdx_5]=0;dv_5 =0;bHP[PIdx_6]=0;dv_6 =0;bHP[PIdx_7]=0;dv_7 =0;bHP[PIdx_8]=0;dv_8 =0;bHP[PIdx_9]=0;dv_9 =0;bHP[PIdx_10]=0;dv_10 =0;bHP[PIdx_11]=0;dv_11 =0;bHP[PIdx_12]=0;dv_12 =0;


	
unsigned short parentIndex_1 ; unsigned short Eidx_1 ; Eidx_1 = InMat.N-PIdx_1 -1;unsigned short parentIndex_2 ; unsigned short Eidx_2 ; Eidx_2 = InMat.N-PIdx_2 -1;unsigned short parentIndex_3 ; unsigned short Eidx_3 ; Eidx_3 = InMat.N-PIdx_3 -1;unsigned short parentIndex_4 ; unsigned short Eidx_4 ; Eidx_4 = InMat.N-PIdx_4 -1;unsigned short parentIndex_5 ; unsigned short Eidx_5 ; Eidx_5 = InMat.N-PIdx_5 -1;unsigned short parentIndex_6 ; unsigned short Eidx_6 ; Eidx_6 = InMat.N-PIdx_6 -1;unsigned short parentIndex_7 ; unsigned short Eidx_7 ; Eidx_7 = InMat.N-PIdx_7 -1;unsigned short parentIndex_8 ; unsigned short Eidx_8 ; Eidx_8 = InMat.N-PIdx_8 -1;unsigned short parentIndex_9 ; unsigned short Eidx_9 ; Eidx_9 = InMat.N-PIdx_9 -1;unsigned short parentIndex_10 ; unsigned short Eidx_10 ; Eidx_10 = InMat.N-PIdx_10 -1;unsigned short parentIndex_11 ; unsigned short Eidx_11 ; Eidx_11 = InMat.N-PIdx_11 -1;unsigned short parentIndex_12 ; unsigned short Eidx_12 ; Eidx_12 = InMat.N-PIdx_12 -1;
	
	if(Eidx_1>InMat.N-1){
		Eidx_1=InMat.N-1;
	}
	unsigned short perThreadParamMSize = InMat.NComps*28;

	
  if(cBoolModel[PIdx_1 +0*InMat.N]){CuInitModel_ca(v_1,ModelStates_1[0],ModelStates_1[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_1] ] ,ModelStates_1[8],ModelStates_1[9]);} if(cBoolModel[PIdx_1 +1*InMat.N]){CuInitModel_cad(v_1,ModelStates_1[2],ModelStates_1[9],ModelStates_1[8]);} if(cBoolModel[PIdx_1 +2*InMat.N]){CuInitModel_kca(v_1,ModelStates_1[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_1] ] ,ModelStates_1[8]);} if(cBoolModel[PIdx_1 +3*InMat.N]){CuInitModel_km(v_1,ModelStates_1[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_1] ] );} if(cBoolModel[PIdx_1 +4*InMat.N]){CuInitModel_kv(v_1,ModelStates_1[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_1] ] );} if(cBoolModel[PIdx_1 +5*InMat.N]){CuInitModel_na(v_1,ModelStates_1[6],ModelStates_1[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_1] ] );}  if(cBoolModel[PIdx_2 +0*InMat.N]){CuInitModel_ca(v_2,ModelStates_2[0],ModelStates_2[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_2] ] ,ModelStates_2[8],ModelStates_2[9]);} if(cBoolModel[PIdx_2 +1*InMat.N]){CuInitModel_cad(v_2,ModelStates_2[2],ModelStates_2[9],ModelStates_2[8]);} if(cBoolModel[PIdx_2 +2*InMat.N]){CuInitModel_kca(v_2,ModelStates_2[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_2] ] ,ModelStates_2[8]);} if(cBoolModel[PIdx_2 +3*InMat.N]){CuInitModel_km(v_2,ModelStates_2[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_2] ] );} if(cBoolModel[PIdx_2 +4*InMat.N]){CuInitModel_kv(v_2,ModelStates_2[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_2] ] );} if(cBoolModel[PIdx_2 +5*InMat.N]){CuInitModel_na(v_2,ModelStates_2[6],ModelStates_2[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_2] ] );}  if(cBoolModel[PIdx_3 +0*InMat.N]){CuInitModel_ca(v_3,ModelStates_3[0],ModelStates_3[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_3] ] ,ModelStates_3[8],ModelStates_3[9]);} if(cBoolModel[PIdx_3 +1*InMat.N]){CuInitModel_cad(v_3,ModelStates_3[2],ModelStates_3[9],ModelStates_3[8]);} if(cBoolModel[PIdx_3 +2*InMat.N]){CuInitModel_kca(v_3,ModelStates_3[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_3] ] ,ModelStates_3[8]);} if(cBoolModel[PIdx_3 +3*InMat.N]){CuInitModel_km(v_3,ModelStates_3[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_3] ] );} if(cBoolModel[PIdx_3 +4*InMat.N]){CuInitModel_kv(v_3,ModelStates_3[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_3] ] );} if(cBoolModel[PIdx_3 +5*InMat.N]){CuInitModel_na(v_3,ModelStates_3[6],ModelStates_3[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_3] ] );}  if(cBoolModel[PIdx_4 +0*InMat.N]){CuInitModel_ca(v_4,ModelStates_4[0],ModelStates_4[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_4] ] ,ModelStates_4[8],ModelStates_4[9]);} if(cBoolModel[PIdx_4 +1*InMat.N]){CuInitModel_cad(v_4,ModelStates_4[2],ModelStates_4[9],ModelStates_4[8]);} if(cBoolModel[PIdx_4 +2*InMat.N]){CuInitModel_kca(v_4,ModelStates_4[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_4] ] ,ModelStates_4[8]);} if(cBoolModel[PIdx_4 +3*InMat.N]){CuInitModel_km(v_4,ModelStates_4[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_4] ] );} if(cBoolModel[PIdx_4 +4*InMat.N]){CuInitModel_kv(v_4,ModelStates_4[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_4] ] );} if(cBoolModel[PIdx_4 +5*InMat.N]){CuInitModel_na(v_4,ModelStates_4[6],ModelStates_4[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_4] ] );}  if(cBoolModel[PIdx_5 +0*InMat.N]){CuInitModel_ca(v_5,ModelStates_5[0],ModelStates_5[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_5] ] ,ModelStates_5[8],ModelStates_5[9]);} if(cBoolModel[PIdx_5 +1*InMat.N]){CuInitModel_cad(v_5,ModelStates_5[2],ModelStates_5[9],ModelStates_5[8]);} if(cBoolModel[PIdx_5 +2*InMat.N]){CuInitModel_kca(v_5,ModelStates_5[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_5] ] ,ModelStates_5[8]);} if(cBoolModel[PIdx_5 +3*InMat.N]){CuInitModel_km(v_5,ModelStates_5[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_5] ] );} if(cBoolModel[PIdx_5 +4*InMat.N]){CuInitModel_kv(v_5,ModelStates_5[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_5] ] );} if(cBoolModel[PIdx_5 +5*InMat.N]){CuInitModel_na(v_5,ModelStates_5[6],ModelStates_5[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_5] ] );}  if(cBoolModel[PIdx_6 +0*InMat.N]){CuInitModel_ca(v_6,ModelStates_6[0],ModelStates_6[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_6] ] ,ModelStates_6[8],ModelStates_6[9]);} if(cBoolModel[PIdx_6 +1*InMat.N]){CuInitModel_cad(v_6,ModelStates_6[2],ModelStates_6[9],ModelStates_6[8]);} if(cBoolModel[PIdx_6 +2*InMat.N]){CuInitModel_kca(v_6,ModelStates_6[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_6] ] ,ModelStates_6[8]);} if(cBoolModel[PIdx_6 +3*InMat.N]){CuInitModel_km(v_6,ModelStates_6[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_6] ] );} if(cBoolModel[PIdx_6 +4*InMat.N]){CuInitModel_kv(v_6,ModelStates_6[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_6] ] );} if(cBoolModel[PIdx_6 +5*InMat.N]){CuInitModel_na(v_6,ModelStates_6[6],ModelStates_6[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_6] ] );}  if(cBoolModel[PIdx_7 +0*InMat.N]){CuInitModel_ca(v_7,ModelStates_7[0],ModelStates_7[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_7] ] ,ModelStates_7[8],ModelStates_7[9]);} if(cBoolModel[PIdx_7 +1*InMat.N]){CuInitModel_cad(v_7,ModelStates_7[2],ModelStates_7[9],ModelStates_7[8]);} if(cBoolModel[PIdx_7 +2*InMat.N]){CuInitModel_kca(v_7,ModelStates_7[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_7] ] ,ModelStates_7[8]);} if(cBoolModel[PIdx_7 +3*InMat.N]){CuInitModel_km(v_7,ModelStates_7[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_7] ] );} if(cBoolModel[PIdx_7 +4*InMat.N]){CuInitModel_kv(v_7,ModelStates_7[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_7] ] );} if(cBoolModel[PIdx_7 +5*InMat.N]){CuInitModel_na(v_7,ModelStates_7[6],ModelStates_7[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_7] ] );}  if(cBoolModel[PIdx_8 +0*InMat.N]){CuInitModel_ca(v_8,ModelStates_8[0],ModelStates_8[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_8] ] ,ModelStates_8[8],ModelStates_8[9]);} if(cBoolModel[PIdx_8 +1*InMat.N]){CuInitModel_cad(v_8,ModelStates_8[2],ModelStates_8[9],ModelStates_8[8]);} if(cBoolModel[PIdx_8 +2*InMat.N]){CuInitModel_kca(v_8,ModelStates_8[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_8] ] ,ModelStates_8[8]);} if(cBoolModel[PIdx_8 +3*InMat.N]){CuInitModel_km(v_8,ModelStates_8[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_8] ] );} if(cBoolModel[PIdx_8 +4*InMat.N]){CuInitModel_kv(v_8,ModelStates_8[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_8] ] );} if(cBoolModel[PIdx_8 +5*InMat.N]){CuInitModel_na(v_8,ModelStates_8[6],ModelStates_8[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_8] ] );}  if(cBoolModel[PIdx_9 +0*InMat.N]){CuInitModel_ca(v_9,ModelStates_9[0],ModelStates_9[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_9] ] ,ModelStates_9[8],ModelStates_9[9]);} if(cBoolModel[PIdx_9 +1*InMat.N]){CuInitModel_cad(v_9,ModelStates_9[2],ModelStates_9[9],ModelStates_9[8]);} if(cBoolModel[PIdx_9 +2*InMat.N]){CuInitModel_kca(v_9,ModelStates_9[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_9] ] ,ModelStates_9[8]);} if(cBoolModel[PIdx_9 +3*InMat.N]){CuInitModel_km(v_9,ModelStates_9[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_9] ] );} if(cBoolModel[PIdx_9 +4*InMat.N]){CuInitModel_kv(v_9,ModelStates_9[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_9] ] );} if(cBoolModel[PIdx_9 +5*InMat.N]){CuInitModel_na(v_9,ModelStates_9[6],ModelStates_9[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_9] ] );}  if(cBoolModel[PIdx_10 +0*InMat.N]){CuInitModel_ca(v_10,ModelStates_10[0],ModelStates_10[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_10] ] ,ModelStates_10[8],ModelStates_10[9]);} if(cBoolModel[PIdx_10 +1*InMat.N]){CuInitModel_cad(v_10,ModelStates_10[2],ModelStates_10[9],ModelStates_10[8]);} if(cBoolModel[PIdx_10 +2*InMat.N]){CuInitModel_kca(v_10,ModelStates_10[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_10] ] ,ModelStates_10[8]);} if(cBoolModel[PIdx_10 +3*InMat.N]){CuInitModel_km(v_10,ModelStates_10[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_10] ] );} if(cBoolModel[PIdx_10 +4*InMat.N]){CuInitModel_kv(v_10,ModelStates_10[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_10] ] );} if(cBoolModel[PIdx_10 +5*InMat.N]){CuInitModel_na(v_10,ModelStates_10[6],ModelStates_10[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_10] ] );}  if(cBoolModel[PIdx_11 +0*InMat.N]){CuInitModel_ca(v_11,ModelStates_11[0],ModelStates_11[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_11] ] ,ModelStates_11[8],ModelStates_11[9]);} if(cBoolModel[PIdx_11 +1*InMat.N]){CuInitModel_cad(v_11,ModelStates_11[2],ModelStates_11[9],ModelStates_11[8]);} if(cBoolModel[PIdx_11 +2*InMat.N]){CuInitModel_kca(v_11,ModelStates_11[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_11] ] ,ModelStates_11[8]);} if(cBoolModel[PIdx_11 +3*InMat.N]){CuInitModel_km(v_11,ModelStates_11[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_11] ] );} if(cBoolModel[PIdx_11 +4*InMat.N]){CuInitModel_kv(v_11,ModelStates_11[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_11] ] );} if(cBoolModel[PIdx_11 +5*InMat.N]){CuInitModel_na(v_11,ModelStates_11[6],ModelStates_11[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_11] ] );}  if(cBoolModel[PIdx_12 +0*InMat.N]){CuInitModel_ca(v_12,ModelStates_12[0],ModelStates_12[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_12] ] ,ModelStates_12[8],ModelStates_12[9]);} if(cBoolModel[PIdx_12 +1*InMat.N]){CuInitModel_cad(v_12,ModelStates_12[2],ModelStates_12[9],ModelStates_12[8]);} if(cBoolModel[PIdx_12 +2*InMat.N]){CuInitModel_kca(v_12,ModelStates_12[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_12] ] ,ModelStates_12[8]);} if(cBoolModel[PIdx_12 +3*InMat.N]){CuInitModel_km(v_12,ModelStates_12[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_12] ] );} if(cBoolModel[PIdx_12 +4*InMat.N]){CuInitModel_kv(v_12,ModelStates_12[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_12] ] );} if(cBoolModel[PIdx_12 +5*InMat.N]){CuInitModel_na(v_12,ModelStates_12[6],ModelStates_12[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_12] ] );}
	
		

parentIndex_1 =InMat.N-cKs[InMat.N-PIdx_1 ];parentIndex_2 =InMat.N-cKs[InMat.N-PIdx_2 ];parentIndex_3 =InMat.N-cKs[InMat.N-PIdx_3 ];parentIndex_4 =InMat.N-cKs[InMat.N-PIdx_4 ];parentIndex_5 =InMat.N-cKs[InMat.N-PIdx_5 ];parentIndex_6 =InMat.N-cKs[InMat.N-PIdx_6 ];parentIndex_7 =InMat.N-cKs[InMat.N-PIdx_7 ];parentIndex_8 =InMat.N-cKs[InMat.N-PIdx_8 ];parentIndex_9 =InMat.N-cKs[InMat.N-PIdx_9 ];parentIndex_10 =InMat.N-cKs[InMat.N-PIdx_10 ];parentIndex_11 =InMat.N-cKs[InMat.N-PIdx_11 ];parentIndex_12 =InMat.N-cKs[InMat.N-PIdx_12 ];
	unsigned short stimLoc = stim.loc;
    float stimArea = stim.area;
    unsigned short dtCounter=0;
    float  dt = sim.dt;





	

double rhs_1 ,D_1; float gModel_1 ,StimCurrent_1;double rhs_2 ,D_2; float gModel_2 ,StimCurrent_2;double rhs_3 ,D_3; float gModel_3 ,StimCurrent_3;double rhs_4 ,D_4; float gModel_4 ,StimCurrent_4;double rhs_5 ,D_5; float gModel_5 ,StimCurrent_5;double rhs_6 ,D_6; float gModel_6 ,StimCurrent_6;double rhs_7 ,D_7; float gModel_7 ,StimCurrent_7;double rhs_8 ,D_8; float gModel_8 ,StimCurrent_8;double rhs_9 ,D_9; float gModel_9 ,StimCurrent_9;double rhs_10 ,D_10; float gModel_10 ,StimCurrent_10;double rhs_11 ,D_11; float gModel_11 ,StimCurrent_11;double rhs_12 ,D_12; float gModel_12 ,StimCurrent_12;

for(int i=0;i<Nt;i++) {
        if(i==stim.dtInds[dtCounter]){
                dt = stim.durs[dtCounter];
                if (dtCounter != stim.numofdts-1){
                    dtCounter++;
                }
        }
        t+=0.5*dt;
 
       if((i%(32)==0)){
            if(i>0){
               for(int recInd =0;recInd<sim.NRecSites;recInd++){
					VHotGlobal[NeuronID*(sim.NRecSites*Nt*blockDim.y) +threadIdx.y*Nt*sim.NRecSites+recInd*Nt + (i-32)+PIdx_1]=SMemVHot[32*recInd + PIdx_1];
				}
            }
			
            amps[PIdx_1]=stim.amps[threadIdx.y*Nt+i+PIdx_1];
        }
        for(int recInd =0;recInd<sim.NRecSites;recInd++){
			if(sim.RecSites[recInd]%32 == threadIdx.x)
				
				SMemVHot[recInd*32+i%(32)]=v_1;
			
		}
		 

rhs_1 =0; D_1 =0; sumCurrents_1=0; sumConductivity_1=0; sumCurrentsDv_1=0; sumConductivityDv_1=0;StimCurrent_1 =0;rhs_2 =0; D_2 =0; sumCurrents_2=0; sumConductivity_2=0; sumCurrentsDv_2=0; sumConductivityDv_2=0;StimCurrent_2 =0;rhs_3 =0; D_3 =0; sumCurrents_3=0; sumConductivity_3=0; sumCurrentsDv_3=0; sumConductivityDv_3=0;StimCurrent_3 =0;rhs_4 =0; D_4 =0; sumCurrents_4=0; sumConductivity_4=0; sumCurrentsDv_4=0; sumConductivityDv_4=0;StimCurrent_4 =0;rhs_5 =0; D_5 =0; sumCurrents_5=0; sumConductivity_5=0; sumCurrentsDv_5=0; sumConductivityDv_5=0;StimCurrent_5 =0;rhs_6 =0; D_6 =0; sumCurrents_6=0; sumConductivity_6=0; sumCurrentsDv_6=0; sumConductivityDv_6=0;StimCurrent_6 =0;rhs_7 =0; D_7 =0; sumCurrents_7=0; sumConductivity_7=0; sumCurrentsDv_7=0; sumConductivityDv_7=0;StimCurrent_7 =0;rhs_8 =0; D_8 =0; sumCurrents_8=0; sumConductivity_8=0; sumCurrentsDv_8=0; sumConductivityDv_8=0;StimCurrent_8 =0;rhs_9 =0; D_9 =0; sumCurrents_9=0; sumConductivity_9=0; sumCurrentsDv_9=0; sumConductivityDv_9=0;StimCurrent_9 =0;rhs_10 =0; D_10 =0; sumCurrents_10=0; sumConductivity_10=0; sumCurrentsDv_10=0; sumConductivityDv_10=0;StimCurrent_10 =0;rhs_11 =0; D_11 =0; sumCurrents_11=0; sumConductivity_11=0; sumCurrentsDv_11=0; sumConductivityDv_11=0;StimCurrent_11 =0;rhs_12 =0; D_12 =0; sumCurrents_12=0; sumConductivity_12=0; sumCurrentsDv_12=0; sumConductivityDv_12=0;StimCurrent_12 =0;
		
		





    
    
if(PIdx_1  == stimLoc){StimCurrent_1 = 100*amps[i%32]/stimArea;}if(PIdx_2  == stimLoc){StimCurrent_2 = 100*amps[i%32]/stimArea;}if(PIdx_3  == stimLoc){StimCurrent_3 = 100*amps[i%32]/stimArea;}if(PIdx_4  == stimLoc){StimCurrent_4 = 100*amps[i%32]/stimArea;}if(PIdx_5  == stimLoc){StimCurrent_5 = 100*amps[i%32]/stimArea;}if(PIdx_6  == stimLoc){StimCurrent_6 = 100*amps[i%32]/stimArea;}if(PIdx_7  == stimLoc){StimCurrent_7 = 100*amps[i%32]/stimArea;}if(PIdx_8  == stimLoc){StimCurrent_8 = 100*amps[i%32]/stimArea;}if(PIdx_9  == stimLoc){StimCurrent_9 = 100*amps[i%32]/stimArea;}if(PIdx_10  == stimLoc){StimCurrent_10 = 100*amps[i%32]/stimArea;}if(PIdx_11  == stimLoc){StimCurrent_11 = 100*amps[i%32]/stimArea;}if(PIdx_12  == stimLoc){StimCurrent_12 = 100*amps[i%32]/stimArea;}
#line 415 "C:/pyNeuroGPU_winnew/NeuroGPU6/CudaStuff.cu"
 if(cBoolModel[PIdx_1 +0*InMat.N]){CuBreakpointModel_ca(sumCurrentsDv_1 , sumConductivityDv_1 ,v_1 +0.001,ModelStates_1[0],ModelStates_1[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_1] ] ,ModelStates_1[8],ModelStates_1[9]);} if(cBoolModel[PIdx_1 +1*InMat.N]){CuBreakpointModel_cad(sumCurrentsDv_1 , sumConductivityDv_1 ,v_1 +0.001,ModelStates_1[2],ModelStates_1[9],ModelStates_1[8]);} if(cBoolModel[PIdx_1 +2*InMat.N]){CuBreakpointModel_kca(sumCurrentsDv_1 , sumConductivityDv_1 ,v_1 +0.001,ModelStates_1[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_1] ] ,ModelStates_1[8]);} if(cBoolModel[PIdx_1 +3*InMat.N]){CuBreakpointModel_km(sumCurrentsDv_1 , sumConductivityDv_1 ,v_1 +0.001,ModelStates_1[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_1] ] );} if(cBoolModel[PIdx_1 +4*InMat.N]){CuBreakpointModel_kv(sumCurrentsDv_1 , sumConductivityDv_1 ,v_1 +0.001,ModelStates_1[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_1] ] );} if(cBoolModel[PIdx_1 +5*InMat.N]){CuBreakpointModel_na(sumCurrentsDv_1 , sumConductivityDv_1 ,v_1 +0.001,ModelStates_1[6],ModelStates_1[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_1] ] );} if(cBoolModel[PIdx_2 +0*InMat.N]){CuBreakpointModel_ca(sumCurrentsDv_2 , sumConductivityDv_2 ,v_2 +0.001,ModelStates_2[0],ModelStates_2[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_2] ] ,ModelStates_2[8],ModelStates_2[9]);} if(cBoolModel[PIdx_2 +1*InMat.N]){CuBreakpointModel_cad(sumCurrentsDv_2 , sumConductivityDv_2 ,v_2 +0.001,ModelStates_2[2],ModelStates_2[9],ModelStates_2[8]);} if(cBoolModel[PIdx_2 +2*InMat.N]){CuBreakpointModel_kca(sumCurrentsDv_2 , sumConductivityDv_2 ,v_2 +0.001,ModelStates_2[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_2] ] ,ModelStates_2[8]);} if(cBoolModel[PIdx_2 +3*InMat.N]){CuBreakpointModel_km(sumCurrentsDv_2 , sumConductivityDv_2 ,v_2 +0.001,ModelStates_2[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_2] ] );} if(cBoolModel[PIdx_2 +4*InMat.N]){CuBreakpointModel_kv(sumCurrentsDv_2 , sumConductivityDv_2 ,v_2 +0.001,ModelStates_2[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_2] ] );} if(cBoolModel[PIdx_2 +5*InMat.N]){CuBreakpointModel_na(sumCurrentsDv_2 , sumConductivityDv_2 ,v_2 +0.001,ModelStates_2[6],ModelStates_2[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_2] ] );} if(cBoolModel[PIdx_3 +0*InMat.N]){CuBreakpointModel_ca(sumCurrentsDv_3 , sumConductivityDv_3 ,v_3 +0.001,ModelStates_3[0],ModelStates_3[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_3] ] ,ModelStates_3[8],ModelStates_3[9]);} if(cBoolModel[PIdx_3 +1*InMat.N]){CuBreakpointModel_cad(sumCurrentsDv_3 , sumConductivityDv_3 ,v_3 +0.001,ModelStates_3[2],ModelStates_3[9],ModelStates_3[8]);} if(cBoolModel[PIdx_3 +2*InMat.N]){CuBreakpointModel_kca(sumCurrentsDv_3 , sumConductivityDv_3 ,v_3 +0.001,ModelStates_3[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_3] ] ,ModelStates_3[8]);} if(cBoolModel[PIdx_3 +3*InMat.N]){CuBreakpointModel_km(sumCurrentsDv_3 , sumConductivityDv_3 ,v_3 +0.001,ModelStates_3[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_3] ] );} if(cBoolModel[PIdx_3 +4*InMat.N]){CuBreakpointModel_kv(sumCurrentsDv_3 , sumConductivityDv_3 ,v_3 +0.001,ModelStates_3[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_3] ] );} if(cBoolModel[PIdx_3 +5*InMat.N]){CuBreakpointModel_na(sumCurrentsDv_3 , sumConductivityDv_3 ,v_3 +0.001,ModelStates_3[6],ModelStates_3[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_3] ] );} if(cBoolModel[PIdx_4 +0*InMat.N]){CuBreakpointModel_ca(sumCurrentsDv_4 , sumConductivityDv_4 ,v_4 +0.001,ModelStates_4[0],ModelStates_4[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_4] ] ,ModelStates_4[8],ModelStates_4[9]);} if(cBoolModel[PIdx_4 +1*InMat.N]){CuBreakpointModel_cad(sumCurrentsDv_4 , sumConductivityDv_4 ,v_4 +0.001,ModelStates_4[2],ModelStates_4[9],ModelStates_4[8]);} if(cBoolModel[PIdx_4 +2*InMat.N]){CuBreakpointModel_kca(sumCurrentsDv_4 , sumConductivityDv_4 ,v_4 +0.001,ModelStates_4[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_4] ] ,ModelStates_4[8]);} if(cBoolModel[PIdx_4 +3*InMat.N]){CuBreakpointModel_km(sumCurrentsDv_4 , sumConductivityDv_4 ,v_4 +0.001,ModelStates_4[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_4] ] );} if(cBoolModel[PIdx_4 +4*InMat.N]){CuBreakpointModel_kv(sumCurrentsDv_4 , sumConductivityDv_4 ,v_4 +0.001,ModelStates_4[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_4] ] );} if(cBoolModel[PIdx_4 +5*InMat.N]){CuBreakpointModel_na(sumCurrentsDv_4 , sumConductivityDv_4 ,v_4 +0.001,ModelStates_4[6],ModelStates_4[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_4] ] );} if(cBoolModel[PIdx_5 +0*InMat.N]){CuBreakpointModel_ca(sumCurrentsDv_5 , sumConductivityDv_5 ,v_5 +0.001,ModelStates_5[0],ModelStates_5[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_5] ] ,ModelStates_5[8],ModelStates_5[9]);} if(cBoolModel[PIdx_5 +1*InMat.N]){CuBreakpointModel_cad(sumCurrentsDv_5 , sumConductivityDv_5 ,v_5 +0.001,ModelStates_5[2],ModelStates_5[9],ModelStates_5[8]);} if(cBoolModel[PIdx_5 +2*InMat.N]){CuBreakpointModel_kca(sumCurrentsDv_5 , sumConductivityDv_5 ,v_5 +0.001,ModelStates_5[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_5] ] ,ModelStates_5[8]);} if(cBoolModel[PIdx_5 +3*InMat.N]){CuBreakpointModel_km(sumCurrentsDv_5 , sumConductivityDv_5 ,v_5 +0.001,ModelStates_5[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_5] ] );} if(cBoolModel[PIdx_5 +4*InMat.N]){CuBreakpointModel_kv(sumCurrentsDv_5 , sumConductivityDv_5 ,v_5 +0.001,ModelStates_5[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_5] ] );} if(cBoolModel[PIdx_5 +5*InMat.N]){CuBreakpointModel_na(sumCurrentsDv_5 , sumConductivityDv_5 ,v_5 +0.001,ModelStates_5[6],ModelStates_5[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_5] ] );} if(cBoolModel[PIdx_6 +0*InMat.N]){CuBreakpointModel_ca(sumCurrentsDv_6 , sumConductivityDv_6 ,v_6 +0.001,ModelStates_6[0],ModelStates_6[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_6] ] ,ModelStates_6[8],ModelStates_6[9]);} if(cBoolModel[PIdx_6 +1*InMat.N]){CuBreakpointModel_cad(sumCurrentsDv_6 , sumConductivityDv_6 ,v_6 +0.001,ModelStates_6[2],ModelStates_6[9],ModelStates_6[8]);} if(cBoolModel[PIdx_6 +2*InMat.N]){CuBreakpointModel_kca(sumCurrentsDv_6 , sumConductivityDv_6 ,v_6 +0.001,ModelStates_6[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_6] ] ,ModelStates_6[8]);} if(cBoolModel[PIdx_6 +3*InMat.N]){CuBreakpointModel_km(sumCurrentsDv_6 , sumConductivityDv_6 ,v_6 +0.001,ModelStates_6[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_6] ] );} if(cBoolModel[PIdx_6 +4*InMat.N]){CuBreakpointModel_kv(sumCurrentsDv_6 , sumConductivityDv_6 ,v_6 +0.001,ModelStates_6[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_6] ] );} if(cBoolModel[PIdx_6 +5*InMat.N]){CuBreakpointModel_na(sumCurrentsDv_6 , sumConductivityDv_6 ,v_6 +0.001,ModelStates_6[6],ModelStates_6[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_6] ] );} if(cBoolModel[PIdx_7 +0*InMat.N]){CuBreakpointModel_ca(sumCurrentsDv_7 , sumConductivityDv_7 ,v_7 +0.001,ModelStates_7[0],ModelStates_7[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_7] ] ,ModelStates_7[8],ModelStates_7[9]);} if(cBoolModel[PIdx_7 +1*InMat.N]){CuBreakpointModel_cad(sumCurrentsDv_7 , sumConductivityDv_7 ,v_7 +0.001,ModelStates_7[2],ModelStates_7[9],ModelStates_7[8]);} if(cBoolModel[PIdx_7 +2*InMat.N]){CuBreakpointModel_kca(sumCurrentsDv_7 , sumConductivityDv_7 ,v_7 +0.001,ModelStates_7[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_7] ] ,ModelStates_7[8]);} if(cBoolModel[PIdx_7 +3*InMat.N]){CuBreakpointModel_km(sumCurrentsDv_7 , sumConductivityDv_7 ,v_7 +0.001,ModelStates_7[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_7] ] );} if(cBoolModel[PIdx_7 +4*InMat.N]){CuBreakpointModel_kv(sumCurrentsDv_7 , sumConductivityDv_7 ,v_7 +0.001,ModelStates_7[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_7] ] );} if(cBoolModel[PIdx_7 +5*InMat.N]){CuBreakpointModel_na(sumCurrentsDv_7 , sumConductivityDv_7 ,v_7 +0.001,ModelStates_7[6],ModelStates_7[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_7] ] );} if(cBoolModel[PIdx_8 +0*InMat.N]){CuBreakpointModel_ca(sumCurrentsDv_8 , sumConductivityDv_8 ,v_8 +0.001,ModelStates_8[0],ModelStates_8[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_8] ] ,ModelStates_8[8],ModelStates_8[9]);} if(cBoolModel[PIdx_8 +1*InMat.N]){CuBreakpointModel_cad(sumCurrentsDv_8 , sumConductivityDv_8 ,v_8 +0.001,ModelStates_8[2],ModelStates_8[9],ModelStates_8[8]);} if(cBoolModel[PIdx_8 +2*InMat.N]){CuBreakpointModel_kca(sumCurrentsDv_8 , sumConductivityDv_8 ,v_8 +0.001,ModelStates_8[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_8] ] ,ModelStates_8[8]);} if(cBoolModel[PIdx_8 +3*InMat.N]){CuBreakpointModel_km(sumCurrentsDv_8 , sumConductivityDv_8 ,v_8 +0.001,ModelStates_8[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_8] ] );} if(cBoolModel[PIdx_8 +4*InMat.N]){CuBreakpointModel_kv(sumCurrentsDv_8 , sumConductivityDv_8 ,v_8 +0.001,ModelStates_8[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_8] ] );} if(cBoolModel[PIdx_8 +5*InMat.N]){CuBreakpointModel_na(sumCurrentsDv_8 , sumConductivityDv_8 ,v_8 +0.001,ModelStates_8[6],ModelStates_8[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_8] ] );} if(cBoolModel[PIdx_9 +0*InMat.N]){CuBreakpointModel_ca(sumCurrentsDv_9 , sumConductivityDv_9 ,v_9 +0.001,ModelStates_9[0],ModelStates_9[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_9] ] ,ModelStates_9[8],ModelStates_9[9]);} if(cBoolModel[PIdx_9 +1*InMat.N]){CuBreakpointModel_cad(sumCurrentsDv_9 , sumConductivityDv_9 ,v_9 +0.001,ModelStates_9[2],ModelStates_9[9],ModelStates_9[8]);} if(cBoolModel[PIdx_9 +2*InMat.N]){CuBreakpointModel_kca(sumCurrentsDv_9 , sumConductivityDv_9 ,v_9 +0.001,ModelStates_9[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_9] ] ,ModelStates_9[8]);} if(cBoolModel[PIdx_9 +3*InMat.N]){CuBreakpointModel_km(sumCurrentsDv_9 , sumConductivityDv_9 ,v_9 +0.001,ModelStates_9[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_9] ] );} if(cBoolModel[PIdx_9 +4*InMat.N]){CuBreakpointModel_kv(sumCurrentsDv_9 , sumConductivityDv_9 ,v_9 +0.001,ModelStates_9[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_9] ] );} if(cBoolModel[PIdx_9 +5*InMat.N]){CuBreakpointModel_na(sumCurrentsDv_9 , sumConductivityDv_9 ,v_9 +0.001,ModelStates_9[6],ModelStates_9[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_9] ] );} if(cBoolModel[PIdx_10 +0*InMat.N]){CuBreakpointModel_ca(sumCurrentsDv_10 , sumConductivityDv_10 ,v_10 +0.001,ModelStates_10[0],ModelStates_10[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_10] ] ,ModelStates_10[8],ModelStates_10[9]);} if(cBoolModel[PIdx_10 +1*InMat.N]){CuBreakpointModel_cad(sumCurrentsDv_10 , sumConductivityDv_10 ,v_10 +0.001,ModelStates_10[2],ModelStates_10[9],ModelStates_10[8]);} if(cBoolModel[PIdx_10 +2*InMat.N]){CuBreakpointModel_kca(sumCurrentsDv_10 , sumConductivityDv_10 ,v_10 +0.001,ModelStates_10[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_10] ] ,ModelStates_10[8]);} if(cBoolModel[PIdx_10 +3*InMat.N]){CuBreakpointModel_km(sumCurrentsDv_10 , sumConductivityDv_10 ,v_10 +0.001,ModelStates_10[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_10] ] );} if(cBoolModel[PIdx_10 +4*InMat.N]){CuBreakpointModel_kv(sumCurrentsDv_10 , sumConductivityDv_10 ,v_10 +0.001,ModelStates_10[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_10] ] );} if(cBoolModel[PIdx_10 +5*InMat.N]){CuBreakpointModel_na(sumCurrentsDv_10 , sumConductivityDv_10 ,v_10 +0.001,ModelStates_10[6],ModelStates_10[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_10] ] );} if(cBoolModel[PIdx_11 +0*InMat.N]){CuBreakpointModel_ca(sumCurrentsDv_11 , sumConductivityDv_11 ,v_11 +0.001,ModelStates_11[0],ModelStates_11[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_11] ] ,ModelStates_11[8],ModelStates_11[9]);} if(cBoolModel[PIdx_11 +1*InMat.N]){CuBreakpointModel_cad(sumCurrentsDv_11 , sumConductivityDv_11 ,v_11 +0.001,ModelStates_11[2],ModelStates_11[9],ModelStates_11[8]);} if(cBoolModel[PIdx_11 +2*InMat.N]){CuBreakpointModel_kca(sumCurrentsDv_11 , sumConductivityDv_11 ,v_11 +0.001,ModelStates_11[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_11] ] ,ModelStates_11[8]);} if(cBoolModel[PIdx_11 +3*InMat.N]){CuBreakpointModel_km(sumCurrentsDv_11 , sumConductivityDv_11 ,v_11 +0.001,ModelStates_11[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_11] ] );} if(cBoolModel[PIdx_11 +4*InMat.N]){CuBreakpointModel_kv(sumCurrentsDv_11 , sumConductivityDv_11 ,v_11 +0.001,ModelStates_11[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_11] ] );} if(cBoolModel[PIdx_11 +5*InMat.N]){CuBreakpointModel_na(sumCurrentsDv_11 , sumConductivityDv_11 ,v_11 +0.001,ModelStates_11[6],ModelStates_11[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_11] ] );} if(cBoolModel[PIdx_12 +0*InMat.N]){CuBreakpointModel_ca(sumCurrentsDv_12 , sumConductivityDv_12 ,v_12 +0.001,ModelStates_12[0],ModelStates_12[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_12] ] ,ModelStates_12[8],ModelStates_12[9]);} if(cBoolModel[PIdx_12 +1*InMat.N]){CuBreakpointModel_cad(sumCurrentsDv_12 , sumConductivityDv_12 ,v_12 +0.001,ModelStates_12[2],ModelStates_12[9],ModelStates_12[8]);} if(cBoolModel[PIdx_12 +2*InMat.N]){CuBreakpointModel_kca(sumCurrentsDv_12 , sumConductivityDv_12 ,v_12 +0.001,ModelStates_12[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_12] ] ,ModelStates_12[8]);} if(cBoolModel[PIdx_12 +3*InMat.N]){CuBreakpointModel_km(sumCurrentsDv_12 , sumConductivityDv_12 ,v_12 +0.001,ModelStates_12[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_12] ] );} if(cBoolModel[PIdx_12 +4*InMat.N]){CuBreakpointModel_kv(sumCurrentsDv_12 , sumConductivityDv_12 ,v_12 +0.001,ModelStates_12[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_12] ] );} if(cBoolModel[PIdx_12 +5*InMat.N]){CuBreakpointModel_na(sumCurrentsDv_12 , sumConductivityDv_12 ,v_12 +0.001,ModelStates_12[6],ModelStates_12[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_12] ] );}
 if(cBoolModel[PIdx_1 +0*InMat.N]){CuBreakpointModel_ca(sumCurrents_1 , sumConductivity_1,v_1 ,ModelStates_1[0],ModelStates_1[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_1] ] ,ModelStates_1[8],ModelStates_1[9]);} if(cBoolModel[PIdx_1 +1*InMat.N]){CuBreakpointModel_cad(sumCurrents_1 , sumConductivity_1,v_1 ,ModelStates_1[2],ModelStates_1[9],ModelStates_1[8]);} if(cBoolModel[PIdx_1 +2*InMat.N]){CuBreakpointModel_kca(sumCurrents_1 , sumConductivity_1,v_1 ,ModelStates_1[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_1] ] ,ModelStates_1[8]);} if(cBoolModel[PIdx_1 +3*InMat.N]){CuBreakpointModel_km(sumCurrents_1 , sumConductivity_1,v_1 ,ModelStates_1[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_1] ] );} if(cBoolModel[PIdx_1 +4*InMat.N]){CuBreakpointModel_kv(sumCurrents_1 , sumConductivity_1,v_1 ,ModelStates_1[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_1] ] );} if(cBoolModel[PIdx_1 +5*InMat.N]){CuBreakpointModel_na(sumCurrents_1 , sumConductivity_1,v_1 ,ModelStates_1[6],ModelStates_1[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_1] ] );} if(cBoolModel[PIdx_2 +0*InMat.N]){CuBreakpointModel_ca(sumCurrents_2 , sumConductivity_2,v_2 ,ModelStates_2[0],ModelStates_2[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_2] ] ,ModelStates_2[8],ModelStates_2[9]);} if(cBoolModel[PIdx_2 +1*InMat.N]){CuBreakpointModel_cad(sumCurrents_2 , sumConductivity_2,v_2 ,ModelStates_2[2],ModelStates_2[9],ModelStates_2[8]);} if(cBoolModel[PIdx_2 +2*InMat.N]){CuBreakpointModel_kca(sumCurrents_2 , sumConductivity_2,v_2 ,ModelStates_2[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_2] ] ,ModelStates_2[8]);} if(cBoolModel[PIdx_2 +3*InMat.N]){CuBreakpointModel_km(sumCurrents_2 , sumConductivity_2,v_2 ,ModelStates_2[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_2] ] );} if(cBoolModel[PIdx_2 +4*InMat.N]){CuBreakpointModel_kv(sumCurrents_2 , sumConductivity_2,v_2 ,ModelStates_2[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_2] ] );} if(cBoolModel[PIdx_2 +5*InMat.N]){CuBreakpointModel_na(sumCurrents_2 , sumConductivity_2,v_2 ,ModelStates_2[6],ModelStates_2[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_2] ] );} if(cBoolModel[PIdx_3 +0*InMat.N]){CuBreakpointModel_ca(sumCurrents_3 , sumConductivity_3,v_3 ,ModelStates_3[0],ModelStates_3[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_3] ] ,ModelStates_3[8],ModelStates_3[9]);} if(cBoolModel[PIdx_3 +1*InMat.N]){CuBreakpointModel_cad(sumCurrents_3 , sumConductivity_3,v_3 ,ModelStates_3[2],ModelStates_3[9],ModelStates_3[8]);} if(cBoolModel[PIdx_3 +2*InMat.N]){CuBreakpointModel_kca(sumCurrents_3 , sumConductivity_3,v_3 ,ModelStates_3[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_3] ] ,ModelStates_3[8]);} if(cBoolModel[PIdx_3 +3*InMat.N]){CuBreakpointModel_km(sumCurrents_3 , sumConductivity_3,v_3 ,ModelStates_3[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_3] ] );} if(cBoolModel[PIdx_3 +4*InMat.N]){CuBreakpointModel_kv(sumCurrents_3 , sumConductivity_3,v_3 ,ModelStates_3[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_3] ] );} if(cBoolModel[PIdx_3 +5*InMat.N]){CuBreakpointModel_na(sumCurrents_3 , sumConductivity_3,v_3 ,ModelStates_3[6],ModelStates_3[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_3] ] );} if(cBoolModel[PIdx_4 +0*InMat.N]){CuBreakpointModel_ca(sumCurrents_4 , sumConductivity_4,v_4 ,ModelStates_4[0],ModelStates_4[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_4] ] ,ModelStates_4[8],ModelStates_4[9]);} if(cBoolModel[PIdx_4 +1*InMat.N]){CuBreakpointModel_cad(sumCurrents_4 , sumConductivity_4,v_4 ,ModelStates_4[2],ModelStates_4[9],ModelStates_4[8]);} if(cBoolModel[PIdx_4 +2*InMat.N]){CuBreakpointModel_kca(sumCurrents_4 , sumConductivity_4,v_4 ,ModelStates_4[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_4] ] ,ModelStates_4[8]);} if(cBoolModel[PIdx_4 +3*InMat.N]){CuBreakpointModel_km(sumCurrents_4 , sumConductivity_4,v_4 ,ModelStates_4[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_4] ] );} if(cBoolModel[PIdx_4 +4*InMat.N]){CuBreakpointModel_kv(sumCurrents_4 , sumConductivity_4,v_4 ,ModelStates_4[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_4] ] );} if(cBoolModel[PIdx_4 +5*InMat.N]){CuBreakpointModel_na(sumCurrents_4 , sumConductivity_4,v_4 ,ModelStates_4[6],ModelStates_4[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_4] ] );} if(cBoolModel[PIdx_5 +0*InMat.N]){CuBreakpointModel_ca(sumCurrents_5 , sumConductivity_5,v_5 ,ModelStates_5[0],ModelStates_5[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_5] ] ,ModelStates_5[8],ModelStates_5[9]);} if(cBoolModel[PIdx_5 +1*InMat.N]){CuBreakpointModel_cad(sumCurrents_5 , sumConductivity_5,v_5 ,ModelStates_5[2],ModelStates_5[9],ModelStates_5[8]);} if(cBoolModel[PIdx_5 +2*InMat.N]){CuBreakpointModel_kca(sumCurrents_5 , sumConductivity_5,v_5 ,ModelStates_5[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_5] ] ,ModelStates_5[8]);} if(cBoolModel[PIdx_5 +3*InMat.N]){CuBreakpointModel_km(sumCurrents_5 , sumConductivity_5,v_5 ,ModelStates_5[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_5] ] );} if(cBoolModel[PIdx_5 +4*InMat.N]){CuBreakpointModel_kv(sumCurrents_5 , sumConductivity_5,v_5 ,ModelStates_5[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_5] ] );} if(cBoolModel[PIdx_5 +5*InMat.N]){CuBreakpointModel_na(sumCurrents_5 , sumConductivity_5,v_5 ,ModelStates_5[6],ModelStates_5[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_5] ] );} if(cBoolModel[PIdx_6 +0*InMat.N]){CuBreakpointModel_ca(sumCurrents_6 , sumConductivity_6,v_6 ,ModelStates_6[0],ModelStates_6[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_6] ] ,ModelStates_6[8],ModelStates_6[9]);} if(cBoolModel[PIdx_6 +1*InMat.N]){CuBreakpointModel_cad(sumCurrents_6 , sumConductivity_6,v_6 ,ModelStates_6[2],ModelStates_6[9],ModelStates_6[8]);} if(cBoolModel[PIdx_6 +2*InMat.N]){CuBreakpointModel_kca(sumCurrents_6 , sumConductivity_6,v_6 ,ModelStates_6[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_6] ] ,ModelStates_6[8]);} if(cBoolModel[PIdx_6 +3*InMat.N]){CuBreakpointModel_km(sumCurrents_6 , sumConductivity_6,v_6 ,ModelStates_6[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_6] ] );} if(cBoolModel[PIdx_6 +4*InMat.N]){CuBreakpointModel_kv(sumCurrents_6 , sumConductivity_6,v_6 ,ModelStates_6[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_6] ] );} if(cBoolModel[PIdx_6 +5*InMat.N]){CuBreakpointModel_na(sumCurrents_6 , sumConductivity_6,v_6 ,ModelStates_6[6],ModelStates_6[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_6] ] );} if(cBoolModel[PIdx_7 +0*InMat.N]){CuBreakpointModel_ca(sumCurrents_7 , sumConductivity_7,v_7 ,ModelStates_7[0],ModelStates_7[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_7] ] ,ModelStates_7[8],ModelStates_7[9]);} if(cBoolModel[PIdx_7 +1*InMat.N]){CuBreakpointModel_cad(sumCurrents_7 , sumConductivity_7,v_7 ,ModelStates_7[2],ModelStates_7[9],ModelStates_7[8]);} if(cBoolModel[PIdx_7 +2*InMat.N]){CuBreakpointModel_kca(sumCurrents_7 , sumConductivity_7,v_7 ,ModelStates_7[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_7] ] ,ModelStates_7[8]);} if(cBoolModel[PIdx_7 +3*InMat.N]){CuBreakpointModel_km(sumCurrents_7 , sumConductivity_7,v_7 ,ModelStates_7[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_7] ] );} if(cBoolModel[PIdx_7 +4*InMat.N]){CuBreakpointModel_kv(sumCurrents_7 , sumConductivity_7,v_7 ,ModelStates_7[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_7] ] );} if(cBoolModel[PIdx_7 +5*InMat.N]){CuBreakpointModel_na(sumCurrents_7 , sumConductivity_7,v_7 ,ModelStates_7[6],ModelStates_7[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_7] ] );} if(cBoolModel[PIdx_8 +0*InMat.N]){CuBreakpointModel_ca(sumCurrents_8 , sumConductivity_8,v_8 ,ModelStates_8[0],ModelStates_8[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_8] ] ,ModelStates_8[8],ModelStates_8[9]);} if(cBoolModel[PIdx_8 +1*InMat.N]){CuBreakpointModel_cad(sumCurrents_8 , sumConductivity_8,v_8 ,ModelStates_8[2],ModelStates_8[9],ModelStates_8[8]);} if(cBoolModel[PIdx_8 +2*InMat.N]){CuBreakpointModel_kca(sumCurrents_8 , sumConductivity_8,v_8 ,ModelStates_8[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_8] ] ,ModelStates_8[8]);} if(cBoolModel[PIdx_8 +3*InMat.N]){CuBreakpointModel_km(sumCurrents_8 , sumConductivity_8,v_8 ,ModelStates_8[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_8] ] );} if(cBoolModel[PIdx_8 +4*InMat.N]){CuBreakpointModel_kv(sumCurrents_8 , sumConductivity_8,v_8 ,ModelStates_8[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_8] ] );} if(cBoolModel[PIdx_8 +5*InMat.N]){CuBreakpointModel_na(sumCurrents_8 , sumConductivity_8,v_8 ,ModelStates_8[6],ModelStates_8[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_8] ] );} if(cBoolModel[PIdx_9 +0*InMat.N]){CuBreakpointModel_ca(sumCurrents_9 , sumConductivity_9,v_9 ,ModelStates_9[0],ModelStates_9[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_9] ] ,ModelStates_9[8],ModelStates_9[9]);} if(cBoolModel[PIdx_9 +1*InMat.N]){CuBreakpointModel_cad(sumCurrents_9 , sumConductivity_9,v_9 ,ModelStates_9[2],ModelStates_9[9],ModelStates_9[8]);} if(cBoolModel[PIdx_9 +2*InMat.N]){CuBreakpointModel_kca(sumCurrents_9 , sumConductivity_9,v_9 ,ModelStates_9[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_9] ] ,ModelStates_9[8]);} if(cBoolModel[PIdx_9 +3*InMat.N]){CuBreakpointModel_km(sumCurrents_9 , sumConductivity_9,v_9 ,ModelStates_9[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_9] ] );} if(cBoolModel[PIdx_9 +4*InMat.N]){CuBreakpointModel_kv(sumCurrents_9 , sumConductivity_9,v_9 ,ModelStates_9[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_9] ] );} if(cBoolModel[PIdx_9 +5*InMat.N]){CuBreakpointModel_na(sumCurrents_9 , sumConductivity_9,v_9 ,ModelStates_9[6],ModelStates_9[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_9] ] );} if(cBoolModel[PIdx_10 +0*InMat.N]){CuBreakpointModel_ca(sumCurrents_10 , sumConductivity_10,v_10 ,ModelStates_10[0],ModelStates_10[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_10] ] ,ModelStates_10[8],ModelStates_10[9]);} if(cBoolModel[PIdx_10 +1*InMat.N]){CuBreakpointModel_cad(sumCurrents_10 , sumConductivity_10,v_10 ,ModelStates_10[2],ModelStates_10[9],ModelStates_10[8]);} if(cBoolModel[PIdx_10 +2*InMat.N]){CuBreakpointModel_kca(sumCurrents_10 , sumConductivity_10,v_10 ,ModelStates_10[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_10] ] ,ModelStates_10[8]);} if(cBoolModel[PIdx_10 +3*InMat.N]){CuBreakpointModel_km(sumCurrents_10 , sumConductivity_10,v_10 ,ModelStates_10[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_10] ] );} if(cBoolModel[PIdx_10 +4*InMat.N]){CuBreakpointModel_kv(sumCurrents_10 , sumConductivity_10,v_10 ,ModelStates_10[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_10] ] );} if(cBoolModel[PIdx_10 +5*InMat.N]){CuBreakpointModel_na(sumCurrents_10 , sumConductivity_10,v_10 ,ModelStates_10[6],ModelStates_10[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_10] ] );} if(cBoolModel[PIdx_11 +0*InMat.N]){CuBreakpointModel_ca(sumCurrents_11 , sumConductivity_11,v_11 ,ModelStates_11[0],ModelStates_11[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_11] ] ,ModelStates_11[8],ModelStates_11[9]);} if(cBoolModel[PIdx_11 +1*InMat.N]){CuBreakpointModel_cad(sumCurrents_11 , sumConductivity_11,v_11 ,ModelStates_11[2],ModelStates_11[9],ModelStates_11[8]);} if(cBoolModel[PIdx_11 +2*InMat.N]){CuBreakpointModel_kca(sumCurrents_11 , sumConductivity_11,v_11 ,ModelStates_11[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_11] ] ,ModelStates_11[8]);} if(cBoolModel[PIdx_11 +3*InMat.N]){CuBreakpointModel_km(sumCurrents_11 , sumConductivity_11,v_11 ,ModelStates_11[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_11] ] );} if(cBoolModel[PIdx_11 +4*InMat.N]){CuBreakpointModel_kv(sumCurrents_11 , sumConductivity_11,v_11 ,ModelStates_11[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_11] ] );} if(cBoolModel[PIdx_11 +5*InMat.N]){CuBreakpointModel_na(sumCurrents_11 , sumConductivity_11,v_11 ,ModelStates_11[6],ModelStates_11[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_11] ] );} if(cBoolModel[PIdx_12 +0*InMat.N]){CuBreakpointModel_ca(sumCurrents_12 , sumConductivity_12,v_12 ,ModelStates_12[0],ModelStates_12[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_12] ] ,ModelStates_12[8],ModelStates_12[9]);} if(cBoolModel[PIdx_12 +1*InMat.N]){CuBreakpointModel_cad(sumCurrents_12 , sumConductivity_12,v_12 ,ModelStates_12[2],ModelStates_12[9],ModelStates_12[8]);} if(cBoolModel[PIdx_12 +2*InMat.N]){CuBreakpointModel_kca(sumCurrents_12 , sumConductivity_12,v_12 ,ModelStates_12[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_12] ] ,ModelStates_12[8]);} if(cBoolModel[PIdx_12 +3*InMat.N]){CuBreakpointModel_km(sumCurrents_12 , sumConductivity_12,v_12 ,ModelStates_12[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_12] ] );} if(cBoolModel[PIdx_12 +4*InMat.N]){CuBreakpointModel_kv(sumCurrents_12 , sumConductivity_12,v_12 ,ModelStates_12[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_12] ] );} if(cBoolModel[PIdx_12 +5*InMat.N]){CuBreakpointModel_na(sumCurrents_12 , sumConductivity_12,v_12 ,ModelStates_12[6],ModelStates_12[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_12] ] );}

	

gModel_1  = (sumCurrentsDv_1 -sumCurrents_1 )/0.001;  gModel_2  = (sumCurrentsDv_2 -sumCurrents_2 )/0.001;  gModel_3  = (sumCurrentsDv_3 -sumCurrents_3 )/0.001;  gModel_4  = (sumCurrentsDv_4 -sumCurrents_4 )/0.001;  gModel_5  = (sumCurrentsDv_5 -sumCurrents_5 )/0.001;  gModel_6  = (sumCurrentsDv_6 -sumCurrents_6 )/0.001;  gModel_7  = (sumCurrentsDv_7 -sumCurrents_7 )/0.001;  gModel_8  = (sumCurrentsDv_8 -sumCurrents_8 )/0.001;  gModel_9  = (sumCurrentsDv_9 -sumCurrents_9 )/0.001;  gModel_10  = (sumCurrentsDv_10 -sumCurrents_10 )/0.001;  gModel_11  = (sumCurrentsDv_11 -sumCurrents_11 )/0.001;  gModel_12  = (sumCurrentsDv_12 -sumCurrents_12 )/0.001;  
	

rhs_1 =StimCurrent_1 -sumCurrents_1 ;rhs_2 =StimCurrent_2 -sumCurrents_2 ;rhs_3 =StimCurrent_3 -sumCurrents_3 ;rhs_4 =StimCurrent_4 -sumCurrents_4 ;rhs_5 =StimCurrent_5 -sumCurrents_5 ;rhs_6 =StimCurrent_6 -sumCurrents_6 ;rhs_7 =StimCurrent_7 -sumCurrents_7 ;rhs_8 =StimCurrent_8 -sumCurrents_8 ;rhs_9 =StimCurrent_9 -sumCurrents_9 ;rhs_10 =StimCurrent_10 -sumCurrents_10 ;rhs_11 =StimCurrent_11 -sumCurrents_11 ;rhs_12 =StimCurrent_12 -sumCurrents_12 ;

D_1 =gModel_1 +cCm[PIdx_1 ]/(dt*1000); D_1 -=cF[InMat.N-PIdx_1 -1];D_2 =gModel_2 +cCm[PIdx_2 ]/(dt*1000); D_2 -=cF[InMat.N-PIdx_2 -1];D_3 =gModel_3 +cCm[PIdx_3 ]/(dt*1000); D_3 -=cF[InMat.N-PIdx_3 -1];D_4 =gModel_4 +cCm[PIdx_4 ]/(dt*1000); D_4 -=cF[InMat.N-PIdx_4 -1];D_5 =gModel_5 +cCm[PIdx_5 ]/(dt*1000); D_5 -=cF[InMat.N-PIdx_5 -1];D_6 =gModel_6 +cCm[PIdx_6 ]/(dt*1000); D_6 -=cF[InMat.N-PIdx_6 -1];D_7 =gModel_7 +cCm[PIdx_7 ]/(dt*1000); D_7 -=cF[InMat.N-PIdx_7 -1];D_8 =gModel_8 +cCm[PIdx_8 ]/(dt*1000); D_8 -=cF[InMat.N-PIdx_8 -1];D_9 =gModel_9 +cCm[PIdx_9 ]/(dt*1000); D_9 -=cF[InMat.N-PIdx_9 -1];D_10 =gModel_10 +cCm[PIdx_10 ]/(dt*1000); D_10 -=cF[InMat.N-PIdx_10 -1];D_11 =gModel_11 +cCm[PIdx_11 ]/(dt*1000); D_11 -=cF[InMat.N-PIdx_11 -1];D_12 =gModel_12 +cCm[PIdx_12 ]/(dt*1000); D_12 -=cF[InMat.N-PIdx_12 -1];
   
    
	if(PIdx_1==0) {
		parentIndex_1=0;
	};

 dv_1 +=bHP[InMat.N-parentIndex_1 -1]-bHP[InMat.N-PIdx_1 -1]; rhs_1 -=cF[InMat.N-PIdx_1 -1]*dv_1 ; dv_2 +=bHP[InMat.N-parentIndex_2 -1]-bHP[InMat.N-PIdx_2 -1]; rhs_2 -=cF[InMat.N-PIdx_2 -1]*dv_2 ; dv_3 +=bHP[InMat.N-parentIndex_3 -1]-bHP[InMat.N-PIdx_3 -1]; rhs_3 -=cF[InMat.N-PIdx_3 -1]*dv_3 ; dv_4 +=bHP[InMat.N-parentIndex_4 -1]-bHP[InMat.N-PIdx_4 -1]; rhs_4 -=cF[InMat.N-PIdx_4 -1]*dv_4 ; dv_5 +=bHP[InMat.N-parentIndex_5 -1]-bHP[InMat.N-PIdx_5 -1]; rhs_5 -=cF[InMat.N-PIdx_5 -1]*dv_5 ; dv_6 +=bHP[InMat.N-parentIndex_6 -1]-bHP[InMat.N-PIdx_6 -1]; rhs_6 -=cF[InMat.N-PIdx_6 -1]*dv_6 ; dv_7 +=bHP[InMat.N-parentIndex_7 -1]-bHP[InMat.N-PIdx_7 -1]; rhs_7 -=cF[InMat.N-PIdx_7 -1]*dv_7 ; dv_8 +=bHP[InMat.N-parentIndex_8 -1]-bHP[InMat.N-PIdx_8 -1]; rhs_8 -=cF[InMat.N-PIdx_8 -1]*dv_8 ; dv_9 +=bHP[InMat.N-parentIndex_9 -1]-bHP[InMat.N-PIdx_9 -1]; rhs_9 -=cF[InMat.N-PIdx_9 -1]*dv_9 ; dv_10 +=bHP[InMat.N-parentIndex_10 -1]-bHP[InMat.N-PIdx_10 -1]; rhs_10 -=cF[InMat.N-PIdx_10 -1]*dv_10 ; dv_11 +=bHP[InMat.N-parentIndex_11 -1]-bHP[InMat.N-PIdx_11 -1]; rhs_11 -=cF[InMat.N-PIdx_11 -1]*dv_11 ; dv_12 +=bHP[InMat.N-parentIndex_12 -1]-bHP[InMat.N-PIdx_12 -1]; rhs_12 -=cF[InMat.N-PIdx_12 -1]*dv_12 ;
		
		

	bHP[InMat.N-PIdx_1 -1]=rhs_1 ; uHP[InMat.N-PIdx_1 -1]=D_1 ;bHP[InMat.N-PIdx_2 -1]=rhs_2 ; uHP[InMat.N-PIdx_2 -1]=D_2 ;bHP[InMat.N-PIdx_3 -1]=rhs_3 ; uHP[InMat.N-PIdx_3 -1]=D_3 ;bHP[InMat.N-PIdx_4 -1]=rhs_4 ; uHP[InMat.N-PIdx_4 -1]=D_4 ;bHP[InMat.N-PIdx_5 -1]=rhs_5 ; uHP[InMat.N-PIdx_5 -1]=D_5 ;bHP[InMat.N-PIdx_6 -1]=rhs_6 ; uHP[InMat.N-PIdx_6 -1]=D_6 ;bHP[InMat.N-PIdx_7 -1]=rhs_7 ; uHP[InMat.N-PIdx_7 -1]=D_7 ;bHP[InMat.N-PIdx_8 -1]=rhs_8 ; uHP[InMat.N-PIdx_8 -1]=D_8 ;bHP[InMat.N-PIdx_9 -1]=rhs_9 ; uHP[InMat.N-PIdx_9 -1]=D_9 ;bHP[InMat.N-PIdx_10 -1]=rhs_10 ; uHP[InMat.N-PIdx_10 -1]=D_10 ;bHP[InMat.N-PIdx_11 -1]=rhs_11 ; uHP[InMat.N-PIdx_11 -1]=D_11 ;bHP[InMat.N-PIdx_12 -1]=rhs_12 ; uHP[InMat.N-PIdx_12 -1]=D_12 ;
		syncthreads();
		
		
		

	if(cSonNoVec[PIdx_1] ==1) {bHP[InMat.N-parentIndex_1 -1]+=cE[Eidx_1 ]*dv_1 ;uHP[InMat.N-parentIndex_1 -1]-=cE[Eidx_1 ];}if(cSonNoVec[PIdx_2] ==1) {bHP[InMat.N-parentIndex_2 -1]+=cE[Eidx_2 ]*dv_2 ;uHP[InMat.N-parentIndex_2 -1]-=cE[Eidx_2 ];}if(cSonNoVec[PIdx_3] ==1) {bHP[InMat.N-parentIndex_3 -1]+=cE[Eidx_3 ]*dv_3 ;uHP[InMat.N-parentIndex_3 -1]-=cE[Eidx_3 ];}if(cSonNoVec[PIdx_4] ==1) {bHP[InMat.N-parentIndex_4 -1]+=cE[Eidx_4 ]*dv_4 ;uHP[InMat.N-parentIndex_4 -1]-=cE[Eidx_4 ];}if(cSonNoVec[PIdx_5] ==1) {bHP[InMat.N-parentIndex_5 -1]+=cE[Eidx_5 ]*dv_5 ;uHP[InMat.N-parentIndex_5 -1]-=cE[Eidx_5 ];}if(cSonNoVec[PIdx_6] ==1) {bHP[InMat.N-parentIndex_6 -1]+=cE[Eidx_6 ]*dv_6 ;uHP[InMat.N-parentIndex_6 -1]-=cE[Eidx_6 ];}if(cSonNoVec[PIdx_7] ==1) {bHP[InMat.N-parentIndex_7 -1]+=cE[Eidx_7 ]*dv_7 ;uHP[InMat.N-parentIndex_7 -1]-=cE[Eidx_7 ];}if(cSonNoVec[PIdx_8] ==1) {bHP[InMat.N-parentIndex_8 -1]+=cE[Eidx_8 ]*dv_8 ;uHP[InMat.N-parentIndex_8 -1]-=cE[Eidx_8 ];}if(cSonNoVec[PIdx_9] ==1) {bHP[InMat.N-parentIndex_9 -1]+=cE[Eidx_9 ]*dv_9 ;uHP[InMat.N-parentIndex_9 -1]-=cE[Eidx_9 ];}if(cSonNoVec[PIdx_10] ==1) {bHP[InMat.N-parentIndex_10 -1]+=cE[Eidx_10 ]*dv_10 ;uHP[InMat.N-parentIndex_10 -1]-=cE[Eidx_10 ];}if(cSonNoVec[PIdx_11] ==1) {bHP[InMat.N-parentIndex_11 -1]+=cE[Eidx_11 ]*dv_11 ;uHP[InMat.N-parentIndex_11 -1]-=cE[Eidx_11 ];}if(cSonNoVec[PIdx_12] ==1) {bHP[InMat.N-parentIndex_12 -1]+=cE[Eidx_12 ]*dv_12 ;uHP[InMat.N-parentIndex_12 -1]-=cE[Eidx_12 ];}
		

	if(cSonNoVec[PIdx_1] ==2) {bHP[InMat.N-parentIndex_1 -1]+=cE[Eidx_1 ]*dv_1 ;uHP[InMat.N-parentIndex_1 -1]-=cE[Eidx_1 ];}if(cSonNoVec[PIdx_2] ==2) {bHP[InMat.N-parentIndex_2 -1]+=cE[Eidx_2 ]*dv_2 ;uHP[InMat.N-parentIndex_2 -1]-=cE[Eidx_2 ];}if(cSonNoVec[PIdx_3] ==2) {bHP[InMat.N-parentIndex_3 -1]+=cE[Eidx_3 ]*dv_3 ;uHP[InMat.N-parentIndex_3 -1]-=cE[Eidx_3 ];}if(cSonNoVec[PIdx_4] ==2) {bHP[InMat.N-parentIndex_4 -1]+=cE[Eidx_4 ]*dv_4 ;uHP[InMat.N-parentIndex_4 -1]-=cE[Eidx_4 ];}if(cSonNoVec[PIdx_5] ==2) {bHP[InMat.N-parentIndex_5 -1]+=cE[Eidx_5 ]*dv_5 ;uHP[InMat.N-parentIndex_5 -1]-=cE[Eidx_5 ];}if(cSonNoVec[PIdx_6] ==2) {bHP[InMat.N-parentIndex_6 -1]+=cE[Eidx_6 ]*dv_6 ;uHP[InMat.N-parentIndex_6 -1]-=cE[Eidx_6 ];}if(cSonNoVec[PIdx_7] ==2) {bHP[InMat.N-parentIndex_7 -1]+=cE[Eidx_7 ]*dv_7 ;uHP[InMat.N-parentIndex_7 -1]-=cE[Eidx_7 ];}if(cSonNoVec[PIdx_8] ==2) {bHP[InMat.N-parentIndex_8 -1]+=cE[Eidx_8 ]*dv_8 ;uHP[InMat.N-parentIndex_8 -1]-=cE[Eidx_8 ];}if(cSonNoVec[PIdx_9] ==2) {bHP[InMat.N-parentIndex_9 -1]+=cE[Eidx_9 ]*dv_9 ;uHP[InMat.N-parentIndex_9 -1]-=cE[Eidx_9 ];}if(cSonNoVec[PIdx_10] ==2) {bHP[InMat.N-parentIndex_10 -1]+=cE[Eidx_10 ]*dv_10 ;uHP[InMat.N-parentIndex_10 -1]-=cE[Eidx_10 ];}if(cSonNoVec[PIdx_11] ==2) {bHP[InMat.N-parentIndex_11 -1]+=cE[Eidx_11 ]*dv_11 ;uHP[InMat.N-parentIndex_11 -1]-=cE[Eidx_11 ];}if(cSonNoVec[PIdx_12] ==2) {bHP[InMat.N-parentIndex_12 -1]+=cE[Eidx_12 ]*dv_12 ;uHP[InMat.N-parentIndex_12 -1]-=cE[Eidx_12 ];}
		syncthreads();
		BeforeLU(InMat,uHP,bHP,InMat.Depth);

		BkSub(InMat, PX,PF,uHP,bHP,InMat.LognDepth);
		
	Vmid_1 =PX[InMat.N-PIdx_1 -1]; v_1 +=Vmid_1 ; Vmid_2 =PX[InMat.N-PIdx_2 -1]; v_2 +=Vmid_2 ; Vmid_3 =PX[InMat.N-PIdx_3 -1]; v_3 +=Vmid_3 ; Vmid_4 =PX[InMat.N-PIdx_4 -1]; v_4 +=Vmid_4 ; Vmid_5 =PX[InMat.N-PIdx_5 -1]; v_5 +=Vmid_5 ; Vmid_6 =PX[InMat.N-PIdx_6 -1]; v_6 +=Vmid_6 ; Vmid_7 =PX[InMat.N-PIdx_7 -1]; v_7 +=Vmid_7 ; Vmid_8 =PX[InMat.N-PIdx_8 -1]; v_8 +=Vmid_8 ; Vmid_9 =PX[InMat.N-PIdx_9 -1]; v_9 +=Vmid_9 ; Vmid_10 =PX[InMat.N-PIdx_10 -1]; v_10 +=Vmid_10 ; Vmid_11 =PX[InMat.N-PIdx_11 -1]; v_11 +=Vmid_11 ; Vmid_12 =PX[InMat.N-PIdx_12 -1]; v_12 +=Vmid_12 ; 
#line 453 "C:/pyNeuroGPU_winnew/NeuroGPU6/CudaStuff.cu"

		














            t+=0.5*dt;

        


	  if(cBoolModel[PIdx_1 +0*InMat.N]){CuDerivModel_ca(dt, v_1,ModelStates_1[0],ModelStates_1[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_1] ] ,ModelStates_1[8],ModelStates_1[9]);} if(cBoolModel[PIdx_1 +1*InMat.N]){CuDerivModel_cad(dt, v_1,ModelStates_1[2],ModelStates_1[9],ModelStates_1[8]);} if(cBoolModel[PIdx_1 +2*InMat.N]){CuDerivModel_kca(dt, v_1,ModelStates_1[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_1] ] ,ModelStates_1[8]);} if(cBoolModel[PIdx_1 +3*InMat.N]){CuDerivModel_km(dt, v_1,ModelStates_1[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_1] ] );} if(cBoolModel[PIdx_1 +4*InMat.N]){CuDerivModel_kv(dt, v_1,ModelStates_1[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_1] ] );} if(cBoolModel[PIdx_1 +5*InMat.N]){CuDerivModel_na(dt, v_1,ModelStates_1[6],ModelStates_1[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_1] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_1] ] );}  if(cBoolModel[PIdx_2 +0*InMat.N]){CuDerivModel_ca(dt, v_2,ModelStates_2[0],ModelStates_2[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_2] ] ,ModelStates_2[8],ModelStates_2[9]);} if(cBoolModel[PIdx_2 +1*InMat.N]){CuDerivModel_cad(dt, v_2,ModelStates_2[2],ModelStates_2[9],ModelStates_2[8]);} if(cBoolModel[PIdx_2 +2*InMat.N]){CuDerivModel_kca(dt, v_2,ModelStates_2[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_2] ] ,ModelStates_2[8]);} if(cBoolModel[PIdx_2 +3*InMat.N]){CuDerivModel_km(dt, v_2,ModelStates_2[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_2] ] );} if(cBoolModel[PIdx_2 +4*InMat.N]){CuDerivModel_kv(dt, v_2,ModelStates_2[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_2] ] );} if(cBoolModel[PIdx_2 +5*InMat.N]){CuDerivModel_na(dt, v_2,ModelStates_2[6],ModelStates_2[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_2] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_2] ] );}  if(cBoolModel[PIdx_3 +0*InMat.N]){CuDerivModel_ca(dt, v_3,ModelStates_3[0],ModelStates_3[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_3] ] ,ModelStates_3[8],ModelStates_3[9]);} if(cBoolModel[PIdx_3 +1*InMat.N]){CuDerivModel_cad(dt, v_3,ModelStates_3[2],ModelStates_3[9],ModelStates_3[8]);} if(cBoolModel[PIdx_3 +2*InMat.N]){CuDerivModel_kca(dt, v_3,ModelStates_3[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_3] ] ,ModelStates_3[8]);} if(cBoolModel[PIdx_3 +3*InMat.N]){CuDerivModel_km(dt, v_3,ModelStates_3[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_3] ] );} if(cBoolModel[PIdx_3 +4*InMat.N]){CuDerivModel_kv(dt, v_3,ModelStates_3[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_3] ] );} if(cBoolModel[PIdx_3 +5*InMat.N]){CuDerivModel_na(dt, v_3,ModelStates_3[6],ModelStates_3[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_3] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_3] ] );}  if(cBoolModel[PIdx_4 +0*InMat.N]){CuDerivModel_ca(dt, v_4,ModelStates_4[0],ModelStates_4[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_4] ] ,ModelStates_4[8],ModelStates_4[9]);} if(cBoolModel[PIdx_4 +1*InMat.N]){CuDerivModel_cad(dt, v_4,ModelStates_4[2],ModelStates_4[9],ModelStates_4[8]);} if(cBoolModel[PIdx_4 +2*InMat.N]){CuDerivModel_kca(dt, v_4,ModelStates_4[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_4] ] ,ModelStates_4[8]);} if(cBoolModel[PIdx_4 +3*InMat.N]){CuDerivModel_km(dt, v_4,ModelStates_4[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_4] ] );} if(cBoolModel[PIdx_4 +4*InMat.N]){CuDerivModel_kv(dt, v_4,ModelStates_4[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_4] ] );} if(cBoolModel[PIdx_4 +5*InMat.N]){CuDerivModel_na(dt, v_4,ModelStates_4[6],ModelStates_4[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_4] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_4] ] );}  if(cBoolModel[PIdx_5 +0*InMat.N]){CuDerivModel_ca(dt, v_5,ModelStates_5[0],ModelStates_5[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_5] ] ,ModelStates_5[8],ModelStates_5[9]);} if(cBoolModel[PIdx_5 +1*InMat.N]){CuDerivModel_cad(dt, v_5,ModelStates_5[2],ModelStates_5[9],ModelStates_5[8]);} if(cBoolModel[PIdx_5 +2*InMat.N]){CuDerivModel_kca(dt, v_5,ModelStates_5[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_5] ] ,ModelStates_5[8]);} if(cBoolModel[PIdx_5 +3*InMat.N]){CuDerivModel_km(dt, v_5,ModelStates_5[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_5] ] );} if(cBoolModel[PIdx_5 +4*InMat.N]){CuDerivModel_kv(dt, v_5,ModelStates_5[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_5] ] );} if(cBoolModel[PIdx_5 +5*InMat.N]){CuDerivModel_na(dt, v_5,ModelStates_5[6],ModelStates_5[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_5] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_5] ] );}  if(cBoolModel[PIdx_6 +0*InMat.N]){CuDerivModel_ca(dt, v_6,ModelStates_6[0],ModelStates_6[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_6] ] ,ModelStates_6[8],ModelStates_6[9]);} if(cBoolModel[PIdx_6 +1*InMat.N]){CuDerivModel_cad(dt, v_6,ModelStates_6[2],ModelStates_6[9],ModelStates_6[8]);} if(cBoolModel[PIdx_6 +2*InMat.N]){CuDerivModel_kca(dt, v_6,ModelStates_6[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_6] ] ,ModelStates_6[8]);} if(cBoolModel[PIdx_6 +3*InMat.N]){CuDerivModel_km(dt, v_6,ModelStates_6[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_6] ] );} if(cBoolModel[PIdx_6 +4*InMat.N]){CuDerivModel_kv(dt, v_6,ModelStates_6[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_6] ] );} if(cBoolModel[PIdx_6 +5*InMat.N]){CuDerivModel_na(dt, v_6,ModelStates_6[6],ModelStates_6[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_6] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_6] ] );}  if(cBoolModel[PIdx_7 +0*InMat.N]){CuDerivModel_ca(dt, v_7,ModelStates_7[0],ModelStates_7[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_7] ] ,ModelStates_7[8],ModelStates_7[9]);} if(cBoolModel[PIdx_7 +1*InMat.N]){CuDerivModel_cad(dt, v_7,ModelStates_7[2],ModelStates_7[9],ModelStates_7[8]);} if(cBoolModel[PIdx_7 +2*InMat.N]){CuDerivModel_kca(dt, v_7,ModelStates_7[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_7] ] ,ModelStates_7[8]);} if(cBoolModel[PIdx_7 +3*InMat.N]){CuDerivModel_km(dt, v_7,ModelStates_7[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_7] ] );} if(cBoolModel[PIdx_7 +4*InMat.N]){CuDerivModel_kv(dt, v_7,ModelStates_7[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_7] ] );} if(cBoolModel[PIdx_7 +5*InMat.N]){CuDerivModel_na(dt, v_7,ModelStates_7[6],ModelStates_7[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_7] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_7] ] );}  if(cBoolModel[PIdx_8 +0*InMat.N]){CuDerivModel_ca(dt, v_8,ModelStates_8[0],ModelStates_8[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_8] ] ,ModelStates_8[8],ModelStates_8[9]);} if(cBoolModel[PIdx_8 +1*InMat.N]){CuDerivModel_cad(dt, v_8,ModelStates_8[2],ModelStates_8[9],ModelStates_8[8]);} if(cBoolModel[PIdx_8 +2*InMat.N]){CuDerivModel_kca(dt, v_8,ModelStates_8[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_8] ] ,ModelStates_8[8]);} if(cBoolModel[PIdx_8 +3*InMat.N]){CuDerivModel_km(dt, v_8,ModelStates_8[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_8] ] );} if(cBoolModel[PIdx_8 +4*InMat.N]){CuDerivModel_kv(dt, v_8,ModelStates_8[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_8] ] );} if(cBoolModel[PIdx_8 +5*InMat.N]){CuDerivModel_na(dt, v_8,ModelStates_8[6],ModelStates_8[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_8] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_8] ] );}  if(cBoolModel[PIdx_9 +0*InMat.N]){CuDerivModel_ca(dt, v_9,ModelStates_9[0],ModelStates_9[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_9] ] ,ModelStates_9[8],ModelStates_9[9]);} if(cBoolModel[PIdx_9 +1*InMat.N]){CuDerivModel_cad(dt, v_9,ModelStates_9[2],ModelStates_9[9],ModelStates_9[8]);} if(cBoolModel[PIdx_9 +2*InMat.N]){CuDerivModel_kca(dt, v_9,ModelStates_9[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_9] ] ,ModelStates_9[8]);} if(cBoolModel[PIdx_9 +3*InMat.N]){CuDerivModel_km(dt, v_9,ModelStates_9[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_9] ] );} if(cBoolModel[PIdx_9 +4*InMat.N]){CuDerivModel_kv(dt, v_9,ModelStates_9[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_9] ] );} if(cBoolModel[PIdx_9 +5*InMat.N]){CuDerivModel_na(dt, v_9,ModelStates_9[6],ModelStates_9[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_9] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_9] ] );}  if(cBoolModel[PIdx_10 +0*InMat.N]){CuDerivModel_ca(dt, v_10,ModelStates_10[0],ModelStates_10[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_10] ] ,ModelStates_10[8],ModelStates_10[9]);} if(cBoolModel[PIdx_10 +1*InMat.N]){CuDerivModel_cad(dt, v_10,ModelStates_10[2],ModelStates_10[9],ModelStates_10[8]);} if(cBoolModel[PIdx_10 +2*InMat.N]){CuDerivModel_kca(dt, v_10,ModelStates_10[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_10] ] ,ModelStates_10[8]);} if(cBoolModel[PIdx_10 +3*InMat.N]){CuDerivModel_km(dt, v_10,ModelStates_10[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_10] ] );} if(cBoolModel[PIdx_10 +4*InMat.N]){CuDerivModel_kv(dt, v_10,ModelStates_10[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_10] ] );} if(cBoolModel[PIdx_10 +5*InMat.N]){CuDerivModel_na(dt, v_10,ModelStates_10[6],ModelStates_10[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_10] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_10] ] );}  if(cBoolModel[PIdx_11 +0*InMat.N]){CuDerivModel_ca(dt, v_11,ModelStates_11[0],ModelStates_11[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_11] ] ,ModelStates_11[8],ModelStates_11[9]);} if(cBoolModel[PIdx_11 +1*InMat.N]){CuDerivModel_cad(dt, v_11,ModelStates_11[2],ModelStates_11[9],ModelStates_11[8]);} if(cBoolModel[PIdx_11 +2*InMat.N]){CuDerivModel_kca(dt, v_11,ModelStates_11[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_11] ] ,ModelStates_11[8]);} if(cBoolModel[PIdx_11 +3*InMat.N]){CuDerivModel_km(dt, v_11,ModelStates_11[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_11] ] );} if(cBoolModel[PIdx_11 +4*InMat.N]){CuDerivModel_kv(dt, v_11,ModelStates_11[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_11] ] );} if(cBoolModel[PIdx_11 +5*InMat.N]){CuDerivModel_na(dt, v_11,ModelStates_11[6],ModelStates_11[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_11] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_11] ] );}  if(cBoolModel[PIdx_12 +0*InMat.N]){CuDerivModel_ca(dt, v_12,ModelStates_12[0],ModelStates_12[1],ParamsM[NeuronID*perThreadParamMSize + 0*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 1*InMat.NComps+cSegToComp[PIdx_12] ] ,ModelStates_12[8],ModelStates_12[9]);} if(cBoolModel[PIdx_12 +1*InMat.N]){CuDerivModel_cad(dt, v_12,ModelStates_12[2],ModelStates_12[9],ModelStates_12[8]);} if(cBoolModel[PIdx_12 +2*InMat.N]){CuDerivModel_kca(dt, v_12,ModelStates_12[3],ParamsM[NeuronID*perThreadParamMSize + 2*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 3*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 4*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 5*InMat.NComps+cSegToComp[PIdx_12] ] ,ModelStates_12[8]);} if(cBoolModel[PIdx_12 +3*InMat.N]){CuDerivModel_km(dt, v_12,ModelStates_12[4],ParamsM[NeuronID*perThreadParamMSize + 6*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 7*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 8*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 9*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 10*InMat.NComps+cSegToComp[PIdx_12] ] );} if(cBoolModel[PIdx_12 +4*InMat.N]){CuDerivModel_kv(dt, v_12,ModelStates_12[5],ParamsM[NeuronID*perThreadParamMSize + 11*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 12*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 13*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 14*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 15*InMat.NComps+cSegToComp[PIdx_12] ] );} if(cBoolModel[PIdx_12 +5*InMat.N]){CuDerivModel_na(dt, v_12,ModelStates_12[6],ModelStates_12[7],ParamsM[NeuronID*perThreadParamMSize + 16*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 17*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 18*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 19*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 20*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 21*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 22*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 23*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 24*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 25*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 26*InMat.NComps+cSegToComp[PIdx_12] ] ,ParamsM[NeuronID*perThreadParamMSize + 27*InMat.NComps+cSegToComp[PIdx_12] ] );}

 
 
    }
	
   for(int recInd =0;recInd<sim.NRecSites;recInd++){
		VHotGlobal[NeuronID*(sim.NRecSites*Nt*blockDim.y) +threadIdx.y*Nt*sim.NRecSites+recInd*Nt + Nt-32+PIdx_1]=SMemVHot[32*recInd + PIdx_1];
	}
 
}
__declspec(__global__) void NeuroGPUKernel(Stim stim, float* ParamsM, Sim sim, HMat InMat, float *V,float* VHotGlobal,unsigned short CompDepth,unsigned short CompFDepth)
{

	float *amps,*SMemVHot;
	unsigned short offset=0;
	
	
	
	runSimulation(InMat,ParamsM,V,stim,sim,VHotGlobal,SMemVHot,amps,offset);

}
void ReadParamsMatX(const char* FN,float* ParamsM,unsigned short NParams,unsigned short Nx) {
	char FileName[300];
	
	sprintf(FileName,"%sForC.mat",FN);
	FILE *fl = fopen(FileName, "rb"); 
	if (!fl) {
		printf("Failed to read TreeData.x\n");
		return;
	}
	fread(ParamsM, sizeof(float), Nx*NParams, fl);
	fclose(fl);
}

void ReadParamsMat(const char* FN,float** ParamsM,unsigned short NParams,unsigned short Nx) {
	char FileName[300];
	
	sprintf(FileName,"%sForC.mat",FN);
	FILE *fl = fopen(FileName, "rb"); 
	if (!fl) {
		printf("Failed to read TreeData.x\n");
		return;
	}
	for(int i=0;i<NParams;i++){
		ParamsM[i]=(float*)malloc(Nx * sizeof(float));
		fread(ParamsM[i], sizeof(float), Nx, fl);
	}
	fclose(fl);
}


cudaError_t stEfork2TimeLoopGPU(Stim stim, Sim sim, float* ParamsM, HMat& InMat, float* V,unsigned short CompDepth,unsigned short CompFDepth,unsigned short NSets) { 

	cudaError_t cudaStatus;
	cudaStatus = cudaSetDevice(1);
	cudaStatus = cudaDeviceReset();
	float *VHotsGlobal,*VHotsHost;
	unsigned short Nt=stim.Nt;
	cudaMallocHost((void**)&VHotsHost,stim.NStimuli*Nt*sim.NRecSites*NSets*sizeof(float));
	
	int i,j,t;
	
	float *PXOut_d,*PFOut_d;
	float *uHPOut_d, *bHPOut_d;
	HMat Mat_d;
	Mat_d.N=InMat.N;
	Mat_d.NComps=InMat.NComps;
	Mat_d.Depth=InMat.Depth;
	Mat_d.NModels=InMat.NModels;
	Mat_d.LognDepth=InMat.LognDepth;
	Mat_d.nFathers=InMat.nFathers;
	Mat_d.nCallForFather=InMat.nCallForFather;
	Mat_d.nLRel=InMat.nLRel;
	Mat_d.nFLRel=InMat.nFLRel;
	Stim stim_d;
	stim_d.NStimuli = stim.NStimuli;
	stim_d.comp = stim.comp;
	stim_d.area = stim.area;
	stim_d.loc = stim.loc;
	stim_d.Nt = stim.Nt;
	Sim sim_d; 	 			
	sim_d.Celsius = sim.Celsius; 	 	
	sim_d.dt = sim.dt; 	 	
	sim_d.NRecSites = sim.NRecSites; 	 	
	sim_d.TFinal = sim.TFinal; 







    stim_d.numofdts = stim.numofdts;
    cudaStatus = cudaMalloc((void**)&stim_d.dtInds, stim_d.numofdts * sizeof(unsigned short));
    cudaStatus = cudaMalloc((void**)&stim_d.durs, stim_d.numofdts * sizeof(float));
    cudaStatus = cudaMalloc((void**)&stim_d.amps, stim_d.Nt*stim.NStimuli * sizeof(float));
#line 572 "C:/pyNeuroGPU_winnew/NeuroGPU6/CudaStuff.cu"
	cudaStatus = cudaMalloc((void**)&sim_d.RecSites, sim_d.NRecSites * sizeof(unsigned short));
	


	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	cudaStatus = cudaMalloc((void**)&VHotsGlobal, NSets*sim.NRecSites*Nt *stim.NStimuli* sizeof(float));
	

	
#line 597 "C:/pyNeuroGPU_winnew/NeuroGPU6/CudaStuff.cu"



	







	

	if (cudaStatus != cudaSuccess) {
		fprintf((__acrt_iob_func(2)), "cudaMalloc failed!");
		return cudaStatus;  
	}

	






	
    cudaStatus = cudaMemcpy(stim_d.dtInds, stim.dtInds, stim.numofdts * sizeof(unsigned short), cudaMemcpyHostToDevice);
    cudaStatus = cudaMemcpy(stim_d.durs, stim.durs, stim.numofdts * sizeof(float), cudaMemcpyHostToDevice);
    cudaStatus = cudaMemcpy(stim_d.amps, stim.amps, stim_d.Nt*stim.NStimuli * sizeof(float), cudaMemcpyHostToDevice);
#line 627 "C:/pyNeuroGPU_winnew/NeuroGPU6/CudaStuff.cu"
	cudaStatus = cudaMemcpy(sim_d.RecSites, sim.RecSites, sim_d.NRecSites * sizeof(unsigned short), cudaMemcpyHostToDevice);
	
	
	cudaStatus = cudaMemcpyToSymbol(cE, InMat.e, InMat.N * sizeof(double));
	
	cudaStatus = cudaMemcpyToSymbol(cF, InMat.f, InMat.N * sizeof(double));
	cudaStatus = cudaMemcpyToSymbol(cKs, InMat.Ks, InMat.N * sizeof(unsigned short));
	
	
	cudaStatus = cudaMemcpyToSymbol(cSegToComp, InMat.SegToComp, InMat.N * sizeof(unsigned short));
	
	cudaStatus = cudaMemcpyToSymbol(cBoolModel, InMat.boolModel, InMat.N * InMat.NModels * sizeof(unsigned short));

	cudaStatus = cudaMemcpyToSymbol(cCm, InMat.Cms, InMat.N * sizeof(float));
	
	cudaStatus = cudaMemcpyToSymbol(cSonNoVec, InMat.SonNoVec, InMat.N * sizeof(unsigned short));
	
	
	
	cudaStatus = cudaMemcpyToSymbol(cRelStarts, InMat.RelStarts, InMat.nFathers * sizeof(unsigned short));
	
	cudaStatus = cudaMemcpyToSymbol(cRelEnds, InMat.RelEnds, InMat.nFathers * sizeof(unsigned short));
	
	cudaStatus = cudaMemcpyToSymbol(cRelVec, InMat.RelVec, InMat.nCallForFather* sizeof(unsigned short));
	
	cudaStatus = cudaMemcpyToSymbol(cSegStartI, InMat.SegStartI, (InMat.nCallForFather+1) * sizeof(unsigned short));
	
	cudaStatus = cudaMemcpyToSymbol(cSegEndI, InMat.SegEndI, (InMat.nCallForFather+1)* sizeof(unsigned short));
	
	cudaStatus = cudaMemcpyToSymbol(cFathers, InMat.Fathers, InMat.nFathers * sizeof(unsigned short));
	
	
	

	
	cudaStatus = cudaMemcpyToSymbol(cFIdxs, InMat.FIdxs, InMat.LognDepth*InMat.N* sizeof(unsigned short));
#line 664 "C:/pyNeuroGPU_winnew/NeuroGPU6/CudaStuff.cu"




	
	cudaStatus = cudaMemcpyToSymbol(cCompByLevel32, InMat.CompByLevel32, (CompDepth)*32*sizeof(unsigned short));
	
	cudaStatus = cudaMemcpyToSymbol(cCompByFLevel32, InMat.CompByFLevel32, (CompFDepth)*32*sizeof(unsigned short));


	
	cudaStatus = cudaMemcpyToSymbol(cLRelStarts, InMat.LRelStarts,InMat.nLRel*sizeof(unsigned short));
	
	cudaStatus = cudaMemcpyToSymbol(cLRelEnds, InMat.LRelEnds,InMat.nLRel*sizeof(unsigned short));
	
	cudaStatus = cudaMemcpyToSymbol(cFLRelStarts, InMat.FLRelStarts,InMat.nFLRel*sizeof(unsigned short));
	
	cudaStatus = cudaMemcpyToSymbol(cFLRelEnds, InMat.FLRelEnds,InMat.nFLRel*sizeof(unsigned short));


	
	if (cudaStatus != cudaSuccess) {
		fprintf((__acrt_iob_func(2)), "cudaMemcpyToDevice failed!");
		return cudaStatus;  
	}

	cudaStatus = cudaMalloc((void**)&PXOut_d, (InMat.N+1) * sizeof(double));
	cudaStatus = cudaMalloc((void**)&PFOut_d, (InMat.N+1) * sizeof(double));
	cudaStatus = cudaThreadSynchronize();
	if (cudaStatus != cudaSuccess) {
		fprintf((__acrt_iob_func(2)), "cudaDeviceSynchronize returned error code %d after launching stEfork2TimeLoopGPU!\n", cudaStatus);
		return cudaStatus;
	}

	
	









	float *V_d;
	cudaStatus = cudaMalloc((void**)&V_d, InMat.N * sizeof(float));

	
	
	float *d_modelParams;
	cudaStatus = cudaMalloc((void**)&d_modelParams, 28 * InMat.NComps *NSets * sizeof(float));
	if (cudaStatus != cudaSuccess) {
		fprintf((__acrt_iob_func(2)), "cudaMalloc failed!");
		return cudaStatus;  
	}
	
	
	cudaStatus = cudaMemcpy(d_modelParams, ParamsM, 28 * InMat.NComps * NSets *sizeof(float), cudaMemcpyHostToDevice);
	
	cudaStatus = cudaMemcpy(V_d, V, InMat.N * sizeof(float), cudaMemcpyHostToDevice);
	if (cudaStatus != cudaSuccess) {
		fprintf((__acrt_iob_func(2)), "cudaMemcpyToDevice failed!");
		return cudaStatus;  
	}

	dim3 blockDim(32,stim.NStimuli);
	

	unsigned short offset=0;
	
	
	
	

	
#line 741 "C:/pyNeuroGPU_winnew/NeuroGPU6/CudaStuff.cu"
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	



	
	
	unsigned short FrameworkMemSize=offset;

	printf("offset is%d\n",offset);

	offset+=(InMat.N+2)*sizeof(double);  
	offset+=(InMat.N+2)*sizeof(double); 
	offset=ceilf(double(offset)/sizeof(double))*sizeof(double);
	

	offset+=((32)*sim.NRecSites)*sizeof(float);

    offset+=32*sizeof(float);
#line 778 "C:/pyNeuroGPU_winnew/NeuroGPU6/CudaStuff.cu"
	unsigned short PerStimulus=offset-FrameworkMemSize;
	
	unsigned short TotalSMem=FrameworkMemSize+(PerStimulus)*stim.NStimuli;
	printf("Asking %d bytes, %d+%d*%d\n",TotalSMem,FrameworkMemSize,PerStimulus,stim.NStimuli);
		cudaEvent_t start, stop;
	cudaEventCreate(&start);
	cudaEventCreate(&stop);
		unsigned short currKernelRun = 30;
	unsigned short prevRuns = 0;
	int memSizeForVHotGlobal = Nt*stim.NStimuli*sim.NRecSites;
	unsigned short memSizeForModelParams = 28 * InMat.NComps;
	unsigned short streamID=0;
	cudaStream_t stream0,stream1,stream2,stream3;
	cudaStreamCreate (&stream0);
	cudaStreamCreate (&stream1);
	cudaStreamCreate (&stream2);
	cudaStreamCreate (&stream3);
	cudaEventRecord(start, 0);
	while (prevRuns<NSets){
	if(currKernelRun>(NSets-prevRuns)){
		currKernelRun = (NSets-prevRuns);
	}
	if(streamID==0){
		dim3 gridDim(currKernelRun);
		NeuroGPUKernel<<<currKernelRun, blockDim, TotalSMem, stream0>>>(stim_d, &d_modelParams[prevRuns*memSizeForModelParams], sim_d, Mat_d, V_d, &VHotsGlobal[prevRuns*memSizeForVHotGlobal], CompDepth, CompFDepth); 
		{ gpuAssert((cudaPeekAtLastError()), "C:/pyNeuroGPU_winnew/NeuroGPU6/CudaStuff.cu", 803); };
		{ gpuAssert((cudaDeviceSynchronize()), "C:/pyNeuroGPU_winnew/NeuroGPU6/CudaStuff.cu", 804); };
	cudaStatus = cudaMemcpyAsync(&VHotsHost[prevRuns*memSizeForVHotGlobal], &VHotsGlobal[prevRuns*memSizeForVHotGlobal],currKernelRun * Nt * sim.NRecSites * stim.NStimuli* sizeof(float), cudaMemcpyDeviceToHost,stream0); 
		
	}
	if(streamID==1){
	NeuroGPUKernel<<<currKernelRun, blockDim,TotalSMem,stream1>>>(stim_d, &d_modelParams[prevRuns*memSizeForModelParams], sim_d, Mat_d, V_d,&VHotsGlobal[prevRuns*memSizeForVHotGlobal],CompDepth,CompFDepth); 

	cudaStatus = cudaMemcpyAsync(&VHotsHost[prevRuns*memSizeForVHotGlobal], &VHotsGlobal[prevRuns*memSizeForVHotGlobal],currKernelRun * Nt * sim.NRecSites * stim.NStimuli* sizeof(float), cudaMemcpyDeviceToHost,stream1); 

	}
	if(streamID==2){
	NeuroGPUKernel<<<currKernelRun, blockDim,TotalSMem,stream2>>>(stim_d, &d_modelParams[prevRuns*memSizeForModelParams], sim_d, Mat_d, V_d,&VHotsGlobal[prevRuns*memSizeForVHotGlobal],CompDepth,CompFDepth); 
	
	cudaStatus = cudaMemcpyAsync(&VHotsHost[prevRuns*memSizeForVHotGlobal], &VHotsGlobal[prevRuns*memSizeForVHotGlobal],currKernelRun * Nt *sim.NRecSites *  stim.NStimuli* sizeof(float), cudaMemcpyDeviceToHost,stream2); 

	}
	if(streamID==3){
	NeuroGPUKernel<<<currKernelRun, blockDim,TotalSMem,stream3>>>(stim_d, &d_modelParams[prevRuns*memSizeForModelParams], sim_d, Mat_d, V_d,&VHotsGlobal[prevRuns*memSizeForVHotGlobal],CompDepth,CompFDepth); 
	
	cudaStatus = cudaMemcpyAsync(&VHotsHost[prevRuns*memSizeForVHotGlobal], &VHotsGlobal[prevRuns*memSizeForVHotGlobal],currKernelRun * Nt * sim.NRecSites * stim.NStimuli* sizeof(float), cudaMemcpyDeviceToHost,stream3); 

	}
	prevRuns +=currKernelRun;
	if(streamID==3){
		streamID == 0;
	}	else {
		streamID +=1;
	}
	}
	
	cudaEventRecord(stop, 0);
	cudaEventSynchronize(stop);
	float elapsedTime;
	cudaEventElapsedTime(&elapsedTime, start, stop);
	printf("time required : %f", elapsedTime);

	cudaEventDestroy(start);
	cudaEventDestroy(stop);

	if (cudaStatus != cudaSuccess) {
		fprintf((__acrt_iob_func(2)), "cudaDeviceSynchronize returned error code %d after launching stEfork2TimeLoopGPUKernel!\n", cudaStatus);
		return cudaStatus;
	}
	
	printf("stEfork2TimeLoopGPU took %f milliseconds\n",elapsedTime);
	FILE *file = fopen("..\\Data\\RunTimes.csv", "wb");
	if ( file ) {
		unsigned short mul32 = 12;
		fwrite(&mul32,sizeof(unsigned short),1,file);
		fwrite(&elapsedTime,sizeof(float),1,file);
	} else {
		printf("ERR SaveArrayToFile %s\n","..\\Data\\RunTimes.csv");
	}
	fclose(file);
	if (cudaStatus != cudaSuccess) {
		fprintf((__acrt_iob_func(2)), "cudaMemcpyDeviceToHost failed!");
		return cudaStatus;  
	}
	SaveArrayToFile("..\\Data\\VHotP.dat",NSets*Nt*stim.NStimuli*sim.NRecSites,VHotsHost);
	
	return cudaStatus;
}


cudaError_t stEfork2Main(Stim stim, Sim sim, float* ParamsM, HMat& InMat, float* V,unsigned short CompDepth,unsigned short CompFDepth,unsigned short NSets) {
	cudaError_t cudaStatus;
	cudaStatus = cudaSetDevice(1);
	cudaDeviceSetSharedMemConfig(cudaSharedMemBankSizeEightByte);
	  stEfork2TimeLoopGPU(stim, sim, ParamsM, InMat, V,CompDepth,CompFDepth,NSets); 
	  
	
	


	return cudaStatus;
}


