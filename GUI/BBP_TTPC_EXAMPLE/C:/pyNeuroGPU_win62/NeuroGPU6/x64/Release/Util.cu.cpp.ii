#line 1 "x64/Release/Util.cudafe1.cpp"
#line 1 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
#pragma section("__nv_managed_data__")
#line 1 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
static char __nv_inited_managed_rt = 0; static void **__nv_fatbinhandle_for_managed_rt; static void __nv_save_fatbinhandle_for_managed_rt(void **in){__nv_fatbinhandle_for_managed_rt = in;} static char __nv_init_managed_rt_with_module(void **); static inline void __nv_init_managed_rt(void) { __nv_inited_managed_rt = (__nv_inited_managed_rt ? __nv_inited_managed_rt                 : __nv_init_managed_rt_with_module(__nv_fatbinhandle_for_managed_rt));}
#line 1 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"



#line 1 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
#line 62 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
#pragma warning(push)
#pragma warning(disable: 4820)
#line 708 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"
#pragma region Input Buffer SAL 1 compatibility macros
#line 1472 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"
#pragma endregion Input Buffer SAL 1 compatibility macros
#line 2361 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"
extern "C" {
#line 2967 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"
}
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ConcurrencySal.h"
extern "C" {
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ConcurrencySal.h"
}
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
#pragma pack ( push, 8 )
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
extern "C" {
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
typedef unsigned __int64 uintptr_t; 
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
typedef char *va_list; 
#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
void __cdecl __va_start(va_list *, ...); 
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
}
#line 122 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
extern "C++" {
#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
template< class _Ty> 
#line 125 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
struct __vcrt_va_list_is_reference { 
#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
enum: bool { __the_value}; 
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
}; 
#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
template< class _Ty> 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
struct __vcrt_va_list_is_reference< _Ty &>  { 
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
enum: bool { __the_value = '\001'}; 
#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
}; 
#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
template< class _Ty> 
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
struct __vcrt_va_list_is_reference< _Ty &&>  { 
#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
enum: bool { __the_value = '\001'}; 
#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
}; 
#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
template < typename _Ty >
        void __vcrt_va_start_verify_argument_type ( ) throw ( )
        {
            static_assert ( ! __vcrt_va_list_is_reference < _Ty > :: __the_value, "va_start argument must not have reference type and must not be parenthesized" );
        }
#line 147 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
}
#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
#pragma pack ( pop )
#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
typedef unsigned __int64 size_t; 
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"






























































#line 64 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"



#line 68 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"

#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"


























































































#line 92 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"










#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"








































#line 144 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"








#line 155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"



#line 159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"













#line 173 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"










#line 185 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"













        














#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
























#line 239 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"


#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 54 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"







enum  cudaRoundMode
{
    cudaRoundNearest,
    cudaRoundZero,
    cudaRoundPosInf,
    cudaRoundMinInf
};

#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"




















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 54 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



























































































#line 146 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"










enum  cudaError
{
    




    cudaSuccess                           =      0,
  
    



    cudaErrorMissingConfiguration         =      1,
  
    



    cudaErrorMemoryAllocation             =      2,
  
    



    cudaErrorInitializationError          =      3,
  
    







    cudaErrorLaunchFailure                =      4,
  
    






    cudaErrorPriorLaunchFailure           =      5,
  
    








    cudaErrorLaunchTimeout                =      6,
  
    






    cudaErrorLaunchOutOfResources         =      7,
  
    



    cudaErrorInvalidDeviceFunction        =      8,
  
    






    cudaErrorInvalidConfiguration         =      9,
  
    



    cudaErrorInvalidDevice                =     10,
  
    



    cudaErrorInvalidValue                 =     11,
  
    



    cudaErrorInvalidPitchValue            =     12,
  
    



    cudaErrorInvalidSymbol                =     13,
  
    


    cudaErrorMapBufferObjectFailed        =     14,
  
    


    cudaErrorUnmapBufferObjectFailed      =     15,
  
    



    cudaErrorInvalidHostPointer           =     16,
  
    



    cudaErrorInvalidDevicePointer         =     17,
  
    



    cudaErrorInvalidTexture               =     18,
  
    



    cudaErrorInvalidTextureBinding        =     19,
  
    




    cudaErrorInvalidChannelDescriptor     =     20,
  
    



    cudaErrorInvalidMemcpyDirection       =     21,
  
    







    cudaErrorAddressOfConstant            =     22,
  
    






    cudaErrorTextureFetchFailed           =     23,
  
    






    cudaErrorTextureNotBound              =     24,
  
    






    cudaErrorSynchronizationError         =     25,
  
    



    cudaErrorInvalidFilterSetting         =     26,
  
    



    cudaErrorInvalidNormSetting           =     27,
  
    





    cudaErrorMixedDeviceExecution         =     28,
  
    




    cudaErrorCudartUnloading              =     29,
  
    


    cudaErrorUnknown                      =     30,

    





    cudaErrorNotYetImplemented            =     31,
  
    






    cudaErrorMemoryValueTooLarge          =     32,
  
    




    cudaErrorInvalidResourceHandle        =     33,
  
    





    cudaErrorNotReady                     =     34,
  
    




    cudaErrorInsufficientDriver           =     35,
  
    










    cudaErrorSetOnActiveProcess           =     36,
  
    



    cudaErrorInvalidSurface               =     37,
  
    



    cudaErrorNoDevice                     =     38,
  
    



    cudaErrorECCUncorrectable             =     39,
  
    


    cudaErrorSharedObjectSymbolNotFound   =     40,
  
    


    cudaErrorSharedObjectInitFailed       =     41,
  
    



    cudaErrorUnsupportedLimit             =     42,
  
    



    cudaErrorDuplicateVariableName        =     43,
  
    



    cudaErrorDuplicateTextureName         =     44,
  
    



    cudaErrorDuplicateSurfaceName         =     45,
  
    







    cudaErrorDevicesUnavailable           =     46,
  
    


    cudaErrorInvalidKernelImage           =     47,
  
    





    cudaErrorNoKernelImageForDevice       =     48,
  
    










    cudaErrorIncompatibleDriverContext    =     49,
      
    




    cudaErrorPeerAccessAlreadyEnabled     =     50,
    
    




    cudaErrorPeerAccessNotEnabled         =     51,
    
    



    cudaErrorDeviceAlreadyInUse           =     54,

    




    cudaErrorProfilerDisabled             =     55,

    





    cudaErrorProfilerNotInitialized       =     56,

    




    cudaErrorProfilerAlreadyStarted       =     57,

    




     cudaErrorProfilerAlreadyStopped       =    58,

    





    cudaErrorAssert                        =    59,
  
    




    cudaErrorTooManyPeers                 =     60,
  
    



    cudaErrorHostMemoryAlreadyRegistered  =     61,
        
    



    cudaErrorHostMemoryNotRegistered      =     62,

    


    cudaErrorOperatingSystem              =     63,

    



    cudaErrorPeerAccessUnsupported        =     64,

    




    cudaErrorLaunchMaxDepthExceeded       =     65,

    





    cudaErrorLaunchFileScopedTex          =     66,

    





    cudaErrorLaunchFileScopedSurf         =     67,

    












    cudaErrorSyncDepthExceeded            =     68,

    









    cudaErrorLaunchPendingCountExceeded   =     69,
    
    


    cudaErrorNotPermitted                 =     70,

    



    cudaErrorNotSupported                 =     71,

    






    cudaErrorHardwareStackError           =     72,

    





    cudaErrorIllegalInstruction           =     73,

    






    cudaErrorMisalignedAddress            =     74,

    








    cudaErrorInvalidAddressSpace          =     75,

    





    cudaErrorInvalidPc                    =     76,

    





    cudaErrorIllegalAddress               =     77,

    



    cudaErrorInvalidPtx                   =     78,

    


    cudaErrorInvalidGraphicsContext       =     79,

    



    cudaErrorNvlinkUncorrectable          =     80,

    


    cudaErrorStartupFailure               =   0x7f,

    





    cudaErrorApiFailureBase               =  10000
};




enum  cudaChannelFormatKind
{
    cudaChannelFormatKindSigned           =   0,      
    cudaChannelFormatKindUnsigned         =   1,      
    cudaChannelFormatKindFloat            =   2,      
    cudaChannelFormatKindNone             =   3       
};




struct  cudaChannelFormatDesc
{
    int                        x; 
    int                        y; 
    int                        z; 
    int                        w; 
    enum cudaChannelFormatKind f; 
};




typedef struct cudaArray *cudaArray_t;




typedef const struct cudaArray *cudaArray_const_t;

struct cudaArray;




typedef struct cudaMipmappedArray *cudaMipmappedArray_t;




typedef const struct cudaMipmappedArray *cudaMipmappedArray_const_t;

struct cudaMipmappedArray;




enum  cudaMemoryType
{
    cudaMemoryTypeHost   = 1, 
    cudaMemoryTypeDevice = 2  
};




enum  cudaMemcpyKind
{
    cudaMemcpyHostToHost          =   0,      
    cudaMemcpyHostToDevice        =   1,      
    cudaMemcpyDeviceToHost        =   2,      
    cudaMemcpyDeviceToDevice      =   3,      
    cudaMemcpyDefault             =   4       
};






struct  cudaPitchedPtr
{
    void   *ptr;      
    size_t  pitch;    
    size_t  xsize;    
    size_t  ysize;    
};






struct  cudaExtent
{
    size_t width;     
    size_t height;    
    size_t depth;     
};






struct  cudaPos
{
    size_t x;     
    size_t y;     
    size_t z;     
};




struct  cudaMemcpy3DParms
{
    cudaArray_t            srcArray;  
    struct cudaPos         srcPos;    
    struct cudaPitchedPtr  srcPtr;    
  
    cudaArray_t            dstArray;  
    struct cudaPos         dstPos;    
    struct cudaPitchedPtr  dstPtr;    
  
    struct cudaExtent      extent;    
    enum cudaMemcpyKind    kind;      
};




struct  cudaMemcpy3DPeerParms
{
    cudaArray_t            srcArray;  
    struct cudaPos         srcPos;    
    struct cudaPitchedPtr  srcPtr;    
    int                    srcDevice; 
  
    cudaArray_t            dstArray;  
    struct cudaPos         dstPos;    
    struct cudaPitchedPtr  dstPtr;    
    int                    dstDevice; 
  
    struct cudaExtent      extent;    
};




struct cudaGraphicsResource;




enum  cudaGraphicsRegisterFlags
{
    cudaGraphicsRegisterFlagsNone             = 0,  
    cudaGraphicsRegisterFlagsReadOnly         = 1,   
    cudaGraphicsRegisterFlagsWriteDiscard     = 2,  
    cudaGraphicsRegisterFlagsSurfaceLoadStore = 4,  
    cudaGraphicsRegisterFlagsTextureGather    = 8   
};




enum  cudaGraphicsMapFlags
{
    cudaGraphicsMapFlagsNone         = 0,  
    cudaGraphicsMapFlagsReadOnly     = 1,  
    cudaGraphicsMapFlagsWriteDiscard = 2   
};




enum  cudaGraphicsCubeFace 
{
    cudaGraphicsCubeFacePositiveX = 0x00, 
    cudaGraphicsCubeFaceNegativeX = 0x01, 
    cudaGraphicsCubeFacePositiveY = 0x02, 
    cudaGraphicsCubeFaceNegativeY = 0x03, 
    cudaGraphicsCubeFacePositiveZ = 0x04, 
    cudaGraphicsCubeFaceNegativeZ = 0x05  
};




enum  cudaResourceType
{
    cudaResourceTypeArray          = 0x00, 
    cudaResourceTypeMipmappedArray = 0x01, 
    cudaResourceTypeLinear         = 0x02, 
    cudaResourceTypePitch2D        = 0x03  
};




enum  cudaResourceViewFormat
{
    cudaResViewFormatNone                      = 0x00, 
    cudaResViewFormatUnsignedChar1             = 0x01, 
    cudaResViewFormatUnsignedChar2             = 0x02, 
    cudaResViewFormatUnsignedChar4             = 0x03, 
    cudaResViewFormatSignedChar1               = 0x04, 
    cudaResViewFormatSignedChar2               = 0x05, 
    cudaResViewFormatSignedChar4               = 0x06, 
    cudaResViewFormatUnsignedShort1            = 0x07, 
    cudaResViewFormatUnsignedShort2            = 0x08, 
    cudaResViewFormatUnsignedShort4            = 0x09, 
    cudaResViewFormatSignedShort1              = 0x0a, 
    cudaResViewFormatSignedShort2              = 0x0b, 
    cudaResViewFormatSignedShort4              = 0x0c, 
    cudaResViewFormatUnsignedInt1              = 0x0d, 
    cudaResViewFormatUnsignedInt2              = 0x0e, 
    cudaResViewFormatUnsignedInt4              = 0x0f, 
    cudaResViewFormatSignedInt1                = 0x10, 
    cudaResViewFormatSignedInt2                = 0x11, 
    cudaResViewFormatSignedInt4                = 0x12, 
    cudaResViewFormatHalf1                     = 0x13, 
    cudaResViewFormatHalf2                     = 0x14, 
    cudaResViewFormatHalf4                     = 0x15, 
    cudaResViewFormatFloat1                    = 0x16, 
    cudaResViewFormatFloat2                    = 0x17, 
    cudaResViewFormatFloat4                    = 0x18, 
    cudaResViewFormatUnsignedBlockCompressed1  = 0x19, 
    cudaResViewFormatUnsignedBlockCompressed2  = 0x1a, 
    cudaResViewFormatUnsignedBlockCompressed3  = 0x1b, 
    cudaResViewFormatUnsignedBlockCompressed4  = 0x1c, 
    cudaResViewFormatSignedBlockCompressed4    = 0x1d, 
    cudaResViewFormatUnsignedBlockCompressed5  = 0x1e, 
    cudaResViewFormatSignedBlockCompressed5    = 0x1f, 
    cudaResViewFormatUnsignedBlockCompressed6H = 0x20, 
    cudaResViewFormatSignedBlockCompressed6H   = 0x21, 
    cudaResViewFormatUnsignedBlockCompressed7  = 0x22  
};




struct  cudaResourceDesc {
	enum cudaResourceType resType;             
	
	union {
		struct {
			cudaArray_t array;                 
		} array;
        struct {
            cudaMipmappedArray_t mipmap;       
        } mipmap;
		struct {
			void *devPtr;                      
			struct cudaChannelFormatDesc desc; 
			size_t sizeInBytes;                
		} linear;
		struct {
			void *devPtr;                      
			struct cudaChannelFormatDesc desc; 
			size_t width;                      
			size_t height;                     
			size_t pitchInBytes;               
		} pitch2D;
	} res;
};




struct  cudaResourceViewDesc
{
    enum cudaResourceViewFormat format;           
    size_t                      width;            
    size_t                      height;           
    size_t                      depth;            
    unsigned int                firstMipmapLevel; 
    unsigned int                lastMipmapLevel;  
    unsigned int                firstLayer;       
    unsigned int                lastLayer;        
};




struct  cudaPointerAttributes
{
    



    enum cudaMemoryType memoryType;

    








    int device;

    



    void *devicePointer;

    



    void *hostPointer;

    


    int isManaged;
};




struct  cudaFuncAttributes
{
   




   size_t sharedSizeBytes;

   



   size_t constSizeBytes;

   


   size_t localSizeBytes;

   




   int maxThreadsPerBlock;

   


   int numRegs;

   




   int ptxVersion;

   




   int binaryVersion;

   



   int cacheModeCA;
};




enum  cudaFuncCache
{
    cudaFuncCachePreferNone   = 0,    
    cudaFuncCachePreferShared = 1,    
    cudaFuncCachePreferL1     = 2,    
    cudaFuncCachePreferEqual  = 3     
};





enum  cudaSharedMemConfig
{
    cudaSharedMemBankSizeDefault   = 0,
    cudaSharedMemBankSizeFourByte  = 1,
    cudaSharedMemBankSizeEightByte = 2
};




enum  cudaComputeMode
{
    cudaComputeModeDefault          = 0,  
    cudaComputeModeExclusive        = 1,  
    cudaComputeModeProhibited       = 2,  
    cudaComputeModeExclusiveProcess = 3   
};




enum  cudaLimit
{
    cudaLimitStackSize                    = 0x00, 
    cudaLimitPrintfFifoSize               = 0x01, 
    cudaLimitMallocHeapSize               = 0x02, 
    cudaLimitDevRuntimeSyncDepth          = 0x03, 
    cudaLimitDevRuntimePendingLaunchCount = 0x04  
};




enum  cudaMemoryAdvise
{
    cudaMemAdviseSetReadMostly          = 1, 
    cudaMemAdviseUnsetReadMostly        = 2, 
    cudaMemAdviseSetPreferredLocation   = 3, 
    cudaMemAdviseUnsetPreferredLocation = 4, 
    cudaMemAdviseSetAccessedBy          = 5, 
    cudaMemAdviseUnsetAccessedBy        = 6  
};




enum  cudaMemRangeAttribute
{
    cudaMemRangeAttributeReadMostly           = 1, 
    cudaMemRangeAttributePreferredLocation    = 2, 
    cudaMemRangeAttributeAccessedBy           = 3, 
    cudaMemRangeAttributeLastPrefetchLocation = 4  
};




enum  cudaOutputMode
{
    cudaKeyValuePair    = 0x00, 
    cudaCSV             = 0x01  
};




enum  cudaDeviceAttr
{
    cudaDevAttrMaxThreadsPerBlock             = 1,  
    cudaDevAttrMaxBlockDimX                   = 2,  
    cudaDevAttrMaxBlockDimY                   = 3,  
    cudaDevAttrMaxBlockDimZ                   = 4,  
    cudaDevAttrMaxGridDimX                    = 5,  
    cudaDevAttrMaxGridDimY                    = 6,  
    cudaDevAttrMaxGridDimZ                    = 7,  
    cudaDevAttrMaxSharedMemoryPerBlock        = 8,  
    cudaDevAttrTotalConstantMemory            = 9,  
    cudaDevAttrWarpSize                       = 10, 
    cudaDevAttrMaxPitch                       = 11, 
    cudaDevAttrMaxRegistersPerBlock           = 12, 
    cudaDevAttrClockRate                      = 13, 
    cudaDevAttrTextureAlignment               = 14, 
    cudaDevAttrGpuOverlap                     = 15, 
    cudaDevAttrMultiProcessorCount            = 16, 
    cudaDevAttrKernelExecTimeout              = 17, 
    cudaDevAttrIntegrated                     = 18, 
    cudaDevAttrCanMapHostMemory               = 19, 
    cudaDevAttrComputeMode                    = 20, 
    cudaDevAttrMaxTexture1DWidth              = 21, 
    cudaDevAttrMaxTexture2DWidth              = 22, 
    cudaDevAttrMaxTexture2DHeight             = 23, 
    cudaDevAttrMaxTexture3DWidth              = 24, 
    cudaDevAttrMaxTexture3DHeight             = 25, 
    cudaDevAttrMaxTexture3DDepth              = 26, 
    cudaDevAttrMaxTexture2DLayeredWidth       = 27, 
    cudaDevAttrMaxTexture2DLayeredHeight      = 28, 
    cudaDevAttrMaxTexture2DLayeredLayers      = 29, 
    cudaDevAttrSurfaceAlignment               = 30, 
    cudaDevAttrConcurrentKernels              = 31, 
    cudaDevAttrEccEnabled                     = 32, 
    cudaDevAttrPciBusId                       = 33, 
    cudaDevAttrPciDeviceId                    = 34, 
    cudaDevAttrTccDriver                      = 35, 
    cudaDevAttrMemoryClockRate                = 36, 
    cudaDevAttrGlobalMemoryBusWidth           = 37, 
    cudaDevAttrL2CacheSize                    = 38, 
    cudaDevAttrMaxThreadsPerMultiProcessor    = 39, 
    cudaDevAttrAsyncEngineCount               = 40, 
    cudaDevAttrUnifiedAddressing              = 41,     
    cudaDevAttrMaxTexture1DLayeredWidth       = 42, 
    cudaDevAttrMaxTexture1DLayeredLayers      = 43, 
    cudaDevAttrMaxTexture2DGatherWidth        = 45, 
    cudaDevAttrMaxTexture2DGatherHeight       = 46, 
    cudaDevAttrMaxTexture3DWidthAlt           = 47, 
    cudaDevAttrMaxTexture3DHeightAlt          = 48, 
    cudaDevAttrMaxTexture3DDepthAlt           = 49, 
    cudaDevAttrPciDomainId                    = 50, 
    cudaDevAttrTexturePitchAlignment          = 51, 
    cudaDevAttrMaxTextureCubemapWidth         = 52, 
    cudaDevAttrMaxTextureCubemapLayeredWidth  = 53, 
    cudaDevAttrMaxTextureCubemapLayeredLayers = 54, 
    cudaDevAttrMaxSurface1DWidth              = 55, 
    cudaDevAttrMaxSurface2DWidth              = 56, 
    cudaDevAttrMaxSurface2DHeight             = 57, 
    cudaDevAttrMaxSurface3DWidth              = 58, 
    cudaDevAttrMaxSurface3DHeight             = 59, 
    cudaDevAttrMaxSurface3DDepth              = 60, 
    cudaDevAttrMaxSurface1DLayeredWidth       = 61, 
    cudaDevAttrMaxSurface1DLayeredLayers      = 62, 
    cudaDevAttrMaxSurface2DLayeredWidth       = 63, 
    cudaDevAttrMaxSurface2DLayeredHeight      = 64, 
    cudaDevAttrMaxSurface2DLayeredLayers      = 65, 
    cudaDevAttrMaxSurfaceCubemapWidth         = 66, 
    cudaDevAttrMaxSurfaceCubemapLayeredWidth  = 67, 
    cudaDevAttrMaxSurfaceCubemapLayeredLayers = 68, 
    cudaDevAttrMaxTexture1DLinearWidth        = 69, 
    cudaDevAttrMaxTexture2DLinearWidth        = 70, 
    cudaDevAttrMaxTexture2DLinearHeight       = 71, 
    cudaDevAttrMaxTexture2DLinearPitch        = 72, 
    cudaDevAttrMaxTexture2DMipmappedWidth     = 73, 
    cudaDevAttrMaxTexture2DMipmappedHeight    = 74, 
    cudaDevAttrComputeCapabilityMajor         = 75,  
    cudaDevAttrComputeCapabilityMinor         = 76, 
    cudaDevAttrMaxTexture1DMipmappedWidth     = 77, 
    cudaDevAttrStreamPrioritiesSupported      = 78, 
    cudaDevAttrGlobalL1CacheSupported         = 79, 
    cudaDevAttrLocalL1CacheSupported          = 80, 
    cudaDevAttrMaxSharedMemoryPerMultiprocessor = 81, 
    cudaDevAttrMaxRegistersPerMultiprocessor  = 82, 
    cudaDevAttrManagedMemory                  = 83, 
    cudaDevAttrIsMultiGpuBoard                = 84, 
    cudaDevAttrMultiGpuBoardGroupID           = 85, 
    cudaDevAttrHostNativeAtomicSupported      = 86, 
    cudaDevAttrSingleToDoublePrecisionPerfRatio = 87, 
    cudaDevAttrPageableMemoryAccess           = 88, 
    cudaDevAttrConcurrentManagedAccess        = 89, 
    cudaDevAttrComputePreemptionSupported     = 90, 
    cudaDevAttrCanUseHostPointerForRegisteredMem = 91 
};





enum  cudaDeviceP2PAttr {
    cudaDevP2PAttrPerformanceRank              = 1, 
    cudaDevP2PAttrAccessSupported              = 2, 
    cudaDevP2PAttrNativeAtomicSupported        = 3  
};



struct  cudaDeviceProp
{
    char   name[256];                  
    size_t totalGlobalMem;             
    size_t sharedMemPerBlock;          
    int    regsPerBlock;               
    int    warpSize;                   
    size_t memPitch;                   
    int    maxThreadsPerBlock;         
    int    maxThreadsDim[3];           
    int    maxGridSize[3];             
    int    clockRate;                  
    size_t totalConstMem;              
    int    major;                      
    int    minor;                      
    size_t textureAlignment;           
    size_t texturePitchAlignment;      
    int    deviceOverlap;              
    int    multiProcessorCount;        
    int    kernelExecTimeoutEnabled;   
    int    integrated;                 
    int    canMapHostMemory;           
    int    computeMode;                
    int    maxTexture1D;               
    int    maxTexture1DMipmap;         
    int    maxTexture1DLinear;         
    int    maxTexture2D[2];            
    int    maxTexture2DMipmap[2];      
    int    maxTexture2DLinear[3];      
    int    maxTexture2DGather[2];      
    int    maxTexture3D[3];            
    int    maxTexture3DAlt[3];         
    int    maxTextureCubemap;          
    int    maxTexture1DLayered[2];     
    int    maxTexture2DLayered[3];     
    int    maxTextureCubemapLayered[2];
    int    maxSurface1D;               
    int    maxSurface2D[2];            
    int    maxSurface3D[3];            
    int    maxSurface1DLayered[2];     
    int    maxSurface2DLayered[3];     
    int    maxSurfaceCubemap;          
    int    maxSurfaceCubemapLayered[2];
    size_t surfaceAlignment;           
    int    concurrentKernels;          
    int    ECCEnabled;                 
    int    pciBusID;                   
    int    pciDeviceID;                
    int    pciDomainID;                
    int    tccDriver;                  
    int    asyncEngineCount;           
    int    unifiedAddressing;          
    int    memoryClockRate;            
    int    memoryBusWidth;             
    int    l2CacheSize;                
    int    maxThreadsPerMultiProcessor;
    int    streamPrioritiesSupported;  
    int    globalL1CacheSupported;     
    int    localL1CacheSupported;      
    size_t sharedMemPerMultiprocessor; 
    int    regsPerMultiprocessor;      
    int    managedMemory;              
    int    isMultiGpuBoard;            
    int    multiGpuBoardGroupID;       
    int    hostNativeAtomicSupported;  
    int    singleToDoublePrecisionPerfRatio; 
    int    pageableMemoryAccess;       
    int    concurrentManagedAccess;    
};















































































typedef  struct  cudaIpcEventHandle_st
{
    char reserved[64];
}cudaIpcEventHandle_t;




typedef  struct  cudaIpcMemHandle_st 
{
    char reserved[64];
}cudaIpcMemHandle_t;










typedef  enum cudaError cudaError_t;




typedef  struct CUstream_st *cudaStream_t;




typedef  struct CUevent_st *cudaEvent_t;




typedef  struct cudaGraphicsResource *cudaGraphicsResource_t;




typedef  struct CUuuid_st cudaUUID_t;




typedef  enum cudaOutputMode cudaOutputMode_t;


 

#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\builtin_types.h"

#line 62 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"


























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
























enum  cudaSurfaceBoundaryMode
{
    cudaBoundaryModeZero  = 0,    
    cudaBoundaryModeClamp = 1,    
    cudaBoundaryModeTrap  = 2     
};




enum   cudaSurfaceFormatMode
{
    cudaFormatModeForced = 0,     
    cudaFormatModeAuto = 1        
};




struct  surfaceReference
{
    


    struct cudaChannelFormatDesc channelDesc;
};




typedef  unsigned long long cudaSurfaceObject_t;


 

#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"


























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























enum  cudaTextureAddressMode
{
    cudaAddressModeWrap   = 0,    
    cudaAddressModeClamp  = 1,    
    cudaAddressModeMirror = 2,    
    cudaAddressModeBorder = 3     
};




enum  cudaTextureFilterMode
{
    cudaFilterModePoint  = 0,     
    cudaFilterModeLinear = 1      
};




enum  cudaTextureReadMode
{
    cudaReadModeElementType     = 0,  
    cudaReadModeNormalizedFloat = 1   
};




struct  textureReference
{
    


    int                          normalized;
    


    enum cudaTextureFilterMode   filterMode;
    


    enum cudaTextureAddressMode  addressMode[3];
    


    struct cudaChannelFormatDesc channelDesc;
    


    int                          sRGB;
    


    unsigned int                 maxAnisotropy;
    


    enum cudaTextureFilterMode   mipmapFilterMode;
    


    float                        mipmapLevelBias;
    


    float                        minMipmapLevelClamp;
    


    float                        maxMipmapLevelClamp;
    int                          __cudaReserved[15];
};




struct  cudaTextureDesc
{
    


    enum cudaTextureAddressMode addressMode[3];
    


    enum cudaTextureFilterMode  filterMode;
    


    enum cudaTextureReadMode    readMode;
    


    int                         sRGB;
    


    float                       borderColor[4];
    


    int                         normalizedCoords;
    


    unsigned int                maxAnisotropy;
    


    enum cudaTextureFilterMode  mipmapFilterMode;
    


    float                       mipmapLevelBias;
    


    float                       minMipmapLevelClamp;
    


    float                       maxMipmapLevelClamp;
};




typedef  unsigned long long cudaTextureObject_t;


 

#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"

#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"






















#line 89 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 97 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"

struct  char1
{
    signed char x;
};

struct  uchar1
{
    unsigned char x;
};


struct  __declspec(align(2)) char2
{
    signed char x, y;
};

struct  __declspec(align(2)) uchar2
{
    unsigned char x, y;
};

struct  char3
{
    signed char x, y, z;
};

struct  uchar3
{
    unsigned char x, y, z;
};

struct  __declspec(align(4)) char4
{
    signed char x, y, z, w;
};

struct  __declspec(align(4)) uchar4
{
    unsigned char x, y, z, w;
};

struct  short1
{
    short x;
};

struct  ushort1
{
    unsigned short x;
};

struct  __declspec(align(4)) short2
{
    short x, y;
};

struct  __declspec(align(4)) ushort2
{
    unsigned short x, y;
};

struct  short3
{
    short x, y, z;
};

struct  ushort3
{
    unsigned short x, y, z;
};

struct  __declspec(align(8)) short4 { short x; short y; short z; short w; };
struct  __declspec(align(8)) ushort4 { unsigned short x; unsigned short y; unsigned short z; unsigned short w; };

struct  int1
{
    int x;
};

struct  uint1
{
    unsigned int x;
};

struct  __declspec(align(8)) int2 { int x; int y; };
struct  __declspec(align(8)) uint2 { unsigned int x; unsigned int y; };

struct  int3
{
    int x, y, z;
};

struct  uint3
{
    unsigned int x, y, z;
};

struct  __declspec(align(16)) int4
{
    int x, y, z, w;
};

struct  __declspec(align(16)) uint4
{
    unsigned int x, y, z, w;
};

struct  long1
{
    long int x;
};

struct  ulong1
{
    unsigned long x;
};


struct  __declspec(align(8)) long2 { long int x; long int y; };
struct  __declspec(align(8)) ulong2 { unsigned long int x; unsigned long int y; };












#line 231 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"

struct  long3
{
    long int x, y, z;
};

struct  ulong3
{
    unsigned long int x, y, z;
};

struct  __declspec(align(16)) long4
{
    long int x, y, z, w;
};

struct  __declspec(align(16)) ulong4
{
    unsigned long int x, y, z, w;
};

struct  float1
{
    float x;
};















#line 273 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"

struct  __declspec(align(8)) float2 { float x; float y; };

#line 277 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"


struct  float3
{
    float x, y, z;
};

struct  __declspec(align(16)) float4
{
    float x, y, z, w;
};

struct  longlong1
{
    long long int x;
};

struct  ulonglong1
{
    unsigned long long int x;
};

struct  __declspec(align(16)) longlong2
{
    long long int x, y;
};

struct  __declspec(align(16)) ulonglong2
{
    unsigned long long int x, y;
};

struct  longlong3
{
    long long int x, y, z;
};

struct  ulonglong3
{
    unsigned long long int x, y, z;
};

struct  __declspec(align(16)) longlong4
{
    long long int x, y, z ,w;
};

struct  __declspec(align(16)) ulonglong4
{
    unsigned long long int x, y, z, w;
};

struct  double1
{
    double x;
};

struct  __declspec(align(16)) double2
{
    double x, y;
};

struct  double3
{
    double x, y, z;
};

struct  __declspec(align(16)) double4
{
    double x, y, z, w;
};





#line 355 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







typedef  struct char1 char1;
typedef  struct uchar1 uchar1;
typedef  struct char2 char2;
typedef  struct uchar2 uchar2;
typedef  struct char3 char3;
typedef  struct uchar3 uchar3;
typedef  struct char4 char4;
typedef  struct uchar4 uchar4;
typedef  struct short1 short1;
typedef  struct ushort1 ushort1;
typedef  struct short2 short2;
typedef  struct ushort2 ushort2;
typedef  struct short3 short3;
typedef  struct ushort3 ushort3;
typedef  struct short4 short4;
typedef  struct ushort4 ushort4;
typedef  struct int1 int1;
typedef  struct uint1 uint1;
typedef  struct int2 int2;
typedef  struct uint2 uint2;
typedef  struct int3 int3;
typedef  struct uint3 uint3;
typedef  struct int4 int4;
typedef  struct uint4 uint4;
typedef  struct long1 long1;
typedef  struct ulong1 ulong1;
typedef  struct long2 long2;
typedef  struct ulong2 ulong2;
typedef  struct long3 long3;
typedef  struct ulong3 ulong3;
typedef  struct long4 long4;
typedef  struct ulong4 ulong4;
typedef  struct float1 float1;
typedef  struct float2 float2;
typedef  struct float3 float3;
typedef  struct float4 float4;
typedef  struct longlong1 longlong1;
typedef  struct ulonglong1 ulonglong1;
typedef  struct longlong2 longlong2;
typedef  struct ulonglong2 ulonglong2;
typedef  struct longlong3 longlong3;
typedef  struct ulonglong3 ulonglong3;
typedef  struct longlong4 longlong4;
typedef  struct ulonglong4 ulonglong4;
typedef  struct double1 double1;
typedef  struct double2 double2;
typedef  struct double3 double3;
typedef  struct double4 double4;







struct  dim3
{
    unsigned int x, y, z;

      dim3(unsigned int vx = 1, unsigned int vy = 1, unsigned int vz = 1) : x(vx), y(vy), z(vz) {}
      dim3(uint3 v) : x(v.x), y(v.y), z(v.z) {}
      operator uint3(void) { uint3 t; t.x = x; t.y = y; t.z = z; return t; }
#line 425 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
};

typedef  struct dim3 dim3;



#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 70 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"










































#line 44 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"






#line 51 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 55 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 67 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 71 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 75 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 79 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 83 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 87 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 91 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 95 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 99 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 143 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"

#line 149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"
#line 71 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"







































































































































































































#line 271 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"
#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
#line 195 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
typedef __int64 ptrdiff_t; 
#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
typedef __int64 intptr_t; 
#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
typedef bool __vcrt_bool; 
#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
extern "C++" {
#line 249 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
template< class _CountofType, size_t _SizeOfArray> char (*__countof_helper(__unaligned _CountofType (& _Array)[_SizeOfArray]))[_SizeOfArray]; 
#line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
}
#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
void __cdecl __security_init_cookie(); 
#line 304 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
void __cdecl __security_check_cookie(uintptr_t _StackCookie); 
#line 305 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
__declspec(noreturn) void __cdecl __report_gsfailure(uintptr_t _StackCookie); 
#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
extern uintptr_t __security_cookie; 
#line 317 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
}__pragma(pack ( pop )) 
#line 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
extern "C++" {
#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
template< bool _Enable, class _Ty> struct _CrtEnableIf; 
#line 124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
template< class _Ty> 
#line 125 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
struct _CrtEnableIf< true, _Ty>  { 
#line 127 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef _Ty _Type; 
#line 128 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
}; 
#line 129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
}
#line 133 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef bool __crt_bool; 
#line 226 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
__declspec(dllimport) void __cdecl _invalid_parameter_noinfo(); 
#line 227 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
__declspec(dllimport) __declspec(noreturn) void __cdecl _invalid_parameter_noinfo_noreturn(); 
#line 229 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
__declspec(noreturn) 
#line 230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
__declspec(dllimport) void __cdecl _invoke_watson(const __wchar_t *, const __wchar_t *, const __wchar_t *, unsigned, uintptr_t); 
#line 448 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef int errno_t; 
#line 449 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef unsigned short wint_t; 
#line 450 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef unsigned short wctype_t; 
#line 451 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef long __time32_t; 
#line 452 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef __int64 __time64_t; 
#line 459 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef 
#line 454 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
struct __crt_locale_data_public { 
#line 456 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
const unsigned short *_locale_pctype; 
#line 457 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
int _locale_mb_cur_max; 
#line 458 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
unsigned _locale_lc_codepage; 
#line 459 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
} __crt_locale_data_public; 
#line 465 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef 
#line 461 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
struct __crt_locale_pointers { 
#line 463 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
struct __crt_locale_data *locinfo; 
#line 464 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
struct __crt_multibyte_data *mbcinfo; 
#line 465 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
} __crt_locale_pointers; 
#line 467 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef __crt_locale_pointers *_locale_t; 
#line 473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef 
#line 469 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
struct _Mbstatet { 
#line 471 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
unsigned long _Wchar; 
#line 472 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
unsigned short _Byte, _State; 
#line 473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
} _Mbstatet; 
#line 475 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef _Mbstatet mbstate_t; 
#line 489 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef __time64_t time_t; 
#line 499 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef size_t rsize_t; 
#line 1901 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
}__pragma(pack ( pop )) 
#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"













#line 75 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h"
}__pragma(pack ( pop )) 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 18 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"
namespace std { 
#line 20 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"
typedef decltype((__nullptr)) nullptr_t; 
#line 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"
}
#line 23 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"
using std::nullptr_t;
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"
__declspec(dllimport) int *__cdecl _errno(); 
#line 32 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"
__declspec(dllimport) errno_t __cdecl _set_errno(int _Value); 
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"
__declspec(dllimport) errno_t __cdecl _get_errno(int * _Value); 
#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"
__declspec(dllimport) extern unsigned long __cdecl __threadid(); 
#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"
__declspec(dllimport) extern uintptr_t __cdecl __threadhandle(); 
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"
}__pragma(pack ( pop )) 
#line 156 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"







































































































































































#line 324 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 752 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"













#line 766 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 763 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"















#line 779 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 775 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
typedef struct cudaArray *cudaArray_t; 
#line 780 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
typedef const cudaArray *cudaArray_const_t; 
#line 782 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
struct cudaArray; 
#line 787 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
typedef struct cudaMipmappedArray *cudaMipmappedArray_t; 
#line 792 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
typedef const cudaMipmappedArray *cudaMipmappedArray_const_t; 
#line 794 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
struct cudaMipmappedArray; 
#line 799 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"









#line 809 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 808 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"















#line 824 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 822 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"













#line 836 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 835 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"











#line 847 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 847 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"











#line 859 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 857 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"





















#line 879 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 874 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"























#line 898 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 892 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
struct cudaGraphicsResource; 
#line 897 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"















#line 913 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 909 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"











#line 921 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 919 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

















#line 937 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 932 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"













#line 946 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 943 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"











































































#line 1019 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 985 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"















































#line 1033 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1013 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"





















#line 1035 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1028 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"















#line 1044 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1068 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"





















#line 1090 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"













#line 1138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"











#line 1148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1146 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"













#line 1160 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"















#line 1173 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1169 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

















#line 1187 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1182 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"













#line 1196 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1193 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"









#line 1203 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1202 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

























































































































































































#line 1388 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1300 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"











#line 1312 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1308 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"









































































































































#line 1446 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1459 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"








#line 1468 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1467 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"








#line 1476 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1478 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"




#line 1483 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1483 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"




#line 1488 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1488 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"




#line 1493 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1493 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"




#line 1498 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1498 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"




#line 1503 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1503 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"




#line 1508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 84 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"











#line 96 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 94 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"









#line 104 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"







#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"




#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 84 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"













#line 98 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 95 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"









#line 105 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 104 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"









#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"



























#line 141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 161 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"



























#line 189 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 212 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"




#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 98 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 109 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 132 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 129 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 137 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 144 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 152 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 154 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 162 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 167 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 164 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 169 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"



#line 173 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 170 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"



#line 174 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 177 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 185 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 182 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"



#line 186 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 183 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"



#line 187 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 185 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 193 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 190 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 198 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 195 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 203 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 200 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 208 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 205 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 213 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 210 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 216 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"



#line 220 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"



#line 221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 232 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 240 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 237 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 245 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 250 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 247 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 255 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 252 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 260 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 274 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"



#line 278 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 279 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 287 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 284 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 292 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 289 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 297 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 294 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 302 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 299 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 307 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 304 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 312 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 309 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 317 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 314 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 322 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 319 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 327 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 324 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 332 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 329 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 337 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 334 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 342 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 339 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 347 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 344 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 352 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 362 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 367 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 363 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 368 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 364 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 369 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 365 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 370 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 366 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 371 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 367 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 372 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 368 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 373 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 369 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 374 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 370 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 375 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 371 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 376 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 372 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 377 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 373 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 378 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 374 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 379 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 375 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 380 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 376 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 381 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 377 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 382 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 378 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 383 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 379 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 384 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 380 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 385 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 381 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 386 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 382 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 387 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 383 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 388 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 384 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 389 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 385 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 390 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 386 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 391 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 387 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 392 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 388 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 393 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 389 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 394 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 390 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 395 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 391 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 396 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 392 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 397 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 393 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 398 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 394 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 399 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 395 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 400 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 396 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 401 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 397 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 402 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 398 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 403 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 399 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 404 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 400 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 405 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 401 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 406 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 402 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 407 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 403 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 408 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 404 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 409 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 405 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 410 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 406 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 411 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 407 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 412 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 408 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 413 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 409 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 417 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 425 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 427 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
typedef 
#line 54 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
enum cudaDataType_t { 
#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
CUDA_R_16F = 2, 
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
CUDA_C_16F = 6, 
#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
CUDA_R_32F = 0, 
#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
CUDA_C_32F = 4, 
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
CUDA_R_64F = 1, 
#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
CUDA_C_64F = 5, 
#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
CUDA_R_8I = 3, 
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
CUDA_C_8I = 7, 
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
CUDA_R_8U, 
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
CUDA_C_8U, 
#line 66 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
CUDA_R_32I, 
#line 67 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
CUDA_C_32I, 
#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
CUDA_R_32U, 
#line 69 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
CUDA_C_32U
#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
} cudaDataType; 
#line 78 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
typedef 
#line 73 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
enum libraryPropertyType_t { 
#line 75 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
MAJOR_VERSION, 
#line 76 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
MINOR_VERSION, 
#line 77 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
PATCH_LEVEL
#line 78 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
} libraryPropertyType; 
#line 104 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern "C" {
#line 106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetAttribute(int * value, cudaDeviceAttr attr, int device); 
#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetLimit(size_t * pValue, cudaLimit limit); 
#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetCacheConfig(cudaFuncCache * pCacheConfig); 
#line 109 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetSharedMemConfig(cudaSharedMemConfig * pConfig); 
#line 110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceSynchronize(); 
#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaGetLastError(); 
#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaPeekAtLastError(); 
#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern const char *__stdcall cudaGetErrorString(cudaError_t error); 
#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern const char *__stdcall cudaGetErrorName(cudaError_t error); 
#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaGetDeviceCount(int * count); 
#line 116 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaGetDevice(int * device); 
#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaStreamCreateWithFlags(cudaStream_t * pStream, unsigned flags); 
#line 118 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaStreamDestroy(cudaStream_t stream); 
#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned flags); 
#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaStreamWaitEvent_ptsz(cudaStream_t stream, cudaEvent_t event, unsigned flags); 
#line 121 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaEventCreateWithFlags(cudaEvent_t * event, unsigned flags); 
#line 122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaEventRecord(cudaEvent_t event, cudaStream_t stream); 
#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaEventRecord_ptsz(cudaEvent_t event, cudaStream_t stream); 
#line 124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaEventDestroy(cudaEvent_t event); 
#line 125 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaFuncGetAttributes(cudaFuncAttributes * attr, const void * func); 
#line 126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaFree(void * devPtr); 
#line 127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMalloc(void ** devPtr, size_t size); 
#line 128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyAsync(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream); 
#line 129 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyAsync_ptsz(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream); 
#line 130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy2DAsync(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream); 
#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy2DAsync_ptsz(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream); 
#line 132 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy3DAsync(const cudaMemcpy3DParms * p, cudaStream_t stream); 
#line 133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy3DAsync_ptsz(const cudaMemcpy3DParms * p, cudaStream_t stream); 
#line 134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemsetAsync(void * devPtr, int value, size_t count, cudaStream_t stream); 
#line 135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemsetAsync_ptsz(void * devPtr, int value, size_t count, cudaStream_t stream); 
#line 136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemset2DAsync(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream); 
#line 137 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemset2DAsync_ptsz(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream); 
#line 138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream); 
#line 139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemset3DAsync_ptsz(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream); 
#line 140 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaRuntimeGetVersion(int * runtimeVersion); 
#line 161 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern void *__stdcall cudaGetParameterBuffer(size_t alignment, size_t size); 
#line 189 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern void *__stdcall cudaGetParameterBufferV2(void * func, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize); 
#line 190 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaLaunchDevice_ptsz(void * func, void * parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream); 
#line 191 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaLaunchDeviceV2_ptsz(void * parameterBuffer, cudaStream_t stream); 
#line 209 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaLaunchDevice(void * func, void * parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream); 
#line 210 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaLaunchDeviceV2(void * parameterBuffer, cudaStream_t stream); 
#line 213 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, const void * func, int blockSize, size_t dynamicSmemSize); 
#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, const void * func, int blockSize, size_t dynamicSmemSize, unsigned flags); 
#line 216 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
}
#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
template< class T> static __inline cudaError_t cudaMalloc(T ** devPtr, size_t size); 
#line 219 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
template< class T> static __inline cudaError_t cudaFuncGetAttributes(cudaFuncAttributes * attr, T * entry); 
#line 220 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
template< class T> static __inline cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, T func, int blockSize, size_t dynamicSmemSize); 
#line 221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
template< class T> static __inline cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, T func, int blockSize, size_t dynamicSmemSize, unsigned flags); 
#line 219 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern "C" {
#line 252 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceReset(); 
#line 269 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceSynchronize(); 
#line 344 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceSetLimit(cudaLimit limit, size_t value); 
#line 373 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetLimit(size_t * pValue, cudaLimit limit); 
#line 404 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetCacheConfig(cudaFuncCache * pCacheConfig); 
#line 439 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetStreamPriorityRange(int * leastPriority, int * greatestPriority); 
#line 481 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceSetCacheConfig(cudaFuncCache cacheConfig); 
#line 510 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetSharedMemConfig(cudaSharedMemConfig * pConfig); 
#line 552 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceSetSharedMemConfig(cudaSharedMemConfig config); 
#line 575 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetByPCIBusId(int * device, const char * pciBusId); 
#line 602 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetPCIBusId(char * pciBusId, int len, int device); 
#line 644 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaIpcGetEventHandle(cudaIpcEventHandle_t * handle, cudaEvent_t event); 
#line 679 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaIpcOpenEventHandle(cudaEvent_t * event, cudaIpcEventHandle_t handle); 
#line 717 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaIpcGetMemHandle(cudaIpcMemHandle_t * handle, void * devPtr); 
#line 767 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaIpcOpenMemHandle(void ** devPtr, cudaIpcMemHandle_t handle, unsigned flags); 
#line 797 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaIpcCloseMemHandle(void * devPtr); 
#line 837 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaThreadExit(); 
#line 861 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaThreadSynchronize(); 
#line 908 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaThreadSetLimit(cudaLimit limit, size_t value); 
#line 939 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaThreadGetLimit(size_t * pValue, cudaLimit limit); 
#line 974 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaThreadGetCacheConfig(cudaFuncCache * pCacheConfig); 
#line 1020 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaThreadSetCacheConfig(cudaFuncCache cacheConfig); 
#line 1074 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetLastError(); 
#line 1115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaPeekAtLastError(); 
#line 1130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern const char *__stdcall cudaGetErrorName(cudaError_t error); 
#line 1145 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern const char *__stdcall cudaGetErrorString(cudaError_t error); 
#line 1175 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetDeviceCount(int * count); 
#line 1421 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetDeviceProperties(cudaDeviceProp * prop, int device); 
#line 1593 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetAttribute(int * value, cudaDeviceAttr attr, int device); 
#line 1628 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetP2PAttribute(int * value, cudaDeviceP2PAttr attr, int srcDevice, int dstDevice); 
#line 1647 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaChooseDevice(int * device, const cudaDeviceProp * prop); 
#line 1681 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaSetDevice(int device); 
#line 1698 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetDevice(int * device); 
#line 1727 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaSetValidDevices(int * device_arr, int len); 
#line 1789 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaSetDeviceFlags(unsigned flags); 
#line 1830 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetDeviceFlags(unsigned * flags); 
#line 1867 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamCreate(cudaStream_t * pStream); 
#line 1896 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamCreateWithFlags(cudaStream_t * pStream, unsigned flags); 
#line 1939 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamCreateWithPriority(cudaStream_t * pStream, unsigned flags, int priority); 
#line 1963 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamGetPriority(cudaStream_t hStream, int * priority); 
#line 1984 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamGetFlags(cudaStream_t hStream, unsigned * flags); 
#line 2005 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamDestroy(cudaStream_t stream); 
#line 2037 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned flags); 
#line 2051 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
typedef void (__stdcall *cudaStreamCallback_t)(cudaStream_t stream, cudaError_t status, void * userData); 
#line 2108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamAddCallback(cudaStream_t stream, cudaStreamCallback_t callback, void * userData, unsigned flags); 
#line 2128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamSynchronize(cudaStream_t stream); 
#line 2149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamQuery(cudaStream_t stream); 
#line 2220 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamAttachMemAsync(cudaStream_t stream, void * devPtr, size_t length = 0, unsigned flags = 4); 
#line 2256 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaEventCreate(cudaEvent_t * event); 
#line 2290 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaEventCreateWithFlags(cudaEvent_t * event, unsigned flags); 
#line 2321 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaEventRecord(cudaEvent_t event, cudaStream_t stream = 0); 
#line 2353 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaEventQuery(cudaEvent_t event); 
#line 2385 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaEventSynchronize(cudaEvent_t event); 
#line 2410 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaEventDestroy(cudaEvent_t event); 
#line 2451 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaEventElapsedTime(float * ms, cudaEvent_t start, cudaEvent_t end); 
#line 2510 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaLaunchKernel(const void * func, dim3 gridDim, dim3 blockDim, void ** args, size_t sharedMem, cudaStream_t stream); 
#line 2560 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaFuncSetCacheConfig(const void * func, cudaFuncCache cacheConfig); 
#line 2614 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaFuncSetSharedMemConfig(const void * func, cudaSharedMemConfig config); 
#line 2648 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaFuncGetAttributes(cudaFuncAttributes * attr, const void * func); 
#line 2671 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaSetDoubleForDevice(double * d); 
#line 2694 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaSetDoubleForHost(double * d); 
#line 2750 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, const void * func, int blockSize, size_t dynamicSMemSize); 
#line 2794 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, const void * func, int blockSize, size_t dynamicSMemSize, unsigned flags); 
#line 2845 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaConfigureCall(dim3 gridDim, dim3 blockDim, size_t sharedMem = 0, cudaStream_t stream = 0); 
#line 2874 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaSetupArgument(const void * arg, size_t size, size_t offset); 
#line 2912 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaLaunch(const void * func); 
#line 3030 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMallocManaged(void ** devPtr, size_t size, unsigned flags = 1); 
#line 3056 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMalloc(void ** devPtr, size_t size); 
#line 3085 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMallocHost(void ** ptr, size_t size); 
#line 3124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMallocPitch(void ** devPtr, size_t * pitch, size_t width, size_t height); 
#line 3166 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMallocArray(cudaArray_t * array, const cudaChannelFormatDesc * desc, size_t width, size_t height = 0, unsigned flags = 0); 
#line 3193 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaFree(void * devPtr); 
#line 3213 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaFreeHost(void * ptr); 
#line 3235 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaFreeArray(cudaArray_t array); 
#line 3257 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray); 
#line 3316 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaHostAlloc(void ** pHost, size_t size, unsigned flags); 
#line 3393 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaHostRegister(void * ptr, size_t size, unsigned flags); 
#line 3412 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaHostUnregister(void * ptr); 
#line 3454 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaHostGetDevicePointer(void ** pDevice, void * pHost, unsigned flags); 
#line 3473 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaHostGetFlags(unsigned * pFlags, void * pHost); 
#line 3508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMalloc3D(cudaPitchedPtr * pitchedDevPtr, cudaExtent extent); 
#line 3643 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMalloc3DArray(cudaArray_t * array, const cudaChannelFormatDesc * desc, cudaExtent extent, unsigned flags = 0); 
#line 3764 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMallocMipmappedArray(cudaMipmappedArray_t * mipmappedArray, const cudaChannelFormatDesc * desc, cudaExtent extent, unsigned numLevels, unsigned flags = 0); 
#line 3790 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetMipmappedArrayLevel(cudaArray_t * levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned level); 
#line 3890 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy3D(const cudaMemcpy3DParms * p); 
#line 3918 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy3DPeer(const cudaMemcpy3DPeerParms * p); 
#line 4029 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy3DAsync(const cudaMemcpy3DParms * p, cudaStream_t stream = 0); 
#line 4052 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy3DPeerAsync(const cudaMemcpy3DPeerParms * p, cudaStream_t stream = 0); 
#line 4071 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemGetInfo(size_t * free, size_t * total); 
#line 4092 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaArrayGetInfo(cudaChannelFormatDesc * desc, cudaExtent * extent, unsigned * flags, cudaArray_t array); 
#line 4130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy(void * dst, const void * src, size_t count, cudaMemcpyKind kind); 
#line 4162 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyPeer(void * dst, int dstDevice, const void * src, int srcDevice, size_t count); 
#line 4200 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t count, cudaMemcpyKind kind); 
#line 4237 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyFromArray(void * dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind); 
#line 4275 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, cudaMemcpyKind kind = cudaMemcpyDeviceToDevice); 
#line 4320 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy2D(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind); 
#line 4366 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind); 
#line 4412 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy2DFromArray(void * dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind); 
#line 4455 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, cudaMemcpyKind kind = cudaMemcpyDeviceToDevice); 
#line 4493 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyToSymbol(const void * symbol, const void * src, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyHostToDevice); 
#line 4531 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyFromSymbol(void * dst, const void * symbol, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyDeviceToHost); 
#line 4582 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyAsync(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 4614 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyPeerAsync(void * dst, int dstDevice, const void * src, int srcDevice, size_t count, cudaStream_t stream = 0); 
#line 4660 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 4705 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyFromArrayAsync(void * dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 4765 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy2DAsync(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 4820 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 4874 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy2DFromArrayAsync(void * dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 4920 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyToSymbolAsync(const void * symbol, const void * src, size_t count, size_t offset, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 4966 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyFromSymbolAsync(void * dst, const void * symbol, size_t count, size_t offset, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 4992 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemset(void * devPtr, int value, size_t count); 
#line 5022 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemset2D(void * devPtr, size_t pitch, int value, size_t width, size_t height); 
#line 5065 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemset3D(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent); 
#line 5097 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemsetAsync(void * devPtr, int value, size_t count, cudaStream_t stream = 0); 
#line 5134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemset2DAsync(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream = 0); 
#line 5184 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream = 0); 
#line 5207 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetSymbolAddress(void ** devPtr, const void * symbol); 
#line 5229 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetSymbolSize(size_t * size, const void * symbol); 
#line 5296 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemPrefetchAsync(const void * devPtr, size_t count, int dstDevice, cudaStream_t stream = 0); 
#line 5382 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemAdvise(const void * devPtr, size_t count, cudaMemoryAdvise advice, int device); 
#line 5438 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemRangeGetAttribute(void * data, size_t dataSize, cudaMemRangeAttribute attribute, const void * devPtr, size_t count); 
#line 5474 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemRangeGetAttributes(void ** data, size_t * dataSizes, cudaMemRangeAttribute * attributes, size_t numAttributes, const void * devPtr, size_t count); 
#line 5627 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaPointerGetAttributes(cudaPointerAttributes * attributes, const void * ptr); 
#line 5665 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceCanAccessPeer(int * canAccessPeer, int device, int peerDevice); 
#line 5704 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceEnablePeerAccess(int peerDevice, unsigned flags); 
#line 5723 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceDisablePeerAccess(int peerDevice); 
#line 5783 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource); 
#line 5815 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned flags); 
#line 5851 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphicsMapResources(int count, cudaGraphicsResource_t * resources, cudaStream_t stream = 0); 
#line 5883 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t * resources, cudaStream_t stream = 0); 
#line 5912 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphicsResourceGetMappedPointer(void ** devPtr, size_t * size, cudaGraphicsResource_t resource); 
#line 5946 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphicsSubResourceGetMappedArray(cudaArray_t * array, cudaGraphicsResource_t resource, unsigned arrayIndex, unsigned mipLevel); 
#line 5971 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t * mipmappedArray, cudaGraphicsResource_t resource); 
#line 6011 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetChannelDesc(cudaChannelFormatDesc * desc, cudaArray_const_t array); 
#line 6046 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaChannelFormatDesc __stdcall cudaCreateChannelDesc(int x, int y, int z, int w, cudaChannelFormatKind f); 
#line 6093 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaBindTexture(size_t * offset, const textureReference * texref, const void * devPtr, const cudaChannelFormatDesc * desc, size_t size = 4294967295U); 
#line 6144 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaBindTexture2D(size_t * offset, const textureReference * texref, const void * devPtr, const cudaChannelFormatDesc * desc, size_t width, size_t height, size_t pitch); 
#line 6172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaBindTextureToArray(const textureReference * texref, cudaArray_const_t array, const cudaChannelFormatDesc * desc); 
#line 6200 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaBindTextureToMipmappedArray(const textureReference * texref, cudaMipmappedArray_const_t mipmappedArray, const cudaChannelFormatDesc * desc); 
#line 6221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaUnbindTexture(const textureReference * texref); 
#line 6246 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetTextureAlignmentOffset(size_t * offset, const textureReference * texref); 
#line 6271 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetTextureReference(const textureReference ** texref, const void * symbol); 
#line 6311 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaBindSurfaceToArray(const surfaceReference * surfref, cudaArray_const_t array, const cudaChannelFormatDesc * desc); 
#line 6330 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetSurfaceReference(const surfaceReference ** surfref, const void * symbol); 
#line 6556 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaCreateTextureObject(cudaTextureObject_t * pTexObject, const cudaResourceDesc * pResDesc, const cudaTextureDesc * pTexDesc, const cudaResourceViewDesc * pResViewDesc); 
#line 6571 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDestroyTextureObject(cudaTextureObject_t texObject); 
#line 6587 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetTextureObjectResourceDesc(cudaResourceDesc * pResDesc, cudaTextureObject_t texObject); 
#line 6603 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetTextureObjectTextureDesc(cudaTextureDesc * pTexDesc, cudaTextureObject_t texObject); 
#line 6620 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetTextureObjectResourceViewDesc(cudaResourceViewDesc * pResViewDesc, cudaTextureObject_t texObject); 
#line 6659 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaCreateSurfaceObject(cudaSurfaceObject_t * pSurfObject, const cudaResourceDesc * pResDesc); 
#line 6674 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject); 
#line 6689 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetSurfaceObjectResourceDesc(cudaResourceDesc * pResDesc, cudaSurfaceObject_t surfObject); 
#line 6716 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDriverGetVersion(int * driverVersion); 
#line 6733 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaRuntimeGetVersion(int * runtimeVersion); 
#line 6738 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetExportTable(const void ** ppExportTable, const cudaUUID_t * pExportTableId); 
#line 6964 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
}
#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template< class T> __inline ::cudaChannelFormatDesc cudaCreateChannelDesc() 
#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 109 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone); 
#line 110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
static __inline cudaChannelFormatDesc cudaCreateChannelDescHalf() 
#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8); 
#line 116 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
static __inline cudaChannelFormatDesc cudaCreateChannelDescHalf1() 
#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 121 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8); 
#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
#line 124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
static __inline cudaChannelFormatDesc cudaCreateChannelDescHalf2() 
#line 127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8); 
#line 130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat); 
#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
static __inline cudaChannelFormatDesc cudaCreateChannelDescHalf4() 
#line 134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8); 
#line 137 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat); 
#line 138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 140 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< char> () 
#line 141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(char)) * 8); 
#line 147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 151 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< signed char> () 
#line 152 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(signed char)) * 8); 
#line 155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 156 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 158 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned char> () 
#line 159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 160 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned char)) * 8); 
#line 162 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 163 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 165 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< char1> () 
#line 166 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 167 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(signed char)) * 8); 
#line 169 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 170 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar1> () 
#line 173 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 174 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned char)) * 8); 
#line 176 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 177 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 179 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< char2> () 
#line 180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 181 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(signed char)) * 8); 
#line 183 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
#line 184 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 186 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar2> () 
#line 187 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 188 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned char)) * 8); 
#line 190 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
#line 191 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 193 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< char4> () 
#line 194 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 195 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(signed char)) * 8); 
#line 197 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
#line 198 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 200 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar4> () 
#line 201 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 202 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned char)) * 8); 
#line 204 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
#line 205 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 207 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< short> () 
#line 208 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 209 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(short)) * 8); 
#line 211 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 212 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned short> () 
#line 215 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 216 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8); 
#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 219 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< short1> () 
#line 222 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 223 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(short)) * 8); 
#line 225 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 226 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 228 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort1> () 
#line 229 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 230 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8); 
#line 232 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 233 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 235 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< short2> () 
#line 236 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 237 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(short)) * 8); 
#line 239 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
#line 240 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort2> () 
#line 243 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 244 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8); 
#line 246 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
#line 247 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 249 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< short4> () 
#line 250 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 251 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(short)) * 8); 
#line 253 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
#line 254 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 256 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort4> () 
#line 257 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 258 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8); 
#line 260 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
#line 261 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 263 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< int> () 
#line 264 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 265 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(int)) * 8); 
#line 267 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 268 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 270 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned> () 
#line 271 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 272 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned)) * 8); 
#line 274 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 275 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 277 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< int1> () 
#line 278 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 279 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(int)) * 8); 
#line 281 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 282 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 284 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uint1> () 
#line 285 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 286 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned)) * 8); 
#line 288 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 289 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 291 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< int2> () 
#line 292 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 293 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(int)) * 8); 
#line 295 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
#line 296 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 298 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uint2> () 
#line 299 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 300 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned)) * 8); 
#line 302 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
#line 303 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 305 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< int4> () 
#line 306 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 307 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(int)) * 8); 
#line 309 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
#line 310 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 312 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uint4> () 
#line 313 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 314 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned)) * 8); 
#line 316 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
#line 317 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 321 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< long> () 
#line 322 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 323 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(long)) * 8); 
#line 325 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 326 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 328 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned long> () 
#line 329 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 330 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned long)) * 8); 
#line 332 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 333 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 335 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< long1> () 
#line 336 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 337 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(long)) * 8); 
#line 339 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 340 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 342 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ulong1> () 
#line 343 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 344 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned long)) * 8); 
#line 346 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 347 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 349 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< long2> () 
#line 350 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 351 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(long)) * 8); 
#line 353 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
#line 354 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 356 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ulong2> () 
#line 357 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 358 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned long)) * 8); 
#line 360 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
#line 361 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 363 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< long4> () 
#line 364 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 365 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(long)) * 8); 
#line 367 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
#line 368 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 370 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ulong4> () 
#line 371 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 372 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned long)) * 8); 
#line 374 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
#line 375 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 379 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< float> () 
#line 380 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 381 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(float)) * 8); 
#line 383 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
#line 384 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 386 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< float1> () 
#line 387 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 388 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(float)) * 8); 
#line 390 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
#line 391 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 393 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< float2> () 
#line 394 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 395 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(float)) * 8); 
#line 397 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat); 
#line 398 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 400 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< float4> () 
#line 401 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 402 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(float)) * 8); 
#line 404 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat); 
#line 405 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 79 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
static __inline cudaPitchedPtr make_cudaPitchedPtr(void *d, size_t p, size_t xsz, size_t ysz) 
#line 80 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
{ 
#line 81 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
cudaPitchedPtr s; 
#line 83 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
(s.ptr) = d; 
#line 84 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
(s.pitch) = p; 
#line 85 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
(s.xsize) = xsz; 
#line 86 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
(s.ysize) = ysz; 
#line 88 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
return s; 
#line 89 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
} 
#line 106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
static __inline cudaPos make_cudaPos(size_t x, size_t y, size_t z) 
#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
{ 
#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
cudaPos p; 
#line 110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
(p.x) = x; 
#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
(p.y) = y; 
#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
(p.z) = z; 
#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
return p; 
#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
} 
#line 132 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
static __inline cudaExtent make_cudaExtent(size_t w, size_t h, size_t d) 
#line 133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
{ 
#line 134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
cudaExtent e; 
#line 136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
(e.width) = w; 
#line 137 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
(e.height) = h; 
#line 138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
(e.depth) = d; 
#line 140 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
return e; 
#line 141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
} 
#line 75 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline char1 make_char1(signed char x) 
#line 76 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 77 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
char1 t; (t.x) = x; return t; 
#line 78 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 80 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline uchar1 make_uchar1(unsigned char x) 
#line 81 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 82 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
uchar1 t; (t.x) = x; return t; 
#line 83 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 85 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline char2 make_char2(signed char x, signed char y) 
#line 86 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 87 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
char2 t; (t.x) = x; (t.y) = y; return t; 
#line 88 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 90 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline uchar2 make_uchar2(unsigned char x, unsigned char y) 
#line 91 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 92 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
uchar2 t; (t.x) = x; (t.y) = y; return t; 
#line 93 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 95 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline char3 make_char3(signed char x, signed char y, signed char z) 
#line 96 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 97 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
char3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 98 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z) 
#line 101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
uchar3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 105 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline char4 make_char4(signed char x, signed char y, signed char z, signed char w) 
#line 106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
char4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w) 
#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
uchar4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline short1 make_short1(short x) 
#line 116 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
short1 t; (t.x) = x; return t; 
#line 118 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline ushort1 make_ushort1(unsigned short x) 
#line 121 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
ushort1 t; (t.x) = x; return t; 
#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 125 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline short2 make_short2(short x, short y) 
#line 126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
short2 t; (t.x) = x; (t.y) = y; return t; 
#line 128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline ushort2 make_ushort2(unsigned short x, unsigned short y) 
#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 132 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
ushort2 t; (t.x) = x; (t.y) = y; return t; 
#line 133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline short3 make_short3(short x, short y, short z) 
#line 136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 137 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
short3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 140 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z) 
#line 141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
ushort3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 143 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 145 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline short4 make_short4(short x, short y, short z, short w) 
#line 146 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
short4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 150 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w) 
#line 151 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 152 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
ushort4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline int1 make_int1(int x) 
#line 156 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
int1 t; (t.x) = x; return t; 
#line 158 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 160 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline uint1 make_uint1(unsigned x) 
#line 161 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 162 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
uint1 t; (t.x) = x; return t; 
#line 163 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 165 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline int2 make_int2(int x, int y) 
#line 166 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 167 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
int2 t; (t.x) = x; (t.y) = y; return t; 
#line 168 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 170 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline uint2 make_uint2(unsigned x, unsigned y) 
#line 171 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
uint2 t; (t.x) = x; (t.y) = y; return t; 
#line 173 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 175 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline int3 make_int3(int x, int y, int z) 
#line 176 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 177 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
int3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 178 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline uint3 make_uint3(unsigned x, unsigned y, unsigned z) 
#line 181 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 182 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
uint3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 183 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 185 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline int4 make_int4(int x, int y, int z, int w) 
#line 186 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 187 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
int4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 188 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 190 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline uint4 make_uint4(unsigned x, unsigned y, unsigned z, unsigned w) 
#line 191 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 192 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
uint4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 193 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 195 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline long1 make_long1(long x) 
#line 196 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 197 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
long1 t; (t.x) = x; return t; 
#line 198 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 200 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline ulong1 make_ulong1(unsigned long x) 
#line 201 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 202 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
ulong1 t; (t.x) = x; return t; 
#line 203 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 205 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline long2 make_long2(long x, long y) 
#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 207 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
long2 t; (t.x) = x; (t.y) = y; return t; 
#line 208 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 210 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline ulong2 make_ulong2(unsigned long x, unsigned long y) 
#line 211 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 212 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
ulong2 t; (t.x) = x; (t.y) = y; return t; 
#line 213 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 215 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline long3 make_long3(long x, long y, long z) 
#line 216 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
long3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 220 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline ulong3 make_ulong3(unsigned long x, unsigned long y, unsigned long z) 
#line 221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 222 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
ulong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 223 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 225 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline long4 make_long4(long x, long y, long z, long w) 
#line 226 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 227 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
long4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 228 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 230 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline ulong4 make_ulong4(unsigned long x, unsigned long y, unsigned long z, unsigned long w) 
#line 231 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 232 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
ulong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 233 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 235 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline float1 make_float1(float x) 
#line 236 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 237 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
float1 t; (t.x) = x; return t; 
#line 238 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 240 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline float2 make_float2(float x, float y) 
#line 241 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
float2 t; (t.x) = x; (t.y) = y; return t; 
#line 243 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 245 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline float3 make_float3(float x, float y, float z) 
#line 246 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 247 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
float3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 248 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 250 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline float4 make_float4(float x, float y, float z, float w) 
#line 251 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 252 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
float4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 253 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 255 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline longlong1 make_longlong1(__int64 x) 
#line 256 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 257 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
longlong1 t; (t.x) = x; return t; 
#line 258 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 260 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline ulonglong1 make_ulonglong1(unsigned __int64 x) 
#line 261 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 262 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
ulonglong1 t; (t.x) = x; return t; 
#line 263 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 265 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline longlong2 make_longlong2(__int64 x, __int64 y) 
#line 266 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 267 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
longlong2 t; (t.x) = x; (t.y) = y; return t; 
#line 268 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 270 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline ulonglong2 make_ulonglong2(unsigned __int64 x, unsigned __int64 y) 
#line 271 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 272 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
ulonglong2 t; (t.x) = x; (t.y) = y; return t; 
#line 273 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 275 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline longlong3 make_longlong3(__int64 x, __int64 y, __int64 z) 
#line 276 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 277 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
longlong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 278 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 280 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline ulonglong3 make_ulonglong3(unsigned __int64 x, unsigned __int64 y, unsigned __int64 z) 
#line 281 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 282 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
ulonglong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 283 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 285 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline longlong4 make_longlong4(__int64 x, __int64 y, __int64 z, __int64 w) 
#line 286 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 287 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
longlong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 288 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 290 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline ulonglong4 make_ulonglong4(unsigned __int64 x, unsigned __int64 y, unsigned __int64 z, unsigned __int64 w) 
#line 291 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 292 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
ulonglong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 293 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 295 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline double1 make_double1(double x) 
#line 296 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 297 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
double1 t; (t.x) = x; return t; 
#line 298 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 300 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline double2 make_double2(double x, double y) 
#line 301 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 302 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
double2 t; (t.x) = x; (t.y) = y; return t; 
#line 303 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 305 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline double3 make_double3(double x, double y, double z) 
#line 306 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 307 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
double3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 308 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 310 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline double4 make_double4(double x, double y, double z, double w) 
#line 311 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 312 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
double4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 313 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\errno.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 17 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\errno.h"
__declspec(dllimport) extern int *__cdecl _errno(); 
#line 20 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\errno.h"
__declspec(dllimport) errno_t __cdecl _set_errno(int _Value); 
#line 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\errno.h"
__declspec(dllimport) errno_t __cdecl _get_errno(int * _Value); 
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\errno.h"
__declspec(dllimport) unsigned long *__cdecl __doserrno(); 
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\errno.h"
__declspec(dllimport) errno_t __cdecl _set_doserrno(unsigned long _Value); 
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\errno.h"
__declspec(dllimport) errno_t __cdecl _get_doserrno(unsigned long * _Value); 
#line 129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\errno.h"
}__pragma(pack ( pop )) 
#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
__declspec(dllimport) const void *__cdecl memchr(const void * _Buf, int _Val, size_t _MaxCount); 
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
int __cdecl memcmp(const void * _Buf1, const void * _Buf2, size_t _Size); 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
void *__cdecl memcpy(void * _Dst, const void * _Src, size_t _Size); 
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
__declspec(dllimport) void *__cdecl memmove(void * _Dst, const void * _Src, size_t _Size); 
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
void *__cdecl memset(void * _Dst, int _Val, size_t _Size); 
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
__declspec(dllimport) const char *__cdecl strchr(const char * _Str, int _Val); 
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
__declspec(dllimport) const char *__cdecl strrchr(const char * _Str, int _Ch); 
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
__declspec(dllimport) const char *__cdecl strstr(const char * _Str, const char * _SubStr); 
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
__declspec(dllimport) const __wchar_t *__cdecl wcschr(const __wchar_t * _Str, __wchar_t _Ch); 
#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
__declspec(dllimport) const __wchar_t *__cdecl wcsrchr(const __wchar_t * _Str, __wchar_t _Ch); 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
__declspec(dllimport) const __wchar_t *__cdecl wcsstr(const __wchar_t * _Str, const __wchar_t * _SubStr); 
#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
}__pragma(pack ( pop )) 
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 35 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
static __inline errno_t __cdecl memcpy_s(void *const 
#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
_Destination, const rsize_t 
#line 37 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
_DestinationSize, const void *const 
#line 38 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
_Source, const rsize_t 
#line 39 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
_SourceSize) 
#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
{ 
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
if (_SourceSize == (0)) 
#line 43 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
{ 
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
return 0; 
#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
}  
#line 47 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
{ int _Expr_val = !(!(_Destination != (0))); if (!_Expr_val) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; }  } ; 
#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
if ((_Source == (0)) || (_DestinationSize < _SourceSize)) 
#line 49 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
{ 
#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
memset(_Destination, 0, _DestinationSize); 
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
{ int _Expr_val = !(!(_Source != (0))); if (!_Expr_val) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; }  } ; 
#line 53 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
{ int _Expr_val = !(!(_DestinationSize >= _SourceSize)); if (!_Expr_val) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; }  } ; 
#line 56 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
return 22; 
#line 57 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
}  
#line 59 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
memcpy(_Destination, _Source, _SourceSize); 
#line 60 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
return 0; 
#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
} 
#line 64 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
static __inline errno_t __cdecl memmove_s(void *const 
#line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
_Destination, const rsize_t 
#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
_DestinationSize, const void *const 
#line 67 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
_Source, const rsize_t 
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
_SourceSize) 
#line 70 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
{ 
#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
if (_SourceSize == (0)) 
#line 72 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
{ 
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
return 0; 
#line 74 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
}  
#line 76 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
{ int _Expr_val = !(!(_Destination != (0))); if (!_Expr_val) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; }  } ; 
#line 77 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
{ int _Expr_val = !(!(_Source != (0))); if (!_Expr_val) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; }  } ; 
#line 78 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
{ int _Expr_val = !(!(_DestinationSize >= _SourceSize)); if (!_Expr_val) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; }  } ; 
#line 80 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
memmove(_Destination, _Source, _SourceSize); 
#line 81 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
return 0; 
#line 82 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
} 
#line 88 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
}__pragma(pack ( pop )) 
#line 19 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
__declspec(dllimport) int __cdecl _memicmp(const void * _Buf1, const void * _Buf2, size_t _Size); 
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
__declspec(dllimport) int __cdecl _memicmp_l(const void * _Buf1, const void * _Buf2, size_t _Size, _locale_t _Locale); 
#line 78 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
__declspec(dllimport) void *__cdecl memccpy(void * _Dst, const void * _Src, int _Val, size_t _Size); 
#line 86 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
__declspec(dllimport) int __cdecl memicmp(const void * _Buf1, const void * _Buf2, size_t _Size); 
#line 97 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
extern "C++" inline void *__cdecl memchr(void *
#line 98 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
_Pv, int 
#line 99 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
_C, size_t 
#line 100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
_N) 
#line 102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
{ 
#line 103 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
const void *const _Pvc = _Pv; 
#line 104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
return const_cast< void *>(memchr(_Pvc, _C, _N)); 
#line 105 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
} 
#line 110 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
}__pragma(pack ( pop )) 
#line 16 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl wcscat_s(__wchar_t * _Destination, rsize_t _SizeInWords, const __wchar_t * _Source); 
#line 35 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl wcscpy_s(__wchar_t * _Destination, rsize_t _SizeInWords, const __wchar_t * _Source); 
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl wcsncat_s(__wchar_t * _Destination, rsize_t _SizeInWords, const __wchar_t * _Source, rsize_t _MaxCount); 
#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl wcsncpy_s(__wchar_t * _Destination, rsize_t _SizeInWords, const __wchar_t * _Source, rsize_t _MaxCount); 
#line 58 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcstok_s(__wchar_t * _String, const __wchar_t * _Delimiter, __wchar_t ** _Context); 
#line 79 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __declspec(allocator) __wchar_t *__cdecl _wcsdup(const __wchar_t * _String); 
#line 89 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl wcscat_s(__wchar_t (&_Destination)[_Size], const __wchar_t *_Source) throw() { return wcscat_s(_Destination, _Size, _Source); } }
#line 97 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcscat(__wchar_t * _Destination, const __wchar_t * _Source); 
#line 106 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl wcscmp(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 111 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl wcscpy_s(__wchar_t (&_Destination)[_Size], const __wchar_t *_Source) throw() { return wcscpy_s(_Destination, _Size, _Source); } }
#line 117 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcscpy(__wchar_t * _Destination, const __wchar_t * _Source); 
#line 124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) size_t __cdecl wcscspn(const __wchar_t * _String, const __wchar_t * _Control); 
#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) size_t __cdecl wcslen(const __wchar_t * _String); 
#line 143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) size_t __cdecl wcsnlen(const __wchar_t * _Source, size_t _MaxCount); 
#line 159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
static __inline size_t __cdecl wcsnlen_s(const __wchar_t *
#line 160 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
_Source, size_t 
#line 161 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
_MaxCount) 
#line 163 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
{ 
#line 164 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
return (_Source == (0)) ? 0 : wcsnlen(_Source, _MaxCount); 
#line 165 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
} 
#line 169 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl wcsncat_s(__wchar_t (&_Destination)[_Size], const __wchar_t *_Source, ::size_t _Count) throw() { return wcsncat_s(_Destination, _Size, _Source, _Count); } }
#line 176 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcsncat(__wchar_t * _Destination, const __wchar_t * _Source, size_t _Count); 
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl wcsncmp(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount); 
#line 191 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl wcsncpy_s(__wchar_t (&_Destination)[_Size], const __wchar_t *_Source, ::size_t _Count) throw() { return wcsncpy_s(_Destination, _Size, _Source, _Count); } }
#line 198 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcsncpy(__wchar_t * _Destination, const __wchar_t * _Source, size_t _Count); 
#line 207 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) const __wchar_t *__cdecl wcspbrk(const __wchar_t * _String, const __wchar_t * _Control); 
#line 213 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) size_t __cdecl wcsspn(const __wchar_t * _String, const __wchar_t * _Control); 
#line 219 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcstok(__wchar_t * _String, const __wchar_t * _Delimiter, __wchar_t ** _Context); 
#line 236 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
#pragma warning(push)
#pragma warning(disable: 4141 4996)
#line 240 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
static __inline __wchar_t *__cdecl _wcstok(__wchar_t *const 
#line 241 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
_String, const __wchar_t *const 
#line 242 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
_Delimiter) 
#line 244 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
{ 
#line 245 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
return wcstok(_String, _Delimiter, 0); 
#line 246 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
} 
#line 254 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" 
#line 253 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(deprecated("wcstok has been changed to conform with the ISO C standard, adding an extra context parameter. To use the legacy Microsoft wcsto" "k, define _CRT_NON_CONFORMING_WCSTOK.")) inline __wchar_t *__cdecl 
#line 254 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
wcstok(__wchar_t *
#line 255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
_String, const __wchar_t *
#line 256 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
_Delimiter) throw() 
#line 258 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
{ 
#line 259 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
return wcstok(_String, _Delimiter, 0); 
#line 260 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
} 
#line 263 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
#pragma warning(pop)
#line 271 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcserror(int _ErrorNumber); 
#line 276 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl _wcserror_s(__wchar_t * _Buffer, size_t _SizeInWords, int _ErrorNumber); 
#line 282 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wcserror_s(__wchar_t (&_Buffer)[_Size], int _Error) throw() { return _wcserror_s(_Buffer, _Size, _Error); } }
#line 291 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl __wcserror(const __wchar_t * _String); 
#line 295 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl __wcserror_s(__wchar_t * _Buffer, size_t _SizeInWords, const __wchar_t * _ErrorMessage); 
#line 301 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl __wcserror_s(__wchar_t (&_Buffer)[_Size], const __wchar_t *_ErrorMessage) throw() { return __wcserror_s(_Buffer, _Size, _ErrorMessage); } }
#line 307 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl _wcsicmp(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 312 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl _wcsicmp_l(const __wchar_t * _String1, const __wchar_t * _String2, _locale_t _Locale); 
#line 318 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl _wcsnicmp(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount); 
#line 324 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl _wcsnicmp_l(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 331 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl _wcsnset_s(__wchar_t * _Destination, size_t _SizeInWords, __wchar_t _Value, size_t _MaxCount); 
#line 338 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wcsnset_s(__wchar_t (&_Destination)[_Size], __wchar_t _Value, ::size_t _MaxCount) throw() { return _wcsnset_s(_Destination, _Size, _Value, _MaxCount); } }
#line 345 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcsnset(__wchar_t * _String, __wchar_t _Value, size_t _MaxCount); 
#line 353 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcsrev(__wchar_t * _String); 
#line 357 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl _wcsset_s(__wchar_t * _Destination, size_t _SizeInWords, __wchar_t _Value); 
#line 363 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wcsset_s(__wchar_t (&_String)[_Size], __wchar_t _Value) throw() { return _wcsset_s(_String, _Size, _Value); } }
#line 369 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcsset(__wchar_t * _String, __wchar_t _Value); 
#line 376 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl _wcslwr_s(__wchar_t * _String, size_t _SizeInWords); 
#line 381 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wcslwr_s(__wchar_t (&_String)[_Size]) throw() { return _wcslwr_s(_String, _Size); } }
#line 386 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcslwr(__wchar_t * _String); 
#line 392 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl _wcslwr_s_l(__wchar_t * _String, size_t _SizeInWords, _locale_t _Locale); 
#line 398 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wcslwr_s_l(__wchar_t (&_String)[_Size], ::_locale_t _Locale) throw() { return _wcslwr_s_l(_String, _Size, _Locale); } }
#line 404 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcslwr_l(__wchar_t * _String, _locale_t _Locale); 
#line 412 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl _wcsupr_s(__wchar_t * _String, size_t _Size); 
#line 417 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wcsupr_s(__wchar_t (&_String)[_Size]) throw() { return _wcsupr_s(_String, _Size); } }
#line 422 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcsupr(__wchar_t * _String); 
#line 428 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl _wcsupr_s_l(__wchar_t * _String, size_t _Size, _locale_t _Locale); 
#line 434 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wcsupr_s_l(__wchar_t (&_String)[_Size], ::_locale_t _Locale) throw() { return _wcsupr_s_l(_String, _Size, _Locale); } }
#line 440 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcsupr_l(__wchar_t * _String, _locale_t _Locale); 
#line 449 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) size_t __cdecl wcsxfrm(__wchar_t * _Destination, const __wchar_t * _Source, size_t _MaxCount); 
#line 457 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) size_t __cdecl _wcsxfrm_l(__wchar_t * _Destination, const __wchar_t * _Source, size_t _MaxCount, _locale_t _Locale); 
#line 465 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl wcscoll(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 471 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl _wcscoll_l(const __wchar_t * _String1, const __wchar_t * _String2, _locale_t _Locale); 
#line 478 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl _wcsicoll(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 484 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl _wcsicoll_l(const __wchar_t * _String1, const __wchar_t * _String2, _locale_t _Locale); 
#line 491 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl _wcsncoll(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount); 
#line 498 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl _wcsncoll_l(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 506 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl _wcsnicoll(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount); 
#line 513 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl _wcsnicoll_l(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 528 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" {
#line 532 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
inline __wchar_t *__cdecl wcschr(__wchar_t *_String, __wchar_t _C) 
#line 533 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
{ 
#line 534 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
return const_cast< __wchar_t *>(wcschr(static_cast< const __wchar_t *>(_String), _C)); 
#line 535 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
} 
#line 538 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
inline __wchar_t *__cdecl wcspbrk(__wchar_t *_String, const __wchar_t *_Control) 
#line 539 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
{ 
#line 540 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
return const_cast< __wchar_t *>(wcspbrk(static_cast< const __wchar_t *>(_String), _Control)); 
#line 541 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
} 
#line 544 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
inline __wchar_t *__cdecl wcsrchr(__wchar_t *_String, __wchar_t _C) 
#line 545 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
{ 
#line 546 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
return const_cast< __wchar_t *>(wcsrchr(static_cast< const __wchar_t *>(_String), _C)); 
#line 547 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
} 
#line 551 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
inline __wchar_t *__cdecl wcsstr(__wchar_t *_String, const __wchar_t *_SubStr) 
#line 552 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
{ 
#line 553 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
return const_cast< __wchar_t *>(wcsstr(static_cast< const __wchar_t *>(_String), _SubStr)); 
#line 554 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
} 
#line 556 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
}
#line 573 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcsdup(const __wchar_t * _String); 
#line 585 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl wcsicmp(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 591 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl wcsnicmp(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount); 
#line 599 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcsnset(__wchar_t * _String, __wchar_t _Value, size_t _MaxCount); 
#line 607 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcsrev(__wchar_t * _String); 
#line 613 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcsset(__wchar_t * _String, __wchar_t _Value); 
#line 620 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcslwr(__wchar_t * _String); 
#line 626 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcsupr(__wchar_t * _String); 
#line 631 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl wcsicoll(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 640 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
}__pragma(pack ( pop )) 
#line 18 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) errno_t __cdecl strcpy_s(char * _Destination, rsize_t _SizeInBytes, const char * _Source); 
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) errno_t __cdecl strcat_s(char * _Destination, rsize_t _SizeInBytes, const char * _Source); 
#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) errno_t __cdecl strerror_s(char * _Buffer, size_t _SizeInBytes, int _ErrorNumber); 
#line 47 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) errno_t __cdecl strncat_s(char * _Destination, rsize_t _SizeInBytes, const char * _Source, rsize_t _MaxCount); 
#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) errno_t __cdecl strncpy_s(char * _Destination, rsize_t _SizeInBytes, const char * _Source, rsize_t _MaxCount); 
#line 63 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl strtok_s(char * _String, const char * _Delimiter, char ** _Context); 
#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) void *__cdecl _memccpy(void * _Dst, const void * _Src, int _Val, size_t _MaxCount); 
#line 78 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl strcat_s(char (&_Destination)[_Size], const char *_Source) throw() { return strcat_s(_Destination, _Size, _Source); } }
#line 86 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
char *__cdecl strcat(char * _Destination, const char * _Source); 
#line 95 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
int __cdecl strcmp(const char * _Str1, const char * _Str2); 
#line 101 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl _strcmpi(const char * _String1, const char * _String2); 
#line 107 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl strcoll(const char * _String1, const char * _String2); 
#line 113 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl _strcoll_l(const char * _String1, const char * _String2, _locale_t _Locale); 
#line 119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
char *__cdecl strcpy(char * _Dest, const char * _Source); 
#line 124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl strcpy_s(char (&_Destination)[_Size], const char *_Source) throw() { return strcpy_s(_Destination, _Size, _Source); } }
#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
char *__cdecl strcpy(char * _Destination, const char * _Source); 
#line 137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) size_t __cdecl strcspn(const char * _Str, const char * _Control); 
#line 148 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) __declspec(allocator) char *__cdecl _strdup(const char * _Source); 
#line 159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl _strerror(const char * _ErrorMessage); 
#line 164 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) errno_t __cdecl _strerror_s(char * _Buffer, size_t _SizeInBytes, const char * _ErrorMessage); 
#line 170 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _strerror_s(char (&_Buffer)[_Size], const char *_ErrorMessage) throw() { return _strerror_s(_Buffer, _Size, _ErrorMessage); } }
#line 178 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl strerror(int _ErrorMessage); 
#line 182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl strerror_s(char (&_Buffer)[_Size], int _ErrorMessage) throw() { return strerror_s(_Buffer, _Size, _ErrorMessage); } }
#line 189 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl _stricmp(const char * _String1, const char * _String2); 
#line 195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl _stricoll(const char * _String1, const char * _String2); 
#line 201 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl _stricoll_l(const char * _String1, const char * _String2, _locale_t _Locale); 
#line 208 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl _stricmp_l(const char * _String1, const char * _String2, _locale_t _Locale); 
#line 215 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
size_t __cdecl strlen(const char * _Str); 
#line 220 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) errno_t __cdecl _strlwr_s(char * _String, size_t _Size); 
#line 225 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _strlwr_s(char (&_String)[_Size]) throw() { return _strlwr_s(_String, _Size); } }
#line 230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl _strlwr(char * _String); 
#line 236 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) errno_t __cdecl _strlwr_s_l(char * _String, size_t _Size, _locale_t _Locale); 
#line 242 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _strlwr_s_l(char (&_String)[_Size], ::_locale_t _Locale) throw() { return _strlwr_s_l(_String, _Size, _Locale); } }
#line 248 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl _strlwr_l(char * _String, _locale_t _Locale); 
#line 255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl strncat(char * _Dest, const char * _Source, size_t _Count); 
#line 261 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl strncat_s(char (&_Destination)[_Size], const char *_Source, ::size_t _Count) throw() { return strncat_s(_Destination, _Size, _Source, _Count); } }
#line 268 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl strncat(char * _Destination, const char * _Source, size_t _Count); 
#line 277 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl strncmp(const char * _Str1, const char * _Str2, size_t _MaxCount); 
#line 284 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl _strnicmp(const char * _String1, const char * _String2, size_t _MaxCount); 
#line 291 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl _strnicmp_l(const char * _String1, const char * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 299 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl _strnicoll(const char * _String1, const char * _String2, size_t _MaxCount); 
#line 306 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl _strnicoll_l(const char * _String1, const char * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 314 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl _strncoll(const char * _String1, const char * _String2, size_t _MaxCount); 
#line 321 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl _strncoll_l(const char * _String1, const char * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 328 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) size_t __cdecl __strncnt(const char * _String, size_t _Count); 
#line 333 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl strncpy_s(char (&_Destination)[_Size], const char *_Source, ::size_t _Count) throw() { return strncpy_s(_Destination, _Size, _Source, _Count); } }
#line 340 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl strncpy(char * _Destination, const char * _Source, size_t _Count); 
#line 357 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) size_t __cdecl strnlen(const char * _String, size_t _MaxCount); 
#line 373 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
static __inline size_t __cdecl strnlen_s(const char *
#line 374 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
_String, size_t 
#line 375 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
_MaxCount) 
#line 377 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
{ 
#line 378 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
return (_String == (0)) ? 0 : strnlen(_String, _MaxCount); 
#line 379 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
} 
#line 383 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl _strnset(char * _Dest, int _Val, size_t _Count); 
#line 390 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) errno_t __cdecl _strnset_s(char * _String, size_t _SizeInBytes, int _Value, size_t _MaxCount); 
#line 397 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _strnset_s(char (&_Destination)[_Size], int _Value, ::size_t _Count) throw() { return _strnset_s(_Destination, _Size, _Value, _Count); } }
#line 404 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl _strnset(char * _Destination, int _Value, size_t _Count); 
#line 413 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) const char *__cdecl strpbrk(const char * _Str, const char * _Control); 
#line 418 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl _strrev(char * _Str); 
#line 423 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) errno_t __cdecl _strset_s(char * _Destination, size_t _DestinationSize, int _Value); 
#line 429 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _strset_s(char (&_Destination)[_Size], int _Value) throw() { return _strset_s(_Destination, _Size, _Value); } }
#line 435 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
char *__cdecl _strset(char * _Destination, int _Value); 
#line 441 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
char *__cdecl _strset(char * _Dest, int _Value); 
#line 447 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) size_t __cdecl strspn(const char * _Str, const char * _Control); 
#line 453 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl strtok(char * _String, const char * _Delimiter); 
#line 459 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) errno_t __cdecl _strupr_s(char * _String, size_t _Size); 
#line 464 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _strupr_s(char (&_String)[_Size]) throw() { return _strupr_s(_String, _Size); } }
#line 469 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl _strupr(char * _String); 
#line 475 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) errno_t __cdecl _strupr_s_l(char * _String, size_t _Size, _locale_t _Locale); 
#line 481 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _strupr_s_l(char (&_String)[_Size], ::_locale_t _Locale) throw() { return _strupr_s_l(_String, _Size, _Locale); } }
#line 487 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl _strupr_l(char * _String, _locale_t _Locale); 
#line 496 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) size_t __cdecl strxfrm(char * _Destination, const char * _Source, size_t _MaxCount); 
#line 504 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) size_t __cdecl _strxfrm_l(char * _Destination, const char * _Source, size_t _MaxCount, _locale_t _Locale); 
#line 514 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
extern "C++" {
#line 517 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
inline char *__cdecl strchr(char *const _String, const int _Ch) 
#line 518 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
{ 
#line 519 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
return const_cast< char *>(strchr(static_cast< const char *>(_String), _Ch)); 
#line 520 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
} 
#line 523 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
inline char *__cdecl strpbrk(char *const _String, const char *const _Control) 
#line 524 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
{ 
#line 525 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
return const_cast< char *>(strpbrk(static_cast< const char *>(_String), _Control)); 
#line 526 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
} 
#line 529 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
inline char *__cdecl strrchr(char *const _String, const int _Ch) 
#line 530 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
{ 
#line 531 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
return const_cast< char *>(strrchr(static_cast< const char *>(_String), _Ch)); 
#line 532 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
} 
#line 535 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
inline char *__cdecl strstr(char *const _String, const char *const _SubString) 
#line 536 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
{ 
#line 537 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
return const_cast< char *>(strstr(static_cast< const char *>(_String), _SubString)); 
#line 538 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
} 
#line 539 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
}
#line 552 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl strdup(const char * _String); 
#line 562 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl strcmpi(const char * _String1, const char * _String2); 
#line 568 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl stricmp(const char * _String1, const char * _String2); 
#line 574 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl strlwr(char * _String); 
#line 579 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl strnicmp(const char * _String1, const char * _String2, size_t _MaxCount); 
#line 586 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl strnset(char * _String, int _Value, size_t _MaxCount); 
#line 593 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl strrev(char * _String); 
#line 598 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
char *__cdecl strset(char * _String, int _Value); 
#line 603 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl strupr(char * _String); 
#line 611 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
}__pragma(pack ( pop )) 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
struct tm { 
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
int tm_sec; 
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
int tm_min; 
#line 26 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
int tm_hour; 
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
int tm_mday; 
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
int tm_mon; 
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
int tm_year; 
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
int tm_wday; 
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
int tm_yday; 
#line 32 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
int tm_isdst; 
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
}; 
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) __wchar_t *__cdecl _wasctime(const tm * _Tm); 
#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) errno_t __cdecl _wasctime_s(__wchar_t * _Buffer, size_t _SizeInWords, const tm * _Tm); 
#line 56 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wasctime_s(__wchar_t (&_Buffer)[_Size], const ::tm *_Time) throw() { return _wasctime_s(_Buffer, _Size, _Time); } }
#line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) size_t __cdecl wcsftime(__wchar_t * _Buffer, size_t _SizeInWords, const __wchar_t * _Format, const tm * _Tm); 
#line 74 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) size_t __cdecl _wcsftime_l(__wchar_t * _Buffer, size_t _SizeInWords, const __wchar_t * _Format, const tm * _Tm, _locale_t _Locale); 
#line 84 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) __wchar_t *__cdecl _wctime32(const __time32_t * _Time); 
#line 89 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) errno_t __cdecl _wctime32_s(__wchar_t * _Buffer, size_t _SizeInWords, const __time32_t * _Time); 
#line 95 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wctime32_s(__wchar_t (&_Buffer)[_Size], const ::__time32_t *_Time) throw() { return _wctime32_s(_Buffer, _Size, _Time); } }
#line 104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) __wchar_t *__cdecl _wctime64(const __time64_t * _Time); 
#line 109 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) errno_t __cdecl _wctime64_s(__wchar_t * _Buffer, size_t _SizeInWords, const __time64_t * _Time); 
#line 114 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wctime64_s(__wchar_t (&_Buffer)[_Size], const ::__time64_t *_Time) throw() { return _wctime64_s(_Buffer, _Size, _Time); } }
#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) errno_t __cdecl _wstrdate_s(__wchar_t * _Buffer, size_t _SizeInWords); 
#line 126 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wstrdate_s(__wchar_t (&_Buffer)[_Size]) throw() { return _wstrdate_s(_Buffer, _Size); } }
#line 131 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) __wchar_t *__cdecl _wstrdate(__wchar_t * _Buffer); 
#line 137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) errno_t __cdecl _wstrtime_s(__wchar_t * _Buffer, size_t _SizeInWords); 
#line 142 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wstrtime_s(__wchar_t (&_Buffer)[_Size]) throw() { return _wstrtime_s(_Buffer, _Size); } }
#line 147 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) __wchar_t *__cdecl _wstrtime(__wchar_t * _Buffer); 
#line 160 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
#pragma warning(push)
#pragma warning(disable: 4996)
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
static __inline __wchar_t *__cdecl _wctime(const time_t *const 
#line 186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
_Time) 
#line 187 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
{ 
#line 188 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
return _wctime64(_Time); 
#line 189 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
} 
#line 192 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
static __inline errno_t __cdecl _wctime_s(__wchar_t *const 
#line 193 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
_Buffer, const size_t 
#line 194 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
_SizeInWords, const time_t *const 
#line 195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
_Time) 
#line 197 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
{ 
#line 198 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
return _wctime64_s(_Buffer, _SizeInWords, _Time); 
#line 199 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
} 
#line 208 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
}
#line 203 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
#pragma warning(pop)
#line 208 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__pragma(pack ( pop )) 
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 23 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
typedef long clock_t; 
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
struct _timespec32 { 
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__time32_t tv_sec; 
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
long tv_nsec; 
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
}; 
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
struct _timespec64 { 
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__time64_t tv_sec; 
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
long tv_nsec; 
#line 35 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
}; 
#line 38 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
struct timespec { 
#line 40 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
time_t tv_sec; 
#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
long tv_nsec; 
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
}; 
#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) int *__cdecl __daylight(); 
#line 67 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) long *__cdecl __dstbias(); 
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) long *__cdecl __timezone(); 
#line 79 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) char **__cdecl __tzname(); 
#line 84 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) errno_t __cdecl _get_daylight(int * _Daylight); 
#line 89 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) errno_t __cdecl _get_dstbias(long * _DaylightSavingsBias); 
#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) errno_t __cdecl _get_timezone(long * _TimeZone); 
#line 99 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) errno_t __cdecl _get_tzname(size_t * _ReturnValue, char * _Buffer, size_t _SizeInBytes, int _Index); 
#line 116 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) char *__cdecl asctime(const tm * _Tm); 
#line 123 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) errno_t __cdecl asctime_s(char * _Buffer, size_t _SizeInBytes, const tm * _Tm); 
#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl asctime_s(char (&_Buffer)[_Size], const ::tm *_Time) throw() { return asctime_s(_Buffer, _Size, _Time); } }
#line 137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) clock_t __cdecl clock(); 
#line 142 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) char *__cdecl _ctime32(const __time32_t * _Time); 
#line 147 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) errno_t __cdecl _ctime32_s(char * _Buffer, size_t _SizeInBytes, const __time32_t * _Time); 
#line 153 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _ctime32_s(char (&_Buffer)[_Size], const ::__time32_t *_Time) throw() { return _ctime32_s(_Buffer, _Size, _Time); } }
#line 162 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) char *__cdecl _ctime64(const __time64_t * _Time); 
#line 167 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) errno_t __cdecl _ctime64_s(char * _Buffer, size_t _SizeInBytes, const __time64_t * _Time); 
#line 173 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _ctime64_s(char (&_Buffer)[_Size], const ::__time64_t *_Time) throw() { return _ctime64_s(_Buffer, _Size, _Time); } }
#line 180 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) double __cdecl _difftime32(__time32_t _Time1, __time32_t _Time2); 
#line 186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) double __cdecl _difftime64(__time64_t _Time1, __time64_t _Time2); 
#line 193 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) tm *__cdecl _gmtime32(const __time32_t * _Time); 
#line 198 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) errno_t __cdecl _gmtime32_s(tm * _Tm, const __time32_t * _Time); 
#line 205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) tm *__cdecl _gmtime64(const __time64_t * _Time); 
#line 210 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) errno_t __cdecl _gmtime64_s(tm * _Tm, const __time64_t * _Time); 
#line 217 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) tm *__cdecl _localtime32(const __time32_t * _Time); 
#line 222 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) errno_t __cdecl _localtime32_s(tm * _Tm, const __time32_t * _Time); 
#line 229 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) tm *__cdecl _localtime64(const __time64_t * _Time); 
#line 234 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) errno_t __cdecl _localtime64_s(tm * _Tm, const __time64_t * _Time); 
#line 240 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) __time32_t __cdecl _mkgmtime32(tm * _Tm); 
#line 245 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) __time64_t __cdecl _mkgmtime64(tm * _Tm); 
#line 250 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) __time32_t __cdecl _mktime32(tm * _Tm); 
#line 255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) __time64_t __cdecl _mktime64(tm * _Tm); 
#line 261 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) size_t __cdecl strftime(char * _Buffer, size_t _SizeInBytes, const char * _Format, const tm * _Tm); 
#line 270 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) size_t __cdecl _strftime_l(char * _Buffer, size_t _MaxSize, const char * _Format, const tm * _Tm, _locale_t _Locale); 
#line 279 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) errno_t __cdecl _strdate_s(char * _Buffer, size_t _SizeInBytes); 
#line 284 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _strdate_s(char (&_Buffer)[_Size]) throw() { return _strdate_s(_Buffer, _Size); } }
#line 289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) char *__cdecl _strdate(char * _Buffer); 
#line 295 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) errno_t __cdecl _strtime_s(char * _Buffer, size_t _SizeInBytes); 
#line 300 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _strtime_s(char (&_Buffer)[_Size]) throw() { return _strtime_s(_Buffer, _Size); } }
#line 305 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) char *__cdecl _strtime(char * _Buffer); 
#line 310 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) __time32_t __cdecl _time32(__time32_t * _Time); 
#line 314 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) __time64_t __cdecl _time64(__time64_t * _Time); 
#line 320 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) int __cdecl _timespec32_get(_timespec32 * _Ts, int _Base); 
#line 327 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) int __cdecl _timespec64_get(_timespec64 * _Ts, int _Base); 
#line 341 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) void __cdecl _tzset(); 
#line 344 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using GetLocalTime in" "stead. See online help for details.")) 
#line 345 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) unsigned __cdecl _getsystime(tm * _Tm); 
#line 349 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using SetLocalTime in" "stead. See online help for details.")) 
#line 350 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) unsigned __cdecl _setsystime(tm * _Tm, unsigned _Milliseconds); 
#line 475 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
static __inline char *__cdecl ctime(const time_t *const 
#line 476 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Time) 
#line 478 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
{ 
#pragma warning(push)
#pragma warning(disable: 4996)
return _ctime64(_Time); 
#pragma warning(pop)
} 
#line 486 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
static __inline double __cdecl difftime(const time_t 
#line 487 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Time1, const time_t 
#line 488 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Time2) 
#line 490 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
{ 
#line 491 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
return _difftime64(_Time1, _Time2); 
#line 492 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
} 
#line 495 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
static __inline tm *__cdecl gmtime(const time_t *const 
#line 496 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Time) 
#line 497 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
{ 
#pragma warning(push)
#pragma warning(disable: 4996)
return _gmtime64(_Time); 
#pragma warning(pop)
} 
#line 505 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
static __inline tm *__cdecl localtime(const time_t *const 
#line 506 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Time) 
#line 508 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
{ 
#pragma warning(push)
#pragma warning(disable: 4996)
return _localtime64(_Time); 
#pragma warning(pop)
} 
#line 516 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
static __inline time_t __cdecl _mkgmtime(tm *const 
#line 517 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Tm) 
#line 519 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
{ 
#line 520 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
return _mkgmtime64(_Tm); 
#line 521 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
} 
#line 524 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
static __inline time_t __cdecl mktime(tm *const 
#line 525 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Tm) 
#line 527 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
{ 
#line 528 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
return _mktime64(_Tm); 
#line 529 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
} 
#line 531 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
static __inline time_t __cdecl time(time_t *const 
#line 532 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Time) 
#line 534 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
{ 
#line 535 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
return _time64(_Time); 
#line 536 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
} 
#line 539 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
static __inline int __cdecl timespec_get(timespec *const 
#line 540 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Ts, const int 
#line 541 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Base) 
#line 543 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
{ 
#line 544 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
return _timespec64_get((_timespec64 *)_Ts, _Base); 
#line 545 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
} 
#line 549 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
static __inline errno_t __cdecl ctime_s(char *const 
#line 550 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Buffer, const size_t 
#line 551 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_SizeInBytes, const time_t *const 
#line 552 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Time) 
#line 554 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
{ 
#line 555 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
return _ctime64_s(_Buffer, _SizeInBytes, _Time); 
#line 556 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
} 
#line 559 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
static __inline errno_t __cdecl gmtime_s(tm *const 
#line 560 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Tm, const time_t *const 
#line 561 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Time) 
#line 563 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
{ 
#line 564 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
return _gmtime64_s(_Tm, _Time); 
#line 565 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
} 
#line 568 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
static __inline errno_t __cdecl localtime_s(tm *const 
#line 569 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Tm, const time_t *const 
#line 570 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Time) 
#line 572 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
{ 
#line 573 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
return _localtime64_s(_Tm, _Time); 
#line 574 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
} 
#line 593 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) void __cdecl tzset(); 
#line 600 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
}__pragma(pack ( pop )) 
#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"
extern "C" {
#line 71 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"
__declspec(dllimport) extern clock_t __cdecl clock(); 
#line 72 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"
extern void *__cdecl memset(void *, int, size_t); 
#line 73 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"
extern void *__cdecl memcpy(void *, const void *, size_t); 
#line 75 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"
}
#line 93 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern "C" {
#line 164 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern int __cdecl abs(int); 
#line 165 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern long __cdecl labs(long); 
#line 166 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __int64 llabs(__int64); 
#line 216 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl fabs(double x); 
#line 257 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __inline float fabsf(float x); 
#line 261 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline int min(int, int); 
#line 263 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline unsigned umin(unsigned, unsigned); 
#line 264 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline __int64 llmin(__int64, __int64); 
#line 265 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline unsigned __int64 ullmin(unsigned __int64, unsigned __int64); 
#line 288 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl fminf(float x, float y); 
#line 308 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl fmin(double x, double y); 
#line 313 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline int max(int, int); 
#line 315 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline unsigned umax(unsigned, unsigned); 
#line 316 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline __int64 llmax(__int64, __int64); 
#line 317 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline unsigned __int64 ullmax(unsigned __int64, unsigned __int64); 
#line 340 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl fmaxf(float x, float y); 
#line 360 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl fmax(double, double); 
#line 402 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl sin(double x); 
#line 435 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl cos(double x); 
#line 454 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern void sincos(double x, double * sptr, double * cptr); 
#line 470 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern void sincosf(float x, float * sptr, float * cptr); 
#line 515 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl tan(double x); 
#line 584 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl sqrt(double x); 
#line 656 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double rsqrt(double x); 
#line 726 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float rsqrtf(float x); 
#line 784 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl log2(double x); 
#line 809 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl exp2(double x); 
#line 834 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl exp2f(float x); 
#line 859 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double exp10(double x); 
#line 882 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float exp10f(float x); 
#line 930 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl expm1(double x); 
#line 975 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl expm1f(float x); 
#line 1030 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl log2f(float x); 
#line 1082 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl log10(double x); 
#line 1153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl log(double x); 
#line 1249 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl log1p(double x); 
#line 1346 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl log1pf(float x); 
#line 1419 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl floor(double x); 
#line 1458 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl exp(double x); 
#line 1489 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl cosh(double x); 
#line 1519 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl sinh(double x); 
#line 1549 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl tanh(double x); 
#line 1586 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl acosh(double x); 
#line 1624 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl acoshf(float x); 
#line 1640 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl asinh(double x); 
#line 1656 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl asinhf(float x); 
#line 1710 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl atanh(double x); 
#line 1764 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl atanhf(float x); 
#line 1821 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl ldexp(double x, int exp); 
#line 1877 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __inline float ldexpf(float x, int exp); 
#line 1931 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl logb(double x); 
#line 1986 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl logbf(float x); 
#line 2016 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern int __cdecl ilogb(double x); 
#line 2046 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern int __cdecl ilogbf(float x); 
#line 2122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl scalbn(double x, int n); 
#line 2198 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl scalbnf(float x, int n); 
#line 2274 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl scalbln(double x, long n); 
#line 2350 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl scalblnf(float x, long n); 
#line 2426 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl frexp(double x, int * nptr); 
#line 2501 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __inline float frexpf(float x, int * nptr); 
#line 2517 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl round(double x); 
#line 2534 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl roundf(float x); 
#line 2552 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern long __cdecl lround(double x); 
#line 2570 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern long __cdecl lroundf(float x); 
#line 2588 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern __int64 __cdecl llround(double x); 
#line 2606 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern __int64 __cdecl llroundf(float x); 
#line 2658 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl rintf(float x); 
#line 2674 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern long __cdecl lrint(double x); 
#line 2690 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern long __cdecl lrintf(float x); 
#line 2706 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern __int64 __cdecl llrint(double x); 
#line 2722 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern __int64 __cdecl llrintf(float x); 
#line 2775 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl nearbyint(double x); 
#line 2828 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl nearbyintf(float x); 
#line 2888 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl ceil(double x); 
#line 2902 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl trunc(double x); 
#line 2917 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl truncf(float x); 
#line 2943 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl fdim(double x, double y); 
#line 2969 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl fdimf(float x, float y); 
#line 3003 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl atan2(double y, double x); 
#line 3034 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl atan(double x); 
#line 3057 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl acos(double x); 
#line 3089 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl asin(double x); 
#line 3132 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl hypot(double x, double y); 
#line 3187 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double rhypot(double x, double y); 
#line 3231 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static __inline float __cdecl hypotf(float x, float y); 
#line 3285 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float rhypotf(float x, float y); 
#line 3332 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl norm3d(double a, double b, double c); 
#line 3383 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double rnorm3d(double a, double b, double c); 
#line 3432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl norm4d(double a, double b, double c, double d); 
#line 3488 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double rnorm4d(double a, double b, double c, double d); 
#line 3533 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double norm(int dim, const double * t); 
#line 3584 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double rnorm(int dim, const double * t); 
#line 3636 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float rnormf(int dim, const float * a); 
#line 3680 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float normf(int dim, const float * a); 
#line 3725 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float norm3df(float a, float b, float c); 
#line 3776 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float rnorm3df(float a, float b, float c); 
#line 3825 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float norm4df(float a, float b, float c, float d); 
#line 3881 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float rnorm4df(float a, float b, float c, float d); 
#line 3967 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl cbrt(double x); 
#line 4053 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl cbrtf(float x); 
#line 4106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double rcbrt(double x); 
#line 4156 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float rcbrtf(float x); 
#line 4216 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double sinpi(double x); 
#line 4276 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float sinpif(float x); 
#line 4328 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double cospi(double x); 
#line 4380 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float cospif(float x); 
#line 4410 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern void sincospi(double x, double * sptr, double * cptr); 
#line 4440 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern void sincospif(float x, float * sptr, float * cptr); 
#line 4752 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl pow(double x, double y); 
#line 4808 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl modf(double x, double * iptr); 
#line 4867 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl fmod(double x, double y); 
#line 4955 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl remainder(double x, double y); 
#line 5045 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl remainderf(float x, float y); 
#line 5099 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl remquo(double x, double y, int * quo); 
#line 5153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl remquof(float x, float y, int * quo); 
#line 5192 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl j0(double x); 
#line 5234 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float j0f(float x); 
#line 5295 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl j1(double x); 
#line 5356 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float j1f(float x); 
#line 5399 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl jn(int n, double x); 
#line 5442 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float jnf(int n, float x); 
#line 5494 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl y0(double x); 
#line 5546 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float y0f(float x); 
#line 5598 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl y1(double x); 
#line 5650 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float y1f(float x); 
#line 5703 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl yn(int n, double x); 
#line 5756 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float ynf(int n, float x); 
#line 5783 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl cyl_bessel_i0(double x); 
#line 5809 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float cyl_bessel_i0f(float x); 
#line 5836 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl cyl_bessel_i1(double x); 
#line 5862 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float cyl_bessel_i1f(float x); 
#line 5947 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl erf(double x); 
#line 6029 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl erff(float x); 
#line 6091 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double erfinv(double y); 
#line 6148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float erfinvf(float y); 
#line 6189 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl erfc(double x); 
#line 6227 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl erfcf(float x); 
#line 6355 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl lgamma(double x); 
#line 6416 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double erfcinv(double y); 
#line 6472 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float erfcinvf(float y); 
#line 6530 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double normcdfinv(double y); 
#line 6588 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float normcdfinvf(float y); 
#line 6631 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double normcdf(double y); 
#line 6674 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float normcdff(float y); 
#line 6749 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double erfcx(double x); 
#line 6824 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float erfcxf(float x); 
#line 6960 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl lgammaf(float x); 
#line 7069 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl tgamma(double x); 
#line 7178 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl tgammaf(float x); 
#line 7191 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl copysign(double x, double y); 
#line 7204 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl copysignf(float x, float y); 
#line 7241 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl nextafter(double x, double y); 
#line 7278 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl nextafterf(float x, float y); 
#line 7294 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl nan(const char * tagp); 
#line 7310 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl nanf(const char * tagp); 
#line 7315 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern int __isinff(float); 
#line 7316 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern int __isnanf(float); 
#line 7326 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern int __finite(double); 
#line 7327 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern int __finitef(float); 
#line 7328 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern int __signbit(double); 
#line 7329 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern int __isnan(double); 
#line 7330 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern int __isinf(double); 
#line 7333 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern int __signbitf(float); 
#line 7494 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl fma(double x, double y, double z); 
#line 7652 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl fmaf(float x, float y, float z); 
#line 7661 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern int __signbitl(long double); 
#line 7667 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern int __finitel(long double); 
#line 7668 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern int __isinfl(long double); 
#line 7669 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern int __isnanl(long double); 
#line 7673 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl acosf(float); 
#line 7674 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl asinf(float); 
#line 7675 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl atanf(float); 
#line 7676 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl atan2f(float, float); 
#line 7677 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl cosf(float); 
#line 7678 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl sinf(float); 
#line 7679 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl tanf(float); 
#line 7680 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl coshf(float); 
#line 7681 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl sinhf(float); 
#line 7682 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl tanhf(float); 
#line 7683 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl expf(float); 
#line 7684 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl logf(float); 
#line 7685 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl log10f(float); 
#line 7686 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl modff(float, float *); 
#line 7687 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl powf(float, float); 
#line 7688 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl sqrtf(float); 
#line 7689 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl ceilf(float); 
#line 7690 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl floorf(float); 
#line 7691 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl fmodf(float, float); 
#line 8823 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
}
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 17 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
#pragma warning(push)
#pragma warning(disable:4738)
#pragma warning(disable:4820)
#line 26 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
struct _exception { 
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
int type; 
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
char *name; 
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double arg1; 
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double arg2; 
#line 32 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double retval; 
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
}; 
#line 40 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
struct _complex { 
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double x, y; 
#line 43 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
}; 
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef float float_t; 
#line 53 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef double double_t; 
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
extern const double _HUGE; 
#line 159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
void __cdecl _fperrraise(int _Except); 
#line 161 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _dclass(double _X); 
#line 162 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _ldclass(long double _X); 
#line 163 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _fdclass(float _X); 
#line 165 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) int __cdecl _dsign(double _X); 
#line 166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) int __cdecl _ldsign(long double _X); 
#line 167 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) int __cdecl _fdsign(float _X); 
#line 169 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) int __cdecl _dpcomp(double _X, double _Y); 
#line 170 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) int __cdecl _ldpcomp(long double _X, long double _Y); 
#line 171 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) int __cdecl _fdpcomp(float _X, float _Y); 
#line 173 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _dtest(double * _Px); 
#line 174 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _ldtest(long double * _Px); 
#line 175 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _fdtest(float * _Px); 
#line 177 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _d_int(double * _Px, short _Xexp); 
#line 178 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _ld_int(long double * _Px, short _Xexp); 
#line 179 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _fd_int(float * _Px, short _Xexp); 
#line 181 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _dscale(double * _Px, long _Lexp); 
#line 182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _ldscale(long double * _Px, long _Lexp); 
#line 183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _fdscale(float * _Px, long _Lexp); 
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _dunscale(short * _Pex, double * _Px); 
#line 186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _ldunscale(short * _Pex, long double * _Px); 
#line 187 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _fdunscale(short * _Pex, float * _Px); 
#line 189 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _dexp(double * _Px, double _Y, long _Eoff); 
#line 190 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _ldexp(long double * _Px, long double _Y, long _Eoff); 
#line 191 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _fdexp(float * _Px, float _Y, long _Eoff); 
#line 193 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _dnorm(unsigned short * _Ps); 
#line 194 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _fdnorm(unsigned short * _Ps); 
#line 196 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl _dpoly(double _X, const double * _Tab, int _N); 
#line 197 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl _ldpoly(long double _X, const long double * _Tab, int _N); 
#line 198 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl _fdpoly(float _X, const float * _Tab, int _N); 
#line 200 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl _dlog(double _X, int _Baseflag); 
#line 201 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl _ldlog(long double _X, int _Baseflag); 
#line 202 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl _fdlog(float _X, int _Baseflag); 
#line 204 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl _dsin(double _X, unsigned _Qoff); 
#line 205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl _ldsin(long double _X, unsigned _Qoff); 
#line 206 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl _fdsin(float _X, unsigned _Qoff); 
#line 213 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef 
#line 210 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
union { 
#line 211 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
unsigned short _Sh[4]; 
#line 212 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double _Val; 
#line 213 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} _double_val; 
#line 220 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef 
#line 217 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
union { 
#line 218 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
unsigned short _Sh[2]; 
#line 219 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
float _Val; 
#line 220 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} _float_val; 
#line 227 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef 
#line 224 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
union { 
#line 225 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
unsigned short _Sh[4]; 
#line 226 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
long double _Val; 
#line 227 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} _ldouble_val; 
#line 235 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef 
#line 230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
union { 
#line 231 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
unsigned short _Word[4]; 
#line 232 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
float _Float; 
#line 233 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double _Double; 
#line 234 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
long double _Long_double; 
#line 235 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} _float_const; 
#line 237 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
extern const _float_const _Denorm_C, _Inf_C, _Nan_C, _Snan_C, _Hugeval_C; 
#line 238 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
extern const _float_const _FDenorm_C, _FInf_C, _FNan_C, _FSnan_C; 
#line 239 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
extern const _float_const _LDenorm_C, _LInf_C, _LNan_C, _LSnan_C; 
#line 241 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
extern const _float_const _Eps_C, _Rteps_C; 
#line 242 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
extern const _float_const _FEps_C, _FRteps_C; 
#line 243 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
extern const _float_const _LEps_C, _LRteps_C; 
#line 245 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
extern const double _Zero_C, _Xbig_C; 
#line 246 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
extern const float _FZero_C, _FXbig_C; 
#line 247 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
extern const long double _LZero_C, _LXbig_C; 
#line 276 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
extern "C++" {
#line 278 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
inline int fpclassify(float _X) throw() 
#line 279 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 280 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _fdtest(&_X); 
#line 281 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 283 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
inline int fpclassify(double _X) throw() 
#line 284 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 285 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _dtest(&_X); 
#line 286 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 288 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
inline int fpclassify(long double _X) throw() 
#line 289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 290 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _ldtest(&_X); 
#line 291 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 293 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
inline bool signbit(float _X) throw() 
#line 294 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 295 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _fdsign(_X) != 0; 
#line 296 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 298 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
inline bool signbit(double _X) throw() 
#line 299 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 300 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _dsign(_X) != 0; 
#line 301 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 303 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
inline bool signbit(long double _X) throw() 
#line 304 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 305 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _ldsign(_X) != 0; 
#line 306 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 308 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
inline int _fpcomp(float _X, float _Y) throw() 
#line 309 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 310 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _fdpcomp(_X, _Y); 
#line 311 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 313 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
inline int _fpcomp(double _X, double _Y) throw() 
#line 314 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 315 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _dpcomp(_X, _Y); 
#line 316 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 318 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
inline int _fpcomp(long double _X, long double _Y) throw() 
#line 319 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 320 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _ldpcomp(_X, _Y); 
#line 321 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 323 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template< class _Trc, class _Tre> struct _Combined_type { 
#line 325 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef float _Type; 
#line 326 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
}; 
#line 328 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template<> struct _Combined_type< float, double>  { 
#line 330 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef double _Type; 
#line 331 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
}; 
#line 333 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template<> struct _Combined_type< float, long double>  { 
#line 335 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef long double _Type; 
#line 336 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
}; 
#line 338 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template< class _Ty, class _T2> struct _Real_widened { 
#line 340 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef long double _Type; 
#line 341 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
}; 
#line 343 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template<> struct _Real_widened< float, float>  { 
#line 345 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef float _Type; 
#line 346 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
}; 
#line 348 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template<> struct _Real_widened< float, double>  { 
#line 350 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef double _Type; 
#line 351 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
}; 
#line 353 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template<> struct _Real_widened< double, float>  { 
#line 355 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef double _Type; 
#line 356 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
}; 
#line 358 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template<> struct _Real_widened< double, double>  { 
#line 360 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef double _Type; 
#line 361 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
}; 
#line 363 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template< class _Ty> struct _Real_type { 
#line 365 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef double _Type; 
#line 366 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
}; 
#line 368 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template<> struct _Real_type< float>  { 
#line 370 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef float _Type; 
#line 371 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
}; 
#line 373 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template<> struct _Real_type< long double>  { 
#line 375 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef long double _Type; 
#line 376 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
}; 
#line 378 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template< class _T1, class _T2> inline int 
#line 379 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
_fpcomp(_T1 _X, _T2 _Y) throw() 
#line 380 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 384 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef typename _Combined_type< float, typename _Real_widened< typename _Real_type< _T1> ::_Type, typename _Real_type< _T2> ::_Type> ::_Type> ::_Type _Tw; 
#line 385 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _fpcomp((_Tw)_X, (_Tw)_Y); 
#line 386 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 388 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template< class _Ty> inline bool 
#line 389 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
isfinite(_Ty _X) throw() 
#line 390 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 391 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return fpclassify(_X) <= 0; 
#line 392 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 394 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template< class _Ty> inline bool 
#line 395 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
isinf(_Ty _X) throw() 
#line 396 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 397 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return fpclassify(_X) == 1; 
#line 398 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 400 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template< class _Ty> inline bool 
#line 401 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
isnan(_Ty _X) throw() 
#line 402 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 403 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return fpclassify(_X) == 2; 
#line 404 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 406 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template< class _Ty> inline bool 
#line 407 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
isnormal(_Ty _X) throw() 
#line 408 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 409 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return fpclassify(_X) == (-1); 
#line 410 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 412 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template< class _Ty1, class _Ty2> inline bool 
#line 413 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
isgreater(_Ty1 _X, _Ty2 _Y) throw() 
#line 414 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 415 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return (_fpcomp(_X, _Y) & 4) != 0; 
#line 416 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 418 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template< class _Ty1, class _Ty2> inline bool 
#line 419 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
isgreaterequal(_Ty1 _X, _Ty2 _Y) throw() 
#line 420 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 421 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return (_fpcomp(_X, _Y) & (2 | 4)) != 0; 
#line 422 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 424 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template< class _Ty1, class _Ty2> inline bool 
#line 425 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
isless(_Ty1 _X, _Ty2 _Y) throw() 
#line 426 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 427 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return (_fpcomp(_X, _Y) & 1) != 0; 
#line 428 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 430 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template< class _Ty1, class _Ty2> inline bool 
#line 431 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
islessequal(_Ty1 _X, _Ty2 _Y) throw() 
#line 432 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 433 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return (_fpcomp(_X, _Y) & (1 | 2)) != 0; 
#line 434 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 436 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template< class _Ty1, class _Ty2> inline bool 
#line 437 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
islessgreater(_Ty1 _X, _Ty2 _Y) throw() 
#line 438 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 439 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return (_fpcomp(_X, _Y) & (1 | 4)) != 0; 
#line 440 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 442 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template< class _Ty1, class _Ty2> inline bool 
#line 443 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
isunordered(_Ty1 _X, _Ty2 _Y) throw() 
#line 444 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 445 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _fpcomp(_X, _Y) == 0; 
#line 446 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 447 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
}
#line 454 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
int __cdecl abs(int _X); 
#line 455 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
long __cdecl labs(long _X); 
#line 456 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__int64 __cdecl llabs(__int64 _X); 
#line 458 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl acos(double _X); 
#line 459 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl asin(double _X); 
#line 460 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl atan(double _X); 
#line 461 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl atan2(double _Y, double _X); 
#line 463 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl cos(double _X); 
#line 464 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl cosh(double _X); 
#line 465 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl exp(double _X); 
#line 466 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl fabs(double _X); 
#line 467 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl fmod(double _X, double _Y); 
#line 468 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl log(double _X); 
#line 469 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl log10(double _X); 
#line 470 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl pow(double _X, double _Y); 
#line 471 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl sin(double _X); 
#line 472 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl sinh(double _X); 
#line 473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl sqrt(double _X); 
#line 474 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl tan(double _X); 
#line 475 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl tanh(double _X); 
#line 477 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl acosh(double _X); 
#line 478 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl asinh(double _X); 
#line 479 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl atanh(double _X); 
#line 480 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl atof(const char * _String); 
#line 481 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl _atof_l(const char * _String, _locale_t _Locale); 
#line 482 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl _cabs(_complex _Complex_value); 
#line 483 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl cbrt(double _X); 
#line 484 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl ceil(double _X); 
#line 485 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl _chgsign(double _X); 
#line 486 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl copysign(double _Number, double _Sign); 
#line 487 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl _copysign(double _Number, double _Sign); 
#line 488 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl erf(double _X); 
#line 489 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl erfc(double _X); 
#line 490 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl exp2(double _X); 
#line 491 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl expm1(double _X); 
#line 492 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl fdim(double _X, double _Y); 
#line 493 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl floor(double _X); 
#line 494 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl fma(double _X, double _Y, double _Z); 
#line 495 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl fmax(double _X, double _Y); 
#line 496 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl fmin(double _X, double _Y); 
#line 497 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl frexp(double _X, int * _Y); 
#line 498 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl hypot(double _X, double _Y); 
#line 499 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl _hypot(double _X, double _Y); 
#line 500 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) int __cdecl ilogb(double _X); 
#line 501 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl ldexp(double _X, int _Y); 
#line 502 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl lgamma(double _X); 
#line 503 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) __int64 __cdecl llrint(double _X); 
#line 504 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) __int64 __cdecl llround(double _X); 
#line 505 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl log1p(double _X); 
#line 506 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl log2(double _X); 
#line 507 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl logb(double _X); 
#line 508 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long __cdecl lrint(double _X); 
#line 509 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long __cdecl lround(double _X); 
#line 511 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
int __cdecl _matherr(_exception * _Except); 
#line 513 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl modf(double _X, double * _Y); 
#line 514 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl nan(const char *); 
#line 515 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl nearbyint(double _X); 
#line 516 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl nextafter(double _X, double _Y); 
#line 517 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl nexttoward(double _X, long double _Y); 
#line 518 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl remainder(double _X, double _Y); 
#line 519 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl remquo(double _X, double _Y, int * _Z); 
#line 520 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl rint(double _X); 
#line 521 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl round(double _X); 
#line 522 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl scalbln(double _X, long _Y); 
#line 523 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl scalbn(double _X, int _Y); 
#line 524 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl tgamma(double _X); 
#line 525 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl trunc(double _X); 
#line 526 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl _j0(double _X); 
#line 527 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl _j1(double _X); 
#line 528 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl _jn(int _X, double _Y); 
#line 529 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl _y0(double _X); 
#line 530 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl _y1(double _X); 
#line 531 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl _yn(int _X, double _Y); 
#line 533 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl acoshf(float _X); 
#line 534 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl asinhf(float _X); 
#line 535 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl atanhf(float _X); 
#line 536 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl cbrtf(float _X); 
#line 537 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl _chgsignf(float _X); 
#line 538 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl copysignf(float _Number, float _Sign); 
#line 539 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl _copysignf(float _Number, float _Sign); 
#line 540 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl erff(float _X); 
#line 541 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl erfcf(float _X); 
#line 542 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl expm1f(float _X); 
#line 543 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl exp2f(float _X); 
#line 544 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl fdimf(float _X, float _Y); 
#line 545 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl fmaf(float _X, float _Y, float _Z); 
#line 546 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl fmaxf(float _X, float _Y); 
#line 547 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl fminf(float _X, float _Y); 
#line 548 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl _hypotf(float _X, float _Y); 
#line 549 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) int __cdecl ilogbf(float _X); 
#line 550 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl lgammaf(float _X); 
#line 551 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) __int64 __cdecl llrintf(float _X); 
#line 552 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) __int64 __cdecl llroundf(float _X); 
#line 553 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl log1pf(float _X); 
#line 554 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl log2f(float _X); 
#line 555 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl logbf(float _X); 
#line 556 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long __cdecl lrintf(float _X); 
#line 557 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long __cdecl lroundf(float _X); 
#line 558 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl nanf(const char *); 
#line 559 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl nearbyintf(float _X); 
#line 560 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl nextafterf(float _X, float _Y); 
#line 561 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl nexttowardf(float _X, long double _Y); 
#line 562 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl remainderf(float _X, float _Y); 
#line 563 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl remquof(float _X, float _Y, int * _Z); 
#line 564 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl rintf(float _X); 
#line 565 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl roundf(float _X); 
#line 566 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl scalblnf(float _X, long _Y); 
#line 567 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl scalbnf(float _X, int _Y); 
#line 568 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl tgammaf(float _X); 
#line 569 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl truncf(float _X); 
#line 577 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl _logbf(float _X); 
#line 578 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl _nextafterf(float _X, float _Y); 
#line 579 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) int __cdecl _finitef(float _X); 
#line 580 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) int __cdecl _isnanf(float _X); 
#line 581 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) int __cdecl _fpclassf(float _X); 
#line 583 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) int __cdecl _set_FMA3_enable(int _Flag); 
#line 584 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) int __cdecl _get_FMA3_enable(); 
#line 597 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl acosf(float _X); 
#line 598 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl asinf(float _X); 
#line 599 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl atan2f(float _Y, float _X); 
#line 600 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl atanf(float _X); 
#line 601 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl ceilf(float _X); 
#line 602 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl cosf(float _X); 
#line 603 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl coshf(float _X); 
#line 604 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl expf(float _X); 
#line 656 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline float __cdecl fabsf(float _X) 
#line 657 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 658 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return (float)fabs(_X); 
#line 659 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 665 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl floorf(float _X); 
#line 666 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl fmodf(float _X, float _Y); 
#line 682 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline float __cdecl frexpf(float _X, int *_Y) 
#line 683 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 684 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return (float)frexp(_X, _Y); 
#line 685 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 687 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline float __cdecl hypotf(float _X, float _Y) 
#line 688 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 689 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _hypotf(_X, _Y); 
#line 690 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 692 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline float __cdecl ldexpf(float _X, int _Y) 
#line 693 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 694 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return (float)ldexp(_X, _Y); 
#line 695 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 699 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl log10f(float _X); 
#line 700 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl logf(float _X); 
#line 701 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl modff(float _X, float * _Y); 
#line 702 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl powf(float _X, float _Y); 
#line 703 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl sinf(float _X); 
#line 704 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl sinhf(float _X); 
#line 705 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl sqrtf(float _X); 
#line 706 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl tanf(float _X); 
#line 707 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl tanhf(float _X); 
#line 761 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl acoshl(long double _X); 
#line 763 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl acosl(long double _X) 
#line 764 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 765 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return acos((double)_X); 
#line 766 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 768 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl asinhl(long double _X); 
#line 770 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl asinl(long double _X) 
#line 771 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 772 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return asin((double)_X); 
#line 773 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 775 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl atan2l(long double _Y, long double _X) 
#line 776 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 777 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return atan2((double)_Y, (double)_X); 
#line 778 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 780 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl atanhl(long double _X); 
#line 782 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl atanl(long double _X) 
#line 783 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 784 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return atan((double)_X); 
#line 785 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 787 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl cbrtl(long double _X); 
#line 789 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl ceill(long double _X) 
#line 790 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 791 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return ceil((double)_X); 
#line 792 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 794 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl _chgsignl(long double _X) 
#line 795 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 796 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _chgsign((double)_X); 
#line 797 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 799 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl copysignl(long double _Number, long double _Sign); 
#line 801 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl _copysignl(long double _Number, long double _Sign) 
#line 802 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 803 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _copysign((double)_Number, (double)_Sign); 
#line 804 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 806 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl coshl(long double _X) 
#line 807 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 808 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return cosh((double)_X); 
#line 809 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 811 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl cosl(long double _X) 
#line 812 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 813 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return cos((double)_X); 
#line 814 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 816 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl erfl(long double _X); 
#line 817 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl erfcl(long double _X); 
#line 819 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl expl(long double _X) 
#line 820 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 821 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return exp((double)_X); 
#line 822 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 824 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl exp2l(long double _X); 
#line 825 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl expm1l(long double _X); 
#line 827 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl fabsl(long double _X) 
#line 828 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 829 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return fabs((double)_X); 
#line 830 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 832 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl fdiml(long double _X, long double _Y); 
#line 834 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl floorl(long double _X) 
#line 835 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 836 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return floor((double)_X); 
#line 837 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 839 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl fmal(long double _X, long double _Y, long double _Z); 
#line 840 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl fmaxl(long double _X, long double _Y); 
#line 841 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl fminl(long double _X, long double _Y); 
#line 843 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl fmodl(long double _X, long double _Y) 
#line 844 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 845 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return fmod((double)_X, (double)_Y); 
#line 846 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 848 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl frexpl(long double _X, int *_Y) 
#line 849 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 850 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return frexp((double)_X, _Y); 
#line 851 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 853 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) int __cdecl ilogbl(long double _X); 
#line 855 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl _hypotl(long double _X, long double _Y) 
#line 856 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 857 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _hypot((double)_X, (double)_Y); 
#line 858 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 860 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl hypotl(long double _X, long double _Y) 
#line 861 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 862 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _hypot((double)_X, (double)_Y); 
#line 863 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 865 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl ldexpl(long double _X, int _Y) 
#line 866 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 867 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return ldexp((double)_X, _Y); 
#line 868 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 870 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl lgammal(long double _X); 
#line 871 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) __int64 __cdecl llrintl(long double _X); 
#line 872 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) __int64 __cdecl llroundl(long double _X); 
#line 874 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl logl(long double _X) 
#line 875 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 876 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return log((double)_X); 
#line 877 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 879 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl log10l(long double _X) 
#line 880 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 881 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return log10((double)_X); 
#line 882 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 884 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl log1pl(long double _X); 
#line 885 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl log2l(long double _X); 
#line 886 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl logbl(long double _X); 
#line 887 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long __cdecl lrintl(long double _X); 
#line 888 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long __cdecl lroundl(long double _X); 
#line 890 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl modfl(long double _X, long double *_Y) 
#line 891 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 892 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double _F, _I; 
#line 893 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
_F = modf((double)_X, &_I); 
#line 894 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
(*_Y) = _I; 
#line 895 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _F; 
#line 896 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 898 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl nanl(const char *); 
#line 899 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl nearbyintl(long double _X); 
#line 900 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl nextafterl(long double _X, long double _Y); 
#line 901 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl nexttowardl(long double _X, long double _Y); 
#line 903 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl powl(long double _X, long double _Y) 
#line 904 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 905 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return pow((double)_X, (double)_Y); 
#line 906 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 908 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl remainderl(long double _X, long double _Y); 
#line 909 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl remquol(long double _X, long double _Y, int * _Z); 
#line 910 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl rintl(long double _X); 
#line 911 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl roundl(long double _X); 
#line 912 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl scalblnl(long double _X, long _Y); 
#line 913 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl scalbnl(long double _X, int _Y); 
#line 915 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl sinhl(long double _X) 
#line 916 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 917 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return sinh((double)_X); 
#line 918 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 920 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl sinl(long double _X) 
#line 921 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 922 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return sin((double)_X); 
#line 923 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 925 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl sqrtl(long double _X) 
#line 926 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 927 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return sqrt((double)_X); 
#line 928 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 930 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl tanhl(long double _X) 
#line 931 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 932 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return tanh((double)_X); 
#line 933 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 935 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl tanl(long double _X) 
#line 936 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 937 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return tan((double)_X); 
#line 938 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 940 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl tgammal(long double _X); 
#line 941 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl truncl(long double _X); 
#line 963 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
extern double HUGE; 
#line 968 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl j0(double _X); 
#line 969 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl j1(double _X); 
#line 970 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl jn(int _X, double _Y); 
#line 971 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl y0(double _X); 
#line 972 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl y1(double _X); 
#line 973 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl yn(int _X, double _Y); 
#line 983 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
}
#line 979 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
#pragma warning(pop)
#line 983 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__pragma(pack ( pop )) 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 54 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
_calloc_base(size_t _Count, size_t _Size); 
#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 62 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
calloc(size_t _Count, size_t _Size); 
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) int __cdecl _callnewh(size_t _Size); 
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) __declspec(allocator) void *__cdecl 
#line 74 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
_expand(void * _Block, size_t _Size); 
#line 79 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) void __cdecl 
#line 80 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
_free_base(void * _Block); 
#line 84 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) void __cdecl 
#line 85 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
free(void * _Block); 
#line 90 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 91 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
_malloc_base(size_t _Size); 
#line 96 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 97 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
malloc(size_t _Size); 
#line 102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) size_t __cdecl 
#line 103 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
_msize(void * _Block); 
#line 108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 109 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
_realloc_base(void * _Block, size_t _Size); 
#line 115 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 116 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
realloc(void * _Block, size_t _Size); 
#line 122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 123 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
_recalloc(void * _Block, size_t _Count, size_t _Size); 
#line 129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) void __cdecl 
#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
_aligned_free(void * _Block); 
#line 135 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 136 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
_aligned_malloc(size_t _Size, size_t _Alignment); 
#line 142 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
_aligned_offset_malloc(size_t _Size, size_t _Alignment, size_t _Offset); 
#line 150 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) size_t __cdecl 
#line 151 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
_aligned_msize(void * _Block, size_t _Alignment, size_t _Offset); 
#line 158 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
_aligned_offset_realloc(void * _Block, size_t _Size, size_t _Alignment, size_t _Offset); 
#line 167 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 168 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
_aligned_offset_recalloc(void * _Block, size_t _Count, size_t _Size, size_t _Alignment, size_t _Offset); 
#line 177 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 178 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
_aligned_realloc(void * _Block, size_t _Size, size_t _Alignment); 
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
_aligned_recalloc(void * _Block, size_t _Count, size_t _Size, size_t _Alignment); 
#line 214 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
}__pragma(pack ( pop )) 
#line 16 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 23 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"
__declspec(dllimport) void *__cdecl bsearch_s(const void * _Key, const void * _Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, int (__cdecl * _PtFuncCompare)(void *, const void *, const void *), void * _Context); 
#line 32 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"
__declspec(dllimport) void __cdecl qsort_s(void * _Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, int (__cdecl * _PtFuncCompare)(void *, const void *, const void *), void * _Context); 
#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"
__declspec(dllimport) void *__cdecl bsearch(const void * _Key, const void * _Base, size_t _NumOfElements, size_t _SizeOfElements, int (__cdecl * _PtFuncCompare)(const void *, const void *)); 
#line 53 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"
__declspec(dllimport) void __cdecl qsort(void * _Base, size_t _NumOfElements, size_t _SizeOfElements, int (__cdecl * _PtFuncCompare)(const void *, const void *)); 
#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"
__declspec(dllimport) void *__cdecl _lfind_s(const void * _Key, const void * _Base, unsigned * _NumOfElements, size_t _SizeOfElements, int (__cdecl * _PtFuncCompare)(void *, const void *, const void *), void * _Context); 
#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"
__declspec(dllimport) void *__cdecl _lfind(const void * _Key, const void * _Base, unsigned * _NumOfElements, unsigned _SizeOfElements, int (__cdecl * _PtFuncCompare)(const void *, const void *)); 
#line 80 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"
__declspec(dllimport) void *__cdecl _lsearch_s(const void * _Key, void * _Base, unsigned * _NumOfElements, size_t _SizeOfElements, int (__cdecl * _PtFuncCompare)(void *, const void *, const void *), void * _Context); 
#line 90 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"
__declspec(dllimport) void *__cdecl _lsearch(const void * _Key, void * _Base, unsigned * _NumOfElements, unsigned _SizeOfElements, int (__cdecl * _PtFuncCompare)(const void *, const void *)); 
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"
__declspec(dllimport) void *__cdecl lfind(const void * _Key, const void * _Base, unsigned * _NumOfElements, unsigned _SizeOfElements, int (__cdecl * _PtFuncCompare)(const void *, const void *)); 
#line 194 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"
__declspec(dllimport) void *__cdecl lsearch(const void * _Key, void * _Base, unsigned * _NumOfElements, unsigned _SizeOfElements, int (__cdecl * _PtFuncCompare)(const void *, const void *)); 
#line 206 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"
}__pragma(pack ( pop )) 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) errno_t __cdecl _itow_s(int _Value, __wchar_t * _Buffer, size_t _BufferCount, int _Radix); 
#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _itow_s(int _Value, __wchar_t (&_Buffer)[_Size], int _Radix) throw() { return _itow_s(_Value, _Buffer, _Size, _Radix); } }
#line 62 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __wchar_t *__cdecl _itow(int _Value, __wchar_t * _Buffer, int _Radix); 
#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) errno_t __cdecl _ltow_s(long _Value, __wchar_t * _Buffer, size_t _BufferCount, int _Radix); 
#line 78 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _ltow_s(long _Value, __wchar_t (&_Buffer)[_Size], int _Radix) throw() { return _ltow_s(_Value, _Buffer, _Size, _Radix); } }
#line 85 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __wchar_t *__cdecl _ltow(long _Value, __wchar_t * _Buffer, int _Radix); 
#line 93 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) errno_t __cdecl _ultow_s(unsigned long _Value, __wchar_t * _Buffer, size_t _BufferCount, int _Radix); 
#line 100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _ultow_s(unsigned long _Value, __wchar_t (&_Buffer)[_Size], int _Radix) throw() { return _ultow_s(_Value, _Buffer, _Size, _Radix); } }
#line 107 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __wchar_t *__cdecl _ultow(unsigned long _Value, __wchar_t * _Buffer, int _Radix); 
#line 115 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) double __cdecl wcstod(const __wchar_t * _String, __wchar_t ** _EndPtr); 
#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) double __cdecl _wcstod_l(const __wchar_t * _String, __wchar_t ** _EndPtr, _locale_t _Locale); 
#line 128 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) long __cdecl wcstol(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 135 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) long __cdecl _wcstol_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __int64 __cdecl wcstoll(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 150 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __int64 __cdecl _wcstoll_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 158 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) unsigned long __cdecl wcstoul(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 165 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) unsigned long __cdecl _wcstoul_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 173 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) unsigned __int64 __cdecl wcstoull(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 180 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) unsigned __int64 __cdecl _wcstoull_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 188 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) long double __cdecl wcstold(const __wchar_t * _String, __wchar_t ** _EndPtr); 
#line 194 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) long double __cdecl _wcstold_l(const __wchar_t * _String, __wchar_t ** _EndPtr, _locale_t _Locale); 
#line 201 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) float __cdecl wcstof(const __wchar_t * _String, __wchar_t ** _EndPtr); 
#line 207 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) float __cdecl _wcstof_l(const __wchar_t * _String, __wchar_t ** _EndPtr, _locale_t _Locale); 
#line 214 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) double __cdecl _wtof(const __wchar_t * _String); 
#line 219 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) double __cdecl _wtof_l(const __wchar_t * _String, _locale_t _Locale); 
#line 225 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) int __cdecl _wtoi(const __wchar_t * _String); 
#line 230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) int __cdecl _wtoi_l(const __wchar_t * _String, _locale_t _Locale); 
#line 236 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) long __cdecl _wtol(const __wchar_t * _String); 
#line 241 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) long __cdecl _wtol_l(const __wchar_t * _String, _locale_t _Locale); 
#line 247 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __int64 __cdecl _wtoll(const __wchar_t * _String); 
#line 252 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __int64 __cdecl _wtoll_l(const __wchar_t * _String, _locale_t _Locale); 
#line 258 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) errno_t __cdecl _i64tow_s(__int64 _Value, __wchar_t * _Buffer, size_t _BufferCount, int _Radix); 
#line 266 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __wchar_t *__cdecl _i64tow(__int64 _Value, __wchar_t * _Buffer, int _Radix); 
#line 273 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) errno_t __cdecl _ui64tow_s(unsigned __int64 _Value, __wchar_t * _Buffer, size_t _BufferCount, int _Radix); 
#line 281 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __wchar_t *__cdecl _ui64tow(unsigned __int64 _Value, __wchar_t * _Buffer, int _Radix); 
#line 288 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __int64 __cdecl _wtoi64(const __wchar_t * _String); 
#line 293 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __int64 __cdecl _wtoi64_l(const __wchar_t * _String, _locale_t _Locale); 
#line 299 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __int64 __cdecl _wcstoi64(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 306 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __int64 __cdecl _wcstoi64_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 314 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) unsigned __int64 __cdecl _wcstoui64(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 321 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) unsigned __int64 __cdecl _wcstoui64_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 333 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __declspec(allocator) __wchar_t *__cdecl _wfullpath(__wchar_t * _Buffer, const __wchar_t * _Path, size_t _BufferCount); 
#line 342 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) errno_t __cdecl _wmakepath_s(__wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Drive, const __wchar_t * _Dir, const __wchar_t * _Filename, const __wchar_t * _Ext); 
#line 351 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wmakepath_s(__wchar_t (&_Buffer)[_Size], const __wchar_t *_Drive, const __wchar_t *_Dir, const __wchar_t *_Filename, const __wchar_t *_Ext) throw() { return _wmakepath_s(_Buffer, _Size, _Drive, _Dir, _Filename, _Ext); } }
#line 360 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) void __cdecl _wmakepath(__wchar_t * _Buffer, const __wchar_t * _Drive, const __wchar_t * _Dir, const __wchar_t * _Filename, const __wchar_t * _Ext); 
#line 369 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) void __cdecl _wperror(const __wchar_t * _ErrMsg); 
#line 374 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) void __cdecl _wsplitpath(const __wchar_t * _FullPath, __wchar_t * _Drive, __wchar_t * _Dir, __wchar_t * _Filename, __wchar_t * _Ext); 
#line 382 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) errno_t __cdecl _wsplitpath_s(const __wchar_t * _FullPath, __wchar_t * _Drive, size_t _DriveCount, __wchar_t * _Dir, size_t _DirCount, __wchar_t * _Filename, size_t _FilenameCount, __wchar_t * _Ext, size_t _ExtCount); 
#line 394 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
extern "C++" {template< size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline ::errno_t __cdecl _wsplitpath_s(const __wchar_t *_Path, __wchar_t (&_Drive)[_DriveSize], __wchar_t (&_Dir)[_DirSize], __wchar_t (&_Name)[_NameSize], __wchar_t (&_Ext)[_ExtSize]) throw() { return _wsplitpath_s(_Path, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }
#line 407 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) errno_t __cdecl _wdupenv_s(__wchar_t ** _Buffer, size_t * _BufferCount, const __wchar_t * _VarName); 
#line 416 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __wchar_t *__cdecl _wgetenv(const __wchar_t * _VarName); 
#line 422 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) errno_t __cdecl _wgetenv_s(size_t * _RequiredCount, __wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _VarName); 
#line 429 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wgetenv_s(::size_t *_RequiredCount, __wchar_t (&_Buffer)[_Size], const __wchar_t *_VarName) throw() { return _wgetenv_s(_RequiredCount, _Buffer, _Size, _VarName); } }
#line 438 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) int __cdecl _wputenv(const __wchar_t * _EnvString); 
#line 443 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) errno_t __cdecl _wputenv_s(const __wchar_t * _Name, const __wchar_t * _Value); 
#line 448 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) errno_t __cdecl _wsearchenv_s(const __wchar_t * _Filename, const __wchar_t * _VarName, __wchar_t * _Buffer, size_t _BufferCount); 
#line 455 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wsearchenv_s(const __wchar_t *_Filename, const __wchar_t *_VarName, __wchar_t (&_ResultPath)[_Size]) throw() { return _wsearchenv_s(_Filename, _VarName, _ResultPath, _Size); } }
#line 462 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) void __cdecl _wsearchenv(const __wchar_t * _Filename, const __wchar_t * _VarName, __wchar_t * _ResultPath); 
#line 469 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) int __cdecl _wsystem(const __wchar_t * _Command); 
#line 477 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
}__pragma(pack ( pop )) 
#line 17 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) void __cdecl _swab(char * _Buf1, char * _Buf2, int _SizeInBytes); 
#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __declspec(noreturn) void __cdecl exit(int _Code); 
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __declspec(noreturn) void __cdecl _exit(int _Code); 
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __declspec(noreturn) void __cdecl _Exit(int _Code); 
#line 53 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __declspec(noreturn) void __cdecl quick_exit(int _Code); 
#line 54 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __declspec(noreturn) void __cdecl abort(); 
#line 60 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) unsigned __cdecl _set_abort_behavior(unsigned _Flags, unsigned _Mask); 
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
typedef int (__cdecl *_onexit_t)(void); 
#line 139 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
int __cdecl atexit(void (__cdecl *)(void)); 
#line 140 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
_onexit_t __cdecl _onexit(_onexit_t _Func); 
#line 143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
int __cdecl at_quick_exit(void (__cdecl *)(void)); 
#line 154 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
typedef void (__cdecl *_purecall_handler)(void); 
#line 157 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
typedef void (__cdecl *_invalid_parameter_handler)(const __wchar_t *, const __wchar_t *, const __wchar_t *, unsigned, uintptr_t); 
#line 166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) _purecall_handler __cdecl _set_purecall_handler(_purecall_handler _Handler); 
#line 170 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) _purecall_handler __cdecl _get_purecall_handler(); 
#line 173 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) _invalid_parameter_handler __cdecl _set_invalid_parameter_handler(_invalid_parameter_handler _Handler); 
#line 177 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) _invalid_parameter_handler __cdecl _get_invalid_parameter_handler(); 
#line 179 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) _invalid_parameter_handler __cdecl _set_thread_local_invalid_parameter_handler(_invalid_parameter_handler _Handler); 
#line 183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) _invalid_parameter_handler __cdecl _get_thread_local_invalid_parameter_handler(); 
#line 207 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl _set_error_mode(int _Mode); 
#line 211 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int *__cdecl _errno(); 
#line 214 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _set_errno(int _Value); 
#line 215 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _get_errno(int * _Value); 
#line 217 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) unsigned long *__cdecl __doserrno(); 
#line 220 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _set_doserrno(unsigned long _Value); 
#line 221 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _get_doserrno(unsigned long * _Value); 
#line 224 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char **__cdecl __sys_errlist(); 
#line 227 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int *__cdecl __sys_nerr(); 
#line 230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) void __cdecl perror(const char * _ErrMsg); 
#line 235 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char **__cdecl __p__pgmptr(); 
#line 236 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __wchar_t **__cdecl __p__wpgmptr(); 
#line 237 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int *__cdecl __p__fmode(); 
#line 250 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _get_pgmptr(char ** _Value); 
#line 253 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _get_wpgmptr(__wchar_t ** _Value); 
#line 255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _set_fmode(int _Mode); 
#line 257 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _get_fmode(int * _PMode); 
#line 270 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
typedef 
#line 266 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
struct _div_t { 
#line 268 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
int quot; 
#line 269 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
int rem; 
#line 270 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
} div_t; 
#line 276 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
typedef 
#line 272 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
struct _ldiv_t { 
#line 274 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
long quot; 
#line 275 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
long rem; 
#line 276 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
} ldiv_t; 
#line 282 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
typedef 
#line 278 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
struct _lldiv_t { 
#line 280 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__int64 quot; 
#line 281 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__int64 rem; 
#line 282 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
} lldiv_t; 
#line 284 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
int __cdecl abs(int _Number); 
#line 285 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
long __cdecl labs(long _Number); 
#line 286 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__int64 __cdecl llabs(__int64 _Number); 
#line 287 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__int64 __cdecl _abs64(__int64 _Number); 
#line 289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
unsigned short __cdecl _byteswap_ushort(unsigned short _Number); 
#line 290 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
unsigned long __cdecl _byteswap_ulong(unsigned long _Number); 
#line 291 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
unsigned __int64 __cdecl _byteswap_uint64(unsigned __int64 _Number); 
#line 293 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) div_t __cdecl div(int _Numerator, int _Denominator); 
#line 294 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) ldiv_t __cdecl ldiv(long _Numerator, long _Denominator); 
#line 295 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) lldiv_t __cdecl lldiv(__int64 _Numerator, __int64 _Denominator); 
#line 299 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
#pragma warning (push)
#pragma warning (disable:6540)
#line 302 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
unsigned __cdecl _rotl(unsigned _Value, int _Shift); 
#line 308 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
unsigned long __cdecl _lrotl(unsigned long _Value, int _Shift); 
#line 313 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
unsigned __int64 __cdecl _rotl64(unsigned __int64 _Value, int _Shift); 
#line 318 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
unsigned __cdecl _rotr(unsigned _Value, int _Shift); 
#line 324 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
unsigned long __cdecl _lrotr(unsigned long _Value, int _Shift); 
#line 329 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
unsigned __int64 __cdecl _rotr64(unsigned __int64 _Value, int _Shift); 
#line 334 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
#pragma warning (pop)
#line 341 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) void __cdecl srand(unsigned _Seed); 
#line 343 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl rand(); 
#line 352 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++" {
#line 354 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
inline long abs(const long _X) throw() 
#line 355 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
{ 
#line 356 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
return labs(_X); 
#line 357 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
} 
#line 359 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
inline __int64 abs(const __int64 _X) throw() 
#line 360 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
{ 
#line 361 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
return llabs(_X); 
#line 362 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
} 
#line 364 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
inline ldiv_t div(const long _A1, const long _A2) throw() 
#line 365 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
{ 
#line 366 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
return ldiv(_A1, _A2); 
#line 367 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
} 
#line 369 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
inline lldiv_t div(const __int64 _A1, const __int64 _A2) throw() 
#line 370 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
{ 
#line 371 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
return lldiv(_A1, _A2); 
#line 372 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
} 
#line 373 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
}
#line 385 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
#pragma pack ( push, 4 )
#line 389 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
typedef 
#line 387 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
struct { 
#line 388 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
unsigned char ld[10]; 
#line 389 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
} _LDOUBLE; 
#pragma pack ( pop )
#line 409 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
typedef 
#line 407 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
struct { 
#line 408 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
double x; 
#line 409 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
} _CRT_DOUBLE; 
#line 414 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
typedef 
#line 412 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
struct { 
#line 413 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
float f; 
#line 414 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
} _CRT_FLOAT; 
#line 423 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
typedef 
#line 421 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
struct { 
#line 422 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
long double x; 
#line 423 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
} _LONGDOUBLE; 
#line 427 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
#pragma pack ( push, 4 )
#line 431 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
typedef 
#line 429 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
struct { 
#line 430 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
unsigned char ld12[12]; 
#line 431 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
} _LDBL12; 
#pragma pack ( pop )
#line 441 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) double __cdecl atof(const char * _String); 
#line 442 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl atoi(const char * _String); 
#line 443 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) long __cdecl atol(const char * _String); 
#line 444 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __int64 __cdecl atoll(const char * _String); 
#line 445 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __int64 __cdecl _atoi64(const char * _String); 
#line 447 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) double __cdecl _atof_l(const char * _String, _locale_t _Locale); 
#line 448 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl _atoi_l(const char * _String, _locale_t _Locale); 
#line 449 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) long __cdecl _atol_l(const char * _String, _locale_t _Locale); 
#line 450 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __int64 __cdecl _atoll_l(const char * _String, _locale_t _Locale); 
#line 451 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __int64 __cdecl _atoi64_l(const char * _String, _locale_t _Locale); 
#line 453 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl _atoflt(_CRT_FLOAT * _Result, const char * _String); 
#line 454 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl _atodbl(_CRT_DOUBLE * _Result, char * _String); 
#line 455 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl _atoldbl(_LDOUBLE * _Result, char * _String); 
#line 458 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl _atoflt_l(_CRT_FLOAT * _Result, const char * _String, _locale_t _Locale); 
#line 465 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl _atodbl_l(_CRT_DOUBLE * _Result, char * _String, _locale_t _Locale); 
#line 473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl _atoldbl_l(_LDOUBLE * _Result, char * _String, _locale_t _Locale); 
#line 480 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) float __cdecl strtof(const char * _String, char ** _EndPtr); 
#line 486 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) float __cdecl _strtof_l(const char * _String, char ** _EndPtr, _locale_t _Locale); 
#line 493 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) double __cdecl strtod(const char * _String, char ** _EndPtr); 
#line 499 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) double __cdecl _strtod_l(const char * _String, char ** _EndPtr, _locale_t _Locale); 
#line 506 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) long double __cdecl strtold(const char * _String, char ** _EndPtr); 
#line 512 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) long double __cdecl _strtold_l(const char * _String, char ** _EndPtr, _locale_t _Locale); 
#line 519 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) long __cdecl strtol(const char * _String, char ** _EndPtr, int _Radix); 
#line 526 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) long __cdecl _strtol_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 534 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __int64 __cdecl strtoll(const char * _String, char ** _EndPtr, int _Radix); 
#line 541 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __int64 __cdecl _strtoll_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 549 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) unsigned long __cdecl strtoul(const char * _String, char ** _EndPtr, int _Radix); 
#line 556 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) unsigned long __cdecl _strtoul_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 564 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) unsigned __int64 __cdecl strtoull(const char * _String, char ** _EndPtr, int _Radix); 
#line 571 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) unsigned __int64 __cdecl _strtoull_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 579 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __int64 __cdecl _strtoi64(const char * _String, char ** _EndPtr, int _Radix); 
#line 586 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __int64 __cdecl _strtoi64_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 594 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) unsigned __int64 __cdecl _strtoui64(const char * _String, char ** _EndPtr, int _Radix); 
#line 601 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) unsigned __int64 __cdecl _strtoui64_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 617 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _itoa_s(int _Value, char * _Buffer, size_t _BufferCount, int _Radix); 
#line 624 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _itoa_s(int _Value, char (&_Buffer)[_Size], int _Radix) throw() { return _itoa_s(_Value, _Buffer, _Size, _Radix); } }
#line 632 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl _itoa(int _Value, char * _Buffer, int _Radix); 
#line 641 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _ltoa_s(long _Value, char * _Buffer, size_t _BufferCount, int _Radix); 
#line 648 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _ltoa_s(long _Value, char (&_Buffer)[_Size], int _Radix) throw() { return _ltoa_s(_Value, _Buffer, _Size, _Radix); } }
#line 655 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl _ltoa(long _Value, char * _Buffer, int _Radix); 
#line 664 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _ultoa_s(unsigned long _Value, char * _Buffer, size_t _BufferCount, int _Radix); 
#line 671 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _ultoa_s(unsigned long _Value, char (&_Buffer)[_Size], int _Radix) throw() { return _ultoa_s(_Value, _Buffer, _Size, _Radix); } }
#line 678 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl _ultoa(unsigned long _Value, char * _Buffer, int _Radix); 
#line 687 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _i64toa_s(__int64 _Value, char * _Buffer, size_t _BufferCount, int _Radix); 
#line 696 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl _i64toa(__int64 _Value, char * _Buffer, int _Radix); 
#line 704 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _ui64toa_s(unsigned __int64 _Value, char * _Buffer, size_t _BufferCount, int _Radix); 
#line 712 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl _ui64toa(unsigned __int64 _Value, char * _Buffer, int _Radix); 
#line 732 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _ecvt_s(char * _Buffer, size_t _BufferCount, double _Value, int _DigitCount, int * _PtDec, int * _PtSign); 
#line 741 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _ecvt_s(char (&_Buffer)[_Size], double _Value, int _DigitCount, int *_PtDec, int *_PtSign) throw() { return _ecvt_s(_Buffer, _Size, _Value, _DigitCount, _PtDec, _PtSign); } }
#line 751 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl _ecvt(double _Value, int _DigitCount, int * _PtDec, int * _PtSign); 
#line 760 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _fcvt_s(char * _Buffer, size_t _BufferCount, double _Value, int _FractionalDigitCount, int * _PtDec, int * _PtSign); 
#line 769 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _fcvt_s(char (&_Buffer)[_Size], double _Value, int _FractionalDigitCount, int *_PtDec, int *_PtSign) throw() { return _fcvt_s(_Buffer, _Size, _Value, _FractionalDigitCount, _PtDec, _PtSign); } }
#line 781 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl _fcvt(double _Value, int _FractionalDigitCount, int * _PtDec, int * _PtSign); 
#line 789 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _gcvt_s(char * _Buffer, size_t _BufferCount, double _Value, int _DigitCount); 
#line 796 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _gcvt_s(char (&_Buffer)[_Size], double _Value, int _DigitCount) throw() { return _gcvt_s(_Buffer, _Size, _Value, _DigitCount); } }
#line 805 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl _gcvt(double _Value, int _DigitCount, char * _Buffer); 
#line 834 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl ___mb_cur_max_func(); 
#line 837 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl ___mb_cur_max_l_func(_locale_t); 
#line 843 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl mblen(const char * _Ch, size_t _MaxCount); 
#line 849 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl _mblen_l(const char * _Ch, size_t _MaxCount, _locale_t _Locale); 
#line 857 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) size_t __cdecl _mbstrlen(const char * _String); 
#line 863 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) size_t __cdecl _mbstrlen_l(const char * _String, _locale_t _Locale); 
#line 870 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) size_t __cdecl _mbstrnlen(const char * _String, size_t _MaxCount); 
#line 877 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) size_t __cdecl _mbstrnlen_l(const char * _String, size_t _MaxCount, _locale_t _Locale); 
#line 884 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl mbtowc(__wchar_t * _DstCh, const char * _SrcCh, size_t _SrcSizeInBytes); 
#line 891 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl _mbtowc_l(__wchar_t * _DstCh, const char * _SrcCh, size_t _SrcSizeInBytes, _locale_t _Locale); 
#line 899 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl mbstowcs_s(size_t * _PtNumOfCharConverted, __wchar_t * _DstBuf, size_t _SizeInWords, const char * _SrcBuf, size_t _MaxCount); 
#line 907 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl mbstowcs_s(::size_t *_PtNumOfCharConverted, __wchar_t (&_Dest)[_Size], const char *_Source, ::size_t _MaxCount) throw() { return mbstowcs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }
#line 915 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) size_t __cdecl mbstowcs(__wchar_t * _Dest, const char * _Source, size_t _MaxCount); 
#line 923 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _mbstowcs_s_l(size_t * _PtNumOfCharConverted, __wchar_t * _DstBuf, size_t _SizeInWords, const char * _SrcBuf, size_t _MaxCount, _locale_t _Locale); 
#line 932 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _mbstowcs_s_l(::size_t *_PtNumOfCharConverted, __wchar_t (&_Dest)[_Size], const char *_Source, ::size_t _MaxCount, ::_locale_t _Locale) throw() { return _mbstowcs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
#line 941 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) size_t __cdecl _mbstowcs_l(__wchar_t * _Dest, const char * _Source, size_t _MaxCount, _locale_t _Locale); 
#line 954 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl wctomb(char * _MbCh, __wchar_t _WCh); 
#line 960 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl _wctomb_l(char * _MbCh, __wchar_t _WCh, _locale_t _Locale); 
#line 969 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl wctomb_s(int * _SizeConverted, char * _MbCh, rsize_t _SizeInBytes, __wchar_t _WCh); 
#line 979 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _wctomb_s_l(int * _SizeConverted, char * _MbCh, size_t _SizeInBytes, __wchar_t _WCh, _locale_t _Locale); 
#line 987 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl wcstombs_s(size_t * _PtNumOfCharConverted, char * _Dst, size_t _DstSizeInBytes, const __wchar_t * _Src, size_t _MaxCountInBytes); 
#line 995 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl wcstombs_s(::size_t *_PtNumOfCharConverted, char (&_Dest)[_Size], const __wchar_t *_Source, ::size_t _MaxCount) throw() { return wcstombs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }
#line 1003 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) size_t __cdecl wcstombs(char * _Dest, const __wchar_t * _Source, size_t _MaxCount); 
#line 1011 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _wcstombs_s_l(size_t * _PtNumOfCharConverted, char * _Dst, size_t _DstSizeInBytes, const __wchar_t * _Src, size_t _MaxCountInBytes, _locale_t _Locale); 
#line 1020 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wcstombs_s_l(::size_t *_PtNumOfCharConverted, char (&_Dest)[_Size], const __wchar_t *_Source, ::size_t _MaxCount, ::_locale_t _Locale) throw() { return _wcstombs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
#line 1029 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) size_t __cdecl _wcstombs_l(char * _Dest, const __wchar_t * _Source, size_t _MaxCount, _locale_t _Locale); 
#line 1059 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __declspec(allocator) char *__cdecl _fullpath(char * _Buffer, const char * _Path, size_t _BufferCount); 
#line 1068 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _makepath_s(char * _Buffer, size_t _BufferCount, const char * _Drive, const char * _Dir, const char * _Filename, const char * _Ext); 
#line 1077 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _makepath_s(char (&_Buffer)[_Size], const char *_Drive, const char *_Dir, const char *_Filename, const char *_Ext) throw() { return _makepath_s(_Buffer, _Size, _Drive, _Dir, _Filename, _Ext); } }
#line 1086 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) void __cdecl _makepath(char * _Buffer, const char * _Drive, const char * _Dir, const char * _Filename, const char * _Ext); 
#line 1096 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) void __cdecl _splitpath(const char * _FullPath, char * _Drive, char * _Dir, char * _Filename, char * _Ext); 
#line 1105 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _splitpath_s(const char * _FullPath, char * _Drive, size_t _DriveCount, char * _Dir, size_t _DirCount, char * _Filename, size_t _FilenameCount, char * _Ext, size_t _ExtCount); 
#line 1117 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++" {template< size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline ::errno_t __cdecl _splitpath_s(const char *_Dest, char (&_Drive)[_DriveSize], char (&_Dir)[_DirSize], char (&_Name)[_NameSize], char (&_Ext)[_ExtSize]) throw() { return _splitpath_s(_Dest, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }
#line 1132 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl getenv_s(size_t * _RequiredCount, char * _Buffer, rsize_t _BufferCount, const char * _VarName); 
#line 1144 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int *__cdecl __p___argc(); 
#line 1145 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char ***__cdecl __p___argv(); 
#line 1146 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __wchar_t ***__cdecl __p___wargv(); 
#line 1158 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char ***__cdecl __p__environ(); 
#line 1159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __wchar_t ***__cdecl __p__wenviron(); 
#line 1183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl getenv(const char * _VarName); 
#line 1187 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl getenv_s(::size_t *_RequiredCount, char (&_Buffer)[_Size], const char *_VarName) throw() { return getenv_s(_RequiredCount, _Buffer, _Size, _VarName); } }
#line 1200 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _dupenv_s(char ** _Buffer, size_t * _BufferCount, const char * _VarName); 
#line 1210 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl system(const char * _Command); 
#line 1216 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
#pragma warning (push)
#pragma warning (disable:6540)
#line 1220 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl _putenv(const char * _EnvString); 
#line 1225 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _putenv_s(const char * _Name, const char * _Value); 
#line 1230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
#pragma warning (pop)
#line 1232 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _searchenv_s(const char * _Filename, const char * _VarName, char * _Buffer, size_t _BufferCount); 
#line 1239 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _searchenv_s(const char *_Filename, const char *_VarName, char (&_Buffer)[_Size]) throw() { return _searchenv_s(_Filename, _VarName, _Buffer, _Size); } }
#line 1246 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) void __cdecl _searchenv(const char * _Filename, const char * _VarName, char * _Buffer); 
#line 1254 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using SetErrorMode in" "stead. See online help for details.")) 
#line 1255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) void __cdecl _seterrormode(int _Mode); 
#line 1259 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using Beep instead. S" "ee online help for details.")) 
#line 1260 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) void __cdecl _beep(unsigned _Frequency, unsigned _Duration); 
#line 1265 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using Sleep instead. " "See online help for details.")) 
#line 1266 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) void __cdecl _sleep(unsigned long _Duration); 
#line 1289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
#pragma warning(push)
#pragma warning(disable: 4141)
#line 1293 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl ecvt(double _Value, int _DigitCount, int * _PtDec, int * _PtSign); 
#line 1301 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl fcvt(double _Value, int _FractionalDigitCount, int * _PtDec, int * _PtSign); 
#line 1309 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl gcvt(double _Value, int _DigitCount, char * _DstBuf); 
#line 1316 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl itoa(int _Value, char * _Buffer, int _Radix); 
#line 1323 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl ltoa(long _Value, char * _Buffer, int _Radix); 
#line 1331 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) void __cdecl swab(char * _Buf1, char * _Buf2, int _SizeInBytes); 
#line 1338 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl ultoa(unsigned long _Value, char * _Buffer, int _Radix); 
#line 1349 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl putenv(const char * _EnvString); 
#line 1355 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
#pragma warning(pop)
#line 1357 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
_onexit_t __cdecl onexit(_onexit_t _Func); 
#line 1363 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
}
#line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#pragma detect_mismatch("_MSC_VER", "1900")
#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#pragma detect_mismatch("_ITERATOR_DEBUG_LEVEL", "0")
#line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#pragma detect_mismatch("RuntimeLibrary", "MD_DynamicRelease")
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\use_ansi.h"
#pragma comment(lib, "msvcprt")
#line 1363 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__pragma(pack ( pop )) 
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#pragma pack ( push, 8 )
#line 592 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
typedef __int64 _Longlong; 
#line 593 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
typedef unsigned __int64 _ULonglong; 
#line 611 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
namespace std { 
#line 612 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
enum _Uninitialized { 
#line 614 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
_Noinit
#line 615 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
}; 
#line 619 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#pragma warning(push)
#pragma warning(disable:4412)
class __declspec(dllimport) _Lockit { 
#line 644 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
public: __thiscall _Lockit(); 
#line 645 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
explicit __thiscall _Lockit(int); 
#line 646 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
__thiscall ~_Lockit() noexcept; 
#line 649 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
static void __cdecl _Lockit_ctor(int); 
#line 650 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
static void __cdecl _Lockit_dtor(int); 
#line 653 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
private: static void __cdecl _Lockit_ctor(_Lockit *); 
#line 654 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
static void __cdecl _Lockit_ctor(_Lockit *, int); 
#line 655 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
static void __cdecl _Lockit_dtor(_Lockit *); 
#line 658 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
public: _Lockit(const _Lockit &) = delete;
#line 659 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
_Lockit &operator=(const _Lockit &) = delete;
#line 662 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
private: int _Locktype; 
#line 677 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
}; 
#line 764 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
class __declspec(dllimport) _Init_locks { 
#line 780 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
public: __thiscall _Init_locks(); 
#line 781 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
__thiscall ~_Init_locks() noexcept; 
#line 785 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
private: static void __cdecl _Init_locks_ctor(_Init_locks *); 
#line 786 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
static void __cdecl _Init_locks_dtor(_Init_locks *); 
#line 797 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
}; 
#line 799 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#pragma warning(pop)
}
#line 809 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
__declspec(dllimport) void __cdecl _Atexit(void (__cdecl *)(void)); 
#line 811 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
typedef unsigned long _Uint32t; 
#line 817 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#pragma pack ( pop )
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline double abs(double _Xx) noexcept 
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::fabs(_Xx); 
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline double pow(double _Xx, int _Yx) noexcept 
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
if (_Yx == 2) { 
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return _Xx * _Xx; }  
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::pow(_Xx, static_cast< double>(_Yx)); 
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float abs(float _Xx) noexcept 
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::fabsf(_Xx); 
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float acos(float _Xx) noexcept 
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::acosf(_Xx); 
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float acosh(float _Xx) noexcept 
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::acoshf(_Xx); 
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float asin(float _Xx) noexcept 
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::asinf(_Xx); 
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float asinh(float _Xx) noexcept 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::asinhf(_Xx); 
#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float atan(float _Xx) noexcept 
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::atanf(_Xx); 
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float atanh(float _Xx) noexcept 
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::atanhf(_Xx); 
#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float atan2(float _Yx, float _Xx) noexcept 
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::atan2f(_Yx, _Xx); 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float cbrt(float _Xx) noexcept 
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::cbrtf(_Xx); 
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float ceil(float _Xx) noexcept 
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::ceilf(_Xx); 
#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float copysign(float _Number, float 
#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Sign) noexcept 
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::copysignf(_Number, _Sign); 
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float cos(float _Xx) noexcept 
#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::cosf(_Xx); 
#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float cosh(float _Xx) noexcept 
#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::coshf(_Xx); 
#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float erf(float _Xx) noexcept 
#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::erff(_Xx); 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float erfc(float _Xx) noexcept 
#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::erfcf(_Xx); 
#line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float exp(float _Xx) noexcept 
#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::expf(_Xx); 
#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float exp2(float _Xx) noexcept 
#line 112 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::exp2f(_Xx); 
#line 114 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 116 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float expm1(float _Xx) noexcept 
#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::expm1f(_Xx); 
#line 119 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 121 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float fabs(float _Xx) noexcept 
#line 122 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::fabsf(_Xx); 
#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float fdim(float _Xx, float _Yx) noexcept 
#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::fdimf(_Xx, _Yx); 
#line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float floor(float _Xx) noexcept 
#line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::floorf(_Xx); 
#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float fma(float _Xx, float _Yx, float 
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Zx) noexcept 
#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::fmaf(_Xx, _Yx, _Zx); 
#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float fmax(float _Xx, float _Yx) noexcept 
#line 143 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::fmaxf(_Xx, _Yx); 
#line 145 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 147 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float fmin(float _Xx, float _Yx) noexcept 
#line 148 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 149 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::fminf(_Xx, _Yx); 
#line 150 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 152 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float fmod(float _Xx, float _Yx) noexcept 
#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::fmodf(_Xx, _Yx); 
#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float frexp(float _Xx, int *_Yx) noexcept 
#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 159 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::frexpf(_Xx, _Yx); 
#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 162 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float hypot(float _Xx, float _Yx) noexcept 
#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::hypotf(_Xx, _Yx); 
#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline int ilogb(float _Xx) noexcept 
#line 168 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 169 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::ilogbf(_Xx); 
#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float ldexp(float _Xx, int _Yx) noexcept 
#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 174 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::ldexpf(_Xx, _Yx); 
#line 175 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float lgamma(float _Xx) noexcept 
#line 178 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 179 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::lgammaf(_Xx); 
#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline __int64 llrint(float _Xx) noexcept 
#line 183 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::llrintf(_Xx); 
#line 185 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline __int64 llround(float _Xx) noexcept 
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 189 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::llroundf(_Xx); 
#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float log(float _Xx) noexcept 
#line 193 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::logf(_Xx); 
#line 195 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 197 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float log10(float _Xx) noexcept 
#line 198 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 199 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::log10f(_Xx); 
#line 200 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 202 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float log1p(float _Xx) noexcept 
#line 203 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::log1pf(_Xx); 
#line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float log2(float _Xx) noexcept 
#line 208 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 209 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::log2f(_Xx); 
#line 210 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 212 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float logb(float _Xx) noexcept 
#line 213 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 214 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::logbf(_Xx); 
#line 215 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 217 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long lrint(float _Xx) noexcept 
#line 218 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 219 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::lrintf(_Xx); 
#line 220 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 222 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long lround(float _Xx) noexcept 
#line 223 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 224 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::lroundf(_Xx); 
#line 225 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 227 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float modf(float _Xx, float *_Yx) noexcept 
#line 228 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 229 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::modff(_Xx, _Yx); 
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 232 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float nearbyint(float _Xx) noexcept 
#line 233 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 234 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::nearbyintf(_Xx); 
#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 237 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float nextafter(float _Xx, float _Yx) noexcept 
#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::nextafterf(_Xx, _Yx); 
#line 240 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 242 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float nexttoward(float _Xx, long double 
#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 244 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::nexttowardf(_Xx, _Yx); 
#line 246 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 248 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float pow(float _Xx, float 
#line 249 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 250 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 251 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::powf(_Xx, _Yx); 
#line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float pow(float _Xx, int _Yx) noexcept 
#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
if (_Yx == 2) { 
#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return _Xx * _Xx; }  
#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::powf(_Xx, static_cast< float>(_Yx)); 
#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float remainder(float _Xx, float _Yx) noexcept 
#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::remainderf(_Xx, _Yx); 
#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float remquo(float _Xx, float _Yx, int *
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Zx) noexcept 
#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::remquof(_Xx, _Yx, _Zx); 
#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float rint(float _Xx) noexcept 
#line 274 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 275 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::rintf(_Xx); 
#line 276 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float round(float _Xx) noexcept 
#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 280 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::roundf(_Xx); 
#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 283 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float scalbln(float _Xx, long _Yx) noexcept 
#line 284 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 285 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::scalblnf(_Xx, _Yx); 
#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 288 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float scalbn(float _Xx, int _Yx) noexcept 
#line 289 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 290 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::scalbnf(_Xx, _Yx); 
#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 293 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float sin(float _Xx) noexcept 
#line 294 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 295 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::sinf(_Xx); 
#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float sinh(float _Xx) noexcept 
#line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 300 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::sinhf(_Xx); 
#line 301 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float sqrt(float _Xx) noexcept 
#line 304 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 305 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::sqrtf(_Xx); 
#line 306 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 308 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float tan(float _Xx) noexcept 
#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 310 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::tanf(_Xx); 
#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 313 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float tanh(float _Xx) noexcept 
#line 314 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 315 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::tanhf(_Xx); 
#line 316 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 318 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float tgamma(float _Xx) noexcept 
#line 319 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 320 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::tgammaf(_Xx); 
#line 321 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 323 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float trunc(float _Xx) noexcept 
#line 324 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 325 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::truncf(_Xx); 
#line 326 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 328 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double abs(long double _Xx) noexcept 
#line 329 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 330 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::fabsl(_Xx); 
#line 331 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 333 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double acos(long double _Xx) noexcept 
#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 335 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::acosl(_Xx); 
#line 336 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 338 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double acosh(long double _Xx) noexcept 
#line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 340 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::acoshl(_Xx); 
#line 341 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 343 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double asin(long double _Xx) noexcept 
#line 344 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 345 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::asinl(_Xx); 
#line 346 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 348 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double asinh(long double _Xx) noexcept 
#line 349 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 350 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::asinhl(_Xx); 
#line 351 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 353 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double atan(long double _Xx) noexcept 
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::atanl(_Xx); 
#line 356 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 358 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double atanh(long double _Xx) noexcept 
#line 359 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 360 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::atanhl(_Xx); 
#line 361 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 363 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double atan2(long double _Yx, long double 
#line 364 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Xx) noexcept 
#line 365 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 366 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::atan2l(_Yx, _Xx); 
#line 367 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 369 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double cbrt(long double _Xx) noexcept 
#line 370 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 371 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::cbrtl(_Xx); 
#line 372 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 374 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double ceil(long double _Xx) noexcept 
#line 375 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 376 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::ceill(_Xx); 
#line 377 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 379 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double copysign(long double _Number, long double 
#line 380 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Sign) noexcept 
#line 381 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 382 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::copysignl(_Number, _Sign); 
#line 383 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 385 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double cos(long double _Xx) noexcept 
#line 386 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 387 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::cosl(_Xx); 
#line 388 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 390 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double cosh(long double _Xx) noexcept 
#line 391 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 392 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::coshl(_Xx); 
#line 393 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 395 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double erf(long double _Xx) noexcept 
#line 396 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 397 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::erfl(_Xx); 
#line 398 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 400 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double erfc(long double _Xx) noexcept 
#line 401 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 402 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::erfcl(_Xx); 
#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 405 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double exp(long double _Xx) noexcept 
#line 406 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 407 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::expl(_Xx); 
#line 408 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 410 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double exp2(long double _Xx) noexcept 
#line 411 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 412 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::exp2l(_Xx); 
#line 413 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 415 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double expm1(long double _Xx) noexcept 
#line 416 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 417 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::expm1l(_Xx); 
#line 418 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 420 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double fabs(long double _Xx) noexcept 
#line 421 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 422 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::fabsl(_Xx); 
#line 423 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 425 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double fdim(long double _Xx, long double 
#line 426 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 427 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 428 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::fdiml(_Xx, _Yx); 
#line 429 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 431 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double floor(long double _Xx) noexcept 
#line 432 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 433 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::floorl(_Xx); 
#line 434 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 436 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double fma(long double _Xx, long double 
#line 437 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx, long double _Zx) noexcept 
#line 438 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 439 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::fmal(_Xx, _Yx, _Zx); 
#line 440 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 442 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double fmax(long double _Xx, long double 
#line 443 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 444 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 445 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::fmaxl(_Xx, _Yx); 
#line 446 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 448 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double fmin(long double _Xx, long double 
#line 449 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 450 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 451 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::fminl(_Xx, _Yx); 
#line 452 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 454 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double fmod(long double _Xx, long double 
#line 455 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 456 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 457 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::fmodl(_Xx, _Yx); 
#line 458 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 460 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double frexp(long double _Xx, int *
#line 461 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 462 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 463 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::frexpl(_Xx, _Yx); 
#line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 466 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double hypot(long double _Xx, long double 
#line 467 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 468 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 469 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::hypotl(_Xx, _Yx); 
#line 470 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 472 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline int ilogb(long double _Xx) noexcept 
#line 473 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 474 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::ilogbl(_Xx); 
#line 475 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 477 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double ldexp(long double _Xx, int 
#line 478 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 479 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 480 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::ldexpl(_Xx, _Yx); 
#line 481 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 483 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double lgamma(long double _Xx) noexcept 
#line 484 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 485 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::lgammal(_Xx); 
#line 486 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 488 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline __int64 llrint(long double _Xx) noexcept 
#line 489 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 490 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::llrintl(_Xx); 
#line 491 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 493 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline __int64 llround(long double _Xx) noexcept 
#line 494 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 495 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::llroundl(_Xx); 
#line 496 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 498 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double log(long double _Xx) noexcept 
#line 499 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 500 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::logl(_Xx); 
#line 501 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 503 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double log10(long double _Xx) noexcept 
#line 504 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 505 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::log10l(_Xx); 
#line 506 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 508 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double log1p(long double _Xx) noexcept 
#line 509 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 510 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::log1pl(_Xx); 
#line 511 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 513 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double log2(long double _Xx) noexcept 
#line 514 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 515 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::log2l(_Xx); 
#line 516 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 518 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double logb(long double _Xx) noexcept 
#line 519 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 520 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::logbl(_Xx); 
#line 521 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 523 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long lrint(long double _Xx) noexcept 
#line 524 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 525 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::lrintl(_Xx); 
#line 526 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 528 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long lround(long double _Xx) noexcept 
#line 529 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 530 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::lroundl(_Xx); 
#line 531 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 533 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double modf(long double _Xx, long double *
#line 534 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 535 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 536 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::modfl(_Xx, _Yx); 
#line 537 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 539 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double nearbyint(long double _Xx) noexcept 
#line 540 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 541 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::nearbyintl(_Xx); 
#line 542 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 544 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double nextafter(long double _Xx, long double 
#line 545 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 546 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 547 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::nextafterl(_Xx, _Yx); 
#line 548 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 550 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double nexttoward(long double _Xx, long double 
#line 551 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 552 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 553 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::nexttowardl(_Xx, _Yx); 
#line 554 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 556 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double pow(long double _Xx, long double 
#line 557 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 558 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 559 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::powl(_Xx, _Yx); 
#line 560 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 562 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double pow(long double _Xx, int 
#line 563 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 564 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 565 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
if (_Yx == 2) { 
#line 566 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return _Xx * _Xx; }  
#line 568 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::powl(_Xx, static_cast< long double>(_Yx)); 
#line 569 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 571 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double remainder(long double _Xx, long double 
#line 572 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 573 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 574 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::remainderl(_Xx, _Yx); 
#line 575 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 577 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double remquo(long double _Xx, long double 
#line 578 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx, int *_Zx) noexcept 
#line 579 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 580 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::remquol(_Xx, _Yx, _Zx); 
#line 581 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 583 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double rint(long double _Xx) noexcept 
#line 584 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 585 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::rintl(_Xx); 
#line 586 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 588 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double round(long double _Xx) noexcept 
#line 589 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 590 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::roundl(_Xx); 
#line 591 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 593 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double scalbln(long double _Xx, long 
#line 594 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 595 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 596 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::scalblnl(_Xx, _Yx); 
#line 597 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 599 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double scalbn(long double _Xx, int 
#line 600 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 601 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 602 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::scalbnl(_Xx, _Yx); 
#line 603 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 605 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double sin(long double _Xx) noexcept 
#line 606 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 607 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::sinl(_Xx); 
#line 608 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 610 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double sinh(long double _Xx) noexcept 
#line 611 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 612 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::sinhl(_Xx); 
#line 613 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 615 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double sqrt(long double _Xx) noexcept 
#line 616 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 617 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::sqrtl(_Xx); 
#line 618 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 620 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double tan(long double _Xx) noexcept 
#line 621 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 622 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::tanl(_Xx); 
#line 623 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 625 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double tanh(long double _Xx) noexcept 
#line 626 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 627 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::tanhl(_Xx); 
#line 628 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 630 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double tgamma(long double _Xx) noexcept 
#line 631 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 632 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::tgammal(_Xx); 
#line 633 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 635 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double trunc(long double _Xx) noexcept 
#line 636 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 637 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::truncl(_Xx); 
#line 638 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
namespace std { 
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::size_t;using ::div_t;using ::ldiv_t;
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::abort;using ::abs;using ::atexit;
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::atof;using ::atoi;using ::atol;
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::bsearch;using ::calloc;using ::div;
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::exit;using ::free;
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::labs;using ::ldiv;using ::malloc;
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::mblen;using ::mbstowcs;using ::mbtowc;
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::qsort;using ::rand;using ::realloc;
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::srand;using ::strtod;using ::strtol;
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::strtoul;
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::wcstombs;using ::wctomb;
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::lldiv_t;
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::getenv;
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::system;
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::atoll;using ::llabs;using ::lldiv;
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::strtof;using ::strtold;
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::strtoll;using ::strtoull;
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::_Exit;using ::at_quick_exit;using ::quick_exit;
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
}
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
#pragma warning(push,3)
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
#pragma pack ( push, 8 )
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
namespace std { 
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct _Nil { 
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template < class _Ty,
 _Ty _Val >
 struct integral_constant
 {
 static constexpr _Ty value = _Val;

 typedef _Ty value_type;
 typedef integral_constant < _Ty, _Val > type;

 constexpr operator value_type ( ) const noexcept
  {
  return ( value );
  }

 constexpr value_type operator ( ) ( ) const noexcept
  {
  return ( value );
  }
 };
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
typedef integral_constant< bool, true>  true_type; 
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
typedef integral_constant< bool, false>  false_type; 
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< bool _Val> using bool_constant = integral_constant< bool, _Val> ; 
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< bool _Val> 
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct _Cat_base : public integral_constant< bool, _Val>  { 
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< bool _Test, class 
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
_Ty = void> 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct enable_if { 
#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct enable_if< true, _Ty>  { 
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
typedef _Ty type; 
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< bool _Test, class 
#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
_Ty1, class 
#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
_Ty2> 
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct conditional { 
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
typedef _Ty2 type; 
#line 74 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty1, class 
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
_Ty2> 
#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct conditional< true, _Ty1, _Ty2>  { 
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
typedef _Ty1 type; 
#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty1, class 
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
_Ty2> 
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct is_same : public false_type { 
#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty1> 
#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct is_same< _Ty1, _Ty1>  : public true_type { 
#line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty, class 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
_Uty> constexpr bool 
#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
is_same_v = (is_same< _Ty, _Uty> ::value); 
#line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct remove_const { 
#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
typedef _Ty type; 
#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct remove_const< const _Ty>  { 
#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
typedef _Ty type; 
#line 114 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct remove_volatile { 
#line 120 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
typedef _Ty type; 
#line 121 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct remove_volatile< volatile _Ty>  { 
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
typedef _Ty type; 
#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct remove_cv { 
#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
typedef typename remove_const< typename remove_volatile< _Ty> ::type> ::type type; 
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct _Is_integral : public false_type { 
#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 145 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< bool>  : public true_type { 
#line 148 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< char>  : public true_type { 
#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< unsigned char>  : public true_type { 
#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< signed char>  : public true_type { 
#line 166 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< __wchar_t>  : public true_type { 
#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< unsigned short>  : public true_type { 
#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 183 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< signed short>  : public true_type { 
#line 186 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 189 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< unsigned>  : public true_type { 
#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 195 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< signed int>  : public true_type { 
#line 198 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 201 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< unsigned long>  : public true_type { 
#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< signed long>  : public true_type { 
#line 210 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 213 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< char16_t>  : public true_type { 
#line 216 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 219 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< char32_t>  : public true_type { 
#line 222 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 225 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< __int64>  : public true_type { 
#line 228 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 231 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< unsigned __int64>  : public true_type { 
#line 234 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 237 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct is_integral : public _Is_integral< typename remove_cv< _Ty> ::type>  { 
#line 241 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 244 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> constexpr bool 
#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
is_integral_v = (is_integral< _Ty> ::value); 
#line 249 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 250 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct _Is_floating_point : public false_type { 
#line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_floating_point< float>  : public true_type { 
#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_floating_point< double>  : public true_type { 
#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_floating_point< long double>  : public true_type { 
#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 274 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 275 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct is_floating_point : public _Is_floating_point< typename remove_cv< _Ty> ::type>  { 
#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> constexpr bool 
#line 282 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
is_floating_point_v = (is_floating_point< _Ty> ::value); 
#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 287 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct is_arithmetic : public _Cat_base< is_integral< _Ty> ::value || is_floating_point< _Ty> ::value>  { 
#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 294 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> constexpr bool 
#line 295 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
is_arithmetic_v = (is_arithmetic< _Ty> ::value); 
#line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 300 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct remove_reference { 
#line 302 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
typedef _Ty type; 
#line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 305 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 306 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct remove_reference< _Ty &>  { 
#line 308 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
typedef _Ty type; 
#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 312 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct remove_reference< _Ty &&>  { 
#line 314 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
typedef _Ty type; 
#line 315 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 318 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct _Wrap_int { 
#line 320 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
_Wrap_int(int) 
#line 321 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
{ 
#line 322 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
} 
#line 323 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 325 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 326 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct _Identity { 
#line 328 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
typedef _Ty type; 
#line 329 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 344 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}
#line 346 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
#pragma warning(pop)
#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
#pragma warning(push,3)
#line 347 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
#pragma pack ( pop )
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
#pragma pack ( push, 8 )
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
namespace std { 
#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
template< class _Ty> 
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
struct _Promote_to_float { 
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
typedef typename conditional< is_integral< _Ty> ::value, double, _Ty> ::type type; 
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
}; 
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
template< class _Ty1, class 
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
_Ty2> 
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
struct _Common_float_type { 
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
typedef typename _Promote_to_float< _Ty1> ::type _Ty1f; 
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
typedef typename _Promote_to_float< _Ty2> ::type _Ty2f; 
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
typedef typename conditional< is_same< typename _Promote_to_float< _Ty1> ::type, long double> ::value || is_same< typename _Promote_to_float< _Ty2> ::type, long double> ::value, long double, typename conditional< is_same< typename _Promote_to_float< _Ty1> ::type, double> ::value || is_same< typename _Promote_to_float< _Ty2> ::type, double> ::value, double, float> ::type> ::type type; 
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
}; 
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
}
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
template < class _Ty1,
 class _Ty2 > inline
 typename :: std :: enable_if < :: std :: is_arithmetic < _Ty1 > :: value
  && :: std :: is_arithmetic < _Ty2 > :: value,
  typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type
 pow ( const _Ty1 _Left, const _Ty2 _Right )
 {
 typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type;
 return ( :: pow ( type ( _Left ), type ( _Right ) ) );
 }
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl acos(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type acos ( _Ty _Left ) { return ( :: acos ( ( double ) _Left ) ); }
#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl asin(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type asin ( _Ty _Left ) { return ( :: asin ( ( double ) _Left ) ); }
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl atan(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type atan ( _Ty _Left ) { return ( :: atan ( ( double ) _Left ) ); }
#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl atan2(double, double); template < class _Ty1, class _Ty2 > inline typename :: std :: enable_if < :: std :: is_arithmetic < _Ty1 > :: value && :: std :: is_arithmetic < _Ty2 > :: value, typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type atan2 ( _Ty1 _Left, _Ty2 _Right ) { typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type; return ( :: atan2 ( ( type ) _Left, ( type ) _Right ) ); }
#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl ceil(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type ceil ( _Ty _Left ) { return ( :: ceil ( ( double ) _Left ) ); }
#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl cos(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type cos ( _Ty _Left ) { return ( :: cos ( ( double ) _Left ) ); }
#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl cosh(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type cosh ( _Ty _Left ) { return ( :: cosh ( ( double ) _Left ) ); }
#line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl exp(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type exp ( _Ty _Left ) { return ( :: exp ( ( double ) _Left ) ); }
#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl fabs(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type fabs ( _Ty _Left ) { return ( :: fabs ( ( double ) _Left ) ); }
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl floor(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type floor ( _Ty _Left ) { return ( :: floor ( ( double ) _Left ) ); }
#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl fmod(double, double); template < class _Ty1, class _Ty2 > inline typename :: std :: enable_if < :: std :: is_arithmetic < _Ty1 > :: value && :: std :: is_arithmetic < _Ty2 > :: value, typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type fmod ( _Ty1 _Left, _Ty2 _Right ) { typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type; return ( :: fmod ( ( type ) _Left, ( type ) _Right ) ); }
#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl frexp(double, int *); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type frexp ( _Ty _Left, int * _Arg2 ) { return ( :: frexp ( ( double ) _Left, _Arg2 ) ); }
#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl ldexp(double, int); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type ldexp ( _Ty _Left, int _Arg2 ) { return ( :: ldexp ( ( double ) _Left, _Arg2 ) ); }
#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl log(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type log ( _Ty _Left ) { return ( :: log ( ( double ) _Left ) ); }
#line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl log10(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type log10 ( _Ty _Left ) { return ( :: log10 ( ( double ) _Left ) ); }
#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl sin(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type sin ( _Ty _Left ) { return ( :: sin ( ( double ) _Left ) ); }
#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl sinh(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type sinh ( _Ty _Left ) { return ( :: sinh ( ( double ) _Left ) ); }
#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl sqrt(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type sqrt ( _Ty _Left ) { return ( :: sqrt ( ( double ) _Left ) ); }
#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl tan(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type tan ( _Ty _Left ) { return ( :: tan ( ( double ) _Left ) ); }
#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl tanh(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type tanh ( _Ty _Left ) { return ( :: tanh ( ( double ) _Left ) ); }
#line 125 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
inline float _Fma(float _Left, float _Middle, float _Right) 
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
{ 
#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
return ::fmaf(_Left, _Middle, _Right); 
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
} 
#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
inline double _Fma(double _Left, double _Middle, double _Right) 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
{ 
#line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
return ::fma(_Left, _Middle, _Right); 
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
} 
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
inline long double _Fma(long double _Left, long double _Middle, long double 
#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
_Right) 
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
{ 
#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
return ::fmal(_Left, _Middle, _Right); 
#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
} 
#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
template < class _Ty1,
 class _Ty2,
 class _Ty3 > inline
 typename :: std :: _Common_float_type < _Ty1,
  typename :: std :: _Common_float_type < _Ty2, _Ty3 > :: type > :: type
 fma ( _Ty1 _Left, _Ty2 _Middle, _Ty3 _Right )
 {
 typedef typename :: std :: _Common_float_type < _Ty1,
  typename :: std :: _Common_float_type < _Ty2, _Ty3 > :: type > :: type type;
 return ( _Fma ( ( type ) _Left, ( type ) _Middle, ( type ) _Right ) );
 }
#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
inline float _Remquo(float _Left, float _Right, int *_Pquo) 
#line 156 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
{ 
#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
return ::remquof(_Left, _Right, _Pquo); 
#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
} 
#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
inline double _Remquo(double _Left, double _Right, int *_Pquo) 
#line 161 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
{ 
#line 162 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
return ::remquo(_Left, _Right, _Pquo); 
#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
} 
#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
inline long double _Remquo(long double _Left, long double _Right, int *_Pquo) 
#line 166 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
{ 
#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
return ::remquol(_Left, _Right, _Pquo); 
#line 168 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
} 
#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
template < class _Ty1,
 class _Ty2 > inline
 typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type
 remquo ( _Ty1 _Left, _Ty2 _Right, int * _Pquo )
 {
 typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type;
 return ( _Remquo ( ( type ) _Left, ( type ) _Right, _Pquo ) );
 }
#line 179 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl acosh(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type acosh ( _Ty _Left ) { return ( :: acosh ( ( double ) _Left ) ); }
#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl asinh(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type asinh ( _Ty _Left ) { return ( :: asinh ( ( double ) _Left ) ); }
#line 181 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl atanh(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type atanh ( _Ty _Left ) { return ( :: atanh ( ( double ) _Left ) ); }
#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl cbrt(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type cbrt ( _Ty _Left ) { return ( :: cbrt ( ( double ) _Left ) ); }
#line 183 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl copysign(double, double); template < class _Ty1, class _Ty2 > inline typename :: std :: enable_if < :: std :: is_arithmetic < _Ty1 > :: value && :: std :: is_arithmetic < _Ty2 > :: value, typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type copysign ( _Ty1 _Left, _Ty2 _Right ) { typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type; return ( :: copysign ( ( type ) _Left, ( type ) _Right ) ); }
#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl erf(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type erf ( _Ty _Left ) { return ( :: erf ( ( double ) _Left ) ); }
#line 185 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl erfc(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type erfc ( _Ty _Left ) { return ( :: erfc ( ( double ) _Left ) ); }
#line 186 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl expm1(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type expm1 ( _Ty _Left ) { return ( :: expm1 ( ( double ) _Left ) ); }
#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl exp2(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type exp2 ( _Ty _Left ) { return ( :: exp2 ( ( double ) _Left ) ); }
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl fdim(double, double); template < class _Ty1, class _Ty2 > inline typename :: std :: enable_if < :: std :: is_arithmetic < _Ty1 > :: value && :: std :: is_arithmetic < _Ty2 > :: value, typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type fdim ( _Ty1 _Left, _Ty2 _Right ) { typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type; return ( :: fdim ( ( type ) _Left, ( type ) _Right ) ); }
#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl fmax(double, double); template < class _Ty1, class _Ty2 > inline typename :: std :: enable_if < :: std :: is_arithmetic < _Ty1 > :: value && :: std :: is_arithmetic < _Ty2 > :: value, typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type fmax ( _Ty1 _Left, _Ty2 _Right ) { typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type; return ( :: fmax ( ( type ) _Left, ( type ) _Right ) ); }
#line 191 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl fmin(double, double); template < class _Ty1, class _Ty2 > inline typename :: std :: enable_if < :: std :: is_arithmetic < _Ty1 > :: value && :: std :: is_arithmetic < _Ty2 > :: value, typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type fmin ( _Ty1 _Left, _Ty2 _Right ) { typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type; return ( :: fmin ( ( type ) _Left, ( type ) _Right ) ); }
#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl hypot(double, double); template < class _Ty1, class _Ty2 > inline typename :: std :: enable_if < :: std :: is_arithmetic < _Ty1 > :: value && :: std :: is_arithmetic < _Ty2 > :: value, typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type hypot ( _Ty1 _Left, _Ty2 _Right ) { typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type; return ( :: hypot ( ( type ) _Left, ( type ) _Right ) ); }
#line 193 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) int __cdecl ilogb(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, int > :: type ilogb ( _Ty _Left ) { return ( :: ilogb ( ( double ) _Left ) ); }
#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl lgamma(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type lgamma ( _Ty _Left ) { return ( :: lgamma ( ( double ) _Left ) ); }
#line 195 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) __int64 __cdecl llrint(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, long long > :: type llrint ( _Ty _Left ) { return ( :: llrint ( ( double ) _Left ) ); }
#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) __int64 __cdecl llround(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, long long > :: type llround ( _Ty _Left ) { return ( :: llround ( ( double ) _Left ) ); }
#line 197 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl log1p(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type log1p ( _Ty _Left ) { return ( :: log1p ( ( double ) _Left ) ); }
#line 198 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl log2(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type log2 ( _Ty _Left ) { return ( :: log2 ( ( double ) _Left ) ); }
#line 199 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl logb(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type logb ( _Ty _Left ) { return ( :: logb ( ( double ) _Left ) ); }
#line 200 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) long __cdecl lrint(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, long > :: type lrint ( _Ty _Left ) { return ( :: lrint ( ( double ) _Left ) ); }
#line 201 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) long __cdecl lround(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, long > :: type lround ( _Ty _Left ) { return ( :: lround ( ( double ) _Left ) ); }
#line 202 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl nearbyint(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type nearbyint ( _Ty _Left ) { return ( :: nearbyint ( ( double ) _Left ) ); }
#line 203 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl nextafter(double, double); template < class _Ty1, class _Ty2 > inline typename :: std :: enable_if < :: std :: is_arithmetic < _Ty1 > :: value && :: std :: is_arithmetic < _Ty2 > :: value, typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type nextafter ( _Ty1 _Left, _Ty2 _Right ) { typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type; return ( :: nextafter ( ( type ) _Left, ( type ) _Right ) ); }
#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl nexttoward(double, long double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type nexttoward ( _Ty _Left, long double _Arg2 ) { return ( :: nexttoward ( ( double ) _Left, _Arg2 ) ); }
#line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl remainder(double, double); template < class _Ty1, class _Ty2 > inline typename :: std :: enable_if < :: std :: is_arithmetic < _Ty1 > :: value && :: std :: is_arithmetic < _Ty2 > :: value, typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type remainder ( _Ty1 _Left, _Ty2 _Right ) { typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type; return ( :: remainder ( ( type ) _Left, ( type ) _Right ) ); }
#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl rint(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type rint ( _Ty _Left ) { return ( :: rint ( ( double ) _Left ) ); }
#line 208 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl round(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type round ( _Ty _Left ) { return ( :: round ( ( double ) _Left ) ); }
#line 209 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl scalbln(double, long); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type scalbln ( _Ty _Left, long _Arg2 ) { return ( :: scalbln ( ( double ) _Left, _Arg2 ) ); }
#line 210 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl scalbn(double, int); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type scalbn ( _Ty _Left, int _Arg2 ) { return ( :: scalbn ( ( double ) _Left, _Arg2 ) ); }
#line 211 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl tgamma(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type tgamma ( _Ty _Left ) { return ( :: tgamma ( ( double ) _Left ) ); }
#line 212 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl trunc(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type trunc ( _Ty _Left ) { return ( :: trunc ( ( double ) _Left ) ); }
#line 215 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
#pragma warning(pop)
#pragma pack ( pop )
#line 651 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
namespace std { 
#line 652 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::abs;using ::acos;using ::asin;
#line 653 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::atan;using ::atan2;using ::ceil;
#line 654 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::cos;using ::cosh;using ::exp;
#line 655 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::fabs;using ::floor;using ::fmod;
#line 656 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::frexp;using ::ldexp;using ::log;
#line 657 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::log10;using ::modf;using ::pow;
#line 658 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::sin;using ::sinh;using ::sqrt;
#line 659 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::tan;using ::tanh;
#line 661 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::acosf;using ::asinf;
#line 662 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::atanf;using ::atan2f;using ::ceilf;
#line 663 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::cosf;using ::coshf;using ::expf;
#line 664 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::fabsf;using ::floorf;using ::fmodf;
#line 665 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::frexpf;using ::ldexpf;using ::logf;
#line 666 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::log10f;using ::modff;using ::powf;
#line 667 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::sinf;using ::sinhf;using ::sqrtf;
#line 668 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::tanf;using ::tanhf;
#line 670 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::acosl;using ::asinl;
#line 671 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::atanl;using ::atan2l;using ::ceill;
#line 672 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::cosl;using ::coshl;using ::expl;
#line 673 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::fabsl;using ::floorl;using ::fmodl;
#line 674 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::frexpl;using ::ldexpl;using ::logl;
#line 675 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::log10l;using ::modfl;using ::powl;
#line 676 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::sinl;using ::sinhl;using ::sqrtl;
#line 677 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::tanl;using ::tanhl;
#line 679 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::float_t;using ::double_t;
#line 681 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::acosh;using ::asinh;using ::atanh;
#line 682 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::cbrt;using ::erf;using ::erfc;
#line 683 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::expm1;using ::exp2;
#line 684 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::hypot;using ::ilogb;using ::lgamma;
#line 685 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::log1p;using ::log2;using ::logb;
#line 686 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::llrint;using ::lrint;using ::nearbyint;
#line 687 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::rint;using ::llround;using ::lround;
#line 688 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::fdim;using ::fma;using ::fmax;using ::fmin;
#line 689 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::round;using ::trunc;
#line 690 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::remainder;using ::remquo;
#line 691 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::copysign;using ::nan;using ::nextafter;
#line 692 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::scalbn;using ::scalbln;
#line 693 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::nexttoward;using ::tgamma;
#line 695 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::acoshf;using ::asinhf;using ::atanhf;
#line 696 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::cbrtf;using ::erff;using ::erfcf;
#line 697 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::expm1f;using ::exp2f;
#line 698 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::hypotf;using ::ilogbf;using ::lgammaf;
#line 699 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::log1pf;using ::log2f;using ::logbf;
#line 700 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::llrintf;using ::lrintf;using ::nearbyintf;
#line 701 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::rintf;using ::llroundf;using ::lroundf;
#line 702 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::fdimf;using ::fmaf;using ::fmaxf;using ::fminf;
#line 703 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::roundf;using ::truncf;
#line 704 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::remainderf;using ::remquof;
#line 705 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::copysignf;using ::nanf;
#line 706 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::nextafterf;using ::scalbnf;using ::scalblnf;
#line 707 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::nexttowardf;using ::tgammaf;
#line 709 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::acoshl;using ::asinhl;using ::atanhl;
#line 710 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::cbrtl;using ::erfl;using ::erfcl;
#line 711 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::expm1l;using ::exp2l;
#line 712 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::hypotl;using ::ilogbl;using ::lgammal;
#line 713 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::log1pl;using ::log2l;using ::logbl;
#line 714 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::llrintl;using ::lrintl;using ::nearbyintl;
#line 715 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::rintl;using ::llroundl;using ::lroundl;
#line 716 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::fdiml;using ::fmal;using ::fmaxl;using ::fminl;
#line 717 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::roundl;using ::truncl;
#line 718 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::remainderl;using ::remquol;
#line 719 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::copysignl;using ::nanl;
#line 720 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::nextafterl;using ::scalbnl;using ::scalblnl;
#line 721 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::nexttowardl;using ::tgammal;
#line 723 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::fpclassify;using ::signbit;
#line 724 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::isfinite;using ::isinf;
#line 725 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::isnan;using ::isnormal;
#line 726 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::isgreater;using ::isgreaterequal;
#line 727 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::isless;using ::islessequal;
#line 728 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::islessgreater;using ::isunordered;
#line 729 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
}
#line 9034 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) double __cdecl _hypot(double x, double y); 
#line 9035 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) float __cdecl _hypotf(float x, float y); 
#line 9045 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline bool signbit(long double) throw(); 
#line 9046 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) int _ldsign(long double); 
#line 9089 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline bool signbit(double) throw(); 
#line 9090 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) int _dsign(double); 
#line 9134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline bool signbit(float) throw(); 
#line 9135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) int _fdsign(float); 
#line 9143 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static __inline bool isinf(long double a); 
#line 9178 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static __inline bool isinf(double a); 
#line 9216 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static __inline bool isinf(float a); 
#line 9223 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static __inline bool isnan(long double a); 
#line 9256 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static __inline bool isnan(double a); 
#line 9292 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static __inline bool isnan(float a); 
#line 9299 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static __inline bool isfinite(long double a); 
#line 9336 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static __inline bool isfinite(double a); 
#line 9372 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static __inline bool isfinite(float a); 
#line 9380 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
template< class T> extern T _Pow_int(T, int) throw(); 
#line 9381 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline __int64 abs(__int64) throw(); 
#line 9452 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline long __cdecl abs(long) throw(); 
#line 9456 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl abs(float) throw(); 
#line 9457 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline double __cdecl abs(double) throw(); 
#line 9458 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl fabs(float) throw(); 
#line 9459 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl ceil(float) throw(); 
#line 9460 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl floor(float) throw(); 
#line 9461 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl sqrt(float) throw(); 
#line 9462 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl pow(float, float) throw(); 
#line 9487 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl pow(float, int) throw(); 
#line 9488 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline double __cdecl pow(double, int) throw(); 
#line 9491 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl log(float) throw(); 
#line 9492 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl log10(float) throw(); 
#line 9493 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl fmod(float, float) throw(); 
#line 9494 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl modf(float, float *) throw(); 
#line 9495 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl exp(float) throw(); 
#line 9496 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl frexp(float, int *) throw(); 
#line 9497 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl ldexp(float, int) throw(); 
#line 9498 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl asin(float) throw(); 
#line 9499 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl sin(float) throw(); 
#line 9500 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl sinh(float) throw(); 
#line 9501 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl acos(float) throw(); 
#line 9502 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl cos(float) throw(); 
#line 9503 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl cosh(float) throw(); 
#line 9504 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl atan(float) throw(); 
#line 9505 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl atan2(float, float) throw(); 
#line 9506 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl tan(float) throw(); 
#line 9507 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl tanh(float) throw(); 
#line 9681 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl logb(float) throw(); 
#line 9682 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline int __cdecl ilogb(float) throw(); 
#line 9683 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float __cdecl scalbn(float, float) throw(); 
#line 9684 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl scalbln(float, long) throw(); 
#line 9685 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl exp2(float) throw(); 
#line 9686 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl expm1(float) throw(); 
#line 9687 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl log2(float) throw(); 
#line 9688 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl log1p(float) throw(); 
#line 9689 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl acosh(float) throw(); 
#line 9690 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl asinh(float) throw(); 
#line 9691 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl atanh(float) throw(); 
#line 9692 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl hypot(float, float) throw(); 
#line 9693 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float __cdecl norm3d(float, float, float) throw(); 
#line 9694 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float __cdecl norm4d(float, float, float, float) throw(); 
#line 9695 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl cbrt(float) throw(); 
#line 9696 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl erf(float) throw(); 
#line 9697 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl erfc(float) throw(); 
#line 9698 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl lgamma(float) throw(); 
#line 9699 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl tgamma(float) throw(); 
#line 9700 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl copysign(float, float) throw(); 
#line 9701 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl nextafter(float, float) throw(); 
#line 9702 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl remainder(float, float) throw(); 
#line 9703 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl remquo(float, float, int *) throw(); 
#line 9704 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl round(float) throw(); 
#line 9705 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline long __cdecl lround(float) throw(); 
#line 9706 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline __int64 __cdecl llround(float) throw(); 
#line 9707 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl trunc(float) throw(); 
#line 9708 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl rint(float) throw(); 
#line 9709 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline long __cdecl lrint(float) throw(); 
#line 9710 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline __int64 __cdecl llrint(float) throw(); 
#line 9711 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl nearbyint(float) throw(); 
#line 9712 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl fdim(float, float) throw(); 
#line 9713 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl fma(float, float, float) throw(); 
#line 9714 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl fmax(float, float) throw(); 
#line 9715 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl fmin(float, float) throw(); 
#line 9718 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float exp10(float a); 
#line 9720 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float rsqrt(float a); 
#line 9722 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float rcbrt(float a); 
#line 9724 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float sinpi(float a); 
#line 9726 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float cospi(float a); 
#line 9728 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline void sincospi(float a, float * sptr, float * cptr); 
#line 9730 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline void sincos(float a, float * sptr, float * cptr); 
#line 9732 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float j0(float a); 
#line 9734 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float j1(float a); 
#line 9736 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float jn(int n, float a); 
#line 9738 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float y0(float a); 
#line 9740 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float y1(float a); 
#line 9742 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float yn(int n, float a); 
#line 9744 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float cyl_bessel_i0(float a); 
#line 9746 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float cyl_bessel_i1(float a); 
#line 9748 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float erfinv(float a); 
#line 9750 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float erfcinv(float a); 
#line 9752 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float normcdfinv(float a); 
#line 9754 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float normcdf(float a); 
#line 9756 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float erfcx(float a); 
#line 9758 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline double copysign(double a, float b); 
#line 9760 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float copysign(float a, double b); 
#line 9762 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned min(unsigned a, unsigned b); 
#line 9764 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned min(int a, unsigned b); 
#line 9766 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned min(unsigned a, int b); 
#line 9768 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline long min(long a, long b); 
#line 9770 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned long min(unsigned long a, unsigned long b); 
#line 9772 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned long min(long a, unsigned long b); 
#line 9774 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned long min(unsigned long a, long b); 
#line 9776 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline __int64 min(__int64 a, __int64 b); 
#line 9778 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned __int64 min(unsigned __int64 a, unsigned __int64 b); 
#line 9780 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned __int64 min(__int64 a, unsigned __int64 b); 
#line 9782 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned __int64 min(unsigned __int64 a, __int64 b); 
#line 9784 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float min(float a, float b); 
#line 9786 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline double min(double a, double b); 
#line 9788 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline double min(float a, double b); 
#line 9790 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline double min(double a, float b); 
#line 9792 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned max(unsigned a, unsigned b); 
#line 9794 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned max(int a, unsigned b); 
#line 9796 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned max(unsigned a, int b); 
#line 9798 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline long max(long a, long b); 
#line 9800 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned long max(unsigned long a, unsigned long b); 
#line 9802 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned long max(long a, unsigned long b); 
#line 9804 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned long max(unsigned long a, long b); 
#line 9806 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline __int64 max(__int64 a, __int64 b); 
#line 9808 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned __int64 max(unsigned __int64 a, unsigned __int64 b); 
#line 9810 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned __int64 max(__int64 a, unsigned __int64 b); 
#line 9812 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned __int64 max(unsigned __int64 a, __int64 b); 
#line 9814 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float max(float a, float b); 
#line 9816 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline double max(double a, double b); 
#line 9818 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline double max(float a, double b); 
#line 9820 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline double max(double a, float b); 
#line 354 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline bool isinf(long double a) 
#line 355 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 359 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return isinf< long double> (a); 
#line 361 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 370 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline bool isinf(double a) 
#line 371 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 375 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return isinf< double> (a); 
#line 377 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 386 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline bool isinf(float a) 
#line 387 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 391 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return isinf< float> (a); 
#line 393 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 402 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline bool isnan(long double a) 
#line 403 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 407 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return isnan< long double> (a); 
#line 409 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 418 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline bool isnan(double a) 
#line 419 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 423 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return isnan< double> (a); 
#line 425 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 434 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline bool isnan(float a) 
#line 435 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 439 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return isnan< float> (a); 
#line 441 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 450 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline bool isfinite(long double a) 
#line 451 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 455 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return isfinite< long double> (a); 
#line 457 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 466 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline bool isfinite(double a) 
#line 467 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 471 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return isfinite< double> (a); 
#line 473 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 482 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline bool isfinite(float a) 
#line 483 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 487 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return isfinite< float> (a); 
#line 489 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 681 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float exp10(float a) 
#line 682 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 683 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return exp10f(a); 
#line 684 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 686 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float rsqrt(float a) 
#line 687 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 688 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return rsqrtf(a); 
#line 689 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 691 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float rcbrt(float a) 
#line 692 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 693 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return rcbrtf(a); 
#line 694 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 696 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float sinpi(float a) 
#line 697 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 698 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return sinpif(a); 
#line 699 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 701 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float cospi(float a) 
#line 702 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 703 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return cospif(a); 
#line 704 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 706 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline void sincospi(float a, float *sptr, float *cptr) 
#line 707 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 708 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
sincospif(a, sptr, cptr); 
#line 709 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 711 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline void sincos(float a, float *sptr, float *cptr) 
#line 712 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 713 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
sincosf(a, sptr, cptr); 
#line 714 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 716 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float j0(float a) 
#line 717 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 718 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return j0f(a); 
#line 719 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 721 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float j1(float a) 
#line 722 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 723 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return j1f(a); 
#line 724 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 726 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float jn(int n, float a) 
#line 727 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 728 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return jnf(n, a); 
#line 729 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 731 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float y0(float a) 
#line 732 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 733 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return y0f(a); 
#line 734 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 736 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float y1(float a) 
#line 737 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 738 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return y1f(a); 
#line 739 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 741 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float yn(int n, float a) 
#line 742 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 743 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return ynf(n, a); 
#line 744 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 746 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float cyl_bessel_i0(float a) 
#line 747 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 748 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return cyl_bessel_i0f(a); 
#line 749 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 751 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float cyl_bessel_i1(float a) 
#line 752 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 753 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return cyl_bessel_i1f(a); 
#line 754 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 756 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float erfinv(float a) 
#line 757 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 758 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return erfinvf(a); 
#line 759 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 761 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float erfcinv(float a) 
#line 762 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 763 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return erfcinvf(a); 
#line 764 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 766 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float normcdfinv(float a) 
#line 767 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 768 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return normcdfinvf(a); 
#line 769 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 771 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float normcdf(float a) 
#line 772 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 773 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return normcdff(a); 
#line 774 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 776 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float erfcx(float a) 
#line 777 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 778 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return erfcxf(a); 
#line 779 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 781 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline double copysign(double a, float b) 
#line 782 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 783 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return copysign(a, (double)b); 
#line 784 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 786 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float copysign(float a, double b) 
#line 787 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 788 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return copysignf(a, (float)b); 
#line 789 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 791 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned min(unsigned a, unsigned b) 
#line 792 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 793 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return umin(a, b); 
#line 794 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 796 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned min(int a, unsigned b) 
#line 797 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 798 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return umin((unsigned)a, b); 
#line 799 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 801 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned min(unsigned a, int b) 
#line 802 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 803 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return umin(a, (unsigned)b); 
#line 804 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 806 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline long min(long a, long b) 
#line 807 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 810 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (disable: 4127)
#line 813 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
if (sizeof(long) == sizeof(int)) { 
#line 815 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (default: 4127)
#line 817 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (long)min((int)a, (int)b); 
#line 818 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} else { 
#line 819 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (long)llmin((__int64)a, (__int64)b); 
#line 820 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
}  
#line 821 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 823 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned long min(unsigned long a, unsigned long b) 
#line 824 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 826 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (disable: 4127)
#line 828 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 830 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (default: 4127)
#line 832 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (unsigned long)umin((unsigned)a, (unsigned)b); 
#line 833 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} else { 
#line 834 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (unsigned long)ullmin((unsigned __int64)a, (unsigned __int64)b); 
#line 835 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
}  
#line 836 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 838 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned long min(long a, unsigned long b) 
#line 839 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 841 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (disable: 4127)
#line 843 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 845 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (default: 4127)
#line 847 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (unsigned long)umin((unsigned)a, (unsigned)b); 
#line 848 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} else { 
#line 849 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (unsigned long)ullmin((unsigned __int64)a, (unsigned __int64)b); 
#line 850 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
}  
#line 851 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 853 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned long min(unsigned long a, long b) 
#line 854 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 856 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (disable: 4127)
#line 858 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 860 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (default: 4127)
#line 862 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (unsigned long)umin((unsigned)a, (unsigned)b); 
#line 863 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} else { 
#line 864 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (unsigned long)ullmin((unsigned __int64)a, (unsigned __int64)b); 
#line 865 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
}  
#line 866 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 868 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline __int64 min(__int64 a, __int64 b) 
#line 869 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 870 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return llmin(a, b); 
#line 871 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 873 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned __int64 min(unsigned __int64 a, unsigned __int64 b) 
#line 874 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 875 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return ullmin(a, b); 
#line 876 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 878 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned __int64 min(__int64 a, unsigned __int64 b) 
#line 879 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 880 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return ullmin((unsigned __int64)a, b); 
#line 881 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 883 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned __int64 min(unsigned __int64 a, __int64 b) 
#line 884 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 885 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return ullmin(a, (unsigned __int64)b); 
#line 886 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 888 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float min(float a, float b) 
#line 889 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 890 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return fminf(a, b); 
#line 891 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 893 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline double min(double a, double b) 
#line 894 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 895 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return fmin(a, b); 
#line 896 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 898 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline double min(float a, double b) 
#line 899 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 900 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return fmin((double)a, b); 
#line 901 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 903 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline double min(double a, float b) 
#line 904 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 905 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return fmin(a, (double)b); 
#line 906 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 908 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned max(unsigned a, unsigned b) 
#line 909 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 910 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return umax(a, b); 
#line 911 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 913 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned max(int a, unsigned b) 
#line 914 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 915 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return umax((unsigned)a, b); 
#line 916 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 918 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned max(unsigned a, int b) 
#line 919 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 920 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return umax(a, (unsigned)b); 
#line 921 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 923 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline long max(long a, long b) 
#line 924 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 927 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (disable: 4127)
#line 929 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
if (sizeof(long) == sizeof(int)) { 
#line 931 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (default: 4127)
#line 933 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (long)max((int)a, (int)b); 
#line 934 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} else { 
#line 935 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (long)llmax((__int64)a, (__int64)b); 
#line 936 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
}  
#line 937 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 939 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned long max(unsigned long a, unsigned long b) 
#line 940 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 942 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (disable: 4127)
#line 944 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 946 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (default: 4127)
#line 948 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (unsigned long)umax((unsigned)a, (unsigned)b); 
#line 949 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} else { 
#line 950 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (unsigned long)ullmax((unsigned __int64)a, (unsigned __int64)b); 
#line 951 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
}  
#line 952 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 954 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned long max(long a, unsigned long b) 
#line 955 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 957 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (disable: 4127)
#line 959 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 961 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (default: 4127)
#line 963 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (unsigned long)umax((unsigned)a, (unsigned)b); 
#line 964 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} else { 
#line 965 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (unsigned long)ullmax((unsigned __int64)a, (unsigned __int64)b); 
#line 966 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
}  
#line 967 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 969 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned long max(unsigned long a, long b) 
#line 970 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 972 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (disable: 4127)
#line 974 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 976 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (default: 4127)
#line 978 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (unsigned long)umax((unsigned)a, (unsigned)b); 
#line 979 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} else { 
#line 980 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (unsigned long)ullmax((unsigned __int64)a, (unsigned __int64)b); 
#line 981 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
}  
#line 982 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 984 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline __int64 max(__int64 a, __int64 b) 
#line 985 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 986 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return llmax(a, b); 
#line 987 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 989 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned __int64 max(unsigned __int64 a, unsigned __int64 b) 
#line 990 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 991 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return ullmax(a, b); 
#line 992 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 994 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned __int64 max(__int64 a, unsigned __int64 b) 
#line 995 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 996 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return ullmax((unsigned __int64)a, b); 
#line 997 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 999 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned __int64 max(unsigned __int64 a, __int64 b) 
#line 1000 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 1001 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return ullmax(a, (unsigned __int64)b); 
#line 1002 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 1004 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float max(float a, float b) 
#line 1005 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 1006 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return fmaxf(a, b); 
#line 1007 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 1009 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline double max(double a, double b) 
#line 1010 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 1011 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return fmax(a, b); 
#line 1012 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 1014 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline double max(float a, double b) 
#line 1015 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 1016 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return fmax((double)a, b); 
#line 1017 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 1019 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline double max(double a, float b) 
#line 1020 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 1021 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return fmax(a, (double)b); 
#line 1022 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 1028 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning(disable : 4211)
#line 1033 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline int min(int a, int b) 
#line 1034 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 1035 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (a < b) ? a : b; 
#line 1036 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 1038 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned umin(unsigned a, unsigned b) 
#line 1039 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 1040 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (a < b) ? a : b; 
#line 1041 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 1043 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline __int64 llmin(__int64 a, __int64 b) 
#line 1044 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 1045 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (a < b) ? a : b; 
#line 1046 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 1048 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned __int64 ullmin(unsigned __int64 a, unsigned __int64 
#line 1049 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
b) 
#line 1050 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 1051 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (a < b) ? a : b; 
#line 1052 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 1054 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline int max(int a, int b) 
#line 1055 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 1056 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (a > b) ? a : b; 
#line 1057 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 1059 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned umax(unsigned a, unsigned b) 
#line 1060 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 1061 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (a > b) ? a : b; 
#line 1062 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 1064 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline __int64 llmax(__int64 a, __int64 b) 
#line 1065 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 1066 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (a > b) ? a : b; 
#line 1067 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 1069 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned __int64 ullmax(unsigned __int64 a, unsigned __int64 
#line 1070 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
b) 
#line 1071 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 1072 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (a > b) ? a : b; 
#line 1073 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 1076 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning(default: 4211)
#line 77 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
template< class T, int dim = 1> 
#line 78 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
struct surface : public surfaceReference { 
#line 81 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
surface() 
#line 82 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
{ 
#line 83 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
(::surfaceReference::channelDesc) = cudaCreateChannelDesc< T> (); 
#line 84 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
} 
#line 86 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
surface(::cudaChannelFormatDesc desc) 
#line 87 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
{ 
#line 88 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
(::surfaceReference::channelDesc) = desc; 
#line 89 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
} 
#line 91 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
}; 
#line 93 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
template< int dim> 
#line 94 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
struct surface< void, dim>  : public surfaceReference { 
#line 97 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
surface() 
#line 98 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
{ 
#line 99 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
(::surfaceReference::channelDesc) = cudaCreateChannelDesc< void> (); 
#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
} 
#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
}; 
#line 77 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
template< class T, int texType = 1, cudaTextureReadMode mode = cudaReadModeElementType> 
#line 78 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
struct texture : public textureReference { 
#line 81 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
texture(int norm = 0, ::cudaTextureFilterMode 
#line 82 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
fMode = cudaFilterModePoint, ::cudaTextureAddressMode 
#line 83 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
aMode = cudaAddressModeClamp) 
#line 84 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
{ 
#line 85 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
(::textureReference::normalized) = norm; 
#line 86 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
(::textureReference::filterMode) = fMode; 
#line 87 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
((::textureReference::addressMode)[0]) = aMode; 
#line 88 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
((::textureReference::addressMode)[1]) = aMode; 
#line 89 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
((::textureReference::addressMode)[2]) = aMode; 
#line 90 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
(::textureReference::channelDesc) = cudaCreateChannelDesc< T> (); 
#line 91 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
(::textureReference::sRGB) = 0; 
#line 92 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
} 
#line 94 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
texture(int norm, ::cudaTextureFilterMode 
#line 95 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
fMode, ::cudaTextureAddressMode 
#line 96 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
aMode, ::cudaChannelFormatDesc 
#line 97 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
desc) 
#line 98 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
{ 
#line 99 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
(::textureReference::normalized) = norm; 
#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
(::textureReference::filterMode) = fMode; 
#line 101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
((::textureReference::addressMode)[0]) = aMode; 
#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
((::textureReference::addressMode)[1]) = aMode; 
#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
((::textureReference::addressMode)[2]) = aMode; 
#line 104 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
(::textureReference::channelDesc) = desc; 
#line 105 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
(::textureReference::sRGB) = 0; 
#line 106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
} 
#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
}; 
#line 90 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
extern "C" {
#line 3230 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
}
#line 3238 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline int mulhi(int a, int b); 
#line 3240 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline unsigned mulhi(unsigned a, unsigned b); 
#line 3242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline unsigned mulhi(int a, unsigned b); 
#line 3244 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline unsigned mulhi(unsigned a, int b); 
#line 3246 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline __int64 mul64hi(__int64 a, __int64 b); 
#line 3248 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline unsigned __int64 mul64hi(unsigned __int64 a, unsigned __int64 b); 
#line 3250 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline unsigned __int64 mul64hi(__int64 a, unsigned __int64 b); 
#line 3252 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline unsigned __int64 mul64hi(unsigned __int64 a, __int64 b); 
#line 3254 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline int float_as_int(float a); 
#line 3256 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline float int_as_float(int a); 
#line 3258 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline unsigned float_as_uint(float a); 
#line 3260 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline float uint_as_float(unsigned a); 
#line 3262 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline float saturate(float a); 
#line 3264 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline int mul24(int a, int b); 
#line 3266 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline unsigned umul24(unsigned a, unsigned b); 
#line 3268 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
__declspec(deprecated("Please use __trap() instead.")) static __inline void trap(); 
#line 3271 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
__declspec(deprecated("Please use __brkpt() instead.")) static __inline void brkpt(int c = 0); 
#line 3273 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
__declspec(deprecated("Please use __syncthreads() instead.")) static __inline void syncthreads(); 
#line 3275 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
__declspec(deprecated("Please use __prof_trigger() instead.")) static __inline void prof_trigger(int e); 
#line 3277 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
__declspec(deprecated("Please use __threadfence() instead.")) static __inline void threadfence(bool global = true); 
#line 3279 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline int float2int(float a, cudaRoundMode mode = cudaRoundZero); 
#line 3281 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline unsigned float2uint(float a, cudaRoundMode mode = cudaRoundZero); 
#line 3283 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline float int2float(int a, cudaRoundMode mode = cudaRoundNearest); 
#line 3285 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline float uint2float(unsigned a, cudaRoundMode mode = cudaRoundNearest); 
#line 83 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline int mulhi(int a, int b) 
#line 84 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;
#line 86 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 95 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 88 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline unsigned mulhi(unsigned a, unsigned b) 
#line 89 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;
#line 91 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 93 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline unsigned mulhi(int a, unsigned b) 
#line 94 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;
#line 96 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 105 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 98 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline unsigned mulhi(unsigned a, int b) 
#line 99 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;
#line 101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline __int64 mul64hi(__int64 a, __int64 b) 
#line 104 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;
#line 106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline unsigned __int64 mul64hi(unsigned __int64 a, unsigned __int64 b) 
#line 109 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;
#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline unsigned __int64 mul64hi(__int64 a, unsigned __int64 b) 
#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;
#line 116 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 125 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 118 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline unsigned __int64 mul64hi(unsigned __int64 a, __int64 b) 
#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;
#line 121 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline int float_as_int(float a) 
#line 124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;
#line 126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline float int_as_float(int a) 
#line 129 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;
#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 140 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline unsigned float_as_uint(float a) 
#line 134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;
#line 136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 145 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline float uint_as_float(unsigned a) 
#line 139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;
#line 141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 150 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline float saturate(float a) 
#line 143 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;
#line 145 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 154 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline int mul24(int a, int b) 
#line 148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;
#line 150 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 152 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline unsigned umul24(unsigned a, unsigned b) 
#line 153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;
#line 155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 164 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline void trap() 
#line 158 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;
#line 160 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 169 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 163 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline void brkpt(int c) 
#line 164 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)c;
#line 166 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 175 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 168 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline void syncthreads() 
#line 169 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;
#line 171 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 173 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline void prof_trigger(int e) 
#line 174 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)e;
#line 191 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}





































#line 230 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 193 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline void threadfence(bool global) 
#line 194 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)global;
#line 196 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 205 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 198 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline int float2int(float a, cudaRoundMode mode) 
#line 199 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
#line 204 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 213 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline unsigned float2uint(float a, cudaRoundMode mode) 
#line 207 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
#line 212 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline float int2float(int a, cudaRoundMode mode) 
#line 215 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
#line 220 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 229 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 222 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline float uint2float(unsigned a, cudaRoundMode mode) 
#line 223 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
#line 228 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 237 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline int atomicAdd(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 116 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned atomicAdd(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 118 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline int atomicSub(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned atomicSub(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline int atomicExch(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 121 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned atomicExch(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline float atomicExch(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 125 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline int atomicMin(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned atomicMin(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 132 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 129 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline int atomicMax(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned atomicMax(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned atomicInc(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned atomicDec(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 140 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 137 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline int atomicAnd(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned atomicAnd(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 144 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline int atomicOr(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 146 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 143 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned atomicOr(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 145 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline int atomicXor(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 150 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned atomicXor(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 152 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline int atomicCAS(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 154 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 151 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned atomicCAS(unsigned *address, unsigned compare, unsigned val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 156 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 164 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
extern "C" {
#line 175 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
}
#line 185 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned __int64 atomicAdd(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 190 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 187 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned __int64 atomicExch(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 192 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 189 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned __int64 atomicCAS(unsigned __int64 *address, unsigned __int64 compare, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 194 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 191 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline bool any(bool cond) {int volatile ___ = 1;(void)cond;::exit(___);}



#line 196 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 193 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline bool all(bool cond) {int volatile ___ = 1;(void)cond;::exit(___);}



#line 198 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 80 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
extern "C" {
#line 1134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
}
#line 1143 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
static __inline double fma(double a, double b, double c, cudaRoundMode mode); 
#line 1145 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
static __inline double dmul(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
#line 1147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
static __inline double dadd(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
#line 1149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
static __inline double dsub(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
#line 1151 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
static __inline int double2int(double a, cudaRoundMode mode = cudaRoundZero); 
#line 1153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
static __inline unsigned double2uint(double a, cudaRoundMode mode = cudaRoundZero); 
#line 1155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
static __inline __int64 double2ll(double a, cudaRoundMode mode = cudaRoundZero); 
#line 1157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
static __inline unsigned __int64 double2ull(double a, cudaRoundMode mode = cudaRoundZero); 
#line 1159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
static __inline double ll2double(__int64 a, cudaRoundMode mode = cudaRoundNearest); 
#line 1161 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
static __inline double ull2double(unsigned __int64 a, cudaRoundMode mode = cudaRoundNearest); 
#line 1163 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
static __inline double int2double(int a, cudaRoundMode mode = cudaRoundNearest); 
#line 1165 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
static __inline double uint2double(unsigned a, cudaRoundMode mode = cudaRoundNearest); 
#line 1167 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
static __inline double float2double(float a, cudaRoundMode mode = cudaRoundNearest); 
#line 85 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline double fma(double a, double b, double c, cudaRoundMode mode) 
#line 86 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;(void)c;(void)mode;
#line 91 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
::exit(___);}







#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
#line 93 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline double dmul(double a, double b, cudaRoundMode mode) 
#line 94 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
#line 99 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
::exit(___);}







#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
#line 101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline double dadd(double a, double b, cudaRoundMode mode) 
#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
::exit(___);}







#line 116 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
#line 109 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline double dsub(double a, double b, cudaRoundMode mode) 
#line 110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
::exit(___);}







#line 124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline int double2int(double a, cudaRoundMode mode) 
#line 118 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
::exit(___);}







#line 132 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
#line 125 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline unsigned double2uint(double a, cudaRoundMode mode) 
#line 126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
::exit(___);}







#line 140 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
#line 133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline __int64 double2ll(double a, cudaRoundMode mode) 
#line 134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
#line 139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
::exit(___);}







#line 148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
#line 141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline unsigned __int64 double2ull(double a, cudaRoundMode mode) 
#line 142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
#line 147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
::exit(___);}







#line 156 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
#line 149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline double ll2double(__int64 a, cudaRoundMode mode) 
#line 150 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
#line 155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
::exit(___);}







#line 164 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
#line 157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline double ull2double(unsigned __int64 a, cudaRoundMode mode) 
#line 158 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
#line 163 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
::exit(___);}







#line 172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
#line 165 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline double int2double(int a, cudaRoundMode mode) 
#line 166 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
#line 168 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
::exit(___);}







#line 177 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
#line 170 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline double uint2double(unsigned a, cudaRoundMode mode) 
#line 171 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
#line 173 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
::exit(___);}







#line 182 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
#line 175 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline double float2double(float a, cudaRoundMode mode) 
#line 176 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
#line 178 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
::exit(___);}







#line 187 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
#line 94 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.h"
static __inline float atomicAdd(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 99 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.h"
#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
static __inline __int64 atomicMin(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
#line 104 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
static __inline __int64 atomicMax(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 109 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
#line 106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
static __inline unsigned __int64 atomicMin(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
static __inline unsigned __int64 atomicMax(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
#line 110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
static __inline unsigned __int64 atomicAnd(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
static __inline unsigned __int64 atomicOr(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
static __inline unsigned __int64 atomicXor(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
#line 308 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline double atomicAdd(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 313 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 311 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicAdd_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 316 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 314 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicAdd_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 319 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 317 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicAdd_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 322 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 320 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicAdd_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 325 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 323 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicAdd_block(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 328 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 326 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicAdd_system(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 331 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 329 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline float atomicAdd_block(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 334 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 332 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline float atomicAdd_system(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 337 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 335 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline double atomicAdd_block(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 340 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 338 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline double atomicAdd_system(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 343 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 341 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicExch_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 346 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 344 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicExch_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 349 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 347 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicExch_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 352 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 350 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicExch_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 355 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 353 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicExch_block(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 358 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 356 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicExch_system(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 361 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 359 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline float atomicExch_block(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 364 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 362 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline float atomicExch_system(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 367 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 365 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicMin_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 370 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 368 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicMin_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 373 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 371 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicMin_block(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 376 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 374 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicMin_system(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 379 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 377 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicMin_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 382 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 380 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicMin_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 385 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 383 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicMin_block(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 388 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 386 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicMin_system(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 391 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 389 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicMax_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 394 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 392 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicMax_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 397 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 395 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicMax_block(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 400 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 398 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicMax_system(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 403 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 401 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicMax_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 406 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 404 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicMax_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 409 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 407 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicMax_block(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 412 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 410 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicMax_system(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 415 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 413 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicInc_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 418 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 416 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicInc_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 421 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 419 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicDec_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 424 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 422 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicDec_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 427 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 425 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicCAS_block(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 430 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 428 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicCAS_system(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 433 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 431 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicCAS_block(unsigned *address, unsigned compare, unsigned 
#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 437 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 435 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicCAS_system(unsigned *address, unsigned compare, unsigned 
#line 436 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 441 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 439 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicCAS_block(unsigned __int64 *address, unsigned __int64 
#line 440 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
compare, unsigned __int64 
#line 441 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 446 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 444 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicCAS_system(unsigned __int64 *address, unsigned __int64 
#line 445 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
compare, unsigned __int64 
#line 446 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 451 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 449 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicAnd_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 454 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 452 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicAnd_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 457 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 455 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicAnd_block(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 460 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 458 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicAnd_system(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 463 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 461 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicAnd_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 466 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 464 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicAnd_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 469 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 467 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicAnd_block(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 472 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 470 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicAnd_system(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 475 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 473 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicOr_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 478 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 476 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicOr_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 481 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 479 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicOr_block(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 484 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 482 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicOr_system(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 487 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 485 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicOr_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 490 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 488 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicOr_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 493 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 491 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicOr_block(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 496 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 494 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicOr_system(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 499 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 497 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicXor_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 502 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 500 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicXor_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 505 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 503 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicXor_block(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 506 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicXor_system(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 511 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicXor_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 514 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 512 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicXor_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 517 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 515 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicXor_block(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 520 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 518 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicXor_system(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 523 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 79 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
extern "C" {
#line 1466 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
}
#line 1475 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
static __inline unsigned ballot(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}



#line 1480 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
#line 1477 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
static __inline int syncthreads_count(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}



#line 1482 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
#line 1479 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
static __inline bool syncthreads_and(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}



#line 1484 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
#line 1481 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
static __inline bool syncthreads_or(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}



#line 1486 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
#line 1486 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
static __inline unsigned __isGlobal(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 1491 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
#line 98 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline int __shfl(int var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned __shfl(unsigned var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 105 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline int __shfl_up(int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned __shfl_up(unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 105 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline int __shfl_down(int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned __shfl_down(unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 109 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline int __shfl_xor(int var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned __shfl_xor(unsigned var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 116 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline float __shfl(float var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 118 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline float __shfl_up(float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline float __shfl_down(float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline float __shfl_xor(float var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline __int64 __shfl(__int64 var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned __int64 __shfl(unsigned __int64 var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 129 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline __int64 __shfl_up(__int64 var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned __int64 __shfl_up(unsigned __int64 var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline __int64 __shfl_down(__int64 var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 132 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned __int64 __shfl_down(unsigned __int64 var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 137 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline __int64 __shfl_xor(__int64 var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned __int64 __shfl_xor(unsigned __int64 var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline double __shfl(double var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 143 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 140 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline double __shfl_up(double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 145 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline double __shfl_down(double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 144 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline double __shfl_xor(double var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline long __shfl(long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 150 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned long __shfl(unsigned long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 152 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline long __shfl_up(long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 154 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned long __shfl_up(unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 156 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline long __shfl_down(long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 161 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 158 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned long __shfl_down(unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 163 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 160 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline long __shfl_xor(long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 165 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 162 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned long __shfl_xor(unsigned long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 167 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 89 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline long __ldg(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 94 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 90 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned long __ldg(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 95 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 92 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char __ldg(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 97 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 93 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline signed char __ldg(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 98 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 94 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short __ldg(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 99 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 95 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int __ldg(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 96 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline __int64 __ldg(const __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 97 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char2 __ldg(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 98 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char4 __ldg(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 99 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short2 __ldg(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 104 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short4 __ldg(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 105 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int2 __ldg(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int4 __ldg(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline longlong2 __ldg(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 105 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned char __ldg(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned short __ldg(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __ldg(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __int64 __ldg(const unsigned __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 109 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uchar2 __ldg(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uchar4 __ldg(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ushort2 __ldg(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 116 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ushort4 __ldg(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uint2 __ldg(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 118 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uint4 __ldg(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ulonglong2 __ldg(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float __ldg(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 118 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline double __ldg(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float2 __ldg(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float4 __ldg(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 125 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 121 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline double2 __ldg(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 125 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline long __ldcg(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned long __ldcg(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char __ldcg(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 129 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline signed char __ldcg(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short __ldcg(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int __ldcg(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 132 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline __int64 __ldcg(const __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 137 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char2 __ldcg(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char4 __ldcg(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short2 __ldcg(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 140 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short4 __ldcg(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 137 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int2 __ldcg(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int4 __ldcg(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 143 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline longlong2 __ldcg(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 144 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned char __ldcg(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 146 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned short __ldcg(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 143 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __ldcg(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 144 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __int64 __ldcg(const unsigned __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 145 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uchar2 __ldcg(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 150 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 146 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uchar4 __ldcg(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 151 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ushort2 __ldcg(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 152 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ushort4 __ldcg(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uint2 __ldcg(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 154 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 150 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uint4 __ldcg(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 151 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ulonglong2 __ldcg(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 156 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float __ldcg(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 158 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 154 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline double __ldcg(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float2 __ldcg(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 160 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 156 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float4 __ldcg(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 161 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline double2 __ldcg(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 162 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 161 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline long __ldca(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 166 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 162 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned long __ldca(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 167 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 164 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char __ldca(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 169 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 165 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline signed char __ldca(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 170 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 166 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short __ldca(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 171 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 167 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int __ldca(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 168 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline __int64 __ldca(const __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 173 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 169 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char2 __ldca(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 174 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 170 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char4 __ldca(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 175 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 171 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short2 __ldca(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 176 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short4 __ldca(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 177 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 173 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int2 __ldca(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 178 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 174 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int4 __ldca(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 179 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 175 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline longlong2 __ldca(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 177 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned char __ldca(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 182 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 178 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned short __ldca(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 183 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 179 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __ldca(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 184 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __int64 __ldca(const unsigned __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 185 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 181 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uchar2 __ldca(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 186 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 182 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uchar4 __ldca(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 187 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 183 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ushort2 __ldca(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 188 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 184 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ushort4 __ldca(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 189 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 185 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uint2 __ldca(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 190 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 186 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uint4 __ldca(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 191 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 187 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ulonglong2 __ldca(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 192 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 189 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float __ldca(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 194 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 190 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline double __ldca(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 195 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 191 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float2 __ldca(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 196 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 192 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float4 __ldca(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 197 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 193 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline double2 __ldca(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 198 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 197 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline long __ldcs(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 202 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 198 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned long __ldcs(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 203 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 200 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char __ldcs(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 205 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 201 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline signed char __ldcs(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 202 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short __ldcs(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 207 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 203 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int __ldcs(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 208 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 204 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline __int64 __ldcs(const __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 209 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 205 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char2 __ldcs(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 210 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char4 __ldcs(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 211 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 207 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short2 __ldcs(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 212 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 208 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short4 __ldcs(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 213 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 209 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int2 __ldcs(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 210 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int4 __ldcs(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 215 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 211 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline longlong2 __ldcs(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 216 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 213 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned char __ldcs(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned short __ldcs(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 219 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 215 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __ldcs(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 220 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 216 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __int64 __ldcs(const unsigned __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uchar2 __ldcs(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 222 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uchar4 __ldcs(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 223 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 219 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ushort2 __ldcs(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 224 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 220 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ushort4 __ldcs(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 225 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uint2 __ldcs(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 226 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 222 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uint4 __ldcs(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 227 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 223 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ulonglong2 __ldcs(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 228 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 225 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float __ldcs(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 230 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 226 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline double __ldcs(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 231 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 227 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float2 __ldcs(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 232 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 228 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float4 __ldcs(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 233 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 229 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline double2 __ldcs(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 234 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 236 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __funnelshift_l(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}



#line 241 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 237 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __funnelshift_lc(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}



#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 240 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __funnelshift_r(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}



#line 245 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 241 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __funnelshift_rc(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}



#line 246 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 91 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline int __dp2a_lo(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 96 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
#line 92 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline unsigned __dp2a_lo(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 97 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
#line 94 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline int __dp2a_lo(short2 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 99 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
#line 95 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline unsigned __dp2a_lo(ushort2 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
#line 97 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline int __dp2a_hi(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
#line 98 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline unsigned __dp2a_hi(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline int __dp2a_hi(short2 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 105 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
#line 101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline unsigned __dp2a_hi(ushort2 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline int __dp4a(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
#line 109 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline unsigned __dp4a(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline int __dp4a(char4 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 116 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline unsigned __dp4a(uchar4 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf1Dread(T *res, ::surface< void, 1>  surf, int x, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)s;(void)mode;
#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 118 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline T 
#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf1Dread(::surface< void, 1>  surf, int x, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 125 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf1Dread(T *res, ::surface< void, 1>  surf, int x, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)mode;
#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 260 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 261 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf2Dread(T *res, ::surface< void, 2>  surf, int x, int y, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 262 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)s;(void)mode;
#line 271 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 278 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 273 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline T 
#line 274 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf2Dread(::surface< void, 2>  surf, int x, int y, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 275 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 283 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 290 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 285 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 286 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf2Dread(T *res, ::surface< void, 2>  surf, int x, int y, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 287 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)mode;
#line 291 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 298 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 422 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 423 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf3Dread(T *res, ::surface< void, 3>  surf, int x, int y, int z, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 424 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)z;(void)s;(void)mode;
#line 433 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 440 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 435 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline T 
#line 436 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf3Dread(::surface< void, 3>  surf, int x, int y, int z, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 437 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 445 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 452 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 447 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 448 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf3Dread(T *res, ::surface< void, 3>  surf, int x, int y, int z, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 449 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 453 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 460 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 582 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 583 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf1DLayeredread(T *res, ::surface< void, 241>  surf, int x, int layer, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 584 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)layer;(void)s;(void)mode;
#line 593 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 600 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 595 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline T 
#line 596 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf1DLayeredread(::surface< void, 241>  surf, int x, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 597 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 605 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 612 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 607 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 608 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf1DLayeredread(T *res, ::surface< void, 241>  surf, int x, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 609 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)layer;(void)mode;
#line 613 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 620 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 768 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 769 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf2DLayeredread(T *res, ::surface< void, 242>  surf, int x, int y, int layer, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 770 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layer;(void)s;(void)mode;
#line 779 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 786 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 781 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline T 
#line 782 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf2DLayeredread(::surface< void, 242>  surf, int x, int y, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 783 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 791 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 798 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 793 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 794 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf2DLayeredread(T *res, ::surface< void, 242>  surf, int x, int y, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 795 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 799 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 806 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 919 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 920 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surfCubemapread(T *res, ::surface< void, 12>  surf, int x, int y, int face, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 921 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)face;(void)s;(void)mode;
#line 930 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 937 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 932 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline T 
#line 933 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surfCubemapread(::surface< void, 12>  surf, int x, int y, int face, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 934 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 942 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 949 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 944 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 945 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surfCubemapread(T *res, ::surface< void, 12>  surf, int x, int y, int face, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 946 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 950 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 957 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1070 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1071 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surfCubemapLayeredread(T *res, ::surface< void, 252>  surf, int x, int y, int layerFace, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1072 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layerFace;(void)s;(void)mode;
#line 1081 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 1088 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1083 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline T 
#line 1084 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surfCubemapLayeredread(::surface< void, 252>  surf, int x, int y, int layerFace, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1085 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1093 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 1100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1095 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1096 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surfCubemapLayeredread(T *res, ::surface< void, 252>  surf, int x, int y, int layerFace, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1097 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 1108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1232 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1233 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf1Dwrite(T val, ::surface< void, 1>  surf, int x, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1234 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)s;(void)mode;
#line 1254 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 1261 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1256 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1257 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf1Dwrite(T val, ::surface< void, 1>  surf, int x, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1258 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 1262 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 1269 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1377 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1378 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf2Dwrite(T val, ::surface< void, 2>  surf, int x, int y, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1379 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)s;(void)mode;
#line 1399 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 1406 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1401 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1402 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf2Dwrite(T val, ::surface< void, 2>  surf, int x, int y, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1403 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 1407 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 1414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1520 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1521 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf3Dwrite(T val, ::surface< void, 3>  surf, int x, int y, int z, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1522 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)s;(void)mode;
#line 1542 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 1549 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1544 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1545 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf3Dwrite(T val, ::surface< void, 3>  surf, int x, int y, int z, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1546 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 1550 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 1557 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1666 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> static __forceinline void 
#line 1667 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf1DLayeredwrite(T val, ::surface< void, 241>  surf, int x, int layer, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1668 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)s;(void)mode;
#line 1688 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 1695 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1690 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> static __forceinline void 
#line 1691 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf1DLayeredwrite(T val, ::surface< void, 241>  surf, int x, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1692 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 1696 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 1703 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1822 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1823 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf2DLayeredwrite(T val, ::surface< void, 242>  surf, int x, int y, int layer, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1824 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)s;(void)mode;
#line 1844 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 1851 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1846 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1847 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf2DLayeredwrite(T val, ::surface< void, 242>  surf, int x, int y, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1848 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1852 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 1859 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1958 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1959 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surfCubemapwrite(T val, ::surface< void, 12>  surf, int x, int y, int face, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1960 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)s;(void)mode;
#line 1980 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 1987 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1982 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1983 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surfCubemapwrite(T val, ::surface< void, 12>  surf, int x, int y, int face, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1984 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1988 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 1995 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 2093 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> static __forceinline void 
#line 2094 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surfCubemapLayeredwrite(T val, ::surface< void, 252>  surf, int x, int y, int layerFace, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 2095 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)s;(void)mode;
#line 2115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 2122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 2117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> static __forceinline void 
#line 2118 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surfCubemapLayeredwrite(T val, ::surface< void, 252>  surf, int x, int y, int layerFace, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 2119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 2130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 71 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex1Dfetch(texture< T, 1, cudaReadModeElementType> , int) {int volatile ___ = 1;::exit(___);}



#line 76 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 73 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> 
#line 74 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
struct __nv_tex_rmnf_ret { }; 
#line 76 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< char>  { typedef float type; }; 
#line 77 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< signed char>  { typedef float type; }; 
#line 78 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< unsigned char>  { typedef float type; }; 
#line 79 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< short>  { typedef float type; }; 
#line 80 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< unsigned short>  { typedef float type; }; 
#line 81 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< char1>  { typedef float1 type; }; 
#line 82 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< uchar1>  { typedef float1 type; }; 
#line 83 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< short1>  { typedef float1 type; }; 
#line 84 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< ushort1>  { typedef float1 type; }; 
#line 85 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< char2>  { typedef float2 type; }; 
#line 86 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< uchar2>  { typedef float2 type; }; 
#line 87 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< short2>  { typedef float2 type; }; 
#line 88 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< ushort2>  { typedef float2 type; }; 
#line 89 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< char4>  { typedef float4 type; }; 
#line 90 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< uchar4>  { typedef float4 type; }; 
#line 91 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< short4>  { typedef float4 type; }; 
#line 92 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< ushort4>  { typedef float4 type; }; 
#line 94 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 95 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex1Dfetch(texture< T, 1, cudaReadModeNormalizedFloat> , int) {int volatile ___ = 1;::exit(___);}



#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 215 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 216 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex1D(texture< T, 1, cudaReadModeElementType> , float) {int volatile ___ = 1;::exit(___);}



#line 221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 219 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex1D(texture< T, 1, cudaReadModeNormalizedFloat> , float) {int volatile ___ = 1;::exit(___);}



#line 224 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 345 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 346 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex2D(texture< T, 2, cudaReadModeElementType> , float, float) {int volatile ___ = 1;::exit(___);}



#line 351 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 348 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 349 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex2D(texture< T, 2, cudaReadModeNormalizedFloat> , float, float) {int volatile ___ = 1;::exit(___);}



#line 354 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 475 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 476 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex1DLayered(texture< T, 241, cudaReadModeElementType> , float, int) {int volatile ___ = 1;::exit(___);}



#line 481 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 478 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 479 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex1DLayered(texture< T, 241, cudaReadModeNormalizedFloat> , float, int) {int volatile ___ = 1;::exit(___);}



#line 484 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 603 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 604 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex2DLayered(texture< T, 242, cudaReadModeElementType> , float, float, int) {int volatile ___ = 1;::exit(___);}



#line 609 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 606 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 607 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex2DLayered(texture< T, 242, cudaReadModeNormalizedFloat> , float, float, int) {int volatile ___ = 1;::exit(___);}



#line 612 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 735 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 736 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex3D(texture< T, 3, cudaReadModeElementType> , float, float, float) {int volatile ___ = 1;::exit(___);}



#line 741 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 738 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 739 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex3D(texture< T, 3, cudaReadModeNormalizedFloat> , float, float, float) {int volatile ___ = 1;::exit(___);}



#line 744 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 864 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 865 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
texCubemap(texture< T, 12, cudaReadModeElementType> , float, float, float) {int volatile ___ = 1;::exit(___);}



#line 870 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 867 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 868 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
texCubemap(texture< T, 12, cudaReadModeNormalizedFloat> , float, float, float) {int volatile ___ = 1;::exit(___);}



#line 873 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 992 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 993 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
texCubemapLayered(texture< T, 252, cudaReadModeElementType> , float, float, float, int) {int volatile ___ = 1;::exit(___);}



#line 998 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 995 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 996 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
texCubemapLayered(texture< T, 252, cudaReadModeNormalizedFloat> , float, float, float, int) {int volatile ___ = 1;::exit(___);}



#line 1001 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1121 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> 
#line 1122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
struct __nv_tex2dgather_ret { }; 
#line 1123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< char>  { typedef char4 type; }; 
#line 1124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< signed char>  { typedef char4 type; }; 
#line 1125 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< char1>  { typedef char4 type; }; 
#line 1126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< char2>  { typedef char4 type; }; 
#line 1127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< char3>  { typedef char4 type; }; 
#line 1128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< char4>  { typedef char4 type; }; 
#line 1129 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< unsigned char>  { typedef uchar4 type; }; 
#line 1130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< uchar1>  { typedef uchar4 type; }; 
#line 1131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< uchar2>  { typedef uchar4 type; }; 
#line 1132 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< uchar3>  { typedef uchar4 type; }; 
#line 1133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< uchar4>  { typedef uchar4 type; }; 
#line 1135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< short>  { typedef short4 type; }; 
#line 1136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< short1>  { typedef short4 type; }; 
#line 1137 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< short2>  { typedef short4 type; }; 
#line 1138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< short3>  { typedef short4 type; }; 
#line 1139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< short4>  { typedef short4 type; }; 
#line 1140 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< unsigned short>  { typedef ushort4 type; }; 
#line 1141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< ushort1>  { typedef ushort4 type; }; 
#line 1142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< ushort2>  { typedef ushort4 type; }; 
#line 1143 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< ushort3>  { typedef ushort4 type; }; 
#line 1144 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< ushort4>  { typedef ushort4 type; }; 
#line 1146 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< int>  { typedef int4 type; }; 
#line 1147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< int1>  { typedef int4 type; }; 
#line 1148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< int2>  { typedef int4 type; }; 
#line 1149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< int3>  { typedef int4 type; }; 
#line 1150 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< int4>  { typedef int4 type; }; 
#line 1151 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< unsigned>  { typedef uint4 type; }; 
#line 1152 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< uint1>  { typedef uint4 type; }; 
#line 1153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< uint2>  { typedef uint4 type; }; 
#line 1154 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< uint3>  { typedef uint4 type; }; 
#line 1155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< uint4>  { typedef uint4 type; }; 
#line 1157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< float>  { typedef float4 type; }; 
#line 1158 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< float1>  { typedef float4 type; }; 
#line 1159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< float2>  { typedef float4 type; }; 
#line 1160 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< float3>  { typedef float4 type; }; 
#line 1161 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< float4>  { typedef float4 type; }; 
#line 1163 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex2dgather_ret< T> ::type 
#line 1164 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex2Dgather(texture< T, 2, cudaReadModeElementType> , float, float, int = 0) {int volatile ___ = 1;::exit(___);}



#line 1169 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1166 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static ::float4 
#line 1167 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex2Dgather(texture< T, 2, cudaReadModeNormalizedFloat> , float, float, int = 0) {int volatile ___ = 1;::exit(___);}



#line 1172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1232 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 1233 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex1DLod(texture< T, 1, cudaReadModeElementType> , float, float) {int volatile ___ = 1;::exit(___);}



#line 1238 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1235 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 1236 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex1DLod(texture< T, 1, cudaReadModeNormalizedFloat> , float, float) {int volatile ___ = 1;::exit(___);}



#line 1241 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1360 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 1361 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex2DLod(texture< T, 2, cudaReadModeElementType> , float, float, float) {int volatile ___ = 1;::exit(___);}



#line 1366 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1363 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 1364 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex2DLod(texture< T, 2, cudaReadModeNormalizedFloat> , float, float, float) {int volatile ___ = 1;::exit(___);}



#line 1369 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1484 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 1485 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex1DLayeredLod(texture< T, 241, cudaReadModeElementType> , float, int, float) {int volatile ___ = 1;::exit(___);}



#line 1490 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1487 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 1488 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex1DLayeredLod(texture< T, 241, cudaReadModeNormalizedFloat> , float, int, float) {int volatile ___ = 1;::exit(___);}



#line 1493 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1612 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 1613 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex2DLayeredLod(texture< T, 242, cudaReadModeElementType> , float, float, int, float) {int volatile ___ = 1;::exit(___);}



#line 1618 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1615 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 1616 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex2DLayeredLod(texture< T, 242, cudaReadModeNormalizedFloat> , float, float, int, float) {int volatile ___ = 1;::exit(___);}



#line 1621 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1740 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 1741 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex3DLod(texture< T, 3, cudaReadModeElementType> , float, float, float, float) {int volatile ___ = 1;::exit(___);}



#line 1746 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1743 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 1744 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex3DLod(texture< T, 3, cudaReadModeNormalizedFloat> , float, float, float, float) {int volatile ___ = 1;::exit(___);}



#line 1749 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1868 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 1869 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
texCubemapLod(texture< T, 12, cudaReadModeElementType> , float, float, float, float) {int volatile ___ = 1;::exit(___);}



#line 1874 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1871 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 1872 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
texCubemapLod(texture< T, 12, cudaReadModeNormalizedFloat> , float, float, float, float) {int volatile ___ = 1;::exit(___);}



#line 1877 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1996 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 1997 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
texCubemapLayeredLod(texture< T, 252, cudaReadModeElementType> , float, float, float, int, float) {int volatile ___ = 1;::exit(___);}



#line 2002 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1999 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 2000 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
texCubemapLayeredLod(texture< T, 252, cudaReadModeNormalizedFloat> , float, float, float, int, float) {int volatile ___ = 1;::exit(___);}



#line 2005 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 2124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 2125 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex1DGrad(texture< T, 1, cudaReadModeElementType> , float, float, float) {int volatile ___ = 1;::exit(___);}



#line 2130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 2127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 2128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex1DGrad(texture< T, 1, cudaReadModeNormalizedFloat> , float, float, float) {int volatile ___ = 1;::exit(___);}



#line 2133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 2252 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 2253 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex2DGrad(texture< T, 2, cudaReadModeElementType> , float, float, ::float2, ::float2) {int volatile ___ = 1;::exit(___);}



#line 2258 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 2255 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 2256 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex2DGrad(texture< T, 2, cudaReadModeNormalizedFloat> , float, float, ::float2, ::float2) {int volatile ___ = 1;::exit(___);}



#line 2261 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 2380 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 2381 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex1DLayeredGrad(texture< T, 241, cudaReadModeElementType> , float, int, float, float) {int volatile ___ = 1;::exit(___);}



#line 2386 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 2383 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 2384 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex1DLayeredGrad(texture< T, 241, cudaReadModeNormalizedFloat> , float, int, float, float) {int volatile ___ = 1;::exit(___);}



#line 2389 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 2509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 2510 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex2DLayeredGrad(texture< T, 242, cudaReadModeElementType> , float, float, int, ::float2, ::float2) {int volatile ___ = 1;::exit(___);}



#line 2515 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 2512 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 2513 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex2DLayeredGrad(texture< T, 242, cudaReadModeNormalizedFloat> , float, float, int, ::float2, ::float2) {int volatile ___ = 1;::exit(___);}



#line 2518 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 2637 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 2638 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex3DGrad(texture< T, 3, cudaReadModeElementType> , float, float, float, ::float4, ::float4) {int volatile ___ = 1;::exit(___);}



#line 2643 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 2640 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 2641 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex3DGrad(texture< T, 3, cudaReadModeNormalizedFloat> , float, float, float, ::float4, ::float4) {int volatile ___ = 1;::exit(___);}



#line 2646 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 67 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex1Dfetch(T *, ::cudaTextureObject_t, int) {int volatile ___ = 1;::exit(___);}



#line 73 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 121 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex1Dfetch(::cudaTextureObject_t texObject, int x) 
#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;
#line 127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 140 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex1D(T *, ::cudaTextureObject_t, float) {int volatile ___ = 1;::exit(___);}



#line 141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 190 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 191 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex1D(::cudaTextureObject_t texObject, float x) 
#line 192 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;
#line 196 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 209 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 205 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex2D(T *, ::cudaTextureObject_t, float, float) {int volatile ___ = 1;::exit(___);}



#line 211 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 258 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 259 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex2D(::cudaTextureObject_t texObject, float x, float y) 
#line 260 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;
#line 264 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 277 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 272 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 273 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex3D(T *, ::cudaTextureObject_t, float, float, float) {int volatile ___ = 1;::exit(___);}



#line 278 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 325 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 326 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex3D(::cudaTextureObject_t texObject, float x, float y, float z) 
#line 327 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;
#line 331 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 344 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 340 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 341 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex1DLayered(T *, ::cudaTextureObject_t, float, int) {int volatile ___ = 1;::exit(___);}



#line 346 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 393 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 394 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex1DLayered(::cudaTextureObject_t texObject, float x, int layer) 
#line 395 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;
#line 399 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 412 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 408 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 409 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex2DLayered(T *, ::cudaTextureObject_t, float, float, int) {int volatile ___ = 1;::exit(___);}



#line 414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 461 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 462 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex2DLayered(::cudaTextureObject_t texObject, float x, float y, int layer) 
#line 463 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;
#line 467 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 480 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 476 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 477 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
texCubemap(T *, ::cudaTextureObject_t, float, float, float) {int volatile ___ = 1;::exit(___);}



#line 482 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 529 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 530 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
texCubemap(::cudaTextureObject_t texObject, float x, float y, float z) 
#line 531 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;
#line 535 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 548 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 544 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 545 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
texCubemapLayered(T *, ::cudaTextureObject_t, float, float, float, int) {int volatile ___ = 1;::exit(___);}



#line 550 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 598 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 599 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
texCubemapLayered(::cudaTextureObject_t texObject, float x, float y, float z, int layer) 
#line 600 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
#line 604 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 617 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 613 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 614 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex2Dgather(T *, ::cudaTextureObject_t, float, float, int = 0) {int volatile ___ = 1;::exit(___);}



#line 619 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 660 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 661 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex2Dgather(::cudaTextureObject_t to, float x, float y, int comp = 0) 
#line 662 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)to;(void)x;(void)y;(void)comp;
#line 666 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 679 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 675 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 676 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex1DLod(T *, ::cudaTextureObject_t, float, float) {int volatile ___ = 1;::exit(___);}



#line 681 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 728 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 729 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex1DLod(::cudaTextureObject_t texObject, float x, float level) 
#line 730 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)level;
#line 734 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 747 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 743 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 744 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex2DLod(T *, ::cudaTextureObject_t, float, float, float) {int volatile ___ = 1;::exit(___);}



#line 749 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 797 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 798 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex2DLod(::cudaTextureObject_t texObject, float x, float y, float level) 
#line 799 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)level;
#line 803 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 816 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 812 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 813 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex3DLod(T *, ::cudaTextureObject_t, float, float, float, float) {int volatile ___ = 1;::exit(___);}



#line 818 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 865 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 866 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex3DLod(::cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 867 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 871 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 884 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 879 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 880 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex1DLayeredLod(T *, ::cudaTextureObject_t, float, int, float) {int volatile ___ = 1;::exit(___);}



#line 885 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 932 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 933 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex1DLayeredLod(::cudaTextureObject_t texObject, float x, int layer, float level) 
#line 934 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;(void)level;
#line 938 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 951 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 947 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 948 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex2DLayeredLod(T *, ::cudaTextureObject_t, float, float, int, float) {int volatile ___ = 1;::exit(___);}



#line 953 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1000 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 1001 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex2DLayeredLod(::cudaTextureObject_t texObject, float x, float y, int layer, float level) 
#line 1002 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
#line 1006 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 1019 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1014 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 1015 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
texCubemapLod(T *, ::cudaTextureObject_t, float, float, float, float) {int volatile ___ = 1;::exit(___);}



#line 1020 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1067 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 1068 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
texCubemapLod(::cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 1069 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 1073 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 1086 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1081 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 1082 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
texCubemapLayeredLod(T *, ::cudaTextureObject_t, float, float, float, int, float) {int volatile ___ = 1;::exit(___);}



#line 1087 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 1135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
texCubemapLayeredLod(::cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
#line 1136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 1140 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 1153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 1149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex1DGrad(T *, ::cudaTextureObject_t, float, float, float) {int volatile ___ = 1;::exit(___);}



#line 1154 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1202 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 1203 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex1DGrad(::cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
#line 1204 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
#line 1208 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 1221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1216 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 1217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex2DGrad(T *, ::cudaTextureObject_t, float, float, ::float2, ::float2) {int volatile ___ = 1;::exit(___);}



#line 1222 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1269 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 1270 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex2DGrad(::cudaTextureObject_t texObject, float x, float y, ::float2 dPdx, ::float2 dPdy) 
#line 1271 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 1275 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 1288 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1283 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 1284 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex3DGrad(T *, ::cudaTextureObject_t, float, float, float, ::float4, ::float4) {int volatile ___ = 1;::exit(___);}



#line 1289 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1336 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 1337 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex3DGrad(::cudaTextureObject_t texObject, float x, float y, float z, ::float4 dPdx, ::float4 dPdy) 
#line 1338 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 1342 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 1355 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1350 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 1351 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex1DLayeredGrad(T *, ::cudaTextureObject_t, float, int, float, float) {int volatile ___ = 1;::exit(___);}



#line 1356 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1404 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 1405 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex1DLayeredGrad(::cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
#line 1406 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 1410 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 1423 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1418 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 1419 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex2DLayeredGrad(T *, ::cudaTextureObject_t, float, float, int, ::float2, ::float2) {int volatile ___ = 1;::exit(___);}



#line 1424 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1471 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 1472 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex2DLayeredGrad(::cudaTextureObject_t texObject, float x, float y, int layer, ::float2 dPdx, ::float2 dPdy) 
#line 1473 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 1477 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 1490 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 69 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surf1Dread(T *, ::cudaSurfaceObject_t, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}



#line 74 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surf1Dread(::cudaSurfaceObject_t surfObject, int x, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
{int volatile ___ = 1;(void)surfObject;(void)x;(void)boundaryMode;
#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
::exit(___);}





#line 126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 129 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surf2Dread(T *, ::cudaSurfaceObject_t, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}



#line 134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 173 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surf2Dread(::cudaSurfaceObject_t surfObject, int x, int y, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
#line 174 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
::exit(___);}





#line 187 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 189 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 190 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surf3Dread(T *, ::cudaSurfaceObject_t, int, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}



#line 195 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 231 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 232 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surf3Dread(::cudaSurfaceObject_t surfObject, int x, int y, int z, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
#line 233 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 239 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
::exit(___);}





#line 246 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 247 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 248 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surf1DLayeredread(T *, ::cudaSurfaceObject_t, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}



#line 253 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 290 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 291 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surf1DLayeredread(::cudaSurfaceObject_t surfObject, int x, int layer, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
#line 292 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
{int volatile ___ = 1;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 298 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
::exit(___);}





#line 305 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 306 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 307 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surf2DLayeredread(T *, ::cudaSurfaceObject_t, int, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}



#line 312 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 348 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 349 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surf2DLayeredread(::cudaSurfaceObject_t surfObject, int x, int y, int layer, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
#line 350 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 356 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
::exit(___);}





#line 363 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 364 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 365 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surfCubemapread(T *, ::cudaSurfaceObject_t, int, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}



#line 370 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 406 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 407 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surfCubemapread(::cudaSurfaceObject_t surfObject, int x, int y, int face, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
#line 408 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
::exit(___);}





#line 421 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 422 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 423 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surfCubemapLayeredread(T *, ::cudaSurfaceObject_t, int, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}



#line 428 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 464 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 465 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surfCubemapLayeredread(::cudaSurfaceObject_t surfObject, int x, int y, int layerface, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
#line 466 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)layerface;(void)boundaryMode;
#line 472 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
::exit(___);}





#line 479 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 480 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 481 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surf1Dwrite(T, ::cudaSurfaceObject_t, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}



#line 486 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 528 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 529 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surf2Dwrite(T, ::cudaSurfaceObject_t, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}



#line 534 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 576 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 577 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surf3Dwrite(T, ::cudaSurfaceObject_t, int, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}



#line 582 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 626 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 627 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surf1DLayeredwrite(T, ::cudaSurfaceObject_t, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}



#line 632 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 675 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 676 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surf2DLayeredwrite(T, ::cudaSurfaceObject_t, int, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}



#line 681 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 723 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 724 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surfCubemapwrite(T, ::cudaSurfaceObject_t, int, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}



#line 729 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 771 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 772 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surfCubemapLayeredwrite(T, ::cudaSurfaceObject_t, int, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}



#line 777 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"
extern "C" {
#line 71 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"
extern const uint3 __device_builtin_variable_threadIdx; 
#line 72 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"
extern const uint3 __device_builtin_variable_blockIdx; 
#line 73 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"
extern const dim3 __device_builtin_variable_blockDim; 
#line 74 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"
extern const dim3 __device_builtin_variable_gridDim; 
#line 75 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"
extern const int __device_builtin_variable_warpSize; 
#line 80 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"
}
#line 183 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 184 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaLaunchKernel(const T *
#line 185 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
func, ::dim3 
#line 186 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
gridDim, ::dim3 
#line 187 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockDim, void **
#line 188 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
args, ::size_t 
#line 189 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
sharedMem = 0, ::cudaStream_t 
#line 190 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
stream = 0) 
#line 192 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 193 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaLaunchKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream); 
#line 194 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 221 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 222 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaSetupArgument(T 
#line 223 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
arg, ::size_t 
#line 224 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
offset) 
#line 226 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 227 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaSetupArgument((const void *)(&arg), sizeof(T), offset); 
#line 228 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 260 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
static __inline cudaError_t cudaEventCreate(cudaEvent_t *
#line 261 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
event, unsigned 
#line 262 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
flags) 
#line 264 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 265 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaEventCreateWithFlags(event, flags); 
#line 266 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 323 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
static __inline cudaError_t cudaMallocHost(void **
#line 324 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
ptr, size_t 
#line 325 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
size, unsigned 
#line 326 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
flags) 
#line 328 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 329 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaHostAlloc(ptr, size, flags); 
#line 330 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 332 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 333 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaHostAlloc(T **
#line 334 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
ptr, ::size_t 
#line 335 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
size, unsigned 
#line 336 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
flags) 
#line 338 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 339 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaHostAlloc((void **)((void *)ptr), size, flags); 
#line 340 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 342 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 343 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaHostGetDevicePointer(T **
#line 344 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
pDevice, void *
#line 345 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
pHost, unsigned 
#line 346 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
flags) 
#line 348 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 349 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaHostGetDevicePointer((void **)((void *)pDevice), pHost, flags); 
#line 350 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 449 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 450 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaMallocManaged(T **
#line 451 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
devPtr, ::size_t 
#line 452 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
size, unsigned 
#line 453 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
flags = 1) 
#line 455 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 456 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaMallocManaged((void **)((void *)devPtr), size, flags); 
#line 457 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 528 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 529 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaStreamAttachMemAsync(::cudaStream_t 
#line 530 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
stream, T *
#line 531 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
devPtr, ::size_t 
#line 532 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
length = 0, unsigned 
#line 533 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
flags = 4) 
#line 535 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 536 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaStreamAttachMemAsync(stream, (void *)devPtr, length, flags); 
#line 537 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 539 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> __inline ::cudaError_t 
#line 540 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaMalloc(T **
#line 541 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
devPtr, ::size_t 
#line 542 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
size) 
#line 544 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 545 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaMalloc((void **)((void *)devPtr), size); 
#line 546 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 548 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 549 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaMallocHost(T **
#line 550 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
ptr, ::size_t 
#line 551 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
size, unsigned 
#line 552 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
flags = 0) 
#line 554 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 555 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return cudaMallocHost((void **)((void *)ptr), size, flags); 
#line 556 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 558 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 559 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaMallocPitch(T **
#line 560 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
devPtr, ::size_t *
#line 561 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
pitch, ::size_t 
#line 562 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
width, ::size_t 
#line 563 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
height) 
#line 565 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 566 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaMallocPitch((void **)((void *)devPtr), pitch, width, height); 
#line 567 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 604 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 605 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaMemcpyToSymbol(const T &
#line 606 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
symbol, const void *
#line 607 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
src, ::size_t 
#line 608 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
count, ::size_t 
#line 609 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
offset = 0, ::cudaMemcpyKind 
#line 610 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
kind = cudaMemcpyHostToDevice) 
#line 612 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 613 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaMemcpyToSymbol((const void *)(&symbol), src, count, offset, kind); 
#line 614 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 656 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 657 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaMemcpyToSymbolAsync(const T &
#line 658 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
symbol, const void *
#line 659 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
src, ::size_t 
#line 660 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
count, ::size_t 
#line 661 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
offset = 0, ::cudaMemcpyKind 
#line 662 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
kind = cudaMemcpyHostToDevice, ::cudaStream_t 
#line 663 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
stream = 0) 
#line 665 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 666 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaMemcpyToSymbolAsync((const void *)(&symbol), src, count, offset, kind, stream); 
#line 667 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 702 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 703 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaMemcpyFromSymbol(void *
#line 704 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
dst, const T &
#line 705 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
symbol, ::size_t 
#line 706 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
count, ::size_t 
#line 707 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
offset = 0, ::cudaMemcpyKind 
#line 708 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
kind = cudaMemcpyDeviceToHost) 
#line 710 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 711 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaMemcpyFromSymbol(dst, (const void *)(&symbol), count, offset, kind); 
#line 712 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 754 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 755 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaMemcpyFromSymbolAsync(void *
#line 756 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
dst, const T &
#line 757 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
symbol, ::size_t 
#line 758 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
count, ::size_t 
#line 759 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
offset = 0, ::cudaMemcpyKind 
#line 760 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
kind = cudaMemcpyDeviceToHost, ::cudaStream_t 
#line 761 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
stream = 0) 
#line 763 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 764 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaMemcpyFromSymbolAsync(dst, (const void *)(&symbol), count, offset, kind, stream); 
#line 765 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 787 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 788 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaGetSymbolAddress(void **
#line 789 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
devPtr, const T &
#line 790 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
symbol) 
#line 792 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 793 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaGetSymbolAddress(devPtr, (const void *)(&symbol)); 
#line 794 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 816 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 817 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaGetSymbolSize(::size_t *
#line 818 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
size, const T &
#line 819 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
symbol) 
#line 821 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 822 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaGetSymbolSize(size, (const void *)(&symbol)); 
#line 823 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 859 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 860 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaBindTexture(::size_t *
#line 861 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
offset, const texture< T, dim, readMode>  &
#line 862 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
tex, const void *
#line 863 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
devPtr, const ::cudaChannelFormatDesc &
#line 864 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
desc, ::size_t 
#line 865 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
size = 4294967295U) 
#line 867 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 868 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaBindTexture(offset, &tex, devPtr, &desc, size); 
#line 869 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 904 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 905 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaBindTexture(::size_t *
#line 906 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
offset, const texture< T, dim, readMode>  &
#line 907 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
tex, const void *
#line 908 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
devPtr, ::size_t 
#line 909 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
size = 4294967295U) 
#line 911 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 912 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return cudaBindTexture(offset, tex, devPtr, (tex.channelDesc), size); 
#line 913 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 960 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 961 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaBindTexture2D(::size_t *
#line 962 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
offset, const texture< T, dim, readMode>  &
#line 963 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
tex, const void *
#line 964 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
devPtr, const ::cudaChannelFormatDesc &
#line 965 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
desc, ::size_t 
#line 966 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
width, ::size_t 
#line 967 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
height, ::size_t 
#line 968 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
pitch) 
#line 970 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 971 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaBindTexture2D(offset, &tex, devPtr, &desc, width, height, pitch); 
#line 972 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1018 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 1019 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaBindTexture2D(::size_t *
#line 1020 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
offset, const texture< T, dim, readMode>  &
#line 1021 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
tex, const void *
#line 1022 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
devPtr, ::size_t 
#line 1023 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
width, ::size_t 
#line 1024 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
height, ::size_t 
#line 1025 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
pitch) 
#line 1027 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1028 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaBindTexture2D(offset, &tex, devPtr, &(tex.channelDesc), width, height, pitch); 
#line 1029 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1060 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 1061 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaBindTextureToArray(const texture< T, dim, readMode>  &
#line 1062 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
tex, ::cudaArray_const_t 
#line 1063 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
array, const ::cudaChannelFormatDesc &
#line 1064 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
desc) 
#line 1066 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1067 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaBindTextureToArray(&tex, array, &desc); 
#line 1068 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1098 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 1099 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaBindTextureToArray(const texture< T, dim, readMode>  &
#line 1100 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
tex, ::cudaArray_const_t 
#line 1101 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
array) 
#line 1103 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1104 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
::cudaChannelFormatDesc desc; 
#line 1105 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
::cudaError_t err = ::cudaGetChannelDesc(&desc, array); 
#line 1107 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return (err == (cudaSuccess)) ? cudaBindTextureToArray(tex, array, desc) : err; 
#line 1108 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1139 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 1140 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaBindTextureToMipmappedArray(const texture< T, dim, readMode>  &
#line 1141 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
tex, ::cudaMipmappedArray_const_t 
#line 1142 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
mipmappedArray, const ::cudaChannelFormatDesc &
#line 1143 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
desc) 
#line 1145 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1146 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaBindTextureToMipmappedArray(&tex, mipmappedArray, &desc); 
#line 1147 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1177 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 1178 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaBindTextureToMipmappedArray(const texture< T, dim, readMode>  &
#line 1179 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
tex, ::cudaMipmappedArray_const_t 
#line 1180 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
mipmappedArray) 
#line 1182 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1183 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
::cudaChannelFormatDesc desc; 
#line 1184 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
::cudaArray_t levelArray; 
#line 1185 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
::cudaError_t err = ::cudaGetMipmappedArrayLevel(&levelArray, mipmappedArray, 0); 
#line 1187 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
if (err != (cudaSuccess)) { 
#line 1188 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return err; 
#line 1189 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1190 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
err = ::cudaGetChannelDesc(&desc, levelArray); 
#line 1192 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return (err == (cudaSuccess)) ? cudaBindTextureToMipmappedArray(tex, mipmappedArray, desc) : err; 
#line 1193 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1216 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 1217 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaUnbindTexture(const texture< T, dim, readMode>  &
#line 1218 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
tex) 
#line 1220 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1221 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaUnbindTexture(&tex); 
#line 1222 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1250 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 1251 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaGetTextureAlignmentOffset(::size_t *
#line 1252 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
offset, const texture< T, dim, readMode>  &
#line 1253 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
tex) 
#line 1255 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1256 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaGetTextureAlignmentOffset(offset, &tex); 
#line 1257 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1302 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 1303 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaFuncSetCacheConfig(T *
#line 1304 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
func, ::cudaFuncCache 
#line 1305 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cacheConfig) 
#line 1307 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1308 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaFuncSetCacheConfig((const void *)func, cacheConfig); 
#line 1309 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1311 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 1312 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaFuncSetSharedMemConfig(T *
#line 1313 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
func, ::cudaSharedMemConfig 
#line 1314 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
config) 
#line 1316 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1317 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaFuncSetSharedMemConfig((const void *)func, config); 
#line 1318 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1347 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> __inline ::cudaError_t 
#line 1348 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *
#line 1349 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
numBlocks, T 
#line 1350 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
func, int 
#line 1351 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSize, ::size_t 
#line 1352 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
dynamicSMemSize) 
#line 1353 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1354 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void *)func, blockSize, dynamicSMemSize, 0); 
#line 1355 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1398 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> __inline ::cudaError_t 
#line 1399 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *
#line 1400 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
numBlocks, T 
#line 1401 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
func, int 
#line 1402 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSize, ::size_t 
#line 1403 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
dynamicSMemSize, unsigned 
#line 1404 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
flags) 
#line 1405 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1406 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void *)func, blockSize, dynamicSMemSize, flags); 
#line 1407 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1412 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
class __cudaOccupancyB2DHelper { 
#line 1413 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
size_t n; 
#line 1415 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
public: __cudaOccupancyB2DHelper(size_t n_) : n(n_) { } 
#line 1416 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
size_t operator()(int) 
#line 1417 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1418 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return n; 
#line 1419 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1420 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}; 
#line 1467 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class UnaryFunction, class T> static __inline ::cudaError_t 
#line 1468 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(int *
#line 1469 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
minGridSize, int *
#line 1470 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSize, T 
#line 1471 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
func, UnaryFunction 
#line 1472 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSizeToDynamicSMemSize, int 
#line 1473 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSizeLimit = 0, unsigned 
#line 1474 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
flags = 0) 
#line 1475 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1476 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
::cudaError_t status; 
#line 1479 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int device; 
#line 1480 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
::cudaFuncAttributes attr; 
#line 1483 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int maxThreadsPerMultiProcessor; 
#line 1484 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int warpSize; 
#line 1485 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int devMaxThreadsPerBlock; 
#line 1486 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int multiProcessorCount; 
#line 1487 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int funcMaxThreadsPerBlock; 
#line 1488 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int occupancyLimit; 
#line 1489 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int granularity; 
#line 1492 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int maxBlockSize = 0; 
#line 1493 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int numBlocks = 0; 
#line 1494 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int maxOccupancy = 0; 
#line 1497 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int blockSizeToTryAligned; 
#line 1498 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int blockSizeToTry; 
#line 1499 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int blockSizeLimitAligned; 
#line 1500 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int occupancyInBlocks; 
#line 1501 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int occupancyInThreads; 
#line 1502 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
::size_t dynamicSMemSize; 
#line 1508 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
if (((!minGridSize) || (!blockSize)) || (!func)) { 
#line 1509 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return cudaErrorInvalidValue; 
#line 1510 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1516 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
status = ::cudaGetDevice(&device); 
#line 1517 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
if (status != (cudaSuccess)) { 
#line 1518 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return status; 
#line 1519 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1521 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
status = cudaDeviceGetAttribute(&maxThreadsPerMultiProcessor, cudaDevAttrMaxThreadsPerMultiProcessor, device); 
#line 1525 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
if (status != (cudaSuccess)) { 
#line 1526 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return status; 
#line 1527 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1529 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
status = cudaDeviceGetAttribute(&warpSize, cudaDevAttrWarpSize, device); 
#line 1533 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
if (status != (cudaSuccess)) { 
#line 1534 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return status; 
#line 1535 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1537 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
status = cudaDeviceGetAttribute(&devMaxThreadsPerBlock, cudaDevAttrMaxThreadsPerBlock, device); 
#line 1541 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
if (status != (cudaSuccess)) { 
#line 1542 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return status; 
#line 1543 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1545 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
status = cudaDeviceGetAttribute(&multiProcessorCount, cudaDevAttrMultiProcessorCount, device); 
#line 1549 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
if (status != (cudaSuccess)) { 
#line 1550 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return status; 
#line 1551 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1553 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
status = cudaFuncGetAttributes(&attr, func); 
#line 1554 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
if (status != (cudaSuccess)) { 
#line 1555 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return status; 
#line 1556 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1558 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
funcMaxThreadsPerBlock = (attr.maxThreadsPerBlock); 
#line 1564 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
occupancyLimit = maxThreadsPerMultiProcessor; 
#line 1565 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
granularity = warpSize; 
#line 1567 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
if (blockSizeLimit == 0) { 
#line 1568 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSizeLimit = devMaxThreadsPerBlock; 
#line 1569 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1571 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
if (devMaxThreadsPerBlock < blockSizeLimit) { 
#line 1572 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSizeLimit = devMaxThreadsPerBlock; 
#line 1573 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1575 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
if (funcMaxThreadsPerBlock < blockSizeLimit) { 
#line 1576 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSizeLimit = funcMaxThreadsPerBlock; 
#line 1577 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1579 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSizeLimitAligned = (((blockSizeLimit + (granularity - 1)) / granularity) * granularity); 
#line 1581 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
for (blockSizeToTryAligned = blockSizeLimitAligned; blockSizeToTryAligned > 0; blockSizeToTryAligned -= granularity) { 
#line 1585 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
if (blockSizeLimit < blockSizeToTryAligned) { 
#line 1586 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSizeToTry = blockSizeLimit; 
#line 1587 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} else { 
#line 1588 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSizeToTry = blockSizeToTryAligned; 
#line 1589 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1591 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
dynamicSMemSize = blockSizeToDynamicSMemSize(blockSizeToTry); 
#line 1593 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
status = cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(&occupancyInBlocks, func, blockSizeToTry, dynamicSMemSize, flags); 
#line 1600 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
if (status != (cudaSuccess)) { 
#line 1601 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return status; 
#line 1602 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1604 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
occupancyInThreads = (blockSizeToTry * occupancyInBlocks); 
#line 1606 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
if (occupancyInThreads > maxOccupancy) { 
#line 1607 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
maxBlockSize = blockSizeToTry; 
#line 1608 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
numBlocks = occupancyInBlocks; 
#line 1609 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
maxOccupancy = occupancyInThreads; 
#line 1610 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1614 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
if (occupancyLimit == maxOccupancy) { 
#line 1615 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
break; 
#line 1616 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1617 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1625 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
(*minGridSize) = (numBlocks * multiProcessorCount); 
#line 1626 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
(*blockSize) = maxBlockSize; 
#line 1628 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return status; 
#line 1629 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1662 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class UnaryFunction, class T> static __inline ::cudaError_t 
#line 1663 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaOccupancyMaxPotentialBlockSizeVariableSMem(int *
#line 1664 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
minGridSize, int *
#line 1665 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSize, T 
#line 1666 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
func, UnaryFunction 
#line 1667 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSizeToDynamicSMemSize, int 
#line 1668 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSizeLimit = 0) 
#line 1669 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1670 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, blockSizeToDynamicSMemSize, blockSizeLimit, 0); 
#line 1671 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1707 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 1708 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaOccupancyMaxPotentialBlockSize(int *
#line 1709 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
minGridSize, int *
#line 1710 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSize, T 
#line 1711 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
func, ::size_t 
#line 1712 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
dynamicSMemSize = 0, int 
#line 1713 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSizeLimit = 0) 
#line 1714 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1715 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, ((::__cudaOccupancyB2DHelper)(dynamicSMemSize)), blockSizeLimit, 0); 
#line 1716 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1766 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 1767 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaOccupancyMaxPotentialBlockSizeWithFlags(int *
#line 1768 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
minGridSize, int *
#line 1769 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSize, T 
#line 1770 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
func, ::size_t 
#line 1771 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
dynamicSMemSize = 0, int 
#line 1772 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSizeLimit = 0, unsigned 
#line 1773 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
flags = 0) 
#line 1774 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1775 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, ((::__cudaOccupancyB2DHelper)(dynamicSMemSize)), blockSizeLimit, flags); 
#line 1776 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1814 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 1815 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaLaunch(T *
#line 1816 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
func) 
#line 1818 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1819 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaLaunch((const void *)func); 
#line 1820 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1851 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> __inline ::cudaError_t 
#line 1852 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaFuncGetAttributes(::cudaFuncAttributes *
#line 1853 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
attr, T *
#line 1854 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
entry) 
#line 1856 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1857 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaFuncGetAttributes(attr, (const void *)entry); 
#line 1858 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1880 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T, int dim> static __inline ::cudaError_t 
#line 1881 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaBindSurfaceToArray(const surface< T, dim>  &
#line 1882 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
surf, ::cudaArray_const_t 
#line 1883 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
array, const ::cudaChannelFormatDesc &
#line 1884 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
desc) 
#line 1886 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1887 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaBindSurfaceToArray(&surf, array, &desc); 
#line 1888 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1909 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T, int dim> static __inline ::cudaError_t 
#line 1910 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaBindSurfaceToArray(const surface< T, dim>  &
#line 1911 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
surf, ::cudaArray_const_t 
#line 1912 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
array) 
#line 1914 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1915 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
::cudaChannelFormatDesc desc; 
#line 1916 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
::cudaError_t err = ::cudaGetChannelDesc(&desc, array); 
#line 1918 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return (err == (cudaSuccess)) ? cudaBindSurfaceToArray(surf, array, desc) : err; 
#line 1919 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1933 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
#pragma warning(pop)
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
#pragma detect_mismatch("_CRT_STDIO_ISO_WIDE_SPECIFIERS", "0")
#line 72 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
__declspec(noinline) __inline unsigned __int64 *__cdecl __local_stdio_printf_options() 
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
{ 
#line 74 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
static unsigned __int64 _OptionsStorage; 
#line 75 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
return &_OptionsStorage; 
#line 76 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
} 
#line 81 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
__declspec(noinline) __inline unsigned __int64 *__cdecl __local_stdio_scanf_options() 
#line 82 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
{ 
#line 83 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
static unsigned __int64 _OptionsStorage; 
#line 84 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
return &_OptionsStorage; 
#line 85 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
} 
#line 105 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
}__pragma(pack ( pop )) 
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
typedef 
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
struct _iobuf { 
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
void *_Placeholder; 
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} FILE; 
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) FILE *__cdecl __acrt_iob_func(unsigned); 
#line 47 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl fgetwc(FILE * _Stream); 
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl _fgetwchar(); 
#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl fputwc(__wchar_t _Character, FILE * _Stream); 
#line 60 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl _fputwchar(__wchar_t _Character); 
#line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl getwc(FILE * _Stream); 
#line 70 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl getwchar(); 
#line 75 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) __wchar_t *__cdecl fgetws(__wchar_t * _Buffer, int _BufferCount, FILE * _Stream); 
#line 82 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl fputws(const __wchar_t * _Buffer, FILE * _Stream); 
#line 89 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) __wchar_t *__cdecl _getws_s(__wchar_t * _Buffer, size_t _BufferCount); 
#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {template< size_t _Size> inline __wchar_t *__cdecl _getws_s(__wchar_t (&_Buffer)[_Size]) throw() { return _getws_s(_Buffer, _Size); } }
#line 101 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl putwc(__wchar_t _Character, FILE * _Stream); 
#line 107 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl putwchar(__wchar_t _Character); 
#line 112 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl _putws(const __wchar_t * _Buffer); 
#line 117 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl ungetwc(wint_t _Character, FILE * _Stream); 
#line 123 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) FILE *__cdecl _wfdopen(int _FileHandle, const __wchar_t * _Mode); 
#line 129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) FILE *__cdecl _wfopen(const __wchar_t * _FileName, const __wchar_t * _Mode); 
#line 135 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) errno_t __cdecl _wfopen_s(FILE ** _Stream, const __wchar_t * _FileName, const __wchar_t * _Mode); 
#line 143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) FILE *__cdecl _wfreopen(const __wchar_t * _FileName, const __wchar_t * _Mode, FILE * _OldStream); 
#line 150 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) errno_t __cdecl _wfreopen_s(FILE ** _Stream, const __wchar_t * _FileName, const __wchar_t * _Mode, FILE * _OldStream); 
#line 158 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) FILE *__cdecl _wfsopen(const __wchar_t * _FileName, const __wchar_t * _Mode, int _ShFlag); 
#line 164 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) void __cdecl _wperror(const __wchar_t * _ErrorMessage); 
#line 171 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) FILE *__cdecl _wpopen(const __wchar_t * _Command, const __wchar_t * _Mode); 
#line 178 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl _wremove(const __wchar_t * _FileName); 
#line 186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) __declspec(allocator) __wchar_t *__cdecl _wtempnam(const __wchar_t * _Directory, const __wchar_t * _FilePrefix); 
#line 195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) errno_t __cdecl _wtmpnam_s(__wchar_t * _Buffer, size_t _BufferCount); 
#line 200 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wtmpnam_s(__wchar_t (&_Buffer)[_Size]) throw() { return _wtmpnam_s(_Buffer, _Size); } }
#line 205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) __wchar_t *__cdecl _wtmpnam(__wchar_t * _Buffer); 
#line 219 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl _fgetwc_nolock(FILE * _Stream); 
#line 224 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl _fputwc_nolock(__wchar_t _Character, FILE * _Stream); 
#line 230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl _getwc_nolock(FILE * _Stream); 
#line 235 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl _putwc_nolock(__wchar_t _Character, FILE * _Stream); 
#line 241 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl _ungetwc_nolock(wint_t _Character, FILE * _Stream); 
#line 267 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vfwprintf(unsigned __int64 _Options, FILE * _Stream, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 276 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vfwprintf_s(unsigned __int64 _Options, FILE * _Stream, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 285 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vfwprintf_p(unsigned __int64 _Options, FILE * _Stream, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 294 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vfwprintf_l(FILE *const 
#line 295 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 296 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 297 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 298 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 303 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 304 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return __stdio_common_vfwprintf(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 305 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 309 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vfwprintf(FILE *const 
#line 310 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 311 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 312 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 317 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 318 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vfwprintf_l(_Stream, _Format, 0, _ArgList); 
#line 319 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 323 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vfwprintf_s_l(FILE *const 
#line 324 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 325 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 326 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 327 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 332 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 333 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return __stdio_common_vfwprintf_s(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 334 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 340 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vfwprintf_s(FILE *const 
#line 341 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 342 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 343 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 348 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 349 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vfwprintf_s_l(_Stream, _Format, 0, _ArgList); 
#line 350 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 356 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vfwprintf_p_l(FILE *const 
#line 357 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 358 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 359 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 360 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 365 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 366 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return __stdio_common_vfwprintf_p(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 367 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 371 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vfwprintf_p(FILE *const 
#line 372 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 373 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 374 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 379 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 380 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vfwprintf_p_l(_Stream, _Format, 0, _ArgList); 
#line 381 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 385 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwprintf_l(const __wchar_t *const 
#line 386 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 387 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 388 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 393 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 394 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vfwprintf_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 395 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 399 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vwprintf(const __wchar_t *const 
#line 400 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 401 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 406 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 407 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vfwprintf_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 408 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 412 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwprintf_s_l(const __wchar_t *const 
#line 413 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 414 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 415 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 420 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 421 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vfwprintf_s_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 422 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 428 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vwprintf_s(const __wchar_t *const 
#line 429 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 430 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 435 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 436 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vfwprintf_s_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 437 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 443 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwprintf_p_l(const __wchar_t *const 
#line 444 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 445 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 446 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 451 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 452 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vfwprintf_p_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 453 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 457 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwprintf_p(const __wchar_t *const 
#line 458 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 459 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 464 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 465 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vfwprintf_p_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 466 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 470 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwprintf_l(FILE *const 
#line 471 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 472 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 478 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 479 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 480 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 481 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 482 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_l(_Stream, _Format, _Locale, _ArgList); 
#line 483 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 484 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 485 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 489 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl fwprintf(FILE *const 
#line 490 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 491 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 496 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 497 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 498 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 499 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 500 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_l(_Stream, _Format, 0, _ArgList); 
#line 501 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 502 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 503 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 507 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwprintf_s_l(FILE *const 
#line 508 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 509 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 510 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 515 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 516 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 517 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 518 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 519 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_s_l(_Stream, _Format, _Locale, _ArgList); 
#line 520 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 521 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 522 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 528 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl fwprintf_s(FILE *const 
#line 529 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 530 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 535 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 536 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 537 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 538 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 539 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_s_l(_Stream, _Format, 0, _ArgList); 
#line 540 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 541 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 542 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 548 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwprintf_p_l(FILE *const 
#line 549 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 550 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 551 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 556 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 557 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 558 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 559 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 560 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_p_l(_Stream, _Format, _Locale, _ArgList); 
#line 561 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 562 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 563 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 567 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwprintf_p(FILE *const 
#line 568 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 569 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 574 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 575 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 576 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 577 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 578 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_p_l(_Stream, _Format, 0, _ArgList); 
#line 579 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 580 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 581 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 585 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wprintf_l(const __wchar_t *const 
#line 586 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 587 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 592 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 593 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 594 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 595 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 596 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 597 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 598 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 599 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 603 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl wprintf(const __wchar_t *const 
#line 604 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 609 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 610 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 611 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 612 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 613 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 614 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 615 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 616 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 620 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wprintf_s_l(const __wchar_t *const 
#line 621 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 622 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 627 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 628 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 629 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 630 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 631 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_s_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 632 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 633 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 634 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 640 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl wprintf_s(const __wchar_t *const 
#line 641 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 646 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 647 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 648 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 649 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 650 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_s_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 651 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 652 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 653 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 659 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wprintf_p_l(const __wchar_t *const 
#line 660 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 661 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 666 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 667 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 668 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 669 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 670 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_p_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 671 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 672 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 673 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 677 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wprintf_p(const __wchar_t *const 
#line 678 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 683 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 684 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 685 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 686 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 687 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_p_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 688 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 689 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 690 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 700 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vfwscanf(unsigned __int64 _Options, FILE * _Stream, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 709 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vfwscanf_l(FILE *const 
#line 710 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 711 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 712 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 713 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 718 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 719 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return __stdio_common_vfwscanf(*__local_stdio_scanf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 722 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 726 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vfwscanf(FILE *const 
#line 727 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 728 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 729 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 734 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 735 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vfwscanf_l(_Stream, _Format, 0, _ArgList); 
#line 736 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 740 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vfwscanf_s_l(FILE *const 
#line 741 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 742 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 743 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 744 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 749 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 750 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return __stdio_common_vfwscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Stream, _Format, _Locale, _ArgList); 
#line 753 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 759 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vfwscanf_s(FILE *const 
#line 760 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 761 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 762 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 767 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 768 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vfwscanf_s_l(_Stream, _Format, 0, _ArgList); 
#line 769 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 774 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwscanf_l(const __wchar_t *const 
#line 775 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 776 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 777 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 782 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 783 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vfwscanf_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 784 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 788 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vwscanf(const __wchar_t *const 
#line 789 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 790 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 795 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 796 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vfwscanf_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 797 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 801 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwscanf_s_l(const __wchar_t *const 
#line 802 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 803 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 804 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 809 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 810 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vfwscanf_s_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 811 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 817 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vwscanf_s(const __wchar_t *const 
#line 818 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 819 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 824 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 825 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vfwscanf_s_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 826 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 832 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwscanf_l(FILE *const 
#line 833 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 834 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 835 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 840 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 841 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 842 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 843 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 844 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwscanf_l(_Stream, _Format, _Locale, _ArgList); 
#line 845 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 846 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 847 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 851 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl fwscanf(FILE *const 
#line 852 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 853 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 858 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 859 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 860 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 861 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 862 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwscanf_l(_Stream, _Format, 0, _ArgList); 
#line 863 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 864 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 865 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 869 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwscanf_s_l(FILE *const 
#line 870 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 871 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 872 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 877 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 878 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 879 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 880 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 881 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwscanf_s_l(_Stream, _Format, _Locale, _ArgList); 
#line 882 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 883 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 884 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 890 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl fwscanf_s(FILE *const 
#line 891 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 892 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 897 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 898 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 899 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 900 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 901 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwscanf_s_l(_Stream, _Format, 0, _ArgList); 
#line 902 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 903 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 904 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 910 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wscanf_l(const __wchar_t *const 
#line 911 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 912 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 917 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 918 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 919 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 920 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 921 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwscanf_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 922 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 923 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 924 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 928 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl wscanf(const __wchar_t *const 
#line 929 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 934 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 935 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 936 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 937 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 938 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwscanf_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 939 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 940 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 941 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 945 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wscanf_s_l(const __wchar_t *const 
#line 946 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 947 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 952 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 953 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 954 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 955 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 956 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwscanf_s_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 957 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 958 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 959 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 965 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl wscanf_s(const __wchar_t *const 
#line 966 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 971 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 972 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 973 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 974 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 975 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwscanf_s_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 976 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 977 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 978 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1001 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vswprintf(unsigned __int64 _Options, __wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1012 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vswprintf_s(unsigned __int64 _Options, __wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1023 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vsnwprintf_s(unsigned __int64 _Options, __wchar_t * _Buffer, size_t _BufferCount, size_t _MaxCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1035 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vswprintf_p(unsigned __int64 _Options, __wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1046 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vsnwprintf_l(__wchar_t *const 
#line 1047 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1048 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1049 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1050 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1051 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1056 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1057 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
const int _Result = __stdio_common_vswprintf((*__local_stdio_printf_options()) | (1Ui64 << 0), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1061 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1062 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1065 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(push)
#pragma warning(disable: 4793)
#line 1070 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vsnwprintf_s_l(__wchar_t *const 
#line 1071 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1072 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const size_t 
#line 1073 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_MaxCount, const __wchar_t *const 
#line 1074 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1075 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1076 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1081 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1082 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
const int _Result = __stdio_common_vsnwprintf_s(*__local_stdio_printf_options(), _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList); 
#line 1086 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1087 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1092 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vsnwprintf_s(__wchar_t *const 
#line 1093 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1094 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const size_t 
#line 1095 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_MaxCount, const __wchar_t *const 
#line 1096 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1097 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1103 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList); 
#line 1104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1107 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwprintf(__wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, ...); __inline int __cdecl _vsnwprintf(__wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, va_list _Args); 
#line 1116 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(pop)
#line 1120 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vsnwprintf(__wchar_t *
#line 1121 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, size_t 
#line 1122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *
#line 1123 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#pragma warning(push)
#pragma warning(disable: 4996)
return _vsnwprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#pragma warning(pop)
} 
#line 1137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {template< size_t _Size> inline int __cdecl _vsnwprintf_s(__wchar_t (&_Buffer)[_Size], ::size_t _BufferCount, const __wchar_t *_Format, ::va_list _ArgList) throw() { return _vsnwprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
#line 1148 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_c_l(__wchar_t *const 
#line 1149 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1150 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1151 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1152 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1153 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1158 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
const int _Result = __stdio_common_vswprintf(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1163 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1164 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1169 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_c(__wchar_t *const 
#line 1170 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1171 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1172 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1173 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1178 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1179 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1180 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_l(__wchar_t *const 
#line 1186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1187 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1188 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1189 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1190 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#pragma warning(push)
#pragma warning(disable: 4996)
return _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#pragma warning(pop)
} 
#line 1205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl __vswprintf_l(__wchar_t *const 
#line 1206 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1207 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1208 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1209 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1214 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1215 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vswprintf_l(_Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 1216 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1221 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf(__wchar_t *const 
#line 1222 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1223 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1224 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1229 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vswprintf_l(_Buffer, (size_t)(-1), _Format, 0, _ArgList); 
#line 1231 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1236 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vswprintf(__wchar_t *const 
#line 1237 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1238 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1239 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1240 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1245 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1246 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1247 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1252 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_s_l(__wchar_t *const 
#line 1253 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1254 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1256 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1257 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1262 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1263 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
const int _Result = __stdio_common_vswprintf_s(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1267 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1268 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1274 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vswprintf_s(__wchar_t *const 
#line 1275 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1276 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1277 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1278 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1283 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1284 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vswprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1285 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1290 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {template< size_t _Size> inline int __cdecl vswprintf_s(__wchar_t (&_Buffer)[_Size], const __wchar_t *_Format, ::va_list _ArgList) throw() { return vswprintf_s(_Buffer, _Size, _Format, _ArgList); } }
#line 1300 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_p_l(__wchar_t *const 
#line 1301 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1302 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1303 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1304 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1305 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1310 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1311 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
const int _Result = __stdio_common_vswprintf_p(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1315 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1316 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1321 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_p(__wchar_t *const 
#line 1322 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1323 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1324 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1325 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1330 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1331 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vswprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1332 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1337 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vscwprintf_l(const __wchar_t *const 
#line 1338 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1339 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1340 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1345 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1346 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
const int _Result = __stdio_common_vswprintf((*__local_stdio_printf_options()) | (1Ui64 << 1), 0, 0, _Format, _Locale, _ArgList); 
#line 1350 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1351 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1356 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vscwprintf(const __wchar_t *const 
#line 1357 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1358 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1363 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1364 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vscwprintf_l(_Format, 0, _ArgList); 
#line 1365 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1370 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vscwprintf_p_l(const __wchar_t *const 
#line 1371 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1372 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1373 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1378 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1379 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
const int _Result = __stdio_common_vswprintf_p((*__local_stdio_printf_options()) | (1Ui64 << 1), 0, 0, _Format, _Locale, _ArgList); 
#line 1383 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1384 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1389 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vscwprintf_p(const __wchar_t *const 
#line 1390 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1391 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1396 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1397 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vscwprintf_p_l(_Format, 0, _ArgList); 
#line 1398 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1403 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl __swprintf_l(__wchar_t *const 
#line 1404 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1405 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1406 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 1411 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1412 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1413 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1414 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1415 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = __vswprintf_l(_Buffer, _Format, _Locale, _ArgList); 
#line 1416 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1417 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1418 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1423 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_l(__wchar_t *const 
#line 1424 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1425 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1426 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1427 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 1432 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1433 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1434 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1435 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1436 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1437 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1438 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1439 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1444 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf(__wchar_t *const 
#line 1445 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1446 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 1451 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1452 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1453 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1454 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1455 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = __vswprintf_l(_Buffer, _Format, 0, _ArgList); 
#line 1456 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1457 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1458 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1463 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl swprintf(__wchar_t *const 
#line 1464 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1465 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1466 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 1471 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1472 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1474 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1475 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1476 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1477 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1478 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1481 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(push)
#line 1484 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(disable:4793 4996)
#line 1486 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl __swprintf_l(__wchar_t * _Buffer, const __wchar_t * _Format, _locale_t _Locale, ...); __inline int __cdecl __vswprintf_l(__wchar_t * _Buffer, const __wchar_t * _Format, _locale_t _Locale, va_list _Args); 
#line 1495 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf(__wchar_t * _Buffer, const __wchar_t * _Format, ...); __inline int __cdecl _vswprintf(__wchar_t * _Buffer, const __wchar_t * _Format, va_list _Args); 
#line 1502 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(pop)
#line 1506 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_s_l(__wchar_t *const 
#line 1507 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1508 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1509 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1510 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 1515 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1516 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1517 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1518 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1519 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1520 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1521 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1522 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1528 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl swprintf_s(__wchar_t *const 
#line 1529 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1530 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1531 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 1536 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1537 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1538 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1539 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1540 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1541 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1542 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1543 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1548 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {__pragma(warning(push)) __pragma(warning(disable: 4793)) template< size_t _Size> inline int __cdecl swprintf_s(__wchar_t (&_Buffer)[_Size], const __wchar_t *_Format, ...) throw() { ::va_list _ArgList; (void)(__vcrt_va_start_verify_argument_type< const __wchar_t *> (), ((void)__va_start(&_ArgList, _Format))); return vswprintf_s(_Buffer, _Size, _Format, _ArgList); } __pragma(warning(pop)) }
#line 1557 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_p_l(__wchar_t *const 
#line 1558 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1559 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1560 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1561 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 1566 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1567 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1568 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1569 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1570 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1571 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1572 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1573 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1578 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_p(__wchar_t *const 
#line 1579 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1580 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1581 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 1586 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1587 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1588 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1589 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1590 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1591 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1592 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1593 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1598 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_c_l(__wchar_t *const 
#line 1599 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1600 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1601 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1602 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 1607 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1608 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1609 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1610 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1611 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1612 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1613 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1614 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1619 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_c(__wchar_t *const 
#line 1620 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1621 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1622 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 1627 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1628 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1629 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1630 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1631 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1632 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1633 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1634 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1639 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwprintf_l(__wchar_t *const 
#line 1640 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1641 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1642 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1643 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 1648 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1649 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1650 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1651 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1653 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#pragma warning(pop)
#line 1658 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1659 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1660 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1665 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwprintf(__wchar_t *
#line 1666 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, size_t 
#line 1667 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *
#line 1668 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 1673 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1674 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1675 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1676 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1678 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#pragma warning(pop)
#line 1683 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1684 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1685 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1690 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwprintf_s_l(__wchar_t *const 
#line 1691 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1692 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const size_t 
#line 1693 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_MaxCount, const __wchar_t *const 
#line 1694 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1695 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 1700 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1701 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1702 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1703 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1704 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList); 
#line 1705 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1706 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1707 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1712 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwprintf_s(__wchar_t *const 
#line 1713 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1714 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const size_t 
#line 1715 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_MaxCount, const __wchar_t *const 
#line 1716 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 1721 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1722 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1723 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1724 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1725 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList); 
#line 1726 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1727 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1728 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1731 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {__pragma(warning(push)) __pragma(warning(disable: 4793)) template< size_t _Size> inline int __cdecl _snwprintf_s(__wchar_t (&_Buffer)[_Size], ::size_t _BufferCount, const __wchar_t *_Format, ...) throw() { ::va_list _ArgList; (void)(__vcrt_va_start_verify_argument_type< const __wchar_t *> (), ((void)__va_start(&_ArgList, _Format))); return _vsnwprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } __pragma(warning(pop)) }
#line 1740 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _scwprintf_l(const __wchar_t *const 
#line 1741 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1742 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 1747 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1748 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1749 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1750 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1751 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vscwprintf_l(_Format, _Locale, _ArgList); 
#line 1752 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1753 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1754 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1759 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _scwprintf(const __wchar_t *const 
#line 1760 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 1765 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1766 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1767 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1768 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1769 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vscwprintf_l(_Format, 0, _ArgList); 
#line 1770 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1771 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1772 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1777 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _scwprintf_p_l(const __wchar_t *const 
#line 1778 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1779 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 1784 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1785 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1786 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1787 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1788 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vscwprintf_p_l(_Format, _Locale, _ArgList); 
#line 1789 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1790 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1791 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1796 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _scwprintf_p(const __wchar_t *const 
#line 1797 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 1802 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1803 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1804 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1805 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1806 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vscwprintf_p_l(_Format, 0, _ArgList); 
#line 1807 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1808 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1809 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1814 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(push)
#pragma warning(disable: 4141 4412 4793 4996 6054)
#line 1820 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
extern "C++" 
#line 1819 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(deprecated("function has been changed to conform with the ISO C standard, adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) inline int 
#line 1820 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
swprintf(__wchar_t *const 
#line 1821 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1822 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) throw() 
#line 1824 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1825 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1826 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1827 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#pragma warning(suppress: 28719)
_Result = vswprintf(_Buffer, 2147483647, _Format, _ArgList); 
#line 1830 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1831 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1832 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1835 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
extern "C++" 
#line 1834 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(deprecated("function has been changed to conform with the ISO C standard, adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) inline int __cdecl 
#line 1835 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
vswprintf(__wchar_t *const 
#line 1836 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1837 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1838 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) throw() 
#line 1840 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#pragma warning(suppress: 28719)
return vswprintf(_Buffer, 2147483647, _Format, _ArgList); 
#line 1843 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1846 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
extern "C++" 
#line 1845 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(deprecated("function has been changed to conform with the ISO C standard, adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) inline int 
#line 1846 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_swprintf_l(__wchar_t *const 
#line 1847 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1848 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1849 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) throw() 
#line 1851 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1852 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1853 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1854 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1855 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswprintf_l(_Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 1856 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1857 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1858 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1861 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
extern "C++" 
#line 1860 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(deprecated("function has been changed to conform with the ISO C standard, adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) inline int __cdecl 
#line 1861 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_vswprintf_l(__wchar_t *const 
#line 1862 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1863 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1864 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1865 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) throw() 
#line 1867 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1868 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vswprintf_l(_Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 1869 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1873 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(pop)
#line 1890 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vswscanf(unsigned __int64 _Options, const __wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1901 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswscanf_l(const __wchar_t *const 
#line 1902 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1903 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1904 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1905 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1910 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1911 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return __stdio_common_vswscanf(*__local_stdio_scanf_options(), _Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 1914 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1919 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vswscanf(const __wchar_t *
#line 1920 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *
#line 1921 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1922 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1927 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1928 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vswscanf_l(_Buffer, _Format, 0, _ArgList); 
#line 1929 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1934 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswscanf_s_l(const __wchar_t *const 
#line 1935 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1936 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1937 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1938 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1943 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1944 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return __stdio_common_vswscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 1947 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1954 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vswscanf_s(const __wchar_t *const 
#line 1955 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1956 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1957 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1962 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1963 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vswscanf_s_l(_Buffer, _Format, 0, _ArgList); 
#line 1964 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1969 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {template< size_t _Size> inline int __cdecl vswscanf_s(__wchar_t (&_Buffer)[_Size], const __wchar_t *_Format, ::va_list _Args) throw() { return vswscanf_s(_Buffer, _Size, _Format, _Args); } }
#line 1979 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vsnwscanf_l(const __wchar_t *const 
#line 1980 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1981 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1982 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1983 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1984 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1989 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1990 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return __stdio_common_vswscanf(*__local_stdio_scanf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1993 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1998 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vsnwscanf_s_l(const __wchar_t *const 
#line 1999 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 2000 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 2001 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 2002 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 2003 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 2008 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2009 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return __stdio_common_vswscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 2012 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 2017 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swscanf_l(const __wchar_t *const 
#line 2018 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 2019 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, _locale_t 
#line 2020 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 2025 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2026 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 2027 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 2028 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2029 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswscanf_l(_Buffer, _Format, _Locale, _ArgList); 
#line 2030 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2031 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 2032 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 2037 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl swscanf(const __wchar_t *const 
#line 2038 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 2039 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 2044 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2045 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 2046 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 2047 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2048 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswscanf_l(_Buffer, _Format, 0, _ArgList); 
#line 2049 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2050 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 2051 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 2056 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swscanf_s_l(const __wchar_t *const 
#line 2057 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 2058 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 2059 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 2064 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2065 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 2066 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 2067 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2068 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswscanf_s_l(_Buffer, _Format, _Locale, _ArgList); 
#line 2069 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2070 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 2071 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 2078 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl swscanf_s(const __wchar_t *const 
#line 2079 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 2080 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 2085 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2086 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 2087 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 2088 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2089 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswscanf_s_l(_Buffer, _Format, 0, _ArgList); 
#line 2090 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2091 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 2092 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 2099 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwscanf_l(const __wchar_t *const 
#line 2100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 2101 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 2102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 2103 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 2108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2109 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 2110 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 2111 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2113 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#pragma warning(pop)
#line 2118 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 2120 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 2125 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwscanf(const __wchar_t *const 
#line 2126 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 2127 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 2128 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 2133 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2134 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 2135 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 2136 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2138 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#pragma warning(pop)
#line 2143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2144 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 2145 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 2150 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwscanf_s_l(const __wchar_t *const 
#line 2151 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 2152 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 2153 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 2154 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 2159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2160 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 2161 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 2162 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2163 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 2164 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2165 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 2166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 2171 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwscanf_s(const __wchar_t *const 
#line 2172 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 2173 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 2174 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 2179 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2180 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 2181 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 2182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 2184 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 2186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 2195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
}__pragma(pack ( pop )) 
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
typedef __int64 fpos_t; 
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) errno_t __cdecl _get_stream_buffer_pointers(FILE * _Stream, char *** _Base, char *** _Pointer, int ** _Count); 
#line 89 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) errno_t __cdecl clearerr_s(FILE * _Stream); 
#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) errno_t __cdecl fopen_s(FILE ** _Stream, const char * _FileName, const char * _Mode); 
#line 102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) size_t __cdecl fread_s(void * _Buffer, size_t _BufferSize, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 111 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) errno_t __cdecl freopen_s(FILE ** _Stream, const char * _FileName, const char * _Mode, FILE * _OldStream); 
#line 119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) char *__cdecl gets_s(char * _Buffer, rsize_t _Size); 
#line 125 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) errno_t __cdecl tmpfile_s(FILE ** _Stream); 
#line 131 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) errno_t __cdecl tmpnam_s(char * _Buffer, rsize_t _Size); 
#line 138 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) void __cdecl clearerr(FILE * _Stream); 
#line 144 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl fclose(FILE * _Stream); 
#line 149 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _fcloseall(); 
#line 152 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) FILE *__cdecl _fdopen(int _FileHandle, const char * _Mode); 
#line 158 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl feof(FILE * _Stream); 
#line 163 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl ferror(FILE * _Stream); 
#line 168 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl fflush(FILE * _Stream); 
#line 174 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl fgetc(FILE * _Stream); 
#line 179 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _fgetchar(); 
#line 183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl fgetpos(FILE * _Stream, fpos_t * _Position); 
#line 190 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) char *__cdecl fgets(char * _Buffer, int _MaxCount, FILE * _Stream); 
#line 197 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _fileno(FILE * _Stream); 
#line 202 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _flushall(); 
#line 205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) FILE *__cdecl fopen(const char * _FileName, const char * _Mode); 
#line 213 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl fputc(int _Character, FILE * _Stream); 
#line 219 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _fputchar(int _Character); 
#line 225 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl fputs(const char * _Buffer, FILE * _Stream); 
#line 231 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) size_t __cdecl fread(void * _Buffer, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 240 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) FILE *__cdecl freopen(const char * _FileName, const char * _Mode, FILE * _Stream); 
#line 247 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) FILE *__cdecl _fsopen(const char * _FileName, const char * _Mode, int _ShFlag); 
#line 255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl fsetpos(FILE * _Stream, const fpos_t * _Position); 
#line 262 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl fseek(FILE * _Stream, long _Offset, int _Origin); 
#line 270 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _fseeki64(FILE * _Stream, __int64 _Offset, int _Origin); 
#line 278 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) long __cdecl ftell(FILE * _Stream); 
#line 284 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) __int64 __cdecl _ftelli64(FILE * _Stream); 
#line 289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) size_t __cdecl fwrite(const void * _Buffer, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 298 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl getc(FILE * _Stream); 
#line 303 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl getchar(); 
#line 306 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _getmaxstdio(); 
#line 308 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
extern "C++" {template< size_t _Size> inline char *__cdecl gets_s(char (&_Buffer)[_Size]) throw() { return gets_s(_Buffer, _Size); } }
#line 313 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _getw(FILE * _Stream); 
#line 317 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) void __cdecl perror(const char * _ErrorMessage); 
#line 325 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _pclose(FILE * _Stream); 
#line 330 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) FILE *__cdecl _popen(const char * _Command, const char * _Mode); 
#line 339 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl putc(int _Character, FILE * _Stream); 
#line 345 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl putchar(int _Character); 
#line 350 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl puts(const char * _Buffer); 
#line 356 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _putw(int _Word, FILE * _Stream); 
#line 363 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl remove(const char * _FileName); 
#line 368 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl rename(const char * _OldFileName, const char * _NewFileName); 
#line 373 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _unlink(const char * _FileName); 
#line 380 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl unlink(const char * _FileName); 
#line 388 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) void __cdecl rewind(FILE * _Stream); 
#line 393 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _rmtmp(); 
#line 396 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) void __cdecl setbuf(FILE * _Stream, char * _Buffer); 
#line 402 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _setmaxstdio(int _Maximum); 
#line 408 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl setvbuf(FILE * _Stream, char * _Buffer, int _Mode, size_t _Size); 
#line 421 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) __declspec(allocator) char *__cdecl _tempnam(const char * _DirectoryName, const char * _FilePrefix); 
#line 431 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) FILE *__cdecl tmpfile(); 
#line 433 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl tmpnam_s(char (&_Buffer)[_Size]) throw() { return tmpnam_s(_Buffer, _Size); } }
#line 438 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) char *__cdecl tmpnam(char * _Buffer); 
#line 446 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl ungetc(int _Character, FILE * _Stream); 
#line 458 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) void __cdecl _lock_file(FILE * _Stream); 
#line 462 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) void __cdecl _unlock_file(FILE * _Stream); 
#line 468 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _fclose_nolock(FILE * _Stream); 
#line 474 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _fflush_nolock(FILE * _Stream); 
#line 480 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _fgetc_nolock(FILE * _Stream); 
#line 486 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _fputc_nolock(int _Character, FILE * _Stream); 
#line 492 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) size_t __cdecl _fread_nolock(void * _Buffer, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 501 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) size_t __cdecl _fread_nolock_s(void * _Buffer, size_t _BufferSize, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 510 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _fseek_nolock(FILE * _Stream, long _Offset, int _Origin); 
#line 517 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _fseeki64_nolock(FILE * _Stream, __int64 _Offset, int _Origin); 
#line 524 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) long __cdecl _ftell_nolock(FILE * _Stream); 
#line 529 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) __int64 __cdecl _ftelli64_nolock(FILE * _Stream); 
#line 534 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) size_t __cdecl _fwrite_nolock(const void * _Buffer, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 542 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _getc_nolock(FILE * _Stream); 
#line 547 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _putc_nolock(int _Character, FILE * _Stream); 
#line 553 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _ungetc_nolock(int _Character, FILE * _Stream); 
#line 583 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int *__cdecl __p__commode(); 
#line 603 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vfprintf(unsigned __int64 _Options, FILE * _Stream, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 611 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vfprintf_s(unsigned __int64 _Options, FILE * _Stream, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 620 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vfprintf_p(unsigned __int64 _Options, FILE * _Stream, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 629 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vfprintf_l(FILE *const 
#line 630 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 631 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 632 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 633 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 638 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 639 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return __stdio_common_vfprintf(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 640 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 644 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vfprintf(FILE *const 
#line 645 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 646 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 647 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 652 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 653 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vfprintf_l(_Stream, _Format, 0, _ArgList); 
#line 654 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 658 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vfprintf_s_l(FILE *const 
#line 659 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 660 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 661 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 662 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 667 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 668 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return __stdio_common_vfprintf_s(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 669 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 675 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vfprintf_s(FILE *const 
#line 676 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 677 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 678 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 683 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 684 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vfprintf_s_l(_Stream, _Format, 0, _ArgList); 
#line 685 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 691 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vfprintf_p_l(FILE *const 
#line 692 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 693 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 694 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 695 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 700 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 701 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return __stdio_common_vfprintf_p(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 702 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 706 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vfprintf_p(FILE *const 
#line 707 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 708 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 709 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 714 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 715 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vfprintf_p_l(_Stream, _Format, 0, _ArgList); 
#line 716 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 720 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vprintf_l(const char *const 
#line 721 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 722 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 723 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 728 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 729 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vfprintf_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 730 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 734 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vprintf(const char *const 
#line 735 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 736 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 741 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 742 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vfprintf_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 743 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 747 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vprintf_s_l(const char *const 
#line 748 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 749 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 750 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 755 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 756 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vfprintf_s_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 757 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 763 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vprintf_s(const char *const 
#line 764 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 765 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 770 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 771 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vfprintf_s_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 772 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 778 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vprintf_p_l(const char *const 
#line 779 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 780 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 781 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 786 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 787 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vfprintf_p_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 788 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 792 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vprintf_p(const char *const 
#line 793 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 794 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 799 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 800 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vfprintf_p_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 801 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 805 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _fprintf_l(FILE *const 
#line 806 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 807 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 808 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 813 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 814 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 815 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 816 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 817 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfprintf_l(_Stream, _Format, _Locale, _ArgList); 
#line 818 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 819 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 820 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 824 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl fprintf(FILE *const 
#line 825 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 826 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 831 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 832 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 833 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 834 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 835 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfprintf_l(_Stream, _Format, 0, _ArgList); 
#line 836 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 837 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 838 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 841 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _set_printf_count_output(int _Value); 
#line 845 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _get_printf_count_output(); 
#line 848 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _fprintf_s_l(FILE *const 
#line 849 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 850 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 851 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 856 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 857 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 858 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 859 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 860 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfprintf_s_l(_Stream, _Format, _Locale, _ArgList); 
#line 861 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 862 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 863 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 869 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl fprintf_s(FILE *const 
#line 870 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 871 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 876 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 877 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 878 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 879 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 880 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfprintf_s_l(_Stream, _Format, 0, _ArgList); 
#line 881 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 882 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 883 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 889 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _fprintf_p_l(FILE *const 
#line 890 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 891 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 892 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 897 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 898 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 899 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 900 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 901 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfprintf_p_l(_Stream, _Format, _Locale, _ArgList); 
#line 902 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 903 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 904 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 908 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _fprintf_p(FILE *const 
#line 909 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 910 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 915 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 916 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 917 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 918 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 919 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfprintf_p_l(_Stream, _Format, 0, _ArgList); 
#line 920 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 921 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 922 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 926 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _printf_l(const char *const 
#line 927 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 928 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 933 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 934 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 935 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 936 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 937 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfprintf_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 938 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 939 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 940 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 944 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl printf(const char *const 
#line 945 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 950 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 951 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 952 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 953 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 954 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfprintf_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 955 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 956 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 957 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 961 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _printf_s_l(const char *const 
#line 962 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 963 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 968 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 969 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 970 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 971 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 972 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfprintf_s_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 973 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 974 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 975 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 981 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl printf_s(const char *const 
#line 982 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 987 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 988 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 989 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 990 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 991 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfprintf_s_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 992 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 993 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 994 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1000 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _printf_p_l(const char *const 
#line 1001 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1002 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1007 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1008 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1009 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1010 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1011 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfprintf_p_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 1012 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1013 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1014 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1018 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _printf_p(const char *const 
#line 1019 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1024 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1025 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1026 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1027 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1028 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfprintf_p_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 1029 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1030 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1031 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1040 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vfscanf(unsigned __int64 _Options, FILE * _Stream, const char * _Format, _locale_t _Locale, va_list _Arglist); 
#line 1049 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vfscanf_l(FILE *const 
#line 1050 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 1051 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1052 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1053 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1058 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1059 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return __stdio_common_vfscanf(*__local_stdio_scanf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 1062 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1066 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vfscanf(FILE *const 
#line 1067 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 1068 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1069 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1074 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1075 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vfscanf_l(_Stream, _Format, 0, _ArgList); 
#line 1076 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1080 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vfscanf_s_l(FILE *const 
#line 1081 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 1082 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1083 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1084 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1089 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1090 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return __stdio_common_vfscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Stream, _Format, _Locale, _ArgList); 
#line 1093 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vfscanf_s(FILE *const 
#line 1101 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 1102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1103 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1109 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vfscanf_s_l(_Stream, _Format, 0, _ArgList); 
#line 1110 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1116 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vscanf_l(const char *const 
#line 1117 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1118 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1125 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vfscanf_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 1126 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vscanf(const char *const 
#line 1131 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1132 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1138 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vfscanf_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 1139 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vscanf_s_l(const char *const 
#line 1144 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1145 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1146 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1151 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1152 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vfscanf_s_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 1153 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vscanf_s(const char *const 
#line 1160 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1161 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1167 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vfscanf_s_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 1168 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1174 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _fscanf_l(FILE *const 
#line 1175 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 1176 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1177 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1184 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfscanf_l(_Stream, _Format, _Locale, _ArgList); 
#line 1187 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1188 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1189 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1193 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl fscanf(FILE *const 
#line 1194 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 1195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1200 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1201 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1202 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1203 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1204 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfscanf_l(_Stream, _Format, 0, _ArgList); 
#line 1205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1206 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1207 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1211 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _fscanf_s_l(FILE *const 
#line 1212 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 1213 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1214 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1219 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1220 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1221 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1222 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1223 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfscanf_s_l(_Stream, _Format, _Locale, _ArgList); 
#line 1224 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1225 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1226 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1232 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl fscanf_s(FILE *const 
#line 1233 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 1234 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1239 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1240 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1241 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1242 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1243 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfscanf_s_l(_Stream, _Format, 0, _ArgList); 
#line 1244 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1245 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1246 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1252 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _scanf_l(const char *const 
#line 1253 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1254 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1259 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1260 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1261 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1262 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1263 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfscanf_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 1264 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1265 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1266 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1270 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl scanf(const char *const 
#line 1271 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1276 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1277 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1278 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1279 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1280 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfscanf_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 1281 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1282 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1283 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1287 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _scanf_s_l(const char *const 
#line 1288 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1294 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1295 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1296 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1297 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1298 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfscanf_s_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 1299 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1300 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1301 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1307 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl scanf_s(const char *const 
#line 1308 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1313 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1314 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1315 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1316 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1317 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfscanf_s_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 1318 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1319 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1320 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1333 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vsprintf(unsigned __int64 _Options, char * _Buffer, size_t _BufferCount, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1343 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vsprintf_s(unsigned __int64 _Options, char * _Buffer, size_t _BufferCount, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1353 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vsnprintf_s(unsigned __int64 _Options, char * _Buffer, size_t _BufferCount, size_t _MaxCount, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1364 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vsprintf_p(unsigned __int64 _Options, char * _Buffer, size_t _BufferCount, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1375 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsnprintf_l(char *const 
#line 1376 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1377 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1378 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1379 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1380 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1385 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1386 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
const int _Result = __stdio_common_vsprintf((*__local_stdio_printf_options()) | (1Ui64 << 0), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1390 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1391 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1396 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsnprintf(char *const 
#line 1397 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1398 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1399 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1400 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1405 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#pragma warning(push)
#pragma warning(disable: 4996)
return _vsnprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#pragma warning(pop)
} 
#line 1426 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vsnprintf(char *const 
#line 1427 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1428 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1429 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1430 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1435 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1436 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
const int _Result = __stdio_common_vsprintf((*__local_stdio_printf_options()) | (1Ui64 << 1), _Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1440 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1441 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1446 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsprintf_l(char *const 
#line 1447 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 1448 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1449 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1450 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1455 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#pragma warning(push)
#pragma warning(disable: 4996)
return _vsnprintf_l(_Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#pragma warning(pop)
} 
#line 1465 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vsprintf(char *const 
#line 1466 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 1467 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1468 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#pragma warning(push)
#pragma warning(disable: 4996)
return _vsnprintf_l(_Buffer, (size_t)(-1), _Format, 0, _ArgList); 
#pragma warning(pop)
} 
#line 1483 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsprintf_s_l(char *const 
#line 1484 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1485 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1486 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1487 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1488 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1493 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1494 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
const int _Result = __stdio_common_vsprintf_s(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1498 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1499 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1506 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vsprintf_s(char *const 
#line 1507 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1508 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1509 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1510 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1515 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1516 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vsprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1517 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1520 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
extern "C++" {template< size_t _Size> inline int __cdecl vsprintf_s(char (&_Buffer)[_Size], const char *_Format, ::va_list _ArgList) throw() { return vsprintf_s(_Buffer, _Size, _Format, _ArgList); } }
#line 1532 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsprintf_p_l(char *const 
#line 1533 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1534 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1535 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1536 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1537 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1542 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1543 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
const int _Result = __stdio_common_vsprintf_p(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1547 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1548 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1553 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsprintf_p(char *const 
#line 1554 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1555 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1556 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1557 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1562 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1563 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vsprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1564 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1569 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsnprintf_s_l(char *const 
#line 1570 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1571 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const size_t 
#line 1572 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_MaxCount, const char *const 
#line 1573 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1574 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1575 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1580 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1581 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
const int _Result = __stdio_common_vsnprintf_s(*__local_stdio_printf_options(), _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList); 
#line 1585 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1586 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1591 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsnprintf_s(char *const 
#line 1592 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1593 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const size_t 
#line 1594 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_MaxCount, const char *const 
#line 1595 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1596 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1601 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1602 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList); 
#line 1603 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1606 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
extern "C++" {template< size_t _Size> inline int __cdecl _vsnprintf_s(char (&_Buffer)[_Size], ::size_t _BufferCount, const char *_Format, ::va_list _ArgList) throw() { return _vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
#line 1619 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vsnprintf_s(char *const 
#line 1620 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1621 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const size_t 
#line 1622 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_MaxCount, const char *const 
#line 1623 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1624 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1629 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1630 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList); 
#line 1631 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1634 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
extern "C++" {template< size_t _Size> inline int __cdecl vsnprintf_s(char (&_Buffer)[_Size], ::size_t _BufferCount, const char *_Format, ::va_list _ArgList) throw() { return vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
#line 1646 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vscprintf_l(const char *const 
#line 1647 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1648 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1649 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1654 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1655 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
const int _Result = __stdio_common_vsprintf((*__local_stdio_printf_options()) | (1Ui64 << 1), 0, 0, _Format, _Locale, _ArgList); 
#line 1659 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1660 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1664 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vscprintf(const char *const 
#line 1665 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1666 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1671 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1672 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vscprintf_l(_Format, 0, _ArgList); 
#line 1673 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1677 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vscprintf_p_l(const char *const 
#line 1678 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1679 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1680 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1685 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1686 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
const int _Result = __stdio_common_vsprintf_p((*__local_stdio_printf_options()) | (1Ui64 << 1), 0, 0, _Format, _Locale, _ArgList); 
#line 1690 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1691 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1695 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vscprintf_p(const char *const 
#line 1696 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1697 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1702 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1703 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vscprintf_p_l(_Format, 0, _ArgList); 
#line 1704 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1708 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsnprintf_c_l(char *const 
#line 1709 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1710 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1711 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1712 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1713 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1718 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1719 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
const int _Result = __stdio_common_vsprintf(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1723 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1724 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1729 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsnprintf_c(char *const 
#line 1730 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1731 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1732 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1733 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1738 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1739 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vsnprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1740 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1744 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _sprintf_l(char *const 
#line 1745 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 1746 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1747 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1752 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1753 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1754 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1755 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1757 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = _vsprintf_l(_Buffer, _Format, _Locale, _ArgList); 
#pragma warning(pop)
#line 1762 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1763 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1764 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1769 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl sprintf(char *const 
#line 1770 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 1771 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1776 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1777 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1778 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1779 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1781 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = _vsprintf_l(_Buffer, _Format, 0, _ArgList); 
#pragma warning(pop)
#line 1786 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1787 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1788 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1791 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
#pragma warning(push)
#pragma warning(disable: 4996)
__inline int __cdecl sprintf(char * _Buffer, const char * _Format, ...); __inline int __cdecl vsprintf(char * _Buffer, const char * _Format, va_list _Args); 
#line 1799 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
#pragma warning(pop)
#line 1803 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _sprintf_s_l(char *const 
#line 1804 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1805 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1806 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1807 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1812 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1813 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1814 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1815 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1816 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1817 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1818 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1819 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1826 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl sprintf_s(char *const 
#line 1827 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1828 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1829 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1834 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1835 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1836 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1837 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1838 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1839 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1840 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1841 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1846 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
extern "C++" {__pragma(warning(push)) __pragma(warning(disable: 4793)) template< size_t _Size> inline int __cdecl sprintf_s(char (&_Buffer)[_Size], const char *_Format, ...) throw() { ::va_list _ArgList; (void)(__vcrt_va_start_verify_argument_type< const char *> (), ((void)__va_start(&_ArgList, _Format))); return vsprintf_s(_Buffer, _Size, _Format, _ArgList); } __pragma(warning(pop)) }
#line 1854 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _sprintf_p_l(char *const 
#line 1855 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1856 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1857 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1858 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1863 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1864 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1865 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1866 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1867 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1868 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1869 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1870 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1875 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _sprintf_p(char *const 
#line 1876 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1877 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1878 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1883 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1884 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1885 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1886 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1887 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1888 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1889 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1890 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1895 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf_l(char *const 
#line 1896 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1897 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1898 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1899 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1904 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1905 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1906 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1907 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1909 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = _vsnprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#pragma warning(pop)
#line 1914 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1915 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1916 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1932 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl snprintf(char *const 
#line 1933 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1934 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1935 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1940 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1941 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1942 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1943 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#pragma warning(suppress:28719)
_Result = vsnprintf(_Buffer, _BufferCount, _Format, _ArgList); 
#line 1946 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1947 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1948 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1952 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf(char *const 
#line 1953 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1954 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1955 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1960 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1961 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1962 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1963 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#pragma warning(suppress:28719)
_Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList); 
#line 1966 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1967 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1968 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1971 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf(char * _Buffer, size_t _BufferCount, const char * _Format, ...); __inline int __cdecl _vsnprintf(char * _Buffer, size_t _BufferCount, const char * _Format, va_list _Args); 
#line 1982 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf_c_l(char *const 
#line 1983 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1984 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1985 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1986 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1991 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1992 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1993 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1994 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1995 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1996 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1997 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1998 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2003 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf_c(char *const 
#line 2004 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 2005 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 2006 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 2011 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2012 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 2013 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2014 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2015 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 2016 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2017 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 2018 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2023 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf_s_l(char *const 
#line 2024 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 2025 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const size_t 
#line 2026 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_MaxCount, const char *const 
#line 2027 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 2028 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 2033 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2034 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 2035 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2036 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2037 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList); 
#line 2038 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2039 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 2040 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2045 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf_s(char *const 
#line 2046 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 2047 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const size_t 
#line 2048 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_MaxCount, const char *const 
#line 2049 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 2054 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2055 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 2056 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2057 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2058 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList); 
#line 2059 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2060 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 2061 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2064 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
extern "C++" {__pragma(warning(push)) __pragma(warning(disable: 4793)) template< size_t _Size> inline int __cdecl _snprintf_s(char (&_Buffer)[_Size], ::size_t _BufferCount, const char *_Format, ...) throw() { ::va_list _ArgList; (void)(__vcrt_va_start_verify_argument_type< const char *> (), ((void)__va_start(&_ArgList, _Format))); return _vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } __pragma(warning(pop)) }
#line 2073 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _scprintf_l(const char *const 
#line 2074 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 2075 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 2080 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2081 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 2082 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2083 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2084 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vscprintf_l(_Format, _Locale, _ArgList); 
#line 2085 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2086 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 2087 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2091 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _scprintf(const char *const 
#line 2092 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 2097 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2098 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 2099 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2101 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vscprintf_l(_Format, 0, _ArgList); 
#line 2102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2103 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 2104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _scprintf_p_l(const char *const 
#line 2109 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 2110 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 2115 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2116 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 2117 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2118 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vscprintf_p_l(_Format, _Locale, _ArgList); 
#line 2120 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2121 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 2122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2126 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _scprintf_p(const char *const 
#line 2127 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 2132 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2133 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 2134 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2135 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2136 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vscprintf_p(_Format, _ArgList); 
#line 2137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2138 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 2139 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2147 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vsscanf(unsigned __int64 _Options, const char * _Buffer, size_t _BufferCount, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 2157 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsscanf_l(const char *const 
#line 2158 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 2159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 2160 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 2161 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 2166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2167 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return __stdio_common_vsscanf(*__local_stdio_scanf_options(), _Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 2170 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2174 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vsscanf(const char *const 
#line 2175 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 2176 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 2177 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 2182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vsscanf_l(_Buffer, _Format, 0, _ArgList); 
#line 2184 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2188 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsscanf_s_l(const char *const 
#line 2189 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 2190 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 2191 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 2192 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 2197 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2198 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return __stdio_common_vsscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 2201 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2206 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
#pragma warning(push)
#pragma warning(disable:6530)
#line 2210 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vsscanf_s(const char *const 
#line 2211 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 2212 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 2213 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 2218 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2219 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vsscanf_s_l(_Buffer, _Format, 0, _ArgList); 
#line 2220 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2223 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
extern "C++" {template< size_t _Size> inline int __cdecl vsscanf_s(const char (&_Buffer)[_Size], const char *_Format, ::va_list _ArgList) throw() { return vsscanf_s(_Buffer, _Size, _Format, _ArgList); } }
#line 2230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
#pragma warning(pop)
#line 2235 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _sscanf_l(const char *const 
#line 2236 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 2237 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 2238 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 2243 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2244 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 2245 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2246 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2247 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vsscanf_l(_Buffer, _Format, _Locale, _ArgList); 
#line 2248 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2249 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 2250 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2254 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl sscanf(const char *const 
#line 2255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 2256 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 2261 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2262 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 2263 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2264 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2265 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vsscanf_l(_Buffer, _Format, 0, _ArgList); 
#line 2266 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2267 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 2268 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2272 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _sscanf_s_l(const char *const 
#line 2273 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 2274 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 2275 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 2280 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2281 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 2282 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2283 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2284 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vsscanf_s_l(_Buffer, _Format, _Locale, _ArgList); 
#line 2285 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2286 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 2287 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2293 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl sscanf_s(const char *const 
#line 2294 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 2295 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 2300 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2301 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 2302 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2303 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2305 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = vsscanf_s(_Buffer, _Format, _ArgList); 
#pragma warning(pop)
#line 2310 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2311 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 2312 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2317 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
#pragma warning(push)
#pragma warning(disable:6530)
#line 2321 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _snscanf_l(const char *const 
#line 2322 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 2323 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 2324 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 2325 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 2330 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2331 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 2332 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2333 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2335 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = __stdio_common_vsscanf(*__local_stdio_scanf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 2339 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2340 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 2341 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2345 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _snscanf(const char *const 
#line 2346 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 2347 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 2348 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 2353 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2354 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 2355 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2356 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2358 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = __stdio_common_vsscanf(*__local_stdio_scanf_options(), _Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 2362 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2363 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 2364 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2369 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _snscanf_s_l(const char *const 
#line 2370 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 2371 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 2372 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 2373 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 2378 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2379 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 2380 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2381 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2383 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = __stdio_common_vsscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 2387 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2388 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 2389 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2393 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _snscanf_s(const char *const 
#line 2394 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 2395 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 2396 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 2401 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2402 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 2403 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2404 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2406 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = __stdio_common_vsscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 2410 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2411 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 2412 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2415 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
#pragma warning(pop)
#line 2438 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) char *__cdecl tempnam(const char * _Directory, const char * _FilePrefix); 
#line 2447 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl fcloseall(); 
#line 2448 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) FILE *__cdecl fdopen(int _FileHandle, const char * _Format); 
#line 2449 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl fgetchar(); 
#line 2450 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl fileno(FILE * _Stream); 
#line 2451 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl flushall(); 
#line 2452 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl fputchar(int _Ch); 
#line 2453 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl getw(FILE * _Stream); 
#line 2454 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl putw(int _Ch, FILE * _Stream); 
#line 2455 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl rmtmp(); 
#line 2461 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
}__pragma(pack ( pop )) 
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"
extern "C" { typedef FILE FILE; }
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"
namespace std { 
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"
using ::FILE;using ::_Mbstatet;
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"
using ::fpos_t;
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"
using ::clearerr;using ::fclose;using ::feof;
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"
using ::ferror;using ::fflush;using ::fgetc;
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"
using ::fgetpos;using ::fgets;using ::fopen;
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"
using ::fprintf;using ::fputc;using ::fputs;
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"
using ::fread;using ::freopen;using ::fscanf;
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"
using ::fseek;using ::fsetpos;using ::ftell;
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"
using ::fwrite;using ::getc;using ::getchar;
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"
using ::perror;
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"
using ::putc;using ::putchar;
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"
using ::printf;using ::puts;using ::remove;
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"
using ::rename;using ::rewind;using ::scanf;
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"
using ::setbuf;using ::setvbuf;using ::sprintf;
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"
using ::sscanf;using ::tmpfile;using ::tmpnam;
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"
using ::ungetc;using ::vfprintf;using ::vprintf;
#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"
using ::vsprintf;
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"
using ::snprintf;using ::vsnprintf;
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"
using ::vfscanf;using ::vscanf;using ::vsscanf;
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"
}
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstring"
namespace std { 
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstring"
using ::memchr;using ::memcmp;
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstring"
using ::memcpy;using ::memmove;using ::memset;
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstring"
using ::strcat;using ::strchr;using ::strcmp;
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstring"
using ::strcoll;using ::strcpy;using ::strcspn;
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstring"
using ::strerror;using ::strlen;using ::strncat;
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstring"
using ::strncmp;using ::strncpy;using ::strpbrk;
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstring"
using ::strrchr;using ::strspn;using ::strstr;
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstring"
using ::strtok;using ::strxfrm;
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstring"
}
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstddef"
namespace std { 
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstddef"
using ::ptrdiff_t;
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstddef"
}
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstddef"
namespace std { 
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstddef"
typedef double max_align_t; 
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstddef"
}
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstddef"
using std::max_align_t;
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\initializer_list"
#pragma warning(push,3)
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\initializer_list"
#pragma pack ( push, 8 )
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\initializer_list"
namespace std { 
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\initializer_list"
template < class _Elem >
 class initializer_list
 {
public :
 typedef _Elem value_type;
 typedef const _Elem & reference;
 typedef const _Elem & const_reference;
 typedef size_t size_type;

 typedef const _Elem * iterator;
 typedef const _Elem * const_iterator;

 constexpr initializer_list ( ) noexcept
  : _First ( 0 ), _Last ( 0 )
  {
  }

 constexpr initializer_list ( const _Elem * _First_arg,
  const _Elem * _Last_arg ) noexcept
  : _First ( _First_arg ), _Last ( _Last_arg )
  {
  }

 constexpr const _Elem * begin ( ) const noexcept
  {
  return ( _First );
  }

 constexpr const _Elem * end ( ) const noexcept
  {
  return ( _Last );
  }

 constexpr size_t size ( ) const noexcept
  {
  return ( ( size_t ) ( _Last - _First ) );
  }

private :
 const _Elem * _First;
 const _Elem * _Last;
 };
#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\initializer_list"
template < class _Elem > inline
 constexpr const _Elem * begin ( initializer_list < _Elem > _Ilist ) noexcept
 {
 return ( _Ilist . begin ( ) );
 }
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\initializer_list"
template < class _Elem > inline
 constexpr const _Elem * end ( initializer_list < _Elem > _Ilist ) noexcept
 {
 return ( _Ilist . end ( ) );
 }
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\initializer_list"
}
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\initializer_list"
#pragma warning(pop)
#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
#pragma warning(push,3)
#line 74 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\initializer_list"
#pragma pack ( pop )
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
#pragma pack ( push, 8 )
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
namespace std { 
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template< bool , class 
#line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
_Ty1, class 
#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
_Ty2> 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
struct _If { 
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
typedef _Ty2 type; 
#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template< class _Ty1, class 
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
_Ty2> 
#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
struct _If< true, _Ty1, _Ty2>  { 
#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
typedef _Ty1 type; 
#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 143 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template< class _Ty> 
#line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
struct _Always_false { 
#line 146 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
static constexpr bool value = false; 
#line 147 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template< class _Arg, class 
#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
_Result> 
#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
struct unary_function { 
#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
typedef _Arg argument_type; 
#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
typedef _Result result_type; 
#line 159 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 162 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template< class _Arg1, class 
#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
_Arg2, class 
#line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
_Result> 
#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
struct binary_function { 
#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
typedef _Arg1 first_argument_type; 
#line 168 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
typedef _Arg2 second_argument_type; 
#line 169 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
typedef _Result result_type; 
#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 174 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template < class _Ty = void >
 struct plus
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef _Ty result_type;

 constexpr _Ty operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
  {
  return ( _Left + _Right );
  }
 };
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template < class _Ty = void >
 struct minus
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef _Ty result_type;

 constexpr _Ty operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
  {
  return ( _Left - _Right );
  }
 };
#line 202 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template < class _Ty = void >
 struct multiplies
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef _Ty result_type;

 constexpr _Ty operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
  {
  return ( _Left * _Right );
  }
 };
#line 216 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template < class _Ty = void >
 struct equal_to
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef bool result_type;

 constexpr bool operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
  {
  return ( _Left == _Right );
  }
 };
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template < class _Ty = void >
 struct less
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef bool result_type;

 constexpr bool operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
  {
  return ( _Left < _Right );
  }
 };
#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct plus< void>  { 
#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
typedef int is_transparent; 
#line 249 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template < class _Ty1,
  class _Ty2 >
  constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
  -> decltype ( static_cast < _Ty1 && > ( _Left )
   + static_cast < _Ty2 && > ( _Right ) )
  {
  return ( static_cast < _Ty1 && > ( _Left )
   + static_cast < _Ty2 && > ( _Right ) );
  }
#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct minus< void>  { 
#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
typedef int is_transparent; 
#line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template < class _Ty1,
  class _Ty2 >
  constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
  -> decltype ( static_cast < _Ty1 && > ( _Left )
   - static_cast < _Ty2 && > ( _Right ) )
  {
  return ( static_cast < _Ty1 && > ( _Left )
   - static_cast < _Ty2 && > ( _Right ) );
  }
#line 275 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct multiplies< void>  { 
#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
typedef int is_transparent; 
#line 283 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template < class _Ty1,
  class _Ty2 >
  constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
  -> decltype ( static_cast < _Ty1 && > ( _Left )
   * static_cast < _Ty2 && > ( _Right ) )
  {
  return ( static_cast < _Ty1 && > ( _Left )
   * static_cast < _Ty2 && > ( _Right ) );
  }
#line 292 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct equal_to<>  { 
#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
typedef int is_transparent; 
#line 300 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template < class _Ty1,
  class _Ty2 >
  constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
  -> decltype ( static_cast < _Ty1 && > ( _Left )
   == static_cast < _Ty2 && > ( _Right ) )
  {
  return ( static_cast < _Ty1 && > ( _Left )
   == static_cast < _Ty2 && > ( _Right ) );
  }
#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 313 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct less<>  { 
#line 315 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
typedef int is_transparent; 
#line 317 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template < class _Ty1,
  class _Ty2 >
  constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
  -> decltype ( static_cast < _Ty1 && > ( _Left )
   < static_cast < _Ty2 && > ( _Right ) )
  {
  return ( static_cast < _Ty1 && > ( _Left )
   < static_cast < _Ty2 && > ( _Right ) );
  }
#line 326 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 329 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}
#line 333 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
namespace std { 
#line 335 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
inline size_t _Hash_seq(const unsigned char *_First, size_t _Count) 
#line 336 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
{ 
#line 338 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
static_assert((sizeof(size_t) == (8)), "This code is for 64-bit size_t.");
#line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
const size_t _FNV_offset_basis = 14695981039346656037Ui64; 
#line 340 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
const size_t _FNV_prime = 1099511628211Ui64; 
#line 348 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
size_t _Val = _FNV_offset_basis; 
#line 349 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
for (size_t _Next = (0); _Next < _Count; ++_Next) 
#line 350 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
{ 
#line 351 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
_Val ^= ((size_t)(_First[_Next])); 
#line 352 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
_Val *= _FNV_prime; 
#line 353 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}  
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
return _Val; 
#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
} 
#line 358 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template < class _Kty >
 struct _Bitwise_hash
 {
 typedef _Kty argument_type;
 typedef size_t result_type;

 size_t operator ( ) ( const _Kty & _Keyval ) const
  {
  return ( _Hash_seq ( ( const unsigned char * ) & _Keyval, sizeof ( _Kty ) ) );
  }
 };
#line 371 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template< class _Kty> 
#line 372 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
struct hash : public _Bitwise_hash< _Kty>  { 
#line 375 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
static constexpr bool _Value = __is_enum(_Kty); 
#line 376 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
static_assert(_Value, "The C++ Standard doesn\'t provide a hash for this type.");
#line 378 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 380 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct hash< bool>  : public _Bitwise_hash< bool>  { 
#line 383 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 386 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct hash< char>  : public _Bitwise_hash< char>  { 
#line 389 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 392 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct hash< signed char>  : public _Bitwise_hash< signed char>  { 
#line 395 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 398 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct hash< unsigned char>  : public _Bitwise_hash< unsigned char>  { 
#line 401 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 404 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct hash< char16_t>  : public _Bitwise_hash< char16_t>  { 
#line 407 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 410 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct hash< char32_t>  : public _Bitwise_hash< char32_t>  { 
#line 413 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 417 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct hash< __wchar_t>  : public _Bitwise_hash< __wchar_t>  { 
#line 420 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 424 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct hash< short>  : public _Bitwise_hash< short>  { 
#line 427 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 430 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct hash< unsigned short>  : public _Bitwise_hash< unsigned short>  { 
#line 433 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 436 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct hash< int>  : public _Bitwise_hash< int>  { 
#line 439 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 442 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct hash< unsigned>  : public _Bitwise_hash< unsigned>  { 
#line 445 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 448 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct hash< long>  : public _Bitwise_hash< long>  { 
#line 451 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 454 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct hash< unsigned long>  : public _Bitwise_hash< unsigned long>  { 
#line 457 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 460 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct hash< __int64>  : public _Bitwise_hash< __int64>  { 
#line 463 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 466 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct hash< unsigned __int64>  : public _Bitwise_hash< unsigned __int64>  { 
#line 469 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 472 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct hash< float>  : public _Bitwise_hash< float>  { 
#line 475 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
typedef float _Kty; 
#line 476 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
typedef std::_Bitwise_hash< float>  _Mybase; 
#line 478 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
size_t operator()(const _Kty &_Keyval) const 
#line 479 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
{ 
#line 480 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
return this->_Mybase::operator()((_Keyval == (0)) ? 0 : _Keyval); 
#line 482 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
} 
#line 483 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 486 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct hash< double>  : public _Bitwise_hash< double>  { 
#line 489 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
typedef double _Kty; 
#line 490 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
typedef std::_Bitwise_hash< double>  _Mybase; 
#line 492 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
size_t operator()(const _Kty &_Keyval) const 
#line 493 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
{ 
#line 494 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
return this->_Mybase::operator()((_Keyval == (0)) ? 0 : _Keyval); 
#line 496 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
} 
#line 497 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 500 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template<> struct hash< long double>  : public _Bitwise_hash< long double>  { 
#line 503 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
typedef long double _Kty; 
#line 504 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
typedef std::_Bitwise_hash< long double>  _Mybase; 
#line 506 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
size_t operator()(const _Kty &_Keyval) const 
#line 507 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
{ 
#line 508 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
return this->_Mybase::operator()((_Keyval == (0)) ? 0 : _Keyval); 
#line 510 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
} 
#line 511 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 513 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template< class _Ty> 
#line 514 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
struct hash< _Ty *>  : public _Bitwise_hash< _Ty *>  { 
#line 517 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 518 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}
#line 522 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
namespace std { 
#line 523 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
namespace tr1 { 
#line 524 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
using std::hash;
#line 525 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}
#line 526 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}
#line 633 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
namespace std { 
#line 635 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template< class ..._Types> 
#line 636 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
struct _Arg_types { 
#line 638 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 640 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template< class _Ty1> 
#line 641 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
struct _Arg_types< _Ty1>  { 
#line 643 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
typedef _Ty1 argument_type; 
#line 644 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 646 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template< class _Ty1, class 
#line 647 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
_Ty2> 
#line 648 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
struct _Arg_types< _Ty1, _Ty2>  { 
#line 650 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
typedef _Ty1 first_argument_type; 
#line 651 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
typedef _Ty2 second_argument_type; 
#line 652 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 655 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template< class _Ty> 
#line 656 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
struct _Is_function { 
#line 658 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
typedef false_type _Bool_type; 
#line 659 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
static constexpr bool _Weird = false; 
#line 660 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 673 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...)>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = false; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...)>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = false; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...) const>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...) const>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...) volatile>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...) volatile>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...) const volatile>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...) const volatile>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...) &>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...) &>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...) const &>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...) const &>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...) volatile &>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...) volatile &>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...) const volatile &>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...) const volatile &>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...) &&>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...) &&>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...) const &&>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...) const &&>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...) volatile &&>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...) volatile &&>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...) const volatile &&>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...) const volatile &&>  : public _Arg_types< _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; 
#line 686 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...)>  { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = false; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...) const>  { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...) volatile>  { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...) const volatile>  { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...) &>  { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...) const &>  { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...) volatile &>  { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...) const volatile &>  { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...) &&>  { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...) const &&>  { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...) volatile &&>  { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...) const volatile &&>  { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; 
#line 689 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template< class _Ty> 
#line 690 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
struct is_function : public _Is_function< _Ty> ::_Bool_type { 
#line 693 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}; 
#line 696 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template< class _Ty> constexpr bool 
#line 697 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
is_function_v = (is_function< _Ty> ::value); 
#line 722 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template < class _Ty > inline
 constexpr _Ty * addressof ( _Ty & _Val ) noexcept
 {
 return ( __builtin_addressof ( _Val ) );
 }
#line 731 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template < class _Ptrty > inline
 auto _Unfancy ( _Ptrty _Ptr )
 {
 return ( :: std :: addressof ( * _Ptr ) );
 }
#line 737 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
template < class _Ty > inline
 _Ty * _Unfancy ( _Ty * _Ptr )
 {
 return ( _Ptr );
 }
#line 743 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
}
#line 745 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
#pragma warning(pop)
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
#pragma warning(push,3)
#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
#pragma warning(disable: 4180 4296)
#line 746 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
#pragma pack ( pop )
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
#pragma pack ( push, 8 )
#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
namespace std { 
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Is_memfunptr { 
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef false_type _Bool_type; 
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...)>  : public _Arg_types< _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...)>  : public _Arg_types< _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) const>  : public _Arg_types< const _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) const>  : public _Arg_types< const _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) volatile>  : public _Arg_types< volatile _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) volatile>  : public _Arg_types< volatile _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) const volatile>  : public _Arg_types< const volatile _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) const volatile>  : public _Arg_types< const volatile _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) &>  : public _Arg_types< _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) &>  : public _Arg_types< _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) const &>  : public _Arg_types< const _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) const &>  : public _Arg_types< const _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) volatile &>  : public _Arg_types< volatile _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) volatile &>  : public _Arg_types< volatile _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) const volatile &>  : public _Arg_types< const volatile _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) const volatile &>  : public _Arg_types< const volatile _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) &&>  : public _Arg_types< _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) &&>  : public _Arg_types< _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) const &&>  : public _Arg_types< const _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) const &&>  : public _Arg_types< const _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) volatile &&>  : public _Arg_types< volatile _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) volatile &&>  : public _Arg_types< volatile _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) const volatile &&>  : public _Arg_types< const volatile _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) const volatile &&>  : public _Arg_types< const volatile _Arg0 *, _Types...>  { typedef ::std::true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; 
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...)>  { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) const>  { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) volatile>  { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) const volatile>  { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) &>  { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) const &>  { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) volatile &>  { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) const volatile &>  { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) &&>  { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) const &&>  { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) volatile &&>  { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) const volatile &&>  { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_void : public false_type { 
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template<> struct is_void< void>  : public true_type { }; template<> struct is_void< const void>  : public true_type { }; template<> struct is_void< volatile void>  : public true_type { }; template<> struct is_void< const volatile void>  : public true_type { }; 
#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct add_const { 
#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef const _Ty type; 
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct add_volatile { 
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef volatile _Ty type; 
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct add_cv { 
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef const volatile _Ty type; 
#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, bool 
#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
 = _Is_function< _Ty> ::_Weird || is_void< _Ty> ::value> 
#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Add_reference { 
#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef _Ty _Lvalue; 
#line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef _Ty _Rvalue; 
#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Add_reference< _Ty, false>  { 
#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef _Ty &_Lvalue; 
#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef _Ty &&_Rvalue; 
#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct add_lvalue_reference { 
#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename _Add_reference< _Ty> ::_Lvalue type; 
#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 114 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct add_rvalue_reference { 
#line 116 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename _Add_reference< _Ty> ::_Rvalue type; 
#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 120 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> typename add_rvalue_reference< _Ty> ::type declval() noexcept; 
#line 125 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct remove_extent { 
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef _Ty type; 
#line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, size_t _Ix> 
#line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct remove_extent< _Ty [_Ix]>  { 
#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef _Ty type; 
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct remove_extent< _Ty []>  { 
#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef _Ty type; 
#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 145 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct remove_all_extents { 
#line 147 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef _Ty type; 
#line 148 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 150 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, size_t _Ix> 
#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct remove_all_extents< _Ty [_Ix]>  { 
#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename std::remove_all_extents< _Ty> ::type type; 
#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 156 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct remove_all_extents< _Ty []>  { 
#line 159 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename std::remove_all_extents< _Ty> ::type type; 
#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct remove_pointer { 
#line 166 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef _Ty type; 
#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 176 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> struct remove_pointer< _Ty *>  { typedef _Ty type; }; template< class _Ty> struct remove_pointer< _Ty *const>  { typedef _Ty type; }; template< class _Ty> struct remove_pointer< _Ty *volatile>  { typedef _Ty type; }; template< class _Ty> struct remove_pointer< _Ty *const volatile>  { typedef _Ty type; }; 
#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, bool 
#line 181 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
 = _Is_function< _Ty> ::_Weird> 
#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Add_pointer { 
#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef _Ty type; 
#line 185 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Add_pointer< _Ty, false>  { 
#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename remove_reference< _Ty> ::type *type; 
#line 191 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 193 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct add_pointer { 
#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename _Add_pointer< _Ty> ::type type; 
#line 197 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 201 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 202 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_array : public false_type { 
#line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, size_t _Nx> 
#line 208 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_array< _Ty [_Nx]>  : public true_type { 
#line 211 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 213 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 214 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_array< _Ty []>  : public true_type { 
#line 217 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 220 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 221 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_lvalue_reference : public false_type { 
#line 224 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 226 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 227 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_lvalue_reference< _Ty &>  : public true_type { 
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 233 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 234 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_rvalue_reference : public false_type { 
#line 237 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 240 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_rvalue_reference< _Ty &&>  : public true_type { 
#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 246 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_reference : public _Cat_base< is_lvalue_reference< _Ty> ::value || is_rvalue_reference< _Ty> ::value>  { 
#line 251 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, bool 
#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Pmf = _Is_memfunptr< _Ty> ::_Bool_type::value> 
#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Is_member_object_pointer : public false_type { 
#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty1, class 
#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Ty2> 
#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Is_member_object_pointer< _Ty1 _Ty2::*, false>  : public true_type { 
#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef _Ty2 _Class_type; 
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_member_object_pointer : public _Is_member_object_pointer< typename remove_cv< _Ty> ::type> ::type { 
#line 274 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 277 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_member_function_pointer : public _Is_memfunptr< typename remove_cv< _Ty> ::type> ::_Bool_type { 
#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 284 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 285 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Is_pointer : public false_type { 
#line 288 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 290 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Is_pointer< _Ty *>  : public _Cat_base< (!is_member_object_pointer< _Ty *> ::value) && (!is_member_function_pointer< _Ty *> ::value)>  { 
#line 295 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 297 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_pointer : public _Is_pointer< typename remove_cv< _Ty> ::type>  { 
#line 301 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 305 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 306 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_null_pointer : public _Cat_base< is_same< typename remove_cv< _Ty> ::type, std::nullptr_t> ::value>  { 
#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 312 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 313 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_union : public _Cat_base< __is_union(_Ty)>  { 
#line 316 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 319 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 320 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_class : public _Cat_base< __is_class(_Ty)>  { 
#line 323 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 326 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 327 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_fundamental : public _Cat_base< (is_arithmetic< _Ty> ::value || is_void< _Ty> ::value) || is_null_pointer< _Ty> ::value>  { 
#line 332 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 335 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 336 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_object : public _Cat_base< ((!is_function< _Ty> ::value) && (!is_reference< _Ty> ::value)) && (!is_void< _Ty> ::value)>  { 
#line 341 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 345 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _From, class 
#line 346 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_To> 
#line 347 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_convertible : public _Cat_base< __is_convertible_to(_From, _To)>  { 
#line 350 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 353 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_enum : public _Cat_base< __is_enum(_Ty)>  { 
#line 357 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 360 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 361 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_compound : public _Cat_base< !is_fundamental< _Ty> ::value>  { 
#line 364 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 367 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 368 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_member_pointer : public _Cat_base< is_member_object_pointer< _Ty> ::value || is_member_function_pointer< _Ty> ::value>  { 
#line 372 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 375 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 376 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_scalar : public _Cat_base< (((is_arithmetic< _Ty> ::value || is_enum< _Ty> ::value) || is_pointer< _Ty> ::value) || is_member_pointer< _Ty> ::value) || is_null_pointer< _Ty> ::value>  { 
#line 383 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 386 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 387 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_const : public false_type { 
#line 390 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 392 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 393 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_const< const _Ty>  : public true_type { 
#line 396 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 399 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 400 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_volatile : public false_type { 
#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 405 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 406 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_volatile< volatile _Ty>  : public true_type { 
#line 409 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 412 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 413 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_pod : public _Cat_base< __is_pod(_Ty)>  { 
#line 416 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 419 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 420 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_empty : public _Cat_base< __is_empty(_Ty)>  { 
#line 423 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 426 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 427 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_polymorphic : public _Cat_base< __is_polymorphic(_Ty)>  { 
#line 430 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 433 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 434 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_abstract : public _Cat_base< __is_abstract(_Ty)>  { 
#line 437 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 440 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 441 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_final : public _Cat_base< __is_final(_Ty)>  { 
#line 444 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 447 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 448 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_standard_layout : public _Cat_base< __is_standard_layout(_Ty)>  { 
#line 451 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 454 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 455 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_literal_type : public _Cat_base< __is_literal_type(_Ty)>  { 
#line 458 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 461 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 462 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_trivial : public _Cat_base< __is_trivial(_Ty)>  { 
#line 465 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 468 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 469 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_trivially_copyable : public _Cat_base< __is_trivially_copyable(_Ty)>  { 
#line 472 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 475 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 476 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct has_virtual_destructor : public _Cat_base< __has_virtual_destructor(_Ty)>  { 
#line 479 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 484 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, class ...
#line 485 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Args> 
#line 486 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_constructible : public _Cat_base< __is_constructible(_Ty, _Args...)>  { 
#line 489 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 492 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 493 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_copy_constructible : public is_constructible< _Ty, typename add_lvalue_reference< typename add_const< _Ty> ::type> ::type> ::type { 
#line 501 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 504 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 505 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_default_constructible : public is_constructible< _Ty> ::type { 
#line 508 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 511 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 512 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_move_constructible : public is_constructible< _Ty, typename add_rvalue_reference< _Ty> ::type> ::type { 
#line 518 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 521 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _To, class 
#line 522 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_From> 
#line 523 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_assignable : public integral_constant< bool, __is_assignable(_To, _From)>  { 
#line 526 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 529 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 530 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_copy_assignable : public is_assignable< typename add_lvalue_reference< _Ty> ::type, typename add_lvalue_reference< typename add_const< _Ty> ::type> ::type> ::type { 
#line 538 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 541 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 542 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_move_assignable : public is_assignable< typename add_lvalue_reference< _Ty> ::type, typename add_rvalue_reference< _Ty> ::type> ::type { 
#line 548 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 551 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 552 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_destructible : public _Cat_base< __is_destructible(_Ty)>  { 
#line 555 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 560 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, class ...
#line 561 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Args> 
#line 562 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_trivially_constructible : public _Cat_base< __is_trivially_constructible(_Ty, _Args...)>  { 
#line 565 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 568 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 569 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_trivially_copy_constructible : public is_trivially_constructible< _Ty, typename add_lvalue_reference< typename add_const< _Ty> ::type> ::type> ::type { 
#line 577 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 580 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 581 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_trivially_default_constructible : public is_trivially_constructible< _Ty> ::type { 
#line 584 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 587 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 588 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_trivially_move_constructible : public is_trivially_constructible< _Ty, typename add_rvalue_reference< _Ty> ::type> ::type { 
#line 594 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 597 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _To, class 
#line 598 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_From> 
#line 599 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_trivially_assignable : public _Cat_base< __is_trivially_assignable(_To, _From)>  { 
#line 602 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 605 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 606 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_trivially_copy_assignable : public is_trivially_assignable< typename add_lvalue_reference< _Ty> ::type, typename add_lvalue_reference< typename add_const< _Ty> ::type> ::type> ::type { 
#line 614 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 617 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 618 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_trivially_move_assignable : public is_trivially_assignable< typename add_lvalue_reference< _Ty> ::type, typename add_rvalue_reference< _Ty> ::type> ::type { 
#line 624 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 627 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 628 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_trivially_destructible : public _Cat_base< __has_trivial_destructor(_Ty)>  { 
#line 631 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 636 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, class ...
#line 637 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Args> 
#line 638 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_nothrow_constructible : public _Cat_base< __is_nothrow_constructible(_Ty, _Args...)>  { 
#line 641 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 644 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 645 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_nothrow_copy_constructible : public is_nothrow_constructible< _Ty, typename add_lvalue_reference< typename add_const< _Ty> ::type> ::type> ::type { 
#line 653 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 656 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 657 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_nothrow_default_constructible : public is_nothrow_constructible< _Ty> ::type { 
#line 660 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 663 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 664 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_nothrow_move_constructible : public is_nothrow_constructible< _Ty, typename add_rvalue_reference< _Ty> ::type> ::type { 
#line 670 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 673 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _To, class 
#line 674 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_From> 
#line 675 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_nothrow_assignable : public _Cat_base< __is_nothrow_assignable(_To, _From)>  { 
#line 678 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 681 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 682 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_nothrow_copy_assignable : public is_nothrow_assignable< typename add_lvalue_reference< _Ty> ::type, typename add_lvalue_reference< typename add_const< _Ty> ::type> ::type> ::type { 
#line 690 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 693 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 694 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_nothrow_move_assignable : public is_nothrow_assignable< typename add_lvalue_reference< _Ty> ::type, typename add_rvalue_reference< _Ty> ::type> ::type { 
#line 700 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 703 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 704 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_nothrow_destructible : public _Cat_base< __is_nothrow_destructible(_Ty)>  { 
#line 707 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 710 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, bool 
#line 711 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
 = is_integral< _Ty> ::value> 
#line 712 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Sign_base { 
#line 714 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename remove_cv< _Ty> ::type _Uty; 
#line 715 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef _Cat_base< (((typename remove_cv< _Ty> ::type)(-1)) < ((typename remove_cv< _Ty> ::type)0))>  _Signed; 
#line 716 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef _Cat_base< (((typename remove_cv< _Ty> ::type)0) < ((typename remove_cv< _Ty> ::type)(-1)))>  _Unsigned; 
#line 717 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 719 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 720 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Sign_base< _Ty, false>  { 
#line 723 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef is_floating_point< _Ty>  _Signed; 
#line 724 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef false_type _Unsigned; 
#line 725 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 727 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 728 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_signed : public _Sign_base< _Ty> ::_Signed { 
#line 731 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 734 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 735 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_unsigned : public _Sign_base< _Ty> ::_Unsigned { 
#line 738 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 741 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 742 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Change_sign { 
#line 744 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
static_assert(((is_integral< _Ty> ::value || is_enum< _Ty> ::value) && (!is_same< _Ty, bool> ::value)), "make_signed<T>/make_unsigned<T> require that T shall be a (possibly cv-qualified) integral type or enumeration but not a bool ty" "pe.");
#line 767 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename _If< is_same< _Ty, signed char> ::value || is_same< _Ty, unsigned char> ::value, signed char, typename _If< is_same< _Ty, short> ::value || is_same< _Ty, unsigned short> ::value, short, typename _If< is_same< _Ty, int> ::value || is_same< _Ty, unsigned> ::value, int, typename _If< is_same< _Ty, long> ::value || is_same< _Ty, unsigned long> ::value, long, typename _If< is_same< _Ty, __int64> ::value || is_same< _Ty, unsigned __int64> ::value, __int64, typename _If< sizeof(_Ty) == sizeof(signed char), signed char, typename _If< sizeof(_Ty) == sizeof(short), short, typename _If< sizeof(_Ty) == sizeof(int), int, typename _If< sizeof(_Ty) == sizeof(long), long, __int64> ::type> ::type> ::type> ::type> ::type> ::type> ::type> ::type> ::type _Signed; 
#line 776 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename _If< is_same< typename _If< is_same< _Ty, signed char> ::value || is_same< _Ty, unsigned char> ::value, signed char, typename _If< is_same< _Ty, short> ::value || is_same< _Ty, unsigned short> ::value, short, typename _If< is_same< _Ty, int> ::value || is_same< _Ty, unsigned> ::value, int, typename _If< is_same< _Ty, long> ::value || is_same< _Ty, unsigned long> ::value, long, typename _If< is_same< _Ty, __int64> ::value || is_same< _Ty, unsigned __int64> ::value, __int64, typename _If< sizeof(_Ty) == sizeof(signed char), signed char, typename _If< sizeof(_Ty) == sizeof(short), short, typename _If< sizeof(_Ty) == sizeof(int), int, typename _If< sizeof(_Ty) == sizeof(long), long, __int64> ::type> ::type> ::type> ::type> ::type> ::type> ::type> ::type> ::type, signed char> ::value, unsigned char, typename _If< is_same< typename _If< is_same< _Ty, signed char> ::value || is_same< _Ty, unsigned char> ::value, signed char, typename _If< is_same< _Ty, short> ::value || is_same< _Ty, unsigned short> ::value, short, typename _If< is_same< _Ty, int> ::value || is_same< _Ty, unsigned> ::value, int, typename _If< is_same< _Ty, long> ::value || is_same< _Ty, unsigned long> ::value, long, typename _If< is_same< _Ty, __int64> ::value || is_same< _Ty, unsigned __int64> ::value, __int64, typename _If< sizeof(_Ty) == sizeof(signed char), signed char, typename _If< sizeof(_Ty) == sizeof(short), short, typename _If< sizeof(_Ty) == sizeof(int), int, typename _If< sizeof(_Ty) == sizeof(long), long, __int64> ::type> ::type> ::type> ::type> ::type> ::type> ::type> ::type> ::type, short> ::value, unsigned short, typename _If< is_same< typename _If< is_same< _Ty, signed char> ::value || is_same< _Ty, unsigned char> ::value, signed char, typename _If< is_same< _Ty, short> ::value || is_same< _Ty, unsigned short> ::value, short, typename _If< is_same< _Ty, int> ::value || is_same< _Ty, unsigned> ::value, int, typename _If< is_same< _Ty, long> ::value || is_same< _Ty, unsigned long> ::value, long, typename _If< is_same< _Ty, __int64> ::value || is_same< _Ty, unsigned __int64> ::value, __int64, typename _If< sizeof(_Ty) == sizeof(signed char), signed char, typename _If< sizeof(_Ty) == sizeof(short), short, typename _If< sizeof(_Ty) == sizeof(int), int, typename _If< sizeof(_Ty) == sizeof(long), long, __int64> ::type> ::type> ::type> ::type> ::type> ::type> ::type> ::type> ::type, int> ::value, unsigned, typename _If< is_same< typename _If< is_same< _Ty, signed char> ::value || is_same< _Ty, unsigned char> ::value, signed char, typename _If< is_same< _Ty, short> ::value || is_same< _Ty, unsigned short> ::value, short, typename _If< is_same< _Ty, int> ::value || is_same< _Ty, unsigned> ::value, int, typename _If< is_same< _Ty, long> ::value || is_same< _Ty, unsigned long> ::value, long, typename _If< is_same< _Ty, __int64> ::value || is_same< _Ty, unsigned __int64> ::value, __int64, typename _If< sizeof(_Ty) == sizeof(signed char), signed char, typename _If< sizeof(_Ty) == sizeof(short), short, typename _If< sizeof(_Ty) == sizeof(int), int, typename _If< sizeof(_Ty) == sizeof(long), long, __int64> ::type> ::type> ::type> ::type> ::type> ::type> ::type> ::type> ::type, long> ::value, unsigned long, unsigned __int64> ::type> ::type> ::type> ::type _Unsigned; 
#line 777 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 779 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 780 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Change_sign< const _Ty>  { 
#line 782 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef const typename std::_Change_sign< _Ty> ::_Signed _Signed; 
#line 783 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef const typename std::_Change_sign< _Ty> ::_Unsigned _Unsigned; 
#line 784 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 786 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 787 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Change_sign< volatile _Ty>  { 
#line 789 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef volatile typename std::_Change_sign< _Ty> ::_Signed _Signed; 
#line 790 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef volatile typename std::_Change_sign< _Ty> ::_Unsigned _Unsigned; 
#line 791 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 793 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 794 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Change_sign< const volatile _Ty>  { 
#line 796 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef const volatile typename std::_Change_sign< _Ty> ::_Signed _Signed; 
#line 797 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef const volatile typename std::_Change_sign< _Ty> ::_Unsigned _Unsigned; 
#line 798 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 801 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 802 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct make_signed { 
#line 804 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename _Change_sign< _Ty> ::_Signed type; 
#line 805 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 808 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 809 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct make_unsigned { 
#line 811 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename _Change_sign< _Ty> ::_Unsigned type; 
#line 812 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 816 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 817 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct alignment_of : public integral_constant< unsigned __int64, __alignof(_Ty)>  { 
#line 820 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 827 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, size_t 
#line 828 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Len> 
#line 829 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
union _Align_type { 
#line 831 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Ty _Val; 
#line 832 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
char _Pad[_Len]; 
#line 833 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 835 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< size_t _Len, size_t 
#line 836 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Align, class 
#line 837 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Ty, bool 
#line 838 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Ok> struct _Aligned; 
#line 841 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< size_t _Len, size_t 
#line 842 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Align, class 
#line 843 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Ty> 
#line 844 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Aligned< _Len, _Align, _Ty, true>  { 
#line 846 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef _Align_type< _Ty, _Len>  type; 
#line 847 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 849 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< size_t _Len, size_t 
#line 850 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Align> 
#line 851 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Aligned< _Len, _Align, double, false>  { 
#line 853 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef _Align_type< double, _Len>  type; 
#line 854 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 856 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< size_t _Len, size_t 
#line 857 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Align> 
#line 858 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Aligned< _Len, _Align, int, false>  { 
#line 860 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename std::_Aligned< _Len, _Align, double, _Align <= integral_constant< unsigned __int64, 8Ui64> ::value> ::type type; 
#line 861 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 863 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< size_t _Len, size_t 
#line 864 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Align> 
#line 865 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Aligned< _Len, _Align, short, false>  { 
#line 867 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename std::_Aligned< _Len, _Align, int, _Align <= integral_constant< unsigned __int64, 4Ui64> ::value> ::type type; 
#line 868 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 870 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< size_t _Len, size_t 
#line 871 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Align> 
#line 872 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Aligned< _Len, _Align, char, false>  { 
#line 874 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename std::_Aligned< _Len, _Align, short, _Align <= integral_constant< unsigned __int64, 2Ui64> ::value> ::type type; 
#line 875 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 877 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< size_t _Len, size_t 
#line 878 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Align = 8Ui64> 
#line 879 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct aligned_storage { 
#line 881 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename _Aligned< _Len, _Align, char, _Align <= integral_constant< unsigned __int64, 1Ui64> ::value> ::type type; 
#line 882 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 888 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< size_t ..._Vals> struct _Maximum; 
#line 892 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template<> struct _Maximum< >  { 
#line 894 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
static constexpr size_t value = (0); 
#line 895 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 897 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< size_t _Val> 
#line 898 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Maximum< _Val>  { 
#line 900 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
static constexpr size_t value = _Val; 
#line 901 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 903 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< size_t _First, size_t 
#line 904 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Second, size_t ...
#line 905 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Rest> 
#line 906 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Maximum< _First, _Second, _Rest...>  : public _Maximum< (((_First) < _Second) ? _Second : _First), _Rest...>  { 
#line 909 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 911 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< size_t _Len, class ...
#line 912 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Types> 
#line 913 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct aligned_union { 
#line 915 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
static constexpr size_t _Max_len = (_Maximum< _Len, sizeof(_Types)...> ::value); 
#line 917 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
static constexpr size_t alignment_value = (_Maximum< (alignment_of< _Types> ::value)...> ::value); 
#line 919 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename aligned_storage< _Max_len, alignment_value> ::type type; 
#line 920 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 923 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 924 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct underlying_type { 
#line 926 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef __underlying_type(_Ty) type; 
#line 927 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 930 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 931 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct rank : public integral_constant< unsigned __int64, 0Ui64>  { 
#line 934 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 936 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, size_t _Ix> 
#line 937 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct rank< _Ty [_Ix]>  : public integral_constant< unsigned __int64, rank< _Ty> ::value + 1>  { 
#line 940 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 942 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 943 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct rank< _Ty []>  : public integral_constant< unsigned __int64, rank< _Ty> ::value + 1>  { 
#line 946 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 949 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, unsigned _Nx> 
#line 950 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Extent : public integral_constant< unsigned __int64, 0Ui64>  { 
#line 953 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 955 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, size_t _Ix> 
#line 956 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Extent< _Ty [_Ix], 0>  : public integral_constant< unsigned __int64, _Ix>  { 
#line 959 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 961 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, unsigned _Nx, size_t _Ix> 
#line 962 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Extent< _Ty [_Ix], _Nx>  : public _Extent< _Ty, _Nx - (1)>  { 
#line 965 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 967 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, unsigned _Nx> 
#line 968 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Extent< _Ty [], _Nx>  : public _Extent< _Ty, _Nx - (1)>  { 
#line 971 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 973 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, unsigned _Nx = 0U> 
#line 974 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct extent : public _Extent< _Ty, _Nx>  { 
#line 977 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 980 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Base, class 
#line 981 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Der> 
#line 982 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct is_base_of : public _Cat_base< __is_base_of(_Base, _Der)>  { 
#line 985 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 988 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 989 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct decay { 
#line 991 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename remove_reference< _Ty> ::type _Ty1; 
#line 997 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename _If< is_array< typename remove_reference< _Ty> ::type> ::value, typename remove_extent< typename remove_reference< _Ty> ::type> ::type *, typename _If< is_function< typename remove_reference< _Ty> ::type> ::value, typename add_pointer< typename remove_reference< _Ty> ::type> ::type, typename remove_cv< typename remove_reference< _Ty> ::type> ::type> ::type> ::type type; 
#line 998 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1001 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class ...> struct _Conjunction; 
#line 1004 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< bool , class 
#line 1005 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Lhs, class ...
#line 1006 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Traits> 
#line 1007 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Choose_conjunction { 
#line 1009 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef _Lhs type; 
#line 1010 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1012 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Lhs, class ...
#line 1013 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Traits> 
#line 1014 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Choose_conjunction< true, _Lhs, _Traits...>  { 
#line 1016 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename _Conjunction< _Traits...> ::type type; 
#line 1017 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1020 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template<> struct _Conjunction< >  { 
#line 1022 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef true_type type; 
#line 1023 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1025 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Trait> 
#line 1026 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Conjunction< _Trait>  { 
#line 1028 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef _Trait type; 
#line 1029 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1031 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Lhs, class ...
#line 1032 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Traits> 
#line 1033 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Conjunction< _Lhs, _Traits...>  { 
#line 1035 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename _Choose_conjunction< _Lhs::value, _Lhs, _Traits...> ::type type; 
#line 1036 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1038 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class ..._Traits> 
#line 1039 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct conjunction : public _Conjunction< _Traits...> ::type { 
#line 1044 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1047 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class ...> struct _Disjunction; 
#line 1050 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< bool , class 
#line 1051 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Lhs, class ...
#line 1052 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Traits> 
#line 1053 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Choose_disjunction { 
#line 1055 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef _Lhs type; 
#line 1056 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1058 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Lhs, class ...
#line 1059 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Traits> 
#line 1060 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Choose_disjunction< false, _Lhs, _Traits...>  { 
#line 1062 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename _Disjunction< _Traits...> ::type type; 
#line 1063 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1066 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template<> struct _Disjunction< >  { 
#line 1068 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef false_type type; 
#line 1069 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1071 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Trait> 
#line 1072 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Disjunction< _Trait>  { 
#line 1074 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef _Trait type; 
#line 1075 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1077 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Lhs, class ...
#line 1078 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Traits> 
#line 1079 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Disjunction< _Lhs, _Traits...>  { 
#line 1081 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename _Choose_disjunction< _Lhs::value, _Lhs, _Traits...> ::type type; 
#line 1082 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1084 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class ..._Traits> 
#line 1085 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct disjunction : public _Disjunction< _Traits...> ::type { 
#line 1090 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1093 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Trait> 
#line 1094 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct negation : public bool_constant< !_Trait::value>  { 
#line 1097 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1100 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
namespace tr1 { 
#line 1101 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::add_const;
#line 1102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::add_cv;
#line 1103 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::add_pointer;
#line 1104 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::add_volatile;
#line 1105 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::aligned_storage;
#line 1106 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::alignment_of;
#line 1107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::conditional;
#line 1108 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::decay;
#line 1109 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::enable_if;
#line 1110 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::extent;
#line 1111 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::false_type;
#line 1112 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::has_virtual_destructor;
#line 1113 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::integral_constant;
#line 1114 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_abstract;
#line 1115 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_arithmetic;
#line 1116 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_array;
#line 1117 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_base_of;
#line 1118 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_class;
#line 1119 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_compound;
#line 1120 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_const;
#line 1121 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_convertible;
#line 1122 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_empty;
#line 1123 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_enum;
#line 1124 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_floating_point;
#line 1125 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_function;
#line 1126 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_fundamental;
#line 1127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_integral;
#line 1128 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_member_function_pointer;
#line 1129 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_member_object_pointer;
#line 1130 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_member_pointer;
#line 1131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_object;
#line 1132 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_pod;
#line 1133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_pointer;
#line 1134 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_polymorphic;
#line 1135 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_reference;
#line 1136 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_same;
#line 1137 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_scalar;
#line 1138 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_signed;
#line 1139 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_union;
#line 1140 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_unsigned;
#line 1141 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_void;
#line 1142 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::is_volatile;
#line 1143 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::make_signed;
#line 1144 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::make_unsigned;
#line 1145 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::rank;
#line 1146 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::remove_all_extents;
#line 1147 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::remove_const;
#line 1148 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::remove_cv;
#line 1149 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::remove_extent;
#line 1150 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::remove_pointer;
#line 1151 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::remove_reference;
#line 1152 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::remove_volatile;
#line 1153 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::true_type;
#line 1154 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}
#line 1158 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class ..._Ty> struct common_type; 
#line 1161 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 1162 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct common_type< _Ty>  { 
#line 1164 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename decay< _Ty> ::type type; 
#line 1165 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1167 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty0, class 
#line 1168 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Ty1> 
#line 1169 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct common_type< _Ty0, _Ty1>  { 
#line 1175 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename decay< decltype(((_Always_false< _Ty0> ::value) ? std::declval< _Ty0> () : std::declval< _Ty1> ()))> ::type type; 
#line 1176 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1178 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty0, class 
#line 1179 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Ty1, class ...
#line 1180 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Ty> 
#line 1181 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct common_type< _Ty0, _Ty1, _Ty...>  { 
#line 1185 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename std::common_type< typename std::common_type< _Ty0, _Ty1> ::type, _Ty...> ::type type; 
#line 1186 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1189 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template < class _Ty,
 _Ty ... _Vals >
 struct integer_sequence
 {
 static_assert ( is_integral < _Ty > :: value,
  "integer_sequence<T, I...> requires T to be an integral type." );

 typedef integer_sequence < _Ty, _Vals ... > type;
 typedef _Ty value_type;

 static constexpr size_t size ( ) noexcept
  {
  return ( sizeof ... ( _Vals ) );
  }
 };
#line 1243 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, _Ty 
#line 1244 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Size> using make_integer_sequence = __make_integer_seq< integer_sequence, _Ty, _Size> ; 
#line 1248 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< size_t ..._Vals> using index_sequence = integer_sequence< unsigned __int64, _Vals...> ; 
#line 1251 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< size_t _Size> using make_index_sequence = make_integer_sequence< unsigned __int64, _Size> ; 
#line 1254 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class ..._Types> using index_sequence_for = make_index_sequence< sizeof...(_Types)> ; 
#line 1259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template < class _Ty >
 struct identity
 {
 typedef _Ty type;

 const _Ty & operator ( ) ( const _Ty & _Left ) const
  {
  return ( _Left );
  }
 };
#line 1272 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr _Ty &&
#line 1273 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
forward(typename remove_reference< _Ty> ::type &
#line 1274 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Arg) noexcept 
#line 1275 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
{ 
#line 1276 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
return static_cast< _Ty &&>(_Arg); 
#line 1277 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
} 
#line 1279 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr _Ty &&
#line 1280 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
forward(typename remove_reference< _Ty> ::type &&
#line 1281 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Arg) noexcept 
#line 1282 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
{ 
#line 1283 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
static_assert((!is_lvalue_reference< _Ty> ::value), "bad forward call");
#line 1284 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
return static_cast< _Ty &&>(_Arg); 
#line 1285 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
} 
#line 1288 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr typename remove_reference< _Ty> ::type &&
#line 1290 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
move(_Ty &&_Arg) noexcept 
#line 1291 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
{ 
#line 1292 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
return static_cast< typename remove_reference< _Ty> ::type &&>(_Arg); 
#line 1293 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
} 
#line 1296 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template < class _Ty > inline
 constexpr typename _If < ! is_nothrow_move_constructible < _Ty > :: value
  && is_copy_constructible < _Ty > :: value,
   const _Ty &, _Ty && > :: type
 move_if_noexcept ( _Ty & _Arg ) noexcept
 {
 return ( :: std :: move ( _Arg ) );
 }
#line 1306 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class ...> 
#line 1307 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Param_tester { 
#line 1309 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef void type; 
#line 1310 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1313 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class ..._Types> using void_t = typename _Param_tester< _Types...> ::type; 
#line 1317 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Invoker_pmf_object { 
#line 1319 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template < class _Decayed,
  class _Ty1,
  class ... _Types2 >
  static auto _Call ( _Decayed _Pmf, _Ty1 && _Arg1, _Types2 && ... _Args2 )
  -> decltype ( ( :: std :: forward < _Ty1 > ( _Arg1 ) .* _Pmf ) (
   :: std :: forward < _Types2 > ( _Args2 ) ... ) )
  {
  return ( ( :: std :: forward < _Ty1 > ( _Arg1 ) .* _Pmf ) (
   :: std :: forward < _Types2 > ( _Args2 ) ... ) );
  }
#line 1329 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1331 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Invoker_pmf_pointer { 
#line 1333 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template < class _Decayed,
  class _Ty1,
  class ... _Types2 >
  static auto _Call ( _Decayed _Pmf, _Ty1 && _Arg1, _Types2 && ... _Args2 )
  -> decltype ( ( ( * :: std :: forward < _Ty1 > ( _Arg1 ) ) .* _Pmf ) (
   :: std :: forward < _Types2 > ( _Args2 ) ... ) )
  {
  return ( ( ( * :: std :: forward < _Ty1 > ( _Arg1 ) ) .* _Pmf ) (
   :: std :: forward < _Types2 > ( _Args2 ) ... ) );
  }
#line 1343 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1345 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Invoker_pmd_object { 
#line 1347 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template < class _Decayed,
  class _Ty1 >
  static auto _Call ( _Decayed _Pmd, _Ty1 && _Arg1 )
  -> decltype ( :: std :: forward < _Ty1 > ( _Arg1 ) .* _Pmd )
  {
  return ( :: std :: forward < _Ty1 > ( _Arg1 ) .* _Pmd );
  }
#line 1354 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1356 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Invoker_pmd_pointer { 
#line 1358 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template < class _Decayed,
  class _Ty1 >
  static auto _Call ( _Decayed _Pmd, _Ty1 && _Arg1 )
  -> decltype ( ( * :: std :: forward < _Ty1 > ( _Arg1 ) ) .* _Pmd )
  {
  return ( ( * :: std :: forward < _Ty1 > ( _Arg1 ) ) .* _Pmd );
  }
#line 1365 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1367 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Invoker_functor { 
#line 1369 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template < class _Callable,
  class ... _Types >
  static auto _Call ( _Callable && _Obj, _Types && ... _Args )
  -> decltype ( :: std :: forward < _Callable > ( _Obj ) (
   :: std :: forward < _Types > ( _Args ) ... ) )
  {
  return ( :: std :: forward < _Callable > ( _Obj ) (
   :: std :: forward < _Types > ( _Args ) ... ) );
  }
#line 1378 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1380 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Callable, class 
#line 1381 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Ty1, class 
#line 1382 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Decayed = typename decay< _Callable> ::type, bool 
#line 1383 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Is_pmf = is_member_function_pointer< _Decayed> ::value, bool 
#line 1384 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Is_pmd = is_member_object_pointer< _Decayed> ::value> struct _Invoker1; 
#line 1387 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Callable, class 
#line 1388 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Ty1, class 
#line 1389 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Decayed> 
#line 1390 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Invoker1< _Callable, _Ty1, _Decayed, true, false>  : public _If< is_base_of< typename _Is_memfunptr< _Decayed> ::_Class_type, typename decay< _Ty1> ::type> ::value, _Invoker_pmf_object, _Invoker_pmf_pointer> ::type { 
#line 1397 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1399 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Callable, class 
#line 1400 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Ty1, class 
#line 1401 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Decayed> 
#line 1402 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Invoker1< _Callable, _Ty1, _Decayed, false, true>  : public _If< is_base_of< typename _Is_member_object_pointer< _Decayed> ::_Class_type, typename decay< _Ty1> ::type> ::value, _Invoker_pmd_object, _Invoker_pmd_pointer> ::type { 
#line 1409 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1411 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Callable, class 
#line 1412 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Ty1, class 
#line 1413 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Decayed> 
#line 1414 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Invoker1< _Callable, _Ty1, _Decayed, false, false>  : public _Invoker_functor { 
#line 1417 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1419 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Callable, class ...
#line 1420 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Types> struct _Invoker; 
#line 1423 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Callable> 
#line 1424 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Invoker< _Callable>  : public _Invoker_functor { 
#line 1427 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1429 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Callable, class 
#line 1430 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Ty1, class ...
#line 1431 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Types2> 
#line 1432 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Invoker< _Callable, _Ty1, _Types2...>  : public _Invoker1< _Callable, _Ty1>  { 
#line 1435 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1437 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template < class _Callable,
 class ... _Types > inline
 auto invoke ( _Callable && _Obj, _Types && ... _Args )
 -> decltype ( _Invoker < _Callable, _Types ... > :: _Call (
  :: std :: forward < _Callable > ( _Obj ), :: std :: forward < _Types > ( _Args ) ... ) )
 {
 return ( _Invoker < _Callable, _Types ... > :: _Call (
  :: std :: forward < _Callable > ( _Obj ), :: std :: forward < _Types > ( _Args ) ... ) );
 }
#line 1447 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Rx, bool 
#line 1448 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
 = is_void< _Rx> ::value> 
#line 1449 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Forced { 
#line 1451 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1453 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Unforced { 
#line 1455 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1457 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template < class _Cv_void,
 class ... _Valtys > inline
 void _Invoke_ret ( _Forced < _Cv_void, true >, _Valtys && ... _Vals )
 {
 :: std :: invoke ( :: std :: forward < _Valtys > ( _Vals ) ... );
 }
#line 1464 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template < class _Rx,
 class ... _Valtys > inline
 _Rx _Invoke_ret ( _Forced < _Rx, false >, _Valtys && ... _Vals )
 {
 return ( :: std :: invoke ( :: std :: forward < _Valtys > ( _Vals ) ... ) );
 }
#line 1471 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template < class ... _Valtys > inline
 auto _Invoke_ret ( _Forced < _Unforced, false >, _Valtys && ... _Vals )
 -> decltype ( :: std :: invoke ( :: std :: forward < _Valtys > ( _Vals ) ... ) )
 {
 return ( :: std :: invoke ( :: std :: forward < _Valtys > ( _Vals ) ... ) );
 }
#line 1479 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Unique_tag_result_of { 
#line 1481 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1483 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Void, class ...
#line 1484 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Types> 
#line 1485 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Result_of { 
#line 1487 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1489 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class ..._Types> 
#line 1490 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Result_of< void_t< _Unique_tag_result_of, decltype((std::invoke(std::declval< _Types> ()...)))> , _Types...>  { 
#line 1496 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef decltype((std::invoke(std::declval< _Types> ()...))) type; 
#line 1497 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1499 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Fty> 
#line 1500 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct result_of { 
#line 1502 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
static_assert((_Always_false< _Fty> ::value), "result_of<CallableType> is invalid; use result_of<CallableType(zero or more argument types)> instead.");
#line 1505 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1515 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Fty, class ..._Args> struct result_of< _Fty __cdecl (_Args ...)>  : public _Result_of< void, _Fty, _Args...>  { }; template< class _Fty, class ..._Args> struct result_of< _Fty __vectorcall (_Args ...)>  : public _Result_of< void, _Fty, _Args...>  { }; 
#line 1519 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, class 
#line 1520 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
 = void> 
#line 1521 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Weak_result_type { 
#line 1523 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1525 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 1526 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Weak_result_type< _Ty, void_t< typename _Ty::result_type> >  { 
#line 1529 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename _Ty::result_type result_type; 
#line 1530 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1532 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, class 
#line 1533 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
 = void> 
#line 1534 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Weak_argument_type : public _Weak_result_type< _Ty>  { 
#line 1537 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1539 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 1540 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Weak_argument_type< _Ty, void_t< typename _Ty::argument_type> >  : public _Weak_result_type< _Ty>  { 
#line 1544 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename _Ty::argument_type argument_type; 
#line 1545 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1547 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, class 
#line 1548 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
 = void> 
#line 1549 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Weak_binary_args : public _Weak_argument_type< _Ty>  { 
#line 1552 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1554 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 1555 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Weak_binary_args< _Ty, void_t< typename _Ty::first_argument_type, typename _Ty::second_argument_type> >  : public _Weak_argument_type< _Ty>  { 
#line 1560 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename _Ty::first_argument_type first_argument_type; 
#line 1561 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename _Ty::second_argument_type second_argument_type; 
#line 1562 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1564 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 1565 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Weak_types { 
#line 1567 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef _Is_function< typename remove_pointer< _Ty> ::type>  _Is_f_or_pf; 
#line 1568 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef _Is_memfunptr< typename remove_cv< _Ty> ::type>  _Is_pmf; 
#line 1571 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename _If< _Is_function< typename remove_pointer< _Ty> ::type> ::_Bool_type::value, _Is_function< typename remove_pointer< _Ty> ::type> , typename _If< _Is_memfunptr< typename remove_cv< _Ty> ::type> ::_Bool_type::value, _Is_memfunptr< typename remove_cv< _Ty> ::type> , _Weak_binary_args< _Ty> > ::type> ::type type; 
#line 1572 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1575 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template < class _Ty >
 class reference_wrapper
  : public _Weak_types < _Ty > :: type
 {
public :
 static_assert ( is_object < _Ty > :: value || is_function < _Ty > :: value,
  "reference_wrapper<T> requires T to be an object type or a function type."
                       );

 typedef _Ty type;

 reference_wrapper ( _Ty & _Val ) noexcept
  : _Ptr ( :: std :: addressof ( _Val ) )
  {
  }

 operator _Ty & ( ) const noexcept
  {
  return ( * _Ptr );
  }

 _Ty & get ( ) const noexcept
  {
  return ( * _Ptr );
  }

 template < class ... _Types >
  auto operator ( ) ( _Types && ... _Args ) const
  -> decltype ( :: std :: invoke ( get ( ), :: std :: forward < _Types > ( _Args ) ... ) )
  {
  return ( :: std :: invoke ( get ( ), :: std :: forward < _Types > ( _Args ) ... ) );
  }

 reference_wrapper ( _Ty && ) = delete;

private :
 _Ty * _Ptr;
 };
#line 1615 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template < class _Ty > inline
 reference_wrapper < _Ty >
  ref ( _Ty & _Val ) noexcept
 {
 return ( reference_wrapper < _Ty > ( _Val ) );
 }
#line 1622 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template < class _Ty >
 void ref ( const _Ty && ) = delete;
#line 1625 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template < class _Ty > inline
 reference_wrapper < _Ty >
  ref ( reference_wrapper < _Ty > _Val ) noexcept
 {
 return ( :: std :: ref ( _Val . get ( ) ) );
 }
#line 1632 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template < class _Ty > inline
 reference_wrapper < const _Ty >
  cref ( const _Ty & _Val ) noexcept
 {
 return ( reference_wrapper < const _Ty > ( _Val ) );
 }
#line 1639 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template < class _Ty >
 void cref ( const _Ty && ) = delete;
#line 1642 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template < class _Ty > inline
 reference_wrapper < const _Ty >
  cref ( reference_wrapper < _Ty > _Val ) noexcept
 {
 return ( :: std :: cref ( _Val . get ( ) ) );
 }
#line 1650 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 1651 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Unrefwrap_helper { 
#line 1653 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef _Ty type; 
#line 1654 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
static constexpr bool _Is_refwrap = false; 
#line 1655 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1657 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 1658 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Unrefwrap_helper< reference_wrapper< _Ty> >  { 
#line 1660 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef _Ty &type; 
#line 1661 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
static constexpr bool _Is_refwrap = true; 
#line 1662 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1664 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 1665 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Unrefwrap { 
#line 1667 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename decay< _Ty> ::type _Ty1; 
#line 1668 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
typedef typename _Unrefwrap_helper< typename decay< _Ty> ::type> ::type type; 
#line 1669 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
static constexpr bool _Is_refwrap = (_Unrefwrap_helper< typename decay< _Ty> ::type> ::_Is_refwrap); 
#line 1670 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1673 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
namespace tr1 { 
#line 1674 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::cref;
#line 1675 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::ref;
#line 1676 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::reference_wrapper;
#line 1677 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using std::result_of;
#line 1678 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}
#line 1682 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> struct _Is_swappable; 
#line 1686 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> struct _Is_nothrow_swappable; 
#line 1695 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template < class _Ty,
 class = void > inline

 void swap ( _Ty &, _Ty & )
  noexcept ( is_nothrow_move_constructible < _Ty > :: value && is_nothrow_move_assignable < _Ty > :: value );
#line 1702 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template < class _Ty,
 size_t _Size,
 class = typename enable_if < _Is_swappable < _Ty > :: value > :: type > inline
 void swap ( _Ty ( & ) [ _Size ], _Ty ( & ) [ _Size ] )
  noexcept ( _Is_nothrow_swappable < _Ty > :: value );
#line 1709 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty1, class 
#line 1710 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Ty2, class 
#line 1711 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
 = void> 
#line 1712 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Swappable_with_helper : public false_type { 
#line 1715 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1717 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Swappable_with_helper_unique_type { }; 
#line 1718 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty1, class 
#line 1719 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Ty2> 
#line 1720 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Swappable_with_helper< _Ty1, _Ty2, void_t< _Swappable_with_helper_unique_type, decltype((swap(std::declval< _Ty1> (), std::declval< _Ty2> ())))> >  : public true_type { 
#line 1725 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1728 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty1, class 
#line 1729 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Ty2> 
#line 1730 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Is_swappable_with : public conjunction< _Swappable_with_helper< _Ty1, _Ty2> , _Swappable_with_helper< _Ty2, _Ty1> > ::type { 
#line 1736 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1739 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 1740 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Is_swappable : public _Is_swappable_with< typename add_lvalue_reference< _Ty> ::type, typename add_lvalue_reference< _Ty> ::type> ::type { 
#line 1745 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1748 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty1, class 
#line 1749 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Ty2> 
#line 1750 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Swap_cannot_throw { 
#line 1755 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
static constexpr bool value = (noexcept(swap(std::declval< _Ty1> (), std::declval< _Ty2> ())) && noexcept(swap(std::declval< _Ty2> (), std::declval< _Ty1> ()))); 
#line 1761 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
using type = bool_constant< value> ; 
#line 1762 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1765 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty1, class 
#line 1766 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Ty2> 
#line 1767 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Is_nothrow_swappable_with : public conjunction< _Is_swappable_with< _Ty1, _Ty2> , _Swap_cannot_throw< _Ty1, _Ty2> > ::type { 
#line 1773 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1776 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> 
#line 1777 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
struct _Is_nothrow_swappable : public _Is_nothrow_swappable_with< typename add_lvalue_reference< _Ty> ::type, typename add_lvalue_reference< _Ty> ::type> ::type { 
#line 1782 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}; 
#line 1819 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> using remove_const_t = typename remove_const< _Ty> ::type; 
#line 1822 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> using remove_volatile_t = typename remove_volatile< _Ty> ::type; 
#line 1825 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> using remove_cv_t = typename remove_cv< _Ty> ::type; 
#line 1828 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> using add_const_t = typename add_const< _Ty> ::type; 
#line 1831 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> using add_volatile_t = typename add_volatile< _Ty> ::type; 
#line 1834 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> using add_cv_t = typename add_cv< _Ty> ::type; 
#line 1837 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> using remove_reference_t = typename remove_reference< _Ty> ::type; 
#line 1840 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> using add_lvalue_reference_t = typename add_lvalue_reference< _Ty> ::type; 
#line 1843 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> using add_rvalue_reference_t = typename add_rvalue_reference< _Ty> ::type; 
#line 1846 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> using make_signed_t = typename make_signed< _Ty> ::type; 
#line 1849 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> using make_unsigned_t = typename make_unsigned< _Ty> ::type; 
#line 1852 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> using remove_extent_t = typename remove_extent< _Ty> ::type; 
#line 1855 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> using remove_all_extents_t = typename remove_all_extents< _Ty> ::type; 
#line 1858 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> using remove_pointer_t = typename remove_pointer< _Ty> ::type; 
#line 1861 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> using add_pointer_t = typename add_pointer< _Ty> ::type; 
#line 1864 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< size_t _Len, size_t 
#line 1865 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Align = 8Ui64> using aligned_storage_t = typename aligned_storage< _Len, _Align> ::type; 
#line 1868 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< size_t _Len, class ...
#line 1869 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Types> using aligned_union_t = typename aligned_union< _Len, _Types...> ::type; 
#line 1872 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> using decay_t = typename decay< _Ty> ::type; 
#line 1875 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< bool _Test, class 
#line 1876 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Ty = void> using enable_if_t = typename enable_if< _Test, _Ty> ::type; 
#line 1879 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< bool _Test, class 
#line 1880 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Ty1, class 
#line 1881 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Ty2> using conditional_t = typename conditional< _Test, _Ty1, _Ty2> ::type; 
#line 1884 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class ..._Ty> using common_type_t = typename common_type< _Ty...> ::type; 
#line 1887 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> using underlying_type_t = typename underlying_type< _Ty> ::type; 
#line 1890 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> using result_of_t = typename result_of< _Ty> ::type; 
#line 1895 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1896 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_void_v = (is_void< _Ty> ::value); 
#line 1897 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1898 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_null_pointer_v = (is_null_pointer< _Ty> ::value); 
#line 1899 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1900 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_array_v = (is_array< _Ty> ::value); 
#line 1901 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1902 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_pointer_v = (is_pointer< _Ty> ::value); 
#line 1903 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1904 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_lvalue_reference_v = (is_lvalue_reference< _Ty> ::value); 
#line 1905 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1906 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_rvalue_reference_v = (is_rvalue_reference< _Ty> ::value); 
#line 1907 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1908 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_member_object_pointer_v = (is_member_object_pointer< _Ty> ::value); 
#line 1909 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1910 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_member_function_pointer_v = (is_member_function_pointer< _Ty> ::value); 
#line 1911 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1912 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_enum_v = (is_enum< _Ty> ::value); 
#line 1913 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1914 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_union_v = (is_union< _Ty> ::value); 
#line 1915 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1916 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_class_v = (is_class< _Ty> ::value); 
#line 1917 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1918 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_reference_v = (is_reference< _Ty> ::value); 
#line 1919 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1920 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_fundamental_v = (is_fundamental< _Ty> ::value); 
#line 1921 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1922 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_object_v = (is_object< _Ty> ::value); 
#line 1923 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1924 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_scalar_v = (is_scalar< _Ty> ::value); 
#line 1925 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1926 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_compound_v = (is_compound< _Ty> ::value); 
#line 1927 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1928 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_member_pointer_v = (is_member_pointer< _Ty> ::value); 
#line 1929 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1930 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_const_v = (is_const< _Ty> ::value); 
#line 1931 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1932 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_volatile_v = (is_volatile< _Ty> ::value); 
#line 1933 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1934 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_trivial_v = (is_trivial< _Ty> ::value); 
#line 1935 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1936 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_trivially_copyable_v = (is_trivially_copyable< _Ty> ::value); 
#line 1937 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1938 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_standard_layout_v = (is_standard_layout< _Ty> ::value); 
#line 1939 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1940 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_pod_v = (is_pod< _Ty> ::value); 
#line 1941 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1942 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_literal_type_v = (is_literal_type< _Ty> ::value); 
#line 1943 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1944 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_empty_v = (is_empty< _Ty> ::value); 
#line 1945 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1946 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_polymorphic_v = (is_polymorphic< _Ty> ::value); 
#line 1947 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1948 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_abstract_v = (is_abstract< _Ty> ::value); 
#line 1949 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1950 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_final_v = (is_final< _Ty> ::value); 
#line 1951 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1952 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_signed_v = (is_signed< _Ty> ::value); 
#line 1953 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1954 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_unsigned_v = (is_unsigned< _Ty> ::value); 
#line 1955 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, class ...
#line 1956 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Args> constexpr bool 
#line 1957 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_constructible_v = (is_constructible< _Ty, _Args...> ::value); 
#line 1958 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1959 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_default_constructible_v = (is_default_constructible< _Ty> ::value); 
#line 1960 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1961 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_copy_constructible_v = (is_copy_constructible< _Ty> ::value); 
#line 1962 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1963 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_move_constructible_v = (is_move_constructible< _Ty> ::value); 
#line 1964 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, class 
#line 1965 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Uty> constexpr bool 
#line 1966 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_assignable_v = (is_assignable< _Ty, _Uty> ::value); 
#line 1967 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1968 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_copy_assignable_v = (is_copy_assignable< _Ty> ::value); 
#line 1969 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1970 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_move_assignable_v = (is_move_assignable< _Ty> ::value); 
#line 1978 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1979 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_destructible_v = (is_destructible< _Ty> ::value); 
#line 1980 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, class ...
#line 1981 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Args> constexpr bool 
#line 1982 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_trivially_constructible_v = (is_trivially_constructible< _Ty, _Args...> ::value); 
#line 1983 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1984 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_trivially_default_constructible_v = (is_trivially_default_constructible< _Ty> ::value); 
#line 1985 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1986 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_trivially_copy_constructible_v = (is_trivially_copy_constructible< _Ty> ::value); 
#line 1987 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1988 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_trivially_move_constructible_v = (is_trivially_move_constructible< _Ty> ::value); 
#line 1989 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, class 
#line 1990 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Uty> constexpr bool 
#line 1991 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_trivially_assignable_v = (is_trivially_assignable< _Ty, _Uty> ::value); 
#line 1992 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1993 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_trivially_copy_assignable_v = (is_trivially_copy_assignable< _Ty> ::value); 
#line 1994 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1995 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_trivially_move_assignable_v = (is_trivially_move_assignable< _Ty> ::value); 
#line 1996 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1997 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_trivially_destructible_v = (is_trivially_destructible< _Ty> ::value); 
#line 1998 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, class ...
#line 1999 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Args> constexpr bool 
#line 2000 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_nothrow_constructible_v = (is_nothrow_constructible< _Ty, _Args...> ::value); 
#line 2001 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 2002 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_nothrow_default_constructible_v = (is_nothrow_default_constructible< _Ty> ::value); 
#line 2003 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 2004 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_nothrow_copy_constructible_v = (is_nothrow_copy_constructible< _Ty> ::value); 
#line 2005 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 2006 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_nothrow_move_constructible_v = (is_nothrow_move_constructible< _Ty> ::value); 
#line 2007 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, class 
#line 2008 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Uty> constexpr bool 
#line 2009 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_nothrow_assignable_v = (is_nothrow_assignable< _Ty, _Uty> ::value); 
#line 2010 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 2011 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_nothrow_copy_assignable_v = (is_nothrow_copy_assignable< _Ty> ::value); 
#line 2012 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 2013 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_nothrow_move_assignable_v = (is_nothrow_move_assignable< _Ty> ::value); 
#line 2021 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 2022 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_nothrow_destructible_v = (is_nothrow_destructible< _Ty> ::value); 
#line 2023 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 2024 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
has_virtual_destructor_v = (has_virtual_destructor< _Ty> ::value); 
#line 2025 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr size_t 
#line 2026 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
alignment_of_v = (alignment_of< _Ty> ::value); 
#line 2027 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty> constexpr size_t 
#line 2028 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
rank_v = (rank< _Ty> ::value); 
#line 2029 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Ty, unsigned 
#line 2030 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Ix = 0U> constexpr size_t 
#line 2031 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
extent_v = (extent< _Ty, _Ix> ::value); 
#line 2032 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Base, class 
#line 2033 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_Derived> constexpr bool 
#line 2034 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_base_of_v = (is_base_of< _Base, _Derived> ::value); 
#line 2035 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _From, class 
#line 2036 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
_To> constexpr bool 
#line 2037 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
is_convertible_v = (is_convertible< _From, _To> ::value); 
#line 2038 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class ..._Traits> constexpr bool 
#line 2039 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
conjunction_v = (conjunction< _Traits...> ::value); 
#line 2040 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class ..._Traits> constexpr bool 
#line 2041 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
disjunction_v = (disjunction< _Traits...> ::value); 
#line 2042 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template< class _Trait> constexpr bool 
#line 2043 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
negation_v = (negation< _Trait> ::value); 
#line 2046 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
}
#line 2049 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
#pragma warning(pop)
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
#pragma warning(push,3)
#line 2050 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
#pragma pack ( pop )
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
#pragma pack ( push, 8 )
#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
namespace std { 
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
__declspec(dllimport) bool __cdecl uncaught_exception() noexcept; 
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
__declspec(dllimport) int __cdecl uncaught_exceptions() noexcept; 
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
}
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
typedef 
#line 39 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
struct _heapinfo { 
#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
int *_pentry; 
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
size_t _size; 
#line 43 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
int _useflag; 
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
} _HEAPINFO; 
#line 54 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
void *__cdecl _alloca(size_t _Size); 
#line 60 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
__declspec(dllimport) intptr_t __cdecl _get_heap_handle(); 
#line 63 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
__declspec(dllimport) int __cdecl _heapmin(); 
#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
__declspec(dllimport) int __cdecl _heapwalk(_HEAPINFO * _EntryInfo); 
#line 70 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
__declspec(dllimport) int __cdecl _heapchk(); 
#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
__declspec(dllimport) int __cdecl _resetstkoflw(); 
#line 84 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
typedef char __static_assert_t[(sizeof(unsigned) <= (16)) != 0]; 
#line 87 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
#pragma warning(push)
#pragma warning(disable:6540)
#line 90 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
__inline void *_MarkAllocaS(void *_Ptr, unsigned _Marker) 
#line 91 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
{ 
#line 92 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
if (_Ptr) 
#line 93 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
{ 
#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
(*((unsigned *)_Ptr)) = _Marker; 
#line 95 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
_Ptr = (((char *)_Ptr) + 16); 
#line 96 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
}  
#line 97 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
return _Ptr; 
#line 98 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
} 
#line 100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
__inline size_t _MallocaComputeSize(size_t _Size) 
#line 101 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
{ 
#line 102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
size_t _MarkedSize = _Size + (16); 
#line 103 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
return (_MarkedSize > _Size) ? _MarkedSize : (0); 
#line 104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
} 
#line 106 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
#pragma warning(pop)
#line 144 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
#pragma warning(push)
#pragma warning(disable: 6014)
__inline void __cdecl _freea(void *_Memory) 
#line 147 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
{ 
#line 148 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
unsigned _Marker; 
#line 149 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
if (_Memory) 
#line 150 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
{ 
#line 151 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
_Memory = (((char *)_Memory) - 16); 
#line 152 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
_Marker = (*((unsigned *)_Memory)); 
#line 153 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
if (_Marker == (56797)) 
#line 154 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
{ 
#line 155 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
free(_Memory); 
#line 156 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
}  
#line 163 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
}  
#line 164 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
} 
#line 177 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
}
#line 165 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
#pragma warning(pop)
#line 177 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
__pragma(pack ( pop )) 
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_terminate.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 18 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_terminate.h"
typedef void (__cdecl *terminate_handler)(void); 
#line 19 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_terminate.h"
typedef void (__cdecl *terminate_function)(void); 
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_terminate.h"
__declspec(dllimport) __declspec(noreturn) void __cdecl abort(); 
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_terminate.h"
__declspec(dllimport) __declspec(noreturn) void __cdecl terminate() throw(); 
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_terminate.h"
__declspec(dllimport) terminate_handler __cdecl set_terminate(terminate_handler _NewTerminateHandler) throw(); 
#line 37 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_terminate.h"
__declspec(dllimport) terminate_handler __cdecl _get_terminate(); 
#line 43 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_terminate.h"
}__pragma(pack ( pop )) 
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"
typedef void (__cdecl *unexpected_handler)(void); 
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"
typedef void (__cdecl *unexpected_function)(void); 
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"
struct _EXCEPTION_POINTERS; 
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"
__declspec(dllimport) __declspec(noreturn) void __cdecl unexpected() throw(...); 
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"
__declspec(dllimport) unexpected_handler __cdecl set_unexpected(unexpected_handler _NewUnexpectedHandler) throw(); 
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"
__declspec(dllimport) unexpected_handler __cdecl _get_unexpected(); 
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"
typedef void (__cdecl *_se_translator_function)(unsigned, _EXCEPTION_POINTERS *); 
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"
__declspec(dllimport) _se_translator_function __cdecl _set_se_translator(_se_translator_function _NewSETranslator); 
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"
class type_info; 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"
__declspec(dllimport) int __cdecl _is_exception_typeof(const type_info & _Type, _EXCEPTION_POINTERS * _ExceptionPtr); 
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"
__declspec(dllimport) bool __cdecl __uncaught_exception(); 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"
__declspec(dllimport) int __cdecl __uncaught_exceptions(); 
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"
}__pragma(pack ( pop )) 
#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
#pragma pack ( push, 8 )
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
struct __std_exception_data { 
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
const char *_What; 
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
bool _DoFree; 
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
}; 
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
__declspec(dllimport) void __cdecl __std_exception_copy(const __std_exception_data * _From, __std_exception_data * _To); 
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
__declspec(dllimport) void __cdecl __std_exception_destroy(__std_exception_data * _Data); 
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
}__pragma(pack ( pop )) 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
namespace std { 
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
class exception { 
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
public: exception() throw() : _Data() 
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
{ 
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
} 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
explicit exception(const char *const _Message) throw() : _Data() 
#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
{ 
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
__std_exception_data _InitData = {_Message, true}; 
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
__std_exception_copy(&_InitData, &(_Data)); 
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
} 
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
exception(const char *const _Message, int) throw() : _Data() 
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
{ 
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
((_Data)._What) = _Message; 
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
} 
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
exception(const exception &_Other) throw() : _Data() 
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
{ 
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
__std_exception_copy(&(_Other._Data), &(_Data)); 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
} 
#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
exception &operator=(const exception &_Other) throw() 
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
{ 
#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
if (this == (&_Other)) 
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
{ 
#line 74 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
return *this; 
#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
}  
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
__std_exception_destroy(&(_Data)); 
#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
__std_exception_copy(&(_Other._Data), &(_Data)); 
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
return *this; 
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
} 
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
virtual ~exception() throw() 
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
{ 
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
__std_exception_destroy(&(_Data)); 
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
} 
#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
virtual const char *what() const 
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
{ 
#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
return ((_Data)._What) ? (_Data)._What : ("Unknown exception"); 
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
} 
#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
private: __std_exception_data _Data; 
#line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
}; 
#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
class bad_exception : public exception { 
#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
public: bad_exception() throw() : exception("bad exception", 1) 
#line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
{ 
#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
} 
#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
}; 
#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
class bad_alloc : public exception { 
#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
public: bad_alloc() throw() : exception("bad allocation", 1) 
#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
{ 
#line 116 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
} 
#line 120 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
friend class bad_array_new_length; 
#line 122 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
private: bad_alloc(const char *const _Message) throw() : exception(_Message, 1) 
#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
{ 
#line 125 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
} 
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
}; 
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
class bad_array_new_length : public bad_alloc { 
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
public: bad_array_new_length() throw() : bad_alloc("bad array new length") 
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
{ 
#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
} 
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
}; 
#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
}
#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
#pragma pack ( pop )
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
namespace std { 
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
using ::set_terminate;using ::terminate_handler;using ::terminate;using ::set_unexpected;using ::unexpected_handler;using ::unexpected;
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
typedef void (__cdecl *_Prhand)(const exception &); 
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
inline terminate_handler __cdecl get_terminate() noexcept 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
return _get_terminate(); 
#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
inline unexpected_handler __cdecl get_unexpected() noexcept 
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
return _get_unexpected(); 
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
}
#line 240 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
__declspec(dllimport) void __cdecl __ExceptionPtrCreate(void *); 
#line 241 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
__declspec(dllimport) void __cdecl __ExceptionPtrDestroy(void *); 
#line 242 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
__declspec(dllimport) void __cdecl __ExceptionPtrCopy(void *, const void *); 
#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
__declspec(dllimport) void __cdecl __ExceptionPtrAssign(void *, const void *); 
#line 244 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
__declspec(dllimport) bool __cdecl __ExceptionPtrCompare(const void *, const void *); 
#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
__declspec(dllimport) bool __cdecl __ExceptionPtrToBool(const void *); 
#line 246 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
__declspec(dllimport) void __cdecl __ExceptionPtrSwap(void *, void *); 
#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
__declspec(dllimport) void __cdecl __ExceptionPtrCurrentException(void *); 
#line 248 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
[[noreturn]] __declspec(dllimport) void __cdecl __ExceptionPtrRethrow(const void *); 
#line 249 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
__declspec(dllimport) void __cdecl __ExceptionPtrCopyException(void *, const void *, const void *); 
#line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
namespace std { 
#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
class exception_ptr { 
#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
public: exception_ptr() throw() 
#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
__ExceptionPtrCreate(this); 
#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
exception_ptr(nullptr_t) throw() 
#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
__ExceptionPtrCreate(this); 
#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
~exception_ptr() throw() 
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
__ExceptionPtrDestroy(this); 
#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
exception_ptr(const exception_ptr &_Rhs) throw() 
#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 274 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
__ExceptionPtrCopy(this, &_Rhs); 
#line 275 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 277 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
exception_ptr &operator=(const exception_ptr &_Rhs) throw() 
#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
__ExceptionPtrAssign(this, &_Rhs); 
#line 280 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
return *this; 
#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 283 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
exception_ptr &operator=(nullptr_t) throw() 
#line 284 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 285 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
exception_ptr _Ptr; 
#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
__ExceptionPtrAssign(this, &_Ptr); 
#line 287 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
return *this; 
#line 288 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 290 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
explicit operator bool() const throw() 
#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 292 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
return __ExceptionPtrToBool(this); 
#line 293 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 295 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
[[noreturn]] void _RethrowException() const 
#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 297 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
__ExceptionPtrRethrow(this); 
#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 300 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
static exception_ptr _Current_exception() throw() 
#line 301 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 302 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
exception_ptr _Retval; 
#line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
__ExceptionPtrCurrentException(&_Retval); 
#line 304 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
return _Retval; 
#line 305 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 307 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
static exception_ptr _Copy_exception(void *_Except, const void *_Ptr) 
#line 308 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
exception_ptr _Retval = 0; 
#line 310 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
if (!_Ptr) 
#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 313 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
return _Retval; 
#line 314 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
}  
#line 315 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
__ExceptionPtrCopyException(&_Retval, _Except, _Ptr); 
#line 316 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
return _Retval; 
#line 317 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 320 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
private: void *_Data1; 
#line 321 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
void *_Data2; 
#line 322 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
}; 
#line 324 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
inline void swap(exception_ptr &_Lhs, exception_ptr &_Rhs) throw() 
#line 325 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 326 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
__ExceptionPtrSwap(&_Lhs, &_Rhs); 
#line 327 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 329 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
inline bool operator==(const exception_ptr &_Lhs, const exception_ptr &_Rhs) throw() 
#line 330 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 331 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
return __ExceptionPtrCompare(&_Lhs, &_Rhs); 
#line 332 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
inline bool operator==(nullptr_t, const exception_ptr &_Rhs) throw() 
#line 335 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 336 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
return !_Rhs; 
#line 337 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
inline bool operator==(const exception_ptr &_Lhs, nullptr_t) throw() 
#line 340 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 341 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
return !_Lhs; 
#line 342 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 344 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
inline bool operator!=(const exception_ptr &_Lhs, const exception_ptr &_Rhs) throw() 
#line 345 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 346 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
return !((_Lhs == _Rhs)); 
#line 347 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 349 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
inline bool operator!=(nullptr_t _Lhs, const exception_ptr &_Rhs) throw() 
#line 350 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 351 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
return !((_Lhs == _Rhs)); 
#line 352 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
inline bool operator!=(const exception_ptr &_Lhs, nullptr_t _Rhs) throw() 
#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 356 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
return !((_Lhs == _Rhs)); 
#line 357 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 359 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
inline exception_ptr current_exception() noexcept 
#line 360 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 361 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
return exception_ptr::_Current_exception(); 
#line 362 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 364 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
[[noreturn]] inline void rethrow_exception(exception_ptr _Ptr) 
#line 365 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 366 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
_Ptr._RethrowException(); 
#line 367 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 369 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
template< class _Ex> void *__GetExceptionInfo(_Ex); 
#line 371 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
template < class _Ex > exception_ptr make_exception_ptr ( _Ex _Except ) noexcept
 {
 return exception_ptr :: _Copy_exception ( :: std :: addressof ( _Except ), __GetExceptionInfo ( _Except ) );
 }
#line 377 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
class nested_exception { 
#line 380 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
public: nested_exception() noexcept : _Exc(::std::current_exception()) 
#line 382 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 383 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 385 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
nested_exception(const nested_exception &) noexcept = default;
#line 386 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
nested_exception &operator=(const nested_exception &) noexcept = default;
#line 387 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
virtual ~nested_exception() noexcept = default;
#line 389 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
[[noreturn]] void rethrow_nested() const 
#line 390 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 391 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
if ((_Exc)) { 
#line 392 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
::std::rethrow_exception(_Exc); } else { 
#line 394 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
::std::terminate(); }  
#line 395 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 397 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
exception_ptr nested_ptr() const noexcept 
#line 398 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
{ 
#line 399 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
return _Exc; 
#line 400 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
} 
#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
private: exception_ptr _Exc; 
#line 404 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
}; 
#line 407 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
template < class _Ty,
 class _Uty >
 struct _With_nested
  : _Uty, nested_exception
 {
 explicit _With_nested ( _Ty && _Arg )
  : _Uty ( :: std :: forward < _Ty > ( _Arg ) ), nested_exception ( )
  {
  }
 };
#line 418 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
template < class _Ty >
 [ [ noreturn ] ] inline void _Throw_with_nested ( _Ty && _Arg, true_type )
 {
 typedef typename remove_reference < _Ty > :: type _Uty;
 typedef _With_nested < _Ty, _Uty > _Glued;

 throw _Glued ( :: std :: forward < _Ty > ( _Arg ) );
 }
#line 427 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
template < class _Ty >
 [ [ noreturn ] ] inline void _Throw_with_nested ( _Ty && _Arg, false_type )
 {
 typedef typename decay < _Ty > :: type _Decayed;

 throw _Decayed ( :: std :: forward < _Ty > ( _Arg ) );
 }
#line 435 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
template < class _Ty >
 [ [ noreturn ] ] inline void throw_with_nested ( _Ty && _Arg )
 {
 typedef typename remove_reference < _Ty > :: type _Uty;

 integral_constant < bool,
  is_class < _Uty > :: value
  && ! is_base_of < nested_exception, _Uty > :: value
  && ! is_final < _Uty > :: value > _Tag;

 _Throw_with_nested ( :: std :: forward < _Ty > ( _Arg ), _Tag );
 }
#line 449 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
template < class _Ty > inline
 void _Rethrow_if_nested ( const _Ty * _Ptr, true_type )
 {
 const auto _Nested = dynamic_cast < const nested_exception * > ( _Ptr );

 if ( _Nested )
  _Nested -> rethrow_nested ( );
 }
#line 458 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
template < class _Ty > inline
 void _Rethrow_if_nested ( const _Ty *, false_type )
 {
 }
#line 463 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
template < class _Ty > inline
 void rethrow_if_nested ( const _Ty & _Arg )
 {
 integral_constant < bool,
  is_polymorphic < _Ty > :: value
  && ( ! is_base_of < nested_exception, _Ty > :: value
   || is_convertible < _Ty *, nested_exception * > :: value ) > _Tag;

 _Rethrow_if_nested ( :: std :: addressof ( _Arg ), _Tag );
 }
#line 473 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
}
#line 476 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
#pragma warning(pop)
#pragma pack ( pop )
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef signed char int8_t; 
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef short int16_t; 
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef int int32_t; 
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef __int64 int64_t; 
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef unsigned char uint8_t; 
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef unsigned short uint16_t; 
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef unsigned uint32_t; 
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef unsigned __int64 uint64_t; 
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef signed char int_least8_t; 
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef short int_least16_t; 
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef int int_least32_t; 
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef __int64 int_least64_t; 
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef unsigned char uint_least8_t; 
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef unsigned short uint_least16_t; 
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef unsigned uint_least32_t; 
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef unsigned __int64 uint_least64_t; 
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef signed char int_fast8_t; 
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef int int_fast16_t; 
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef int int_fast32_t; 
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef __int64 int_fast64_t; 
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef unsigned char uint_fast8_t; 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef unsigned uint_fast16_t; 
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef unsigned uint_fast32_t; 
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef unsigned __int64 uint_fast64_t; 
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef __int64 intmax_t; 
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"
typedef unsigned __int64 uintmax_t; 
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
namespace std { 
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::int8_t;using ::int16_t;
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::int32_t;using ::int64_t;
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::uint8_t;using ::uint16_t;
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::uint32_t;using ::uint64_t;
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::int_least8_t;using ::int_least16_t;
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::int_least32_t;using ::int_least64_t;
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::uint_least8_t;using ::uint_least16_t;
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::uint_least32_t;using ::uint_least64_t;
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::int_fast8_t;using ::int_fast16_t;
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::int_fast32_t;using ::int_fast64_t;
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::uint_fast8_t;using ::uint_fast16_t;
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::uint_fast32_t;using ::uint_fast64_t;
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::intmax_t;using ::intptr_t;
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::uintmax_t;using ::uintptr_t;
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
namespace tr1 { 
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::int8_t;using ::int16_t;
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::int32_t;using ::int64_t;
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::uint8_t;using ::uint16_t;
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::uint32_t;using ::uint64_t;
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::int_least8_t;using ::int_least16_t;
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::int_least32_t;using ::int_least64_t;
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::uint_least8_t;using ::uint_least16_t;
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::uint_least32_t;using ::uint_least64_t;
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::int_fast8_t;using ::int_fast16_t;
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::int_fast32_t;using ::int_fast64_t;
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::uint_fast8_t;using ::uint_fast16_t;
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::uint_fast32_t;using ::uint_fast64_t;
#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::intmax_t;using ::intptr_t;
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
using ::uintmax_t;using ::uintptr_t;
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
}
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
}
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
#pragma warning(push,3)
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
#pragma pack ( push, 8 )
#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
extern "C" {
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
void __cdecl _Feraise(int); 
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
typedef 
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
union { 
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
unsigned short _Word[8]; 
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
float _Float; 
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
double _Double; 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
long double _Long_double; 
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
} _Dconst; 
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
__declspec(dllimport) double __cdecl _Cosh(double, double); 
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
__declspec(dllimport) short __cdecl _Dtest(double *); 
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
__declspec(dllimport) double __cdecl _Sinh(double, double); 
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
__declspec(dllimport) short __cdecl _Exp(double *, double, short); 
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
__declspec(dllimport) extern _Dconst _Denorm, _Hugeval, _Inf, 
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
_Nan, _Snan; 
#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
__declspec(dllimport) float __cdecl _FCosh(float, float); 
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
__declspec(dllimport) short __cdecl _FDtest(float *); 
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
__declspec(dllimport) float __cdecl _FSinh(float, float); 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
__declspec(dllimport) short __cdecl _FExp(float *, float, short); 
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
__declspec(dllimport) extern _Dconst _FDenorm, _FInf, _FNan, _FSnan; 
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
__declspec(dllimport) long double __cdecl _LCosh(long double, long double); 
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
__declspec(dllimport) short __cdecl _LDtest(long double *); 
#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
__declspec(dllimport) long double __cdecl _LSinh(long double, long double); 
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
__declspec(dllimport) short __cdecl _LExp(long double *, long double, short); 
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
__declspec(dllimport) extern _Dconst _LDenorm, _LInf, _LNan, _LSnan; 
#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
}
#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
#pragma warning(pop)
#pragma pack ( pop )
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 226 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
__declspec(dllimport) unsigned __cdecl _clearfp(); 
#line 228 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
#pragma warning(push)
#pragma warning(disable: 4141)
#line 232 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
__declspec(dllimport) unsigned __cdecl _controlfp(unsigned _NewValue, unsigned _Mask); 
#line 237 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
#pragma warning(pop)
#line 240 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
__declspec(dllimport) void __cdecl _set_controlfp(unsigned _NewValue, unsigned _Mask); 
#line 246 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
__declspec(dllimport) errno_t __cdecl _controlfp_s(unsigned * _CurrentState, unsigned _NewValue, unsigned _Mask); 
#line 253 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
__declspec(dllimport) unsigned __cdecl _statusfp(); 
#line 256 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
__declspec(dllimport) void __cdecl _fpreset(); 
#line 272 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
__declspec(dllimport) unsigned __cdecl _control87(unsigned _NewValue, unsigned _Mask); 
#line 289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
__declspec(dllimport) int *__cdecl __fpecode(); 
#line 294 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
__declspec(dllimport) int __cdecl __fpe_flt_rounds(); 
#line 307 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
__declspec(dllimport) double __cdecl _copysign(double _Number, double _Sign); 
#line 308 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
__declspec(dllimport) double __cdecl _chgsign(double _X); 
#line 309 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
__declspec(dllimport) double __cdecl _scalb(double _X, long _Y); 
#line 310 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
__declspec(dllimport) double __cdecl _logb(double _X); 
#line 311 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
__declspec(dllimport) double __cdecl _nextafter(double _X, double _Y); 
#line 312 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
__declspec(dllimport) int __cdecl _finite(double _X); 
#line 313 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
__declspec(dllimport) int __cdecl _isnan(double _X); 
#line 314 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
__declspec(dllimport) int __cdecl _fpclass(double _X); 
#line 317 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
__declspec(dllimport) float __cdecl _scalbf(float _X, long _Y); 
#line 334 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
__declspec(dllimport) void __cdecl fpreset(); 
#line 401 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h"
}__pragma(pack ( pop )) 
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 26 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__declspec(dllimport) errno_t __cdecl _cgetws_s(__wchar_t * _Buffer, size_t _BufferCount, size_t * _SizeRead); 
#line 32 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _cgetws_s(__wchar_t (&_Buffer)[_Size], ::size_t *_SizeRead) throw() { return _cgetws_s(_Buffer, _Size, _SizeRead); } }
#line 40 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__declspec(dllimport) int __cdecl _cputws(const __wchar_t * _Buffer); 
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__declspec(dllimport) wint_t __cdecl _getwch(); 
#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__declspec(dllimport) wint_t __cdecl _getwche(); 
#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__declspec(dllimport) wint_t __cdecl _putwch(__wchar_t _Character); 
#line 47 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__declspec(dllimport) wint_t __cdecl _ungetwch(wint_t _Character); 
#line 49 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__declspec(dllimport) wint_t __cdecl _getwch_nolock(); 
#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__declspec(dllimport) wint_t __cdecl _getwche_nolock(); 
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__declspec(dllimport) wint_t __cdecl _putwch_nolock(__wchar_t _Character); 
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__declspec(dllimport) wint_t __cdecl _ungetwch_nolock(wint_t _Character); 
#line 62 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__declspec(dllimport) int __cdecl __conio_common_vcwprintf(unsigned __int64 _Options, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 70 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__declspec(dllimport) int __cdecl __conio_common_vcwprintf_s(unsigned __int64 _Options, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 78 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__declspec(dllimport) int __cdecl __conio_common_vcwprintf_p(unsigned __int64 _Options, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 86 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwprintf_l(const __wchar_t *const 
#line 87 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Format, const _locale_t 
#line 88 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Locale, va_list 
#line 89 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_ArgList) 
#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 95 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
return __conio_common_vcwprintf(*__local_stdio_printf_options(), _Format, _Locale, _ArgList); 
#line 96 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
} 
#line 100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwprintf(const __wchar_t *const 
#line 101 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Format, va_list 
#line 102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_ArgList) 
#line 107 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
return _vcwprintf_l(_Format, 0, _ArgList); 
#line 109 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
} 
#line 113 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwprintf_s_l(const __wchar_t *const 
#line 114 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Format, const _locale_t 
#line 115 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Locale, va_list 
#line 116 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_ArgList) 
#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
return __conio_common_vcwprintf_s(*__local_stdio_printf_options(), _Format, _Locale, _ArgList); 
#line 123 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
} 
#line 127 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwprintf_s(const __wchar_t *const 
#line 128 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Format, va_list 
#line 129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_ArgList) 
#line 134 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 135 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
return _vcwprintf_s_l(_Format, 0, _ArgList); 
#line 136 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
} 
#line 140 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwprintf_p_l(const __wchar_t *const 
#line 141 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Format, const _locale_t 
#line 142 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Locale, va_list 
#line 143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_ArgList) 
#line 148 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 149 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
return __conio_common_vcwprintf_p(*__local_stdio_printf_options(), _Format, _Locale, _ArgList); 
#line 150 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
} 
#line 154 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwprintf_p(const __wchar_t *const 
#line 155 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Format, va_list 
#line 156 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_ArgList) 
#line 161 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 162 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
return _vcwprintf_p_l(_Format, 0, _ArgList); 
#line 163 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
} 
#line 167 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwprintf_l(const __wchar_t *const 
#line 168 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Format, const _locale_t 
#line 169 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Locale, ...) 
#line 174 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 175 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
int _Result; 
#line 176 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
va_list _ArgList; 
#line 177 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 178 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Result = _vcwprintf_l(_Format, _Locale, _ArgList); 
#line 179 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
(void)(_ArgList = ((va_list)0)); 
#line 180 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
return _Result; 
#line 181 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
} 
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwprintf(const __wchar_t *const 
#line 186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Format, ...) 
#line 191 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 192 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
int _Result; 
#line 193 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
va_list _ArgList; 
#line 194 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Result = _vcwprintf_l(_Format, 0, _ArgList); 
#line 196 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
(void)(_ArgList = ((va_list)0)); 
#line 197 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
return _Result; 
#line 198 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
} 
#line 202 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwprintf_s_l(const __wchar_t *const 
#line 203 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Format, const _locale_t 
#line 204 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Locale, ...) 
#line 209 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 210 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
int _Result; 
#line 211 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
va_list _ArgList; 
#line 212 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 213 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Result = _vcwprintf_s_l(_Format, _Locale, _ArgList); 
#line 214 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
(void)(_ArgList = ((va_list)0)); 
#line 215 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
return _Result; 
#line 216 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
} 
#line 220 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwprintf_s(const __wchar_t *const 
#line 221 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Format, ...) 
#line 226 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 227 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
int _Result; 
#line 228 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
va_list _ArgList; 
#line 229 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Result = _vcwprintf_s_l(_Format, 0, _ArgList); 
#line 231 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
(void)(_ArgList = ((va_list)0)); 
#line 232 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
return _Result; 
#line 233 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
} 
#line 237 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwprintf_p_l(const __wchar_t *const 
#line 238 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Format, const _locale_t 
#line 239 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Locale, ...) 
#line 244 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 245 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
int _Result; 
#line 246 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
va_list _ArgList; 
#line 247 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 248 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Result = _vcwprintf_p_l(_Format, _Locale, _ArgList); 
#line 249 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
(void)(_ArgList = ((va_list)0)); 
#line 250 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
return _Result; 
#line 251 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
} 
#line 255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwprintf_p(const __wchar_t *const 
#line 256 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Format, ...) 
#line 261 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 262 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
int _Result; 
#line 263 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
va_list _ArgList; 
#line 264 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 265 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Result = _vcwprintf_p_l(_Format, 0, _ArgList); 
#line 266 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
(void)(_ArgList = ((va_list)0)); 
#line 267 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
return _Result; 
#line 268 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
} 
#line 279 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__declspec(dllimport) int __cdecl __conio_common_vcwscanf(unsigned __int64 _Options, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 287 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwscanf_l(const __wchar_t *const 
#line 288 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Format, const _locale_t 
#line 289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Locale, va_list 
#line 290 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_ArgList) 
#line 295 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 296 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
return __conio_common_vcwscanf(*__local_stdio_scanf_options(), _Format, _Locale, _ArgList); 
#line 299 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
} 
#line 303 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwscanf(const __wchar_t *const 
#line 304 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Format, va_list 
#line 305 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_ArgList) 
#line 310 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#pragma warning(push)
#pragma warning(disable: 4996)
return _vcwscanf_l(_Format, 0, _ArgList); 
#pragma warning(pop)
} 
#line 319 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwscanf_s_l(const __wchar_t *const 
#line 320 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Format, const _locale_t 
#line 321 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Locale, va_list 
#line 322 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_ArgList) 
#line 327 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 328 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
return __conio_common_vcwscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Format, _Locale, _ArgList); 
#line 331 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
} 
#line 335 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwscanf_s(const __wchar_t *const 
#line 336 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Format, va_list 
#line 337 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_ArgList) 
#line 342 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 343 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
return _vcwscanf_s_l(_Format, 0, _ArgList); 
#line 344 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
} 
#line 348 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwscanf_l(const __wchar_t *const 
#line 349 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Format, const _locale_t 
#line 350 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Locale, ...) 
#line 355 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 356 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
int _Result; 
#line 357 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
va_list _ArgList; 
#line 358 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 360 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = _vcwscanf_l(_Format, _Locale, _ArgList); 
#pragma warning(pop)
#line 365 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
(void)(_ArgList = ((va_list)0)); 
#line 366 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
return _Result; 
#line 367 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
} 
#line 371 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwscanf(const __wchar_t *const 
#line 372 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Format, ...) 
#line 377 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 378 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
int _Result; 
#line 379 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
va_list _ArgList; 
#line 380 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 382 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = _vcwscanf_l(_Format, 0, _ArgList); 
#pragma warning(pop)
#line 387 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
(void)(_ArgList = ((va_list)0)); 
#line 388 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
return _Result; 
#line 389 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
} 
#line 393 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwscanf_s_l(const __wchar_t *const 
#line 394 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Format, const _locale_t 
#line 395 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Locale, ...) 
#line 400 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 401 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
int _Result; 
#line 402 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
va_list _ArgList; 
#line 403 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 404 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Result = _vcwscanf_s_l(_Format, _Locale, _ArgList); 
#line 405 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
(void)(_ArgList = ((va_list)0)); 
#line 406 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
return _Result; 
#line 407 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
} 
#line 411 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwscanf_s(const __wchar_t *const 
#line 412 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Format, ...) 
#line 417 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
{ 
#line 418 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
int _Result; 
#line 419 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
va_list _ArgList; 
#line 420 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 421 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
_Result = _vcwscanf_s_l(_Format, 0, _ArgList); 
#line 422 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
(void)(_ArgList = ((va_list)0)); 
#line 423 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
return _Result; 
#line 424 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
} 
#line 431 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
}__pragma(pack ( pop )) 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) const unsigned short *__cdecl __pctype_func(); 
#line 32 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) const wctype_t *__cdecl __pwctype_func(); 
#line 63 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl iswalnum(wint_t _C); 
#line 64 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl iswalpha(wint_t _C); 
#line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl iswascii(wint_t _C); 
#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl iswblank(wint_t _C); 
#line 67 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl iswcntrl(wint_t _C); 
#line 70 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl iswdigit(wint_t _C); 
#line 72 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl iswgraph(wint_t _C); 
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl iswlower(wint_t _C); 
#line 74 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl iswprint(wint_t _C); 
#line 75 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl iswpunct(wint_t _C); 
#line 76 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl iswspace(wint_t _C); 
#line 77 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl iswupper(wint_t _C); 
#line 78 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl iswxdigit(wint_t _C); 
#line 79 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl __iswcsymf(wint_t _C); 
#line 80 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl __iswcsym(wint_t _C); 
#line 82 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl _iswalnum_l(wint_t _C, _locale_t _Locale); 
#line 83 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl _iswalpha_l(wint_t _C, _locale_t _Locale); 
#line 84 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl _iswblank_l(wint_t _C, _locale_t _Locale); 
#line 85 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl _iswcntrl_l(wint_t _C, _locale_t _Locale); 
#line 86 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl _iswdigit_l(wint_t _C, _locale_t _Locale); 
#line 87 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl _iswgraph_l(wint_t _C, _locale_t _Locale); 
#line 88 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl _iswlower_l(wint_t _C, _locale_t _Locale); 
#line 89 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl _iswprint_l(wint_t _C, _locale_t _Locale); 
#line 90 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl _iswpunct_l(wint_t _C, _locale_t _Locale); 
#line 91 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl _iswspace_l(wint_t _C, _locale_t _Locale); 
#line 92 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl _iswupper_l(wint_t _C, _locale_t _Locale); 
#line 93 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl _iswxdigit_l(wint_t _C, _locale_t _Locale); 
#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl _iswcsymf_l(wint_t _C, _locale_t _Locale); 
#line 95 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl _iswcsym_l(wint_t _C, _locale_t _Locale); 
#line 98 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) wint_t __cdecl towupper(wint_t _C); 
#line 99 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) wint_t __cdecl towlower(wint_t _C); 
#line 100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl iswctype(wint_t _C, wctype_t _Type); 
#line 102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) wint_t __cdecl _towupper_l(wint_t _C, _locale_t _Locale); 
#line 103 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) wint_t __cdecl _towlower_l(wint_t _C, _locale_t _Locale); 
#line 104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl _iswctype_l(wint_t _C, wctype_t _Type, _locale_t _Locale); 
#line 108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl isleadbyte(int _C); 
#line 109 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl _isleadbyte_l(int _C, _locale_t _Locale); 
#line 111 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using iswctype instea" "d. See online help for details.")) __declspec(dllimport) int __cdecl is_wctype(wint_t _C, wctype_t _Type); 
#line 199 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
}__pragma(pack ( pop )) 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wdirect.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wdirect.h"
__declspec(dllimport) __declspec(allocator) __wchar_t *__cdecl _wgetcwd(__wchar_t * _DstBuf, int _SizeInWords); 
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wdirect.h"
__declspec(dllimport) __declspec(allocator) __wchar_t *__cdecl _wgetdcwd(int _Drive, __wchar_t * _DstBuf, int _SizeInWords); 
#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wdirect.h"
__declspec(dllimport) int __cdecl _wchdir(const __wchar_t * _Path); 
#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wdirect.h"
__declspec(dllimport) int __cdecl _wmkdir(const __wchar_t * _Path); 
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wdirect.h"
__declspec(dllimport) int __cdecl _wrmdir(const __wchar_t * _Path); 
#line 57 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wdirect.h"
}__pragma(pack ( pop )) 
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 18 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
#pragma warning(push)
#pragma warning(disable:4820)
#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
typedef unsigned long _fsize_t; 
#line 38 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
struct _wfinddata32_t { 
#line 40 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
unsigned attrib; 
#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__time32_t time_create; 
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__time32_t time_access; 
#line 43 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__time32_t time_write; 
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
_fsize_t size; 
#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__wchar_t name[260]; 
#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
}; 
#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
struct _wfinddata32i64_t { 
#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
unsigned attrib; 
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__time32_t time_create; 
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__time32_t time_access; 
#line 53 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__time32_t time_write; 
#line 54 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__int64 size; 
#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__wchar_t name[260]; 
#line 56 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
}; 
#line 58 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
struct _wfinddata64i32_t { 
#line 60 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
unsigned attrib; 
#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__time64_t time_create; 
#line 62 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__time64_t time_access; 
#line 63 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__time64_t time_write; 
#line 64 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
_fsize_t size; 
#line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__wchar_t name[260]; 
#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
}; 
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
struct _wfinddata64_t { 
#line 70 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
unsigned attrib; 
#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__time64_t time_create; 
#line 72 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__time64_t time_access; 
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__time64_t time_write; 
#line 74 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__int64 size; 
#line 75 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__wchar_t name[260]; 
#line 76 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
}; 
#line 98 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) int __cdecl _waccess(const __wchar_t * _FileName, int _AccessMode); 
#line 104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) errno_t __cdecl _waccess_s(const __wchar_t * _FileName, int _AccessMode); 
#line 110 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) int __cdecl _wchmod(const __wchar_t * _FileName, int _Mode); 
#line 116 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) int __cdecl _wcreat(const __wchar_t * _FileName, int _PermissionMode); 
#line 123 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) intptr_t __cdecl _wfindfirst32(const __wchar_t * _FileName, _wfinddata32_t * _FindData); 
#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) int __cdecl _wfindnext32(intptr_t _FindHandle, _wfinddata32_t * _FindData); 
#line 135 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) int __cdecl _wunlink(const __wchar_t * _FileName); 
#line 140 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) int __cdecl _wrename(const __wchar_t * _OldFileName, const __wchar_t * _NewFileName); 
#line 145 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) errno_t __cdecl _wmktemp_s(__wchar_t * _TemplateName, size_t _SizeInWords); 
#line 150 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wmktemp_s(__wchar_t (&_TemplateName)[_Size]) throw() { return _wmktemp_s(_TemplateName, _Size); } }
#line 156 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) __wchar_t *__cdecl _wmktemp(__wchar_t * _TemplateName); 
#line 163 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) intptr_t __cdecl _wfindfirst32i64(const __wchar_t * _FileName, _wfinddata32i64_t * _FindData); 
#line 170 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) intptr_t __cdecl _wfindfirst64i32(const __wchar_t * _FileName, _wfinddata64i32_t * _FindData); 
#line 177 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) intptr_t __cdecl _wfindfirst64(const __wchar_t * _FileName, _wfinddata64_t * _FindData); 
#line 184 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) int __cdecl _wfindnext32i64(intptr_t _FindHandle, _wfinddata32i64_t * _FindData); 
#line 191 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) int __cdecl _wfindnext64i32(intptr_t _FindHandle, _wfinddata64i32_t * _FindData); 
#line 198 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) int __cdecl _wfindnext64(intptr_t _FindHandle, _wfinddata64_t * _FindData); 
#line 204 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) errno_t __cdecl _wsopen_s(int * _FileHandle, const __wchar_t * _FileName, int _OpenFlag, int _ShareFlag, int _PermissionFlag); 
#line 212 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) errno_t __cdecl _wsopen_dispatch(const __wchar_t * _FileName, int _OFlag, int _ShFlag, int _PMode, int * _PFileHandle, int _BSecure); 
#line 227 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
extern "C++" inline int __cdecl _wopen(const __wchar_t *
#line 228 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
_FileName, int 
#line 229 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
_OFlag, int 
#line 230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
_PMode = 0) 
#line 232 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
{ 
#line 233 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
int _FileHandle; 
#line 235 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
const errno_t _Result = _wsopen_dispatch(_FileName, _OFlag, 64, _PMode, &_FileHandle, 0); 
#line 236 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
return (_Result) ? -1 : _FileHandle; 
#line 237 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
} 
#line 240 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
extern "C++" inline int __cdecl _wsopen(const __wchar_t *
#line 241 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
_FileName, int 
#line 242 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
_OFlag, int 
#line 243 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
_ShFlag, int 
#line 244 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
_PMode = 0) 
#line 246 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
{ 
#line 247 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
int _FileHandle; 
#line 249 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
const errno_t _Result = _wsopen_dispatch(_FileName, _OFlag, _ShFlag, _PMode, &_FileHandle, 0); 
#line 250 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
return (_Result) ? -1 : _FileHandle; 
#line 251 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
} 
#line 277 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
}
#line 273 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
#pragma warning(pop)
#line 277 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__pragma(pack ( pop )) 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 19 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"
__declspec(dllimport) intptr_t __cdecl _wexecl(const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"
__declspec(dllimport) intptr_t __cdecl _wexecle(const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"
__declspec(dllimport) intptr_t __cdecl _wexeclp(const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"
__declspec(dllimport) intptr_t __cdecl _wexeclpe(const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 39 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"
__declspec(dllimport) intptr_t __cdecl _wexecv(const __wchar_t * _FileName, const __wchar_t *const * _ArgList); 
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"
__declspec(dllimport) intptr_t __cdecl _wexecve(const __wchar_t * _FileName, const __wchar_t *const * _ArgList, const __wchar_t *const * _Env); 
#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"
__declspec(dllimport) intptr_t __cdecl _wexecvp(const __wchar_t * _FileName, const __wchar_t *const * _ArgList); 
#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"
__declspec(dllimport) intptr_t __cdecl _wexecvpe(const __wchar_t * _FileName, const __wchar_t *const * _ArgList, const __wchar_t *const * _Env); 
#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"
__declspec(dllimport) intptr_t __cdecl _wspawnl(int _Mode, const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 67 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"
__declspec(dllimport) intptr_t __cdecl _wspawnle(int _Mode, const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"
__declspec(dllimport) intptr_t __cdecl _wspawnlp(int _Mode, const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 79 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"
__declspec(dllimport) intptr_t __cdecl _wspawnlpe(int _Mode, const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 85 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"
__declspec(dllimport) intptr_t __cdecl _wspawnv(int _Mode, const __wchar_t * _FileName, const __wchar_t *const * _ArgList); 
#line 91 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"
__declspec(dllimport) intptr_t __cdecl _wspawnve(int _Mode, const __wchar_t * _FileName, const __wchar_t *const * _ArgList, const __wchar_t *const * _Env); 
#line 98 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"
__declspec(dllimport) intptr_t __cdecl _wspawnvp(int _Mode, const __wchar_t * _FileName, const __wchar_t *const * _ArgList); 
#line 104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"
__declspec(dllimport) intptr_t __cdecl _wspawnvpe(int _Mode, const __wchar_t * _FileName, const __wchar_t *const * _ArgList, const __wchar_t *const * _Env); 
#line 111 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"
__declspec(dllimport) int __cdecl _wsystem(const __wchar_t * _Command); 
#line 119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"
}__pragma(pack ( pop )) 
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/types.h"
typedef unsigned short _ino_t; 
#line 18 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/types.h"
typedef _ino_t ino_t; 
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/types.h"
typedef unsigned _dev_t; 
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/types.h"
typedef _dev_t dev_t; 
#line 39 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/types.h"
typedef long _off_t; 
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/types.h"
typedef _off_t off_t; 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 17 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
#pragma warning(push)
#pragma warning(disable:4820)
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
struct _stat32 { 
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
_dev_t st_dev; 
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
_ino_t st_ino; 
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
unsigned short st_mode; 
#line 32 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
short st_nlink; 
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
short st_uid; 
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
short st_gid; 
#line 35 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
_dev_t st_rdev; 
#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
_off_t st_size; 
#line 37 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__time32_t st_atime; 
#line 38 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__time32_t st_mtime; 
#line 39 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__time32_t st_ctime; 
#line 40 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
}; 
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
struct _stat32i64 { 
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
_dev_t st_dev; 
#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
_ino_t st_ino; 
#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
unsigned short st_mode; 
#line 47 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
short st_nlink; 
#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
short st_uid; 
#line 49 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
short st_gid; 
#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
_dev_t st_rdev; 
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__int64 st_size; 
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__time32_t st_atime; 
#line 53 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__time32_t st_mtime; 
#line 54 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__time32_t st_ctime; 
#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
}; 
#line 57 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
struct _stat64i32 { 
#line 59 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
_dev_t st_dev; 
#line 60 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
_ino_t st_ino; 
#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
unsigned short st_mode; 
#line 62 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
short st_nlink; 
#line 63 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
short st_uid; 
#line 64 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
short st_gid; 
#line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
_dev_t st_rdev; 
#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
_off_t st_size; 
#line 67 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__time64_t st_atime; 
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__time64_t st_mtime; 
#line 69 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__time64_t st_ctime; 
#line 70 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
}; 
#line 72 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
struct _stat64 { 
#line 74 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
_dev_t st_dev; 
#line 75 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
_ino_t st_ino; 
#line 76 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
unsigned short st_mode; 
#line 77 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
short st_nlink; 
#line 78 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
short st_uid; 
#line 79 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
short st_gid; 
#line 80 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
_dev_t st_rdev; 
#line 81 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__int64 st_size; 
#line 82 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__time64_t st_atime; 
#line 83 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__time64_t st_mtime; 
#line 84 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__time64_t st_ctime; 
#line 85 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
}; 
#line 90 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
struct stat { 
#line 92 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
_dev_t st_dev; 
#line 93 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
_ino_t st_ino; 
#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
unsigned short st_mode; 
#line 95 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
short st_nlink; 
#line 96 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
short st_uid; 
#line 97 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
short st_gid; 
#line 98 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
_dev_t st_rdev; 
#line 99 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
_off_t st_size; 
#line 100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
time_t st_atime; 
#line 101 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
time_t st_mtime; 
#line 102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
time_t st_ctime; 
#line 103 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
}; 
#line 157 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__declspec(dllimport) int __cdecl _fstat32(int _FileHandle, struct _stat32 * _Stat); 
#line 162 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__declspec(dllimport) int __cdecl _fstat32i64(int _FileHandle, struct _stat32i64 * _Stat); 
#line 167 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__declspec(dllimport) int __cdecl _fstat64i32(int _FileHandle, struct _stat64i32 * _Stat); 
#line 172 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__declspec(dllimport) int __cdecl _fstat64(int _FileHandle, struct _stat64 * _Stat); 
#line 177 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__declspec(dllimport) int __cdecl _stat32(const char * _FileName, struct _stat32 * _Stat); 
#line 182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__declspec(dllimport) int __cdecl _stat32i64(const char * _FileName, struct _stat32i64 * _Stat); 
#line 187 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__declspec(dllimport) int __cdecl _stat64i32(const char * _FileName, struct _stat64i32 * _Stat); 
#line 192 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__declspec(dllimport) int __cdecl _stat64(const char * _FileName, struct _stat64 * _Stat); 
#line 197 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__declspec(dllimport) int __cdecl _wstat32(const __wchar_t * _FileName, struct _stat32 * _Stat); 
#line 202 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__declspec(dllimport) int __cdecl _wstat32i64(const __wchar_t * _FileName, struct _stat32i64 * _Stat); 
#line 207 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__declspec(dllimport) int __cdecl _wstat64i32(const __wchar_t * _FileName, struct _stat64i32 * _Stat); 
#line 212 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__declspec(dllimport) int __cdecl _wstat64(const __wchar_t * _FileName, struct _stat64 * _Stat); 
#line 236 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
static __inline int __cdecl fstat(const int _FileHandle, struct stat *const _Stat) 
#line 237 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
{ 
#line 238 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
typedef char __static_assert_t[(sizeof(struct stat) == sizeof(struct _stat64i32)) != 0]; 
#line 239 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
return _fstat64i32(_FileHandle, (struct _stat64i32 *)_Stat); 
#line 240 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
} 
#line 241 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
static __inline int __cdecl stat(const char *const _FileName, struct stat *const _Stat) 
#line 242 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
{ 
#line 243 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
typedef char __static_assert_t[(sizeof(struct stat) == sizeof(struct _stat64i32)) != 0]; 
#line 244 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
return _stat64i32(_FileName, (struct _stat64i32 *)_Stat); 
#line 245 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
} 
#line 256 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
}
#line 252 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
#pragma warning(pop)
#line 256 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__pragma(pack ( pop )) 
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 37 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
typedef __wchar_t _Wint_t; 
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__declspec(dllimport) __wchar_t *__cdecl _wsetlocale(int _Category, const __wchar_t * _Locale); 
#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__declspec(dllimport) _locale_t __cdecl _wcreate_locale(int _Category, const __wchar_t * _Locale); 
#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__declspec(dllimport) wint_t __cdecl btowc(int _Ch); 
#line 59 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__declspec(dllimport) size_t __cdecl mbrlen(const char * _Ch, size_t _SizeInBytes, mbstate_t * _State); 
#line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__declspec(dllimport) size_t __cdecl mbrtowc(__wchar_t * _DstCh, const char * _SrcCh, size_t _SizeInBytes, mbstate_t * _State); 
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__declspec(dllimport) errno_t __cdecl mbsrtowcs_s(size_t * _Retval, __wchar_t * _Dst, size_t _Size, const char ** _PSrc, size_t _N, mbstate_t * _State); 
#line 82 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl mbsrtowcs_s(::size_t *_Retval, __wchar_t (&_Dest)[_Size], const char **_PSource, ::size_t _Count, ::mbstate_t *_State) throw() { return mbsrtowcs_s(_Retval, _Dest, _Size, _PSource, _Count, _State); } }
#line 92 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__declspec(dllimport) size_t __cdecl mbsrtowcs(__wchar_t * _Dest, const char ** _PSrc, size_t _Count, mbstate_t * _State); 
#line 101 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__declspec(dllimport) errno_t __cdecl wcrtomb_s(size_t * _Retval, char * _Dst, size_t _SizeInBytes, __wchar_t _Ch, mbstate_t * _State); 
#line 109 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl wcrtomb_s(::size_t *_Retval, char (&_Dest)[_Size], __wchar_t _Source, ::mbstate_t *_State) throw() { return wcrtomb_s(_Retval, _Dest, _Size, _Source, _State); } }
#line 118 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__declspec(dllimport) size_t __cdecl wcrtomb(char * _Dest, __wchar_t _Source, mbstate_t * _State); 
#line 126 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__declspec(dllimport) errno_t __cdecl wcsrtombs_s(size_t * _Retval, char * _Dst, size_t _SizeInBytes, const __wchar_t ** _Src, size_t _Size, mbstate_t * _State); 
#line 135 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl wcsrtombs_s(::size_t *_Retval, char (&_Dest)[_Size], const __wchar_t **_PSrc, ::size_t _Count, ::mbstate_t *_State) throw() { return wcsrtombs_s(_Retval, _Dest, _Size, _PSrc, _Count, _State); } }
#line 145 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__declspec(dllimport) size_t __cdecl wcsrtombs(char * _Dest, const __wchar_t ** _PSource, size_t _Count, mbstate_t * _State); 
#line 153 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__declspec(dllimport) int __cdecl wctob(wint_t _WCh); 
#line 164 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
errno_t __cdecl wmemcpy_s(__wchar_t * _S1, rsize_t _N1, const __wchar_t * _S2, rsize_t _N); 
#line 172 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
errno_t __cdecl wmemmove_s(__wchar_t * _S1, rsize_t _N1, const __wchar_t * _S2, rsize_t _N); 
#line 181 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__inline int __cdecl fwide(FILE *
#line 182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
_F, int 
#line 183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
_M) 
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
{ 
#line 186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
(void)_F; 
#line 187 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
return _M; 
#line 188 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
} 
#line 190 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__inline int __cdecl mbsinit(const mbstate_t *
#line 191 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
_P) 
#line 193 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
{ 
#line 194 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
return (_P == (0)) || ((_P->_Wchar) == (0)); 
#line 195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
} 
#line 197 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__inline const __wchar_t *__cdecl wmemchr(const __wchar_t *
#line 198 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
_S, __wchar_t 
#line 199 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
_C, size_t 
#line 200 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
_N) 
#line 202 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
{ 
#line 203 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
for (; (0) < _N; (++_S), (--_N)) { 
#line 204 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
if ((*_S) == _C) { 
#line 205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
return (const __wchar_t *)_S; }  }  
#line 207 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
return 0; 
#line 208 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
} 
#line 210 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__inline int __cdecl wmemcmp(const __wchar_t *
#line 211 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
_S1, const __wchar_t *
#line 212 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
_S2, size_t 
#line 213 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
_N) 
#line 215 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
{ 
#line 216 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
for (; (0) < _N; ((++_S1), (++_S2)), (--_N)) { 
#line 217 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
if ((*_S1) != (*_S2)) { 
#line 218 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
return ((*_S1) < (*_S2)) ? -1 : 1; }  }  
#line 220 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
return 0; 
#line 221 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
} 
#line 226 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__inline __wchar_t *__cdecl wmemcpy(__wchar_t *
#line 227 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
_S1, const __wchar_t *
#line 228 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
_S2, size_t 
#line 229 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
_N) 
#line 231 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
{ 
#pragma warning(push)
#pragma warning(disable : 4995 4996 6386)
return (__wchar_t *)memcpy(_S1, _S2, _N * sizeof(__wchar_t)); 
#pragma warning(pop)
} 
#line 239 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__inline __wchar_t *__cdecl wmemmove(__wchar_t *
#line 240 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
_S1, const __wchar_t *
#line 241 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
_S2, size_t 
#line 242 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
_N) 
#line 244 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
{ 
#pragma warning(push)
#pragma warning(disable : 4996 6386)
return (__wchar_t *)memmove(_S1, _S2, _N * sizeof(__wchar_t)); 
#pragma warning(pop)
} 
#line 253 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__inline __wchar_t *__cdecl wmemset(__wchar_t *
#line 254 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
_S, __wchar_t 
#line 255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
_C, size_t 
#line 256 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
_N) 
#line 258 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
{ 
#line 259 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__wchar_t *_Su = _S; 
#line 260 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
for (; (0) < _N; (++_Su), (--_N)) 
#line 261 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
{ 
#line 262 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
(*_Su) = _C; 
#line 263 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
}  
#line 264 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
return _S; 
#line 265 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
} 
#line 269 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
extern "C++" inline __wchar_t *__cdecl wmemchr(__wchar_t *
#line 270 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
_S, __wchar_t 
#line 271 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
_C, size_t 
#line 272 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
_N) 
#line 274 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
{ 
#line 275 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
const __wchar_t *const _SC = _S; 
#line 276 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
return const_cast< __wchar_t *>(wmemchr(_SC, _C, _N)); 
#line 277 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
} 
#line 285 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
}__pragma(pack ( pop )) 
#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
extern "C" { typedef mbstate_t _Mbstatet; }
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
namespace std { 
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
using ::mbstate_t;using ::tm;using ::wint_t;
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
using ::btowc;using ::fgetwc;using ::fgetws;using ::fputwc;
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
using ::fputws;using ::fwide;using ::fwprintf;
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
using ::fwscanf;using ::getwc;using ::getwchar;
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
using ::mbrlen;using ::mbrtowc;using ::mbsrtowcs;
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
using ::mbsinit;using ::putwc;using ::putwchar;
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
using ::swprintf;using ::swscanf;using ::ungetwc;
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
using ::vfwprintf;using ::vswprintf;using ::vwprintf;
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
using ::wcrtomb;using ::wprintf;using ::wscanf;
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
using ::wcsrtombs;using ::wcstol;using ::wcscat;
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
using ::wcschr;using ::wcscmp;using ::wcscoll;
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
using ::wcscpy;using ::wcscspn;using ::wcslen;
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
using ::wcsncat;using ::wcsncmp;using ::wcsncpy;
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
using ::wcspbrk;using ::wcsrchr;using ::wcsspn;
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
using ::wcstod;using ::wcstoul;using ::wcsstr;
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
using ::wcstok;using ::wcsxfrm;using ::wctob;
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
using ::wmemchr;using ::wmemcmp;using ::wmemcpy;
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
using ::wmemmove;using ::wmemset;using ::wcsftime;
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
using ::vfwscanf;using ::vswscanf;using ::vwscanf;
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
using ::wcstof;using ::wcstold;
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
using ::wcstoll;using ::wcstoull;
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
}
#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
#pragma warning(push,3)
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
#pragma pack ( push, 8 )
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
namespace std { 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
typedef 
#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
enum { 
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
denorm_indeterminate = (-1), 
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
denorm_absent = 0, 
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
denorm_present
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} float_denorm_style; 
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
typedef 
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
enum { 
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
round_indeterminate = (-1), 
#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
round_toward_zero = 0, 
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
round_to_nearest, 
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
round_toward_infinity, 
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
round_toward_neg_infinity
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} float_round_style; 
#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
struct _Num_base { 
#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr float_denorm_style has_denorm = ((float_denorm_style)denorm_absent); 
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool has_denorm_loss = ((bool)false); 
#line 74 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool has_infinity = ((bool)false); 
#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool has_quiet_NaN = ((bool)false); 
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool has_signaling_NaN = ((bool)false); 
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_bounded = ((bool)false); 
#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_exact = ((bool)false); 
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_iec559 = ((bool)false); 
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_integer = ((bool)false); 
#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_modulo = ((bool)false); 
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_signed = ((bool)false); 
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_specialized = ((bool)false); 
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool tinyness_before = ((bool)false); 
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool traps = ((bool)false); 
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr float_round_style round_style = ((float_round_style)round_toward_zero); 
#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits = ((int)0); 
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits10 = ((int)0); 
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int max_digits10 = ((int)0); 
#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int max_exponent = ((int)0); 
#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int max_exponent10 = ((int)0); 
#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int min_exponent = ((int)0); 
#line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int min_exponent10 = ((int)0); 
#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int radix = ((int)0); 
#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
template < class _Ty >
 class numeric_limits
  : public _Num_base
 {
public :
 static constexpr _Ty ( min ) ( ) noexcept
  {
  return ( _Ty ( ) );
  }

 static constexpr _Ty ( max ) ( ) noexcept
  {
  return ( _Ty ( ) );
  }

 static constexpr _Ty lowest ( ) noexcept
  {
  return ( _Ty ( ) );
  }

 static constexpr _Ty epsilon ( ) noexcept
  {
  return ( _Ty ( ) );
  }

 static constexpr _Ty round_error ( ) noexcept
  {
  return ( _Ty ( ) );
  }

 static constexpr _Ty denorm_min ( ) noexcept
  {
  return ( _Ty ( ) );
  }

 static constexpr _Ty infinity ( ) noexcept
  {
  return ( _Ty ( ) );
  }

 static constexpr _Ty quiet_NaN ( ) noexcept
  {
  return ( _Ty ( ) );
  }

 static constexpr _Ty signaling_NaN ( ) noexcept
  {
  return ( _Ty ( ) );
  }
 };
#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
template< class _Ty> 
#line 152 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
class numeric_limits< const _Ty>  : public numeric_limits< _Ty>  { 
#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
template< class _Ty> 
#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
class numeric_limits< volatile _Ty>  : public numeric_limits< _Ty>  { 
#line 161 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
template< class _Ty> 
#line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
class numeric_limits< const volatile _Ty>  : public numeric_limits< _Ty>  { 
#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
struct _Num_int_base : public _Num_base { 
#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_bounded = ((bool)true); 
#line 174 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_exact = ((bool)true); 
#line 175 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_integer = ((bool)true); 
#line 176 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_modulo = ((bool)true); 
#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_specialized = ((bool)true); 
#line 178 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int radix = ((int)2); 
#line 179 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
struct _Num_float_base : public _Num_base { 
#line 185 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr float_denorm_style has_denorm = ((float_denorm_style)denorm_present); 
#line 186 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool has_denorm_loss = ((bool)true); 
#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool has_infinity = ((bool)true); 
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool has_quiet_NaN = ((bool)true); 
#line 189 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool has_signaling_NaN = ((bool)true); 
#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_bounded = ((bool)true); 
#line 191 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_exact = ((bool)false); 
#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_iec559 = ((bool)true); 
#line 193 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_integer = ((bool)false); 
#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_modulo = ((bool)false); 
#line 195 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_signed = ((bool)true); 
#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_specialized = ((bool)true); 
#line 197 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool tinyness_before = ((bool)true); 
#line 198 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool traps = ((bool)false); 
#line 199 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr float_round_style round_style = ((float_round_style)round_to_nearest); 
#line 200 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int radix = ((int)2); 
#line 201 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
template<> class numeric_limits< char>  : public _Num_int_base { 
#line 208 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
public: typedef char _Ty; 
#line 210 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty min() noexcept 
#line 211 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 212 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return -128; 
#line 213 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 215 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty max() noexcept 
#line 216 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 217 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 127; 
#line 218 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 220 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty lowest() noexcept 
#line 221 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 222 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return min(); 
#line 223 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 225 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty epsilon() noexcept 
#line 226 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 227 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 228 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty round_error() noexcept 
#line 231 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 232 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 233 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty denorm_min() noexcept 
#line 236 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 237 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 240 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty infinity() noexcept 
#line 241 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 242 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty quiet_NaN() noexcept 
#line 246 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 248 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 250 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty signaling_NaN() noexcept 
#line 251 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_signed = ((bool)((-128) != 0)); 
#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits = ((int)(8 - (((-128) != 0) ? 1 : 0))); 
#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits10 = ((int)(((8 - (((-128) != 0) ? 1 : 0)) * 301L) / (1000))); 
#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
template<> class numeric_limits< __wchar_t>  : public _Num_int_base { 
#line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
public: typedef __wchar_t _Ty; 
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty min() noexcept 
#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return (_Ty)0; 
#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty max() noexcept 
#line 274 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 275 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return (_Ty)65535; 
#line 276 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty lowest() noexcept 
#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 280 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return min(); 
#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 283 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty epsilon() noexcept 
#line 284 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 285 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 288 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty round_error() noexcept 
#line 289 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 290 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 293 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty denorm_min() noexcept 
#line 294 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 295 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty infinity() noexcept 
#line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 300 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 301 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty quiet_NaN() noexcept 
#line 304 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 305 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 306 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 308 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty signaling_NaN() noexcept 
#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 310 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 313 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_signed = ((bool)(0 != 0)); 
#line 314 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits = ((int)(((8) * sizeof(__wchar_t)) - ((0 != 0) ? 1 : 0))); 
#line 316 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits10 = ((int)(((((8) * sizeof(__wchar_t)) - ((0 != 0) ? 1 : 0)) * (301L)) / (1000))); 
#line 318 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 321 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
template<> class numeric_limits< bool>  : public _Num_int_base { 
#line 325 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
public: typedef bool _Ty; 
#line 327 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty min() noexcept 
#line 328 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 329 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return false; 
#line 330 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 332 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty max() noexcept 
#line 333 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return true; 
#line 335 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 337 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty lowest() noexcept 
#line 338 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return min(); 
#line 340 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 342 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty epsilon() noexcept 
#line 343 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 344 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 345 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 347 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty round_error() noexcept 
#line 348 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 349 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 350 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 352 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty denorm_min() noexcept 
#line 353 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 357 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty infinity() noexcept 
#line 358 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 359 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 360 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 362 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty quiet_NaN() noexcept 
#line 363 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 364 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 365 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 367 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty signaling_NaN() noexcept 
#line 368 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 369 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 370 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 372 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_modulo = ((bool)false); 
#line 373 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_signed = ((bool)false); 
#line 374 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits = ((int)1); 
#line 375 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits10 = ((int)0); 
#line 376 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 379 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
template<> class numeric_limits< signed char>  : public _Num_int_base { 
#line 383 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
public: typedef signed char _Ty; 
#line 385 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty min() noexcept 
#line 386 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 387 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return -128; 
#line 388 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 390 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty max() noexcept 
#line 391 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 392 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 127; 
#line 393 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 395 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty lowest() noexcept 
#line 396 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 397 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return min(); 
#line 398 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 400 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty epsilon() noexcept 
#line 401 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 402 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 405 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty round_error() noexcept 
#line 406 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 407 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 408 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 410 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty denorm_min() noexcept 
#line 411 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 412 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 413 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 415 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty infinity() noexcept 
#line 416 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 417 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 418 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 420 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty quiet_NaN() noexcept 
#line 421 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 422 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 423 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 425 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty signaling_NaN() noexcept 
#line 426 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 427 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 428 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 430 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_signed = ((bool)true); 
#line 431 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits = ((int)(8 - 1)); 
#line 432 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits10 = ((int)(((8 - 1) * 301L) / (1000))); 
#line 433 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 436 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
template<> class numeric_limits< unsigned char>  : public _Num_int_base { 
#line 440 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
public: typedef unsigned char _Ty; 
#line 442 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty min() noexcept 
#line 443 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 444 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 445 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 447 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty max() noexcept 
#line 448 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 449 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 255; 
#line 450 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 452 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty lowest() noexcept 
#line 453 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 454 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return min(); 
#line 455 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 457 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty epsilon() noexcept 
#line 458 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 459 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 460 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 462 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty round_error() noexcept 
#line 463 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 465 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 467 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty denorm_min() noexcept 
#line 468 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 469 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 470 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 472 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty infinity() noexcept 
#line 473 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 474 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 475 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 477 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty quiet_NaN() noexcept 
#line 478 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 479 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 480 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 482 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty signaling_NaN() noexcept 
#line 483 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 484 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 485 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 487 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_signed = ((bool)false); 
#line 488 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits = ((int)8); 
#line 489 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits10 = ((int)(((8) * 301L) / (1000))); 
#line 490 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 493 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
template<> class numeric_limits< short>  : public _Num_int_base { 
#line 497 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
public: typedef short _Ty; 
#line 499 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty min() noexcept 
#line 500 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 501 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return -32768; 
#line 502 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 504 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty max() noexcept 
#line 505 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 506 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 32767; 
#line 507 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 509 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty lowest() noexcept 
#line 510 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 511 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return min(); 
#line 512 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 514 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty epsilon() noexcept 
#line 515 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 516 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 517 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 519 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty round_error() noexcept 
#line 520 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 521 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 522 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 524 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty denorm_min() noexcept 
#line 525 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 526 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 527 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 529 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty infinity() noexcept 
#line 530 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 531 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 532 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 534 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty quiet_NaN() noexcept 
#line 535 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 536 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 537 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 539 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty signaling_NaN() noexcept 
#line 540 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 541 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 542 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 544 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_signed = ((bool)true); 
#line 545 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits = ((int)(((8) * sizeof(short)) - (1))); 
#line 546 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits10 = ((int)(((((8) * sizeof(short)) - (1)) * (301L)) / (1000))); 
#line 548 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 552 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
template<> class numeric_limits< unsigned short>  : public _Num_int_base { 
#line 556 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
public: typedef unsigned short _Ty; 
#line 558 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty min() noexcept 
#line 559 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 560 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 561 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 563 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty max() noexcept 
#line 564 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 565 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 65535; 
#line 566 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 568 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty lowest() noexcept 
#line 569 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 570 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return min(); 
#line 571 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 573 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty epsilon() noexcept 
#line 574 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 575 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 576 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 578 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty round_error() noexcept 
#line 579 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 580 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 581 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 583 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty denorm_min() noexcept 
#line 584 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 585 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 586 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 588 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty infinity() noexcept 
#line 589 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 590 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 591 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 593 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty quiet_NaN() noexcept 
#line 594 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 595 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 596 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 598 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty signaling_NaN() noexcept 
#line 599 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 600 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 601 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 603 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_signed = ((bool)false); 
#line 604 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits = ((int)((8) * sizeof(unsigned short))); 
#line 605 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits10 = ((int)((((8) * sizeof(unsigned short)) * (301L)) / (1000))); 
#line 607 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 611 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
template<> class numeric_limits< char16_t>  : public _Num_int_base { 
#line 615 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
public: typedef char16_t _Ty; 
#line 617 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty min() noexcept 
#line 618 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 619 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 620 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 622 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty max() noexcept 
#line 623 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 624 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 65535; 
#line 625 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 627 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty lowest() noexcept 
#line 628 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 629 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return min(); 
#line 630 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 632 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty epsilon() noexcept 
#line 633 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 634 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 635 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 637 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty round_error() noexcept 
#line 638 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 639 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 640 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 642 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty denorm_min() noexcept 
#line 643 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 644 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 645 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 647 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty infinity() noexcept 
#line 648 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 649 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 650 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 652 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty quiet_NaN() noexcept 
#line 653 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 654 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 655 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 657 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty signaling_NaN() noexcept 
#line 658 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 659 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 660 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 662 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_signed = ((bool)false); 
#line 663 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits = ((int)((8) * sizeof(char16_t))); 
#line 664 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits10 = ((int)((((8) * sizeof(char16_t)) * (301L)) / (1000))); 
#line 666 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 669 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
template<> class numeric_limits< int>  : public _Num_int_base { 
#line 673 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
public: typedef int _Ty; 
#line 675 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty min() noexcept 
#line 676 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 677 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return (-2147483647) - 1; 
#line 678 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 680 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty max() noexcept 
#line 681 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 682 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 2147483647; 
#line 683 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 685 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty lowest() noexcept 
#line 686 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 687 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return min(); 
#line 688 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 690 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty epsilon() noexcept 
#line 691 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 692 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 693 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 695 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty round_error() noexcept 
#line 696 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 697 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 698 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 700 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty denorm_min() noexcept 
#line 701 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 702 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 703 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 705 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty infinity() noexcept 
#line 706 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 707 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 708 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 710 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty quiet_NaN() noexcept 
#line 711 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 712 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 713 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 715 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty signaling_NaN() noexcept 
#line 716 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 717 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 718 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 720 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_signed = ((bool)true); 
#line 721 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits = ((int)(((8) * sizeof(int)) - (1))); 
#line 722 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits10 = ((int)(((((8) * sizeof(int)) - (1)) * (301L)) / (1000))); 
#line 724 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 727 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
template<> class numeric_limits< unsigned>  : public _Num_int_base { 
#line 731 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
public: typedef unsigned _Ty; 
#line 733 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty min() noexcept 
#line 734 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 735 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 736 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 738 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty max() noexcept 
#line 739 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 740 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 4294967295U; 
#line 741 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 743 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty lowest() noexcept 
#line 744 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 745 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return min(); 
#line 746 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 748 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty epsilon() noexcept 
#line 749 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 750 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 751 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 753 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty round_error() noexcept 
#line 754 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 755 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 756 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 758 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty denorm_min() noexcept 
#line 759 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 760 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 761 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 763 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty infinity() noexcept 
#line 764 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 765 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 766 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 768 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty quiet_NaN() noexcept 
#line 769 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 770 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 771 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 773 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty signaling_NaN() noexcept 
#line 774 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 775 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 776 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 778 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_signed = ((bool)false); 
#line 779 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits = ((int)((8) * sizeof(unsigned))); 
#line 780 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits10 = ((int)((((8) * sizeof(unsigned)) * (301L)) / (1000))); 
#line 782 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 785 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
template<> class numeric_limits< long>  : public _Num_int_base { 
#line 789 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
public: typedef long _Ty; 
#line 791 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty min() noexcept 
#line 792 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 793 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return (-2147483647L) - (1); 
#line 794 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 796 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty max() noexcept 
#line 797 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 798 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 2147483647L; 
#line 799 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 801 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty lowest() noexcept 
#line 802 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 803 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return min(); 
#line 804 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 806 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty epsilon() noexcept 
#line 807 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 808 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 809 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 811 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty round_error() noexcept 
#line 812 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 813 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 814 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 816 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty denorm_min() noexcept 
#line 817 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 818 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 819 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 821 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty infinity() noexcept 
#line 822 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 823 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 824 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 826 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty quiet_NaN() noexcept 
#line 827 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 828 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 829 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 831 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty signaling_NaN() noexcept 
#line 832 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 833 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 834 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 836 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_signed = ((bool)true); 
#line 837 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits = ((int)(((8) * sizeof(long)) - (1))); 
#line 838 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits10 = ((int)(((((8) * sizeof(long)) - (1)) * (301L)) / (1000))); 
#line 840 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 843 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
template<> class numeric_limits< unsigned long>  : public _Num_int_base { 
#line 847 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
public: typedef unsigned long _Ty; 
#line 849 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty min() noexcept 
#line 850 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 851 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 852 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 854 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty max() noexcept 
#line 855 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 856 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 4294967295UL; 
#line 857 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 859 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty lowest() noexcept 
#line 860 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 861 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return min(); 
#line 862 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 864 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty epsilon() noexcept 
#line 865 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 866 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 867 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 869 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty round_error() noexcept 
#line 870 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 871 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 872 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 874 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty denorm_min() noexcept 
#line 875 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 876 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 877 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 879 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty infinity() noexcept 
#line 880 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 881 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 882 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 884 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty quiet_NaN() noexcept 
#line 885 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 886 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 887 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 889 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty signaling_NaN() noexcept 
#line 890 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 891 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 892 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 894 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_signed = ((bool)false); 
#line 895 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits = ((int)((8) * sizeof(unsigned long))); 
#line 896 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits10 = ((int)((((8) * sizeof(unsigned long)) * (301L)) / (1000))); 
#line 898 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 901 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
template<> class numeric_limits< char32_t>  : public _Num_int_base { 
#line 905 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
public: typedef char32_t _Ty; 
#line 907 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty min() noexcept 
#line 908 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 909 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 910 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 912 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty max() noexcept 
#line 913 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 914 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 4294967295U; 
#line 915 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 917 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty lowest() noexcept 
#line 918 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 919 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return min(); 
#line 920 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 922 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty epsilon() noexcept 
#line 923 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 924 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 925 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 927 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty round_error() noexcept 
#line 928 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 929 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 930 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 932 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty denorm_min() noexcept 
#line 933 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 934 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 935 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 937 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty infinity() noexcept 
#line 938 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 939 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 940 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 942 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty quiet_NaN() noexcept 
#line 943 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 944 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 945 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 947 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty signaling_NaN() noexcept 
#line 948 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 949 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 950 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 952 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_signed = ((bool)false); 
#line 953 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits = ((int)((8) * sizeof(char32_t))); 
#line 954 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits10 = ((int)((((8) * sizeof(char32_t)) * (301L)) / (1000))); 
#line 956 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 959 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
template<> class numeric_limits< __int64>  : public _Num_int_base { 
#line 963 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
public: typedef __int64 _Ty; 
#line 965 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty min() noexcept 
#line 966 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 967 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return (-9223372036854775807i64) - (1); 
#line 968 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 970 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty max() noexcept 
#line 971 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 972 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 9223372036854775807i64; 
#line 973 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 975 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty lowest() noexcept 
#line 976 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 977 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return min(); 
#line 978 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 980 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty epsilon() noexcept 
#line 981 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 982 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 983 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 985 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty round_error() noexcept 
#line 986 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 987 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 988 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 990 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty denorm_min() noexcept 
#line 991 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 992 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 993 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 995 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty infinity() noexcept 
#line 996 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 997 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 998 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1000 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty quiet_NaN() noexcept 
#line 1001 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1002 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 1003 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1005 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty signaling_NaN() noexcept 
#line 1006 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1007 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 1008 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1010 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_signed = ((bool)true); 
#line 1011 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits = ((int)(((8) * sizeof(__int64)) - (1))); 
#line 1012 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits10 = ((int)(((((8) * sizeof(__int64)) - (1)) * (301L)) / (1000))); 
#line 1014 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 1017 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
template<> class numeric_limits< unsigned __int64>  : public _Num_int_base { 
#line 1021 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
public: typedef unsigned __int64 _Ty; 
#line 1023 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty min() noexcept 
#line 1024 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1025 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 1026 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1028 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty max() noexcept 
#line 1029 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1030 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 18446744073709551615Ui64; 
#line 1031 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1033 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty lowest() noexcept 
#line 1034 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1035 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return min(); 
#line 1036 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1038 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty epsilon() noexcept 
#line 1039 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1040 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 1041 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1043 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty round_error() noexcept 
#line 1044 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1045 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 1046 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1048 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty denorm_min() noexcept 
#line 1049 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1050 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 1051 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1053 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty infinity() noexcept 
#line 1054 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1055 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 1056 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1058 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty quiet_NaN() noexcept 
#line 1059 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1060 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 1061 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1063 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty signaling_NaN() noexcept 
#line 1064 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1065 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return 0; 
#line 1066 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1068 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr bool is_signed = ((bool)false); 
#line 1069 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits = ((int)((8) * sizeof(unsigned __int64))); 
#line 1070 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits10 = ((int)((((8) * sizeof(unsigned __int64)) * (301L)) / (1000))); 
#line 1072 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 1075 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
template<> class numeric_limits< float>  : public _Num_float_base { 
#line 1079 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
public: typedef float _Ty; 
#line 1081 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty min() noexcept 
#line 1082 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1083 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return (1.175494351e-038F); 
#line 1084 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1086 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty max() noexcept 
#line 1087 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1088 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return (3.402823466e+038F); 
#line 1089 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1091 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty lowest() noexcept 
#line 1092 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1093 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return -max(); 
#line 1094 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1096 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty epsilon() noexcept 
#line 1097 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1098 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return (1.192092896e-007F); 
#line 1099 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1101 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty round_error() noexcept 
#line 1102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1103 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return (0.5F); 
#line 1104 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1106 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty denorm_min() noexcept 
#line 1107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1108 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return (1.401298464e-045F); 
#line 1109 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1111 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty infinity() noexcept 
#line 1112 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1113 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return __builtin_huge_valf(); 
#line 1114 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1116 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty quiet_NaN() noexcept 
#line 1117 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1118 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return __builtin_nanf("0"); 
#line 1119 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1121 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty signaling_NaN() noexcept 
#line 1122 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1123 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return __builtin_nansf("1"); 
#line 1124 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1126 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits = ((int)24); 
#line 1127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits10 = ((int)6); 
#line 1129 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int max_digits10 = ((int)((2) + (((24) * 301L) / (1000)))); 
#line 1131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int max_exponent = ((int)((int)128)); 
#line 1132 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int max_exponent10 = ((int)((int)38)); 
#line 1133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int min_exponent = ((int)((int)(-125))); 
#line 1134 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int min_exponent10 = ((int)((int)(-37))); 
#line 1135 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 1138 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
template<> class numeric_limits< double>  : public _Num_float_base { 
#line 1142 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
public: typedef double _Ty; 
#line 1144 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty min() noexcept 
#line 1145 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1146 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return (2.2250738585072014e-308); 
#line 1147 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1149 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty max() noexcept 
#line 1150 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1151 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return (1.7976931348623157e+308); 
#line 1152 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1154 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty lowest() noexcept 
#line 1155 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1156 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return -max(); 
#line 1157 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1159 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty epsilon() noexcept 
#line 1160 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1161 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return (2.2204460492503131e-016); 
#line 1162 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1164 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty round_error() noexcept 
#line 1165 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1166 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return (0.5); 
#line 1167 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1169 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty denorm_min() noexcept 
#line 1170 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1171 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return (4.9406564584124654e-324); 
#line 1172 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1174 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty infinity() noexcept 
#line 1175 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1176 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return __builtin_huge_val(); 
#line 1177 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1179 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty quiet_NaN() noexcept 
#line 1180 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1181 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return __builtin_nan("0"); 
#line 1182 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1184 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty signaling_NaN() noexcept 
#line 1185 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1186 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return __builtin_nans("1"); 
#line 1187 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1189 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits = ((int)53); 
#line 1190 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits10 = ((int)15); 
#line 1192 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int max_digits10 = ((int)((2) + (((53) * 301L) / (1000)))); 
#line 1194 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int max_exponent = ((int)((int)1024)); 
#line 1195 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int max_exponent10 = ((int)((int)308)); 
#line 1196 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int min_exponent = ((int)((int)(-1021))); 
#line 1197 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int min_exponent10 = ((int)((int)(-307))); 
#line 1198 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 1201 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
template<> class numeric_limits< long double>  : public _Num_float_base { 
#line 1205 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
public: typedef long double _Ty; 
#line 1207 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty min() noexcept 
#line 1208 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1209 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return (2.2250738585072014e-308); 
#line 1210 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1212 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty max() noexcept 
#line 1213 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1214 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return (1.7976931348623157e+308); 
#line 1215 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1217 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty lowest() noexcept 
#line 1218 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1219 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return -max(); 
#line 1220 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1222 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty epsilon() noexcept 
#line 1223 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1224 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return (2.2204460492503131e-016); 
#line 1225 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1227 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty round_error() noexcept 
#line 1228 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1229 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return (0.5L); 
#line 1230 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1232 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty denorm_min() noexcept 
#line 1233 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1234 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return (4.9406564584124654e-324); 
#line 1235 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1237 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty infinity() noexcept 
#line 1238 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1239 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return __builtin_huge_val(); 
#line 1240 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1242 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty quiet_NaN() noexcept 
#line 1243 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1244 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return __builtin_nan("0"); 
#line 1245 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr _Ty signaling_NaN() noexcept 
#line 1248 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
{ 
#line 1249 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
return __builtin_nans("1"); 
#line 1250 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
} 
#line 1252 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits = ((int)53); 
#line 1253 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int digits10 = ((int)15); 
#line 1255 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int max_digits10 = ((int)((2) + (((53) * 301L) / (1000)))); 
#line 1257 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int max_exponent = ((int)((int)1024)); 
#line 1258 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int max_exponent10 = ((int)((int)308)); 
#line 1259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int min_exponent = ((int)((int)(-1021))); 
#line 1260 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
static constexpr int min_exponent10 = ((int)((int)(-307))); 
#line 1261 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}; 
#line 1481 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
}
#line 1483 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
#pragma warning(pop)
#pragma pack ( pop )
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
extern "C++" {
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
#pragma warning(push)
#pragma warning(disable: 4985)
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
#pragma pack ( push, 8 )
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
namespace std { 
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
struct nothrow_t { }; 
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
extern const nothrow_t nothrow; 
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
}
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
__declspec(allocator) void *__cdecl operator new(size_t _Size); 
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
__declspec(allocator) void *__cdecl operator new(size_t _Size, const std::nothrow_t &) throw(); 
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
__declspec(allocator) void *__cdecl operator new[](size_t _Size); 
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
__declspec(allocator) void *__cdecl operator new[](size_t _Size, const std::nothrow_t &) throw(); 
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
void __cdecl operator delete(void * _Block) throw(); 
#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
void __cdecl operator delete(void * _Block, const std::nothrow_t &) throw(); 
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
void __cdecl operator delete[](void * _Block) throw(); 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
void __cdecl operator delete[](void * _Block, const std::nothrow_t &) throw(); 
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
void __cdecl operator delete(void * _Block, size_t _Size) throw(); 
#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
void __cdecl operator delete[](void * _Block, size_t _Size) throw(); 
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
inline void *__cdecl operator new(size_t _Size, void *_Where) throw() 
#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
{ 
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
(void)_Size; 
#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
return _Where; 
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
} 
#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
inline void __cdecl operator delete(void *, void *) throw() 
#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
{ 
#line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
} 
#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
inline void *__cdecl operator new[](size_t _Size, void *_Where) throw() 
#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
{ 
#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
(void)_Size; 
#line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
return _Where; 
#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
} 
#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
inline void __cdecl operator delete[](void *, void *) throw() 
#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
{ 
#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
} 
#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
}
#line 114 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
#pragma warning(pop)
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\new"
#pragma warning(push,3)
#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
#pragma pack ( pop )
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\new"
#pragma pack ( push, 8 )
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\new"
namespace std { 
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\new"
typedef void (__cdecl *new_handler)(void); 
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\new"
__declspec(dllimport) new_handler __cdecl set_new_handler(new_handler) noexcept; 
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\new"
__declspec(dllimport) new_handler __cdecl get_new_handler() noexcept; 
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\new"
}
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\new"
#pragma warning(pop)
#pragma pack ( pop )
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new_debug.h"
extern "C++" {
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new_debug.h"
#pragma pack ( push, 8 )
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new_debug.h"
__declspec(allocator) void *__cdecl operator new(size_t _Size, int _BlockUse, const char * _FileName, int _LineNumber); 
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new_debug.h"
__declspec(allocator) void *__cdecl operator new[](size_t _Size, int _BlockUse, const char * _FileName, int _LineNumber); 
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new_debug.h"
void __cdecl operator delete(void * _Block, int _BlockUse, const char * _FileName, int _LineNumber) throw(); 
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new_debug.h"
void __cdecl operator delete[](void * _Block, int _BlockUse, const char * _FileName, int _LineNumber) throw(); 
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new_debug.h"
}
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new_debug.h"
#pragma pack ( pop )
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 18 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
typedef void *_HFILE; 
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
typedef int (__cdecl *_CRT_REPORT_HOOK)(int, char *, int *); 
#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
typedef int (__cdecl *_CRT_REPORT_HOOKW)(int, __wchar_t *, int *); 
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
typedef int (__cdecl *_CRT_ALLOC_HOOK)(int, void *, size_t, int, long, const unsigned char *, int); 
#line 107 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
typedef void (__cdecl *_CRT_DUMP_CLIENT)(void *, size_t); 
#line 113 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
struct _CrtMemBlockHeader; 
#line 122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
typedef 
#line 115 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
struct _CrtMemState { 
#line 117 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
_CrtMemBlockHeader *pBlockHeader; 
#line 118 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
size_t lCounts[5]; 
#line 119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
size_t lSizes[5]; 
#line 120 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
size_t lHighWaterCount; 
#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
size_t lTotalCount; 
#line 122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
} _CrtMemState; 
#line 808 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
}
#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
#pragma warning(push,3)
#line 808 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h"
__pragma(pack ( pop )) 
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
#pragma pack ( push, 8 )
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
namespace std { 
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef _Longlong streamoff; 
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef _Longlong streamsize; 
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
__declspec(dllimport) extern const streamoff _BADOFF; 
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template < class _Statetype >
 class fpos
 {
 typedef fpos < _Statetype > _Myt;

public :
  fpos ( streamoff _Off = 0 )
  : _Myoff ( _Off ), _Fpos ( 0 ), _Mystate ( )
  {
  }

  fpos ( _Statetype _State, fpos_t _Fileposition )
  : _Myoff ( 0 ), _Fpos ( _Fileposition ), _Mystate ( _State )
  {
  }

 _Statetype state ( ) const
  {
  return ( _Mystate );
  }

 void state ( _Statetype _State )
  {
  _Mystate = _State;
  }

 fpos_t seekpos ( ) const
  {
  return ( _Fpos );
  }

  operator streamoff ( ) const
  {
  return ( ( streamoff ) ( _Myoff + ( ( long long ) ( _Fpos ) ) ) );
  }

 streamoff operator - ( const _Myt & _Right ) const
  {
  return ( ( streamoff ) * this - ( streamoff ) _Right );
  }

 _Myt & operator += ( streamoff _Off )
  {
  _Myoff += _Off;
  return ( * this );
  }

 _Myt & operator -= ( streamoff _Off )
  {
  _Myoff -= _Off;
  return ( * this );
  }

 _Myt operator + ( streamoff _Off ) const
  {
  _Myt _Tmp = * this;
  return ( _Tmp += _Off );
  }

 _Myt operator - ( streamoff _Off ) const
  {
  _Myt _Tmp = * this;
  return ( _Tmp -= _Off );
  }

 bool operator == ( const _Myt & _Right ) const
  {
  return ( ( streamoff ) * this == ( streamoff ) _Right );
  }

 bool operator == ( streamoff _Right ) const
  {
  return ( ( streamoff ) * this == _Right );
  }

 bool operator != ( const _Myt & _Right ) const
  {
  return ( ! ( * this == _Right ) );
  }

private :
 streamoff _Myoff;
 fpos_t _Fpos;
 _Statetype _Mystate;
 };
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef fpos< _Mbstatet>  streampos; 
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef streampos wstreampos; 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template < class _Elem,
 class _Int_type >
 struct _Char_traits
 {
 typedef _Elem char_type;
 typedef _Int_type int_type;
 typedef streampos pos_type;
 typedef streamoff off_type;
 typedef _Mbstatet state_type;

 static int __cdecl compare (
    const _Elem * _First1,
    const _Elem * _First2, size_t _Count )
  {
  for (; 0 < _Count; -- _Count, ++ _First1, ++ _First2 )
   if ( ! eq ( * _First1, * _First2 ) )
    return ( lt ( * _First1, * _First2 ) ? - 1 : + 1 );
  return ( 0 );
  }

 static size_t __cdecl length ( const _Elem * _First )
  {
  size_t _Count;
  for ( _Count = 0; ! eq ( * _First, _Elem ( ) ); ++ _First )
   ++ _Count;
  return ( _Count );
  }

 static _Elem * __cdecl copy (
    _Elem * _First1,
    const _Elem * _First2, size_t _Count )
  {
  _Elem * _Next = _First1;
  for (; 0 < _Count; -- _Count, ++ _Next, ++ _First2 )
   assign ( * _Next, * _First2 );
  return ( _First1 );
  }

 static _Elem * __cdecl _Copy_s (
    _Elem * _First1, size_t _Dest_size,
    const _Elem * _First2, size_t _Count )
  {
  { if ( ! ( _Count <= _Dest_size ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo_noreturn ( ); return ( 0 ); } };
  return ( copy ( _First1, _First2, _Count ) );
  }

 static const _Elem * __cdecl find (
    const _Elem * _First,
  size_t _Count, const _Elem & _Ch )
  {
  for (; 0 < _Count; -- _Count, ++ _First )
   if ( eq ( * _First, _Ch ) )
    return ( _First );
  return ( 0 );
  }

 static _Elem * __cdecl move (
    _Elem * _First1,
    const _Elem * _First2, size_t _Count )
  {
  _Elem * _Next = _First1;
  if ( _First2 < _Next && _Next < _First2 + _Count )
   for ( _Next += _Count, _First2 += _Count; 0 < _Count; -- _Count )
    assign ( * -- _Next, * -- _First2 );
  else
   for (; 0 < _Count; -- _Count, ++ _Next, ++ _First2 )
    assign ( * _Next, * _First2 );
  return ( _First1 );
  }

 static _Elem * __cdecl assign (
    _Elem * _First,
  size_t _Count, _Elem _Ch )
  {
  _Elem * _Next = _First;
  for (; 0 < _Count; -- _Count, ++ _Next )
   assign ( * _Next, _Ch );
  return ( _First );
  }

 static void __cdecl assign ( _Elem & _Left, const _Elem & _Right ) noexcept
  {
  _Left = _Right;
  }

 static constexpr bool __cdecl eq ( const _Elem & _Left,
  const _Elem & _Right ) noexcept
  {
  return ( _Left == _Right );
  }

 static constexpr bool __cdecl lt ( const _Elem & _Left,
  const _Elem & _Right ) noexcept
  {
  return ( _Left < _Right );
  }

 static constexpr _Elem __cdecl to_char_type (
  const int_type & _Meta ) noexcept
  {
  return ( ( _Elem ) _Meta );
  }

 static constexpr int_type __cdecl to_int_type (
  const _Elem & _Ch ) noexcept
  {
  return ( ( int_type ) _Ch );
  }

 static constexpr bool __cdecl eq_int_type ( const int_type & _Left,
  const int_type & _Right ) noexcept
  {
  return ( _Left == _Right );
  }

 static constexpr int_type __cdecl not_eof (
  const int_type & _Meta ) noexcept
  {
  return ( _Meta != eof ( ) ? ( int_type ) _Meta : ( int_type ) ! eof ( ) );
  }

 static constexpr int_type __cdecl eof ( ) noexcept
  {
  return ( ( int_type ) ( - 1 ) );
  }
 };
#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template< class _Elem> 
#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
struct char_traits : public _Char_traits< _Elem, long>  { 
#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
}; 
#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template<> struct char_traits< char16_t>  : public _Char_traits< char16_t, unsigned short>  { 
#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
}; 
#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef streampos u16streampos; 
#line 276 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template<> struct char_traits< char32_t>  : public _Char_traits< char32_t, unsigned>  { 
#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
}; 
#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef streampos u32streampos; 
#line 285 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template<> struct char_traits< __wchar_t>  { 
#line 287 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef __wchar_t _Elem; 
#line 288 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef _Elem char_type; 
#line 289 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef wint_t int_type; 
#line 290 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef streampos pos_type; 
#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef streamoff off_type; 
#line 292 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef _Mbstatet state_type; 
#line 294 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static int __cdecl compare(const _Elem *_First1, const _Elem *_First2, size_t 
#line 295 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Count) 
#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 297 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return (_Count == (0)) ? 0 : ::wmemcmp(_First1, _First2, _Count); 
#line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 301 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static size_t __cdecl length(const _Elem *_First) 
#line 302 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return ((*_First) == 0) ? 0 : ::wcslen(_First); 
#line 305 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 307 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2, size_t 
#line 308 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Count) 
#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 310 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return (_Count == (0)) ? _First1 : ((_Elem *)::wmemcpy(_First1, _First2, _Count)); 
#line 312 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 314 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static _Elem *__cdecl _Copy_s(_Elem *
#line 315 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_First1, size_t _Size_in_words, const _Elem *
#line 316 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_First2, size_t _Count) 
#line 317 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 318 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
if ((0) < _Count) { 
#line 319 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
::wmemcpy_s(_First1, _Size_in_words, _First2, _Count); }  
#line 320 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return _First1; 
#line 321 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 323 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static const _Elem *__cdecl find(const _Elem *_First, size_t _Count, const _Elem &
#line 324 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Ch) 
#line 325 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 326 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return (_Count == (0)) ? (const _Elem *)0 : ((const _Elem *)::wmemchr(_First, _Ch, _Count)); 
#line 328 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 330 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2, size_t 
#line 331 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Count) 
#line 332 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 333 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return (_Count == (0)) ? _First1 : ((_Elem *)::wmemmove(_First1, _First2, _Count)); 
#line 335 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 337 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static _Elem *__cdecl assign(_Elem *_First, size_t _Count, _Elem 
#line 338 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Ch) 
#line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 340 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return (_Elem *)::wmemset(_First, _Ch, _Count); 
#line 341 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 343 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static void __cdecl assign(_Elem &_Left, const _Elem &_Right) noexcept 
#line 344 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 345 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Left = _Right; 
#line 346 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 348 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static constexpr bool __cdecl eq(const _Elem &_Left, const _Elem &
#line 349 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Right) noexcept 
#line 350 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 351 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return _Left == _Right; 
#line 352 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static constexpr bool __cdecl lt(const _Elem &_Left, const _Elem &
#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Right) noexcept 
#line 356 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 357 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return _Left < _Right; 
#line 358 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 360 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static constexpr _Elem __cdecl to_char_type(const int_type &
#line 361 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Meta) noexcept 
#line 362 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 363 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return _Meta; 
#line 364 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 366 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static constexpr int_type __cdecl to_int_type(const _Elem &
#line 367 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Ch) noexcept 
#line 368 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 369 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return _Ch; 
#line 370 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 372 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static constexpr bool __cdecl eq_int_type(const int_type &_Left, const int_type &
#line 373 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Right) noexcept 
#line 374 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 375 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return _Left == _Right; 
#line 376 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 378 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static constexpr int_type __cdecl not_eof(const int_type &
#line 379 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Meta) noexcept 
#line 380 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 381 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return (_Meta != (eof())) ? _Meta : (!(eof())); 
#line 382 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 384 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static constexpr int_type __cdecl eof() noexcept 
#line 385 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 386 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return (wint_t)65535; 
#line 387 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 388 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
}; 
#line 393 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template<> struct char_traits< unsigned short>  { 
#line 395 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef unsigned short _Elem; 
#line 396 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef _Elem char_type; 
#line 397 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef wint_t int_type; 
#line 398 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef streampos pos_type; 
#line 399 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef streamoff off_type; 
#line 400 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef _Mbstatet state_type; 
#line 402 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static int __cdecl compare(const _Elem *_First1, const _Elem *_First2, size_t 
#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Count) 
#line 404 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 405 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return (_Count == (0)) ? 0 : ::wmemcmp((const __wchar_t *)_First1, (const __wchar_t *)_First2, _Count); 
#line 408 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 410 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static size_t __cdecl length(const _Elem *_First) 
#line 411 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 412 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return ((*_First) == 0) ? 0 : ::wcslen((const __wchar_t *)_First); 
#line 414 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 416 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2, size_t 
#line 417 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Count) 
#line 418 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 419 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return (_Count == (0)) ? _First1 : ((_Elem *)::wmemcpy((__wchar_t *)_First1, (const __wchar_t *)_First2, _Count)); 
#line 422 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 424 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static _Elem *__cdecl _Copy_s(_Elem *
#line 425 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_First1, size_t _Size_in_words, const _Elem *
#line 426 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_First2, size_t _Count) 
#line 427 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 428 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
if ((0) < _Count) { 
#line 429 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
::wmemcpy_s((__wchar_t *)_First1, _Size_in_words, (const __wchar_t *)_First2, _Count); }  
#line 431 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return _First1; 
#line 432 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 434 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static const _Elem *__cdecl find(const _Elem *_First, size_t _Count, const _Elem &
#line 435 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Ch) 
#line 436 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 437 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return (_Count == (0)) ? (const _Elem *)0 : ((const _Elem *)::wmemchr((const __wchar_t *)_First, _Ch, _Count)); 
#line 440 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 442 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2, size_t 
#line 443 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Count) 
#line 444 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 445 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return (_Count == (0)) ? _First1 : ((_Elem *)::wmemmove((__wchar_t *)_First1, (const __wchar_t *)_First2, _Count)); 
#line 448 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 450 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static _Elem *__cdecl assign(_Elem *_First, size_t _Count, _Elem 
#line 451 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Ch) 
#line 452 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 453 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return (_Elem *)::wmemset((__wchar_t *)_First, _Ch, _Count); 
#line 454 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 456 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static void __cdecl assign(_Elem &_Left, const _Elem &_Right) noexcept 
#line 457 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 458 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Left = _Right; 
#line 459 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 461 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static constexpr bool __cdecl eq(const _Elem &_Left, const _Elem &
#line 462 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Right) noexcept 
#line 463 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return _Left == _Right; 
#line 465 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 467 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static constexpr bool __cdecl lt(const _Elem &_Left, const _Elem &
#line 468 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Right) noexcept 
#line 469 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 470 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return _Left < _Right; 
#line 471 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 473 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static constexpr _Elem __cdecl to_char_type(const int_type &_Meta) noexcept 
#line 475 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 476 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return _Meta; 
#line 477 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 479 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static constexpr int_type __cdecl to_int_type(const _Elem &_Ch) noexcept 
#line 481 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 482 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return _Ch; 
#line 483 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 485 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static constexpr bool __cdecl eq_int_type(const int_type &_Left, const int_type &
#line 486 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Right) noexcept 
#line 487 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 488 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return _Left == _Right; 
#line 489 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 491 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static constexpr int_type __cdecl not_eof(const int_type &_Meta) noexcept 
#line 493 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 494 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return (_Meta != (eof())) ? _Meta : (!(eof())); 
#line 495 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 497 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static constexpr int_type __cdecl eof() noexcept 
#line 498 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 499 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return (wint_t)65535; 
#line 500 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 501 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
}; 
#line 505 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template<> struct char_traits< char>  { 
#line 507 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef char _Elem; 
#line 508 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef _Elem char_type; 
#line 509 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef int int_type; 
#line 510 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef streampos pos_type; 
#line 511 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef streamoff off_type; 
#line 512 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef _Mbstatet state_type; 
#line 514 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static int __cdecl compare(const _Elem *_First1, const _Elem *_First2, size_t 
#line 515 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Count) 
#line 516 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 517 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return (_Count == (0)) ? 0 : ::memcmp(_First1, _First2, _Count); 
#line 519 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 521 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static size_t __cdecl length(const _Elem *_First) 
#line 522 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 523 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return ((*_First) == 0) ? 0 : ::strlen(_First); 
#line 525 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 527 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2, size_t 
#line 528 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Count) 
#line 529 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 530 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return (_Count == (0)) ? _First1 : ((_Elem *)::memcpy(_First1, _First2, _Count)); 
#line 532 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 534 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static _Elem *__cdecl _Copy_s(_Elem *
#line 535 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_First1, size_t _Size_in_bytes, const _Elem *
#line 536 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_First2, size_t _Count) 
#line 537 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 538 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
if ((0) < _Count) { 
#line 539 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
::memcpy_s(_First1, _Size_in_bytes, _First2, _Count); }  
#line 540 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return _First1; 
#line 541 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 543 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static const _Elem *__cdecl find(const _Elem *_First, size_t _Count, const _Elem &
#line 544 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Ch) 
#line 545 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 546 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return (_Count == (0)) ? (const _Elem *)0 : ((const _Elem *)::memchr(_First, _Ch, _Count)); 
#line 548 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 550 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2, size_t 
#line 551 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Count) 
#line 552 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 553 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return (_Count == (0)) ? _First1 : ((_Elem *)::memmove(_First1, _First2, _Count)); 
#line 555 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 557 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static _Elem *__cdecl assign(_Elem *_First, size_t _Count, _Elem 
#line 558 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Ch) 
#line 559 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 560 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return (_Elem *)::memset(_First, _Ch, _Count); 
#line 561 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 563 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static void __cdecl assign(_Elem &_Left, const _Elem &_Right) noexcept 
#line 564 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 565 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Left = _Right; 
#line 566 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 568 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static constexpr bool __cdecl eq(const _Elem &_Left, const _Elem &
#line 569 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Right) noexcept 
#line 570 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 571 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return _Left == _Right; 
#line 572 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 574 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static constexpr bool __cdecl lt(const _Elem &_Left, const _Elem &
#line 575 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Right) noexcept 
#line 576 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 577 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return ((unsigned char)_Left) < ((unsigned char)_Right); 
#line 578 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 580 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static constexpr _Elem __cdecl to_char_type(const int_type &
#line 581 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Meta) noexcept 
#line 582 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 583 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return (_Elem)_Meta; 
#line 584 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 586 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static constexpr int_type __cdecl to_int_type(const _Elem &
#line 587 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Ch) noexcept 
#line 588 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 589 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return (unsigned char)_Ch; 
#line 590 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 592 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static constexpr bool __cdecl eq_int_type(const int_type &_Left, const int_type &
#line 593 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Right) noexcept 
#line 594 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 595 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return _Left == _Right; 
#line 596 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 598 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static constexpr int_type __cdecl not_eof(const int_type &
#line 599 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
_Meta) noexcept 
#line 600 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 601 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return (_Meta != eof()) ? _Meta : (!(eof())); 
#line 602 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 604 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
static constexpr int_type __cdecl eof() noexcept 
#line 605 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
{ 
#line 606 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
return -1; 
#line 607 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
} 
#line 608 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
}; 
#line 611 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template < class _Ty >
 class allocator;
#line 613 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
class ios_base; 
#line 614 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class basic_ios;
#line 617 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class istreambuf_iterator;
#line 620 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class ostreambuf_iterator;
#line 623 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class basic_streambuf;
#line 626 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class basic_istream;
#line 629 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class basic_ostream;
#line 632 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class basic_iostream;
#line 635 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template < class _Elem,
 class _Traits = char_traits < _Elem >,
 class _Alloc = allocator < _Elem > >
 class basic_stringbuf;
#line 639 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template < class _Elem,
 class _Traits = char_traits < _Elem >,
 class _Alloc = allocator < _Elem > >
 class basic_istringstream;
#line 643 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template < class _Elem,
 class _Traits = char_traits < _Elem >,
 class _Alloc = allocator < _Elem > >
 class basic_ostringstream;
#line 647 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template < class _Elem,
 class _Traits = char_traits < _Elem >,
 class _Alloc = allocator < _Elem > >
 class basic_stringstream;
#line 651 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class basic_filebuf;
#line 654 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class basic_ifstream;
#line 657 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class basic_ofstream;
#line 660 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class basic_fstream;
#line 665 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template < class _Elem,
 class _InIt >
 class num_get;
#line 668 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template < class _Elem,
 class _OutIt >
 class num_put;
#line 671 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
template< class _Elem> class collate; 
#line 676 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_ios< char, char_traits< char> >  ios; 
#line 677 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_streambuf< char, char_traits< char> >  streambuf; 
#line 678 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_istream< char, char_traits< char> >  istream; 
#line 679 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_ostream< char, char_traits< char> >  ostream; 
#line 680 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_iostream< char, char_traits< char> >  iostream; 
#line 682 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_stringbuf< char, char_traits< char> , allocator< char> >  stringbuf; 
#line 684 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_istringstream< char, char_traits< char> , allocator< char> >  istringstream; 
#line 686 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_ostringstream< char, char_traits< char> , allocator< char> >  ostringstream; 
#line 688 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_stringstream< char, char_traits< char> , allocator< char> >  stringstream; 
#line 689 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_filebuf< char, char_traits< char> >  filebuf; 
#line 690 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_ifstream< char, char_traits< char> >  ifstream; 
#line 691 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_ofstream< char, char_traits< char> >  ofstream; 
#line 692 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_fstream< char, char_traits< char> >  fstream; 
#line 695 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_ios< __wchar_t, char_traits< __wchar_t> >  wios; 
#line 697 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_streambuf< __wchar_t, char_traits< __wchar_t> >  wstreambuf; 
#line 698 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_istream< __wchar_t, char_traits< __wchar_t> >  wistream; 
#line 699 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_ostream< __wchar_t, char_traits< __wchar_t> >  wostream; 
#line 700 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_iostream< __wchar_t, char_traits< __wchar_t> >  wiostream; 
#line 702 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_stringbuf< __wchar_t, char_traits< __wchar_t> , allocator< __wchar_t> >  wstringbuf; 
#line 704 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_istringstream< __wchar_t, char_traits< __wchar_t> , allocator< __wchar_t> >  wistringstream; 
#line 706 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_ostringstream< __wchar_t, char_traits< __wchar_t> , allocator< __wchar_t> >  wostringstream; 
#line 708 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_stringstream< __wchar_t, char_traits< __wchar_t> , allocator< __wchar_t> >  wstringstream; 
#line 709 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_filebuf< __wchar_t, char_traits< __wchar_t> >  wfilebuf; 
#line 710 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_ifstream< __wchar_t, char_traits< __wchar_t> >  wifstream; 
#line 711 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_ofstream< __wchar_t, char_traits< __wchar_t> >  wofstream; 
#line 712 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef basic_fstream< __wchar_t, char_traits< __wchar_t> >  wfstream; 
#line 738 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef num_get< char, istreambuf_iterator< char, char_traits< char> > >  numget; 
#line 740 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef num_get< __wchar_t, istreambuf_iterator< __wchar_t, char_traits< __wchar_t> > >  wnumget; 
#line 742 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef num_put< char, ostreambuf_iterator< char, char_traits< char> > >  numput; 
#line 744 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef num_put< __wchar_t, ostreambuf_iterator< __wchar_t, char_traits< __wchar_t> > >  wnumput; 
#line 745 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef collate< char>  ncollate; 
#line 746 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
typedef collate< __wchar_t>  wcollate; 
#line 748 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
}
#line 751 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
#pragma warning(pop)
#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
#pragma warning(push,3)
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
#pragma warning(disable: 4180 4512)
#line 752 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
#pragma pack ( pop )
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
#pragma pack ( push, 8 )
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
namespace std { 
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _FwdIt1,
 class _FwdIt2 > inline
 void iter_swap ( _FwdIt1 _Left, _FwdIt2 _Right )
 {
 swap ( * _Left, * _Right );
 }
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty,
 size_t _Size,
 class > inline
 void swap ( _Ty ( & _Left ) [ _Size ], _Ty ( & _Right ) [ _Size ] )
  noexcept ( _Is_nothrow_swappable < _Ty > :: value )
 {
 if ( & _Left != & _Right )
  {
  _Ty * _First1 = _Left;
  _Ty * _Last1 = _First1 + _Size;
  _Ty * _First2 = _Right;
  for (; _First1 != _Last1; ++ _First1, ++ _First2 )
   :: std :: iter_swap ( _First1, _First2 );
  }
 }
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty,
 class > inline
 void swap ( _Ty & _Left, _Ty & _Right )
  noexcept ( is_nothrow_move_constructible < _Ty > :: value && is_nothrow_move_assignable < _Ty > :: value )

 {
 _Ty _Tmp = :: std :: move ( _Left );
 _Left = :: std :: move ( _Right );
 _Right = :: std :: move ( _Tmp );
 }
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty > inline
 void _Swap_adl ( _Ty & _Left, _Ty & _Right )
  noexcept ( _Is_nothrow_swappable < _Ty > :: value )
 {
 swap ( _Left, _Right );
 }
#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
struct piecewise_construct_t { 
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
}; 
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
constexpr piecewise_construct_t piecewise_construct{}; 
#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template< class ...> class tuple; 
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty1,
 class _Ty2 >
 struct pair
 {
 typedef pair < _Ty1, _Ty2 > _Myt;
 typedef _Ty1 first_type;
 typedef _Ty2 second_type;

 template < class _Uty1 = _Ty1,
  class _Uty2 = _Ty2,
  class = enable_if_t < is_default_constructible < _Uty1 > :: value
      && is_default_constructible < _Uty2 > :: value > >
  constexpr pair ( )
  : first ( ), second ( )
  {
  }

 template < class _Uty1 = _Ty1,
  class _Uty2 = _Ty2,
  class = enable_if_t < is_copy_constructible < _Uty1 > :: value
      && is_copy_constructible < _Uty2 > :: value >,
  enable_if_t < is_convertible < const _Uty1 &, _Uty1 > :: value
    && is_convertible < const _Uty2 &, _Uty2 > :: value, int > = 0 >
  constexpr pair ( const _Ty1 & _Val1, const _Ty2 & _Val2 )
  : first ( _Val1 ), second ( _Val2 )
  {
  }

 template < class _Uty1 = _Ty1,
  class _Uty2 = _Ty2,
  class = enable_if_t < is_copy_constructible < _Uty1 > :: value
      && is_copy_constructible < _Uty2 > :: value >,
  enable_if_t < ! is_convertible < const _Uty1 &, _Uty1 > :: value
    || ! is_convertible < const _Uty2 &, _Uty2 > :: value, int > = 0 >
  constexpr explicit pair ( const _Ty1 & _Val1, const _Ty2 & _Val2 )
  : first ( _Val1 ), second ( _Val2 )
  {
  }

 pair ( const pair & ) = default;
 pair ( pair && ) = default;

 template < class _Other1,
  class _Other2,
  class = enable_if_t < is_constructible < _Ty1, const _Other1 & > :: value
      && is_constructible < _Ty2, const _Other2 & > :: value >,
  enable_if_t < is_convertible < const _Other1 &, _Ty1 > :: value
    && is_convertible < const _Other2 &, _Ty2 > :: value, int > = 0 >
  constexpr pair ( const pair < _Other1, _Other2 > & _Right )
  : first ( _Right . first ), second ( _Right . second )
  {
  }

 template < class _Other1,
  class _Other2,
  class = enable_if_t < is_constructible < _Ty1, const _Other1 & > :: value
      && is_constructible < _Ty2, const _Other2 & > :: value >,
  enable_if_t < ! is_convertible < const _Other1 &, _Ty1 > :: value
    || ! is_convertible < const _Other2 &, _Ty2 > :: value, int > = 0 >
  constexpr explicit pair ( const pair < _Other1, _Other2 > & _Right )
  : first ( _Right . first ), second ( _Right . second )
  {
  }

 template < class _Other1,
  class _Other2 >
  _Myt & operator = ( const pair < _Other1, _Other2 > & _Right )
  {
  first = _Right . first;
  second = _Right . second;
  return ( * this );
  }

 template < class _Tuple1,
  class _Tuple2,
  size_t ... _Indexes1,
  size_t ... _Indexes2 > inline
  pair ( _Tuple1 & _Val1,
   _Tuple2 & _Val2,
   integer_sequence < size_t, _Indexes1 ... >,
   integer_sequence < size_t, _Indexes2 ... > );

 template < class ... _Types1,
  class ... _Types2 > inline
  pair ( piecewise_construct_t,
   tuple < _Types1 ... > _Val1,
   tuple < _Types2 ... > _Val2 );

 template < class _Other1,
  class _Other2,
  class = enable_if_t < is_constructible < _Ty1, _Other1 > :: value
      && is_constructible < _Ty2, _Other2 > :: value >,
  enable_if_t < is_convertible < _Other1, _Ty1 > :: value
    && is_convertible < _Other2, _Ty2 > :: value, int > = 0 >
  constexpr pair ( _Other1 && _Val1, _Other2 && _Val2 )
   noexcept ( ( is_nothrow_constructible < _Ty1, _Other1 > :: value && is_nothrow_constructible < _Ty2, _Other2 > :: value ) )

  : first ( :: std :: forward < _Other1 > ( _Val1 ) ),
    second ( :: std :: forward < _Other2 > ( _Val2 ) )
  {
  }

 template < class _Other1,
  class _Other2,
  class = enable_if_t < is_constructible < _Ty1, _Other1 > :: value
      && is_constructible < _Ty2, _Other2 > :: value >,
  enable_if_t < ! is_convertible < _Other1, _Ty1 > :: value
    || ! is_convertible < _Other2, _Ty2 > :: value, int > = 0 >
  constexpr explicit pair ( _Other1 && _Val1, _Other2 && _Val2 )
   noexcept ( ( is_nothrow_constructible < _Ty1, _Other1 > :: value && is_nothrow_constructible < _Ty2, _Other2 > :: value ) )

  : first ( :: std :: forward < _Other1 > ( _Val1 ) ),
    second ( :: std :: forward < _Other2 > ( _Val2 ) )
  {
  }

 template < class _Other1,
  class _Other2,
  class = enable_if_t < is_constructible < _Ty1, _Other1 > :: value
      && is_constructible < _Ty2, _Other2 > :: value >,
  enable_if_t < is_convertible < _Other1, _Ty1 > :: value
    && is_convertible < _Other2, _Ty2 > :: value, int > = 0 >
  constexpr pair ( pair < _Other1, _Other2 > && _Right )
   noexcept ( ( is_nothrow_constructible < _Ty1, _Other1 > :: value && is_nothrow_constructible < _Ty2, _Other2 > :: value ) )

  : first ( :: std :: forward < _Other1 > ( _Right . first ) ),
   second ( :: std :: forward < _Other2 > ( _Right . second ) )
  {
  }

 template < class _Other1,
  class _Other2,
  class = enable_if_t < is_constructible < _Ty1, _Other1 > :: value
      && is_constructible < _Ty2, _Other2 > :: value >,
  enable_if_t < ! is_convertible < _Other1, _Ty1 > :: value
    || ! is_convertible < _Other2, _Ty2 > :: value, int > = 0 >
  constexpr explicit pair ( pair < _Other1, _Other2 > && _Right )
   noexcept ( ( is_nothrow_constructible < _Ty1, _Other1 > :: value && is_nothrow_constructible < _Ty2, _Other2 > :: value ) )

  : first ( :: std :: forward < _Other1 > ( _Right . first ) ),
   second ( :: std :: forward < _Other2 > ( _Right . second ) )
  {
  }

 template < class _Other1,
  class _Other2 >
  _Myt & operator = ( pair < _Other1, _Other2 > && _Right )
  {
  first = :: std :: forward < _Other1 > ( _Right . first );
  second = :: std :: forward < _Other2 > ( _Right . second );
  return ( * this );
  }

 _Myt & operator = ( _Myt && _Right )
  noexcept ( ( is_nothrow_move_assignable < _Ty1 > :: value && is_nothrow_move_assignable < _Ty2 > :: value ) )

  {
  first = :: std :: forward < _Ty1 > ( _Right . first );
  second = :: std :: forward < _Ty2 > ( _Right . second );
  return ( * this );
  }

 _Myt & operator = ( const _Myt & _Right )
  {
  first = _Right . first;
  second = _Right . second;
  return ( * this );
  }

 _Ty1 first;
 _Ty2 second;

 void swap ( _Myt & _Right )
  noexcept ( _Is_nothrow_swappable < _Ty1 > :: value && _Is_nothrow_swappable < _Ty2 > :: value )

  {
  if ( this != & _Right )
   {
   _Swap_adl ( first, _Right . first );
   _Swap_adl ( second, _Right . second );
   }
  }
 };
#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty1,
 class _Ty2,
 class = enable_if_t < _Is_swappable < _Ty1 > :: value && _Is_swappable < _Ty2 > :: value > > inline
 void swap ( pair < _Ty1, _Ty2 > & _Left, pair < _Ty1, _Ty2 > & _Right )
  noexcept ( noexcept ( _Left . swap ( _Right ) ) )
 {
 _Left . swap ( _Right );
 }
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty1,
 class _Ty2 > inline
 constexpr bool operator == ( const pair < _Ty1, _Ty2 > & _Left,
  const pair < _Ty1, _Ty2 > & _Right )
 {
 return ( _Left . first == _Right . first && _Left . second == _Right . second );
 }
#line 276 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty1,
 class _Ty2 > inline
 constexpr bool operator != ( const pair < _Ty1, _Ty2 > & _Left,
  const pair < _Ty1, _Ty2 > & _Right )
 {
 return ( ! ( _Left == _Right ) );
 }
#line 284 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty1,
 class _Ty2 > inline
 constexpr bool operator < ( const pair < _Ty1, _Ty2 > & _Left,
  const pair < _Ty1, _Ty2 > & _Right )
 {
 return ( _Left . first < _Right . first ||
  ( ! ( _Right . first < _Left . first ) && _Left . second < _Right . second ) );
 }
#line 293 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty1,
 class _Ty2 > inline
 constexpr bool operator > ( const pair < _Ty1, _Ty2 > & _Left,
  const pair < _Ty1, _Ty2 > & _Right )
 {
 return ( _Right < _Left );
 }
#line 301 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty1,
 class _Ty2 > inline
 constexpr bool operator <= ( const pair < _Ty1, _Ty2 > & _Left,
  const pair < _Ty1, _Ty2 > & _Right )
 {
 return ( ! ( _Right < _Left ) );
 }
#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty1,
 class _Ty2 > inline
 constexpr bool operator >= ( const pair < _Ty1, _Ty2 > & _Left,
  const pair < _Ty1, _Ty2 > & _Right )
 {
 return ( ! ( _Left < _Right ) );
 }
#line 319 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty1,
 class _Ty2 > inline
 constexpr pair < typename _Unrefwrap < _Ty1 > :: type,
  typename _Unrefwrap < _Ty2 > :: type >
  make_pair ( _Ty1 && _Val1, _Ty2 && _Val2 )
 {
 typedef pair < typename _Unrefwrap < _Ty1 > :: type,
  typename _Unrefwrap < _Ty2 > :: type > _Mypair;
 return ( _Mypair ( :: std :: forward < _Ty1 > ( _Val1 ),
  :: std :: forward < _Ty2 > ( _Val2 ) ) );
 }
#line 332 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
namespace rel_ops { 
#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty > inline
 bool operator != ( const _Ty & _Left, const _Ty & _Right )
 {
 return ( ! ( _Left == _Right ) );
 }
#line 340 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty > inline
 bool operator > ( const _Ty & _Left, const _Ty & _Right )
 {
 return ( _Right < _Left );
 }
#line 346 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty > inline
 bool operator <= ( const _Ty & _Left, const _Ty & _Right )
 {
 return ( ! ( _Right < _Left ) );
 }
#line 352 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty > inline
 bool operator >= ( const _Ty & _Left, const _Ty & _Right )
 {
 return ( ! ( _Left < _Right ) );
 }
#line 357 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
}
#line 358 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
}
#line 360 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
namespace std { 
#line 361 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template< class _Ty, size_t 
#line 362 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
_Size> class array; 
#line 366 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template< class _Tuple> struct tuple_size; 
#line 369 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template< class _Ty, size_t 
#line 370 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
_Size> 
#line 371 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
struct tuple_size< array< _Ty, _Size> >  : public integral_constant< unsigned __int64, _Size>  { 
#line 374 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
}; 
#line 376 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template< class _Ty1, class 
#line 377 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
_Ty2> 
#line 378 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
struct tuple_size< pair< _Ty1, _Ty2> >  : public integral_constant< unsigned __int64, 2Ui64>  { 
#line 381 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
}; 
#line 383 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template< class ..._Types> 
#line 384 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
struct tuple_size< tuple< _Types...> >  : public integral_constant< unsigned __int64, sizeof...(_Types)>  { 
#line 387 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
}; 
#line 390 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template< class _Tuple> 
#line 391 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
struct tuple_size< const _Tuple>  : public tuple_size< _Tuple>  { 
#line 394 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
}; 
#line 396 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template< class _Tuple> 
#line 397 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
struct tuple_size< volatile _Tuple>  : public tuple_size< _Tuple>  { 
#line 400 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
}; 
#line 402 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template< class _Tuple> 
#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
struct tuple_size< const volatile _Tuple>  : public tuple_size< _Tuple>  { 
#line 406 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
}; 
#line 409 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template< class _Ty> constexpr size_t 
#line 410 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
tuple_size_v = (tuple_size< _Ty> ::value); 
#line 414 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template< size_t _Index, class 
#line 415 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
_Tuple> struct tuple_element; 
#line 418 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template< size_t _Idx, class 
#line 419 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
_Ty, size_t 
#line 420 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
_Size> 
#line 421 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
struct tuple_element< _Idx, array< _Ty, _Size> >  { 
#line 423 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
static_assert((_Idx < _Size), "array index out of bounds");
#line 425 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
typedef _Ty type; 
#line 426 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
}; 
#line 428 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template< class _Ty1, class 
#line 429 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
_Ty2> 
#line 430 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
struct tuple_element< 0, pair< _Ty1, _Ty2> >  { 
#line 432 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
typedef _Ty1 type; 
#line 433 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
}; 
#line 435 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template< class _Ty1, class 
#line 436 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
_Ty2> 
#line 437 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
struct tuple_element< 1, pair< _Ty1, _Ty2> >  { 
#line 439 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
typedef _Ty2 type; 
#line 440 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
}; 
#line 442 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template< size_t _Index> 
#line 443 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
struct tuple_element< _Index, tuple< > >  { 
#line 445 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
static_assert((_Always_false< integral_constant< unsigned __int64, _Index> > ::value), "tuple index out of bounds");
#line 447 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
}; 
#line 449 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template< class _This, class ...
#line 450 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
_Rest> 
#line 451 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
struct tuple_element< 0, tuple< _This, _Rest...> >  { 
#line 453 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
typedef _This type; 
#line 454 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
typedef tuple< _This, _Rest...>  _Ttype; 
#line 455 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
}; 
#line 457 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template< size_t _Index, class 
#line 458 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
_This, class ...
#line 459 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
_Rest> 
#line 460 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
struct tuple_element< _Index, tuple< _This, _Rest...> >  : public tuple_element< _Index - (1), tuple< _Rest...> >  { 
#line 463 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
}; 
#line 466 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template< size_t _Index, class 
#line 467 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
_Tuple> 
#line 468 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
struct tuple_element< _Index, const _Tuple>  : public tuple_element< _Index, _Tuple>  { 
#line 471 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
typedef ::std::tuple_element< _Index, _Tuple>  _Mybase; 
#line 472 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
typedef typename add_const< typename ::std::tuple_element< _Index, _Tuple> ::type> ::type type; 
#line 473 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
}; 
#line 475 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template< size_t _Index, class 
#line 476 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
_Tuple> 
#line 477 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
struct tuple_element< _Index, volatile _Tuple>  : public tuple_element< _Index, _Tuple>  { 
#line 480 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
typedef ::std::tuple_element< _Index, _Tuple>  _Mybase; 
#line 481 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
typedef typename add_volatile< typename ::std::tuple_element< _Index, _Tuple> ::type> ::type type; 
#line 482 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
}; 
#line 484 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template< size_t _Index, class 
#line 485 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
_Tuple> 
#line 486 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
struct tuple_element< _Index, const volatile _Tuple>  : public tuple_element< _Index, _Tuple>  { 
#line 489 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
typedef ::std::tuple_element< _Index, _Tuple>  _Mybase; 
#line 490 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
typedef typename add_cv< typename ::std::tuple_element< _Index, _Tuple> ::type> ::type type; 
#line 491 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
}; 
#line 493 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template< size_t _Index, class 
#line 494 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
_Tuple> using tuple_element_t = typename tuple_element< _Index, _Tuple> ::type; 
#line 498 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ret,
 class _Pair > inline
 constexpr _Ret _Pair_get ( _Pair & _Pr,
  integral_constant < size_t, 0 > ) noexcept
 {
 return ( _Pr . first );
 }
#line 506 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ret,
 class _Pair > inline
 constexpr _Ret _Pair_get ( _Pair & _Pr,
  integral_constant < size_t, 1 > ) noexcept
 {
 return ( _Pr . second );
 }
#line 514 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < size_t _Idx,
 class _Ty1,
 class _Ty2 > inline
 constexpr typename tuple_element < _Idx, pair < _Ty1, _Ty2 > > :: type &
  get ( pair < _Ty1, _Ty2 > & _Pr ) noexcept
 {
 typedef typename tuple_element < _Idx, pair < _Ty1, _Ty2 > > :: type & _Rtype;
 return ( _Pair_get < _Rtype > ( _Pr, integral_constant < size_t, _Idx > ( ) ) );
 }
#line 524 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty1,
 class _Ty2 > inline
 constexpr _Ty1 & get ( pair < _Ty1, _Ty2 > & _Pr ) noexcept
 {
 return ( :: std :: get < 0 > ( _Pr ) );
 }
#line 531 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty2,
 class _Ty1 > inline
 constexpr _Ty2 & get ( pair < _Ty1, _Ty2 > & _Pr ) noexcept
 {
 return ( :: std :: get < 1 > ( _Pr ) );
 }
#line 538 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < size_t _Idx,
 class _Ty1,
 class _Ty2 > inline
 constexpr const typename tuple_element < _Idx, pair < _Ty1, _Ty2 > > :: type &
  get ( const pair < _Ty1, _Ty2 > & _Pr ) noexcept
 {
 typedef const typename tuple_element < _Idx, pair < _Ty1, _Ty2 > > :: type &
  _Ctype;
 return ( _Pair_get < _Ctype > ( _Pr, integral_constant < size_t, _Idx > ( ) ) );
 }
#line 549 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty1,
 class _Ty2 > inline
 constexpr const _Ty1 & get ( const pair < _Ty1, _Ty2 > & _Pr ) noexcept
 {
 return ( :: std :: get < 0 > ( _Pr ) );
 }
#line 556 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty2,
 class _Ty1 > inline
 constexpr const _Ty2 & get ( const pair < _Ty1, _Ty2 > & _Pr ) noexcept
 {
 return ( :: std :: get < 1 > ( _Pr ) );
 }
#line 563 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < size_t _Idx,
 class _Ty1,
 class _Ty2 > inline
 constexpr typename tuple_element < _Idx, pair < _Ty1, _Ty2 > > :: type &&
  get ( pair < _Ty1, _Ty2 > && _Pr ) noexcept
 {
 typedef typename tuple_element < _Idx, pair < _Ty1, _Ty2 > > :: type && _RRtype;
 return ( :: std :: forward < _RRtype > ( :: std :: get < _Idx > ( _Pr ) ) );
 }
#line 573 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty1,
 class _Ty2 > inline
 constexpr _Ty1 && get ( pair < _Ty1, _Ty2 > && _Pr ) noexcept
 {
 return ( :: std :: get < 0 > ( :: std :: move ( _Pr ) ) );
 }
#line 580 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty2,
 class _Ty1 > inline
 constexpr _Ty2 && get ( pair < _Ty1, _Ty2 > && _Pr ) noexcept
 {
 return ( :: std :: get < 1 > ( :: std :: move ( _Pr ) ) );
 }
#line 588 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty,
 class _Other = _Ty > inline
 _Ty exchange ( _Ty & _Val, _Other && _New_val )
 {
 _Ty _Old_val = :: std :: move ( _Val );
 _Val = :: std :: forward < _Other > ( _New_val );
 return ( _Old_val );
 }
#line 598 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty > inline
 constexpr add_const_t < _Ty > & as_const ( _Ty & _Val ) noexcept
 {
 return ( _Val );
 }
#line 604 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
template < class _Ty >
 void as_const ( const _Ty && ) = delete;
#line 606 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
}
#line 609 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
namespace std { 
#line 610 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
namespace tr1 { 
#line 611 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
using std::get;
#line 612 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
using std::tuple_element;
#line 613 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
using std::tuple_size;
#line 614 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
}
#line 615 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
}
#line 619 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
#pragma warning(pop)
#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
#pragma warning(push,3)
#line 620 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
#pragma pack ( pop )
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
#pragma pack ( push, 8 )
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
namespace std { 
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Container_proxy; 
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Container_base12; 
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Iterator_base12; 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Container_base0 { 
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
void _Orphan_all() 
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
void _Swap_all(_Container_base0 &) 
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Iterator_base0 { 
#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
void _Adopt(const void *) 
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
const _Container_base0 *_Getcont() const 
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
return 0; 
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Container_proxy { 
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Container_proxy() : _Mycont((0)), _Myfirstiter((0)) 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
const _Container_base12 *_Mycont; 
#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Iterator_base12 *_Myfirstiter; 
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Container_base12 { 
#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Container_base12() : _Myproxy((0)) 
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Container_base12(const _Container_base12 &) : _Myproxy((0)) 
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Container_base12 &operator=(const _Container_base12 &) 
#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
return *this; 
#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
~_Container_base12() noexcept 
#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
this->_Orphan_all(); 
#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Iterator_base12 **_Getpfirst() const 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
return ((_Myproxy) == (0)) ? 0 : (&((_Myproxy)->_Myfirstiter)); 
#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
inline void _Orphan_all(); 
#line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
inline void _Swap_all(_Container_base12 &); 
#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Container_proxy *_Myproxy; 
#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Iterator_base12 { 
#line 112 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Iterator_base12() : _Myproxy((0)), _Mynextiter((0)) 
#line 114 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Iterator_base12(const _Iterator_base12 &_Right) : _Myproxy((0)), _Mynextiter((0)) 
#line 119 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 120 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
((*this) = _Right); 
#line 121 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Iterator_base12 &operator=(const _Iterator_base12 &_Right) 
#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 125 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
if ((_Myproxy) == (_Right._Myproxy)) { 
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
; } else { 
#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
if ((_Right._Myproxy) != (0)) { 
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
this->_Adopt((_Right._Myproxy)->_Mycont); } else 
#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}  }  
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
return *this; 
#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
~_Iterator_base12() noexcept 
#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 146 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 148 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
void _Adopt(const _Container_base12 *_Parent) 
#line 149 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 150 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
if (_Parent == (0)) 
#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 156 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} else 
#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 159 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Container_proxy *_Parent_proxy = _Parent->_Myproxy; 
#line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
(_Myproxy) = _Parent_proxy; 
#line 174 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}  
#line 175 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
void _Clrcont() 
#line 178 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 179 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
(_Myproxy) = (0); 
#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
const _Container_base12 *_Getcont() const 
#line 183 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
return ((_Myproxy) == (0)) ? 0 : ((_Myproxy)->_Mycont); 
#line 185 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Iterator_base12 **_Getpnext() 
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 189 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
return &(_Mynextiter); 
#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
void _Orphan_me() 
#line 193 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 209 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Container_proxy *_Myproxy; 
#line 210 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Iterator_base12 *_Mynextiter; 
#line 211 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 214 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
inline void _Container_base12::_Orphan_all() 
#line 215 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 227 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 229 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
inline void _Container_base12::_Swap_all(_Container_base12 &_Right) 
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Container_proxy *_Temp = _Myproxy; 
#line 236 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
(_Myproxy) = (_Right._Myproxy); 
#line 237 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
(_Right._Myproxy) = _Temp; 
#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
if ((_Myproxy) != (0)) { 
#line 240 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
((_Myproxy)->_Mycont) = ((_Container_base12 *)this); }  
#line 241 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
if ((_Right._Myproxy) != (0)) { 
#line 242 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
((_Right._Myproxy)->_Mycont) = ((_Container_base12 *)(&_Right)); }  
#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 246 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef _Container_base0 _Container_base; 
#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef _Iterator_base0 _Iterator_base; 
#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Zero_then_variadic_args_t { 
#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _One_then_variadic_args_t { 
#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty1,
 class _Ty2,
 bool = is_empty < _Ty1 > :: value && ! is_final < _Ty1 > :: value >
 class _Compressed_pair final
  : private _Ty1

 {
private :
 _Ty2 _Myval2;

 typedef _Ty1 _Mybase;

public :
 template < class ... _Other2 >
  constexpr explicit _Compressed_pair ( _Zero_then_variadic_args_t,
   _Other2 && ... _Val2 )
  : _Ty1 ( ), _Myval2 ( :: std :: forward < _Other2 > ( _Val2 ) ... )
  {
  }

 template < class _Other1,
  class ... _Other2 >
  _Compressed_pair ( _One_then_variadic_args_t,
   _Other1 && _Val1, _Other2 && ... _Val2 )
  : _Ty1 ( :: std :: forward < _Other1 > ( _Val1 ) ),
   _Myval2 ( :: std :: forward < _Other2 > ( _Val2 ) ... )
  {
  }


 _Ty1 & _Get_first ( ) noexcept
  {
  return ( * this );
  }

 const _Ty1 & _Get_first ( ) const noexcept
  {
  return ( * this );
  }

 volatile _Ty1 & _Get_first ( ) volatile noexcept
  {
  return ( * this );
  }

 const volatile _Ty1 & _Get_first ( ) const volatile noexcept
  {
  return ( * this );
  }

 _Ty2 & _Get_second ( ) noexcept
  {
  return ( _Myval2 );
  }

 const _Ty2 & _Get_second ( ) const noexcept
  {
  return ( _Myval2 );
  }

 volatile _Ty2 & _Get_second ( ) volatile noexcept
  {
  return ( _Myval2 );
  }

 const volatile _Ty2 & _Get_second ( ) const volatile noexcept
  {
  return ( _Myval2 );
  }
 };
#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty1,
 class _Ty2 >
 class _Compressed_pair < _Ty1, _Ty2, false > final

 {
private :
 _Ty1 _Myval1;
 _Ty2 _Myval2;

public :
 template < class ... _Other2 >
  constexpr explicit _Compressed_pair ( _Zero_then_variadic_args_t,
   _Other2 && ... _Val2 )
  : _Myval1 ( ), _Myval2 ( :: std :: forward < _Other2 > ( _Val2 ) ... )
  {
  }

 template < class _Other1,
  class ... _Other2 >
  _Compressed_pair ( _One_then_variadic_args_t,
   _Other1 && _Val1, _Other2 && ... _Val2 )
  : _Myval1 ( :: std :: forward < _Other1 > ( _Val1 ) ),
   _Myval2 ( :: std :: forward < _Other2 > ( _Val2 ) ... )
  {
  }


 _Ty1 & _Get_first ( ) noexcept
  {
  return ( _Myval1 );
  }

 const _Ty1 & _Get_first ( ) const noexcept
  {
  return ( _Myval1 );
  }

 volatile _Ty1 & _Get_first ( ) volatile noexcept
  {
  return ( _Myval1 );
  }

 const volatile _Ty1 & _Get_first ( ) const volatile noexcept
  {
  return ( _Myval1 );
  }

 _Ty2 & _Get_second ( ) noexcept
  {
  return ( _Myval2 );
  }

 const _Ty2 & _Get_second ( ) const noexcept
  {
  return ( _Myval2 );
  }

 volatile _Ty2 & _Get_second ( ) volatile noexcept
  {
  return ( _Myval2 );
  }

 const volatile _Ty2 & _Get_second ( ) const volatile noexcept
  {
  return ( _Myval2 );
  }
 };
#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Ty, class 
#line 404 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
 = void> 
#line 405 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Is_checked_helper : public false_type { 
#line 408 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 410 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Ty> 
#line 411 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Is_checked_helper< _Ty, void_t< typename _Ty::_Unchecked_type> >  : public true_type { 
#line 415 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 418 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Iter > inline
 typename _Is_checked_helper < _Iter > :: type _Is_checked ( _Iter )
 {
 return { };
 }
#line 425 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Iter > inline
 _Iter _Unchecked ( _Iter _Src )
 {
 return ( _Src );
 }
#line 437 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Iter > inline
 decltype ( _Unchecked ( :: std :: declval < _Iter > ( ) ) ) _Unchecked_idl0 ( _Iter _Src )
 {
 return ( _Unchecked ( _Src ) );
 }
#line 454 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Iter,
 class _UIter > inline
 _Iter & _Rechecked ( _Iter & _Dest, _UIter _Src )
 {
 _Dest = _Src;
 return ( _Dest );
 }
#line 506 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct input_iterator_tag { 
#line 508 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 510 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Mutable_iterator_tag { 
#line 512 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 514 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct output_iterator_tag : public _Mutable_iterator_tag { 
#line 517 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 519 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct forward_iterator_tag : public input_iterator_tag, public _Mutable_iterator_tag { 
#line 522 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 524 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct bidirectional_iterator_tag : public forward_iterator_tag { 
#line 527 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 529 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct random_access_iterator_tag : public bidirectional_iterator_tag { 
#line 532 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 535 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _General_ptr_iterator_tag { 
#line 537 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 539 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Trivially_copyable_ptr_iterator_tag : public _General_ptr_iterator_tag { 
#line 542 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 544 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Really_trivial_ptr_iterator_tag : public _Trivially_copyable_ptr_iterator_tag { 
#line 547 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 550 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Any_tag { 
#line 552 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
constexpr _Any_tag() noexcept = default;
#line 553 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty >
  constexpr _Any_tag ( _Ty && ) noexcept { }
#line 555 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 558 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Category, class 
#line 559 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Ty, class 
#line 560 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Diff = ptrdiff_t, class 
#line 561 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Pointer = _Ty *, class 
#line 562 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Reference = _Ty &> 
#line 563 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct iterator { 
#line 565 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef _Category iterator_category; 
#line 566 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef _Ty value_type; 
#line 567 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef _Diff difference_type; 
#line 569 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef _Pointer pointer; 
#line 570 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef _Reference reference; 
#line 571 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 573 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Category, class 
#line 574 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Ty, class 
#line 575 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Diff, class 
#line 576 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Pointer, class 
#line 577 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Reference, class 
#line 578 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Base> 
#line 579 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Iterator012 : public _Base { 
#line 582 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef _Category iterator_category; 
#line 583 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef _Ty value_type; 
#line 584 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef _Diff difference_type; 
#line 586 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef _Pointer pointer; 
#line 587 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef _Reference reference; 
#line 588 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 591 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef iterator< output_iterator_tag, void, void, void, void>  _Outit; 
#line 594 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class , class 
#line 595 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
 = void> 
#line 596 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Iterator_traits_base { 
#line 598 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 600 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Iter> 
#line 601 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Iterator_traits_base< _Iter, void_t< typename _Iter::iterator_category, typename _Iter::value_type, typename _Iter::difference_type, typename _Iter::pointer, typename _Iter::reference> >  { 
#line 609 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef typename _Iter::iterator_category iterator_category; 
#line 610 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef typename _Iter::value_type value_type; 
#line 611 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef typename _Iter::difference_type difference_type; 
#line 613 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef typename _Iter::pointer pointer; 
#line 614 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef typename _Iter::reference reference; 
#line 615 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 617 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Iter> 
#line 618 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct iterator_traits : public _Iterator_traits_base< _Iter>  { 
#line 621 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 623 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Ty> 
#line 624 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct iterator_traits< _Ty *>  { 
#line 626 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef random_access_iterator_tag iterator_category; 
#line 627 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef _Ty value_type; 
#line 628 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef ptrdiff_t difference_type; 
#line 630 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef _Ty *pointer; 
#line 631 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef _Ty &reference; 
#line 632 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 634 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Ty> 
#line 635 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct iterator_traits< const _Ty *>  { 
#line 637 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef random_access_iterator_tag iterator_category; 
#line 638 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef _Ty value_type; 
#line 639 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef ptrdiff_t difference_type; 
#line 641 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef const _Ty *pointer; 
#line 642 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef const _Ty &reference; 
#line 643 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 646 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Iter> using _Iter_value_t = typename iterator_traits< _Iter> ::value_type; 
#line 650 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Iter> using _Iter_diff_t = typename iterator_traits< _Iter> ::difference_type; 
#line 654 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Iter> using _Iter_cat_t = typename iterator_traits< _Iter> ::iterator_category; 
#line 658 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Ty, class 
#line 659 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
 = void> 
#line 660 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Is_iterator : public false_type { 
#line 663 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 665 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Ty> 
#line 666 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Is_iterator< _Ty, void_t< typename iterator_traits< _Ty> ::iterator_category> >  : public true_type { 
#line 671 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 676 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Iter,
 class _Diff > inline
 auto _Unchecked_n ( _Iter _Src, _Diff )
 {
 return ( _Unchecked ( _Src ) );
 }
#line 712 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Ty1, class 
#line 713 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Ty2> 
#line 714 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Is_same_size : public bool_constant< sizeof(_Ty1) == sizeof(_Ty2)>  { 
#line 717 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 720 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Elem, bool 
#line 721 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Is_enum = is_enum< _Elem> ::value> 
#line 722 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Unwrap_enum { 
#line 724 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef underlying_type_t< _Elem>  type; 
#line 725 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 727 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Elem> 
#line 728 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Unwrap_enum< _Elem, false>  { 
#line 730 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef _Elem type; 
#line 731 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 734 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Ty1, class 
#line 735 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Ty2> 
#line 736 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Both_or_neither_bool : public bool_constant< is_same< bool, _Ty1> ::value == is_same< bool, _Ty2> ::value>  { 
#line 739 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 742 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Source, class 
#line 743 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Dest> 
#line 744 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Ptr_cat_helper { 
#line 746 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef typename _Unwrap_enum< _Source> ::type _USource; 
#line 747 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef typename _Unwrap_enum< _Dest> ::type _UDest; 
#line 759 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef conditional_t< conjunction< _Is_same_size< typename _Unwrap_enum< _Source> ::type, typename _Unwrap_enum< _Dest> ::type> , is_integral< typename _Unwrap_enum< _Source> ::type> , is_integral< typename _Unwrap_enum< _Dest> ::type> , _Both_or_neither_bool< typename _Unwrap_enum< _Source> ::type, typename _Unwrap_enum< _Dest> ::type> , negation< is_volatile< _Source> > , negation< is_volatile< _Dest> > > ::value, _Really_trivial_ptr_iterator_tag, _General_ptr_iterator_tag>  type; 
#line 760 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 762 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Elem> 
#line 763 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Ptr_cat_helper< _Elem, _Elem>  { 
#line 770 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef conditional_t< is_trivially_copyable< _Elem> ::value, conditional_t< is_trivial< _Elem> ::value, _Really_trivial_ptr_iterator_tag, _Trivially_copyable_ptr_iterator_tag> , _General_ptr_iterator_tag>  type; 
#line 771 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 773 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Anything> 
#line 774 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Ptr_cat_helper< _Anything *, const _Anything *>  { 
#line 776 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef _Really_trivial_ptr_iterator_tag type; 
#line 777 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 779 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Source,
 class _Dest > inline
 _General_ptr_iterator_tag _Ptr_copy_cat ( const _Source &, const _Dest & )
 {
 return { };
 }
#line 786 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Source,
 class _Dest > inline
 conditional_t < is_trivially_assignable < _Dest &, _Source & > :: value,
  typename _Ptr_cat_helper < remove_const_t < _Source >, _Dest > :: type,
  _General_ptr_iterator_tag >
  _Ptr_copy_cat ( _Source * const &, _Dest * const & )
 {
 return { };
 }
#line 796 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Source,
 class _Dest > inline
 _General_ptr_iterator_tag _Ptr_move_cat ( const _Source &, const _Dest & )
 {
 return { };
 }
#line 803 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Source,
 class _Dest > inline
 conditional_t < is_trivially_assignable < _Dest &, _Source > :: value,
  typename _Ptr_cat_helper < remove_const_t < _Source >, _Dest > :: type,
  _General_ptr_iterator_tag >
  _Ptr_move_cat ( _Source * const &, _Dest * const & )
 {
 return { };
 }
#line 1057 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _Diff > inline
 void _Advance1 ( _InIt & _Where, _Diff _Off, input_iterator_tag )
 {





 for (; 0 < _Off; -- _Off )
  ++ _Where;
 }
#line 1070 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _BidIt,
 class _Diff > inline
 void _Advance1 ( _BidIt & _Where, _Diff _Off, bidirectional_iterator_tag )
 {
 for (; 0 < _Off; -- _Off )
  ++ _Where;
 for (; _Off < 0; ++ _Off )
  -- _Where;
 }
#line 1080 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt,
 class _Diff > inline
 void _Advance1 ( _RanIt & _Where, _Diff _Off, random_access_iterator_tag )
 {
 _Where += _Off;
 }
#line 1087 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _Diff > inline
 void advance ( _InIt & _Where, _Diff _Off )
 {

 _Advance1 ( _Where, _Off, _Iter_cat_t < remove_const_t < _InIt >> ( ) );
 }
#line 1096 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt > inline
 _Iter_diff_t < _InIt >
  _Distance1 ( _InIt _First, _InIt _Last, input_iterator_tag )
 {
 _Iter_diff_t < _InIt > _Off = 0;
 for (; _First != _Last; ++ _First )
  ++ _Off;

 return ( _Off );
 }
#line 1107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt > inline
 _Iter_diff_t < _RanIt >
  _Distance1 ( _RanIt _First, _RanIt _Last, random_access_iterator_tag )
 {








 return ( _Last - _First );
 }
#line 1122 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt > inline
 _Iter_diff_t < _InIt >
  distance ( _InIt _First, _InIt _Last )
 {
 return ( _Distance1 ( _First, _Last, _Iter_cat_t < _InIt > ( ) ) );
 }
#line 1130 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt > inline
 _InIt next ( _InIt _First, _Iter_diff_t < _InIt > _Off = 1 )
 {
 static_assert ( is_base_of < input_iterator_tag,
  typename iterator_traits < _InIt > :: iterator_category > :: value,
  "next requires input iterator" );

 :: std :: advance ( _First, _Off );
 return ( _First );
 }
#line 1142 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _BidIt > inline
 _BidIt prev ( _BidIt _First, _Iter_diff_t < _BidIt > _Off = 1 )
 {
 static_assert ( is_base_of < bidirectional_iterator_tag,
  typename iterator_traits < _BidIt > :: iterator_category > :: value,
  "prev requires bidirectional iterator" );

 :: std :: advance ( _First, - _Off );
 return ( _First );
 }
#line 1154 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty >
 struct pointer_traits;
#line 1157 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt >
 class reverse_iterator
  : public iterator <
   typename iterator_traits < _RanIt > :: iterator_category,
   typename iterator_traits < _RanIt > :: value_type,
   typename iterator_traits < _RanIt > :: difference_type,
   typename iterator_traits < _RanIt > :: pointer,
   typename iterator_traits < _RanIt > :: reference >
 {
 typedef reverse_iterator < _RanIt > _Myt;

public :
 typedef typename iterator_traits < _RanIt > :: difference_type difference_type;
 typedef typename iterator_traits < _RanIt > :: pointer pointer;
 typedef typename iterator_traits < _RanIt > :: reference reference;
 typedef _RanIt iterator_type;

 reverse_iterator ( )
  : current ( )
  {
  }

 explicit reverse_iterator ( _RanIt _Right )
  : current ( _Right )
  {
  }

 template < class _Other >
  reverse_iterator ( const reverse_iterator < _Other > & _Right )
  : current ( _Right . base ( ) )
  {
  }

 template < class _Other >
  _Myt & operator = ( const reverse_iterator < _Other > & _Right )
  {
  current = _Right . base ( );
  return ( * this );
  }

 _RanIt base ( ) const
  {
  return ( current );
  }

 reference operator * ( ) const
  {
  _RanIt _Tmp = current;
  return ( * -- _Tmp );
  }

 pointer operator -> ( ) const
  {
  return ( pointer_traits < pointer > :: pointer_to ( * * this ) );
  }

 _Myt & operator ++ ( )
  {
  -- current;
  return ( * this );
  }

 _Myt operator ++ ( int )
  {
  _Myt _Tmp = * this;
  -- current;
  return ( _Tmp );
  }

 _Myt & operator -- ( )
  {
  ++ current;
  return ( * this );
  }

 _Myt operator -- ( int )
  {
  _Myt _Tmp = * this;
  ++ current;
  return ( _Tmp );
  }



 _Myt & operator += ( difference_type _Off )
  {
  current -= _Off;
  return ( * this );
  }

 _Myt operator + ( difference_type _Off ) const
  {
  return ( _Myt ( current - _Off ) );
  }

 _Myt & operator -= ( difference_type _Off )
  {
  current += _Off;
  return ( * this );
  }

 _Myt operator - ( difference_type _Off ) const
  {
  return ( _Myt ( current + _Off ) );
  }

 reference operator [ ] ( difference_type _Off ) const
  {
  return ( * ( * this + _Off ) );
  }

protected :
 _RanIt current;
 };
#line 1272 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _RanIt> 
#line 1273 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Is_checked_helper< reverse_iterator< _RanIt> , void>  : public _Is_checked_helper< _RanIt>  { 
#line 1276 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 1279 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt > inline
 reverse_iterator < _RanIt > operator + (
  typename reverse_iterator < _RanIt > :: difference_type _Off,
  const reverse_iterator < _RanIt > & _Right )
 {
 return ( _Right + _Off );
 }
#line 1287 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt1,
 class _RanIt2 >
 auto inline operator - ( const reverse_iterator < _RanIt1 > & _Left,
  const reverse_iterator < _RanIt2 > & _Right )
   -> decltype ( _Right . base ( ) - _Left . base ( ) )
 {
 return ( _Right . base ( ) - _Left . base ( ) );
 }
#line 1296 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt1,
 class _RanIt2 > inline
 bool operator == ( const reverse_iterator < _RanIt1 > & _Left,
  const reverse_iterator < _RanIt2 > & _Right )
 {
 return ( _Left . base ( ) == _Right . base ( ) );
 }
#line 1304 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt1,
 class _RanIt2 > inline
 bool operator != ( const reverse_iterator < _RanIt1 > & _Left,
  const reverse_iterator < _RanIt2 > & _Right )
 {
 return ( ! ( _Left == _Right ) );
 }
#line 1312 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt1,
 class _RanIt2 > inline
 bool operator < ( const reverse_iterator < _RanIt1 > & _Left,
  const reverse_iterator < _RanIt2 > & _Right )
 {
 return ( _Right . base ( ) < _Left . base ( ) );
 }
#line 1320 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt1,
 class _RanIt2 > inline
 bool operator > ( const reverse_iterator < _RanIt1 > & _Left,
  const reverse_iterator < _RanIt2 > & _Right )
 {
 return ( _Right < _Left );
 }
#line 1328 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt1,
 class _RanIt2 > inline
 bool operator <= ( const reverse_iterator < _RanIt1 > & _Left,
  const reverse_iterator < _RanIt2 > & _Right )
 {
 return ( ! ( _Right < _Left ) );
 }
#line 1336 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt1,
 class _RanIt2 > inline
 bool operator >= ( const reverse_iterator < _RanIt1 > & _Left,
  const reverse_iterator < _RanIt2 > & _Right )
 {
 return ( ! ( _Left < _Right ) );
 }
#line 1345 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt > inline
 reverse_iterator < _RanIt > make_reverse_iterator ( _RanIt _Iter )
 {
 return ( reverse_iterator < _RanIt > ( _Iter ) );
 }
#line 1353 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Container >
 auto inline begin ( _Container & _Cont ) -> decltype ( _Cont . begin ( ) )
 {
 return ( _Cont . begin ( ) );
 }
#line 1359 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Container >
 auto inline begin ( const _Container & _Cont ) -> decltype ( _Cont . begin ( ) )
 {
 return ( _Cont . begin ( ) );
 }
#line 1365 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Container >
 auto inline end ( _Container & _Cont ) -> decltype ( _Cont . end ( ) )
 {
 return ( _Cont . end ( ) );
 }
#line 1371 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Container >
 auto inline end ( const _Container & _Cont ) -> decltype ( _Cont . end ( ) )
 {
 return ( _Cont . end ( ) );
 }
#line 1377 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty,
 size_t _Size > inline
 constexpr _Ty * begin ( _Ty ( & _Array ) [ _Size ] ) noexcept
 {
 return ( _Array );
 }
#line 1384 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty,
 size_t _Size > inline
 constexpr _Ty * end ( _Ty ( & _Array ) [ _Size ] ) noexcept
 {
 return ( _Array + _Size );
 }
#line 1392 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Container >
 constexpr auto inline cbegin ( const _Container & _Cont )
  noexcept ( noexcept ( :: std :: begin ( _Cont ) ) )
  -> decltype ( :: std :: begin ( _Cont ) )
 {
 return ( :: std :: begin ( _Cont ) );
 }
#line 1400 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Container >
 constexpr auto inline cend ( const _Container & _Cont )
  noexcept ( noexcept ( :: std :: end ( _Cont ) ) )
  -> decltype ( :: std :: end ( _Cont ) )
 {
 return ( :: std :: end ( _Cont ) );
 }
#line 1409 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Container >
 auto inline rbegin ( _Container & _Cont ) -> decltype ( _Cont . rbegin ( ) )
 {
 return ( _Cont . rbegin ( ) );
 }
#line 1415 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Container >
 auto inline rbegin ( const _Container & _Cont ) -> decltype ( _Cont . rbegin ( ) )
 {
 return ( _Cont . rbegin ( ) );
 }
#line 1421 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Container >
 auto inline rend ( _Container & _Cont ) -> decltype ( _Cont . rend ( ) )
 {
 return ( _Cont . rend ( ) );
 }
#line 1427 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Container >
 auto inline rend ( const _Container & _Cont ) -> decltype ( _Cont . rend ( ) )
 {
 return ( _Cont . rend ( ) );
 }
#line 1433 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty,
 size_t _Size > inline
 reverse_iterator < _Ty * > rbegin ( _Ty ( & _Array ) [ _Size ] )
 {
 return ( reverse_iterator < _Ty * > ( _Array + _Size ) );
 }
#line 1440 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty,
 size_t _Size > inline
 reverse_iterator < _Ty * > rend ( _Ty ( & _Array ) [ _Size ] )
 {
 return ( reverse_iterator < _Ty * > ( _Array ) );
 }
#line 1447 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Elem > inline
 reverse_iterator < const _Elem * >
  rbegin ( :: std :: initializer_list < _Elem > _Ilist )
 {
 return ( reverse_iterator < const _Elem * > ( _Ilist . end ( ) ) );
 }
#line 1454 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Elem > inline
 reverse_iterator < const _Elem * >
  rend ( :: std :: initializer_list < _Elem > _Ilist )
 {
 return ( reverse_iterator < const _Elem * > ( _Ilist . begin ( ) ) );
 }
#line 1462 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Container >
 auto inline crbegin ( const _Container & _Cont )
  -> decltype ( :: std :: rbegin ( _Cont ) )
 {
 return ( :: std :: rbegin ( _Cont ) );
 }
#line 1469 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Container >
 auto inline crend ( const _Container & _Cont )
  -> decltype ( :: std :: rend ( _Cont ) )
 {
 return ( :: std :: rend ( _Cont ) );
 }
#line 1477 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Container >
 constexpr auto inline size ( const _Container & _Cont )
  -> decltype ( _Cont . size ( ) )
 {
 return ( _Cont . size ( ) );
 }
#line 1484 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty,
 size_t _Size > inline
 constexpr size_t size ( const _Ty ( & ) [ _Size ] ) noexcept
 {
 return ( _Size );
 }
#line 1491 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Container >
 constexpr auto inline empty ( const _Container & _Cont )
  -> decltype ( _Cont . empty ( ) )
 {
 return ( _Cont . empty ( ) );
 }
#line 1498 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty,
 size_t _Size > inline
 constexpr bool empty ( const _Ty ( & ) [ _Size ] ) noexcept
 {
 return ( false );
 }
#line 1505 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Elem > inline
 constexpr bool empty (
  :: std :: initializer_list < _Elem > _Ilist ) noexcept
 {
 return ( _Ilist . size ( ) == 0 );
 }
#line 1512 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Container >
 constexpr auto inline data ( _Container & _Cont )
  -> decltype ( _Cont . data ( ) )
 {
 return ( _Cont . data ( ) );
 }
#line 1519 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Container >
 constexpr auto inline data ( const _Container & _Cont )
  -> decltype ( _Cont . data ( ) )
 {
 return ( _Cont . data ( ) );
 }
#line 1526 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty,
 size_t _Size > inline
 constexpr _Ty * data ( _Ty ( & _Array ) [ _Size ] ) noexcept
 {
 return ( _Array );
 }
#line 1533 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Elem > inline
 constexpr const _Elem * data (
  :: std :: initializer_list < _Elem > _Ilist ) noexcept
 {
 return ( _Ilist . begin ( ) );
 }
#line 1541 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty,
 size_t _Size >
 class _Array_const_iterator
  : public _Iterator012 < random_access_iterator_tag,
   _Ty,
   ptrdiff_t,
   const _Ty *,
   const _Ty &,
   _Iterator_base >
 {
public :
 typedef _Array_const_iterator < _Ty, _Size > _Myiter;
 typedef random_access_iterator_tag iterator_category;

 typedef _Ty value_type;
 typedef size_t size_type;
 typedef ptrdiff_t difference_type;
 typedef const _Ty * pointer;
 typedef const _Ty & reference;
 enum { _EEN_SIZE = _Size };

 _Array_const_iterator ( )
  : _Ptr ( 0 )
  {
  }

 explicit _Array_const_iterator ( pointer _Parg, size_t _Off = 0 )
  : _Ptr ( _Parg + _Off )
  {
  }

 typedef pointer _Unchecked_type;

 _Myiter & _Rechecked ( _Unchecked_type _Right )
  {
  _Ptr = _Right;
  return ( * this );
  }

 _Unchecked_type _Unchecked ( ) const
  {
  return ( _Ptr );
  }

 reference operator * ( ) const
  {
  return ( * _Ptr );
  }

 pointer operator -> ( ) const
  {
  return ( pointer_traits < pointer > :: pointer_to ( * * this ) );
  }

 _Myiter & operator ++ ( )
  {
  ++ _Ptr;
  return ( * this );
  }

 _Myiter operator ++ ( int )
  {
  _Myiter _Tmp = * this;
  ++ * this;
  return ( _Tmp );
  }

 _Myiter & operator -- ( )
  {
  -- _Ptr;
  return ( * this );
  }

 _Myiter operator -- ( int )
  {
  _Myiter _Tmp = * this;
  -- * this;
  return ( _Tmp );
  }

 _Myiter & operator += ( difference_type _Off )
  {
  _Ptr += _Off;
  return ( * this );
  }

 _Myiter operator + ( difference_type _Off ) const
  {
  _Myiter _Tmp = * this;
  return ( _Tmp += _Off );
  }

 _Myiter & operator -= ( difference_type _Off )
  {
  return ( * this += - _Off );
  }

 _Myiter operator - ( difference_type _Off ) const
  {
  _Myiter _Tmp = * this;
  return ( _Tmp -= _Off );
  }

 difference_type operator - ( const _Myiter & _Right ) const
  {
  return ( _Ptr - _Right . _Ptr );
  }

 reference operator [ ] ( difference_type _Off ) const
  {
  return ( * ( * this + _Off ) );
  }

 bool operator == ( const _Myiter & _Right ) const
  {
  return ( _Ptr == _Right . _Ptr );
  }

 bool operator != ( const _Myiter & _Right ) const
  {
  return ( ! ( * this == _Right ) );
  }

 bool operator < ( const _Myiter & _Right ) const
  {
  return ( _Ptr < _Right . _Ptr );
  }

 bool operator > ( const _Myiter & _Right ) const
  {
  return ( _Right < * this );
  }

 bool operator <= ( const _Myiter & _Right ) const
  {
  return ( ! ( _Right < * this ) );
  }

 bool operator >= ( const _Myiter & _Right ) const
  {
  return ( ! ( * this < _Right ) );
  }

 pointer _Ptr;











































































































































































































 };
#line 1890 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty,
 size_t _Size > inline
 typename _Array_const_iterator < _Ty, _Size > :: _Unchecked_type
  _Unchecked ( _Array_const_iterator < _Ty, _Size > _Iter )
 {
 return ( _Iter . _Unchecked ( ) );
 }
#line 1898 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty,
 size_t _Size > inline
 _Array_const_iterator < _Ty, _Size > &
  _Rechecked ( _Array_const_iterator < _Ty, _Size > & _Iter,
   typename _Array_const_iterator < _Ty, _Size >
    :: _Unchecked_type _Right )
 {
 return ( _Iter . _Rechecked ( _Right ) );
 }
#line 1908 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty,
 size_t _Size > inline
 _Array_const_iterator < _Ty, _Size > operator + (
  typename _Array_const_iterator < _Ty, _Size > :: difference_type _Off,
  _Array_const_iterator < _Ty, _Size > _Next )
 {
 return ( _Next += _Off );
 }
#line 1918 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty,
 size_t _Size >
 class _Array_iterator
  : public _Array_const_iterator < _Ty, _Size >
 {
public :
 typedef _Array_iterator < _Ty, _Size > _Myiter;
 typedef _Array_const_iterator < _Ty, _Size > _Mybase;
 typedef random_access_iterator_tag iterator_category;

 typedef _Ty value_type;
 typedef size_t size_type;
 typedef ptrdiff_t difference_type;
 typedef _Ty * pointer;
 typedef _Ty & reference;

 _Array_iterator ( )
  {
  }

 explicit _Array_iterator ( pointer _Parg, size_t _Off = 0 )
  : _Mybase ( _Parg, _Off )
  {
  }
 enum { _EEN_SIZE = _Size };
 typedef pointer _Unchecked_type;

 _Myiter & _Rechecked ( _Unchecked_type _Right )
  {
  ( ( _Mybase * ) this ) -> _Rechecked ( _Right );
  return ( * this );
  }

 _Unchecked_type _Unchecked ( ) const
  {
  return ( ( pointer ) ( ( _Mybase * ) this ) -> _Unchecked ( ) );
  }

 reference operator * ( ) const
  {
  return ( ( reference ) * * ( _Mybase * ) this );
  }

 pointer operator -> ( ) const
  {
  return ( pointer_traits < pointer > :: pointer_to ( * * this ) );
  }

 _Myiter & operator ++ ( )
  {
  ++ * ( _Mybase * ) this;
  return ( * this );
  }

 _Myiter operator ++ ( int )
  {
  _Myiter _Tmp = * this;
  ++ * this;
  return ( _Tmp );
  }

 _Myiter & operator -- ( )
  {
  -- * ( _Mybase * ) this;
  return ( * this );
  }

 _Myiter operator -- ( int )
  {
  _Myiter _Tmp = * this;
  -- * this;
  return ( _Tmp );
  }

 _Myiter & operator += ( difference_type _Off )
  {
  * ( _Mybase * ) this += _Off;
  return ( * this );
  }

 _Myiter operator + ( difference_type _Off ) const
  {
  _Myiter _Tmp = * this;
  return ( _Tmp += _Off );
  }

 _Myiter & operator -= ( difference_type _Off )
  {
  return ( * this += - _Off );
  }

 _Myiter operator - ( difference_type _Off ) const
  {
  _Myiter _Tmp = * this;
  return ( _Tmp -= _Off );
  }

 difference_type operator - ( const _Mybase & _Right ) const
  {
  return ( * ( _Mybase * ) this - _Right );
  }

 reference operator [ ] ( difference_type _Off ) const
  {
  return ( * ( * this + _Off ) );
  }
 };
#line 2026 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty,
 size_t _Size > inline
 typename _Array_iterator < _Ty, _Size > :: _Unchecked_type
  _Unchecked ( _Array_iterator < _Ty, _Size > _Iter )
 {
 return ( _Iter . _Unchecked ( ) );
 }
#line 2034 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty,
 size_t _Size > inline
 _Array_iterator < _Ty, _Size > &
  _Rechecked ( _Array_iterator < _Ty, _Size > & _Iter,
   typename _Array_iterator < _Ty, _Size >
    :: _Unchecked_type _Right )
 {
 return ( _Iter . _Rechecked ( _Right ) );
 }
#line 2044 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty,
 size_t _Size > inline
 _Array_iterator < _Ty, _Size > operator + (
  typename _Array_iterator < _Ty, _Size > :: difference_type _Off,
  _Array_iterator < _Ty, _Size > _Next )
 {
 return ( _Next += _Off );
 }
#line 2054 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt >
 class move_iterator
 {
public :
 typedef move_iterator < _RanIt > _Myt;
 typedef typename iterator_traits < _RanIt > :: iterator_category
  iterator_category;
 typedef typename iterator_traits < _RanIt > :: value_type
  value_type;
 typedef typename iterator_traits < _RanIt > :: difference_type
  difference_type;
 typedef _RanIt pointer;
 typedef typename iterator_traits < _RanIt > :: reference _Ref0;
 typedef conditional_t < is_reference < _Ref0 > :: value,
  remove_reference_t < _Ref0 > &&, _Ref0 > reference;
 typedef _RanIt iterator_type;

 move_iterator ( )
  : current ( )
  {
  }

 explicit move_iterator ( iterator_type _Right )
  : current ( _Right )
  {
  }

 template < class _RanIt2 >
  move_iterator ( const move_iterator < _RanIt2 > & _Right )
  : current ( _Right . base ( ) )
  {
  }

 template < class _RanIt2 >
  _Myt & operator = ( const move_iterator < _RanIt2 > & _Right )
  {
  current = _Right . base ( );
  return ( * this );
  }

 _RanIt base ( ) const
  {
  return ( current );
  }

 reference operator * ( ) const
  {
  return ( static_cast < reference > ( * current ) );
  }

 pointer operator -> ( ) const
  {
  return ( current );
  }

 _Myt & operator ++ ( )
  {
  ++ current;
  return ( * this );
  }

 _Myt operator ++ ( int )
  {
  _Myt _Tmp = * this;
  ++ current;
  return ( _Tmp );
  }

 _Myt & operator -- ( )
  {
  -- current;
  return ( * this );
  }

 _Myt operator -- ( int )
  {
  _Myt _Tmp = * this;
  -- current;
  return ( _Tmp );
  }

 template < class _RanIt2 >
  bool _Equal ( const move_iterator < _RanIt2 > & _Right ) const
  {
  return ( current == _Right . base ( ) );
  }



 _Myt & operator += ( difference_type _Off )
  {
  current += _Off;
  return ( * this );
  }

 _Myt operator + ( difference_type _Off ) const
  {
  return ( _Myt ( current + _Off ) );
  }

 _Myt & operator -= ( difference_type _Off )
  {
  current -= _Off;
  return ( * this );
  }

 _Myt operator - ( difference_type _Off ) const
  {
  return ( _Myt ( current - _Off ) );
  }

 reference operator [ ] ( difference_type _Off ) const
  {
  return ( :: std :: move ( current [ _Off ] ) );
  }

 template < class _RanIt2 >
  bool _Less ( const move_iterator < _RanIt2 > & _Right ) const
  {
  return ( current < _Right . base ( ) );
  }

 difference_type operator - ( const _Myt & _Right ) const
  {
  return ( current - _Right . base ( ) );
  }

protected :
 iterator_type current;
 };
#line 2185 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _RanIt> 
#line 2186 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Is_checked_helper< move_iterator< _RanIt> , void>  : public _Is_checked_helper< _RanIt>  { 
#line 2189 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 2192 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt,
 class _Diff > inline
 move_iterator < _RanIt >
  operator + ( _Diff _Off,
  const move_iterator < _RanIt > & _Right )
 {
 return ( _Right + _Off );
 }
#line 2201 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt1,
 class _RanIt2 >
 auto inline operator - (
  move_iterator < _RanIt1 > & _Left,
  const move_iterator < _RanIt2 > & _Right )
   -> decltype ( _Left . base ( ) - _Right . base ( ) )
 {
 return ( _Left . base ( ) - _Right . base ( ) );
 }
#line 2211 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt1,
 class _RanIt2 > inline
 bool operator == (
  const move_iterator < _RanIt1 > & _Left,
  const move_iterator < _RanIt2 > & _Right )
 {
 return ( _Left . _Equal ( _Right ) );
 }
#line 2220 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt1,
 class _RanIt2 > inline
 bool operator != (
  const move_iterator < _RanIt1 > & _Left,
  const move_iterator < _RanIt2 > & _Right )
 {
 return ( ! ( _Left == _Right ) );
 }
#line 2229 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt1,
 class _RanIt2 > inline
 bool operator < (
  const move_iterator < _RanIt1 > & _Left,
  const move_iterator < _RanIt2 > & _Right )
 {
 return ( _Left . _Less ( _Right ) );
 }
#line 2238 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt1,
 class _RanIt2 > inline
 bool operator > (
  const move_iterator < _RanIt1 > & _Left,
  const move_iterator < _RanIt2 > & _Right )
 {
 return ( _Right < _Left );
 }
#line 2247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt1,
 class _RanIt2 > inline
 bool operator <= (
  const move_iterator < _RanIt1 > & _Left,
  const move_iterator < _RanIt2 > & _Right )
 {
 return ( ! ( _Right < _Left ) );
 }
#line 2256 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt1,
 class _RanIt2 > inline
 bool operator >= (
  const move_iterator < _RanIt1 > & _Left,
  const move_iterator < _RanIt2 > & _Right )
 {
 return ( ! ( _Left < _Right ) );
 }
#line 2266 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt > inline
 move_iterator < _RanIt > make_move_iterator ( _RanIt _Iter )
 {
 return ( move_iterator < _RanIt > ( _Iter ) );
 }
#line 2273 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Traits >
 struct _Char_traits_eq
 {
 typedef typename _Traits :: char_type _Elem;

 bool operator ( ) ( _Elem _Left, _Elem _Right ) const
  {
  return ( _Traits :: eq ( _Left, _Right ) );
  }
 };
#line 2285 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Traits >
 struct _Char_traits_lt
 {
 typedef typename _Traits :: char_type _Elem;

 bool operator ( ) ( _Elem _Left, _Elem _Right ) const
  {
  return ( _Traits :: lt ( _Left, _Right ) );
  }
 };
#line 2297 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _OutIt > inline
 _OutIt _Copy_memmove ( _InIt _First, _InIt _Last,
  _OutIt _Dest )
 {
 const char * const _First_ch = reinterpret_cast < const char * > ( _First );
 const char * const _Last_ch = reinterpret_cast < const char * > ( _Last );
 char * const _Dest_ch = reinterpret_cast < char * > ( _Dest );
 const size_t _Count = _Last_ch - _First_ch;
 :: memmove ( _Dest_ch, _First_ch, _Count );
 return ( reinterpret_cast < _OutIt > ( _Dest_ch + _Count ) );
 }
#line 2310 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _OutIt > inline
 _OutIt _Copy_unchecked1 ( _InIt _First, _InIt _Last,
  _OutIt _Dest, _General_ptr_iterator_tag )
 {
 for (; _First != _Last; ++ _Dest, ( void ) ++ _First )
  * _Dest = * _First;
 return ( _Dest );
 }
#line 2320 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _OutIt > inline
 _OutIt _Copy_unchecked1 ( _InIt _First, _InIt _Last,
  _OutIt _Dest, _Trivially_copyable_ptr_iterator_tag )
 {
 return ( _Copy_memmove ( _First, _Last, _Dest ) );
 }
#line 2328 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _OutIt > inline
 _OutIt _Copy_unchecked ( _InIt _First, _InIt _Last,
  _OutIt _Dest )
 {

 return ( _Copy_unchecked1 ( _First, _Last,
  _Dest, _Ptr_copy_cat ( _First, _Dest ) ) );
 }
#line 2338 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _OutIt > inline
 _OutIt _Copy_no_deprecate1 ( _InIt _First, _InIt _Last,
  _OutIt _Dest, input_iterator_tag, _Any_tag )
 {
 return ( _Rechecked ( _Dest,
  _Copy_unchecked ( _First, _Last, _Unchecked_idl0 ( _Dest ) ) ) );
 }
#line 2347 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _OutIt > inline
 _OutIt _Copy_no_deprecate1 ( _InIt _First, _InIt _Last,
  _OutIt _Dest, random_access_iterator_tag, random_access_iterator_tag )
 {
 ;
 return ( _Rechecked ( _Dest,
  _Copy_unchecked ( _First, _Last, _Unchecked ( _Dest ) ) ) );
 }
#line 2357 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _OutIt > inline
 _OutIt _Copy_no_deprecate ( _InIt _First, _InIt _Last,
  _OutIt _Dest )
 {
 ;
 return ( _Copy_no_deprecate1 ( _Unchecked ( _First ), _Unchecked ( _Last ),
  _Dest, _Iter_cat_t < _InIt > ( ), _Iter_cat_t < _OutIt > ( ) ) );
 }
#line 2367 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _OutIt > inline
 _OutIt copy ( _InIt _First, _InIt _Last,
  _OutIt _Dest )
 {
 struct _Unchecked_iterators { static void _Deprecate ( false_type ) { } static void _Deprecate ( true_type ) { } }; ( _Unchecked_iterators :: _Deprecate ( _Is_checked ( _Dest ) ) );
 return ( _Copy_no_deprecate ( _First, _Last, _Dest ) );
 }
#line 2390 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _Diff,
 class _OutIt > inline
 _OutIt _Copy_n_unchecked2 ( _InIt _First, _Diff _Count,
  _OutIt _Dest, input_iterator_tag )
 {
 if ( 0 < _Count )
  {
  * _Dest = * _First;
  while ( 0 < -- _Count )
   * ++ _Dest = * ++ _First;
  return ( ++ _Dest );
  }

 return ( _Dest );
 }
#line 2407 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _Diff,
 class _OutIt > inline
 _OutIt _Copy_n_unchecked2 ( _InIt _First, _Diff _Count,
  _OutIt _Dest, forward_iterator_tag )
 {
 for (; 0 < _Count; -- _Count, ( void ) ++ _Dest, ++ _First )
  * _Dest = * _First;
 return ( _Dest );
 }
#line 2418 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _Diff,
 class _OutIt > inline
 _OutIt _Copy_n_unchecked1 ( _InIt _First, _Diff _Count,
  _OutIt _Dest, _General_ptr_iterator_tag )
 {


 return ( _Copy_n_unchecked2 ( _First, _Count,
  _Dest, _Iter_cat_t < _InIt > ( ) ) );
 }
#line 2430 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _Diff,
 class _OutIt > inline
 _OutIt _Copy_n_unchecked1 ( _InIt _First, _Diff _Count,
  _OutIt _Dest, _Trivially_copyable_ptr_iterator_tag )
 {
 if ( 0 < _Count )
  return ( _Copy_memmove ( _First, _First + _Count, _Dest ) );
 return ( _Dest );
 }
#line 2441 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _Diff,
 class _OutIt > inline
 _OutIt _Copy_n_unchecked ( _InIt _First, _Diff _Count,
  _OutIt _Dest )
 {
 return ( _Copy_n_unchecked1 ( _First, _Count,
  _Dest, _Ptr_copy_cat ( _First, _Dest ) ) );
 }
#line 2451 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _Diff,
 class _OutIt > inline
 _OutIt copy_n ( _InIt _First, _Diff _Count,
  _OutIt _Dest )
 {

 struct _Unchecked_iterators { static void _Deprecate ( false_type ) { } static void _Deprecate ( true_type ) { } }; ( _Unchecked_iterators :: _Deprecate ( _Is_checked ( _Dest ) ) );
 return ( _Rechecked ( _Dest,
  _Copy_n_unchecked ( _Unchecked_n ( _First, _Count ), _Count, _Unchecked_n ( _Dest, _Count ) ) ) );
 }
#line 2504 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 _Copy_backward_memmove ( _BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest )
 {
 const char * const _First_ch = reinterpret_cast < const char * > ( _First );
 const char * const _Last_ch = reinterpret_cast < const char * > ( _Last );
 char * const _Dest_ch = reinterpret_cast < char * > ( _Dest );
 const size_t _Count = _Last_ch - _First_ch;
 return ( static_cast < _BidIt2 > (
  :: memmove ( _Dest_ch - _Count, _First_ch, _Count ) ) );
 }
#line 2517 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 _Copy_backward_unchecked1 ( _BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, _General_ptr_iterator_tag )
 {
 while ( _First != _Last )
  * -- _Dest = * -- _Last;
 return ( _Dest );
 }
#line 2527 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 _Copy_backward_unchecked1 ( _BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, _Trivially_copyable_ptr_iterator_tag )
 {
 return ( _Copy_backward_memmove ( _First, _Last, _Dest ) );
 }
#line 2535 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 _Copy_backward_unchecked ( _BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest )
 {
 return ( _Copy_backward_unchecked1 ( _First, _Last,
  _Dest, _Ptr_copy_cat ( _First, _Dest ) ) );
 }
#line 2544 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 _Copy_backward1 ( _BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, input_iterator_tag, _Any_tag )
 {
 return ( _Rechecked ( _Dest,
  _Copy_backward_unchecked ( _First, _Last, _Unchecked_idl0 ( _Dest ) ) ) );
 }
#line 2553 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 _Copy_backward1 ( _BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, random_access_iterator_tag, random_access_iterator_tag )
 {
 ;
 return ( _Rechecked ( _Dest,
  _Copy_backward_unchecked ( _First, _Last, _Unchecked ( _Dest ) ) ) );
 }
#line 2563 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 copy_backward ( _BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest )
 {
 struct _Unchecked_iterators { static void _Deprecate ( false_type ) { } static void _Deprecate ( true_type ) { } }; ( _Unchecked_iterators :: _Deprecate ( _Is_checked ( _Dest ) ) );
 ;
 return ( _Copy_backward1 ( _Unchecked ( _First ), _Unchecked ( _Last ),
  _Dest, _Iter_cat_t < _BidIt1 > ( ), _Iter_cat_t < _BidIt2 > ( ) ) );
 }
#line 2575 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _OutIt > inline
 _OutIt _Move_unchecked1 ( _InIt _First, _InIt _Last,
  _OutIt _Dest, _General_ptr_iterator_tag )
 {
 for (; _First != _Last; ++ _Dest, ( void ) ++ _First )
  * _Dest = :: std :: move ( * _First );
 return ( _Dest );
 }
#line 2585 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _OutIt > inline
 _OutIt _Move_unchecked1 ( _InIt _First, _InIt _Last,
  _OutIt _Dest, _Trivially_copyable_ptr_iterator_tag )
 {
 return ( _Copy_memmove ( _First, _Last, _Dest ) );
 }
#line 2593 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _OutIt > inline
 _OutIt _Move_unchecked ( _InIt _First, _InIt _Last,
  _OutIt _Dest )
 {
 return ( _Move_unchecked1 ( _First, _Last,
  _Dest, _Ptr_move_cat ( _First, _Dest ) ) );
 }
#line 2602 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _OutIt > inline
 _OutIt _Move_no_deprecate1 ( _InIt _First, _InIt _Last,
  _OutIt _Dest, input_iterator_tag, _Any_tag )
 {
 return ( _Rechecked ( _Dest,
  _Move_unchecked ( _First, _Last, _Unchecked_idl0 ( _Dest ) ) ) );
 }
#line 2611 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _OutIt > inline
 _OutIt _Move_no_deprecate1 ( _InIt _First, _InIt _Last,
  _OutIt _Dest, random_access_iterator_tag, random_access_iterator_tag )
 {
 ;
 return ( _Rechecked ( _Dest,
  _Move_unchecked ( _First, _Last, _Unchecked ( _Dest ) ) ) );
 }
#line 2621 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _OutIt > inline
 _OutIt _Move_no_deprecate ( _InIt _First, _InIt _Last,
  _OutIt _Dest )
 {
 ;
 return ( _Move_no_deprecate1 ( _Unchecked ( _First ), _Unchecked ( _Last ),
  _Dest, _Iter_cat_t < _InIt > ( ), _Iter_cat_t < _OutIt > ( ) ) );
 }
#line 2631 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _InIt, class 
#line 2632 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_OutIt> inline _OutIt 
#line 2633 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
move(_InIt _First, _InIt _Last, _OutIt 
#line 2634 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Dest) 
#line 2635 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
{ 
#line 2636 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Unchecked_iterators { static void _Deprecate(std::false_type) { } static void _Deprecate(std::true_type) { } }; _Unchecked_iterators::_Deprecate(_Is_checked(_Dest)); 
#line 2637 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
return _Move_no_deprecate(_First, _Last, _Dest); 
#line 2638 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
} 
#line 2654 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 _Move_backward_unchecked1 ( _BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, _General_ptr_iterator_tag )
 {
 while ( _First != _Last )
  * -- _Dest = :: std :: move ( * -- _Last );
 return ( _Dest );
 }
#line 2664 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 _Move_backward_unchecked1 ( _BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, _Trivially_copyable_ptr_iterator_tag )
 {
 return ( _Copy_backward_memmove ( _First, _Last, _Dest ) );
 }
#line 2672 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 _Move_backward_unchecked ( _BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest )
 {
 return ( _Move_backward_unchecked1 ( _First, _Last,
  _Dest, _Ptr_move_cat ( _First, _Dest ) ) );
 }
#line 2681 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 _Move_backward1 ( _BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, input_iterator_tag, _Any_tag )
 {
 return ( _Rechecked ( _Dest,
  _Move_backward_unchecked ( _First, _Last, _Unchecked_idl0 ( _Dest ) ) ) );
 }
#line 2690 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 _Move_backward1 ( _BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, random_access_iterator_tag, random_access_iterator_tag )
 {
 ;
 return ( _Rechecked ( _Dest,
  _Move_backward_unchecked ( _First, _Last, _Unchecked ( _Dest ) ) ) );
 }
#line 2700 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 move_backward ( _BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest )
 {
 struct _Unchecked_iterators { static void _Deprecate ( false_type ) { } static void _Deprecate ( true_type ) { } }; ( _Unchecked_iterators :: _Deprecate ( _Is_checked ( _Dest ) ) );
 ;
 return ( _Move_backward1 ( _Unchecked ( _First ), _Unchecked ( _Last ),
  _Dest, _Iter_cat_t < _BidIt1 > ( ), _Iter_cat_t < _BidIt2 > ( ) ) );
 }
#line 2712 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Ty> 
#line 2713 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Is_character : public false_type { 
#line 2716 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 2719 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template<> struct _Is_character< char>  : public true_type { 
#line 2722 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 2725 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template<> struct _Is_character< signed char>  : public true_type { 
#line 2728 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 2731 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template<> struct _Is_character< unsigned char>  : public true_type { 
#line 2734 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 2736 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _FwdIt, class 
#line 2737 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Ty> 
#line 2738 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Fill_memset_is_safe_helper { 
#line 2740 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef _Iter_value_t< _FwdIt>  _Value_type; 
#line 2750 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef typename conjunction< is_pointer< _FwdIt> , disjunction< conjunction< _Is_character< _Ty> , _Is_character< _Iter_value_t< _FwdIt> > > , conjunction< is_same< bool, _Ty> , is_same< bool, _Iter_value_t< _FwdIt> > > > > ::type type; 
#line 2751 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 2753 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt,
 class _Ty > inline
 typename _Fill_memset_is_safe_helper < _FwdIt, _Ty > :: type
 _Fill_memset_is_safe ( const _FwdIt &, const _Ty & )
 {
 return { };
 }
#line 2761 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt,
 class _Ty > inline
 void _Fill_unchecked1 ( _FwdIt _First, _FwdIt _Last, const _Ty & _Val, false_type )
 {
 for (; _First != _Last; ++ _First )
  * _First = _Val;
 }
#line 2769 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt,
 class _Ty > inline
 void _Fill_unchecked1 ( _FwdIt _First, _FwdIt _Last, const _Ty & _Val, true_type )
 {
 :: memset ( _First, _Val, _Last - _First );
 }
#line 2776 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt,
 class _Ty > inline
 void _Fill_unchecked ( _FwdIt _First, _FwdIt _Last, const _Ty & _Val )
 {
 _Fill_unchecked1 ( _First, _Last, _Val, _Fill_memset_is_safe ( _First, _Val ) );
 }
#line 2783 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt,
 class _Ty > inline
 void fill ( _FwdIt _First, _FwdIt _Last, const _Ty & _Val )
 {
 ;
 _Fill_unchecked ( _Unchecked ( _First ), _Unchecked ( _Last ), _Val );
 }
#line 2792 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _OutIt,
 class _Diff,
 class _Ty > inline
 _OutIt _Fill_n_unchecked1 ( _OutIt _Dest, _Diff _Count, const _Ty & _Val, false_type )
 {
 for (; 0 < _Count; -- _Count, ( void ) ++ _Dest )
  * _Dest = _Val;
 return ( _Dest );
 }
#line 2802 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _OutIt,
 class _Diff,
 class _Ty > inline
 _OutIt _Fill_n_unchecked1 ( _OutIt _Dest, _Diff _Count, const _Ty & _Val, true_type )
 {
 if ( 0 < _Count )
  {
  :: memset ( _Dest, _Val, _Count );
  return ( _Dest + _Count );
  }

 return ( _Dest );
 }
#line 2816 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _OutIt,
 class _Diff,
 class _Ty > inline
 _OutIt _Fill_n_unchecked ( _OutIt _Dest, _Diff _Count, const _Ty & _Val )
 {

 return ( _Fill_n_unchecked1 ( _Dest, _Count, _Val, _Fill_memset_is_safe ( _Dest, _Val ) ) );
 }
#line 2825 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _OutIt,
 class _Diff,
 class _Ty > inline
 _OutIt fill_n ( _OutIt _Dest, _Diff _Count, const _Ty & _Val )
 {
 return ( _Rechecked ( _Dest,
  _Fill_n_unchecked ( _Unchecked_n ( _Dest, _Count ), _Count, _Val ) ) );
 }
#line 2835 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Elem1, class 
#line 2836 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Elem2> 
#line 2837 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Value_equality_is_bitwise_equality : public bool_constant< (static_cast< _Elem1>(-1)) == (static_cast< _Elem2>(-1))>  { 
#line 2843 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 2845 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Elem1, class 
#line 2846 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Elem2, class 
#line 2847 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Pr> 
#line 2848 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Equal_memcmp_is_safe_helper : public false_type { 
#line 2852 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 2854 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Elem1, class 
#line 2855 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Elem2> 
#line 2856 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Equal_memcmp_is_safe_helper< _Elem1, _Elem2, equal_to<> >  : public conjunction< _Is_same_size< _Elem1, _Elem2> , is_integral< _Elem1> , is_integral< _Elem2> , negation< is_same< bool, _Elem1> > , negation< is_same< bool, _Elem2> > , negation< is_volatile< _Elem1> > , negation< is_volatile< _Elem2> > , _Value_equality_is_bitwise_equality< _Elem1, _Elem2> > ::type { 
#line 2870 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 2872 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Elem1, class 
#line 2873 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Elem2> 
#line 2874 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Equal_memcmp_is_safe_helper< _Elem1 *, _Elem2 *, equal_to<> >  : public is_same< remove_cv_t< _Elem1> , remove_cv_t< _Elem2> > ::type { 
#line 2877 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 2879 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Elem> 
#line 2880 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Equal_memcmp_is_safe_helper< _Elem, _Elem, _Char_traits_eq< char_traits< _Elem> > >  : public _Equal_memcmp_is_safe_helper< _Elem, _Elem, equal_to<> > ::type { 
#line 2883 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 2885 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Elem> 
#line 2886 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Equal_memcmp_is_safe_helper< _Elem, _Elem, equal_to< _Elem> >  : public _Equal_memcmp_is_safe_helper< _Elem, _Elem, equal_to<> > ::type { 
#line 2890 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 2892 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Iter1,
 class _Iter2,
 class _Pr > inline
 false_type _Equal_memcmp_is_safe ( const _Iter1 &, const _Iter2 &, const _Pr & )
 {
 return { };
 }
#line 2900 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Obj1,
 class _Obj2,
 class _Pr > inline
 typename _Equal_memcmp_is_safe_helper <
  remove_const_t < _Obj1 >,
  remove_const_t < _Obj2 >,
  _Pr > :: type
  _Equal_memcmp_is_safe ( _Obj1 * const &, _Obj2 * const &, const _Pr & )
 {
 return { };
 }
#line 2912 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool _Equal_unchecked1 ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr & _Pred, false_type )
 {
 for (; _First1 != _Last1; ++ _First1, ( void ) ++ _First2 )
  if ( ! _Pred ( * _First1, * _First2 ) )
   return ( false );
 return ( true );
 }
#line 2924 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool _Equal_unchecked1 ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr &, true_type )
 {
 const char * const _First1_ch = reinterpret_cast < const char * > ( _First1 );
 const char * const _First2_ch = reinterpret_cast < const char * > ( _First2 );
 const size_t _Count = reinterpret_cast < const char * > ( _Last1 ) - _First1_ch;
 return ( :: memcmp ( _First1_ch, _First2_ch, _Count ) == 0 );
 }
#line 2936 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool _Equal_unchecked ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr & _Pred )
 {
 return ( _Equal_unchecked1 ( _First1, _Last1, _First2, _Pred,
  _Equal_memcmp_is_safe ( _First1, _First2, _Pred ) ) );
 }
#line 2946 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool _Equal_no_deprecate1 ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr & _Pred, input_iterator_tag, input_iterator_tag )
 {
 return ( _Equal_unchecked ( _First1, _Last1, _Unchecked_idl0 ( _First2 ), _Pred ) );
 }
#line 2955 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool _Equal_no_deprecate1 ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr & _Pred, random_access_iterator_tag, random_access_iterator_tag )
 {
 ;
 return ( _Equal_unchecked ( _First1, _Last1, _Unchecked ( _First2 ), _Pred ) );
 }
#line 2965 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool _Equal_no_deprecate ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr & _Pred )
 {
 ;
 ;
 return ( _Equal_no_deprecate1 ( _Unchecked ( _First1 ), _Unchecked ( _Last1 ),
  _First2, _Pred, _Iter_cat_t < _InIt1 > ( ), _Iter_cat_t < _InIt2 > ( ) ) );
 }
#line 2977 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool equal ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr _Pred )
 {
 struct _Unchecked_iterators { static void _Deprecate ( false_type ) { } static void _Deprecate ( true_type ) { } }; ( _Unchecked_iterators :: _Deprecate ( _Is_checked ( _First2 ) ) );
 return ( _Equal_no_deprecate ( _First1, _Last1, _First2, _Pred ) );
 }
#line 3002 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt1,
 class _InIt2 > inline
 bool equal ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2 )
 {
 return ( :: std :: equal ( _First1, _Last1, _First2,
  equal_to < > ( ) ) );
 }
#line 3024 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool _Equal_unchecked ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr & _Pred,
   input_iterator_tag, input_iterator_tag )
 {

 ;
 for (; _First1 != _Last1 && _First2 != _Last2; ++ _First1, ( void ) ++ _First2 )
  if ( ! _Pred ( * _First1, * _First2 ) )
   return ( false );
 return ( _First1 == _Last1 && _First2 == _Last2 );
 }
#line 3039 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool _Equal_unchecked ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr & _Pred,
   random_access_iterator_tag, random_access_iterator_tag )
 {

 if ( _Last1 - _First1 != _Last2 - _First2 )
  return ( false );
 ;
 return ( _Equal_unchecked ( _First1, _Last1, _First2, _Pred ) );
 }
#line 3053 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool equal ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr _Pred )
 {
 ;
 ;
 return ( _Equal_unchecked ( _Unchecked ( _First1 ), _Unchecked ( _Last1 ),
  _Unchecked ( _First2 ), _Unchecked ( _Last2 ), _Pred,
   _Iter_cat_t < _InIt1 > ( ), _Iter_cat_t < _InIt2 > ( ) ) );
 }
#line 3067 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt1,
 class _InIt2 > inline
 bool equal ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2 )
 {
 return ( :: std :: equal ( _First1, _Last1, _First2, _Last2,
  equal_to < > ( ) ) );
 }
#line 3077 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Elem1, class 
#line 3078 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Elem2, class 
#line 3079 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_FTy> 
#line 3080 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Lex_compare_check_element_types_helper : public conjunction< _Is_character< _Elem1> , _Is_character< _Elem2> , _Is_character< _FTy> , is_unsigned< _FTy> > ::type { 
#line 3088 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 3090 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Elem1, class 
#line 3091 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Elem2> 
#line 3092 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Lex_compare_check_element_types_helper< _Elem1, _Elem2, void>  : public conjunction< _Is_character< _Elem1> , _Is_character< _Elem2> , is_unsigned< _Elem1> , is_unsigned< _Elem2> > ::type { 
#line 3100 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 3102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Memcmp_pr> 
#line 3103 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Lex_compare_optimize { 
#line 3105 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 3107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Memcmp_pr, class 
#line 3108 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Obj1, class 
#line 3109 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Obj2, class 
#line 3110 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_FTy> using _Lex_compare_check_element_types = _Lex_compare_optimize< conditional_t< _Lex_compare_check_element_types_helper< remove_const_t< _Obj1> , remove_const_t< _Obj2> , _FTy> ::value, _Memcmp_pr, void> > ; 
#line 3115 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 _Lex_compare_optimize < void > _Lex_compare_memcmp_classify ( const _InIt1 &, const _InIt2 &, const _Pr & )
 {

 return { };
 }
#line 3124 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Obj1,
 class _Obj2,
 class _FTy > inline
 _Lex_compare_check_element_types < less < int >, _Obj1, _Obj2, _FTy >
  _Lex_compare_memcmp_classify ( _Obj1 * const &, _Obj2 * const &, const less < _FTy > & )
 {
 return { };
 }
#line 3133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool _Lex_compare_unchecked1 ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr & _Pred, _Lex_compare_optimize < void > )
 {
 for (; _First1 != _Last1 && _First2 != _Last2; ++ _First1, ( void ) ++ _First2 )
  {
  if ( _Pred ( * _First1, * _First2 ) )
   return ( true );
  else if ( _Pred ( * _First2, * _First1 ) )
   return ( false );
  }

 return ( _First1 == _Last1 && _First2 != _Last2 );
 }
#line 3150 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt1,
 class _InIt2,
 class _Pr,
 class _Memcmp_pr > inline
 bool _Lex_compare_unchecked1 ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr &, _Lex_compare_optimize < _Memcmp_pr > )
 {
 const size_t _Num1 = _Last1 - _First1;
 const size_t _Num2 = _Last2 - _First2;
 const int _Ans = :: memcmp ( _First1, _First2, _Num1 < _Num2 ? _Num1 : _Num2 );
 return ( _Memcmp_pr { } ( _Ans, 0 ) || _Ans == 0 && _Num1 < _Num2 );
 }
#line 3163 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool _Lex_compare_unchecked ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr & _Pred )
 {
 return ( _Lex_compare_unchecked1 ( _First1, _Last1, _First2, _Last2, _Pred,
  _Lex_compare_memcmp_classify ( _First1, _First2, _Pred ) ) );
 }
#line 3173 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool lexicographical_compare ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr _Pred )
 {
 ;
 ;
 ;
 return ( _Lex_compare_unchecked ( _Unchecked ( _First1 ), _Unchecked ( _Last1 ),
  _Unchecked ( _First2 ), _Unchecked ( _Last2 ), _Pred ) );
 }
#line 3187 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt1,
 class _InIt2 > inline
 bool lexicographical_compare ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2 )
 {
 return ( :: std :: lexicographical_compare ( _First1, _Last1,
  _First2, _Last2, less < > ( ) ) );
 }
#line 3197 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty > inline
 bool _Within_limits ( const _Ty & _Val, true_type, true_type, _Any_tag )
 {
 return ( ( - 128 ) <= _Val && _Val <= 127 );
 }
#line 3203 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty > inline
 bool _Within_limits ( const _Ty & _Val, true_type, false_type, true_type )
 {
 return ( _Val <= 127 || static_cast < _Ty > ( ( - 128 ) ) <= _Val );
 }
#line 3209 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty > inline
 bool _Within_limits ( const _Ty & _Val, true_type, false_type, false_type )
 {
 return ( _Val <= 127 );
 }
#line 3215 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty > inline
 bool _Within_limits ( const _Ty & _Val, false_type, true_type, _Any_tag )
 {
 return ( 0 <= _Val && _Val <= 255 );
 }
#line 3221 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Ty > inline
 bool _Within_limits ( const _Ty & _Val, false_type, false_type, _Any_tag )
 {
 return ( _Val <= 255 );
 }
#line 3227 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _Ty > inline
 bool _Within_limits ( _InIt, const _Ty & _Val )
 {
 typedef typename remove_pointer < _InIt > :: type _Elem;
 return ( _Within_limits ( _Val, is_signed < _Elem > ( ), is_signed < _Ty > ( ),
  integral_constant < bool, - 1 == static_cast < _Ty > ( - 1 ) > ( ) ) );
 }
#line 3236 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt > inline
 bool _Within_limits ( _InIt, const bool & )
 {
 return ( true );
 }
#line 3242 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _Ty > inline
 _InIt _Find_unchecked1 ( _InIt _First, _InIt _Last, const _Ty & _Val, true_type )
 {
 if ( ! _Within_limits ( _First, _Val ) )
  return ( _Last );
 _First = static_cast < _InIt > ( :: memchr (
  _First, static_cast < unsigned char > ( _Val ), _Last - _First ) );
 return ( _First ? _First : _Last );
 }
#line 3253 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _Ty > inline
 _InIt _Find_unchecked1 ( _InIt _First, _InIt _Last, const _Ty & _Val, false_type )
 {
 for (; _First != _Last; ++ _First )
  if ( * _First == _Val )
   break;
 return ( _First );
 }
#line 3263 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _Ty > inline
 _InIt _Find_unchecked ( _InIt _First, _InIt _Last, const _Ty & _Val )
 {

 typedef integral_constant < bool,
  ( is_same < _InIt, char * > :: value
  || is_same < _InIt, signed char * > :: value
  || is_same < _InIt, unsigned char * > :: value
  || is_same < _InIt, const char * > :: value
  || is_same < _InIt, const signed char * > :: value
  || is_same < _InIt, const unsigned char * > :: value )
  && is_integral < _Ty > :: value
 > _Memchr_opt;
 return ( _Find_unchecked1 ( _First, _Last, _Val, _Memchr_opt ( ) ) );
 }
#line 3280 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _Ty > inline
 _InIt find ( _InIt _First, _InIt _Last, const _Ty & _Val )
 {
 ;
 return ( _Rechecked ( _First,
  _Find_unchecked ( _Unchecked ( _First ), _Unchecked ( _Last ), _Val ) ) );
 }
#line 3290 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _Ty,
 class _Pr > inline
 _InIt _Find_pr ( _InIt _First, _InIt _Last, const _Ty & _Val, _Pr & _Pred )
 {
 for (; _First != _Last; ++ _First )
  if ( _Pred ( * _First, _Val ) )
   break;
 return ( _First );
 }
#line 3302 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _Ty > inline
 _Iter_diff_t < _InIt >
  _Count_unchecked ( _InIt _First, _InIt _Last, const _Ty & _Val )
 {
 _Iter_diff_t < _InIt > _Count = 0;

 for (; _First != _Last; ++ _First )
  if ( * _First == _Val )
   ++ _Count;
 return ( _Count );
 }
#line 3315 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _Ty > inline
 _Iter_diff_t < _InIt >
  count ( _InIt _First, _InIt _Last, const _Ty & _Val )
 {
 ;
 return ( _Count_unchecked ( _Unchecked ( _First ), _Unchecked ( _Last ), _Val ) );
 }
#line 3325 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _InIt,
 class _Ty,
 class _Pr > inline
 _Iter_diff_t < _InIt >
  _Count_pr ( _InIt _First, _InIt _Last, const _Ty & _Val, _Pr & _Pred )
 {
 _Iter_diff_t < _InIt > _Count = 0;

 for (; _First != _Last; ++ _First )
  if ( _Pred ( * _First, _Val ) )
   ++ _Count;
 return ( _Count );
 }
#line 3340 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt1,
 class _FwdIt2,
 class _Pr > inline
 void _Trim_matching_suffixes ( _FwdIt1 &, _FwdIt2 &, _Pr &,
  forward_iterator_tag, forward_iterator_tag )
 {
 }
#line 3348 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt1,
 class _FwdIt2,
 class _Pr > inline
 void _Trim_matching_suffixes ( _FwdIt1 & _Last1, _FwdIt2 & _Last2, _Pr & _Pred,
  bidirectional_iterator_tag, bidirectional_iterator_tag )
 {

 while ( _Pred ( * -- _Last1, * -- _Last2 ) )
  ;
 ++ _Last1;
 ++ _Last2;
 }
#line 3362 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt1,
 class _FwdIt2,
 class _Pr > inline
 bool _Check_match_counts ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr & _Pred )
 {
 _Trim_matching_suffixes ( _Last1, _Last2, _Pred,
  _Iter_cat_t < _FwdIt1 > ( ), _Iter_cat_t < _FwdIt2 > ( ) );
 for ( _FwdIt1 _Next1 = _First1; _Next1 != _Last1; ++ _Next1 )
  if ( _Next1 == _Find_pr ( _First1, _Next1, * _Next1, _Pred ) )
   {
   _Iter_diff_t < _FwdIt2 > _Count2 = _Count_pr ( _First2, _Last2, * _Next1, _Pred );
   if ( _Count2 == 0 )
    return ( false );
   _FwdIt1 _Skip1 = :: std :: next ( _Next1 );
   _Iter_diff_t < _FwdIt1 > _Count1 = _Count_pr ( _Skip1, _Last1, * _Next1, _Pred ) + 1;
   if ( _Count2 != _Count1 )
    return ( false );
   }

 return ( true );
 }
#line 3386 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt1,
 class _FwdIt2,
 class _Pr > inline
 bool _Is_permutation_unchecked ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _Pr & _Pred )
 {
 for (; _First1 != _Last1; ++ _First1, ( void ) ++ _First2 )
  if ( ! _Pred ( * _First1, * _First2 ) )
   {
   _FwdIt2 _Last2 = :: std :: next ( _First2,
    :: std :: distance ( _First1, _Last1 ) );
   return ( _Check_match_counts ( _First1, _Last1,
    _First2, _Last2, _Pred ) );
   }

 return ( true );
 }
#line 3404 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt1,
 class _FwdIt2,
 class _Pr > inline
 bool _Is_permutation_no_deprecate1 ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _Pr & _Pred, forward_iterator_tag, forward_iterator_tag )
 {
 return ( _Is_permutation_unchecked ( _First1, _Last1, _Unchecked_idl0 ( _First2 ), _Pred ) );
 }
#line 3413 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt1,
 class _FwdIt2,
 class _Pr > inline
 bool _Is_permutation_no_deprecate1 ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _Pr & _Pred, random_access_iterator_tag, random_access_iterator_tag )
 {
 ;
 return ( _Is_permutation_unchecked ( _First1, _Last1, _Unchecked ( _First2 ), _Pred ) );
 }
#line 3423 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt1,
 class _FwdIt2,
 class _Pr > inline
 bool _Is_permutation_no_deprecate ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _Pr & _Pred )
 {
 ;
 ;
 return ( _Is_permutation_no_deprecate1 ( _Unchecked ( _First1 ), _Unchecked ( _Last1 ),
  _First2, _Pred, _Iter_cat_t < _FwdIt1 > ( ), _Iter_cat_t < _FwdIt2 > ( ) ) );
 }
#line 3435 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt1,
 class _FwdIt2,
 class _Pr > inline
 bool is_permutation ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _Pr _Pred )
 {
 struct _Unchecked_iterators { static void _Deprecate ( false_type ) { } static void _Deprecate ( true_type ) { } }; ( _Unchecked_iterators :: _Deprecate ( _Is_checked ( _First2 ) ) );
 return ( _Is_permutation_no_deprecate ( _First1, _Last1, _First2, _Pred ) );
 }
#line 3460 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt1,
 class _FwdIt2 > inline
 bool is_permutation ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2 )
 {
 return ( :: std :: is_permutation ( _First1, _Last1,
  _First2, equal_to < > ( ) ) );
 }
#line 3482 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt1,
 class _FwdIt2,
 class _Pr > inline
 bool _Is_permutation_unchecked ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr & _Pred,
  forward_iterator_tag, forward_iterator_tag )
 {

 ;
 for (; _First1 != _Last1 && _First2 != _Last2; ++ _First1, ( void ) ++ _First2 )
  if ( ! _Pred ( * _First1, * _First2 ) )
   {
   if ( :: std :: distance ( _First1, _Last1 )
    != :: std :: distance ( _First2, _Last2 ) )
    return ( false );
   else
    return ( _Check_match_counts ( _First1, _Last1,
     _First2, _Last2, _Pred ) );
   }

 return ( _First1 == _Last1 && _First2 == _Last2 );
 }
#line 3505 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt1,
 class _FwdIt2,
 class _Pr > inline
 bool _Is_permutation_unchecked ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr & _Pred,
  random_access_iterator_tag, random_access_iterator_tag )
 {

 if ( _Last1 - _First1 != _Last2 - _First2 )
  return ( false );
 ;
 return ( _Is_permutation_unchecked ( _First1, _Last1, _First2, _Pred ) );
 }
#line 3519 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt1,
 class _FwdIt2,
 class _Pr > inline
 bool is_permutation ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred )
 {

 ;
 ;
 return ( _Is_permutation_unchecked ( _Unchecked ( _First1 ), _Unchecked ( _Last1 ),
  _Unchecked ( _First2 ), _Unchecked ( _Last2 ), _Pred,
  _Iter_cat_t < _FwdIt1 > ( ), _Iter_cat_t < _FwdIt2 > ( ) ) );
 }
#line 3534 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt1,
 class _FwdIt2 > inline
 bool is_permutation ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2 )
 {
 return ( :: std :: is_permutation ( _First1, _Last1,
  _First2, _Last2, equal_to < > ( ) ) );
 }
#line 3544 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _BidIt > inline
 void _Reverse_unchecked ( _BidIt _First, _BidIt _Last )
 {
 for (; _First != _Last && _First != -- _Last; ++ _First )
  :: std :: iter_swap ( _First, _Last );
 }
#line 3551 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _BidIt > inline
 void reverse ( _BidIt _First, _BidIt _Last )
 {
 ;
 _Reverse_unchecked ( _Unchecked ( _First ), _Unchecked ( _Last ) );
 }
#line 3559 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt > inline
 _FwdIt _Rotate_unchecked1 ( _FwdIt _First, _FwdIt _Mid, _FwdIt _Last,
  forward_iterator_tag )
 {
 for ( _FwdIt _Next = _Mid, _Res = _Last;; )
  {
  :: std :: iter_swap ( _First, _Next );
  if ( ++ _First == _Mid )
   {
   if ( ++ _Next == _Last )
    return ( _Res == _Last ? _Mid : _Res );
   else
    _Mid = _Next;
   }
  else if ( ++ _Next == _Last )
   {
   if ( _Res == _Last )
    _Res = _First;
   _Next = _Mid;
   }
  }
 }
#line 3582 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _BidIt > inline
 pair < _BidIt, _BidIt > _Reverse_until_sentinel_unchecked (
  _BidIt _First, _BidIt _Sentinel, _BidIt _Last )
 {
 while ( _First != _Sentinel && _Last != _Sentinel )
  :: std :: iter_swap ( _First ++, -- _Last );
 return ( :: std :: make_pair ( _First, _Last ) );
 }
#line 3591 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _BidIt > inline
 _BidIt _Rotate_unchecked1 ( _BidIt _First, _BidIt _Mid, _BidIt _Last,
  bidirectional_iterator_tag )
 {
 _Reverse_unchecked ( _First, _Mid );
 _Reverse_unchecked ( _Mid, _Last );
 pair < _BidIt, _BidIt > _Tmp = _Reverse_until_sentinel_unchecked ( _First, _Mid, _Last );
 _Reverse_unchecked ( _Tmp . first, _Tmp . second );
 return ( _Mid != _Tmp . first ? _Tmp . first : _Tmp . second );
 }
#line 3602 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _RanIt > inline
 _RanIt _Rotate_unchecked1 ( _RanIt _First, _RanIt _Mid, _RanIt _Last,
  random_access_iterator_tag )
 {
 _Reverse_unchecked ( _First, _Mid );
 _Reverse_unchecked ( _Mid, _Last );
 _Reverse_unchecked ( _First, _Last );
 return ( _First + ( _Last - _Mid ) );
 }
#line 3612 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt > inline
 _FwdIt _Rotate_unchecked ( _FwdIt _First, _FwdIt _Mid, _FwdIt _Last )
 {
 if ( _First == _Mid )
  return ( _Last );
 if ( _Mid == _Last )
  return ( _First );
 return ( _Rotate_unchecked1 ( _First, _Mid, _Last, _Iter_cat_t < _FwdIt > ( ) ) );
 }
#line 3622 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _FwdIt > inline
 _FwdIt rotate ( _FwdIt _First, _FwdIt _Mid, _FwdIt _Last )
 {
 ;
 ;
 return ( _Rechecked ( _First,
  _Rotate_unchecked ( _Unchecked ( _First ), _Unchecked ( _Mid ),
  _Unchecked ( _Last ) ) ) );
 }
#line 3633 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Diff,
 class _Urng >
 class _Rng_from_urng
 {
public :
 typedef typename make_unsigned < _Diff > :: type _Ty0;
 typedef typename _Urng :: result_type _Ty1;

 typedef typename _If < sizeof ( _Ty1 ) < sizeof ( _Ty0 ),
  _Ty0, _Ty1 > :: type _Udiff;


 explicit _Rng_from_urng ( _Urng & _Func )
  : _Ref ( _Func ), _Bits ( 8 * sizeof ( _Udiff ) ), _Bmask ( _Udiff ( - 1 ) )
  {
  for (; ( _Urng :: max ) ( ) - ( _Urng :: min ) ( ) < _Bmask; _Bmask >>= 1 )
   -- _Bits;
  }

 _Diff operator ( ) ( _Diff _Index )
  {
  for (;; )
   {
   _Udiff _Ret = 0;
   _Udiff _Mask = 0;

   while ( _Mask < _Udiff ( _Index - 1 ) )
    {
    _Ret <<= _Bits - 1;
    _Ret <<= 1;
    _Ret |= _Get_bits ( );
    _Mask <<= _Bits - 1;
    _Mask <<= 1;
    _Mask |= _Bmask;
    }


   if ( _Ret / _Index < _Mask / _Index
    || _Mask % _Index == _Udiff ( _Index - 1 ) )
    return ( _Ret % _Index );
   }
  }

 _Udiff _Get_all_bits ( )
  {
  _Udiff _Ret = 0;

  for ( size_t _Num = 0; _Num < 8 * sizeof ( _Udiff );
   _Num += _Bits )
   {
   _Ret <<= _Bits - 1;
   _Ret <<= 1;
   _Ret |= _Get_bits ( );
   }

  return ( _Ret );
  }

 _Rng_from_urng ( const _Rng_from_urng & ) = delete;
 _Rng_from_urng & operator = ( const _Rng_from_urng & ) = delete;

private :
 _Udiff _Get_bits ( )
  {
  for (;; )
   {
   _Udiff _Val = _Ref ( ) - ( _Urng :: min ) ( );

   if ( _Val <= _Bmask )
    return ( _Val );
   }
  }

 _Urng & _Ref;
 size_t _Bits;
 _Udiff _Bmask;
 };
#line 3712 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template < class _Elem >
 class __declspec ( dllimport ) _Yarn
 {
public :
 typedef _Yarn < _Elem > _Myt;

  _Yarn ( )
  : _Myptr ( 0 ), _Nul ( 0 )
  {
  }

  _Yarn ( const _Myt & _Right )
  : _Myptr ( 0 ), _Nul ( 0 )
  {
  * this = _Right;
  }

  _Yarn ( const _Elem * _Right )
  : _Myptr ( 0 ), _Nul ( 0 )
  {
  * this = _Right;
  }

 _Myt & operator = ( const _Myt & _Right )
  {
  return ( * this = _Right . _Myptr );
  }

 _Myt & operator = ( const _Elem * _Right )
  {
  if ( _Myptr != _Right )
   {
   _Tidy ( );

   if ( _Right != 0 )
    {
    const _Elem * _Ptr = _Right;
    while ( * _Ptr != ( _Elem ) 0 )
     ++ _Ptr;
    size_t _Count = ( ( const char * ) ++ _Ptr - ( const char * ) _Right );






    _Myptr = ( _Elem * ) :: malloc ( _Count );


    if ( _Myptr != 0 )
     :: memcpy ( _Myptr, _Right, _Count );
    }
   }

  return ( * this );
  }

  ~ _Yarn ( ) noexcept
  {
  _Tidy ( );
  }

 bool empty ( ) const
  {
  return ( _Myptr == 0 );
  }

 const _Elem * c_str ( ) const
  {
  return ( _Myptr != 0 ? _Myptr : & _Nul );
  }

 bool _Empty ( ) const
  {
  return ( _Myptr == 0 );
  }

 const _Elem * _C_str ( ) const
  {
  return ( _Myptr != 0 ? _Myptr : & _Nul );
  }

private :
 void _Tidy ( )
  {
  if ( _Myptr != 0 )





   :: free ( _Myptr );


  _Myptr = 0;
  }

 _Elem * _Myptr;
 _Elem _Nul;
 };
#line 3814 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Ty, class 
#line 3815 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Alloc> 
#line 3816 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct _Has_allocator_type { 
#line 3818 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Uty> static auto _Fn(int)->is_convertible< _Alloc, typename _Uty::allocator_type> ; 
#line 3822 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Uty> static auto _Fn(_Wrap_int)->false_type; 
#line 3826 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
typedef decltype((_Fn< _Ty> (0))) type; 
#line 3827 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 3830 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct allocator_arg_t { 
#line 3832 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 3834 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
constexpr allocator_arg_t allocator_arg{}; 
#line 3836 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
[[noreturn]] __declspec(dllimport) void __cdecl _Xbad_alloc(); 
#line 3837 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
[[noreturn]] __declspec(dllimport) void __cdecl _Xinvalid_argument(const char *); 
#line 3838 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
[[noreturn]] __declspec(dllimport) void __cdecl _Xlength_error(const char *); 
#line 3839 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
[[noreturn]] __declspec(dllimport) void __cdecl _Xout_of_range(const char *); 
#line 3840 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
[[noreturn]] __declspec(dllimport) void __cdecl _Xoverflow_error(const char *); 
#line 3841 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
[[noreturn]] __declspec(dllimport) void __cdecl _Xruntime_error(const char *); 
#line 3842 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}
#line 3844 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
namespace std { 
#line 3846 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Ty, class 
#line 3847 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Alloc> 
#line 3848 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
struct uses_allocator : public _Has_allocator_type< _Ty, _Alloc> ::type { 
#line 3851 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}; 
#line 3854 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
template< class _Ty, class 
#line 3855 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
_Alloc> constexpr bool 
#line 3856 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
uses_allocator_v = (uses_allocator< _Ty, _Alloc> ::value); 
#line 3858 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}
#line 3860 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
#pragma warning(pop)
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
#pragma warning(push,3)
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
#pragma warning(disable: 4100)
#line 3861 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
#pragma pack ( pop )
#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
#pragma pack ( push, 8 )
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
namespace std { 
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
__declspec(allocator) inline void *_Allocate(size_t _Count, size_t _Sz, bool 
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Try_aligned_allocation = true) 
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
{ 
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
void *_Ptr = (0); 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
if (_Count == (0)) { 
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
return _Ptr; }  
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
if ((((size_t)(-1)) / _Sz) < _Count) { 
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Xbad_alloc(); }  
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
const size_t _User_size = _Count * _Sz; 
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
if (_Try_aligned_allocation && ((4096) <= _User_size)) 
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
{ 
#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
static_assert((sizeof(void *) < (32)), "Big allocations should at least match vector register size");
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
const size_t _Block_size = ((sizeof(void *) + (32)) - (1)) + _User_size; 
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
if (_Block_size <= _User_size) { 
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Xbad_alloc(); }  
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
const uintptr_t _Ptr_container = reinterpret_cast< uintptr_t>(::operator new(_Block_size)); 
#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
{ if (!(_Ptr_container != (0))) { (void)0; ::_invalid_parameter_noinfo_noreturn(); }  ; } ; 
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Ptr = (reinterpret_cast< void *>((_Ptr_container + ((sizeof(void *) + (32)) - (1))) & (~(32 - 1)))); 
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
((static_cast< uintptr_t *>(_Ptr))[-1]) = _Ptr_container; 
#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
} else 
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
{ 
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Ptr = ::operator new(_User_size); 
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
{ if (!(_Ptr != (0))) { (void)0; ::_invalid_parameter_noinfo_noreturn(); }  ; } ; 
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}  
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
return _Ptr; 
#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
} 
#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
inline void _Deallocate(void *_Ptr, size_t _Count, size_t _Sz) 
#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
{ 
#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
{ if (!(_Count <= (((size_t)(-1)) / _Sz))) { (void)0; ::_invalid_parameter_noinfo_noreturn(); }  ; } ; 
#line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
const size_t _User_size = _Count * _Sz; 
#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
if ((4096) <= _User_size) 
#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
{ 
#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
const uintptr_t _Ptr_user = reinterpret_cast< uintptr_t>(_Ptr); 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
{ if (!((_Ptr_user & (32 - 1)) == (0))) { (void)0; ::_invalid_parameter_noinfo_noreturn(); }  ; } ; 
#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *); 
#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
const uintptr_t _Ptr_container = *(reinterpret_cast< uintptr_t *>(_Ptr_ptr)); 
#line 114 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
{ if (!(_Ptr_container < _Ptr_user)) { (void)0; ::_invalid_parameter_noinfo_noreturn(); }  ; } ; 
#line 121 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
{ if (!(sizeof(void *) <= (_Ptr_user - _Ptr_container))) { (void)0; ::_invalid_parameter_noinfo_noreturn(); }  ; } ; 
#line 125 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
{ if (!((_Ptr_user - _Ptr_container) <= ((sizeof(void *) + (32)) - (1)))) { (void)0; ::_invalid_parameter_noinfo_noreturn(); }  ; } ; 
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Ptr = (reinterpret_cast< void *>(_Ptr_container)); 
#line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}  
#line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
::operator delete(_Ptr); 
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
} 
#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Ty1,
 class _Ty2 > inline
 void _Construct ( _Ty1 * _Ptr, _Ty2 && _Val )
 {
 void * _Vptr = _Ptr;
 :: new ( _Vptr ) _Ty1 ( :: std :: forward < _Ty2 > ( _Val ) );
 }
#line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Ty1 > inline
 void _Construct ( _Ty1 * _Ptr )
 {
 void * _Vptr = _Ptr;

 :: new ( _Vptr ) _Ty1 ( );
 }
#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Alty> 
#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Is_simple_alloc : public _Cat_base< ((((is_same< typename _Alty::size_type, unsigned __int64> ::value && is_same< typename _Alty::difference_type, __int64> ::value) && is_same< typename _Alty::pointer, typename _Alty::value_type *> ::value) && is_same< typename _Alty::const_pointer, const typename _Alty::value_type *> ::value) && is_same< typename _Alty::reference, typename _Alty::value_type &> ::value) && is_same< typename _Alty::const_reference, const typename _Alty::value_type &> ::value>  { 
#line 166 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}; 
#line 169 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Value_type> 
#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Simple_types { 
#line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
typedef _Value_type value_type; 
#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
typedef size_t size_type; 
#line 174 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
typedef ptrdiff_t difference_type; 
#line 175 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
typedef value_type *pointer; 
#line 176 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
typedef const value_type *const_pointer; 
#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
typedef value_type &reference; 
#line 178 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
typedef const value_type &const_reference; 
#line 179 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}; 
#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Alty, class 
#line 183 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Pointer> 
#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Get_voidptr { 
#line 186 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
typedef typename _Alty::template rebind< void> ::other _Alvoid; 
#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
typedef typename _Alvoid::pointer type; 
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}; 
#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Alty, class 
#line 191 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Ty> 
#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Get_voidptr< _Alty, _Ty *>  { 
#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
typedef void *type; 
#line 195 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}; 
#line 198 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Ty> struct _Get_first_parameter; 
#line 201 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< template< class , class ...>  class _Ty, class 
#line 202 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_First, class ...
#line 203 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Rest> 
#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Get_first_parameter< _Ty< _First, _Rest...> >  { 
#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
typedef _First type; 
#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}; 
#line 210 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Newfirst, class 
#line 211 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Ty> struct _Replace_first_parameter; 
#line 214 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Newfirst, 
#line 215 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class , class ...>  class _Ty, class 
#line 216 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_First, class ...
#line 217 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Rest> 
#line 218 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Replace_first_parameter< _Newfirst, _Ty< _First, _Rest...> >  { 
#line 220 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
typedef _Ty< _Newfirst, _Rest...>  type; 
#line 221 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}; 
#line 224 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Ty> 
#line 225 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Get_element_type { 
#line 226 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Uty> static auto _Fn(int)->_Identity< typename _Uty::element_type> ; template< class _Uty> static auto _Fn(_Wrap_int)->_Identity< typename _Get_first_parameter< _Uty> ::type> ; typedef decltype((_Fn< _Ty> (0))) _Decltype; typedef typename _Decltype::type type; }; 
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Ty> 
#line 231 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Get_ptr_difference_type { 
#line 232 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Uty> static auto _Fn(int)->_Identity< typename _Uty::difference_type> ; template< class _Uty> static auto _Fn(_Wrap_int)->_Identity< __int64> ; typedef decltype((_Fn< _Ty> (0))) _Decltype; typedef typename _Decltype::type type; }; 
#line 236 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Ty, class 
#line 237 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Other> 
#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Get_rebind_type { 
#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Uty> static auto _Fn(int)->_Identity< typename _Uty::template rebind< _Other> ::other> ; template< class _Uty> static auto _Fn(_Wrap_int)->_Identity< typename _Replace_first_parameter< _Other, _Uty> ::type> ; typedef decltype((_Fn< _Ty> (0))) _Decltype; typedef typename _Decltype::type type; }; 
#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Ty >
 struct pointer_traits
 {
 typedef typename _Get_element_type < _Ty > :: type element_type;
 typedef _Ty pointer;
 typedef typename _Get_ptr_difference_type < _Ty > :: type difference_type;

 template < class _Other >
  using rebind = typename _Get_rebind_type < _Ty, _Other > :: type;

 typedef typename _If < is_void < element_type > :: value,
  char &,
  typename add_lvalue_reference < element_type > :: type > :: type _Reftype;

 static pointer pointer_to ( _Reftype _Val )
  {
  return ( _Ty :: pointer_to ( _Val ) );
  }
 };
#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Ty >
 struct pointer_traits < _Ty * >
 {
 typedef _Ty element_type;
 typedef _Ty * pointer;
 typedef ptrdiff_t difference_type;

 template < class _Other >
  using rebind = _Other *;

 typedef typename _If < is_void < _Ty > :: value,
  char &,
  typename add_lvalue_reference < _Ty > :: type > :: type _Reftype;

 static pointer pointer_to ( _Reftype _Val )
  {
  return ( :: std :: addressof ( _Val ) );
  }
 };
#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Ptrty > inline
 void _Destroy ( _Ptrty _Ptr )
 {
 typedef typename pointer_traits < _Ptrty > :: element_type _Ty;
 _Ptr -> ~ _Ty ( );
 }
#line 294 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Ptrty > inline
 auto _Const_cast ( _Ptrty _Ptr )
 {
 using _Elem = typename pointer_traits < _Ptrty > :: element_type;
 using _Modifiable = remove_const_t < _Elem >;
 using _Dest = typename pointer_traits < _Ptrty > :: template rebind < _Modifiable >;

 return ( pointer_traits < _Dest > :: pointer_to ( const_cast < _Modifiable & > ( * _Ptr ) ) );
 }
#line 304 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Ty > inline
 auto _Const_cast ( _Ty * _Ptr )
 {
 return ( const_cast < remove_const_t < _Ty > * > ( _Ptr ) );
 }
#line 312 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Ty> 
#line 313 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Get_pointer_type { 
#line 314 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Uty> static auto _Fn(int)->_Identity< typename _Uty::pointer> ; template< class _Uty> static auto _Fn(_Wrap_int)->_Identity< typename _Ty::value_type *> ; typedef decltype((_Fn< _Ty> (0))) _Decltype; typedef typename _Decltype::type type; }; 
#line 318 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Ty> 
#line 319 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Get_const_pointer_type { 
#line 320 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Uty> static auto _Fn(int)->_Identity< typename _Uty::const_pointer> ; template< class _Uty> static auto _Fn(_Wrap_int)->_Identity< typename pointer_traits< typename _Get_pointer_type< _Ty> ::type> ::template rebind< const typename _Ty::value_type> > ; typedef decltype((_Fn< _Ty> (0))) _Decltype; typedef typename _Decltype::type type; }; 
#line 325 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Ty> 
#line 326 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Get_void_pointer_type { 
#line 327 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Uty> static auto _Fn(int)->_Identity< typename _Uty::void_pointer> ; template< class _Uty> static auto _Fn(_Wrap_int)->_Identity< typename pointer_traits< typename _Get_pointer_type< _Ty> ::type> ::template rebind< void> > ; typedef decltype((_Fn< _Ty> (0))) _Decltype; typedef typename _Decltype::type type; }; 
#line 332 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Ty> 
#line 333 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Get_const_void_pointer_type { 
#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Uty> static auto _Fn(int)->_Identity< typename _Uty::const_void_pointer> ; template< class _Uty> static auto _Fn(_Wrap_int)->_Identity< typename pointer_traits< typename _Get_pointer_type< _Ty> ::type> ::template rebind< const void> > ; typedef decltype((_Fn< _Ty> (0))) _Decltype; typedef typename _Decltype::type type; }; 
#line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Ty> 
#line 340 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Get_difference_type { 
#line 341 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Uty> static auto _Fn(int)->_Identity< typename _Uty::difference_type> ; template< class _Uty> static auto _Fn(_Wrap_int)->_Identity< typename _Get_ptr_difference_type< typename _Get_pointer_type< _Ty> ::type> ::type> ; typedef decltype((_Fn< _Ty> (0))) _Decltype; typedef typename _Decltype::type type; }; 
#line 346 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Ty> 
#line 347 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Get_size_type { 
#line 348 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Uty> static auto _Fn(int)->_Identity< typename _Uty::size_type> ; template< class _Uty> static auto _Fn(_Wrap_int)->_Identity< typename make_unsigned< typename _Get_difference_type< _Ty> ::type> ::type> ; typedef decltype((_Fn< _Ty> (0))) _Decltype; typedef typename _Decltype::type type; }; 
#line 353 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Ty> 
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Get_propagate_on_container_copy { 
#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Uty> static auto _Fn(int)->_Identity< typename _Uty::propagate_on_container_copy_assignment> ; template< class _Uty> static auto _Fn(_Wrap_int)->_Identity< integral_constant< bool, false> > ; typedef decltype((_Fn< _Ty> (0))) _Decltype; typedef typename _Decltype::type type; }; 
#line 359 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Ty> 
#line 360 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Get_propagate_on_container_move { 
#line 361 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Uty> static auto _Fn(int)->_Identity< typename _Uty::propagate_on_container_move_assignment> ; template< class _Uty> static auto _Fn(_Wrap_int)->_Identity< integral_constant< bool, false> > ; typedef decltype((_Fn< _Ty> (0))) _Decltype; typedef typename _Decltype::type type; }; 
#line 365 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Ty> 
#line 366 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Get_propagate_on_container_swap { 
#line 367 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Uty> static auto _Fn(int)->_Identity< typename _Uty::propagate_on_container_swap> ; template< class _Uty> static auto _Fn(_Wrap_int)->_Identity< integral_constant< bool, false> > ; typedef decltype((_Fn< _Ty> (0))) _Decltype; typedef typename _Decltype::type type; }; 
#line 371 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Ty> 
#line 372 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Get_is_always_equal { 
#line 373 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Uty> static auto _Fn(int)->_Identity< typename _Uty::is_always_equal> ; template< class _Uty> static auto _Fn(_Wrap_int)->_Identity< typename is_empty< _Ty> ::type> ; typedef decltype((_Fn< _Ty> (0))) _Decltype; typedef typename _Decltype::type type; }; 
#line 377 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Ty> class allocator; 
#line 379 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Alloc >
 struct _Wrap_alloc;
#line 382 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Alloc> 
#line 383 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Unwrap_alloc { 
#line 385 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
typedef _Alloc type; 
#line 386 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}; 
#line 388 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Alloc> 
#line 389 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Unwrap_alloc< _Wrap_alloc< _Alloc> >  { 
#line 391 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
typedef _Alloc type; 
#line 392 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}; 
#line 396 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Alloc> using _Unwrap_alloc_t = typename _Unwrap_alloc< _Alloc> ::type; 
#line 401 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Alloc, class 
#line 402 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
 = void> 
#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Is_default_allocator : public false_type { 
#line 406 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}; 
#line 408 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Ty> 
#line 409 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Is_default_allocator< allocator< _Ty> , typename allocator< _Ty> ::_Not_user_specialized>  : public true_type { 
#line 412 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}; 
#line 415 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Alloc_allocate { 
#line 419 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Alloc,
  class _Size_type,
  class _Const_void_pointer >
  static auto _Fn ( int, _Alloc & _Al,
   _Size_type _Count,
   _Const_void_pointer _Hint )
   -> decltype ( _Al . allocate ( _Count, _Hint ) )
  {
  return ( _Al . allocate ( _Count, _Hint ) );
  }
#line 430 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Alloc,
  class _Size_type,
  class _Const_void_pointer >
  static auto _Fn ( _Wrap_int, _Alloc & _Al,
   _Size_type _Count,
   _Const_void_pointer )
   -> decltype ( _Al . allocate ( _Count ) )
  {
  return ( _Al . allocate ( _Count ) );
  }
#line 440 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}; 
#line 443 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Has_no_alloc_construct_tag { 
#line 445 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}; 
#line 447 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Void, class ...
#line 448 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Types> 
#line 449 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Has_no_alloc_construct : public true_type { 
#line 452 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}; 
#line 454 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Alloc, class 
#line 455 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Ptr, class ...
#line 456 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Args> 
#line 457 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Has_no_alloc_construct< void_t< _Has_no_alloc_construct_tag, decltype(((std::declval< _Alloc &> ().construct(std::declval< _Ptr> (), std::declval< _Args> ()...))))> , _Alloc, _Ptr, _Args...>  : public false_type { 
#line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}; 
#line 466 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Alloc, class 
#line 467 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Ptr, class ...
#line 468 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Args> using _Uses_default_construct = disjunction< _Is_default_allocator< _Alloc> , _Has_no_alloc_construct< void, _Alloc, _Ptr, _Args...> > ; 
#line 473 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Alloc, class 
#line 474 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Ptr, class ...
#line 475 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Args> using _Uses_default_construct_t = typename disjunction< _Is_default_allocator< _Alloc> , _Has_no_alloc_construct< void, _Alloc, _Ptr, _Args...> > ::type; 
#line 480 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Has_no_alloc_destroy_tag { 
#line 482 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}; 
#line 484 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Alloc, class 
#line 485 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Ptr, class 
#line 486 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
 = void> 
#line 487 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Has_no_alloc_destroy : public true_type { 
#line 490 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}; 
#line 492 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Alloc, class 
#line 493 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Ptr> 
#line 494 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Has_no_alloc_destroy< _Alloc, _Ptr, void_t< _Has_no_alloc_destroy_tag, decltype(((std::declval< _Alloc &> ().destroy(std::declval< _Ptr> ()))))> >  : public false_type { 
#line 499 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}; 
#line 501 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Alloc, class 
#line 502 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Ptr> using _Uses_default_destroy = disjunction< _Is_default_allocator< _Alloc> , _Has_no_alloc_destroy< _Alloc, _Ptr> > ; 
#line 507 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Alloc, class 
#line 508 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
_Ptr> using _Uses_default_destroy_t = typename disjunction< _Is_default_allocator< _Alloc> , _Has_no_alloc_destroy< _Alloc, _Ptr> > ::type; 
#line 513 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Alloc_max_size { 
#line 515 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Ty >
  static auto _Fn ( int, const _Ty & _Al ) noexcept
   -> decltype ( _Al . max_size ( ) )
  {
  return ( _Al . max_size ( ) );
  }
#line 522 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Ty >
  static auto _Fn ( _Wrap_int, const _Ty & ) noexcept
   -> typename _Get_size_type < _Ty > :: type
  {
  return ( ( numeric_limits < typename _Get_size_type < _Ty > :: type > :: max ) ( )
   / sizeof ( typename _Ty :: value_type ) );
  }
#line 529 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}; 
#line 532 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct _Alloc_select { 
#line 536 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Ty >
  static auto _Fn ( int, const _Ty & _Al )
   -> decltype ( ( _Ty ) _Al . select_on_container_copy_construction ( ) )
  {
  return ( _Al . select_on_container_copy_construction ( ) );
  }
#line 543 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Ty >
  static auto _Fn ( _Wrap_int, const _Ty & _Al )
   -> _Ty
  {
  return ( _Al );
  }
#line 549 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}; 
#line 552 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Alloc >
 struct allocator_traits
 {
 typedef _Alloc allocator_type;
 typedef typename _Alloc :: value_type value_type;

 typedef typename _Get_pointer_type < _Alloc > :: type
  pointer;
 typedef typename _Get_const_pointer_type < _Alloc > :: type
  const_pointer;
 typedef typename _Get_void_pointer_type < _Alloc > :: type
  void_pointer;
 typedef typename _Get_const_void_pointer_type < _Alloc > :: type
  const_void_pointer;

 typedef typename _Get_size_type < _Alloc > :: type size_type;
 typedef typename _Get_difference_type < _Alloc > :: type difference_type;

 typedef typename _Get_propagate_on_container_copy < _Alloc > :: type
  propagate_on_container_copy_assignment;
 typedef typename _Get_propagate_on_container_move < _Alloc > :: type
  propagate_on_container_move_assignment;
 typedef typename _Get_propagate_on_container_swap < _Alloc > :: type
  propagate_on_container_swap;
 typedef typename _Get_is_always_equal < _Alloc > :: type
  is_always_equal;

 template < class _Other >
  using rebind_alloc = typename _Get_rebind_type < _Alloc, _Other > :: type;

 template < class _Other >
  using rebind_traits = allocator_traits < rebind_alloc < _Other > >;

 static __declspec ( allocator ) pointer allocate ( _Alloc & _Al, size_type _Count )
  {
  return ( _Al . allocate ( _Count ) );
  }

 static __declspec ( allocator ) pointer allocate ( _Alloc & _Al, size_type _Count,
  const_void_pointer _Hint )
  {
  return ( _Alloc_allocate :: _Fn ( 0, _Al, _Count, _Hint ) );
  }

 static void deallocate ( _Alloc & _Al,
  pointer _Ptr, size_type _Count )
  {
  _Al . deallocate ( _Ptr, _Count );
  }

 template < class _Ty,
  class ... _Types >
  static void _Construct1 ( true_type, _Alloc &, _Ty * _Ptr,
   _Types && ... _Args )
  {
  :: new ( static_cast < void * > ( _Ptr ) )
   _Ty ( :: std :: forward < _Types > ( _Args ) ... );
  }

 template < class _Ty,
  class ... _Types >
  static void _Construct1 ( false_type, _Alloc & _Al, _Ty * _Ptr,
   _Types && ... _Args )
  {
  _Al . construct ( _Ptr, :: std :: forward < _Types > ( _Args ) ... );
  }

 template < class _Ty,
  class ... _Types >
  static void construct ( _Alloc & _Al, _Ty * _Ptr,
   _Types && ... _Args )
  {
  _Construct1 ( _Uses_default_construct_t < _Unwrap_alloc_t < _Alloc >, _Ty *, _Types ... > ( ),
   _Al, _Ptr, :: std :: forward < _Types > ( _Args ) ... );
  }

 template < class _Ty >
  static void _Destroy1 ( _Alloc &, _Ty * _Ptr, true_type )
  {
  _Ptr -> ~ _Ty ( );
  }

 template < class _Ty >
  static void _Destroy1 ( _Alloc & _Al, _Ty * _Ptr, false_type )
  {
  _Al . destroy ( _Ptr );
  }

 template < class _Ty >
  static void destroy ( _Alloc & _Al, _Ty * _Ptr )
  {
  _Destroy1 ( _Al, _Ptr, _Uses_default_destroy_t < _Unwrap_alloc_t < _Alloc >, _Ty * > ( ) );
  }

 static size_type max_size ( const _Alloc & _Al ) noexcept
  {
  return ( _Alloc_max_size :: _Fn ( 0, _Al ) );
  }

 static _Alloc select_on_container_copy_construction (
  const _Alloc & _Al )
  {
  return ( _Alloc_select :: _Fn ( 0, _Al ) );
  }
 };
#line 659 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Ty >
 class allocator
 {
public :
 static_assert ( ! is_const < _Ty > :: value,
  "The C++ Standard forbids containers of const elements because allocator<const T> is ill-formed."
                                             );

 typedef void _Not_user_specialized;

 typedef _Ty value_type;

 typedef value_type * pointer;
 typedef const value_type * const_pointer;

 typedef value_type & reference;
 typedef const value_type & const_reference;

 typedef size_t size_type;
 typedef ptrdiff_t difference_type;

 typedef true_type propagate_on_container_move_assignment;
 typedef true_type is_always_equal;

 template < class _Other >
  struct rebind
  {
  typedef allocator < _Other > other;
  };

 pointer address ( reference _Val ) const noexcept
  {
  return ( :: std :: addressof ( _Val ) );
  }

 const_pointer address ( const_reference _Val ) const noexcept
  {
  return ( :: std :: addressof ( _Val ) );
  }

 allocator ( ) noexcept
  {
  }

 allocator ( const allocator < _Ty > & ) noexcept
  {
  }

 template < class _Other >
  allocator ( const allocator < _Other > & ) noexcept
  {
  }

 template < class _Other >
  allocator < _Ty > & operator = ( const allocator < _Other > & )
  {
  return ( * this );
  }

 void deallocate ( pointer _Ptr, size_type _Count )
  {
  _Deallocate ( _Ptr, _Count, sizeof ( _Ty ) );
  }

 __declspec ( allocator ) pointer allocate ( size_type _Count )
  {
  return ( static_cast < pointer > ( _Allocate ( _Count, sizeof ( _Ty ) ) ) );
  }

 __declspec ( allocator ) pointer allocate ( size_type _Count, const void * )
  {
  return ( allocate ( _Count ) );
  }

 template < class _Objty,
  class ... _Types >
  void construct ( _Objty * _Ptr, _Types && ... _Args )
  {
  :: new ( ( void * ) _Ptr ) _Objty ( :: std :: forward < _Types > ( _Args ) ... );
  }


 template < class _Uty >
  void destroy ( _Uty * _Ptr )
  {
  _Ptr -> ~ _Uty ( );
  }

 size_t max_size ( ) const noexcept
  {
  return ( ( size_t ) ( - 1 ) / sizeof ( _Ty ) );
  }
 };
#line 755 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
#pragma pack(8)
template<> 
#line 755 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
class allocator< void>  { 
#line 758 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
public: typedef void _Not_user_specialized; 
#line 760 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
typedef void value_type; 
#line 762 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
typedef void *pointer; 
#line 763 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
typedef const void *const_pointer; 
#line 765 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template< class _Other> 
#line 766 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
struct rebind { 
#line 768 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
typedef std::allocator< _Other>  other; 
#line 769 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}; 
#line 771 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
allocator() noexcept 
#line 772 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
{ 
#line 773 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
} 
#line 775 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
allocator(const std::allocator< void>  &) noexcept 
#line 776 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
{ 
#line 777 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
} 
#line 779 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Other >
  allocator ( const allocator < _Other > & ) noexcept
  {
  }
#line 784 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Other >
  allocator < void > & operator = ( const allocator < _Other > & )
  {
  return ( * this );
  }
#line 789 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}; 
#pragma pack(8)
template < class _Ty,
 class _Other > inline
 bool operator == ( const allocator < _Ty > &,
  const allocator < _Other > & ) noexcept
 {
 return ( true );
 }
#line 799 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Ty,
 class _Other > inline
 bool operator != ( const allocator < _Ty > & _Left,
  const allocator < _Other > & _Right ) noexcept
 {
 return ( false );
 }
#line 808 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Ty >
 struct allocator_traits < allocator < _Ty > >
 {
 typedef allocator < _Ty > _Alloc;

 typedef _Alloc allocator_type;
 typedef _Ty value_type;

 typedef value_type * pointer;
 typedef const value_type * const_pointer;
 typedef void * void_pointer;
 typedef const void * const_void_pointer;

 typedef size_t size_type;
 typedef ptrdiff_t difference_type;

 typedef false_type propagate_on_container_copy_assignment;
 typedef true_type propagate_on_container_move_assignment;
 typedef false_type propagate_on_container_swap;
 typedef true_type is_always_equal;

 template < class _Other >
  using rebind_alloc = allocator < _Other >;

 template < class _Other >
  using rebind_traits = allocator_traits < allocator < _Other > >;

 static __declspec ( allocator ) pointer allocate ( _Alloc & _Al, size_type _Count )
  {
  return ( _Al . allocate ( _Count ) );
  }

 static __declspec ( allocator ) pointer allocate ( _Alloc & _Al, size_type _Count,
  const_void_pointer _Hint )
  {
  return ( _Al . allocate ( _Count, _Hint ) );
  }

 static void deallocate ( _Alloc & _Al,
  pointer _Ptr, size_type _Count )
  {
  _Al . deallocate ( _Ptr, _Count );
  }

 template < class _Objty,
  class ... _Types >
  static void construct ( _Alloc & _Al, _Objty * _Ptr,
   _Types && ... _Args )
  {
  _Al . construct ( _Ptr, :: std :: forward < _Types > ( _Args ) ... );
  }


 template < class _Uty >
  static void destroy ( _Alloc & _Al, _Uty * _Ptr )
  {
  _Al . destroy ( _Ptr );
  }

 static size_type max_size ( const _Alloc & _Al ) noexcept
  {
  return ( _Al . max_size ( ) );
  }

 static _Alloc select_on_container_copy_construction (
  const _Alloc & _Al )
  {
  return ( _Al );
  }
 };
#line 880 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Alloc >
 struct _Wrap_alloc
  : public _Alloc
 {
 typedef _Alloc _Mybase;
 typedef allocator_traits < _Alloc > _Mytraits;

 typedef typename _Mytraits :: value_type value_type;

 typedef typename _Mytraits :: pointer pointer;
 typedef typename _Mytraits :: const_pointer const_pointer;
 typedef typename _Mytraits :: void_pointer void_pointer;
 typedef typename _Mytraits :: const_void_pointer const_void_pointer;

 typedef typename _If < is_void < value_type > :: value,
  int, value_type > :: type & reference;
 typedef typename _If < is_void < const value_type > :: value,
  const int, const value_type > :: type & const_reference;

 typedef typename _Mytraits :: size_type size_type;
 typedef typename _Mytraits :: difference_type difference_type;

 typedef typename _Mytraits :: propagate_on_container_copy_assignment
  propagate_on_container_copy_assignment;
 typedef typename _Mytraits :: propagate_on_container_move_assignment
  propagate_on_container_move_assignment;
 typedef typename _Mytraits :: propagate_on_container_swap
  propagate_on_container_swap;
 typedef typename _Mytraits :: is_always_equal
  is_always_equal;

 _Wrap_alloc select_on_container_copy_construction ( _Nil = _Nil ( ) ) const
  {
  return ( _Mytraits :: select_on_container_copy_construction ( * this ) );
  }

 template < class _Other >
  struct rebind
  {
  typedef typename _Mytraits :: template rebind_alloc < _Other >
   _Other_alloc;
  typedef _Wrap_alloc < _Other_alloc > other;
  };

 pointer address ( reference _Val ) const
  {
  return ( pointer_traits < pointer > :: pointer_to ( _Val ) );
  }

 const_pointer address ( const_reference _Val ) const
  {
  return ( pointer_traits < const_pointer > :: pointer_to ( _Val ) );
  }

 _Wrap_alloc ( ) noexcept ( is_nothrow_default_constructible < _Alloc > :: value )
  : _Mybase ( )
  {
  }

 _Wrap_alloc ( const _Wrap_alloc & _Right ) noexcept
  : _Mybase ( _Right )
  {
  }

 _Wrap_alloc ( _Wrap_alloc && _Right ) noexcept
  : _Mybase ( :: std :: move ( _Right ) )
  {
  }

 template < class _Other >
  _Wrap_alloc ( _Other && _Right ) noexcept
  : _Mybase ( :: std :: forward < _Other > ( _Right ) )
  {
  }

 _Wrap_alloc & operator = ( const _Wrap_alloc & _Right )
  {
  _Mybase :: operator = ( _Right );
  return ( * this );
  }

 _Wrap_alloc & operator = ( _Wrap_alloc && _Right )
  {
  _Mybase :: operator = ( :: std :: move ( _Right ) );
  return ( * this );
  }

 template < class _Other >
  _Wrap_alloc & operator = ( _Other && _Right )
  {
  _Mybase :: operator = ( :: std :: forward < _Other > ( _Right ) );
  return ( * this );
  }

 __declspec ( allocator ) pointer allocate ( size_type _Count )
  {
  return ( _Mybase :: allocate ( _Count ) );
  }

 __declspec ( allocator ) pointer allocate ( size_type _Count,
  const_void_pointer _Hint, _Nil = _Nil ( ) )
  {
  return ( _Mytraits :: allocate ( * this, _Count, _Hint ) );
  }

 void deallocate ( pointer _Ptr, size_type _Count )
  {
  _Mybase :: deallocate ( _Ptr, _Count );
  }

 template < class _Ty,
  class ... _Types >
  void construct ( _Ty * _Ptr,
   _Types && ... _Args )
  {
  _Mytraits :: construct ( * this, _Ptr,
   :: std :: forward < _Types > ( _Args ) ... );
  }


 template < class _Ty >
  void destroy ( _Ty * _Ptr )
  {
  _Mytraits :: destroy ( * this, _Ptr );
  }

 size_type max_size ( _Nil = _Nil ( ) ) const noexcept
  {
  return ( _Mytraits :: max_size ( * this ) );
  }
 };
#line 1012 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Ty,
 class _Other > inline
 bool operator == ( const _Wrap_alloc < _Ty > & _Left,
  const _Wrap_alloc < _Other > & _Right ) noexcept
 {
 return ( static_cast < const _Ty & > ( _Left )
  == static_cast < const _Other & > ( _Right ) );
 }
#line 1021 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Ty,
 class _Other > inline
 bool operator != ( const _Wrap_alloc < _Ty > & _Left,
  const _Wrap_alloc < _Other > & _Right ) noexcept
 {
 return ( ! ( _Left == _Right ) );
 }
#line 1030 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Alty > inline
 void _Pocca ( _Alty & _Left, const _Alty & _Right, true_type ) noexcept
 {
 _Left = _Right;
 }
#line 1036 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Alty > inline
 void _Pocca ( _Alty &, const _Alty &, false_type ) noexcept
 {
 }
#line 1041 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Alty > inline
 void _Pocca ( _Alty & _Left, const _Alty & _Right ) noexcept
 {
 typename _Alty :: propagate_on_container_copy_assignment _Tag;
 _Pocca ( _Left, _Right, _Tag );
 }
#line 1049 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Alty > inline
 void _Pocma ( _Alty & _Left, _Alty & _Right, true_type ) noexcept
 {
 _Left = :: std :: move ( _Right );
 }
#line 1055 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Alty > inline
 void _Pocma ( _Alty &, _Alty &, false_type ) noexcept
 {
 }
#line 1060 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Alty > inline
 void _Pocma ( _Alty & _Left, _Alty & _Right ) noexcept
 {
 typename _Alty :: propagate_on_container_move_assignment _Tag;
 _Pocma ( _Left, _Right, _Tag );
 }
#line 1068 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Alty > inline
 void _Pocs ( _Alty & _Left, _Alty & _Right, true_type ) noexcept
 {
 _Swap_adl ( _Left, _Right );
 }
#line 1074 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Alty > inline
 void _Pocs ( _Alty & _Left, _Alty & _Right, false_type ) noexcept
 {
 if ( _Left != _Right )
  {



  :: std :: terminate ( );

  }
 }
#line 1087 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Alty > inline
 void _Pocs ( _Alty & _Left, _Alty & _Right ) noexcept
 {
 typename _Alty :: propagate_on_container_swap _Tag;
 _Pocs ( _Left, _Right, _Tag );
 }
#line 1096 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Alloc,
 class _Ptr = typename _Wrap_alloc < _Alloc > :: pointer > inline
 void _Destroy_range1 ( _Ptr _First, _Ptr _Last, _Wrap_alloc < _Alloc > & _Al, false_type )
 {
 for (; _First != _Last; ++ _First )
  _Al . destroy ( _Unfancy ( _First ) );
 }
#line 1104 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Alloc,
 class _Ptr = typename _Wrap_alloc < _Alloc > :: pointer > inline
 void _Destroy_range1 ( _Ptr, _Ptr, _Wrap_alloc < _Alloc > &, true_type )
 {

 }
#line 1111 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _Alloc,
 class _Ptr = typename _Wrap_alloc < _Alloc > :: pointer > inline
 void _Destroy_range ( _Ptr _First, _Ptr _Last, _Wrap_alloc < _Alloc > & _Al )
 {


 typedef typename _Alloc :: value_type _Val;
 _Destroy_range1 ( _First, _Last, _Al, typename conjunction <
  is_trivially_destructible < _Val >,
  _Uses_default_destroy < _Alloc, _Val * >> :: type ( ) );
 }
#line 1125 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _FwdIt > inline
 void _Destroy_range1 ( _FwdIt _First, _FwdIt _Last, false_type )
 {
 for (; _First != _Last; ++ _First )
  _Destroy ( _First );
 }
#line 1132 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _FwdIt > inline
 void _Destroy_range1 ( _FwdIt, _FwdIt, true_type )
 {

 }
#line 1138 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
template < class _FwdIt > inline
 void _Destroy_range ( _FwdIt _First, _FwdIt _Last )
 {


 _Destroy_range1 ( _First, _Last, is_trivially_destructible < _Iter_value_t < _FwdIt >> ( ) );
 }
#line 1145 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
}
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
#pragma warning(push,3)
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
#pragma pack ( push, 8 )
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
namespace std { 
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
typedef 
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
enum memory_order { 
#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
memory_order_relaxed, 
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
memory_order_consume, 
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
memory_order_acquire, 
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
memory_order_release, 
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
memory_order_acq_rel, 
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
memory_order_seq_cst
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
} memory_order; 
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
typedef _Uint32t _Uint4_t; 
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
typedef _Uint4_t _Atomic_integral_t; 
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
typedef long _Atomic_flag_t; 
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
typedef _Atomic_integral_t _Atomic_counter_t; 
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
inline _Atomic_integral_t _Get_atomic_count(const _Atomic_counter_t &_Counter) 
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
{ 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
return _Counter; 
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
} 
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
inline void _Init_atomic_counter(_Atomic_counter_t &_Counter, _Atomic_integral_t 
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
_Value) 
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
{ 
#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
_Counter = _Value; 
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
} 
#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
extern "C" {
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
__declspec(dllimport) void __cdecl _Lock_shared_ptr_spin_lock(); 
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
__declspec(dllimport) void __cdecl _Unlock_shared_ptr_spin_lock(); 
#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
}
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
}
#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
#pragma warning(pop)
#pragma pack ( pop )
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
typedef 
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
struct __declspec(align(16)) _SETJMP_FLOAT128 { 
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
unsigned __int64 Part[2]; 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
} SETJMP_FLOAT128; 
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
typedef SETJMP_FLOAT128 _JBTYPE; 
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
typedef 
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
struct _JUMP_BUFFER { 
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
unsigned __int64 Frame; 
#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
unsigned __int64 Rbx; 
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
unsigned __int64 Rsp; 
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
unsigned __int64 Rbp; 
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
unsigned __int64 Rsi; 
#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
unsigned __int64 Rdi; 
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
unsigned __int64 R12; 
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
unsigned __int64 R13; 
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
unsigned __int64 R14; 
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
unsigned __int64 R15; 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
unsigned __int64 Rip; 
#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
unsigned long MxCsr; 
#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
unsigned short FpCsr; 
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
unsigned short Spare; 
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
SETJMP_FLOAT128 Xmm6; 
#line 74 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
SETJMP_FLOAT128 Xmm7; 
#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
SETJMP_FLOAT128 Xmm8; 
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
SETJMP_FLOAT128 Xmm9; 
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
SETJMP_FLOAT128 Xmm10; 
#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
SETJMP_FLOAT128 Xmm11; 
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
SETJMP_FLOAT128 Xmm12; 
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
SETJMP_FLOAT128 Xmm13; 
#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
SETJMP_FLOAT128 Xmm14; 
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
SETJMP_FLOAT128 Xmm15; 
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
} _JUMP_BUFFER; 
#line 145 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
typedef _JBTYPE jmp_buf[16]; 
#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
int __cdecl _setjmp(jmp_buf _Buf); 
#line 162 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
#pragma warning(push)
#pragma warning(disable:4987)
__declspec(noreturn) void __cdecl longjmp(jmp_buf _Buf, int _Value) throw(...); 
#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
}
#line 168 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
#pragma warning(pop)
#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"
__pragma(pack ( pop )) 
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"
extern "C" {
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"
typedef 
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"
union __declspec(intrin_type) __declspec(align(8)) __m64 { 
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"
unsigned __int64 m64_u64; 
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"
float m64_f32[2]; 
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"
char m64_i8[8]; 
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"
short m64_i16[4]; 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"
int m64_i32[2]; 
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"
__int64 m64_i64; 
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"
unsigned char m64_u8[8]; 
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"
unsigned short m64_u16[4]; 
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"
unsigned m64_u32[2]; 
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"
} __m64; 
#line 186 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"
}
#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
typedef 
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
union __declspec(intrin_type) __declspec(align(16)) __m128 { 
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
float m128_f32[4]; 
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
unsigned __int64 m128_u64[2]; 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
char m128_i8[16]; 
#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
short m128_i16[8]; 
#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
int m128_i32[4]; 
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
__int64 m128_i64[2]; 
#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
unsigned char m128_u8[16]; 
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
unsigned short m128_u16[8]; 
#line 74 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
unsigned m128_u32[4]; 
#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
} __m128; 
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern "C" {
#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_add_ss(__m128 _A, __m128 _B); 
#line 197 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_add_ps(__m128 _A, __m128 _B); 
#line 198 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_sub_ss(__m128 _A, __m128 _B); 
#line 199 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_sub_ps(__m128 _A, __m128 _B); 
#line 200 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_mul_ss(__m128 _A, __m128 _B); 
#line 201 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_mul_ps(__m128 _A, __m128 _B); 
#line 202 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_div_ss(__m128 _A, __m128 _B); 
#line 203 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_div_ps(__m128 _A, __m128 _B); 
#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_sqrt_ss(__m128 _A); 
#line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_sqrt_ps(__m128 _A); 
#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_rcp_ss(__m128 _A); 
#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_rcp_ps(__m128 _A); 
#line 208 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_rsqrt_ss(__m128 _A); 
#line 209 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_rsqrt_ps(__m128 _A); 
#line 210 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_min_ss(__m128 _A, __m128 _B); 
#line 211 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_min_ps(__m128 _A, __m128 _B); 
#line 212 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_max_ss(__m128 _A, __m128 _B); 
#line 213 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_max_ps(__m128 _A, __m128 _B); 
#line 219 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_and_ps(__m128 _A, __m128 _B); 
#line 220 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_andnot_ps(__m128 _A, __m128 _B); 
#line 221 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_or_ps(__m128 _A, __m128 _B); 
#line 222 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_xor_ps(__m128 _A, __m128 _B); 
#line 228 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmpeq_ss(__m128 _A, __m128 _B); 
#line 229 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmpeq_ps(__m128 _A, __m128 _B); 
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmplt_ss(__m128 _A, __m128 _B); 
#line 231 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmplt_ps(__m128 _A, __m128 _B); 
#line 232 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmple_ss(__m128 _A, __m128 _B); 
#line 233 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmple_ps(__m128 _A, __m128 _B); 
#line 234 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmpgt_ss(__m128 _A, __m128 _B); 
#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmpgt_ps(__m128 _A, __m128 _B); 
#line 236 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmpge_ss(__m128 _A, __m128 _B); 
#line 237 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmpge_ps(__m128 _A, __m128 _B); 
#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmpneq_ss(__m128 _A, __m128 _B); 
#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmpneq_ps(__m128 _A, __m128 _B); 
#line 240 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmpnlt_ss(__m128 _A, __m128 _B); 
#line 241 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmpnlt_ps(__m128 _A, __m128 _B); 
#line 242 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmpnle_ss(__m128 _A, __m128 _B); 
#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmpnle_ps(__m128 _A, __m128 _B); 
#line 244 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmpngt_ss(__m128 _A, __m128 _B); 
#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmpngt_ps(__m128 _A, __m128 _B); 
#line 246 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmpnge_ss(__m128 _A, __m128 _B); 
#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmpnge_ps(__m128 _A, __m128 _B); 
#line 248 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmpord_ss(__m128 _A, __m128 _B); 
#line 249 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmpord_ps(__m128 _A, __m128 _B); 
#line 250 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmpunord_ss(__m128 _A, __m128 _B); 
#line 251 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cmpunord_ps(__m128 _A, __m128 _B); 
#line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern int _mm_comieq_ss(__m128 _A, __m128 _B); 
#line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern int _mm_comilt_ss(__m128 _A, __m128 _B); 
#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern int _mm_comile_ss(__m128 _A, __m128 _B); 
#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern int _mm_comigt_ss(__m128 _A, __m128 _B); 
#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern int _mm_comige_ss(__m128 _A, __m128 _B); 
#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern int _mm_comineq_ss(__m128 _A, __m128 _B); 
#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern int _mm_ucomieq_ss(__m128 _A, __m128 _B); 
#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern int _mm_ucomilt_ss(__m128 _A, __m128 _B); 
#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern int _mm_ucomile_ss(__m128 _A, __m128 _B); 
#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern int _mm_ucomigt_ss(__m128 _A, __m128 _B); 
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern int _mm_ucomige_ss(__m128 _A, __m128 _B); 
#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern int _mm_ucomineq_ss(__m128 _A, __m128 _B); 
#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern int _mm_cvt_ss2si(__m128 _A); 
#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern int _mm_cvtt_ss2si(__m128 _A); 
#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cvt_si2ss(__m128, int); 
#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern float _mm_cvtss_f32(__m128 _A); 
#line 287 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __int64 _mm_cvtss_si64(__m128 _A); 
#line 288 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __int64 _mm_cvttss_si64(__m128 _A); 
#line 289 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_cvtsi64_ss(__m128 _A, __int64 _B); 
#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_shuffle_ps(__m128 _A, __m128 _B, unsigned _Imm8); 
#line 297 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_unpackhi_ps(__m128 _A, __m128 _B); 
#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_unpacklo_ps(__m128 _A, __m128 _B); 
#line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_loadh_pi(__m128, const __m64 *); 
#line 300 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_movehl_ps(__m128, __m128); 
#line 301 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_movelh_ps(__m128, __m128); 
#line 302 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern void _mm_storeh_pi(__m64 *, __m128); 
#line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_loadl_pi(__m128, const __m64 *); 
#line 304 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern void _mm_storel_pi(__m64 *, __m128); 
#line 305 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern int _mm_movemask_ps(__m128 _A); 
#line 331 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_set_ss(float _A); 
#line 332 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_set_ps1(float _A); 
#line 333 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_set_ps(float _A, float _B, float _C, float _D); 
#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_setr_ps(float _A, float _B, float _C, float _D); 
#line 335 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_setzero_ps(); 
#line 336 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_load_ss(const float * _A); 
#line 337 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_load_ps1(const float * _A); 
#line 338 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_load_ps(const float * _A); 
#line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_loadr_ps(const float * _A); 
#line 340 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_loadu_ps(const float * _A); 
#line 341 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern void _mm_store_ss(float * _V, __m128 _A); 
#line 342 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern void _mm_store_ps1(float * _V, __m128 _A); 
#line 343 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern void _mm_store_ps(float * _V, __m128 _A); 
#line 344 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern void _mm_storer_ps(float * _V, __m128 _A); 
#line 345 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern void _mm_storeu_ps(float * _V, __m128 _A); 
#line 346 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern void _mm_prefetch(const char * _A, int _Sel); 
#line 350 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern void _mm_stream_ps(float *, __m128); 
#line 351 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_move_ss(__m128 _A, __m128 _B); 
#line 353 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern void _mm_sfence(); 
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern unsigned _mm_getcsr(); 
#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern void _mm_setcsr(unsigned); 
#line 509 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
}
#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
typedef 
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
union __declspec(intrin_type) __declspec(align(16)) __m128i { 
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
char m128i_i8[16]; 
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
short m128i_i16[8]; 
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
int m128i_i32[4]; 
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
__int64 m128i_i64[2]; 
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
unsigned char m128i_u8[16]; 
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
unsigned short m128i_u16[8]; 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
unsigned m128i_u32[4]; 
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
unsigned __int64 m128i_u64[2]; 
#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
} __m128i; 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
typedef 
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
struct __declspec(intrin_type) __declspec(align(16)) __m128d { 
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
double m128d_f64[2]; 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
} __m128d; 
#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern "C" {
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_add_sd(__m128d _A, __m128d _B); 
#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_add_pd(__m128d _A, __m128d _B); 
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_sub_sd(__m128d _A, __m128d _B); 
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_sub_pd(__m128d _A, __m128d _B); 
#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_mul_sd(__m128d _A, __m128d _B); 
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_mul_pd(__m128d _A, __m128d _B); 
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_sqrt_sd(__m128d _A, __m128d _B); 
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_sqrt_pd(__m128d _A); 
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_div_sd(__m128d _A, __m128d _B); 
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_div_pd(__m128d _A, __m128d _B); 
#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_min_sd(__m128d _A, __m128d _B); 
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_min_pd(__m128d _A, __m128d _B); 
#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_max_sd(__m128d _A, __m128d _B); 
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_max_pd(__m128d _A, __m128d _B); 
#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_and_pd(__m128d _A, __m128d _B); 
#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_andnot_pd(__m128d _A, __m128d _B); 
#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_or_pd(__m128d _A, __m128d _B); 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_xor_pd(__m128d _A, __m128d _B); 
#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmpeq_sd(__m128d _A, __m128d _B); 
#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmpeq_pd(__m128d _A, __m128d _B); 
#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmplt_sd(__m128d _A, __m128d _B); 
#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmplt_pd(__m128d _A, __m128d _B); 
#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmple_sd(__m128d _A, __m128d _B); 
#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmple_pd(__m128d _A, __m128d _B); 
#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmpgt_sd(__m128d _A, __m128d _B); 
#line 112 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmpgt_pd(__m128d _A, __m128d _B); 
#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmpge_sd(__m128d _A, __m128d _B); 
#line 114 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmpge_pd(__m128d _A, __m128d _B); 
#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmpneq_sd(__m128d _A, __m128d _B); 
#line 116 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmpneq_pd(__m128d _A, __m128d _B); 
#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmpnlt_sd(__m128d _A, __m128d _B); 
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmpnlt_pd(__m128d _A, __m128d _B); 
#line 119 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmpnle_sd(__m128d _A, __m128d _B); 
#line 120 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmpnle_pd(__m128d _A, __m128d _B); 
#line 121 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmpngt_sd(__m128d _A, __m128d _B); 
#line 122 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmpngt_pd(__m128d _A, __m128d _B); 
#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmpnge_sd(__m128d _A, __m128d _B); 
#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmpnge_pd(__m128d _A, __m128d _B); 
#line 125 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmpord_pd(__m128d _A, __m128d _B); 
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmpord_sd(__m128d _A, __m128d _B); 
#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmpunord_pd(__m128d _A, __m128d _B); 
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cmpunord_sd(__m128d _A, __m128d _B); 
#line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern int _mm_comieq_sd(__m128d _A, __m128d _B); 
#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern int _mm_comilt_sd(__m128d _A, __m128d _B); 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern int _mm_comile_sd(__m128d _A, __m128d _B); 
#line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern int _mm_comigt_sd(__m128d _A, __m128d _B); 
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern int _mm_comige_sd(__m128d _A, __m128d _B); 
#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern int _mm_comineq_sd(__m128d _A, __m128d _B); 
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern int _mm_ucomieq_sd(__m128d _A, __m128d _B); 
#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern int _mm_ucomilt_sd(__m128d _A, __m128d _B); 
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern int _mm_ucomile_sd(__m128d _A, __m128d _B); 
#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern int _mm_ucomigt_sd(__m128d _A, __m128d _B); 
#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern int _mm_ucomige_sd(__m128d _A, __m128d _B); 
#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern int _mm_ucomineq_sd(__m128d _A, __m128d _B); 
#line 146 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cvtepi32_pd(__m128i _A); 
#line 147 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_cvtpd_epi32(__m128d _A); 
#line 148 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_cvttpd_epi32(__m128d _A); 
#line 149 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128 _mm_cvtepi32_ps(__m128i _A); 
#line 150 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_cvtps_epi32(__m128 _A); 
#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_cvttps_epi32(__m128 _A); 
#line 152 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128 _mm_cvtpd_ps(__m128d _A); 
#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cvtps_pd(__m128 _A); 
#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128 _mm_cvtsd_ss(__m128 _A, __m128d _B); 
#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cvtss_sd(__m128d _A, __m128 _B); 
#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern int _mm_cvtsd_si32(__m128d _A); 
#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern int _mm_cvttsd_si32(__m128d _A); 
#line 159 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cvtsi32_sd(__m128d _A, int _B); 
#line 171 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_unpackhi_pd(__m128d _A, __m128d _B); 
#line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_unpacklo_pd(__m128d _A, __m128d _B); 
#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern int _mm_movemask_pd(__m128d _A); 
#line 174 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_shuffle_pd(__m128d _A, __m128d _B, int _I); 
#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_load_pd(const double * _Dp); 
#line 181 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_load1_pd(const double * _Dp); 
#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_loadr_pd(const double * _Dp); 
#line 183 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_loadu_pd(const double * _Dp); 
#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_load_sd(const double * _Dp); 
#line 185 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_loadh_pd(__m128d _A, const double * _Dp); 
#line 186 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_loadl_pd(__m128d _A, const double * _Dp); 
#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_set_sd(double _W); 
#line 193 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_set1_pd(double _A); 
#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_set_pd(double _Z, double _Y); 
#line 195 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_setr_pd(double _Y, double _Z); 
#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_setzero_pd(); 
#line 197 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_move_sd(__m128d _A, __m128d _B); 
#line 203 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern void _mm_store_sd(double * _Dp, __m128d _A); 
#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern void _mm_store1_pd(double * _Dp, __m128d _A); 
#line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern void _mm_store_pd(double * _Dp, __m128d _A); 
#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern void _mm_storeu_pd(double * _Dp, __m128d _A); 
#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern void _mm_storer_pd(double * _Dp, __m128d _A); 
#line 208 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern void _mm_storeh_pd(double * _Dp, __m128d _A); 
#line 209 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern void _mm_storel_pd(double * _Dp, __m128d _A); 
#line 215 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_add_epi8(__m128i _A, __m128i _B); 
#line 216 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_add_epi16(__m128i _A, __m128i _B); 
#line 217 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_add_epi32(__m128i _A, __m128i _B); 
#line 221 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_add_epi64(__m128i _A, __m128i _B); 
#line 222 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_adds_epi8(__m128i _A, __m128i _B); 
#line 223 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_adds_epi16(__m128i _A, __m128i _B); 
#line 224 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_adds_epu8(__m128i _A, __m128i _B); 
#line 225 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_adds_epu16(__m128i _A, __m128i _B); 
#line 226 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_avg_epu8(__m128i _A, __m128i _B); 
#line 227 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_avg_epu16(__m128i _A, __m128i _B); 
#line 228 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_madd_epi16(__m128i _A, __m128i _B); 
#line 229 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_max_epi16(__m128i _A, __m128i _B); 
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_max_epu8(__m128i _A, __m128i _B); 
#line 231 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_min_epi16(__m128i _A, __m128i _B); 
#line 232 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_min_epu8(__m128i _A, __m128i _B); 
#line 233 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_mulhi_epi16(__m128i _A, __m128i _B); 
#line 234 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_mulhi_epu16(__m128i _A, __m128i _B); 
#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_mullo_epi16(__m128i _A, __m128i _B); 
#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_mul_epu32(__m128i _A, __m128i _B); 
#line 240 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_sad_epu8(__m128i _A, __m128i _B); 
#line 241 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_sub_epi8(__m128i _A, __m128i _B); 
#line 242 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_sub_epi16(__m128i _A, __m128i _B); 
#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_sub_epi32(__m128i _A, __m128i _B); 
#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_sub_epi64(__m128i _A, __m128i _B); 
#line 248 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_subs_epi8(__m128i _A, __m128i _B); 
#line 249 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_subs_epi16(__m128i _A, __m128i _B); 
#line 250 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_subs_epu8(__m128i _A, __m128i _B); 
#line 251 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_subs_epu16(__m128i _A, __m128i _B); 
#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_and_si128(__m128i _A, __m128i _B); 
#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_andnot_si128(__m128i _A, __m128i _B); 
#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_or_si128(__m128i _A, __m128i _B); 
#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_xor_si128(__m128i _A, __m128i _B); 
#line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_slli_si128(__m128i _A, int _Imm); 
#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_slli_epi16(__m128i _A, int _Count); 
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_sll_epi16(__m128i _A, __m128i _Count); 
#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_slli_epi32(__m128i _A, int _Count); 
#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_sll_epi32(__m128i _A, __m128i _Count); 
#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_slli_epi64(__m128i _A, int _Count); 
#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_sll_epi64(__m128i _A, __m128i _Count); 
#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_srai_epi16(__m128i _A, int _Count); 
#line 274 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_sra_epi16(__m128i _A, __m128i _Count); 
#line 275 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_srai_epi32(__m128i _A, int _Count); 
#line 276 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_sra_epi32(__m128i _A, __m128i _Count); 
#line 277 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_srli_si128(__m128i _A, int _Imm); 
#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_srli_epi16(__m128i _A, int _Count); 
#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_srl_epi16(__m128i _A, __m128i _Count); 
#line 280 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_srli_epi32(__m128i _A, int _Count); 
#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_srl_epi32(__m128i _A, __m128i _Count); 
#line 282 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_srli_epi64(__m128i _A, int _Count); 
#line 283 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_srl_epi64(__m128i _A, __m128i _Count); 
#line 289 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_cmpeq_epi8(__m128i _A, __m128i _B); 
#line 290 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_cmpeq_epi16(__m128i _A, __m128i _B); 
#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_cmpeq_epi32(__m128i _A, __m128i _B); 
#line 292 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_cmpgt_epi8(__m128i _A, __m128i _B); 
#line 293 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_cmpgt_epi16(__m128i _A, __m128i _B); 
#line 294 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_cmpgt_epi32(__m128i _A, __m128i _B); 
#line 295 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_cmplt_epi8(__m128i _A, __m128i _B); 
#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_cmplt_epi16(__m128i _A, __m128i _B); 
#line 297 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_cmplt_epi32(__m128i _A, __m128i _B); 
#line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_cvtsi32_si128(int _A); 
#line 304 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern int _mm_cvtsi128_si32(__m128i _A); 
#line 310 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_packs_epi16(__m128i _A, __m128i _B); 
#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_packs_epi32(__m128i _A, __m128i _B); 
#line 312 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_packus_epi16(__m128i _A, __m128i _B); 
#line 313 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern int _mm_extract_epi16(__m128i _A, int _Imm); 
#line 314 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_insert_epi16(__m128i _A, int _B, int _Imm); 
#line 315 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern int _mm_movemask_epi8(__m128i _A); 
#line 316 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_shuffle_epi32(__m128i _A, int _Imm); 
#line 317 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_shufflehi_epi16(__m128i _A, int _Imm); 
#line 318 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_shufflelo_epi16(__m128i _A, int _Imm); 
#line 319 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_unpackhi_epi8(__m128i _A, __m128i _B); 
#line 320 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_unpackhi_epi16(__m128i _A, __m128i _B); 
#line 321 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_unpackhi_epi32(__m128i _A, __m128i _B); 
#line 322 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_unpackhi_epi64(__m128i _A, __m128i _B); 
#line 323 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_unpacklo_epi8(__m128i _A, __m128i _B); 
#line 324 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_unpacklo_epi16(__m128i _A, __m128i _B); 
#line 325 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_unpacklo_epi32(__m128i _A, __m128i _B); 
#line 326 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_unpacklo_epi64(__m128i _A, __m128i _B); 
#line 332 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_load_si128(const __m128i * _P); 
#line 333 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_loadu_si128(const __m128i * _P); 
#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_loadl_epi64(const __m128i * _P); 
#line 343 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_set_epi64x(__int64 _I1, __int64 _I0); 
#line 344 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_set_epi32(int _I3, int _I2, int _I1, int _I0); 
#line 345 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_set_epi16(short _W7, short _W6, short _W5, short _W4, short _W3, short _W2, short _W1, short _W0); 
#line 347 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_set_epi8(char _B15, char _B14, char _B13, char _B12, char _B11, char _B10, char _B9, char _B8, char _B7, char _B6, char _B5, char _B4, char _B3, char _B2, char _B1, char _B0); 
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_set1_epi64x(__int64 i); 
#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_set1_epi32(int _I); 
#line 356 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_set1_epi16(short _W); 
#line 357 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_set1_epi8(char _B); 
#line 358 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_setl_epi64(__m128i _Q); 
#line 362 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_setr_epi32(int _I0, int _I1, int _I2, int _I3); 
#line 363 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_setr_epi16(short _W0, short _W1, short _W2, short _W3, short _W4, short _W5, short _W6, short _W7); 
#line 365 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_setr_epi8(char _B15, char _B14, char _B13, char _B12, char _B11, char _B10, char _B9, char _B8, char _B7, char _B6, char _B5, char _B4, char _B3, char _B2, char _B1, char _B0); 
#line 369 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_setzero_si128(); 
#line 375 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern void _mm_store_si128(__m128i * _P, __m128i _B); 
#line 376 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern void _mm_storeu_si128(__m128i * _P, __m128i _B); 
#line 377 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern void _mm_storel_epi64(__m128i * _P, __m128i _Q); 
#line 378 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern void _mm_maskmoveu_si128(__m128i _D, __m128i _N, char * _P); 
#line 384 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_move_epi64(__m128i _Q); 
#line 394 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern void _mm_stream_pd(double * _Dp, __m128d _A); 
#line 395 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern void _mm_stream_si128(__m128i * _P, __m128i _A); 
#line 396 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern void _mm_clflush(const void * _P); 
#line 397 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern void _mm_lfence(); 
#line 398 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern void _mm_mfence(); 
#line 399 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern void _mm_stream_si32(int * _P, int _I); 
#line 400 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern void _mm_pause(); 
#line 406 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern double _mm_cvtsd_f64(__m128d _A); 
#line 414 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128 _mm_castpd_ps(__m128d); 
#line 415 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_castpd_si128(__m128d); 
#line 416 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_castps_pd(__m128); 
#line 417 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_castps_si128(__m128); 
#line 418 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128 _mm_castsi128_ps(__m128i); 
#line 419 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_castsi128_pd(__m128i); 
#line 426 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __int64 _mm_cvtsd_si64(__m128d); 
#line 427 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __int64 _mm_cvttsd_si64(__m128d); 
#line 428 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128d _mm_cvtsi64_sd(__m128d, __int64); 
#line 429 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_cvtsi64_si128(__int64); 
#line 430 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __int64 _mm_cvtsi128_si64(__m128i); 
#line 436 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
}
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"
extern "C" {
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"
extern __m128 _mm_addsub_ps(__m128, __m128); 
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"
extern __m128 _mm_hadd_ps(__m128, __m128); 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"
extern __m128 _mm_hsub_ps(__m128, __m128); 
#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"
extern __m128 _mm_movehdup_ps(__m128); 
#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"
extern __m128 _mm_moveldup_ps(__m128); 
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"
extern __m128d _mm_addsub_pd(__m128d, __m128d); 
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"
extern __m128d _mm_hadd_pd(__m128d, __m128d); 
#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"
extern __m128d _mm_hsub_pd(__m128d, __m128d); 
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"
extern __m128d _mm_loaddup_pd(const double *); 
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"
extern __m128d _mm_movedup_pd(__m128d); 
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"
extern __m128i _mm_lddqu_si128(const __m128i *); 
#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"
extern void _mm_monitor(const void *, unsigned, unsigned); 
#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"
extern void _mm_mwait(unsigned, unsigned); 
#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"
}
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
extern "C" {
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
extern __m128i _mm_hadd_epi16(__m128i, __m128i); 
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
extern __m128i _mm_hadd_epi32(__m128i, __m128i); 
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
extern __m128i _mm_hadds_epi16(__m128i, __m128i); 
#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
extern __m128i _mm_hsub_epi16(__m128i, __m128i); 
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
extern __m128i _mm_hsub_epi32(__m128i, __m128i); 
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
extern __m128i _mm_hsubs_epi16(__m128i, __m128i); 
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
extern __m128i _mm_maddubs_epi16(__m128i, __m128i); 
#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
extern __m128i _mm_mulhrs_epi16(__m128i, __m128i); 
#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
extern __m128i _mm_shuffle_epi8(__m128i, __m128i); 
#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
extern __m128i _mm_sign_epi8(__m128i, __m128i); 
#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
extern __m128i _mm_sign_epi16(__m128i, __m128i); 
#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
extern __m128i _mm_sign_epi32(__m128i, __m128i); 
#line 122 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
extern __m128i _mm_alignr_epi8(__m128i, __m128i, int); 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
extern __m128i _mm_abs_epi8(__m128i); 
#line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
extern __m128i _mm_abs_epi16(__m128i); 
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
extern __m128i _mm_abs_epi32(__m128i); 
#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
}
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern "C" {
#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_blend_epi16(__m128i, __m128i, const int); 
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_blendv_epi8(__m128i, __m128i, __m128i mask); 
#line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128 _mm_blend_ps(__m128, __m128, const int); 
#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128 _mm_blendv_ps(__m128, __m128, __m128); 
#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128d _mm_blend_pd(__m128d, __m128d, const int); 
#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128d _mm_blendv_pd(__m128d, __m128d, __m128d); 
#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128 _mm_dp_ps(__m128, __m128, const int); 
#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128d _mm_dp_pd(__m128d, __m128d, const int); 
#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_cmpeq_epi64(__m128i, __m128i); 
#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_min_epi8(__m128i, __m128i); 
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_max_epi8(__m128i, __m128i); 
#line 120 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_min_epu16(__m128i, __m128i); 
#line 121 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_max_epu16(__m128i, __m128i); 
#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_min_epi32(__m128i, __m128i); 
#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_max_epi32(__m128i, __m128i); 
#line 125 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_min_epu32(__m128i, __m128i); 
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_max_epu32(__m128i, __m128i); 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_mullo_epi32(__m128i, __m128i); 
#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_mul_epi32(__m128i, __m128i); 
#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern int _mm_testz_si128(__m128i, __m128i); 
#line 146 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern int _mm_testc_si128(__m128i, __m128i); 
#line 152 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern int _mm_testnzc_si128(__m128i, __m128i); 
#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128 _mm_insert_ps(__m128, __m128, const int); 
#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern int _mm_extract_ps(__m128, const int); 
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_insert_epi8(__m128i, int, const int); 
#line 189 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_insert_epi32(__m128i, int, const int); 
#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_insert_epi64(__m128i, __int64, const int); 
#line 197 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern int _mm_extract_epi8(__m128i, const int); 
#line 198 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern int _mm_extract_epi32(__m128i, const int); 
#line 201 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __int64 _mm_extract_epi64(__m128i, const int); 
#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_minpos_epu16(__m128i); 
#line 211 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128d _mm_round_pd(__m128d, int); 
#line 212 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128d _mm_round_sd(__m128d, __m128d, int); 
#line 216 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128 _mm_round_ps(__m128, int); 
#line 217 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128 _mm_round_ss(__m128, __m128, int); 
#line 221 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_cvtepi8_epi32(__m128i); 
#line 222 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_cvtepi16_epi32(__m128i); 
#line 223 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_cvtepi8_epi64(__m128i); 
#line 224 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_cvtepi32_epi64(__m128i); 
#line 225 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_cvtepi16_epi64(__m128i); 
#line 226 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_cvtepi8_epi16(__m128i); 
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_cvtepu8_epi32(__m128i); 
#line 231 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_cvtepu16_epi32(__m128i); 
#line 232 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_cvtepu8_epi64(__m128i); 
#line 233 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_cvtepu32_epi64(__m128i); 
#line 234 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_cvtepu16_epi64(__m128i); 
#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_cvtepu8_epi16(__m128i); 
#line 241 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_packus_epi32(__m128i, __m128i); 
#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_mpsadbw_epu8(__m128i, __m128i, const int); 
#line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
extern __m128i _mm_stream_load_si128(const __m128i *); 
#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
}
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern "C" {
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern __m128i _mm_cmpistrm(__m128i, __m128i, const int); 
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern int _mm_cmpistri(__m128i, __m128i, const int); 
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern __m128i _mm_cmpestrm(__m128i, int, __m128i, int, const int); 
#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern int _mm_cmpestri(__m128i, int, __m128i, int, const int); 
#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern int _mm_cmpistrz(__m128i, __m128i, const int); 
#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern int _mm_cmpistrc(__m128i, __m128i, const int); 
#line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern int _mm_cmpistrs(__m128i, __m128i, const int); 
#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern int _mm_cmpistro(__m128i, __m128i, const int); 
#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern int _mm_cmpistra(__m128i, __m128i, const int); 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern int _mm_cmpestrz(__m128i, int, __m128i, int, const int); 
#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern int _mm_cmpestrc(__m128i, int, __m128i, int, const int); 
#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern int _mm_cmpestrs(__m128i, int, __m128i, int, const int); 
#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern int _mm_cmpestro(__m128i, int, __m128i, int, const int); 
#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern int _mm_cmpestra(__m128i, int, __m128i, int, const int); 
#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern __m128i _mm_cmpgt_epi64(__m128i, __m128i); 
#line 116 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern int _mm_popcnt_u32(unsigned); 
#line 119 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern __int64 _mm_popcnt_u64(unsigned __int64); 
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern unsigned _mm_crc32_u8(unsigned, unsigned char); 
#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern unsigned _mm_crc32_u16(unsigned, unsigned short); 
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern unsigned _mm_crc32_u32(unsigned, unsigned); 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
extern unsigned __int64 _mm_crc32_u64(unsigned __int64, unsigned __int64); 
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
}
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\wmmintrin.h"
extern "C" {
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\wmmintrin.h"
extern __m128i _mm_aesdec_si128(__m128i, __m128i); 
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\wmmintrin.h"
extern __m128i _mm_aesdeclast_si128(__m128i, __m128i); 
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\wmmintrin.h"
extern __m128i _mm_aesenc_si128(__m128i, __m128i); 
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\wmmintrin.h"
extern __m128i _mm_aesenclast_si128(__m128i, __m128i); 
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\wmmintrin.h"
extern __m128i _mm_aesimc_si128(__m128i); 
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\wmmintrin.h"
extern __m128i _mm_aeskeygenassist_si128(__m128i, const int); 
#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\wmmintrin.h"
extern __m128i _mm_clmulepi64_si128(__m128i, __m128i, const int); 
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\wmmintrin.h"
}
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern "C" {
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
typedef 
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
union __declspec(intrin_type) __declspec(align(32)) __m256 { 
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
float m256_f32[8]; 
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
} __m256; 
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
typedef 
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
struct __declspec(intrin_type) __declspec(align(32)) __m256d { 
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
double m256d_f64[4]; 
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
} __m256d; 
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
typedef 
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
union __declspec(intrin_type) __declspec(align(32)) __m256i { 
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
char m256i_i8[32]; 
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
short m256i_i16[16]; 
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
int m256i_i32[8]; 
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
__int64 m256i_i64[4]; 
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
unsigned char m256i_u8[32]; 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
unsigned short m256i_u16[16]; 
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
unsigned m256i_u32[8]; 
#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
unsigned __int64 m256i_u64[4]; 
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
} __m256i; 
#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_add_pd(__m256d, __m256d); 
#line 116 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_add_ps(__m256, __m256); 
#line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_addsub_pd(__m256d, __m256d); 
#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_addsub_ps(__m256, __m256); 
#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_and_pd(__m256d, __m256d); 
#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_and_ps(__m256, __m256); 
#line 169 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_andnot_pd(__m256d, __m256d); 
#line 178 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_andnot_ps(__m256, __m256); 
#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_blend_pd(__m256d, __m256d, const int); 
#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_blend_ps(__m256, __m256, const int); 
#line 216 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_blendv_pd(__m256d, __m256d, __m256d); 
#line 226 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_blendv_ps(__m256, __m256, __m256); 
#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_div_pd(__m256d, __m256d); 
#line 244 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_div_ps(__m256, __m256); 
#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_dp_ps(__m256, __m256, const int); 
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_hadd_pd(__m256d, __m256d); 
#line 277 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_hadd_ps(__m256, __m256); 
#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_hsub_pd(__m256d, __m256d); 
#line 295 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_hsub_ps(__m256, __m256); 
#line 304 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_max_pd(__m256d, __m256d); 
#line 313 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_max_ps(__m256, __m256); 
#line 322 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_min_pd(__m256d, __m256d); 
#line 331 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_min_ps(__m256, __m256); 
#line 341 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_mul_pd(__m256d, __m256d); 
#line 351 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_mul_ps(__m256, __m256); 
#line 360 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_or_pd(__m256d, __m256d); 
#line 369 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_or_ps(__m256, __m256); 
#line 381 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_shuffle_pd(__m256d, __m256d, const int); 
#line 394 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_shuffle_ps(__m256, __m256, const int); 
#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_sub_pd(__m256d, __m256d); 
#line 413 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_sub_ps(__m256, __m256); 
#line 422 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_xor_pd(__m256d, __m256d); 
#line 431 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_xor_ps(__m256, __m256); 
#line 447 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128d __cdecl _mm_cmp_pd(__m128d, __m128d, const int); 
#line 448 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_cmp_pd(__m256d, __m256d, const int); 
#line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_cmp_ps(__m128, __m128, const int); 
#line 465 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_cmp_ps(__m256, __m256, const int); 
#line 478 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128d __cdecl _mm_cmp_sd(__m128d, __m128d, const int); 
#line 484 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _mm_comi_sd(__m128d, __m128d, const int); 
#line 497 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_cmp_ss(__m128, __m128, const int); 
#line 503 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _mm_comi_ss(__m128, __m128, const int); 
#line 512 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_cvtepi32_pd(__m128i); 
#line 521 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_cvtepi32_ps(__m256i); 
#line 531 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm256_cvtpd_ps(__m256d); 
#line 540 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_cvtps_epi32(__m256); 
#line 550 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_cvtps_pd(__m128); 
#line 563 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm256_cvttpd_epi32(__m256d); 
#line 572 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm256_cvtpd_epi32(__m256d); 
#line 585 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_cvttps_epi32(__m256); 
#line 593 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm256_extractf128_ps(__m256, const int); 
#line 594 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128d __cdecl _mm256_extractf128_pd(__m256d, const int); 
#line 595 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm256_extractf128_si256(__m256i, const int); 
#line 602 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _mm256_zeroall(); 
#line 610 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _mm256_zeroupper(); 
#line 620 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_permutevar_ps(__m256, __m256i); 
#line 621 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_permutevar_ps(__m128, __m128i); 
#line 631 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_permute_ps(__m256, int); 
#line 632 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_permute_ps(__m128, int); 
#line 642 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_permutevar_pd(__m256d, __m256i); 
#line 643 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128d __cdecl _mm_permutevar_pd(__m128d, __m128i); 
#line 653 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_permute_pd(__m256d, int); 
#line 654 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128d __cdecl _mm_permute_pd(__m128d, int); 
#line 663 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_permute2f128_ps(__m256, __m256, int); 
#line 664 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_permute2f128_pd(__m256d, __m256d, int); 
#line 665 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_permute2f128_si256(__m256i, __m256i, int); 
#line 674 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_broadcast_ss(const float *); 
#line 675 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_broadcast_ss(const float *); 
#line 683 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_broadcast_sd(const double *); 
#line 691 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_broadcast_ps(const __m128 *); 
#line 692 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_broadcast_pd(const __m128d *); 
#line 702 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_insertf128_ps(__m256, __m128, int); 
#line 703 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_insertf128_pd(__m256d, __m128d, int); 
#line 704 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_insertf128_si256(__m256i, __m128i, int); 
#line 713 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_load_pd(const double *); 
#line 714 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _mm256_store_pd(double *, __m256d); 
#line 723 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_load_ps(const float *); 
#line 724 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _mm256_store_ps(float *, __m256); 
#line 733 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_loadu_pd(const double *); 
#line 734 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _mm256_storeu_pd(double *, __m256d); 
#line 743 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_loadu_ps(const float *); 
#line 744 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _mm256_storeu_ps(float *, __m256); 
#line 753 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_load_si256(const __m256i *); 
#line 754 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _mm256_store_si256(__m256i *, __m256i); 
#line 763 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_loadu_si256(const __m256i *); 
#line 764 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _mm256_storeu_si256(__m256i *, __m256i); 
#line 836 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_maskload_pd(const double *, __m256i); 
#line 837 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _mm256_maskstore_pd(double *, __m256i, __m256d); 
#line 838 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128d __cdecl _mm_maskload_pd(const double *, __m128i); 
#line 839 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _mm_maskstore_pd(double *, __m128i, __m128d); 
#line 859 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_maskload_ps(const float *, __m256i); 
#line 860 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _mm256_maskstore_ps(float *, __m256i, __m256); 
#line 861 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_maskload_ps(const float *, __m128i); 
#line 862 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _mm_maskstore_ps(float *, __m128i, __m128); 
#line 870 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_movehdup_ps(__m256); 
#line 878 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_moveldup_ps(__m256); 
#line 886 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_movedup_pd(__m256d); 
#line 896 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_lddqu_si256(const __m256i *); 
#line 904 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _mm256_stream_si256(__m256i *, __m256i); 
#line 913 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _mm256_stream_pd(double *, __m256d); 
#line 922 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _mm256_stream_ps(float *, __m256); 
#line 932 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_rcp_ps(__m256); 
#line 943 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_rsqrt_ps(__m256); 
#line 952 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_sqrt_pd(__m256d); 
#line 961 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_sqrt_ps(__m256); 
#line 974 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_round_pd(__m256d, int); 
#line 989 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_round_ps(__m256, int); 
#line 999 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_unpackhi_pd(__m256d, __m256d); 
#line 1007 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_unpackhi_ps(__m256, __m256); 
#line 1015 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_unpacklo_pd(__m256d, __m256d); 
#line 1023 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_unpacklo_ps(__m256, __m256); 
#line 1033 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _mm256_testz_si256(__m256i, __m256i); 
#line 1037 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _mm256_testc_si256(__m256i, __m256i); 
#line 1041 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _mm256_testnzc_si256(__m256i, __m256i); 
#line 1056 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _mm256_testz_pd(__m256d, __m256d); 
#line 1057 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _mm256_testc_pd(__m256d, __m256d); 
#line 1058 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _mm256_testnzc_pd(__m256d, __m256d); 
#line 1059 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _mm_testz_pd(__m128d, __m128d); 
#line 1060 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _mm_testc_pd(__m128d, __m128d); 
#line 1061 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _mm_testnzc_pd(__m128d, __m128d); 
#line 1074 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _mm256_testz_ps(__m256, __m256); 
#line 1075 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _mm256_testc_ps(__m256, __m256); 
#line 1076 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _mm256_testnzc_ps(__m256, __m256); 
#line 1077 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _mm_testz_ps(__m128, __m128); 
#line 1078 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _mm_testc_ps(__m128, __m128); 
#line 1079 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _mm_testnzc_ps(__m128, __m128); 
#line 1088 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _mm256_movemask_pd(__m256d); 
#line 1097 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _mm256_movemask_ps(__m256); 
#line 1102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_setzero_pd(); 
#line 1103 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_setzero_ps(); 
#line 1104 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_setzero_si256(); 
#line 1109 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_set_pd(double, double, double, double); 
#line 1110 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_set_ps(float, float, float, float, float, float, float, float); 
#line 1112 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_set_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char); 
#line 1120 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_set_epi16(short, short, short, short, short, short, short, short, short, short, short, short, short, short, short, short); 
#line 1124 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_set_epi32(int, int, int, int, int, int, int, int); 
#line 1126 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_set_epi64x(__int64, __int64, __int64, __int64); 
#line 1138 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_setr_pd(double, double, double, double); 
#line 1139 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_setr_ps(float, float, float, float, float, float, float, float); 
#line 1141 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_setr_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char); 
#line 1149 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_setr_epi16(short, short, short, short, short, short, short, short, short, short, short, short, short, short, short, short); 
#line 1153 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_setr_epi32(int, int, int, int, int, int, int, int); 
#line 1155 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_setr_epi64x(__int64, __int64, __int64, __int64); 
#line 1164 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_set1_pd(double); 
#line 1165 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_set1_ps(float); 
#line 1166 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_set1_epi8(char); 
#line 1167 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_set1_epi16(short); 
#line 1168 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_set1_epi32(int); 
#line 1169 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_set1_epi64x(__int64); 
#line 1177 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_castpd_ps(__m256d); 
#line 1178 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_castps_pd(__m256); 
#line 1179 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_castps_si256(__m256); 
#line 1180 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_castpd_si256(__m256d); 
#line 1181 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_castsi256_ps(__m256i); 
#line 1182 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_castsi256_pd(__m256i); 
#line 1183 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm256_castps256_ps128(__m256); 
#line 1184 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128d __cdecl _mm256_castpd256_pd128(__m256d); 
#line 1185 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm256_castsi256_si128(__m256i); 
#line 1186 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_castps128_ps256(__m128); 
#line 1187 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_castpd128_pd256(__m128d); 
#line 1188 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_castsi128_si256(__m128i); 
#line 1195 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_cvtph_ps(__m128i); 
#line 1196 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_cvtph_ps(__m128i); 
#line 1197 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_cvtps_ph(__m128, const int); 
#line 1198 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm256_cvtps_ph(__m256, int); 
#line 1219 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned __int64 __cdecl _xgetbv(unsigned); 
#line 1222 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _xsetbv(unsigned, unsigned __int64); 
#line 1229 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _xsave(void *, unsigned __int64); 
#line 1231 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _xsave64(void *, unsigned __int64); 
#line 1239 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _xsaveopt(void *, unsigned __int64); 
#line 1241 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _xsaveopt64(void *, unsigned __int64); 
#line 1248 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _xsavec(void *, unsigned __int64); 
#line 1250 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _xsavec64(void *, unsigned __int64); 
#line 1258 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _xrstor(const void *, unsigned __int64); 
#line 1260 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _xrstor64(const void *, unsigned __int64); 
#line 1268 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _xsaves(void *, unsigned __int64); 
#line 1270 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _xsaves64(void *, unsigned __int64); 
#line 1278 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _xrstors(const void *, unsigned __int64); 
#line 1280 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _xrstors64(const void *, unsigned __int64); 
#line 1287 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _fxsave(void *); 
#line 1289 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _fxsave64(void *); 
#line 1296 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _fxrstor(const void *); 
#line 1298 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _fxrstor64(const void *); 
#line 1307 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _rdrand16_step(unsigned short *); 
#line 1308 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _rdrand32_step(unsigned *); 
#line 1310 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _rdrand64_step(unsigned __int64 *); 
#line 1317 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned __cdecl _readfsbase_u32(); 
#line 1318 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned __cdecl _readgsbase_u32(); 
#line 1319 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned __int64 __cdecl _readfsbase_u64(); 
#line 1320 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned __int64 __cdecl _readgsbase_u64(); 
#line 1325 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _writefsbase_u32(unsigned); 
#line 1326 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _writegsbase_u32(unsigned); 
#line 1327 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _writefsbase_u64(unsigned __int64); 
#line 1328 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _writegsbase_u64(unsigned __int64); 
#line 1334 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_fmadd_ps(__m128, __m128, __m128); 
#line 1335 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128d __cdecl _mm_fmadd_pd(__m128d, __m128d, __m128d); 
#line 1336 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_fmadd_ss(__m128, __m128, __m128); 
#line 1337 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128d __cdecl _mm_fmadd_sd(__m128d, __m128d, __m128d); 
#line 1338 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_fmsub_ps(__m128, __m128, __m128); 
#line 1339 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128d __cdecl _mm_fmsub_pd(__m128d, __m128d, __m128d); 
#line 1340 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_fmsub_ss(__m128, __m128, __m128); 
#line 1341 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128d __cdecl _mm_fmsub_sd(__m128d, __m128d, __m128d); 
#line 1342 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_fnmadd_ps(__m128, __m128, __m128); 
#line 1343 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128d __cdecl _mm_fnmadd_pd(__m128d, __m128d, __m128d); 
#line 1344 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_fnmadd_ss(__m128, __m128, __m128); 
#line 1345 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128d __cdecl _mm_fnmadd_sd(__m128d, __m128d, __m128d); 
#line 1346 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_fnmsub_ps(__m128, __m128, __m128); 
#line 1347 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128d __cdecl _mm_fnmsub_pd(__m128d, __m128d, __m128d); 
#line 1348 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_fnmsub_ss(__m128, __m128, __m128); 
#line 1349 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128d __cdecl _mm_fnmsub_sd(__m128d, __m128d, __m128d); 
#line 1351 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_fmadd_ps(__m256, __m256, __m256); 
#line 1352 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_fmadd_pd(__m256d, __m256d, __m256d); 
#line 1353 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_fmsub_ps(__m256, __m256, __m256); 
#line 1354 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_fmsub_pd(__m256d, __m256d, __m256d); 
#line 1355 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_fnmadd_ps(__m256, __m256, __m256); 
#line 1356 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_fnmadd_pd(__m256d, __m256d, __m256d); 
#line 1357 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_fnmsub_ps(__m256, __m256, __m256); 
#line 1358 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_fnmsub_pd(__m256d, __m256d, __m256d); 
#line 1364 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_fmaddsub_ps(__m128, __m128, __m128); 
#line 1365 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128d __cdecl _mm_fmaddsub_pd(__m128d, __m128d, __m128d); 
#line 1366 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_fmsubadd_ps(__m128, __m128, __m128); 
#line 1367 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128d __cdecl _mm_fmsubadd_pd(__m128d, __m128d, __m128d); 
#line 1369 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_fmaddsub_ps(__m256, __m256, __m256); 
#line 1370 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_fmaddsub_pd(__m256d, __m256d, __m256d); 
#line 1371 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_fmsubadd_ps(__m256, __m256, __m256); 
#line 1372 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_fmsubadd_pd(__m256d, __m256d, __m256d); 
#line 1378 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_cmpeq_epi8(__m256i, __m256i); 
#line 1379 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_cmpeq_epi16(__m256i, __m256i); 
#line 1380 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_cmpeq_epi32(__m256i, __m256i); 
#line 1381 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_cmpeq_epi64(__m256i, __m256i); 
#line 1383 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_cmpgt_epi8(__m256i, __m256i); 
#line 1384 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_cmpgt_epi16(__m256i, __m256i); 
#line 1385 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_cmpgt_epi32(__m256i, __m256i); 
#line 1386 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_cmpgt_epi64(__m256i, __m256i); 
#line 1392 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_max_epi8(__m256i, __m256i); 
#line 1393 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_max_epi16(__m256i, __m256i); 
#line 1394 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_max_epi32(__m256i, __m256i); 
#line 1395 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_max_epu8(__m256i, __m256i); 
#line 1396 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_max_epu16(__m256i, __m256i); 
#line 1397 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_max_epu32(__m256i, __m256i); 
#line 1399 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_min_epi8(__m256i, __m256i); 
#line 1400 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_min_epi16(__m256i, __m256i); 
#line 1401 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_min_epi32(__m256i, __m256i); 
#line 1402 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_min_epu8(__m256i, __m256i); 
#line 1403 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_min_epu16(__m256i, __m256i); 
#line 1404 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_min_epu32(__m256i, __m256i); 
#line 1410 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_and_si256(__m256i, __m256i); 
#line 1411 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_andnot_si256(__m256i, __m256i); 
#line 1412 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_or_si256(__m256i, __m256i); 
#line 1413 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_xor_si256(__m256i, __m256i); 
#line 1419 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_abs_epi8(__m256i); 
#line 1420 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_abs_epi16(__m256i); 
#line 1421 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_abs_epi32(__m256i); 
#line 1423 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_add_epi8(__m256i, __m256i); 
#line 1424 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_add_epi16(__m256i, __m256i); 
#line 1425 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_add_epi32(__m256i, __m256i); 
#line 1426 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_add_epi64(__m256i, __m256i); 
#line 1428 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_adds_epi8(__m256i, __m256i); 
#line 1429 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_adds_epi16(__m256i, __m256i); 
#line 1430 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_adds_epu8(__m256i, __m256i); 
#line 1431 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_adds_epu16(__m256i, __m256i); 
#line 1433 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_sub_epi8(__m256i, __m256i); 
#line 1434 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_sub_epi16(__m256i, __m256i); 
#line 1435 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_sub_epi32(__m256i, __m256i); 
#line 1436 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_sub_epi64(__m256i, __m256i); 
#line 1438 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_subs_epi8(__m256i, __m256i); 
#line 1439 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_subs_epi16(__m256i, __m256i); 
#line 1440 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_subs_epu8(__m256i, __m256i); 
#line 1441 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_subs_epu16(__m256i, __m256i); 
#line 1443 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_avg_epu8(__m256i, __m256i); 
#line 1444 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_avg_epu16(__m256i, __m256i); 
#line 1446 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_hadd_epi16(__m256i, __m256i); 
#line 1447 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_hadd_epi32(__m256i, __m256i); 
#line 1448 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_hadds_epi16(__m256i, __m256i); 
#line 1450 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_hsub_epi16(__m256i, __m256i); 
#line 1451 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_hsub_epi32(__m256i, __m256i); 
#line 1452 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_hsubs_epi16(__m256i, __m256i); 
#line 1454 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_madd_epi16(__m256i, __m256i); 
#line 1455 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_maddubs_epi16(__m256i, __m256i); 
#line 1457 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_mulhi_epi16(__m256i, __m256i); 
#line 1458 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_mulhi_epu16(__m256i, __m256i); 
#line 1460 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_mullo_epi16(__m256i, __m256i); 
#line 1461 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_mullo_epi32(__m256i, __m256i); 
#line 1463 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_mul_epu32(__m256i, __m256i); 
#line 1464 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_mul_epi32(__m256i, __m256i); 
#line 1466 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_sign_epi8(__m256i, __m256i); 
#line 1467 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_sign_epi16(__m256i, __m256i); 
#line 1468 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_sign_epi32(__m256i, __m256i); 
#line 1470 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_mulhrs_epi16(__m256i, __m256i); 
#line 1472 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_sad_epu8(__m256i, __m256i); 
#line 1473 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_mpsadbw_epu8(__m256i, __m256i, const int); 
#line 1479 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_slli_si256(__m256i, const int); 
#line 1481 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_srli_si256(__m256i, const int); 
#line 1484 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_sll_epi16(__m256i, __m128i); 
#line 1485 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_sll_epi32(__m256i, __m128i); 
#line 1486 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_sll_epi64(__m256i, __m128i); 
#line 1488 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_slli_epi16(__m256i, int); 
#line 1489 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_slli_epi32(__m256i, int); 
#line 1490 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_slli_epi64(__m256i, int); 
#line 1492 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_sllv_epi32(__m256i, __m256i); 
#line 1493 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_sllv_epi64(__m256i, __m256i); 
#line 1495 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_sllv_epi32(__m128i, __m128i); 
#line 1496 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_sllv_epi64(__m128i, __m128i); 
#line 1498 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_sra_epi16(__m256i, __m128i); 
#line 1499 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_sra_epi32(__m256i, __m128i); 
#line 1501 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_srai_epi16(__m256i, int); 
#line 1502 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_srai_epi32(__m256i, int); 
#line 1504 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_srav_epi32(__m256i, __m256i); 
#line 1506 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_srav_epi32(__m128i, __m128i); 
#line 1508 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_srl_epi16(__m256i, __m128i); 
#line 1509 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_srl_epi32(__m256i, __m128i); 
#line 1510 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_srl_epi64(__m256i, __m128i); 
#line 1512 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_srli_epi16(__m256i, int); 
#line 1513 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_srli_epi32(__m256i, int); 
#line 1514 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_srli_epi64(__m256i, int); 
#line 1516 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_srlv_epi32(__m256i, __m256i); 
#line 1517 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_srlv_epi64(__m256i, __m256i); 
#line 1519 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_srlv_epi32(__m128i, __m128i); 
#line 1520 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_srlv_epi64(__m128i, __m128i); 
#line 1526 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_blend_epi32(__m128i, __m128i, const int); 
#line 1528 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_blend_epi32(__m256i, __m256i, const int); 
#line 1530 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_alignr_epi8(__m256i, __m256i, const int); 
#line 1532 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_blendv_epi8(__m256i, __m256i, __m256i); 
#line 1533 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_blend_epi16(__m256i, __m256i, const int); 
#line 1535 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_packs_epi16(__m256i, __m256i); 
#line 1536 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_packs_epi32(__m256i, __m256i); 
#line 1537 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_packus_epi16(__m256i, __m256i); 
#line 1538 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_packus_epi32(__m256i, __m256i); 
#line 1540 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_unpackhi_epi8(__m256i, __m256i); 
#line 1541 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_unpackhi_epi16(__m256i, __m256i); 
#line 1542 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_unpackhi_epi32(__m256i, __m256i); 
#line 1543 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_unpackhi_epi64(__m256i, __m256i); 
#line 1545 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_unpacklo_epi8(__m256i, __m256i); 
#line 1546 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_unpacklo_epi16(__m256i, __m256i); 
#line 1547 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_unpacklo_epi32(__m256i, __m256i); 
#line 1548 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_unpacklo_epi64(__m256i, __m256i); 
#line 1550 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_shuffle_epi8(__m256i, __m256i); 
#line 1551 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_shuffle_epi32(__m256i, const int); 
#line 1553 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_shufflehi_epi16(__m256i, const int); 
#line 1554 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_shufflelo_epi16(__m256i, const int); 
#line 1556 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm256_extracti128_si256(__m256i, const int); 
#line 1557 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_inserti128_si256(__m256i, __m128i, const int); 
#line 1563 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_broadcastss_ps(__m128); 
#line 1564 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128d __cdecl _mm_broadcastsd_pd(__m128d); 
#line 1566 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_broadcastb_epi8(__m128i); 
#line 1567 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_broadcastw_epi16(__m128i); 
#line 1568 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_broadcastd_epi32(__m128i); 
#line 1569 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_broadcastq_epi64(__m128i); 
#line 1571 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_broadcastss_ps(__m128); 
#line 1572 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_broadcastsd_pd(__m128d); 
#line 1574 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_broadcastb_epi8(__m128i); 
#line 1575 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_broadcastw_epi16(__m128i); 
#line 1576 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_broadcastd_epi32(__m128i); 
#line 1577 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_broadcastq_epi64(__m128i); 
#line 1579 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_broadcastsi128_si256(__m128i); 
#line 1586 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_cvtepi8_epi16(__m128i); 
#line 1587 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_cvtepi8_epi32(__m128i); 
#line 1588 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_cvtepi8_epi64(__m128i); 
#line 1589 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_cvtepi16_epi32(__m128i); 
#line 1590 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_cvtepi16_epi64(__m128i); 
#line 1591 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_cvtepi32_epi64(__m128i); 
#line 1593 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_cvtepu8_epi16(__m128i); 
#line 1594 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_cvtepu8_epi32(__m128i); 
#line 1595 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_cvtepu8_epi64(__m128i); 
#line 1596 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_cvtepu16_epi32(__m128i); 
#line 1597 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_cvtepu16_epi64(__m128i); 
#line 1598 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_cvtepu32_epi64(__m128i); 
#line 1605 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _mm256_movemask_epi8(__m256i); 
#line 1611 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_maskload_epi32(const int *, __m128i); 
#line 1613 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_maskload_epi64(const __int64 *, __m128i); 
#line 1616 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _mm_maskstore_epi32(int *, __m128i, __m128i); 
#line 1619 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _mm_maskstore_epi64(__int64 *, __m128i, __m128i); 
#line 1623 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_maskload_epi32(const int *, __m256i); 
#line 1625 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_maskload_epi64(const __int64 *, __m256i); 
#line 1628 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _mm256_maskstore_epi32(int *, __m256i, __m256i); 
#line 1631 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _mm256_maskstore_epi64(__int64 *, __m256i, __m256i); 
#line 1639 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_permutevar8x32_epi32(__m256i, __m256i); 
#line 1640 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_permutevar8x32_ps(__m256, __m256i); 
#line 1642 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_permute4x64_epi64(__m256i, const int); 
#line 1643 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_permute4x64_pd(__m256d, const int); 
#line 1645 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_permute2x128_si256(__m256i, __m256i, const int); 
#line 1651 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_stream_load_si256(const __m256i *); 
#line 1658 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_mask_i32gather_pd(__m256d, const double *, __m128i, __m256d, const int); 
#line 1663 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_mask_i32gather_ps(__m256, const float *, __m256i, __m256, const int); 
#line 1668 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_mask_i64gather_pd(__m256d, const double *, __m256i, __m256d, const int); 
#line 1673 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm256_mask_i64gather_ps(__m128, const float *, __m256i, __m128, const int); 
#line 1679 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128d __cdecl _mm_mask_i32gather_pd(__m128d, const double *, __m128i, __m128d, const int); 
#line 1684 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_mask_i32gather_ps(__m128, const float *, __m128i, __m128, const int); 
#line 1689 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128d __cdecl _mm_mask_i64gather_pd(__m128d, const double *, __m128i, __m128d, const int); 
#line 1694 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_mask_i64gather_ps(__m128, const float *, __m128i, __m128, const int); 
#line 1701 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_mask_i32gather_epi32(__m256i, const int *, __m256i, __m256i, const int); 
#line 1706 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_mask_i32gather_epi64(__m256i, const __int64 *, __m128i, __m256i, const int); 
#line 1711 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm256_mask_i64gather_epi32(__m128i, const int *, __m256i, __m128i, const int); 
#line 1716 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_mask_i64gather_epi64(__m256i, const __int64 *, __m256i, __m256i, const int); 
#line 1722 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_mask_i32gather_epi32(__m128i, const int *, __m128i, __m128i, const int); 
#line 1727 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_mask_i32gather_epi64(__m128i, const __int64 *, __m128i, __m128i, const int); 
#line 1732 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_mask_i64gather_epi32(__m128i, const int *, __m128i, __m128i, const int); 
#line 1737 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_mask_i64gather_epi64(__m128i, const __int64 *, __m128i, __m128i, const int); 
#line 1747 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_i32gather_pd(const double *, __m128i, const int); 
#line 1750 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_i32gather_ps(const float *, __m256i, const int); 
#line 1753 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_i64gather_pd(const double *, __m256i, const int); 
#line 1756 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm256_i64gather_ps(const float *, __m256i, const int); 
#line 1760 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128d __cdecl _mm_i32gather_pd(const double *, __m128i, const int); 
#line 1763 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_i32gather_ps(const float *, __m128i, const int); 
#line 1766 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128d __cdecl _mm_i64gather_pd(const double *, __m128i, const int); 
#line 1769 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_i64gather_ps(const float *, __m128i, const int); 
#line 1773 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_i32gather_epi32(const int *, __m256i, const int); 
#line 1776 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_i32gather_epi64(const __int64 *, __m128i, const int); 
#line 1779 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm256_i64gather_epi32(const int *, __m256i, const int); 
#line 1782 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_i64gather_epi64(const __int64 *, __m256i, const int); 
#line 1786 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_i32gather_epi32(const int *, __m128i, const int); 
#line 1789 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_i32gather_epi64(const __int64 *, __m128i, const int); 
#line 1792 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_i64gather_epi32(const int *, __m128i, const int); 
#line 1795 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_i64gather_epi64(const __int64 *, __m128i, const int); 
#line 1805 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned _bextr_u32(unsigned, unsigned, unsigned); 
#line 1808 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned _blsi_u32(unsigned); 
#line 1809 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned _blsmsk_u32(unsigned); 
#line 1810 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned _blsr_u32(unsigned); 
#line 1811 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned _bzhi_u32(unsigned, unsigned); 
#line 1813 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned _mulx_u32(unsigned, unsigned, unsigned *); 
#line 1816 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned _pdep_u32(unsigned, unsigned); 
#line 1818 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned _pext_u32(unsigned, unsigned); 
#line 1820 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned _rorx_u32(unsigned, const unsigned); 
#line 1822 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int _sarx_i32(int, unsigned); 
#line 1824 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned _shlx_u32(unsigned, unsigned); 
#line 1826 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned _shrx_u32(unsigned, unsigned); 
#line 1830 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned __int64 _bextr_u64(unsigned __int64, unsigned, unsigned); 
#line 1833 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned __int64 _blsi_u64(unsigned __int64); 
#line 1834 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned __int64 _blsmsk_u64(unsigned __int64); 
#line 1835 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned __int64 _blsr_u64(unsigned __int64); 
#line 1836 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned __int64 _bzhi_u64(unsigned __int64, unsigned); 
#line 1838 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned __int64 _mulx_u64(unsigned __int64, unsigned __int64, unsigned __int64 *); 
#line 1841 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned __int64 _pdep_u64(unsigned __int64, unsigned __int64); 
#line 1843 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned __int64 _pext_u64(unsigned __int64, unsigned __int64); 
#line 1845 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned __int64 _rorx_u64(unsigned __int64, const unsigned); 
#line 1847 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __int64 _sarx_i64(__int64, unsigned); 
#line 1849 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned __int64 _shlx_u64(unsigned __int64, unsigned); 
#line 1851 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned __int64 _shrx_u64(unsigned __int64, unsigned); 
#line 1862 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned _lzcnt_u32(unsigned); 
#line 1864 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned __int64 _lzcnt_u64(unsigned __int64); 
#line 1874 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned _tzcnt_u32(unsigned); 
#line 1876 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned __int64 _tzcnt_u64(unsigned __int64); 
#line 1884 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _invpcid(unsigned, void *); 
#line 1887 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void _Store_HLERelease(volatile long *, long); 
#line 1888 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void _StorePointer_HLERelease(void *volatile *, void *); 
#line 1890 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern long _InterlockedExchange_HLEAcquire(volatile long *, long); 
#line 1891 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern long _InterlockedExchange_HLERelease(volatile long *, long); 
#line 1892 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void *_InterlockedExchangePointer_HLEAcquire(void *volatile *, void *); 
#line 1893 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void *_InterlockedExchangePointer_HLERelease(void *volatile *, void *); 
#line 1895 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern long _InterlockedCompareExchange_HLEAcquire(volatile long *, long, long); 
#line 1896 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern long _InterlockedCompareExchange_HLERelease(volatile long *, long, long); 
#line 1897 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __int64 _InterlockedCompareExchange64_HLEAcquire(volatile __int64 *, __int64, __int64); 
#line 1898 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __int64 _InterlockedCompareExchange64_HLERelease(volatile __int64 *, __int64, __int64); 
#line 1899 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void *_InterlockedCompareExchangePointer_HLEAcquire(void *volatile *, void *, void *); 
#line 1900 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void *_InterlockedCompareExchangePointer_HLERelease(void *volatile *, void *, void *); 
#line 1902 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern long _InterlockedExchangeAdd_HLEAcquire(volatile long *, long); 
#line 1903 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern long _InterlockedExchangeAdd_HLERelease(volatile long *, long); 
#line 1905 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern long _InterlockedAnd_HLEAcquire(volatile long *, long); 
#line 1906 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern long _InterlockedAnd_HLERelease(volatile long *, long); 
#line 1907 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern long _InterlockedOr_HLEAcquire(volatile long *, long); 
#line 1908 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern long _InterlockedOr_HLERelease(volatile long *, long); 
#line 1909 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern long _InterlockedXor_HLEAcquire(volatile long *, long); 
#line 1910 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern long _InterlockedXor_HLERelease(volatile long *, long); 
#line 1912 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned char _interlockedbittestandset_HLEAcquire(long *, long); 
#line 1913 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned char _interlockedbittestandset_HLERelease(long *, long); 
#line 1914 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned char _interlockedbittestandreset_HLEAcquire(long *, long); 
#line 1915 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned char _interlockedbittestandreset_HLERelease(long *, long); 
#line 1918 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void _Store64_HLERelease(volatile __int64 *, __int64); 
#line 1919 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __int64 _InterlockedExchange64_HLEAcquire(volatile __int64 *, __int64); 
#line 1920 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __int64 _InterlockedExchange64_HLERelease(volatile __int64 *, __int64); 
#line 1922 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __int64 _InterlockedExchangeAdd64_HLEAcquire(volatile __int64 *, __int64); 
#line 1923 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __int64 _InterlockedExchangeAdd64_HLERelease(volatile __int64 *, __int64); 
#line 1925 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __int64 _InterlockedAnd64_HLEAcquire(volatile __int64 *, __int64); 
#line 1926 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __int64 _InterlockedAnd64_HLERelease(volatile __int64 *, __int64); 
#line 1927 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __int64 _InterlockedOr64_HLEAcquire(volatile __int64 *, __int64); 
#line 1928 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __int64 _InterlockedOr64_HLERelease(volatile __int64 *, __int64); 
#line 1929 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __int64 _InterlockedXor64_HLEAcquire(volatile __int64 *, __int64); 
#line 1930 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __int64 _InterlockedXor64_HLERelease(volatile __int64 *, __int64); 
#line 1932 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned char _interlockedbittestandset64_HLEAcquire(__int64 *, __int64); 
#line 1933 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned char _interlockedbittestandset64_HLERelease(__int64 *, __int64); 
#line 1934 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned char _interlockedbittestandreset64_HLEAcquire(__int64 *, __int64); 
#line 1935 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned char _interlockedbittestandreset64_HLERelease(__int64 *, __int64); 
#line 1948 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned __cdecl _xbegin(); 
#line 1949 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _xend(); 
#line 1950 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _xabort(const unsigned); 
#line 1951 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned char __cdecl _xtest(); 
#line 1960 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _rdseed16_step(unsigned short *); 
#line 1961 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _rdseed32_step(unsigned *); 
#line 1963 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern int __cdecl _rdseed64_step(unsigned __int64 *); 
#line 1975 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned char __cdecl _addcarryx_u32(unsigned char, unsigned, unsigned, unsigned *); 
#line 1982 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned char __cdecl _addcarryx_u64(unsigned char, unsigned __int64, unsigned __int64, unsigned __int64 *); 
#line 1992 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned short __cdecl _load_be_u16(const void *); 
#line 1993 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned __cdecl _load_be_u32(const void *); 
#line 1994 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern unsigned __int64 __cdecl _load_be_u64(const void *); 
#line 2002 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _store_be_u16(void *, unsigned short); 
#line 2003 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _store_be_u32(void *, unsigned); 
#line 2004 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _store_be_u64(void *, unsigned __int64); 
#line 2012 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_sha1msg1_epu32(__m128i, __m128i); 
#line 2013 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_sha1msg2_epu32(__m128i, __m128i); 
#line 2014 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_sha1nexte_epu32(__m128i, __m128i); 
#line 2015 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_sha1rnds4_epu32(__m128i, __m128i, const int); 
#line 2017 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_sha256msg1_epu32(__m128i, __m128i); 
#line 2018 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_sha256msg2_epu32(__m128i, __m128i); 
#line 2019 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm_sha256rnds2_epu32(__m128i, __m128i, __m128i); 
#line 2024 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void *__cdecl _bnd_set_ptr_bounds(const void *, size_t); 
#line 2025 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void *__cdecl _bnd_narrow_ptr_bounds(const void *, const void *, size_t); 
#line 2026 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void *__cdecl _bnd_copy_ptr_bounds(const void *, const void *); 
#line 2027 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void *__cdecl _bnd_init_ptr_bounds(const void *); 
#line 2028 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _bnd_store_ptr_bounds(const void **, const void *); 
#line 2029 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _bnd_chk_ptr_lbounds(const void *); 
#line 2030 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _bnd_chk_ptr_ubounds(const void *); 
#line 2031 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void __cdecl _bnd_chk_ptr_bounds(const void *, size_t); 
#line 2032 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern void *__cdecl _bnd_load_ptr_bounds(const void **, const void *); 
#line 2033 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern const void *__cdecl _bnd_get_ptr_lbound(const void *); 
#line 2034 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
extern const void *__cdecl _bnd_get_ptr_ubound(const void *); 
#line 2037 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
}
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
extern "C" {
#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128 _mm_macc_ps(__m128, __m128, __m128); 
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128d _mm_macc_pd(__m128d, __m128d, __m128d); 
#line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128 _mm_macc_ss(__m128, __m128, __m128); 
#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128d _mm_macc_sd(__m128d, __m128d, __m128d); 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128 _mm_maddsub_ps(__m128, __m128, __m128); 
#line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128d _mm_maddsub_pd(__m128d, __m128d, __m128d); 
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128 _mm_msubadd_ps(__m128, __m128, __m128); 
#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128d _mm_msubadd_pd(__m128d, __m128d, __m128d); 
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128 _mm_msub_ps(__m128, __m128, __m128); 
#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128d _mm_msub_pd(__m128d, __m128d, __m128d); 
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128 _mm_msub_ss(__m128, __m128, __m128); 
#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128d _mm_msub_sd(__m128d, __m128d, __m128d); 
#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128 _mm_nmacc_ps(__m128, __m128, __m128); 
#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128d _mm_nmacc_pd(__m128d, __m128d, __m128d); 
#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128 _mm_nmacc_ss(__m128, __m128, __m128); 
#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128d _mm_nmacc_sd(__m128d, __m128d, __m128d); 
#line 143 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128 _mm_nmsub_ps(__m128, __m128, __m128); 
#line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128d _mm_nmsub_pd(__m128d, __m128d, __m128d); 
#line 145 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128 _mm_nmsub_ss(__m128, __m128, __m128); 
#line 146 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128d _mm_nmsub_sd(__m128d, __m128d, __m128d); 
#line 149 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_maccs_epi16(__m128i, __m128i, __m128i); 
#line 150 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_macc_epi16(__m128i, __m128i, __m128i); 
#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_maccsd_epi16(__m128i, __m128i, __m128i); 
#line 152 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_maccd_epi16(__m128i, __m128i, __m128i); 
#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_maccs_epi32(__m128i, __m128i, __m128i); 
#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_macc_epi32(__m128i, __m128i, __m128i); 
#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_maccslo_epi32(__m128i, __m128i, __m128i); 
#line 156 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_macclo_epi32(__m128i, __m128i, __m128i); 
#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_maccshi_epi32(__m128i, __m128i, __m128i); 
#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_macchi_epi32(__m128i, __m128i, __m128i); 
#line 159 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_maddsd_epi16(__m128i, __m128i, __m128i); 
#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_maddd_epi16(__m128i, __m128i, __m128i); 
#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_haddw_epi8(__m128i); 
#line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_haddd_epi8(__m128i); 
#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_haddq_epi8(__m128i); 
#line 166 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_haddd_epi16(__m128i); 
#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_haddq_epi16(__m128i); 
#line 168 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_haddq_epi32(__m128i); 
#line 169 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_haddw_epu8(__m128i); 
#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_haddd_epu8(__m128i); 
#line 171 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_haddq_epu8(__m128i); 
#line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_haddd_epu16(__m128i); 
#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_haddq_epu16(__m128i); 
#line 174 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_haddq_epu32(__m128i); 
#line 175 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_hsubw_epi8(__m128i); 
#line 176 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_hsubd_epi16(__m128i); 
#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_hsubq_epi32(__m128i); 
#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_cmov_si128(__m128i, __m128i, __m128i); 
#line 181 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_perm_epi8(__m128i, __m128i, __m128i); 
#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_rot_epi8(__m128i, __m128i); 
#line 185 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_rot_epi16(__m128i, __m128i); 
#line 186 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_rot_epi32(__m128i, __m128i); 
#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_rot_epi64(__m128i, __m128i); 
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_roti_epi8(__m128i, int); 
#line 189 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_roti_epi16(__m128i, int); 
#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_roti_epi32(__m128i, int); 
#line 191 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_roti_epi64(__m128i, int); 
#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_shl_epi8(__m128i, __m128i); 
#line 193 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_shl_epi16(__m128i, __m128i); 
#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_shl_epi32(__m128i, __m128i); 
#line 195 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_shl_epi64(__m128i, __m128i); 
#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_sha_epi8(__m128i, __m128i); 
#line 197 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_sha_epi16(__m128i, __m128i); 
#line 198 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_sha_epi32(__m128i, __m128i); 
#line 199 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_sha_epi64(__m128i, __m128i); 
#line 203 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_com_epu8(__m128i, __m128i, int); 
#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_com_epu16(__m128i, __m128i, int); 
#line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_com_epu32(__m128i, __m128i, int); 
#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_com_epu64(__m128i, __m128i, int); 
#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_com_epi8(__m128i, __m128i, int); 
#line 208 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_com_epi16(__m128i, __m128i, int); 
#line 209 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_com_epi32(__m128i, __m128i, int); 
#line 210 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128i _mm_com_epi64(__m128i, __m128i, int); 
#line 214 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128 _mm_frcz_ps(__m128); 
#line 215 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128d _mm_frcz_pd(__m128d); 
#line 216 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128 _mm_frcz_ss(__m128, __m128); 
#line 217 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128d _mm_frcz_sd(__m128d, __m128d); 
#line 226 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128 _mm_permute2_ps(__m128, __m128, __m128i, int); 
#line 227 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m128d _mm_permute2_pd(__m128d, __m128d, __m128i, int); 
#line 231 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m256 _mm256_macc_ps(__m256, __m256, __m256); 
#line 232 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m256d _mm256_macc_pd(__m256d, __m256d, __m256d); 
#line 233 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m256 _mm256_maddsub_ps(__m256, __m256, __m256); 
#line 234 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m256d _mm256_maddsub_pd(__m256d, __m256d, __m256d); 
#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m256 _mm256_msubadd_ps(__m256, __m256, __m256); 
#line 236 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m256d _mm256_msubadd_pd(__m256d, __m256d, __m256d); 
#line 237 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m256 _mm256_msub_ps(__m256, __m256, __m256); 
#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m256d _mm256_msub_pd(__m256d, __m256d, __m256d); 
#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m256 _mm256_nmacc_ps(__m256, __m256, __m256); 
#line 240 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m256d _mm256_nmacc_pd(__m256d, __m256d, __m256d); 
#line 241 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m256 _mm256_nmsub_ps(__m256, __m256, __m256); 
#line 242 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m256d _mm256_nmsub_pd(__m256d, __m256d, __m256d); 
#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m256i _mm256_cmov_si256(__m256i, __m256i, __m256i); 
#line 244 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m256 _mm256_frcz_ps(__m256); 
#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m256d _mm256_frcz_pd(__m256d); 
#line 246 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m256 _mm256_permute2_ps(__m256, __m256, __m256i, int); 
#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
__m256d _mm256_permute2_pd(__m256d, __m256d, __m256i, int); 
#line 250 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
void __llwpcb(void *); 
#line 251 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
void *__slwpcb(); 
#line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
void __lwpval32(unsigned, unsigned, unsigned); 
#line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned char __lwpins32(unsigned, unsigned, unsigned); 
#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
void __lwpval64(unsigned __int64, unsigned, unsigned); 
#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned char __lwpins64(unsigned __int64, unsigned, unsigned); 
#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned _bextr_u32(unsigned, unsigned, unsigned); 
#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned _andn_u32(unsigned, unsigned); 
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned _tzcnt_u32(unsigned); 
#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned _lzcnt_u32(unsigned); 
#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned _blsr_u32(unsigned); 
#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned _blsmsk_u32(unsigned); 
#line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned _blsi_u32(unsigned); 
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned __int64 _bextr_u64(unsigned __int64, unsigned, unsigned); 
#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned __int64 _andn_u64(unsigned __int64, unsigned __int64); 
#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned __int64 _tzcnt_u64(unsigned __int64); 
#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned __int64 _lzcnt_u64(unsigned __int64); 
#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned __int64 _blsr_u64(unsigned __int64); 
#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned __int64 _blsmsk_u64(unsigned __int64); 
#line 274 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned __int64 _blsi_u64(unsigned __int64); 
#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned _bextri_u32(unsigned, unsigned); 
#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned _blcfill_u32(unsigned); 
#line 280 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned _blsfill_u32(unsigned); 
#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned _blcs_u32(unsigned); 
#line 282 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned _tzmsk_u32(unsigned); 
#line 283 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned _blcic_u32(unsigned); 
#line 284 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned _blsic_u32(unsigned); 
#line 285 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned _t1mskc_u32(unsigned); 
#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned _blcmsk_u32(unsigned); 
#line 287 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned _blci_u32(unsigned); 
#line 289 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned __int64 _bextri_u64(unsigned __int64, unsigned); 
#line 290 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned __int64 _blcfill_u64(unsigned __int64); 
#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned __int64 _blsfill_u64(unsigned __int64); 
#line 292 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned __int64 _blcs_u64(unsigned __int64); 
#line 293 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned __int64 _tzmsk_u64(unsigned __int64); 
#line 294 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned __int64 _blcic_u64(unsigned __int64); 
#line 295 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned __int64 _blsic_u64(unsigned __int64); 
#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned __int64 _t1mskc_u64(unsigned __int64); 
#line 297 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned __int64 _blcmsk_u64(unsigned __int64); 
#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
unsigned __int64 _blci_u64(unsigned __int64); 
#line 301 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
void _mm_monitorx(const void *, unsigned, unsigned); 
#line 302 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
void _mm_mwaitx(unsigned, unsigned, unsigned); 
#line 304 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
void _mm_clzero(const void *); 
#line 307 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
}
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
extern "C" {
#line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void *_AddressOfReturnAddress(); 
#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char _BitScanForward(unsigned long * _Index, unsigned long _Mask); 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char _BitScanForward64(unsigned long * _Index, unsigned __int64 _Mask); 
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char _BitScanReverse(unsigned long * _Index, unsigned long _Mask); 
#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char _BitScanReverse64(unsigned long * _Index, unsigned __int64 _Mask); 
#line 159 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
long _InterlockedAnd(volatile long * _Value, long _Mask); 
#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
short _InterlockedAnd16(volatile short * _Value, short _Mask); 
#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
short _InterlockedAnd16_np(volatile short * _Value, short _Mask); 
#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _InterlockedAnd64(volatile __int64 * _Value, __int64 _Mask); 
#line 168 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _InterlockedAnd64_np(volatile __int64 * _Value, __int64 _Mask); 
#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
char _InterlockedAnd8(volatile char * _Value, char _Mask); 
#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
char _InterlockedAnd8_np(volatile char * _Value, char _Mask); 
#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
long _InterlockedAnd_np(volatile long * _Value, long _Mask); 
#line 179 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
long _InterlockedCompareExchange(volatile long * _Destination, long _Exchange, long _Comparand); 
#line 181 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char _InterlockedCompareExchange128(volatile __int64 * _Destination, __int64 _ExchangeHigh, __int64 _ExchangeLow, __int64 * _ComparandResult); 
#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char _InterlockedCompareExchange128_np(volatile __int64 * _Destination, __int64 _ExchangeHigh, __int64 _ExchangeLow, __int64 * _ComparandResult); 
#line 186 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
short _InterlockedCompareExchange16(volatile short * _Destination, short _Exchange, short _Comparand); 
#line 189 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
short _InterlockedCompareExchange16_np(volatile short * _Destination, short _Exchange, short _Comparand); 
#line 191 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _InterlockedCompareExchange64(volatile __int64 * _Destination, __int64 _Exchange, __int64 _Comparand); 
#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _InterlockedCompareExchange64_np(volatile __int64 * _Destination, __int64 _Exchange, __int64 _Comparand); 
#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
char _InterlockedCompareExchange8(volatile char * _Destination, char _Exchange, char _Comparand); 
#line 200 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void *_InterlockedCompareExchangePointer(void *volatile * _Destination, void * _Exchange, void * _Comparand); 
#line 203 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void *_InterlockedCompareExchangePointer_np(void *volatile * _Destination, void * _Exchange, void * _Comparand); 
#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
long _InterlockedCompareExchange_np(volatile long * _Destination, long _Exchange, long _Comparand); 
#line 209 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
long _InterlockedDecrement(volatile long * _Addend); 
#line 211 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
short _InterlockedDecrement16(volatile short * _Addend); 
#line 215 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _InterlockedDecrement64(volatile __int64 * _Addend); 
#line 222 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
long _InterlockedExchange(volatile long * _Target, long _Value); 
#line 224 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
short _InterlockedExchange16(volatile short * _Target, short _Value); 
#line 228 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _InterlockedExchange64(volatile __int64 * _Target, __int64 _Value); 
#line 232 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
char _InterlockedExchange8(volatile char * _Target, char _Value); 
#line 236 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
long _InterlockedExchangeAdd(volatile long * _Addend, long _Value); 
#line 237 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
short _InterlockedExchangeAdd16(volatile short * _Addend, short _Value); 
#line 241 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _InterlockedExchangeAdd64(volatile __int64 * _Addend, __int64 _Value); 
#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
char _InterlockedExchangeAdd8(volatile char * _Addend, char _Value); 
#line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void *_InterlockedExchangePointer(void *volatile * _Target, void * _Value); 
#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
long _InterlockedIncrement(volatile long * _Addend); 
#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
short _InterlockedIncrement16(volatile short * _Addend); 
#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _InterlockedIncrement64(volatile __int64 * _Addend); 
#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
long _InterlockedOr(volatile long * _Value, long _Mask); 
#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
short _InterlockedOr16(volatile short * _Value, short _Mask); 
#line 276 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
short _InterlockedOr16_np(volatile short * _Value, short _Mask); 
#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _InterlockedOr64(volatile __int64 * _Value, __int64 _Mask); 
#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _InterlockedOr64_np(volatile __int64 * _Value, __int64 _Mask); 
#line 283 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
char _InterlockedOr8(volatile char * _Value, char _Mask); 
#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
char _InterlockedOr8_np(volatile char * _Value, char _Mask); 
#line 290 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
long _InterlockedOr_np(volatile long * _Value, long _Mask); 
#line 292 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
long _InterlockedXor(volatile long * _Value, long _Mask); 
#line 293 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
short _InterlockedXor16(volatile short * _Value, short _Mask); 
#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
short _InterlockedXor16_np(volatile short * _Value, short _Mask); 
#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _InterlockedXor64(volatile __int64 * _Value, __int64 _Mask); 
#line 301 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _InterlockedXor64_np(volatile __int64 * _Value, __int64 _Mask); 
#line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
char _InterlockedXor8(volatile char * _Value, char _Mask); 
#line 306 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
char _InterlockedXor8_np(volatile char * _Value, char _Mask); 
#line 310 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
long _InterlockedXor_np(volatile long * _Value, long _Mask); 
#line 320 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _ReadBarrier(); 
#line 327 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _ReadWriteBarrier(); 
#line 328 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void *_ReturnAddress(); 
#line 330 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _WriteBarrier(); 
#line 340 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __addgsbyte(unsigned long, unsigned char); 
#line 341 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __addgsdword(unsigned long, unsigned long); 
#line 342 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __addgsqword(unsigned long, unsigned __int64); 
#line 343 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __addgsword(unsigned long, unsigned short); 
#line 348 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __code_seg(const char *); 
#line 349 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __cpuid(int [4], int); 
#line 350 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __cpuidex(int [4], int, int); 
#line 351 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __cdecl __debugbreak(); 
#line 353 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 __emul(int, int); 
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 __emulu(unsigned, unsigned); 
#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__declspec(noreturn) void __fastfail(unsigned); 
#line 356 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __faststorefence(); 
#line 357 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __getcallerseflags(); 
#line 358 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __halt(); 
#line 361 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char __inbyte(unsigned short); 
#line 362 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __inbytestring(unsigned short, unsigned char *, unsigned long); 
#line 366 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __incgsbyte(unsigned long); 
#line 367 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __incgsdword(unsigned long); 
#line 368 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __incgsqword(unsigned long); 
#line 369 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __incgsword(unsigned long); 
#line 374 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned long __indword(unsigned short); 
#line 375 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __indwordstring(unsigned short, unsigned long *, unsigned long); 
#line 376 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __int2c(); 
#line 377 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __invlpg(void *); 
#line 378 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned short __inword(unsigned short); 
#line 379 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __inwordstring(unsigned short, unsigned short *, unsigned long); 
#line 389 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __lidt(void *); 
#line 390 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 __ll_lshift(unsigned __int64, int); 
#line 391 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 __ll_rshift(__int64, int); 
#line 392 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __lzcnt(unsigned); 
#line 393 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned short __lzcnt16(unsigned short); 
#line 394 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 __lzcnt64(unsigned __int64); 
#line 395 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __movsb(unsigned char *, const unsigned char *, size_t); 
#line 396 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __movsd(unsigned long *, const unsigned long *, size_t); 
#line 397 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __movsq(unsigned __int64 *, const unsigned __int64 *, size_t); 
#line 398 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __movsw(unsigned short *, const unsigned short *, size_t); 
#line 399 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 __mulh(__int64, __int64); 
#line 400 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __nop(); 
#line 401 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __nvreg_restore_fence(); 
#line 402 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __nvreg_save_fence(); 
#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __outbyte(unsigned short, unsigned char); 
#line 404 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __outbytestring(unsigned short, unsigned char *, unsigned long); 
#line 405 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __outdword(unsigned short, unsigned long); 
#line 406 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __outdwordstring(unsigned short, unsigned long *, unsigned long); 
#line 407 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __outword(unsigned short, unsigned short); 
#line 408 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __outwordstring(unsigned short, unsigned short *, unsigned long); 
#line 409 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __popcnt(unsigned); 
#line 410 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned short __popcnt16(unsigned short); 
#line 411 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 __popcnt64(unsigned __int64); 
#line 415 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 __rdtsc(); 
#line 416 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 __rdtscp(unsigned *); 
#line 417 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 __readcr0(); 
#line 419 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 __readcr2(); 
#line 421 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 __readcr3(); 
#line 423 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 __readcr4(); 
#line 425 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 __readcr8(); 
#line 427 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 __readdr(unsigned); 
#line 429 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 __readeflags(); 
#line 435 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char __readgsbyte(unsigned long); 
#line 436 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned long __readgsdword(unsigned long); 
#line 437 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 __readgsqword(unsigned long); 
#line 438 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned short __readgsword(unsigned long); 
#line 439 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 __readmsr(unsigned long); 
#line 440 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 __readpmc(unsigned long); 
#line 445 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned long __segmentlimit(unsigned long); 
#line 447 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 __shiftleft128(unsigned __int64 _LowPart, unsigned __int64 _HighPart, unsigned char _Shift); 
#line 448 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 __shiftright128(unsigned __int64 _LowPart, unsigned __int64 _HighPart, unsigned char _Shift); 
#line 449 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __sidt(void *); 
#line 451 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __stosb(unsigned char *, unsigned char, size_t); 
#line 452 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __stosd(unsigned long *, unsigned long, size_t); 
#line 453 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __stosq(unsigned __int64 *, unsigned __int64, size_t); 
#line 454 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __stosw(unsigned short *, unsigned short, size_t); 
#line 455 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __svm_clgi(); 
#line 456 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __svm_invlpga(void *, int); 
#line 457 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __svm_skinit(int); 
#line 458 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __svm_stgi(); 
#line 459 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __svm_vmload(size_t); 
#line 460 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __svm_vmrun(size_t); 
#line 461 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __svm_vmsave(size_t); 
#line 467 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __ud2(); 
#line 468 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 __ull_rshift(unsigned __int64, int); 
#line 469 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 __umulh(unsigned __int64, unsigned __int64); 
#line 470 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __vmx_off(); 
#line 471 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char __vmx_on(unsigned __int64 *); 
#line 472 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char __vmx_vmclear(unsigned __int64 *); 
#line 473 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char __vmx_vmlaunch(); 
#line 474 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char __vmx_vmptrld(unsigned __int64 *); 
#line 475 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __vmx_vmptrst(unsigned __int64 *); 
#line 476 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char __vmx_vmread(size_t, size_t *); 
#line 477 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char __vmx_vmresume(); 
#line 478 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char __vmx_vmwrite(size_t, size_t); 
#line 479 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __wbinvd(); 
#line 482 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __writecr0(unsigned __int64); 
#line 484 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __writecr3(unsigned __int64); 
#line 486 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __writecr4(unsigned __int64); 
#line 488 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __writecr8(unsigned __int64); 
#line 490 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __writedr(unsigned, unsigned __int64); 
#line 492 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __writeeflags(unsigned __int64); 
#line 498 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __writegsbyte(unsigned long, unsigned char); 
#line 499 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __writegsdword(unsigned long, unsigned long); 
#line 500 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __writegsqword(unsigned long, unsigned __int64); 
#line 501 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __writegsword(unsigned long, unsigned short); 
#line 502 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __writemsr(unsigned long, unsigned __int64); 
#line 508 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char _bittest(const long *, long); 
#line 509 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char _bittest64(const __int64 *, __int64); 
#line 510 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char _bittestandcomplement(long *, long); 
#line 511 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char _bittestandcomplement64(__int64 *, __int64); 
#line 512 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char _bittestandreset(long *, long); 
#line 513 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char _bittestandreset64(__int64 *, __int64); 
#line 514 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char _bittestandset(long *, long); 
#line 515 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char _bittestandset64(__int64 *, __int64); 
#line 516 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 __cdecl _byteswap_uint64(unsigned __int64); 
#line 517 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned long __cdecl _byteswap_ulong(unsigned long); 
#line 518 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned short __cdecl _byteswap_ushort(unsigned short); 
#line 519 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __cdecl _disable(); 
#line 520 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void __cdecl _enable(); 
#line 521 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char _interlockedbittestandreset(volatile long *, long); 
#line 522 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char _interlockedbittestandreset64(volatile __int64 *, __int64); 
#line 529 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char _interlockedbittestandset(volatile long *, long); 
#line 530 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char _interlockedbittestandset64(volatile __int64 *, __int64); 
#line 547 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned long __cdecl _lrotl(unsigned long, int); 
#line 548 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned long __cdecl _lrotr(unsigned long, int); 
#line 609 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _m_prefetch(void *); 
#line 610 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _m_prefetchw(const volatile void *); 
#line 646 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_abs_epi16(__m128i); 
#line 647 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_abs_epi32(__m128i); 
#line 648 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_abs_epi8(__m128i); 
#line 652 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_add_epi16(__m128i, __m128i); 
#line 653 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_add_epi32(__m128i, __m128i); 
#line 654 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_add_epi64(__m128i, __m128i); 
#line 655 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_add_epi8(__m128i, __m128i); 
#line 656 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_add_pd(__m128d, __m128d); 
#line 657 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_add_ps(__m128, __m128); 
#line 658 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_add_sd(__m128d, __m128d); 
#line 660 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_add_ss(__m128, __m128); 
#line 661 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_adds_epi16(__m128i, __m128i); 
#line 662 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_adds_epi8(__m128i, __m128i); 
#line 663 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_adds_epu16(__m128i, __m128i); 
#line 664 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_adds_epu8(__m128i, __m128i); 
#line 665 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_addsub_pd(__m128d, __m128d); 
#line 666 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_addsub_ps(__m128, __m128); 
#line 667 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_alignr_epi8(__m128i, __m128i, int); 
#line 669 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_and_pd(__m128d, __m128d); 
#line 670 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_and_ps(__m128, __m128); 
#line 671 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_and_si128(__m128i, __m128i); 
#line 672 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_andnot_pd(__m128d, __m128d); 
#line 673 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_andnot_ps(__m128, __m128); 
#line 674 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_andnot_si128(__m128i, __m128i); 
#line 675 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_avg_epu16(__m128i, __m128i); 
#line 676 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_avg_epu8(__m128i, __m128i); 
#line 677 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_blend_epi16(__m128i, __m128i, int); 
#line 678 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_blend_pd(__m128d, __m128d, int); 
#line 679 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_blend_ps(__m128, __m128, int); 
#line 680 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_blendv_epi8(__m128i, __m128i, __m128i); 
#line 681 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_blendv_pd(__m128d, __m128d, __m128d); 
#line 682 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_blendv_ps(__m128, __m128, __m128); 
#line 683 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_clflush(const void *); 
#line 684 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_clflushopt(const void *); 
#line 685 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_clwb(const void *); 
#line 686 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_clzero(const void *); 
#line 687 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cmpeq_epi16(__m128i, __m128i); 
#line 688 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cmpeq_epi32(__m128i, __m128i); 
#line 689 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cmpeq_epi64(__m128i, __m128i); 
#line 690 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cmpeq_epi8(__m128i, __m128i); 
#line 691 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmpeq_pd(__m128d, __m128d); 
#line 692 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmpeq_ps(__m128, __m128); 
#line 693 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmpeq_sd(__m128d, __m128d); 
#line 694 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmpeq_ss(__m128, __m128); 
#line 695 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_cmpestra(__m128i, int, __m128i, int, int); 
#line 696 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_cmpestrc(__m128i, int, __m128i, int, int); 
#line 697 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_cmpestri(__m128i, int, __m128i, int, int); 
#line 698 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cmpestrm(__m128i, int, __m128i, int, int); 
#line 699 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_cmpestro(__m128i, int, __m128i, int, int); 
#line 700 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_cmpestrs(__m128i, int, __m128i, int, int); 
#line 701 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_cmpestrz(__m128i, int, __m128i, int, int); 
#line 702 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmpge_pd(__m128d, __m128d); 
#line 703 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmpge_ps(__m128, __m128); 
#line 704 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmpge_sd(__m128d, __m128d); 
#line 705 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmpge_ss(__m128, __m128); 
#line 706 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cmpgt_epi16(__m128i, __m128i); 
#line 707 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cmpgt_epi32(__m128i, __m128i); 
#line 708 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cmpgt_epi64(__m128i, __m128i); 
#line 709 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cmpgt_epi8(__m128i, __m128i); 
#line 710 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmpgt_pd(__m128d, __m128d); 
#line 711 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmpgt_ps(__m128, __m128); 
#line 712 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmpgt_sd(__m128d, __m128d); 
#line 713 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmpgt_ss(__m128, __m128); 
#line 714 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_cmpistra(__m128i, __m128i, int); 
#line 715 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_cmpistrc(__m128i, __m128i, int); 
#line 716 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_cmpistri(__m128i, __m128i, int); 
#line 717 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cmpistrm(__m128i, __m128i, int); 
#line 718 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_cmpistro(__m128i, __m128i, int); 
#line 719 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_cmpistrs(__m128i, __m128i, int); 
#line 720 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_cmpistrz(__m128i, __m128i, int); 
#line 721 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmple_pd(__m128d, __m128d); 
#line 722 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmple_ps(__m128, __m128); 
#line 723 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmple_sd(__m128d, __m128d); 
#line 724 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmple_ss(__m128, __m128); 
#line 725 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cmplt_epi16(__m128i, __m128i); 
#line 726 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cmplt_epi32(__m128i, __m128i); 
#line 727 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cmplt_epi8(__m128i, __m128i); 
#line 728 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmplt_pd(__m128d, __m128d); 
#line 729 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmplt_ps(__m128, __m128); 
#line 730 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmplt_sd(__m128d, __m128d); 
#line 731 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmplt_ss(__m128, __m128); 
#line 732 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmpneq_pd(__m128d, __m128d); 
#line 733 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmpneq_ps(__m128, __m128); 
#line 734 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmpneq_sd(__m128d, __m128d); 
#line 735 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmpneq_ss(__m128, __m128); 
#line 736 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmpnge_pd(__m128d, __m128d); 
#line 737 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmpnge_ps(__m128, __m128); 
#line 738 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmpnge_sd(__m128d, __m128d); 
#line 739 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmpnge_ss(__m128, __m128); 
#line 740 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmpngt_pd(__m128d, __m128d); 
#line 741 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmpngt_ps(__m128, __m128); 
#line 742 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmpngt_sd(__m128d, __m128d); 
#line 743 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmpngt_ss(__m128, __m128); 
#line 744 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmpnle_pd(__m128d, __m128d); 
#line 745 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmpnle_ps(__m128, __m128); 
#line 746 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmpnle_sd(__m128d, __m128d); 
#line 747 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmpnle_ss(__m128, __m128); 
#line 748 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmpnlt_pd(__m128d, __m128d); 
#line 749 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmpnlt_ps(__m128, __m128); 
#line 750 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmpnlt_sd(__m128d, __m128d); 
#line 751 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmpnlt_ss(__m128, __m128); 
#line 752 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmpord_pd(__m128d, __m128d); 
#line 753 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmpord_ps(__m128, __m128); 
#line 754 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmpord_sd(__m128d, __m128d); 
#line 755 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmpord_ss(__m128, __m128); 
#line 756 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmpunord_pd(__m128d, __m128d); 
#line 757 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmpunord_ps(__m128, __m128); 
#line 758 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cmpunord_sd(__m128d, __m128d); 
#line 759 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cmpunord_ss(__m128, __m128); 
#line 760 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_comieq_sd(__m128d, __m128d); 
#line 761 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_comieq_ss(__m128, __m128); 
#line 762 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_comige_sd(__m128d, __m128d); 
#line 763 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_comige_ss(__m128, __m128); 
#line 764 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_comigt_sd(__m128d, __m128d); 
#line 765 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_comigt_ss(__m128, __m128); 
#line 766 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_comile_sd(__m128d, __m128d); 
#line 767 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_comile_ss(__m128, __m128); 
#line 768 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_comilt_sd(__m128d, __m128d); 
#line 769 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_comilt_ss(__m128, __m128); 
#line 770 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_comineq_sd(__m128d, __m128d); 
#line 771 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_comineq_ss(__m128, __m128); 
#line 772 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned _mm_crc32_u16(unsigned, unsigned short); 
#line 773 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned _mm_crc32_u32(unsigned, unsigned); 
#line 774 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 _mm_crc32_u64(unsigned __int64, unsigned __int64); 
#line 775 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned _mm_crc32_u8(unsigned, unsigned char); 
#line 778 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cvt_si2ss(__m128, int); 
#line 779 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_cvt_ss2si(__m128); 
#line 780 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cvtepi16_epi32(__m128i); 
#line 781 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cvtepi16_epi64(__m128i); 
#line 782 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cvtepi32_epi64(__m128i); 
#line 783 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cvtepi32_pd(__m128i); 
#line 784 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cvtepi32_ps(__m128i); 
#line 785 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cvtepi8_epi16(__m128i); 
#line 786 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cvtepi8_epi32(__m128i); 
#line 787 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cvtepi8_epi64(__m128i); 
#line 788 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cvtepu16_epi32(__m128i); 
#line 789 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cvtepu16_epi64(__m128i); 
#line 790 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cvtepu32_epi64(__m128i); 
#line 791 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cvtepu8_epi16(__m128i); 
#line 792 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cvtepu8_epi32(__m128i); 
#line 793 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cvtepu8_epi64(__m128i); 
#line 794 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cvtpd_epi32(__m128d); 
#line 796 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cvtpd_ps(__m128d); 
#line 798 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cvtps_epi32(__m128); 
#line 799 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cvtps_pd(__m128); 
#line 800 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_cvtsd_si32(__m128d); 
#line 801 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _mm_cvtsd_si64(__m128d); 
#line 802 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _mm_cvtsd_si64x(__m128d); 
#line 803 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cvtsd_ss(__m128, __m128d); 
#line 804 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_cvtsi128_si32(__m128i); 
#line 805 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _mm_cvtsi128_si64(__m128i); 
#line 806 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _mm_cvtsi128_si64x(__m128i); 
#line 807 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cvtsi32_sd(__m128d, int); 
#line 808 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cvtsi32_si128(int); 
#line 809 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cvtsi64_sd(__m128d, __int64); 
#line 810 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cvtsi64_si128(__int64); 
#line 811 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cvtsi64_ss(__m128, __int64); 
#line 812 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cvtsi64x_sd(__m128d, __int64); 
#line 813 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cvtsi64x_si128(__int64); 
#line 814 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_cvtsi64x_ss(__m128, __int64); 
#line 815 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_cvtss_sd(__m128d, __m128); 
#line 816 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _mm_cvtss_si64(__m128); 
#line 817 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _mm_cvtss_si64x(__m128); 
#line 819 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_cvtt_ss2si(__m128); 
#line 820 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cvttpd_epi32(__m128d); 
#line 822 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_cvttps_epi32(__m128); 
#line 823 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_cvttsd_si32(__m128d); 
#line 824 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _mm_cvttsd_si64(__m128d); 
#line 825 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _mm_cvttsd_si64x(__m128d); 
#line 826 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _mm_cvttss_si64(__m128); 
#line 827 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _mm_cvttss_si64x(__m128); 
#line 828 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_div_pd(__m128d, __m128d); 
#line 829 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_div_ps(__m128, __m128); 
#line 830 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_div_sd(__m128d, __m128d); 
#line 831 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_div_ss(__m128, __m128); 
#line 832 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_dp_pd(__m128d, __m128d, int); 
#line 833 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_dp_ps(__m128, __m128, int); 
#line 834 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_extract_epi16(__m128i, int); 
#line 835 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_extract_epi32(__m128i, int); 
#line 836 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _mm_extract_epi64(__m128i, int); 
#line 837 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_extract_epi8(__m128i, int); 
#line 838 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_extract_ps(__m128, int); 
#line 839 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_extract_si64(__m128i, __m128i); 
#line 840 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_extracti_si64(__m128i, int, int); 
#line 841 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned _mm_getcsr(); 
#line 842 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_hadd_epi16(__m128i, __m128i); 
#line 843 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_hadd_epi32(__m128i, __m128i); 
#line 844 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_hadd_pd(__m128d, __m128d); 
#line 847 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_hadd_ps(__m128, __m128); 
#line 848 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_hadds_epi16(__m128i, __m128i); 
#line 850 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_hsub_epi16(__m128i, __m128i); 
#line 851 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_hsub_epi32(__m128i, __m128i); 
#line 852 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_hsub_pd(__m128d, __m128d); 
#line 855 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_hsub_ps(__m128, __m128); 
#line 856 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_hsubs_epi16(__m128i, __m128i); 
#line 858 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_insert_epi16(__m128i, int, int); 
#line 859 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_insert_epi32(__m128i, int, int); 
#line 860 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_insert_epi64(__m128i, __int64, int); 
#line 861 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_insert_epi8(__m128i, int, int); 
#line 862 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_insert_ps(__m128, __m128, int); 
#line 863 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_insert_si64(__m128i, __m128i); 
#line 864 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_inserti_si64(__m128i, __m128i, int, int); 
#line 865 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_lddqu_si128(const __m128i *); 
#line 866 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_lfence(); 
#line 867 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_load1_pd(const double *); 
#line 868 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_load_pd(const double *); 
#line 869 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_load_ps(const float *); 
#line 870 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_load_ps1(const float *); 
#line 871 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_load_sd(const double *); 
#line 872 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_load_si128(const __m128i *); 
#line 873 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_load_ss(const float *); 
#line 874 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_loaddup_pd(const double *); 
#line 875 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_loadh_pd(__m128d, const double *); 
#line 876 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_loadh_pi(__m128, const __m64 *); 
#line 877 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_loadl_epi64(const __m128i *); 
#line 878 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_loadl_pd(__m128d, const double *); 
#line 879 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_loadl_pi(__m128, const __m64 *); 
#line 880 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_loadr_pd(const double *); 
#line 881 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_loadr_ps(const float *); 
#line 882 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_loadu_pd(const double *); 
#line 883 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_loadu_ps(const float *); 
#line 884 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_loadu_si128(const __m128i *); 
#line 885 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_madd_epi16(__m128i, __m128i); 
#line 886 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_maddubs_epi16(__m128i, __m128i); 
#line 888 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_maskmoveu_si128(__m128i, __m128i, char *); 
#line 889 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_max_epi16(__m128i, __m128i); 
#line 890 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_max_epi32(__m128i, __m128i); 
#line 891 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_max_epi8(__m128i, __m128i); 
#line 892 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_max_epu16(__m128i, __m128i); 
#line 893 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_max_epu32(__m128i, __m128i); 
#line 894 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_max_epu8(__m128i, __m128i); 
#line 895 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_max_pd(__m128d, __m128d); 
#line 896 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_max_ps(__m128, __m128); 
#line 897 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_max_sd(__m128d, __m128d); 
#line 898 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_max_ss(__m128, __m128); 
#line 899 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_mfence(); 
#line 900 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_min_epi16(__m128i, __m128i); 
#line 901 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_min_epi32(__m128i, __m128i); 
#line 902 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_min_epi8(__m128i, __m128i); 
#line 903 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_min_epu16(__m128i, __m128i); 
#line 904 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_min_epu32(__m128i, __m128i); 
#line 905 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_min_epu8(__m128i, __m128i); 
#line 906 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_min_pd(__m128d, __m128d); 
#line 907 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_min_ps(__m128, __m128); 
#line 908 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_min_sd(__m128d, __m128d); 
#line 909 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_min_ss(__m128, __m128); 
#line 910 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_minpos_epu16(__m128i); 
#line 911 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_monitor(const void *, unsigned, unsigned); 
#line 912 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_move_epi64(__m128i); 
#line 913 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_move_sd(__m128d, __m128d); 
#line 914 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_move_ss(__m128, __m128); 
#line 915 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_movedup_pd(__m128d); 
#line 916 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_movehdup_ps(__m128); 
#line 917 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_movehl_ps(__m128, __m128); 
#line 918 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_moveldup_ps(__m128); 
#line 919 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_movelh_ps(__m128, __m128); 
#line 920 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_movemask_epi8(__m128i); 
#line 921 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_movemask_pd(__m128d); 
#line 922 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_movemask_ps(__m128); 
#line 925 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_mpsadbw_epu8(__m128i, __m128i, int); 
#line 926 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_mul_epi32(__m128i, __m128i); 
#line 927 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_mul_epu32(__m128i, __m128i); 
#line 928 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_mul_pd(__m128d, __m128d); 
#line 929 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_mul_ps(__m128, __m128); 
#line 930 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_mul_sd(__m128d, __m128d); 
#line 931 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_mul_ss(__m128, __m128); 
#line 933 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_mulhi_epi16(__m128i, __m128i); 
#line 934 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_mulhi_epu16(__m128i, __m128i); 
#line 935 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_mulhrs_epi16(__m128i, __m128i); 
#line 937 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_mullo_epi16(__m128i, __m128i); 
#line 938 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_mullo_epi32(__m128i, __m128i); 
#line 939 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_mwait(unsigned, unsigned); 
#line 940 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_or_pd(__m128d, __m128d); 
#line 941 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_or_ps(__m128, __m128); 
#line 942 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_or_si128(__m128i, __m128i); 
#line 943 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_packs_epi16(__m128i, __m128i); 
#line 944 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_packs_epi32(__m128i, __m128i); 
#line 945 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_packus_epi16(__m128i, __m128i); 
#line 946 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_packus_epi32(__m128i, __m128i); 
#line 947 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_pause(); 
#line 948 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_popcnt_u32(unsigned); 
#line 949 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _mm_popcnt_u64(unsigned __int64); 
#line 950 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_prefetch(const char *, int); 
#line 951 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_rcp_ps(__m128); 
#line 952 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_rcp_ss(__m128); 
#line 953 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_round_pd(__m128d, int); 
#line 954 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_round_ps(__m128, int); 
#line 955 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_round_sd(__m128d, __m128d, int); 
#line 956 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_round_ss(__m128, __m128, int); 
#line 957 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_rsqrt_ps(__m128); 
#line 958 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_rsqrt_ss(__m128); 
#line 959 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_sad_epu8(__m128i, __m128i); 
#line 960 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_set1_epi16(short); 
#line 961 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_set1_epi32(int); 
#line 963 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_set1_epi64x(__int64); 
#line 964 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_set1_epi8(char); 
#line 965 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_set1_pd(double); 
#line 969 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_set_epi16(short, short, short, short, short, short, short, short); 
#line 970 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_set_epi32(int, int, int, int); 
#line 972 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_set_epi64x(__int64, __int64); 
#line 973 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_set_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char); 
#line 974 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_set_pd(double, double); 
#line 978 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_set_ps(float, float, float, float); 
#line 979 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_set_ps1(float); 
#line 980 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_set_sd(double); 
#line 981 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_set_ss(float); 
#line 982 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_setcsr(unsigned); 
#line 983 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_setl_epi64(__m128i); 
#line 984 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_setr_epi16(short, short, short, short, short, short, short, short); 
#line 985 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_setr_epi32(int, int, int, int); 
#line 987 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_setr_epi64x(__int64, __int64); 
#line 988 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_setr_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char); 
#line 989 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_setr_pd(double, double); 
#line 993 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_setr_ps(float, float, float, float); 
#line 994 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_setzero_pd(); 
#line 995 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_setzero_ps(); 
#line 996 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_setzero_si128(); 
#line 998 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_sfence(); 
#line 999 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_shuffle_epi32(__m128i, int); 
#line 1000 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_shuffle_epi8(__m128i, __m128i); 
#line 1001 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_shuffle_pd(__m128d, __m128d, int); 
#line 1003 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_shuffle_ps(__m128, __m128, unsigned); 
#line 1004 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_shufflehi_epi16(__m128i, int); 
#line 1005 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_shufflelo_epi16(__m128i, int); 
#line 1006 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_sign_epi16(__m128i, __m128i); 
#line 1007 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_sign_epi32(__m128i, __m128i); 
#line 1008 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_sign_epi8(__m128i, __m128i); 
#line 1012 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_sll_epi16(__m128i, __m128i); 
#line 1013 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_sll_epi32(__m128i, __m128i); 
#line 1014 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_sll_epi64(__m128i, __m128i); 
#line 1015 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_slli_epi16(__m128i, int); 
#line 1016 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_slli_epi32(__m128i, int); 
#line 1017 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_slli_epi64(__m128i, int); 
#line 1018 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_slli_si128(__m128i, int); 
#line 1019 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_sqrt_pd(__m128d); 
#line 1020 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_sqrt_ps(__m128); 
#line 1021 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_sqrt_sd(__m128d, __m128d); 
#line 1022 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_sqrt_ss(__m128); 
#line 1023 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_sra_epi16(__m128i, __m128i); 
#line 1024 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_sra_epi32(__m128i, __m128i); 
#line 1025 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_srai_epi16(__m128i, int); 
#line 1026 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_srai_epi32(__m128i, int); 
#line 1027 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_srl_epi16(__m128i, __m128i); 
#line 1028 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_srl_epi32(__m128i, __m128i); 
#line 1029 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_srl_epi64(__m128i, __m128i); 
#line 1030 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_srli_epi16(__m128i, int); 
#line 1031 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_srli_epi32(__m128i, int); 
#line 1032 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_srli_epi64(__m128i, int); 
#line 1033 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_srli_si128(__m128i, int); 
#line 1034 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_store1_pd(double *, __m128d); 
#line 1035 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_store_pd(double *, __m128d); 
#line 1036 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_store_ps(float *, __m128); 
#line 1037 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_store_ps1(float *, __m128); 
#line 1038 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_store_sd(double *, __m128d); 
#line 1039 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_store_si128(__m128i *, __m128i); 
#line 1040 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_store_ss(float *, __m128); 
#line 1041 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_storeh_pd(double *, __m128d); 
#line 1042 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_storeh_pi(__m64 *, __m128); 
#line 1043 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_storel_epi64(__m128i *, __m128i); 
#line 1044 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_storel_pd(double *, __m128d); 
#line 1045 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_storel_pi(__m64 *, __m128); 
#line 1046 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_storer_pd(double *, __m128d); 
#line 1047 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_storer_ps(float *, __m128); 
#line 1048 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_storeu_pd(double *, __m128d); 
#line 1049 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_storeu_ps(float *, __m128); 
#line 1050 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_storeu_si128(__m128i *, __m128i); 
#line 1051 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_stream_load_si128(const __m128i *); 
#line 1052 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_stream_pd(double *, __m128d); 
#line 1054 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_stream_ps(float *, __m128); 
#line 1055 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_stream_sd(double *, __m128d); 
#line 1056 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_stream_si128(__m128i *, __m128i); 
#line 1057 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_stream_si32(int *, int); 
#line 1058 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_stream_si64x(__int64 *, __int64); 
#line 1059 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_stream_ss(float *, __m128); 
#line 1060 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_sub_epi16(__m128i, __m128i); 
#line 1061 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_sub_epi32(__m128i, __m128i); 
#line 1062 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_sub_epi64(__m128i, __m128i); 
#line 1063 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_sub_epi8(__m128i, __m128i); 
#line 1064 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_sub_pd(__m128d, __m128d); 
#line 1065 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_sub_ps(__m128, __m128); 
#line 1066 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_sub_sd(__m128d, __m128d); 
#line 1068 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_sub_ss(__m128, __m128); 
#line 1069 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_subs_epi16(__m128i, __m128i); 
#line 1070 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_subs_epi8(__m128i, __m128i); 
#line 1071 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_subs_epu16(__m128i, __m128i); 
#line 1072 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_subs_epu8(__m128i, __m128i); 
#line 1073 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_testc_si128(__m128i, __m128i); 
#line 1074 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_testnzc_si128(__m128i, __m128i); 
#line 1075 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_testz_si128(__m128i, __m128i); 
#line 1076 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_ucomieq_sd(__m128d, __m128d); 
#line 1077 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_ucomieq_ss(__m128, __m128); 
#line 1078 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_ucomige_sd(__m128d, __m128d); 
#line 1079 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_ucomige_ss(__m128, __m128); 
#line 1080 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_ucomigt_sd(__m128d, __m128d); 
#line 1081 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_ucomigt_ss(__m128, __m128); 
#line 1082 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_ucomile_sd(__m128d, __m128d); 
#line 1083 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_ucomile_ss(__m128, __m128); 
#line 1084 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_ucomilt_sd(__m128d, __m128d); 
#line 1085 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_ucomilt_ss(__m128, __m128); 
#line 1086 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_ucomineq_sd(__m128d, __m128d); 
#line 1087 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int _mm_ucomineq_ss(__m128, __m128); 
#line 1088 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_unpackhi_epi16(__m128i, __m128i); 
#line 1089 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_unpackhi_epi32(__m128i, __m128i); 
#line 1090 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_unpackhi_epi64(__m128i, __m128i); 
#line 1091 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_unpackhi_epi8(__m128i, __m128i); 
#line 1092 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_unpackhi_pd(__m128d, __m128d); 
#line 1093 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_unpackhi_ps(__m128, __m128); 
#line 1094 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_unpacklo_epi16(__m128i, __m128i); 
#line 1095 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_unpacklo_epi32(__m128i, __m128i); 
#line 1096 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_unpacklo_epi64(__m128i, __m128i); 
#line 1097 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_unpacklo_epi8(__m128i, __m128i); 
#line 1098 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_unpacklo_pd(__m128d, __m128d); 
#line 1099 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_unpacklo_ps(__m128, __m128); 
#line 1100 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128d _mm_xor_pd(__m128d, __m128d); 
#line 1101 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128 _mm_xor_ps(__m128, __m128); 
#line 1102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__m128i _mm_xor_si128(__m128i, __m128i); 
#line 1103 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
__int64 _mul128(__int64 _Multiplier, __int64 _Multiplicand, __int64 * _HighProduct); 
#line 1104 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __cdecl _rotl(unsigned _Value, int _Shift); 
#line 1105 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned short __cdecl _rotl16(unsigned short _Value, unsigned char _Shift); 
#line 1106 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 __cdecl _rotl64(unsigned __int64 _Value, int _Shift); 
#line 1107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char __cdecl _rotl8(unsigned char _Value, unsigned char _Shift); 
#line 1108 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __cdecl _rotr(unsigned _Value, int _Shift); 
#line 1109 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned short __cdecl _rotr16(unsigned short _Value, unsigned char _Shift); 
#line 1110 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 __cdecl _rotr64(unsigned __int64 _Value, int _Shift); 
#line 1111 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char __cdecl _rotr8(unsigned char _Value, unsigned char _Shift); 
#line 1112 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int __cdecl _setjmp(jmp_buf); 
#line 1113 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
int __cdecl _setjmpex(jmp_buf); 
#line 1114 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned __int64 _umul128(unsigned __int64 _Multiplier, unsigned __int64 _Multiplicand, unsigned __int64 * _HighProduct); 
#line 1115 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _rsm(); 
#line 1116 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _lgdt(void *); 
#line 1117 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _sgdt(void *); 
#line 1118 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _clac(); 
#line 1119 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _stac(); 
#line 1120 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char __cdecl _addcarry_u8(unsigned char, unsigned char, unsigned char, unsigned char *); 
#line 1121 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char __cdecl _subborrow_u8(unsigned char, unsigned char, unsigned char, unsigned char *); 
#line 1122 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char __cdecl _addcarry_u16(unsigned char, unsigned short, unsigned short, unsigned short *); 
#line 1123 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char __cdecl _subborrow_u16(unsigned char, unsigned short, unsigned short, unsigned short *); 
#line 1124 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char __cdecl _addcarry_u32(unsigned char, unsigned, unsigned, unsigned *); 
#line 1125 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char __cdecl _subborrow_u32(unsigned char, unsigned, unsigned, unsigned *); 
#line 1126 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char __cdecl _addcarry_u64(unsigned char, unsigned __int64, unsigned __int64, unsigned __int64 *); 
#line 1127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
unsigned char __cdecl _subborrow_u64(unsigned char, unsigned __int64, unsigned __int64, unsigned __int64 *); 
#line 1128 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_monitorx(const void *, unsigned, unsigned); 
#line 1129 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
void _mm_mwaitx(unsigned, unsigned, unsigned); 
#line 1132 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
}
#line 1168 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
#pragma warning(pop)
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
#pragma warning(push,3)
#line 1169 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
#pragma pack ( pop )
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
#pragma pack ( push, 8 )
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
namespace std { 
#pragma warning(disable: 4127)
#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
#pragma warning(disable: 4251)
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits = char_traits < _Elem >,
 class _Ax = allocator < _Elem > >
 class basic_string;
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Mystr >
 class _String_const_iterator
  : public _Iterator012 < random_access_iterator_tag,
   typename _Mystr :: value_type,
   typename _Mystr :: difference_type,
   typename _Mystr :: const_pointer,
   typename _Mystr :: const_reference,
   _Iterator_base >
 {
public :
 typedef _String_const_iterator < _Mystr > _Myiter;
 typedef random_access_iterator_tag iterator_category;

 typedef typename _Mystr :: value_type value_type;
 typedef typename _Mystr :: difference_type difference_type;
 typedef typename _Mystr :: const_pointer pointer;
 typedef typename _Mystr :: const_reference reference;

 _String_const_iterator ( )
  : _Ptr ( )
  {
  }

 _String_const_iterator ( pointer _Parg, const _Container_base * _Pstring )
  : _Ptr ( _Parg )
  {
  this -> _Adopt ( _Pstring );
  }

 typedef pointer _Unchecked_type;

 _Myiter & _Rechecked ( _Unchecked_type _Right )
  {
  _Ptr = _Right;
  return ( * this );
  }

 _Unchecked_type _Unchecked ( ) const
  {
  return ( _Ptr );
  }

 reference operator * ( ) const
  {




















  ;

  return ( * _Ptr );
  }

 pointer operator -> ( ) const
  {
  return ( pointer_traits < pointer > :: pointer_to ( * * this ) );
  }

 _Myiter & operator ++ ( )
  {

















  ++ _Ptr;
  return ( * this );
  }

 _Myiter operator ++ ( int )
  {
  _Myiter _Tmp = * this;
  ++ * this;
  return ( _Tmp );
  }

 _Myiter & operator -- ( )
  {

















  -- _Ptr;
  return ( * this );
  }

 _Myiter operator -- ( int )
  {
  _Myiter _Tmp = * this;
  -- * this;
  return ( _Tmp );
  }

 _Myiter & operator += ( difference_type _Off )
  {



























  _Ptr += _Off;
  return ( * this );
  }

 _Myiter operator + ( difference_type _Off ) const
  {
  _Myiter _Tmp = * this;
  return ( _Tmp += _Off );
  }

 _Myiter & operator -= ( difference_type _Off )
  {
  return ( * this += - _Off );
  }

 _Myiter operator - ( difference_type _Off ) const
  {
  _Myiter _Tmp = * this;
  return ( _Tmp -= _Off );
  }

 difference_type operator - ( const _Myiter & _Right ) const
  {
  _Compat ( _Right );
  return ( _Ptr - _Right . _Ptr );
  }

 reference operator [ ] ( difference_type _Off ) const
  {
  return ( * ( * this + _Off ) );
  }

 bool operator == ( const _Myiter & _Right ) const
  {
  _Compat ( _Right );
  return ( _Ptr == _Right . _Ptr );
  }

 bool operator != ( const _Myiter & _Right ) const
  {
  return ( ! ( * this == _Right ) );
  }

 bool operator < ( const _Myiter & _Right ) const
  {
  _Compat ( _Right );
  return ( _Ptr < _Right . _Ptr );
  }

 bool operator > ( const _Myiter & _Right ) const
  {
  return ( _Right < * this );
  }

 bool operator <= ( const _Myiter & _Right ) const
  {
  return ( ! ( _Right < * this ) );
  }

 bool operator >= ( const _Myiter & _Right ) const
  {
  return ( ! ( * this < _Right ) );
  }


















 void _Compat ( const _Myiter & ) const
  {
  }


 pointer _Ptr;
 };
#line 276 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Mystr > inline
 typename _String_const_iterator < _Mystr > :: _Unchecked_type
  _Unchecked ( _String_const_iterator < _Mystr > _Iter )
 {
 return ( _Iter . _Unchecked ( ) );
 }
#line 283 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Mystr > inline
 _String_const_iterator < _Mystr >
  _Rechecked ( _String_const_iterator < _Mystr > & _Iter,
   typename _String_const_iterator < _Mystr >
    :: _Unchecked_type _Right )
 {
 return ( _Iter . _Rechecked ( _Right ) );
 }
#line 292 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Mystr > inline
 _String_const_iterator < _Mystr > operator + (
  typename _String_const_iterator < _Mystr >
   :: difference_type _Off,
  _String_const_iterator < _Mystr > _Next )
 {
 return ( _Next += _Off );
 }
#line 302 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Mystr >
 class _String_iterator
  : public _String_const_iterator < _Mystr >
 {
public :
 typedef _String_iterator < _Mystr > _Myiter;
 typedef _String_const_iterator < _Mystr > _Mybase;
 typedef random_access_iterator_tag iterator_category;

 typedef typename _Mystr :: value_type value_type;
 typedef typename _Mystr :: difference_type difference_type;
 typedef typename _Mystr :: pointer pointer;
 typedef typename _Mystr :: reference reference;

 _String_iterator ( )
  {
  }

 _String_iterator ( pointer _Parg, const _Container_base * _Pstring )
  : _Mybase ( _Parg, _Pstring )
  {
  }

 typedef pointer _Unchecked_type;

 _Myiter & _Rechecked ( _Unchecked_type _Right )
  {
  this -> _Ptr = _Right;
  return ( * this );
  }

 _Unchecked_type _Unchecked ( ) const
  {
  return ( _Const_cast ( this -> _Ptr ) );
  }

 reference operator * ( ) const
  {
  return ( ( reference ) * * ( _Mybase * ) this );
  }

 pointer operator -> ( ) const
  {
  return ( pointer_traits < pointer > :: pointer_to ( * * this ) );
  }

 _Myiter & operator ++ ( )
  {
  ++ * ( _Mybase * ) this;
  return ( * this );
  }

 _Myiter operator ++ ( int )
  {
  _Myiter _Tmp = * this;
  ++ * this;
  return ( _Tmp );
  }

 _Myiter & operator -- ( )
  {
  -- * ( _Mybase * ) this;
  return ( * this );
  }

 _Myiter operator -- ( int )
  {
  _Myiter _Tmp = * this;
  -- * this;
  return ( _Tmp );
  }

 _Myiter & operator += ( difference_type _Off )
  {
  * ( _Mybase * ) this += _Off;
  return ( * this );
  }

 _Myiter operator + ( difference_type _Off ) const
  {
  _Myiter _Tmp = * this;
  return ( _Tmp += _Off );
  }

 _Myiter & operator -= ( difference_type _Off )
  {
  return ( * this += - _Off );
  }

 _Myiter operator - ( difference_type _Off ) const
  {
  _Myiter _Tmp = * this;
  return ( _Tmp -= _Off );
  }

 difference_type operator - ( const _Mybase & _Right ) const
  {
  return ( * ( _Mybase * ) this - _Right );
  }

 reference operator [ ] ( difference_type _Off ) const
  {
  return ( * ( * this + _Off ) );
  }
 };
#line 408 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Mystr > inline
 typename _String_iterator < _Mystr > :: _Unchecked_type
  _Unchecked ( _String_iterator < _Mystr > _Iter )
 {
 return ( _Iter . _Unchecked ( ) );
 }
#line 415 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Mystr > inline
 _String_iterator < _Mystr >
  _Rechecked ( _String_iterator < _Mystr > & _Iter,
   typename _String_iterator < _Mystr >
    :: _Unchecked_type _Right )
 {
 return ( _Iter . _Rechecked ( _Right ) );
 }
#line 424 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Mystr > inline
 _String_iterator < _Mystr > operator + (
  typename _String_iterator < _Mystr >
   :: difference_type _Off,
  _String_iterator < _Mystr > _Next )
 {
 return ( _Next += _Off );
 }
#line 434 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template< class _Value_type, class 
#line 435 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
_Size_type, class 
#line 436 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
_Difference_type, class 
#line 437 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
_Pointer, class 
#line 438 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
_Const_pointer, class 
#line 439 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
_Reference, class 
#line 440 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
_Const_reference> 
#line 441 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
struct _String_iter_types { 
#line 443 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
typedef _Value_type value_type; 
#line 444 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
typedef _Size_type size_type; 
#line 445 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
typedef _Difference_type difference_type; 
#line 446 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
typedef _Pointer pointer; 
#line 447 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
typedef _Const_pointer const_pointer; 
#line 448 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
typedef _Reference reference; 
#line 449 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
typedef _Const_reference const_reference; 
#line 450 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
}; 
#line 452 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template< class _Ty, class 
#line 453 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
_Alloc0> 
#line 454 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
struct _String_base_types { 
#line 456 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
typedef _Alloc0 _Alloc; 
#line 457 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
typedef _String_base_types _Myt; 
#line 459 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
typedef _Wrap_alloc< _Alloc0>  _Alty0; 
#line 460 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
typedef typename _Wrap_alloc< _Alloc0> ::template rebind< _Ty> ::other _Alty; 
#line 472 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
typedef typename _If< _Is_simple_alloc< typename _Wrap_alloc< _Alloc0> ::template rebind< _Ty> ::other> ::value, _Simple_types< typename _Alty::value_type> , _String_iter_types< typename _Alty::value_type, typename _Alty::size_type, typename _Alty::difference_type, typename _Alty::pointer, typename _Alty::const_pointer, typename _Alty::reference, typename _Alty::const_reference> > ::type _Val_types; 
#line 473 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
}; 
#line 476 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Val_types >
 class _String_val
  : public _Container_base
 {
public :
 typedef _String_val < _Val_types > _Myt;

 typedef typename _Val_types :: value_type value_type;
 typedef typename _Val_types :: size_type size_type;
 typedef typename _Val_types :: difference_type difference_type;
 typedef typename _Val_types :: pointer pointer;
 typedef typename _Val_types :: const_pointer const_pointer;
 typedef typename _Val_types :: reference reference;
 typedef typename _Val_types :: const_reference const_reference;

 typedef _String_iterator < _Myt > iterator;
 typedef _String_const_iterator < _Myt > const_iterator;

 _String_val ( )
  : _Bx ( ),
  _Mysize ( 0 ),
  _Myres ( 0 )
  {
  }

 enum
  {
  _BUF_SIZE = 16 / sizeof ( value_type ) < 1 ? 1
   : 16 / sizeof ( value_type ) };
 enum
  {
  _ALLOC_MASK = sizeof ( value_type ) <= 1 ? 15
   : sizeof ( value_type ) <= 2 ? 7
   : sizeof ( value_type ) <= 4 ? 3
   : sizeof ( value_type ) <= 8 ? 1 : 0 };

 value_type * _Myptr ( )
  {
  return ( this -> _BUF_SIZE <= _Myres
   ? _Unfancy ( _Bx . _Ptr )
   : _Bx . _Buf );
  }

 const value_type * _Myptr ( ) const
  {
  return ( this -> _BUF_SIZE <= _Myres
   ? _Unfancy ( _Bx . _Ptr )
   : _Bx . _Buf );
  }

 union _Bxty
  {
  _Bxty ( )
   {
   }

  ~ _Bxty ( ) noexcept
   {
   }

  value_type _Buf [ _BUF_SIZE ];
  pointer _Ptr;
  char _Alias [ _BUF_SIZE ];
  } _Bx;

 size_type _Mysize;
 size_type _Myres;
 };
#line 546 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Alloc_types >
 class _String_alloc
 {
public :
 typedef _String_alloc < _Alloc_types > _Myt;
 typedef typename _Alloc_types :: _Alloc _Alloc;
 typedef typename _Alloc_types :: _Alty _Alty;
 typedef typename _Alloc_types :: _Val_types _Val_types;

 typedef typename _Val_types :: value_type value_type;
 typedef typename _Val_types :: size_type size_type;
 typedef typename _Val_types :: difference_type difference_type;
 typedef typename _Val_types :: pointer pointer;
 typedef typename _Val_types :: const_pointer const_pointer;
 typedef typename _Val_types :: reference reference;
 typedef typename _Val_types :: const_reference const_reference;

 typedef _String_iterator < _String_val < _Val_types > > iterator;
 typedef _String_const_iterator < _String_val < _Val_types > > const_iterator;

 enum
  {
  _BUF_SIZE = _String_val < _Val_types > :: _BUF_SIZE
  };

 enum
  {
  _ALLOC_MASK = _String_val < _Val_types > :: _ALLOC_MASK
  };

 value_type * _Myptr ( )
  {
  return ( _Get_data ( ) . _Myptr ( ) );
  }

 const value_type * _Myptr ( ) const
  {
  return ( _Get_data ( ) . _Myptr ( ) );
  }


 _String_alloc ( )
  : _Mypair ( _Zero_then_variadic_args_t ( ) )
  {
  }

 template < class _Any_alloc,
  class = enable_if_t < ! is_same < decay_t < _Any_alloc >, _Myt > :: value > >
  _String_alloc ( _Any_alloc && _Al )
  : _Mypair ( _One_then_variadic_args_t ( ),
   :: std :: forward < _Any_alloc > ( _Al ) )
  {
  }

 void _Copy_alloc ( const _Alty & _Al )
  {
  _Pocca ( _Getal ( ), _Al );
  }

 void _Move_alloc ( _Alty & _Al )
  {
  _Pocma ( _Getal ( ), _Al );
  }







































































 void _Orphan_all ( )
  {
  _Get_data ( ) . _Orphan_all ( );
  }

 void _Swap_all ( _Myt & _Right )
  {
  _Get_data ( ) . _Swap_all ( _Right . _Get_data ( ) );
  }

 _Alty & _Getal ( ) noexcept
  {
  return ( _Mypair . _Get_first ( ) );
  }

 const _Alty & _Getal ( ) const noexcept
  {
  return ( _Mypair . _Get_first ( ) );
  }

 _String_val < _Val_types > & _Get_data ( ) noexcept
  {
  return ( _Mypair . _Get_second ( ) );
  }

 const _String_val < _Val_types > & _Get_data ( ) const noexcept
  {
  return ( _Mypair . _Get_second ( ) );
  }

 typedef typename _String_val < _Val_types > :: _Bxty _Bxty;

 _Bxty & _Bx ( ) noexcept
  {
  return ( _Get_data ( ) . _Bx );
  }

 const _Bxty & _Bx ( ) const noexcept
  {
  return ( _Get_data ( ) . _Bx );
  }

 size_type & _Mysize ( ) noexcept
  {
  return ( _Get_data ( ) . _Mysize );
  }

 const size_type & _Mysize ( ) const noexcept
  {
  return ( _Get_data ( ) . _Mysize );
  }

 size_type & _Myres ( ) noexcept
  {
  return ( _Get_data ( ) . _Myres );
  }

 const size_type & _Myres ( ) const noexcept
  {
  return ( _Get_data ( ) . _Myres );
  }

private :
 _Compressed_pair < _Alty, _String_val < _Val_types > > _Mypair;
 };
#line 747 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc >
 class basic_string
  : public _String_alloc < _String_base_types < _Elem, _Alloc > >
 {
public :
 typedef basic_string < _Elem, _Traits, _Alloc > _Myt;
 typedef _String_alloc < _String_base_types < _Elem, _Alloc > > _Mybase;
 typedef _Traits traits_type;
 typedef _Alloc allocator_type;

 typedef typename _Mybase :: _Alty _Alty;

 typedef typename _Mybase :: value_type value_type;
 typedef typename _Mybase :: size_type size_type;
 typedef typename _Mybase :: difference_type difference_type;
 typedef typename _Mybase :: pointer pointer;
 typedef typename _Mybase :: const_pointer const_pointer;
 typedef typename _Mybase :: reference reference;
 typedef typename _Mybase :: const_reference const_reference;

 typedef typename _Mybase :: iterator iterator;
 typedef typename _Mybase :: const_iterator const_iterator;

 typedef :: std :: reverse_iterator < iterator > reverse_iterator;
 typedef :: std :: reverse_iterator < const_iterator > const_reverse_iterator;

 basic_string ( const _Myt & _Right )

  : _Mybase ( _Right . _Getal ( ) . select_on_container_copy_construction ( ) )


  {
  _Tidy ( );
  assign ( _Right, 0, npos );
  }

 basic_string ( const _Myt & _Right, const _Alloc & _Al )
  : _Mybase ( _Al )
  {
  _Tidy ( );
  assign ( _Right, 0, npos );
  }

 basic_string ( ) noexcept ( is_nothrow_default_constructible < _Alloc > :: value )
  : _Mybase ( )
  {
  _Tidy ( );
  }

 explicit basic_string ( const _Alloc & _Al ) noexcept
  : _Mybase ( _Al )
  {
  _Tidy ( );
  }

 basic_string ( const _Myt & _Right, size_type _Roff,
  size_type _Count = npos )
  : _Mybase ( _Right . _Getal ( ) )
  {
  _Tidy ( );
  assign ( _Right, _Roff, _Count );
  }

 basic_string ( const _Myt & _Right, size_type _Roff, size_type _Count,
  const _Alloc & _Al )
  : _Mybase ( _Al )
  {
  _Tidy ( );
  assign ( _Right, _Roff, _Count );
  }

 basic_string ( const _Elem * _Ptr, size_type _Count )
  : _Mybase ( )
  {
  _Tidy ( );
  assign ( _Ptr, _Count );
  }

 basic_string ( const _Elem * _Ptr, size_type _Count, const _Alloc & _Al )
  : _Mybase ( _Al )
  {
  _Tidy ( );
  assign ( _Ptr, _Count );
  }

 basic_string ( const _Elem * _Ptr )
  : _Mybase ( )
  {
  _Tidy ( );
  assign ( _Ptr );
  }

 basic_string ( const _Elem * _Ptr, const _Alloc & _Al )
  : _Mybase ( _Al )
  {
  _Tidy ( );
  assign ( _Ptr );
  }

 basic_string ( size_type _Count, _Elem _Ch )
  : _Mybase ( )
  {
  _Tidy ( );
  assign ( _Count, _Ch );
  }

 basic_string ( size_type _Count, _Elem _Ch, const _Alloc & _Al )
  : _Mybase ( _Al )
  {
  _Tidy ( );
  assign ( _Count, _Ch );
  }

 template < class _Iter,
  class = typename enable_if < _Is_iterator < _Iter > :: value,
   void > :: type >
  basic_string ( _Iter _First, _Iter _Last, const _Alloc & _Al = _Alloc ( ) )
  : _Mybase ( _Al )
  {
  ;
  _Tidy ( );
  _Construct ( _Unchecked ( _First ), _Unchecked ( _Last ), _Iter_cat_t < _Iter > ( ) );
  }

 template < class _Iter >
  void _Construct ( _Iter _First,
   _Iter _Last, input_iterator_tag )
  {
  try {
  for (; _First != _Last; ++ _First )
   append ( ( size_type ) 1, ( _Elem ) * _First );
  } catch ( ... ) {
  _Tidy ( true );
  throw;
  }
  }

 template < class _Iter >
  void _Construct ( _Iter _First,
   _Iter _Last, forward_iterator_tag )
  {
  size_type _Count = :: std :: distance ( _First, _Last );
  reserve ( _Count );
  _Construct ( _First, _Last, input_iterator_tag ( ) );
  }

 void _Construct ( _Elem * _First,
  _Elem * _Last, random_access_iterator_tag )
  {
  if ( _First != _Last )
   assign ( _First, _Last - _First );
  }

 void _Construct ( const _Elem * _First,
  const _Elem * _Last, random_access_iterator_tag )
  {
  if ( _First != _Last )
   assign ( _First, _Last - _First );
  }

 basic_string ( _Myt && _Right ) noexcept
  : _Mybase ( :: std :: move ( _Right . _Getal ( ) ) )
  {
  _Tidy ( );
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  }

 basic_string ( _Myt && _Right, const _Alloc & _Al )
  : _Mybase ( _Al )
  {
  if ( this -> _Getal ( ) != _Right . _Getal ( ) )
   assign ( _Right . begin ( ), _Right . end ( ) );
  else
   _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  }

 _Myt & operator = ( _Myt && _Right )
  noexcept ( _Alty :: propagate_on_container_move_assignment :: value || _Alty :: is_always_equal :: value )

  {
  if ( this != & _Right )
   {
   _Tidy ( true );

   if ( _Alty :: propagate_on_container_move_assignment :: value
    && this -> _Getal ( ) != _Right . _Getal ( ) )
    this -> _Move_alloc ( _Right . _Getal ( ) );

   if ( this -> _Getal ( ) != _Right . _Getal ( ) )
    assign ( _Right . begin ( ), _Right . end ( ) );
   else
    _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
   }
  return ( * this );
  }

 _Myt & assign ( _Myt && _Right ) noexcept
  {
  if ( this == & _Right )
   ;
  else if ( get_allocator ( ) != _Right . get_allocator ( )
   && this -> _BUF_SIZE <= _Right . _Myres ( ) )
   * this = _Right;
  else
   {
   _Tidy ( true );
   _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
   }
  return ( * this );
  }

 void _Assign_rv ( _Myt && _Right )
  {
  if ( _Right . _Myres ( ) < this -> _BUF_SIZE )
   _Traits :: move ( this -> _Bx ( ) . _Buf, _Right . _Bx ( ) . _Buf,
    _Right . _Mysize ( ) + 1 );
  else
   {
   this -> _Getal ( ) . construct ( :: std :: addressof ( this -> _Bx ( ) . _Ptr ), _Right . _Bx ( ) . _Ptr );
   _Right . _Bx ( ) . _Ptr = pointer ( );
   }
  this -> _Mysize ( ) = _Right . _Mysize ( );
  this -> _Myres ( ) = _Right . _Myres ( );
  _Right . _Tidy ( );
  }

 basic_string ( :: std :: initializer_list < _Elem > _Ilist,
  const _Alloc & _Al = allocator_type ( ) )
  : _Mybase ( _Al )
  {
  _Tidy ( );
  assign ( _Ilist . begin ( ), _Ilist . end ( ) );
  }

 _Myt & operator = ( :: std :: initializer_list < _Elem > _Ilist )
  {
  return ( assign ( _Ilist . begin ( ), _Ilist . end ( ) ) );
  }

 _Myt & operator += ( :: std :: initializer_list < _Elem > _Ilist )
  {
  return ( append ( _Ilist . begin ( ), _Ilist . end ( ) ) );
  }

 _Myt & assign ( :: std :: initializer_list < _Elem > _Ilist )
  {
  return ( assign ( _Ilist . begin ( ), _Ilist . end ( ) ) );
  }

 _Myt & append ( :: std :: initializer_list < _Elem > _Ilist )
  {
  return ( append ( _Ilist . begin ( ), _Ilist . end ( ) ) );
  }

 iterator insert ( const_iterator _Where,
  :: std :: initializer_list < _Elem > _Ilist )
  {
  return ( insert ( _Where, _Ilist . begin ( ), _Ilist . end ( ) ) );
  }

 _Myt & replace ( const_iterator _First, const_iterator _Last,
  :: std :: initializer_list < _Elem > _Ilist )
  {
  return ( replace ( _First, _Last, _Ilist . begin ( ), _Ilist . end ( ) ) );
  }

 ~ basic_string ( ) noexcept
  {
  _Tidy ( true );
  }

  static const size_type npos;

 _Myt & operator = ( const _Myt & _Right )
  {
  if ( this != & _Right )
   {
   if ( this -> _Getal ( ) != _Right . _Getal ( )
    && _Alty :: propagate_on_container_copy_assignment :: value )
    {
    _Tidy ( true );
    this -> _Copy_alloc ( _Right . _Getal ( ) );
    }

   assign ( _Right );
   }
  return ( * this );
  }

 _Myt & operator = ( const _Elem * _Ptr )
  {
  return ( assign ( _Ptr ) );
  }

 _Myt & operator = ( _Elem _Ch )
  {
  return ( assign ( 1, _Ch ) );
  }

 _Myt & operator += ( const _Myt & _Right )
  {
  return ( append ( _Right ) );
  }

 _Myt & operator += ( const _Elem * _Ptr )
  {
  return ( append ( _Ptr ) );
  }

 _Myt & operator += ( _Elem _Ch )
  {
  return ( append ( ( size_type ) 1, _Ch ) );
  }

 _Myt & append ( const _Myt & _Right )
  {
  return ( append ( _Right, 0, npos ) );
  }

 _Myt & append ( const _Myt & _Right,
  size_type _Roff, size_type _Count = npos )
  {
  _Right . _Check_offset ( _Roff );
  _Count = _Right . _Clamp_suffix_size ( _Roff, _Count );
  if ( npos - this -> _Mysize ( ) <= _Count )
   _Xlen ( );

  const size_type _Num = this -> _Mysize ( ) + _Count;
  if ( 0 < _Count && _Grow ( _Num ) )
   {
   _Traits :: copy ( this -> _Myptr ( ) + this -> _Mysize ( ),
    _Right . _Myptr ( ) + _Roff, _Count );
   _Eos ( _Num );
   }
  return ( * this );
  }

 _Myt & append ( const _Elem * _Ptr, size_type _Count )
  {
  ;
  if ( _Inside ( _Ptr ) )
   return ( append ( * this,
    _Ptr - this -> _Myptr ( ), _Count ) );
  if ( npos - this -> _Mysize ( ) <= _Count )
   _Xlen ( );

  const size_type _Num = this -> _Mysize ( ) + _Count;
  if ( 0 < _Count && _Grow ( _Num ) )
   {
   _Traits :: copy ( this -> _Myptr ( ) + this -> _Mysize ( ), _Ptr, _Count );
   _Eos ( _Num );
   }
  return ( * this );
  }

 _Myt & append ( const _Elem * _Ptr )
  {
  ;
  return ( append ( _Ptr, _Traits :: length ( _Ptr ) ) );
  }

 _Myt & append ( size_type _Count, _Elem _Ch )
  {
  if ( npos - this -> _Mysize ( ) <= _Count )
   _Xlen ( );

  const size_type _Num = this -> _Mysize ( ) + _Count;
  if ( 0 < _Count && _Grow ( _Num ) )
   {
   _Chassign ( this -> _Mysize ( ), _Count, _Ch );
   _Eos ( _Num );
   }
  return ( * this );
  }

 template < class _Iter >
  typename enable_if < _Is_iterator < _Iter > :: value,
   _Myt & > :: type
  append ( _Iter _First, _Iter _Last )
  {
  return ( replace ( end ( ), end ( ), _First, _Last ) );
  }

 _Myt & append ( const_pointer _First, const_pointer _Last )
  {
  return ( replace ( end ( ), end ( ), _First, _Last ) );
  }

 _Myt & append ( const_iterator _First, const_iterator _Last )
  {
  return ( replace ( end ( ), end ( ), _First, _Last ) );
  }

 _Myt & assign ( const _Myt & _Right )
  {
  return ( assign ( _Right, 0, npos ) );
  }

 _Myt & assign ( const _Myt & _Right,
  size_type _Roff, size_type _Count = npos )
  {
  _Right . _Check_offset ( _Roff );
  _Count = _Right . _Clamp_suffix_size ( _Roff, _Count );

  if ( this == & _Right )
   erase ( ( size_type ) ( _Roff + _Count ) ), erase ( 0, _Roff );
  else if ( _Grow ( _Count ) )
   {
   _Traits :: copy ( this -> _Myptr ( ),
    _Right . _Myptr ( ) + _Roff, _Count );
   _Eos ( _Count );
   }
  return ( * this );
  }

 _Myt & assign ( const _Elem * _Ptr, size_type _Count )
  {
  ;
  if ( _Inside ( _Ptr ) )
   return ( assign ( * this,
    _Ptr - this -> _Myptr ( ), _Count ) );

  if ( _Grow ( _Count ) )
   {
   _Traits :: copy ( this -> _Myptr ( ), _Ptr, _Count );
   _Eos ( _Count );
   }
  return ( * this );
  }

 _Myt & assign ( const _Elem * _Ptr )
  {
  ;
  return ( assign ( _Ptr, _Traits :: length ( _Ptr ) ) );
  }

 _Myt & assign ( size_type _Count, _Elem _Ch )
  {
  if ( _Count == npos )
   _Xlen ( );

  if ( _Grow ( _Count ) )
   {
   _Chassign ( 0, _Count, _Ch );
   _Eos ( _Count );
   }
  return ( * this );
  }

 template < class _Iter >
  typename enable_if < _Is_iterator < _Iter > :: value,
   _Myt & > :: type
  assign ( _Iter _First, _Iter _Last )
  {
  return ( replace ( begin ( ), end ( ), _First, _Last ) );
  }

 _Myt & assign ( const_pointer _First, const_pointer _Last )
  {
  return ( replace ( begin ( ), end ( ), _First, _Last ) );
  }

 _Myt & assign ( const_iterator _First, const_iterator _Last )
  {
  return ( replace ( begin ( ), end ( ), _First, _Last ) );
  }

 _Myt & insert ( size_type _Off, const _Myt & _Right )
  {
  return ( insert ( _Off, _Right, 0, npos ) );
  }

 _Myt & insert ( size_type _Off,
  const _Myt & _Right, size_type _Roff, size_type _Count = npos )
  {
  _Check_offset ( _Off );
  _Right . _Check_offset ( _Roff );
  _Count = _Right . _Clamp_suffix_size ( _Roff, _Count );
  if ( npos - this -> _Mysize ( ) <= _Count )
   _Xlen ( );

  const size_type _Num = this -> _Mysize ( ) + _Count;
  if ( 0 < _Count && _Grow ( _Num ) )
   {
   _Traits :: move ( this -> _Myptr ( ) + _Off + _Count,
    this -> _Myptr ( ) + _Off,
    this -> _Mysize ( ) - _Off );
   if ( this == & _Right )
    _Traits :: move ( this -> _Myptr ( ) + _Off,
     this -> _Myptr ( ) + ( _Off < _Roff ? _Roff + _Count : _Roff ),
      _Count );
   else
    _Traits :: copy ( this -> _Myptr ( ) + _Off,
     _Right . _Myptr ( ) + _Roff, _Count );
   _Eos ( _Num );
   }
  return ( * this );
  }

 _Myt & insert ( size_type _Off,
  const _Elem * _Ptr, size_type _Count )
  {
  ;
  if ( _Inside ( _Ptr ) )
   return ( insert ( _Off, * this,
    _Ptr - this -> _Myptr ( ), _Count ) );
  _Check_offset ( _Off );
  if ( npos - this -> _Mysize ( ) <= _Count )
   _Xlen ( );
  const size_type _Num = this -> _Mysize ( ) + _Count;
  if ( 0 < _Count && _Grow ( _Num ) )
   {
   _Traits :: move ( this -> _Myptr ( ) + _Off + _Count,
    this -> _Myptr ( ) + _Off,
    this -> _Mysize ( ) - _Off );
   _Traits :: copy ( this -> _Myptr ( ) + _Off, _Ptr, _Count );
   _Eos ( _Num );
   }
  return ( * this );
  }

 _Myt & insert ( size_type _Off, const _Elem * _Ptr )
  {
  ;
  return ( insert ( _Off, _Ptr, _Traits :: length ( _Ptr ) ) );
  }

 _Myt & insert ( size_type _Off,
  size_type _Count, _Elem _Ch )
  {
  _Check_offset ( _Off );
  if ( npos - this -> _Mysize ( ) <= _Count )
   _Xlen ( );
  const size_type _Num = this -> _Mysize ( ) + _Count;
  if ( 0 < _Count && _Grow ( _Num ) )
   {
   _Traits :: move ( this -> _Myptr ( ) + _Off + _Count,
    this -> _Myptr ( ) + _Off,
    this -> _Mysize ( ) - _Off );
   _Chassign ( _Off, _Count, _Ch );
   _Eos ( _Num );
   }
  return ( * this );
  }

 iterator insert ( const_iterator _Where )
  {
  return ( insert ( _Where, _Elem ( ) ) );
  }

 iterator insert ( const_iterator _Where, _Elem _Ch )
  {
  size_type _Off = _Where - begin ( );
  insert ( _Off, 1, _Ch );
  return ( begin ( ) + _Off );
  }

 iterator insert ( const_iterator _Where, size_type _Count, _Elem _Ch )
  {
  size_type _Off = _Where - begin ( );
  insert ( _Off, _Count, _Ch );
  return ( begin ( ) + _Off );
  }

 template < class _Iter >
  typename enable_if < _Is_iterator < _Iter > :: value,
   iterator > :: type
  insert ( const_iterator _Where, _Iter _First, _Iter _Last )
  {
  size_type _Off = _Where - begin ( );
  replace ( _Where, _Where, _First, _Last );
  return ( begin ( ) + _Off );
  }

 iterator insert ( const_iterator _Where,
  const_pointer _First, const_pointer _Last )
  {
  size_type _Off = _Where - begin ( );
  replace ( _Where, _Where, _First, _Last );
  return ( begin ( ) + _Off );
  }

 iterator insert ( const_iterator _Where,
  const_iterator _First, const_iterator _Last )
  {
  size_type _Off = _Where - begin ( );
  replace ( _Where, _Where, _First, _Last );
  return ( begin ( ) + _Off );
  }

 _Myt & erase ( size_type _Off = 0 )
  {
  _Check_offset ( _Off );
  _Eos ( _Off );
  return ( * this );
  }

 _Myt & erase ( size_type _Off, size_type _Count )
  {
  _Check_offset ( _Off );
  if ( this -> _Mysize ( ) - _Off <= _Count )
   _Eos ( _Off );
  else if ( 0 < _Count )
   {
   value_type * _Ptr = this -> _Myptr ( ) + _Off;
   size_type _Newsize = this -> _Mysize ( ) - _Count;
   _Traits :: move ( _Ptr, _Ptr + _Count, _Newsize - _Off );
   _Eos ( _Newsize );
   }
  return ( * this );
  }

 iterator erase ( const_iterator _Where )
  {
  size_type _Count = _Where - begin ( );
  erase ( _Count, 1 );
  return ( begin ( ) + _Count );
  }

 iterator erase ( const_iterator _First, const_iterator _Last )
  {
  ;
  size_type _Count = _First - begin ( );
  erase ( _Count, _Last - _First );
  return ( begin ( ) + _Count );
  }

 void clear ( ) noexcept
  {
  _Eos ( 0 );
  }

 _Myt & replace ( size_type _Off, size_type _N0, const _Myt & _Right )
  {
  return ( replace ( _Off, _N0, _Right, 0, npos ) );
  }

 _Myt & replace ( size_type _Off,
  size_type _N0, const _Myt & _Right, size_type _Roff,
   size_type _Count = npos )
  {
  _Check_offset ( _Off );
  _Right . _Check_offset ( _Roff );
  _N0 = _Clamp_suffix_size ( _Off, _N0 );
  _Count = _Right . _Clamp_suffix_size ( _Roff, _Count );
  if ( npos - _Count <= this -> _Mysize ( ) - _N0 )
   _Xlen ( );

  const size_type _Nm = this -> _Mysize ( ) - _N0 - _Off;
  const size_type _Newsize = this -> _Mysize ( ) + _Count - _N0;
  if ( this -> _Mysize ( ) < _Newsize )
   _Grow ( _Newsize );

  if ( _Count == _N0 )
   {
   _Traits :: move ( this -> _Myptr ( ) + _Off,
    _Right . _Myptr ( ) + _Roff, _Count );
   }
  else if ( this != & _Right )
   {
   _Traits :: move ( this -> _Myptr ( ) + _Off + _Count,
    this -> _Myptr ( ) + _Off + _N0, _Nm );
   _Traits :: copy ( this -> _Myptr ( ) + _Off,
    _Right . _Myptr ( ) + _Roff, _Count );
   }
  else if ( _Count < _N0 )
   {
   _Traits :: move ( this -> _Myptr ( ) + _Off,
    this -> _Myptr ( ) + _Roff, _Count );
   _Traits :: move ( this -> _Myptr ( ) + _Off + _Count,
    this -> _Myptr ( ) + _Off + _N0, _Nm );
   }
  else if ( _Roff <= _Off )
   {
   _Traits :: move ( this -> _Myptr ( ) + _Off + _Count,
    this -> _Myptr ( ) + _Off + _N0, _Nm );
   _Traits :: move ( this -> _Myptr ( ) + _Off,
    this -> _Myptr ( ) + _Roff, _Count );
   }
  else if ( _Off + _N0 <= _Roff )
   {
   _Traits :: move ( this -> _Myptr ( ) + _Off + _Count,
    this -> _Myptr ( ) + _Off + _N0, _Nm );
   _Traits :: move ( this -> _Myptr ( ) + _Off,
    this -> _Myptr ( ) + ( _Roff + _Count - _N0 ),
    _Count );
   }
  else
   {
   _Traits :: move ( this -> _Myptr ( ) + _Off,
    this -> _Myptr ( ) + _Roff, _N0 );
   _Traits :: move ( this -> _Myptr ( ) + _Off + _Count,
    this -> _Myptr ( ) + _Off + _N0, _Nm );
   _Traits :: move ( this -> _Myptr ( ) + _Off + _N0,
    this -> _Myptr ( ) + _Roff + _Count,
    _Count - _N0 );
   }

  _Eos ( _Newsize );
  return ( * this );
  }

 _Myt & replace ( size_type _Off,
  size_type _N0, const _Elem * _Ptr, size_type _Count )
  {
  ;
  if ( _Inside ( _Ptr ) )
   return ( replace ( _Off, _N0, * this,
    _Ptr - this -> _Myptr ( ),
    _Count ) );
  _Check_offset ( _Off );
  _N0 = _Clamp_suffix_size ( _Off, _N0 );
  if ( npos - _Count <= this -> _Mysize ( ) - _N0 )
   _Xlen ( );
  size_type _Nm = this -> _Mysize ( ) - _N0 - _Off;

  if ( _Count < _N0 )
   _Traits :: move ( this -> _Myptr ( ) + _Off + _Count,
    this -> _Myptr ( ) + _Off + _N0,
    _Nm );
  const size_type _Num = this -> _Mysize ( ) + _Count - _N0;
  if ( ( 0 < _Count || 0 < _N0 )
   && _Grow ( _Num ) )
   {
   if ( _N0 < _Count )
    _Traits :: move ( this -> _Myptr ( ) + _Off + _Count,
     this -> _Myptr ( ) + _Off + _N0, _Nm );
   _Traits :: copy ( this -> _Myptr ( ) + _Off, _Ptr, _Count );
   _Eos ( _Num );
   }
  return ( * this );
  }

 _Myt & replace ( size_type _Off, size_type _N0, const _Elem * _Ptr )
  {
  ;
  return ( replace ( _Off, _N0, _Ptr, _Traits :: length ( _Ptr ) ) );
  }

 _Myt & replace ( size_type _Off,
  size_type _N0, size_type _Count, _Elem _Ch )
  {
  _Check_offset ( _Off );
  _N0 = _Clamp_suffix_size ( _Off, _N0 );
  if ( npos - _Count <= this -> _Mysize ( ) - _N0 )
   _Xlen ( );
  size_type _Nm = this -> _Mysize ( ) - _N0 - _Off;

  if ( _Count < _N0 )
   _Traits :: move ( this -> _Myptr ( ) + _Off + _Count,
    this -> _Myptr ( ) + _Off + _N0,
    _Nm );
  const size_type _Num = this -> _Mysize ( ) + _Count - _N0;
  if ( ( 0 < _Count || 0 < _N0 )
   && _Grow ( _Num ) )
   {
   if ( _N0 < _Count )
    _Traits :: move ( this -> _Myptr ( ) + _Off + _Count,
     this -> _Myptr ( ) + _Off + _N0, _Nm );
   _Chassign ( _Off, _Count, _Ch );
   _Eos ( _Num );
   }
  return ( * this );
  }

 _Myt & replace ( const_iterator _First, const_iterator _Last,
  const _Myt & _Right )
  {
  return ( replace ( _First - begin ( ), _Last - _First, _Right ) );
  }

 _Myt & replace ( const_iterator _First, const_iterator _Last,
  const _Elem * _Ptr, size_type _Count )
  {
  return ( replace ( _First - begin ( ), _Last - _First, _Ptr, _Count ) );
  }

 _Myt & replace ( const_iterator _First, const_iterator _Last,
  const _Elem * _Ptr )
  {
  return ( replace ( _First - begin ( ), _Last - _First, _Ptr ) );
  }

 _Myt & replace ( const_iterator _First, const_iterator _Last,
  size_type _Count, _Elem _Ch )
  {
  return ( replace ( _First - begin ( ), _Last - _First, _Count, _Ch ) );
  }

 template < class _Iter >
  typename enable_if < _Is_iterator < _Iter > :: value,
   _Myt & > :: type
  replace ( const_iterator _First, const_iterator _Last,
   _Iter _First2, _Iter _Last2 )
  {
  _Myt _Right ( _First2, _Last2 );
  replace ( _First, _Last, _Right );
  return ( * this );
  }

 _Myt & replace ( const_iterator _First, const_iterator _Last,
  const_pointer _First2, const_pointer _Last2 )
  {
  if ( _First2 == _Last2 )
   erase ( _First - begin ( ), _Last - _First );
  else
   replace ( _First - begin ( ), _Last - _First,
    & * _First2, _Last2 - _First2 );
  return ( * this );
  }

 _Myt & replace ( const_iterator _First, const_iterator _Last,
  pointer _First2, pointer _Last2 )
  {
  if ( _First2 == _Last2 )
   erase ( _First - begin ( ), _Last - _First );
  else
   replace ( _First - begin ( ), _Last - _First,
    & * _First2, _Last2 - _First2 );
  return ( * this );
  }

 _Myt & replace ( const_iterator _First, const_iterator _Last,
  const_iterator _First2, const_iterator _Last2 )
  {
  if ( _First2 == _Last2 )
   erase ( _First - begin ( ), _Last - _First );
  else
   replace ( _First - begin ( ), _Last - _First,
    & * _First2, _Last2 - _First2 );
  return ( * this );
  }

 _Myt & replace ( const_iterator _First, const_iterator _Last,
  iterator _First2, iterator _Last2 )
  {
  if ( _First2 == _Last2 )
   erase ( _First - begin ( ), _Last - _First );
  else
   replace ( _First - begin ( ), _Last - _First,
    & * _First2, _Last2 - _First2 );
  return ( * this );
  }

 iterator begin ( ) noexcept
  {
  auto _Mydata = & this -> _Get_data ( );
  return ( iterator ( this -> _Getal ( ) . address ( * _Mydata -> _Myptr ( ) ), _Mydata ) );
  }

 const_iterator begin ( ) const noexcept
  {
  auto _Mydata = & this -> _Get_data ( );
  return ( const_iterator ( this -> _Getal ( ) . address ( * _Mydata -> _Myptr ( ) ), _Mydata ) );
  }

 iterator end ( ) noexcept
  {
  auto _Mydata = & this -> _Get_data ( );
  return ( iterator ( this -> _Getal ( ) . address ( * _Mydata -> _Myptr ( ) ) + _Mydata -> _Mysize, _Mydata ) );
  }

 const_iterator end ( ) const noexcept
  {
  auto _Mydata = & this -> _Get_data ( );
  return ( const_iterator ( this -> _Getal ( ) . address ( * _Mydata -> _Myptr ( ) ) + _Mydata -> _Mysize, _Mydata ) );
  }

 reverse_iterator rbegin ( ) noexcept
  {
  return ( reverse_iterator ( end ( ) ) );
  }

 const_reverse_iterator rbegin ( ) const noexcept
  {
  return ( const_reverse_iterator ( end ( ) ) );
  }

 reverse_iterator rend ( ) noexcept
  {
  return ( reverse_iterator ( begin ( ) ) );
  }

 const_reverse_iterator rend ( ) const noexcept
  {
  return ( const_reverse_iterator ( begin ( ) ) );
  }

 const_iterator cbegin ( ) const noexcept
  {
  return ( begin ( ) );
  }

 const_iterator cend ( ) const noexcept
  {
  return ( end ( ) );
  }

 const_reverse_iterator crbegin ( ) const noexcept
  {
  return ( rbegin ( ) );
  }

 const_reverse_iterator crend ( ) const noexcept
  {
  return ( rend ( ) );
  }

 void shrink_to_fit ( )
  {
  if ( ( size ( ) | this -> _ALLOC_MASK ) < capacity ( ) )
   {
   _Myt _Tmp ( * this );
   swap ( _Tmp );
   }
  }

 reference at ( size_type _Off )
  {
  _Check_offset_exclusive ( _Off );
  return ( this -> _Myptr ( ) [ _Off ] );
  }

 const_reference at ( size_type _Off ) const
  {
  _Check_offset_exclusive ( _Off );
  return ( this -> _Myptr ( ) [ _Off ] );
  }

 reference operator [ ] ( size_type _Off )
  {








  return ( this -> _Myptr ( ) [ _Off ] );
  }

 const_reference operator [ ] ( size_type _Off ) const
  {








  return ( this -> _Myptr ( ) [ _Off ] );
  }

 void push_back ( _Elem _Ch )
  {
  auto & _Dx = this -> _Get_data ( );
  auto & _Sz = _Dx . _Mysize;
  if ( _Sz == _Dx . _Myres )
   _Grow ( _Sz + 1 );
  auto _Ptr = _Dx . _Myptr ( );
  _Traits :: assign ( _Ptr [ _Sz ], _Ch );
  ++ _Sz;
  _Traits :: assign ( _Ptr [ _Sz ], _Elem ( ) );
  }

 void pop_back ( )
  {
  erase ( this -> _Mysize ( ) - 1 );
  }

 reference front ( )
  {
  return ( * begin ( ) );
  }

 const_reference front ( ) const
  {
  return ( * begin ( ) );
  }

 reference back ( )
  {
  return ( * ( end ( ) - 1 ) );
  }

 const_reference back ( ) const
  {
  return ( * ( end ( ) - 1 ) );
  }

 const _Elem * c_str ( ) const noexcept
  {
  return ( this -> _Myptr ( ) );
  }

 const _Elem * data ( ) const noexcept
  {
  return ( this -> _Myptr ( ) );
  }








 size_type length ( ) const noexcept
  {
  return ( this -> _Mysize ( ) );
  }

 size_type size ( ) const noexcept
  {
  return ( this -> _Mysize ( ) );
  }

 size_type max_size ( ) const noexcept
  {
  const size_type _Num = this -> _Getal ( ) . max_size ( );
  return ( _Num <= 1 ? 1 : _Num - 1 );
  }

 void resize ( size_type _Newsize )
  {
  resize ( _Newsize, _Elem ( ) );
  }

 void resize ( size_type _Newsize, _Elem _Ch )
  {
  if ( _Newsize <= this -> _Mysize ( ) )
   _Eos ( _Newsize );
  else
   append ( _Newsize - this -> _Mysize ( ), _Ch );
  }

 size_type capacity ( ) const noexcept
  {
  return ( this -> _Myres ( ) );
  }

 void reserve ( size_type _Newcap = 0 )
  {
  if ( this -> _Mysize ( ) <= _Newcap && this -> _Myres ( ) != _Newcap )
   {
   size_type _Size = this -> _Mysize ( );
   if ( _Grow ( _Newcap, true ) )
    _Eos ( _Size );
   }
  }

 bool empty ( ) const noexcept
  {
  return ( this -> _Mysize ( ) == 0 );
  }


 size_type copy ( _Elem * _Ptr,
  size_type _Count, size_type _Off = 0 ) const
  {
  ;
  _Check_offset ( _Off );
  _Count = _Clamp_suffix_size ( _Off, _Count );
  _Traits :: copy ( _Ptr, this -> _Myptr ( ) + _Off, _Count );
  return ( _Count );
  }

 size_type _Copy_s ( _Elem * _Dest, size_type _Dest_size,
  size_type _Count, size_type _Off = 0 ) const
  {
  ;
  _Check_offset ( _Off );
  _Count = _Clamp_suffix_size ( _Off, _Count );
  _Traits :: _Copy_s ( _Dest, _Dest_size, this -> _Myptr ( ) + _Off, _Count );
  return ( _Count );
  }

 void _Swap_bx ( _Myt & _Right )
  {
  if ( this -> _BUF_SIZE <= this -> _Myres ( ) )
   if ( this -> _BUF_SIZE <= _Right . _Myres ( ) )
    _Swap_adl ( this -> _Bx ( ) . _Ptr, _Right . _Bx ( ) . _Ptr );
   else
    {
    pointer _Ptr = this -> _Bx ( ) . _Ptr;
    this -> _Getal ( ) . destroy ( :: std :: addressof ( this -> _Bx ( ) . _Ptr ) );
    _Traits :: copy ( this -> _Bx ( ) . _Buf,
     _Right . _Bx ( ) . _Buf, _Right . _Mysize ( ) + 1 );
    this -> _Getal ( ) . construct ( :: std :: addressof ( _Right . _Bx ( ) . _Ptr ), _Ptr );
    }
  else
   if ( _Right . _Myres ( ) < this -> _BUF_SIZE )
    :: std :: swap ( this -> _Bx ( ) . _Buf, _Right . _Bx ( ) . _Buf );
   else
    {
    pointer _Ptr = _Right . _Bx ( ) . _Ptr;
    this -> _Getal ( ) . destroy ( :: std :: addressof ( _Right . _Bx ( ) . _Ptr ) );
    _Traits :: copy ( _Right . _Bx ( ) . _Buf,
     this -> _Bx ( ) . _Buf, this -> _Mysize ( ) + 1 );
    this -> _Getal ( ) . construct ( :: std :: addressof ( this -> _Bx ( ) . _Ptr ), _Ptr );
    }
  }

 void swap ( _Myt & _Right )
  noexcept ( _Alty :: propagate_on_container_swap :: value || _Alty :: is_always_equal :: value )

  {
  if ( this != & _Right )
   {
   _Pocs ( this -> _Getal ( ), _Right . _Getal ( ) );
   this -> _Swap_all ( _Right );
   _Swap_bx ( _Right );
   :: std :: swap ( this -> _Mysize ( ), _Right . _Mysize ( ) );
   :: std :: swap ( this -> _Myres ( ), _Right . _Myres ( ) );
   }
  }

 size_type find ( const _Myt & _Right, size_type _Off = 0 ) const noexcept
  {
  return ( find ( _Right . _Myptr ( ), _Off, _Right . size ( ) ) );
  }

 size_type find ( const _Elem * _Ptr,
  size_type _Off, size_type _Count ) const
  {
  ;
  if ( _Count == 0 && _Off <= this -> _Mysize ( ) )
   return ( _Off );

  size_type _Nm;
  if ( _Off < this -> _Mysize ( ) && _Count <= ( _Nm = this -> _Mysize ( ) - _Off ) )
   {
   const _Elem * _Uptr, * _Vptr;
   for ( _Nm -= _Count - 1, _Vptr = this -> _Myptr ( ) + _Off;
    ( _Uptr = _Traits :: find ( _Vptr, _Nm, * _Ptr ) ) != 0;
    _Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1 )
    if ( _Traits :: compare ( _Uptr, _Ptr, _Count ) == 0 )
     return ( _Uptr - this -> _Myptr ( ) );
   }

  return ( npos );
  }

 size_type find ( const _Elem * _Ptr, size_type _Off = 0 ) const
  {
  ;
  return ( find ( _Ptr, _Off, _Traits :: length ( _Ptr ) ) );
  }

 size_type find ( _Elem _Ch, size_type _Off = 0 ) const
  {
  return ( find ( ( const _Elem * ) & _Ch, _Off, 1 ) );
  }

 size_type rfind ( const _Myt & _Right, size_type _Off = npos ) const noexcept
  {
  return ( rfind ( _Right . _Myptr ( ), _Off, _Right . size ( ) ) );
  }

 size_type rfind ( const _Elem * _Ptr,
  size_type _Off, size_type _Count ) const
  {
  ;
  if ( _Count == 0 )
   return ( _Off < this -> _Mysize ( ) ? _Off
    : this -> _Mysize ( ) );
  if ( _Count <= this -> _Mysize ( ) )
   {
   const _Elem * _Uptr = this -> _Myptr ( ) +
    ( _Off < this -> _Mysize ( ) - _Count ? _Off
     : this -> _Mysize ( ) - _Count );
   for (;; -- _Uptr )
    if ( _Traits :: eq ( * _Uptr, * _Ptr )
     && _Traits :: compare ( _Uptr, _Ptr, _Count ) == 0 )
     return ( _Uptr - this -> _Myptr ( ) );
    else if ( _Uptr == this -> _Myptr ( ) )
     break;
   }

  return ( npos );
  }

 size_type rfind ( const _Elem * _Ptr, size_type _Off = npos ) const
  {
  ;
  return ( rfind ( _Ptr, _Off, _Traits :: length ( _Ptr ) ) );
  }

 size_type rfind ( _Elem _Ch, size_type _Off = npos ) const
  {
  return ( rfind ( ( const _Elem * ) & _Ch, _Off, 1 ) );
  }

 size_type find_first_of ( const _Myt & _Right,
  size_type _Off = 0 ) const noexcept
  {
  return ( find_first_of ( _Right . _Myptr ( ), _Off, _Right . size ( ) ) );
  }

 size_type find_first_of ( const _Elem * _Ptr,
  size_type _Off, size_type _Count ) const
  {
  ;
  if ( 0 < _Count && _Off < this -> _Mysize ( ) )
   {
   const _Elem * const _Vptr = this -> _Myptr ( ) + this -> _Mysize ( );
   for ( const _Elem * _Uptr = this -> _Myptr ( ) + _Off;
    _Uptr < _Vptr; ++ _Uptr )
    if ( _Traits :: find ( _Ptr, _Count, * _Uptr ) != 0 )
     return ( _Uptr - this -> _Myptr ( ) );
   }

  return ( npos );
  }

 size_type find_first_of ( const _Elem * _Ptr,
  size_type _Off = 0 ) const
  {
  ;
  return ( find_first_of ( _Ptr, _Off, _Traits :: length ( _Ptr ) ) );
  }

 size_type find_first_of ( _Elem _Ch,
  size_type _Off = 0 ) const
  {
  return ( find ( ( const _Elem * ) & _Ch, _Off, 1 ) );
  }

 size_type find_last_of ( const _Myt & _Right,
  size_type _Off = npos ) const noexcept
  {
  return ( find_last_of ( _Right . _Myptr ( ), _Off, _Right . size ( ) ) );
  }

 size_type find_last_of ( const _Elem * _Ptr,
  size_type _Off, size_type _Count ) const
  {
  ;
  if ( 0 < _Count && 0 < this -> _Mysize ( ) )
   {
   const _Elem * _Uptr = this -> _Myptr ( )
    + ( _Off < this -> _Mysize ( ) ? _Off : this -> _Mysize ( ) - 1 );
   for (;; -- _Uptr )
    if ( _Traits :: find ( _Ptr, _Count, * _Uptr ) != 0 )
     return ( _Uptr - this -> _Myptr ( ) );
    else if ( _Uptr == this -> _Myptr ( ) )
     break;
   }

  return ( npos );
  }

 size_type find_last_of ( const _Elem * _Ptr,
  size_type _Off = npos ) const
  {
  ;
  return ( find_last_of ( _Ptr, _Off, _Traits :: length ( _Ptr ) ) );
  }

 size_type find_last_of ( _Elem _Ch,
  size_type _Off = npos ) const
  {
  return ( rfind ( ( const _Elem * ) & _Ch, _Off, 1 ) );
  }

 size_type find_first_not_of ( const _Myt & _Right,
  size_type _Off = 0 ) const noexcept
  {
  return ( find_first_not_of ( _Right . _Myptr ( ), _Off,
   _Right . size ( ) ) );
  }

 size_type find_first_not_of ( const _Elem * _Ptr,
  size_type _Off, size_type _Count ) const
  {
  ;
  if ( _Off < this -> _Mysize ( ) )
   {
   const _Elem * const _Vptr = this -> _Myptr ( ) + this -> _Mysize ( );
   for ( const _Elem * _Uptr = this -> _Myptr ( ) + _Off;
    _Uptr < _Vptr; ++ _Uptr )
    if ( _Traits :: find ( _Ptr, _Count, * _Uptr ) == 0 )
     return ( _Uptr - this -> _Myptr ( ) );
   }
  return ( npos );
  }

 size_type find_first_not_of ( const _Elem * _Ptr,
  size_type _Off = 0 ) const
  {
  ;
  return ( find_first_not_of ( _Ptr, _Off, _Traits :: length ( _Ptr ) ) );
  }

 size_type find_first_not_of ( _Elem _Ch,
  size_type _Off = 0 ) const
  {
  return ( find_first_not_of ( ( const _Elem * ) & _Ch, _Off, 1 ) );
  }

 size_type find_last_not_of ( const _Myt & _Right,
  size_type _Off = npos ) const noexcept
  {
  return ( find_last_not_of ( _Right . _Myptr ( ), _Off, _Right . size ( ) ) );
  }

 size_type find_last_not_of ( const _Elem * _Ptr,
  size_type _Off, size_type _Count ) const
  {
  ;
  if ( 0 < this -> _Mysize ( ) )
   {
   const _Elem * _Uptr = this -> _Myptr ( )
    + ( _Off < this -> _Mysize ( ) ? _Off : this -> _Mysize ( ) - 1 );
   for (;; -- _Uptr )
    if ( _Traits :: find ( _Ptr, _Count, * _Uptr ) == 0 )
     return ( _Uptr - this -> _Myptr ( ) );
    else if ( _Uptr == this -> _Myptr ( ) )
     break;
   }
  return ( npos );
  }

 size_type find_last_not_of ( const _Elem * _Ptr,
  size_type _Off = npos ) const
  {
  ;
  return ( find_last_not_of ( _Ptr, _Off, _Traits :: length ( _Ptr ) ) );
  }

 size_type find_last_not_of ( _Elem _Ch,
  size_type _Off = npos ) const
  {
  return ( find_last_not_of ( ( const _Elem * ) & _Ch, _Off, 1 ) );
  }

 _Myt substr ( size_type _Off = 0, size_type _Count = npos ) const
  {
  return ( _Myt ( * this, _Off, _Count, get_allocator ( ) ) );
  }

 static int _Traits_compare ( const _Elem * const _Left, const size_type _Left_size,
  const _Elem * const _Right, const size_type _Right_size )
  {
  const size_type _Min_size = _Left_size < _Right_size ? _Left_size : _Right_size;
  const int _Ans = _Traits :: compare ( _Left, _Right, _Min_size );

  if ( _Ans != 0 )
   return ( _Ans );

  if ( _Left_size < _Right_size )
   return ( - 1 );

  if ( _Left_size > _Right_size )
   return ( 1 );

  return ( 0 );
  }

 size_type _Clamp_suffix_size ( const size_type _Off, const size_type _Size ) const
  {
  const size_type _Max_effective_size = this -> _Mysize ( ) - _Off;
  if ( _Size <= _Max_effective_size )
   return ( _Size );
  else
   return ( _Max_effective_size );
  }

 int compare ( const _Myt & _Right ) const noexcept
  {
  return ( _Traits_compare ( this -> _Myptr ( ), this -> _Mysize ( ),
   _Right . _Myptr ( ), _Right . _Mysize ( ) ) );
  }

 int compare ( size_type _Off,
  size_type _N0, const _Myt & _Right ) const
  {
  _Check_offset ( _Off );
  return ( _Traits_compare ( this -> _Myptr ( ) + _Off, _Clamp_suffix_size ( _Off, _N0 ),
   _Right . _Myptr ( ), _Right . _Mysize ( ) ) );
  }

 int compare ( size_type _Off,
  size_type _N0, const _Myt & _Right,
  size_type _Roff, size_type _Count = npos ) const
  {
  _Check_offset ( _Off );
  _Right . _Check_offset ( _Roff );
  return ( _Traits_compare ( this -> _Myptr ( ) + _Off, _Clamp_suffix_size ( _Off, _N0 ),
   _Right . _Myptr ( ) + _Roff, _Right . _Clamp_suffix_size ( _Roff, _Count ) ) );
  }

 int compare ( const _Elem * _Ptr ) const
  {
  ;
  return ( _Traits_compare ( this -> _Myptr ( ), this -> _Mysize ( ),
   _Ptr, _Traits :: length ( _Ptr ) ) );
  }

 int compare ( size_type _Off, size_type _N0, const _Elem * _Ptr ) const
  {
  ;
  _Check_offset ( _Off );
  return ( _Traits_compare ( this -> _Myptr ( ) + _Off, _Clamp_suffix_size ( _Off, _N0 ),
   _Ptr, _Traits :: length ( _Ptr ) ) );
  }

 int compare ( size_type _Off,
  size_type _N0, const _Elem * _Ptr, size_type _Count ) const
  {
  ;
  _Check_offset ( _Off );
  return ( _Traits_compare ( this -> _Myptr ( ) + _Off, _Clamp_suffix_size ( _Off, _N0 ),
   _Ptr, _Count ) );
  }

 allocator_type get_allocator ( ) const noexcept
  {
  allocator_type _Ret ( this -> _Getal ( ) );
  return ( _Ret );
  }

 void _Chassign ( size_type _Off, size_type _Count, _Elem _Ch )
  {
  if ( _Count == 1 )
   _Traits :: assign ( * ( this -> _Myptr ( ) + _Off ), _Ch );
  else
   _Traits :: assign ( this -> _Myptr ( ) + _Off, _Count, _Ch );
  }

 void _Copy ( size_type _Newsize, size_type _Oldlen )
  {
  size_type _Newres = _Newsize | this -> _ALLOC_MASK;
  if ( max_size ( ) < _Newres )
   _Newres = _Newsize;
  else if ( this -> _Myres ( ) / 2 <= _Newres / 3 )
   ;
  else if ( this -> _Myres ( ) <= max_size ( ) - this -> _Myres ( ) / 2 )
   _Newres = this -> _Myres ( )
    + this -> _Myres ( ) / 2;
  else
   _Newres = max_size ( );

  pointer _Ptr;
  try {
   _Ptr = this -> _Getal ( ) . allocate ( _Newres + 1 );
  } catch ( ... ) {
   _Newres = _Newsize;
   try {
    _Ptr = this -> _Getal ( ) . allocate ( _Newres + 1 );
   } catch ( ... ) {
   _Tidy ( true );
   throw;
   }
  }

  if ( 0 < _Oldlen )
   _Traits :: copy ( _Unfancy ( _Ptr ), this -> _Myptr ( ),
    _Oldlen );
  _Tidy ( true );
  this -> _Getal ( ) . construct ( :: std :: addressof ( this -> _Bx ( ) . _Ptr ), _Ptr );
  this -> _Myres ( ) = _Newres;
  _Eos ( _Oldlen );
  }

 void _Eos ( size_type _Newsize )
  {
  auto & _Dx = this -> _Get_data ( );
  _Traits :: assign ( _Dx . _Myptr ( ) [ _Dx . _Mysize = _Newsize ], _Elem ( ) );
  }

 bool _Grow ( size_type _Newsize,
  bool _Trim = false )
  {
  if ( max_size ( ) < _Newsize )
   _Xlen ( );
  if ( this -> _Myres ( ) < _Newsize )
   _Copy ( _Newsize, this -> _Mysize ( ) );
  else if ( _Trim && _Newsize < this -> _BUF_SIZE )
   _Tidy ( true,
    _Newsize < this -> _Mysize ( ) ? _Newsize : this -> _Mysize ( ) );
  else if ( _Newsize == 0 )
   _Eos ( 0 );
  return ( 0 < _Newsize );
  }

 bool _Inside ( const _Elem * _Ptr )
  {
  if ( _Ptr == nullptr_t { } || _Ptr < this -> _Myptr ( )
   || this -> _Myptr ( ) + this -> _Mysize ( ) <= _Ptr )
   return ( false );
  else
   return ( true );
  }

 void _Tidy ( bool _Built = false,
  size_type _Newsize = 0 )
  {
  if ( ! _Built )
   ;
  else if ( this -> _BUF_SIZE <= this -> _Myres ( ) )
   {
   pointer _Ptr = this -> _Bx ( ) . _Ptr;
   this -> _Getal ( ) . destroy ( :: std :: addressof ( this -> _Bx ( ) . _Ptr ) );
   if ( 0 < _Newsize )
    _Traits :: copy ( this -> _Bx ( ) . _Buf,
     _Unfancy ( _Ptr ), _Newsize );
   this -> _Getal ( ) . deallocate ( _Ptr, this -> _Myres ( ) + 1 );
   }
  this -> _Myres ( ) = this -> _BUF_SIZE - 1;
  _Eos ( _Newsize );
  }

 [ [ noreturn ] ] void _Xlen ( ) const
  {
  _Xlength_error ( "string too long" );
  }

 void _Check_offset ( const size_type _Off ) const
  {
  if ( this -> _Mysize ( ) < _Off )
   _Xran ( );
  }

 void _Check_offset_exclusive ( const size_type _Off ) const
  {
  if ( this -> _Mysize ( ) <= _Off )
   _Xran ( );
  }

 [ [ noreturn ] ] void _Xran ( ) const
  {
  _Xout_of_range ( "invalid string position" );
  }
 };
#line 2288 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template< class _Elem, class 
#line 2289 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
_Traits, class 
#line 2290 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
_Alloc> const typename basic_string< _Elem, _Traits, _Alloc> ::size_type 
#line 2292 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
basic_string< _Elem, _Traits, _Alloc> ::npos = ((typename ::std::basic_string< _Elem, _Traits, typename _String_base_types< _Elem, _Alloc> ::_Alloc> ::size_type)(-1)); 
#line 2297 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 void swap ( basic_string < _Elem, _Traits, _Alloc > & _Left,
  basic_string < _Elem, _Traits, _Alloc > & _Right )
   noexcept ( noexcept ( _Left . swap ( _Right ) ) )
 {
 _Left . swap ( _Right );
 }
#line 2307 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_string < _Elem, _Traits, _Alloc > operator + (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 basic_string < _Elem, _Traits, _Alloc > _Ans;
 _Ans . reserve ( _Left . size ( ) + _Right . size ( ) );
 _Ans += _Left;
 _Ans += _Right;
 return ( _Ans );
 }
#line 2321 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_string < _Elem, _Traits, _Alloc > operator + (
  const _Elem * _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 basic_string < _Elem, _Traits, _Alloc > _Ans;
 _Ans . reserve ( _Traits :: length ( _Left ) + _Right . size ( ) );
 _Ans += _Left;
 _Ans += _Right;
 return ( _Ans );
 }
#line 2335 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_string < _Elem, _Traits, _Alloc > operator + (
  const _Elem _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 basic_string < _Elem, _Traits, _Alloc > _Ans;
 _Ans . reserve ( 1 + _Right . size ( ) );
 _Ans += _Left;
 _Ans += _Right;
 return ( _Ans );
 }
#line 2349 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_string < _Elem, _Traits, _Alloc > operator + (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const _Elem * _Right )
 {
 basic_string < _Elem, _Traits, _Alloc > _Ans;
 _Ans . reserve ( _Left . size ( ) + _Traits :: length ( _Right ) );
 _Ans += _Left;
 _Ans += _Right;
 return ( _Ans );
 }
#line 2363 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_string < _Elem, _Traits, _Alloc > operator + (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const _Elem _Right )
 {
 basic_string < _Elem, _Traits, _Alloc > _Ans;
 _Ans . reserve ( _Left . size ( ) + 1 );
 _Ans += _Left;
 _Ans += _Right;
 return ( _Ans );
 }
#line 2377 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_string < _Elem, _Traits, _Alloc > operator + (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  basic_string < _Elem, _Traits, _Alloc > && _Right )
 {
 return ( :: std :: move ( _Right . insert ( 0, _Left ) ) );
 }
#line 2387 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_string < _Elem, _Traits, _Alloc > operator + (
  basic_string < _Elem, _Traits, _Alloc > && _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 return ( :: std :: move ( _Left . append ( _Right ) ) );
 }
#line 2397 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_string < _Elem, _Traits, _Alloc > operator + (
  basic_string < _Elem, _Traits, _Alloc > && _Left,
  basic_string < _Elem, _Traits, _Alloc > && _Right )
 {
 if ( _Right . size ( ) <= _Left . capacity ( ) - _Left . size ( )
  || _Right . capacity ( ) - _Right . size ( ) < _Left . size ( ) )
  return ( :: std :: move ( _Left . append ( _Right ) ) );
 else
  return ( :: std :: move ( _Right . insert ( 0, _Left ) ) );
 }
#line 2411 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_string < _Elem, _Traits, _Alloc > operator + (
  const _Elem * _Left,
  basic_string < _Elem, _Traits, _Alloc > && _Right )
 {
 return ( :: std :: move ( _Right . insert ( 0, _Left ) ) );
 }
#line 2421 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_string < _Elem, _Traits, _Alloc > operator + (
  const _Elem _Left,
  basic_string < _Elem, _Traits, _Alloc > && _Right )
 {
 typedef typename basic_string < _Elem, _Traits, _Alloc > :: size_type
  size_type;
 return ( :: std :: move ( _Right . insert ( ( size_type ) 0, ( size_type ) 1, _Left ) ) );
 }
#line 2433 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_string < _Elem, _Traits, _Alloc > operator + (
  basic_string < _Elem, _Traits, _Alloc > && _Left,
  const _Elem * _Right )
 {
 return ( :: std :: move ( _Left . append ( _Right ) ) );
 }
#line 2443 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_string < _Elem, _Traits, _Alloc > operator + (
  basic_string < _Elem, _Traits, _Alloc > && _Left,
  const _Elem _Right )
 {
 return ( :: std :: move ( _Left . append ( 1, _Right ) ) );
 }
#line 2453 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator == (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept
 {
 return ( _Left . compare ( _Right ) == 0 );
 }
#line 2463 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator == (
  const _Elem * _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 return ( _Right . compare ( _Left ) == 0 );
 }
#line 2473 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator == (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const _Elem * _Right )
 {
 return ( _Left . compare ( _Right ) == 0 );
 }
#line 2483 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator != (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept
 {
 return ( ! ( _Left == _Right ) );
 }
#line 2493 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator != (
  const _Elem * _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 return ( ! ( _Left == _Right ) );
 }
#line 2503 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator != (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const _Elem * _Right )
 {
 return ( ! ( _Left == _Right ) );
 }
#line 2513 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator < (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept
 {
 return ( _Left . compare ( _Right ) < 0 );
 }
#line 2523 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator < (
  const _Elem * _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 return ( _Right . compare ( _Left ) > 0 );
 }
#line 2533 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator < (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const _Elem * _Right )
 {
 return ( _Left . compare ( _Right ) < 0 );
 }
#line 2543 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator > (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept
 {
 return ( _Right < _Left );
 }
#line 2553 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator > (
  const _Elem * _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 return ( _Right < _Left );
 }
#line 2563 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator > (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const _Elem * _Right )
 {
 return ( _Right < _Left );
 }
#line 2573 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator <= (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept
 {
 return ( ! ( _Right < _Left ) );
 }
#line 2583 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator <= (
  const _Elem * _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 return ( ! ( _Right < _Left ) );
 }
#line 2593 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator <= (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const _Elem * _Right )
 {
 return ( ! ( _Right < _Left ) );
 }
#line 2603 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator >= (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept
 {
 return ( ! ( _Left < _Right ) );
 }
#line 2613 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator >= (
  const _Elem * _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 return ( ! ( _Left < _Right ) );
 }
#line 2623 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool operator >= (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const _Elem * _Right )
 {
 return ( ! ( _Left < _Right ) );
 }
#line 2634 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
typedef basic_string< char, char_traits< char> , allocator< char> >  string; 
#line 2636 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
typedef basic_string< __wchar_t, char_traits< __wchar_t> , allocator< __wchar_t> >  wstring; 
#line 2639 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc >
 struct hash < basic_string < _Elem, _Traits, _Alloc > >
 {
 typedef basic_string < _Elem, _Traits, _Alloc > argument_type;
 typedef size_t result_type;

 size_t operator ( ) ( const argument_type & _Keyval ) const
  {
  return ( _Hash_seq ( ( const unsigned char * ) _Keyval . c_str ( ),
   _Keyval . size ( ) * sizeof ( _Elem ) ) );
  }
 };
#line 2655 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
typedef basic_string< char16_t, char_traits< char16_t> , allocator< char16_t> >  u16string; 
#line 2657 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
typedef basic_string< char32_t, char_traits< char32_t> , allocator< char32_t> >  u32string; 
#line 2658 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
}
#line 2661 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
#pragma warning(pop)
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
#pragma warning(push,3)
#line 2662 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring"
#pragma pack ( pop )
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
#pragma pack ( push, 8 )
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
namespace std { 
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
class logic_error : public exception { 
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
public: typedef exception _Mybase; 
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
explicit logic_error(const string &_Message) : _Mybase(_Message.c_str()) 
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
{ 
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
} 
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
explicit logic_error(const char *_Message) : _Mybase(_Message) 
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
{ 
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
} 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
}; 
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
class domain_error : public logic_error { 
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
public: typedef logic_error _Mybase; 
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
explicit domain_error(const string &_Message) : _Mybase(_Message.c_str()) 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
{ 
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
} 
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
explicit domain_error(const char *_Message) : _Mybase(_Message) 
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
{ 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
} 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
}; 
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
class invalid_argument : public logic_error { 
#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
public: typedef logic_error _Mybase; 
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
explicit invalid_argument(const string &_Message) : _Mybase(_Message.c_str()) 
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
{ 
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
} 
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
explicit invalid_argument(const char *_Message) : _Mybase(_Message) 
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
{ 
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
} 
#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
}; 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
class length_error : public logic_error { 
#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
public: typedef logic_error _Mybase; 
#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
explicit length_error(const string &_Message) : _Mybase(_Message.c_str()) 
#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
{ 
#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
} 
#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
explicit length_error(const char *_Message) : _Mybase(_Message) 
#line 112 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
{ 
#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
} 
#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
}; 
#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
class out_of_range : public logic_error { 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
public: typedef logic_error _Mybase; 
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
explicit out_of_range(const string &_Message) : _Mybase(_Message.c_str()) 
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
{ 
#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
} 
#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
explicit out_of_range(const char *_Message) : _Mybase(_Message) 
#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
{ 
#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
} 
#line 152 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
}; 
#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
class runtime_error : public exception { 
#line 159 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
public: typedef exception _Mybase; 
#line 161 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
explicit runtime_error(const string &_Message) : _Mybase(_Message.c_str()) 
#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
{ 
#line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
} 
#line 166 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
explicit runtime_error(const char *_Message) : _Mybase(_Message) 
#line 168 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
{ 
#line 169 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
} 
#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
}; 
#line 183 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
class overflow_error : public runtime_error { 
#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
public: typedef runtime_error _Mybase; 
#line 189 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
explicit overflow_error(const string &_Message) : _Mybase(_Message.c_str()) 
#line 191 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
{ 
#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
} 
#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
explicit overflow_error(const char *_Message) : _Mybase(_Message) 
#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
{ 
#line 197 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
} 
#line 208 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
}; 
#line 211 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
class underflow_error : public runtime_error { 
#line 215 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
public: typedef runtime_error _Mybase; 
#line 217 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
explicit underflow_error(const string &_Message) : _Mybase(_Message.c_str()) 
#line 219 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
{ 
#line 220 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
} 
#line 222 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
explicit underflow_error(const char *_Message) : _Mybase(_Message) 
#line 224 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
{ 
#line 225 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
} 
#line 236 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
}; 
#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
class range_error : public runtime_error { 
#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
public: typedef runtime_error _Mybase; 
#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
explicit range_error(const string &_Message) : _Mybase(_Message.c_str()) 
#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
{ 
#line 248 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
} 
#line 250 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
explicit range_error(const char *_Message) : _Mybase(_Message) 
#line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
{ 
#line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
} 
#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
}; 
#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
}
#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
#pragma warning(pop)
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\typeinfo"
#pragma warning(push,3)
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\typeinfo"
#pragma warning(disable: 4275)
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept"
#pragma pack ( pop )
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\typeinfo"
#pragma pack ( push, 8 )
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
#pragma pack ( push, 8 )
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
struct __type_info_node; 
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
extern __type_info_node __type_info_root_node; 
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
#pragma warning(push)
#pragma warning(disable: 4510 4512 4610)
struct __std_type_info_data { 
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
const char *_UndecoratedName; 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
const char _DecoratedName[1]; 
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
}; 
#pragma warning(pop)
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
__declspec(dllimport) int __cdecl __std_type_info_compare(const __std_type_info_data * _Lhs, const __std_type_info_data * _Rhs); 
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
__declspec(dllimport) size_t __cdecl __std_type_info_hash(const __std_type_info_data * _Data); 
#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
__declspec(dllimport) const char *__cdecl __std_type_info_name(__std_type_info_data * _Data, __type_info_node * _RootNode); 
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
}__pragma(pack ( pop )) 
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
class type_info { 
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
public: type_info(const type_info &) = delete;
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
type_info &operator=(const type_info &) = delete;
#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
size_t hash_code() const throw() 
#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
{ 
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
return __std_type_info_hash(&(_Data)); 
#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
} 
#line 74 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
bool operator==(const type_info &_Other) const throw() 
#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
{ 
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
return __std_type_info_compare(&(_Data), &(_Other._Data)) == 0; 
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
} 
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
bool operator!=(const type_info &_Other) const throw() 
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
{ 
#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
return __std_type_info_compare(&(_Data), &(_Other._Data)) != 0; 
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
} 
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
bool before(const type_info &_Other) const throw() 
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
{ 
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
return __std_type_info_compare(&(_Data), &(_Other._Data)) < 0; 
#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
} 
#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
const char *name() const throw() 
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
{ 
#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
return __std_type_info_name(&(_Data), &__type_info_root_node); 
#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
} 
#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
const char *raw_name() const throw() 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
{ 
#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
return (_Data)._DecoratedName; 
#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
} 
#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
virtual ~type_info() throw(); 
#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
private: mutable __std_type_info_data _Data; 
#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
}; 
#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
namespace std { 
#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
using ::type_info;
#line 112 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
}
#line 116 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
namespace std { 
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
class bad_cast : public exception { 
#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
public: bad_cast() throw() : exception("bad cast", 1) 
#line 125 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
{ 
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
} 
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
static bad_cast __construct_from_string_literal(const char *const _Message) throw() 
#line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
{ 
#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
return bad_cast(_Message, 1); 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
} 
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
private: bad_cast(const char *const _Message, int) throw() : exception(_Message, 1) 
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
{ 
#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
} 
#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
}; 
#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
class bad_typeid : public exception { 
#line 146 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
public: bad_typeid() throw() : exception("bad typeid", 1) 
#line 148 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
{ 
#line 149 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
} 
#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
static bad_typeid __construct_from_string_literal(const char *const _Message) throw() 
#line 152 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
{ 
#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
return bad_typeid(_Message, 1); 
#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
} 
#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
friend class __non_rtti_object; 
#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
private: bad_typeid(const char *const _Message, int) throw() : exception(_Message, 1) 
#line 162 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
{ 
#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
} 
#line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
}; 
#line 166 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
class __non_rtti_object : public bad_typeid { 
#line 171 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
public: static __non_rtti_object __construct_from_string_literal(const char *const _Message) throw() 
#line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
{ 
#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
return __non_rtti_object(_Message, 1); 
#line 174 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
} 
#line 178 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
private: __non_rtti_object(const char *const _Message, int) throw() : bad_typeid(_Message, 1) 
#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
{ 
#line 181 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
} 
#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
}; 
#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
}
#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\typeinfo"
#pragma warning(pop)
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
#pragma pack ( pop )
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\typeinfo"
#pragma pack ( pop )
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl _isctype(int _C, int _Type); 
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl _isctype_l(int _C, int _Type, _locale_t _Locale); 
#line 26 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl isalpha(int _C); 
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl _isalpha_l(int _C, _locale_t _Locale); 
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl isupper(int _C); 
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl _isupper_l(int _C, _locale_t _Locale); 
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl islower(int _C); 
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl _islower_l(int _C, _locale_t _Locale); 
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl isdigit(int _C); 
#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl _isdigit_l(int _C, _locale_t _Locale); 
#line 37 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl isxdigit(int _C); 
#line 38 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl _isxdigit_l(int _C, _locale_t _Locale); 
#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl isspace(int _C); 
#line 43 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl _isspace_l(int _C, _locale_t _Locale); 
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl ispunct(int _C); 
#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl _ispunct_l(int _C, _locale_t _Locale); 
#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl isblank(int _C); 
#line 47 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl _isblank_l(int _C, _locale_t _Locale); 
#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl isalnum(int _C); 
#line 49 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl _isalnum_l(int _C, _locale_t _Locale); 
#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl isprint(int _C); 
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl _isprint_l(int _C, _locale_t _Locale); 
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl isgraph(int _C); 
#line 53 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl _isgraph_l(int _C, _locale_t _Locale); 
#line 54 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl iscntrl(int _C); 
#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl _iscntrl_l(int _C, _locale_t _Locale); 
#line 58 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl toupper(int _C); 
#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl tolower(int _C); 
#line 63 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl _tolower(int _C); 
#line 64 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl _tolower_l(int _C, _locale_t _Locale); 
#line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl _toupper(int _C); 
#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl _toupper_l(int _C, _locale_t _Locale); 
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl __isascii(int _C); 
#line 69 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl __toascii(int _C); 
#line 70 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl __iscsymf(int _C); 
#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl __iscsym(int _C); 
#line 144 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__inline __crt_locale_data_public *__cdecl __acrt_get_locale_data_prefix(const volatile void *const _LocalePointers) 
#line 145 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
{ 
#line 146 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
const _locale_t _TypedLocalePointers = (_locale_t)_LocalePointers; 
#line 147 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
return (__crt_locale_data_public *)(_TypedLocalePointers->locinfo); 
#line 148 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
} 
#line 154 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__inline int __cdecl _chvalidchk_l(const int 
#line 155 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
_C, const int 
#line 156 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
_Mask, const _locale_t 
#line 157 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
_Locale) 
#line 159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
{ 
#line 163 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
if (_Locale) 
#line 164 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
{ 
#line 165 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
return ((__acrt_get_locale_data_prefix(_Locale)->_locale_pctype)[_C]) & _Mask; 
#line 166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
}  
#line 168 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
return (__pctype_func()[_C]) & _Mask; 
#line 170 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
} 
#line 175 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
__inline int __cdecl _ischartype_l(const int 
#line 176 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
_C, const int 
#line 177 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
_Mask, const _locale_t 
#line 178 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
_Locale) 
#line 180 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
{ 
#line 181 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
if (_Locale && ((__acrt_get_locale_data_prefix(_Locale)->_locale_mb_cur_max) > 1)) 
#line 182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
{ 
#line 183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
return _isctype_l(_C, _Mask, _Locale); 
#line 184 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
}  
#line 186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
return _chvalidchk_l(_C, _Mask, _Locale); 
#line 187 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
} 
#line 234 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
}__pragma(pack ( pop )) 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
struct lconv { 
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
char *decimal_point; 
#line 32 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
char *thousands_sep; 
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
char *grouping; 
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
char *int_curr_symbol; 
#line 35 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
char *currency_symbol; 
#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
char *mon_decimal_point; 
#line 37 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
char *mon_thousands_sep; 
#line 38 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
char *mon_grouping; 
#line 39 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
char *positive_sign; 
#line 40 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
char *negative_sign; 
#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
char int_frac_digits; 
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
char frac_digits; 
#line 43 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
char p_cs_precedes; 
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
char p_sep_by_space; 
#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
char n_cs_precedes; 
#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
char n_sep_by_space; 
#line 47 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
char p_sign_posn; 
#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
char n_sign_posn; 
#line 49 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__wchar_t *_W_decimal_point; 
#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__wchar_t *_W_thousands_sep; 
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__wchar_t *_W_int_curr_symbol; 
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__wchar_t *_W_currency_symbol; 
#line 53 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__wchar_t *_W_mon_decimal_point; 
#line 54 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__wchar_t *_W_mon_thousands_sep; 
#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__wchar_t *_W_positive_sign; 
#line 56 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__wchar_t *_W_negative_sign; 
#line 57 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
}; 
#line 79 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__declspec(dllimport) void __cdecl _lock_locales(); 
#line 80 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__declspec(dllimport) void __cdecl _unlock_locales(); 
#line 83 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__declspec(dllimport) int __cdecl _configthreadlocale(int _Flag); 
#line 88 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__declspec(dllimport) char *__cdecl setlocale(int _Category, const char * _Locale); 
#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__declspec(dllimport) lconv *__cdecl localeconv(); 
#line 97 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__declspec(dllimport) _locale_t __cdecl _get_current_locale(); 
#line 100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__declspec(dllimport) _locale_t __cdecl _create_locale(int _Category, const char * _Locale); 
#line 105 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__declspec(dllimport) void __cdecl _free_locale(_locale_t _Locale); 
#line 111 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__declspec(dllimport) __wchar_t *__cdecl _wsetlocale(int _Category, const __wchar_t * _Locale); 
#line 117 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__declspec(dllimport) _locale_t __cdecl _wcreate_locale(int _Category, const __wchar_t * _Locale); 
#line 124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__declspec(dllimport) __wchar_t **__cdecl ___lc_locale_name_func(); 
#line 125 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__declspec(dllimport) unsigned __cdecl ___lc_codepage_func(); 
#line 126 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__declspec(dllimport) unsigned __cdecl ___lc_collate_cp_func(); 
#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
}
#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
#pragma warning(push,3)
#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h"
__pragma(pack ( pop )) 
#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
#pragma pack ( push, 8 )
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
extern "C" {
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
typedef 
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
struct _Collvec { 
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
unsigned _Page; 
#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__wchar_t *_LocaleName; 
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
} _Collvec; 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
typedef 
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
struct _Ctypevec { 
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
unsigned _Page; 
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
const short *_Table; 
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
int _Delfl; 
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__wchar_t *_LocaleName; 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
} _Ctypevec; 
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
typedef 
#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
struct _Cvtvec { 
#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
unsigned _Page; 
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
unsigned _Mbcurmax; 
#line 74 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
int _Isclocale; 
#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
unsigned char _Isleadbyte[32]; 
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
} _Cvtvec; 
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) _Collvec __cdecl _Getcoll(); 
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) _Ctypevec __cdecl _Getctype(); 
#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) _Cvtvec __cdecl _Getcvt(); 
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) int __cdecl _Getdateorder(); 
#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) int __cdecl _Mbrtowc(__wchar_t *, const char *, size_t, mbstate_t *, const _Cvtvec *); 
#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) float __cdecl _Stof(const char *, char **, long); 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) double __cdecl _Stod(const char *, char **, long); 
#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) long double __cdecl _Stold(const char *, char **, long); 
#line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) int __cdecl _Strcoll(const char *, const char *, const char *, const char *, const _Collvec *); 
#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) size_t __cdecl _Strxfrm(char * _String1, char * _End1, const char *, const char *, const _Collvec *); 
#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) int __cdecl _Tolower(int, const _Ctypevec *); 
#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) int __cdecl _Toupper(int, const _Ctypevec *); 
#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) int __cdecl _Wcrtomb(char *, __wchar_t, mbstate_t *, const _Cvtvec *); 
#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) int __cdecl _Wcscoll(const __wchar_t *, const __wchar_t *, const __wchar_t *, const __wchar_t *, const _Collvec *); 
#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) size_t __cdecl _Wcsxfrm(__wchar_t * _String1, __wchar_t * _End1, const __wchar_t *, const __wchar_t *, const _Collvec *); 
#line 119 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) short __cdecl _Getwctype(__wchar_t, const _Ctypevec *); 
#line 120 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) const __wchar_t *__cdecl _Getwctypes(const __wchar_t *, const __wchar_t *, short *, const _Ctypevec *); 
#line 122 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) __wchar_t __cdecl _Towlower(__wchar_t, const _Ctypevec *); 
#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) __wchar_t __cdecl _Towupper(__wchar_t, const _Ctypevec *); 
#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
}
#line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
extern "C" {
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) char *__cdecl _Getdays(); 
#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) char *__cdecl _Getmonths(); 
#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) void *__cdecl _Gettnames(); 
#line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) size_t __cdecl _Strftime(char *, size_t _Maxsize, const char *, const tm *, void *); 
#line 150 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) __wchar_t *__cdecl _W_Getdays(); 
#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) __wchar_t *__cdecl _W_Getmonths(); 
#line 156 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) void *__cdecl _W_Gettnames(); 
#line 159 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) size_t __cdecl _Wcsftime(__wchar_t *, size_t _Maxsize, const __wchar_t *, const tm *, void *); 
#line 162 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
}
#line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) _locale_t __cdecl _GetLocaleForCP(unsigned); 
#line 176 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
#pragma warning(pop)
#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
#pragma warning(push,3)
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
#pragma warning(disable: 4412)
#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h"
#pragma pack ( pop )
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
#pragma pack ( push, 8 )
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
namespace std { 
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
class __declspec(dllimport) _Timevec { 
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
public: _Timevec(void *_Ptr = 0) : _Timeptr(_Ptr) 
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Timevec(const _Timevec &_Right) 
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
((*this) = _Right); 
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
~_Timevec() noexcept 
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
free(_Timeptr); 
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Timevec &operator=(const _Timevec &_Right) 
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
(_Timeptr) = (_Right._Timeptr); 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
(((_Timevec *)(&_Right))->_Timeptr) = (0); 
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
return *this; 
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
void *_Getptr() const 
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
return _Timeptr; 
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
private: void *_Timeptr; 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
}; 
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
class __declspec(dllimport) _Locinfo { 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
public: typedef ::_Collvec _Collvec; 
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
typedef ::_Ctypevec _Ctypevec; 
#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
typedef ::_Cvtvec _Cvtvec; 
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
typedef std::_Timevec _Timevec; 
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
static void __cdecl _Locinfo_ctor(_Locinfo *, const char *); 
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
static void __cdecl _Locinfo_ctor(_Locinfo *, int, const char *); 
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
static void __cdecl _Locinfo_dtor(_Locinfo *); 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
static _Locinfo &__cdecl _Locinfo_Addcats(_Locinfo *, int, const char *); 
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Locinfo(const char *_Pch = "C") : _Lock(0) 
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
if (_Pch == (0)) { 
#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
throw ((runtime_error)("bad locale name")); }  
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Locinfo_ctor(this, _Pch); 
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Locinfo(int _Cat, const char *_Pch) : _Lock(0) 
#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
if (_Pch == (0)) { 
#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
throw ((runtime_error)("bad locale name")); }  
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Locinfo_ctor(this, _Cat, _Pch); 
#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
~_Locinfo() noexcept 
#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Locinfo_dtor(this); 
#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Locinfo &_Addcats(int _Cat, const char *_Pch) 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
if (_Pch == (0)) { 
#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
throw ((runtime_error)("bad locale name")); }  
#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
return _Locinfo_Addcats(this, _Cat, _Pch); 
#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
const char *_Getname() const 
#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
return (_Newlocname)._C_str(); 
#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Collvec _Getcoll() const 
#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 112 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
return ::_Getcoll(); 
#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Ctypevec _Getctype() const 
#line 116 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
return ::_Getctype(); 
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 120 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Cvtvec _Getcvt() const 
#line 121 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 122 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
return ::_Getcvt(); 
#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 125 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
const lconv *_Getlconv() const 
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
return localeconv(); 
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Timevec _Gettnames() const 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
return ((_Timevec)(::_Gettnames())); 
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
const char *_Getdays() const 
#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
const char *_Ptr = ::_Getdays(); 
#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
if (_Ptr != (0)) 
#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
((((_Locinfo *)this)->_Days) = _Ptr); 
#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
free((void *)_Ptr); 
#line 143 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
}  
#line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
return (!(_Days)._Empty()) ? (_Days)._C_str() : (":Sun:Sunday:Mon:Monday:Tue:Tuesday:Wed:Wednesday:Thu:Thursday:Fri:Friday:Sat:Saturday"); 
#line 147 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 149 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
const char *_Getmonths() const 
#line 150 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
const char *_Ptr = ::_Getmonths(); 
#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
if (_Ptr != (0)) 
#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
((((_Locinfo *)this)->_Months) = _Ptr); 
#line 156 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
free((void *)_Ptr); 
#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
}  
#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
return (!(_Months)._Empty()) ? (_Months)._C_str() : (":Jan:January:Feb:February:Mar:March:Apr:April:May:May:Jun:June:Jul:July:Aug:August:Sep:September:Oct:October:Nov:November:Dec:De" "cember"); 
#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
const char *_Getfalse() const 
#line 166 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
return "false"; 
#line 168 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
const char *_Gettrue() const 
#line 171 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
return "true"; 
#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 175 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
int _Getdateorder() const 
#line 176 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
return ::_Getdateorder(); 
#line 178 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Timevec _W_Gettnames() const 
#line 181 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
return ((_Timevec)(::_W_Gettnames())); 
#line 183 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 185 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
const unsigned short *_W_Getdays() const 
#line 186 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
const __wchar_t *_Ptr = ::_W_Getdays(); 
#line 189 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
if (_Ptr != (0)) 
#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 191 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
((((_Locinfo *)this)->_W_Days) = _Ptr); 
#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
free((void *)_Ptr); 
#line 193 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
}  
#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
return (const unsigned short *)((!(_W_Days)._Empty()) ? (_W_Days)._C_str() : (L"\x3a\x53\x75\x6e\x3a\x53\x75\x6e\x64\x61\x79\x3a\x4d\x6f\x6e\x3a\x4d\x6f\x6e\x64\x61\x79\x3a\x54\x75\x65\x3a\x54\x75\x65\x73\x64" L"\x61\x79\x3a\x57\x65\x64\x3a\x57\x65\x64\x6e\x65\x73\x64\x61\x79\x3a\x54\x68\x75\x3a\x54\x68\x75\x72\x73\x64\x61\x79\x3a\x46\x72" L"\x69\x3a\x46\x72\x69\x64\x61\x79\x3a\x53\x61\x74\x3a\x53\x61\x74\x75\x72\x64\x61\x79")); 
#line 198 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 200 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
const unsigned short *_W_Getmonths() const 
#line 201 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 202 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
const __wchar_t *_Ptr = ::_W_Getmonths(); 
#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
if (_Ptr != (0)) 
#line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
((((_Locinfo *)this)->_W_Months) = _Ptr); 
#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
free((void *)_Ptr); 
#line 208 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
}  
#line 209 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
return (const unsigned short *)((!(_W_Months)._Empty()) ? (_W_Months)._C_str() : (L"\x3a\x4a\x61\x6e\x3a\x4a\x61\x6e\x75\x61\x72\x79\x3a\x46\x65\x62\x3a\x46\x65\x62\x72\x75\x61\x72\x79\x3a\x4d\x61\x72\x3a\x4d\x61" L"\x72\x63\x68\x3a\x41\x70\x72\x3a\x41\x70\x72\x69\x6c\x3a\x4d\x61\x79\x3a\x4d\x61\x79\x3a\x4a\x75\x6e\x3a\x4a\x75\x6e\x65\x3a\x4a" L"\x75\x6c\x3a\x4a\x75\x6c\x79\x3a\x41\x75\x67\x3a\x41\x75\x67\x75\x73\x74\x3a\x53\x65\x70\x3a\x53\x65\x70\x74\x65\x6d\x62\x65\x72" L"\x3a\x4f\x63\x74\x3a\x4f\x63\x74\x6f\x62\x65\x72\x3a\x4e\x6f\x76\x3a\x4e\x6f\x76\x65\x6d\x62\x65\x72\x3a\x44\x65\x63\x3a\x44\x65" L"\x63\x65\x6d\x62\x65\x72")); 
#line 215 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 217 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Locinfo(const _Locinfo &) = delete;
#line 218 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Locinfo &operator=(const _Locinfo &) = delete;
#line 225 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
private: _Lockit _Lock; 
#line 228 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Yarn< char>  _Days; 
#line 229 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Yarn< char>  _Months; 
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Yarn< __wchar_t>  _W_Days; 
#line 231 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Yarn< __wchar_t>  _W_Months; 
#line 232 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Yarn< char>  _Oldlocname; 
#line 233 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Yarn< char>  _Newlocname; 
#line 234 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
}; 
#line 237 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
template < class _Elem > inline
 int __cdecl _LStrcoll ( const _Elem * _First1, const _Elem * _Last1,
  const _Elem * _First2, const _Elem * _Last2,
   const _Locinfo :: _Collvec * )
 {
 for (; _First1 != _Last1 && _First2 != _Last2; ++ _First1, ++ _First2 )
  if ( * _First1 < * _First2 )
   return ( - 1 );
  else if ( * _First2 < * _First1 )
   return ( + 1 );
 return ( _First2 != _Last2 ? - 1 : _First1 != _Last1 ? + 1 : 0 );
 }
#line 251 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
template<> inline int __cdecl _LStrcoll(const char *_First1, const char *_Last1, const char *
#line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_First2, const char *_Last2, const _Locinfo::_Collvec *
#line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Vector) 
#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
return _Strcoll(_First1, _Last1, _First2, _Last2, _Vector); 
#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
template<> inline int __cdecl _LStrcoll(const __wchar_t *_First1, const __wchar_t *_Last1, const __wchar_t *
#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_First2, const __wchar_t *_Last2, const _Locinfo::_Collvec *
#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Vector) 
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
return _Wcscoll(_First1, _Last1, _First2, _Last2, _Vector); 
#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
template < class _Elem > inline
 size_t __cdecl _LStrxfrm ( _Elem * _First1, _Elem * _Last1,
  const _Elem * _First2, const _Elem * _Last2,
   const _Locinfo :: _Collvec * )
 {
 size_t _Count = _Last2 - _First2;
 if ( _Count <= ( size_t ) ( _Last1 - _First1 ) )
  :: memcpy_s ( ( _First1 ), ( ( _Last1 - _First1 ) * sizeof ( _Elem ) ), ( _First2 ), ( _Count * sizeof ( _Elem ) ) );

 return ( _Count );
 }
#line 280 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
template<> inline size_t __cdecl _LStrxfrm(char *
#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_First1, char *_Last1, const char *
#line 282 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_First2, const char *_Last2, const _Locinfo::_Collvec *
#line 283 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Vector) 
#line 284 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 285 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
return _Strxfrm(_First1, _Last1, _First2, _Last2, _Vector); 
#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 289 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
template<> inline size_t __cdecl _LStrxfrm(__wchar_t *
#line 290 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_First1, __wchar_t *_Last1, const __wchar_t *
#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_First2, const __wchar_t *_Last2, const _Locinfo::_Collvec *
#line 292 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
_Vector) 
#line 293 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
{ 
#line 294 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
return _Wcsxfrm(_First1, _Last1, _First2, _Last2, _Vector); 
#line 295 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
} 
#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
}
#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
#pragma warning(pop)
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xfacet"
#pragma warning(push,3)
#line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo"
#pragma pack ( pop )
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xfacet"
#pragma pack ( push, 8 )
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xfacet"
namespace std { 
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xfacet"
class __declspec(dllimport) _Facet_base { 
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xfacet"
public: virtual ~_Facet_base() noexcept 
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xfacet"
{ 
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xfacet"
} 
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xfacet"
virtual void _Incref() = 0; 
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xfacet"
virtual _Facet_base *_Decref() = 0; 
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xfacet"
}; 
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xfacet"
void __cdecl _Facet_Register(_Facet_base *); 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xfacet"
}
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xfacet"
#pragma warning(pop)
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
#pragma warning(push,3)
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
#pragma warning(disable: 4412 28197)
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xfacet"
#pragma pack ( pop )
#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
#pragma pack ( push, 8 )
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
namespace std { 
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template< class _Dummy> 
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
class _Locbase { 
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
public: static const int collate = ((1 << 1) >> 1); 
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static const int ctype = ((1 << 2) >> 1); 
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static const int monetary = ((1 << 3) >> 1); 
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static const int numeric = ((1 << 4) >> 1); 
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static const int time = ((1 << 5) >> 1); 
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static const int messages = ((1 << 6) >> 1); 
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static const int all = (((1 << (6 + 1)) >> 1) - 1); 
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static const int none = 0; 
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}; 
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template< class _Dummy> const int 
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Locbase< _Dummy> ::collate; 
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template< class _Dummy> const int 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Locbase< _Dummy> ::ctype; 
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template< class _Dummy> const int 
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Locbase< _Dummy> ::monetary; 
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template< class _Dummy> const int 
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Locbase< _Dummy> ::numeric; 
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template< class _Dummy> const int 
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Locbase< _Dummy> ::time; 
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template< class _Dummy> const int 
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Locbase< _Dummy> ::messages; 
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template< class _Dummy> const int 
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Locbase< _Dummy> ::all; 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template< class _Dummy> const int 
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Locbase< _Dummy> ::none; 
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
class locale; 
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template < class _Facet >
 const _Facet & __cdecl use_facet ( const locale & );
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template< class _Elem> class collate; 
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
struct __declspec(dllimport) _Crt_new_delete { 
#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}; 
#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
class locale : public _Locbase< int> , public _Crt_new_delete { 
#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
public: typedef int category; 
#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
class __declspec(dllimport) id { 
#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
public: id(size_t _Val = 0) : _Id(_Val) 
#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
operator size_t() 
#line 114 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Id) == (0)) 
#line 116 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ _Lockit _Lock(0); 
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Id) == (0)) { 
#line 119 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Id) = (++_Id_cnt); }  
#line 120 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 121 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 122 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Id; 
#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
private: size_t _Id; 
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static int _Id_cnt; 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
public: id(const id &) = delete;
#line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
id &operator=(const id &) = delete;
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}; 
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
class _Locimp; 
#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
class __declspec(dllimport) facet : public _Facet_base, public _Crt_new_delete { 
#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
public: static size_t __cdecl _Getcat(const facet ** = 0, const locale * = 0) 
#line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 145 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (size_t)(-1); 
#line 146 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 148 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual void _Incref() 
#line 149 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 150 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_InterlockedIncrement(reinterpret_cast< volatile long *>(&(_Myrefs))); 
#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual _Facet_base *_Decref() 
#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_InterlockedDecrement(reinterpret_cast< volatile long *>(&(_Myrefs))) == (0)) { 
#line 156 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this; } else { 
#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return 0; }  
#line 159 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 162 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
private: _Atomic_counter_t _Myrefs; 
#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
protected: explicit facet(size_t _Initrefs = 0) 
#line 166 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Init_atomic_counter(_Myrefs, (_Atomic_integral_t)_Initrefs); 
#line 168 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual ~facet() noexcept 
#line 171 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 175 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
public: facet(const facet &) = delete;
#line 176 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
facet &operator=(const facet &) = delete;
#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}; 
#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
#pragma warning(push)
#pragma warning(disable: 4275)
#line 183 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
class __declspec(dllimport) _Locimp : public facet { 
#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
protected: virtual ~_Locimp() noexcept 
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 189 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Locimp_dtor(this); 
#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
private: static _Locimp *__cdecl _New_Locimp(bool _Transparent = false); 
#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static _Locimp *__cdecl _New_Locimp(const _Locimp & _Right); 
#line 199 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static void __cdecl _Locimp_dtor(_Locimp *); 
#line 201 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static void __cdecl _Locimp_Addfac(_Locimp *, facet *, size_t); 
#line 203 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static void __cdecl _Locimp_ctor(_Locimp *, const _Locimp &); 
#line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
friend class locale; 
#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Locimp(bool _Transparent) : facet(1), _Facetvec((0)), _Facetcount((0)), _Catmask(none), _Xparent(_Transparent), _Name("*") 
#line 211 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 212 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 214 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Locimp(const _Locimp &_Right) : facet(1), _Facetvec((0)), _Facetcount(_Right._Facetcount), _Catmask(_Right._Catmask), _Xparent(_Right._Xparent), _Name((_Right._Name).c_str()) 
#line 218 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 219 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Locimp_ctor(this, _Right); 
#line 220 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 222 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
void _Addfac(facet *_Pfacet, size_t _Id) 
#line 223 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 224 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Locimp_Addfac(this, _Pfacet, _Id); 
#line 225 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 227 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static _Locimp *__cdecl _Makeloc(const _Locinfo &, category, _Locimp *, const locale *); 
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static void __cdecl _Makewloc(const _Locinfo &, category, _Locimp *, const locale *); 
#line 234 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static void __cdecl _Makeushloc(const _Locinfo &, category, _Locimp *, const locale *); 
#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static void __cdecl _Makexloc(const _Locinfo &, category, _Locimp *, const locale *); 
#line 241 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
facet **_Facetvec; 
#line 242 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
size_t _Facetcount; 
#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
category _Catmask; 
#line 244 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
bool _Xparent; 
#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Yarn< char>  _Name; 
#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static _Locimp *_Clocptr; 
#line 250 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
public: _Locimp &operator=(const _Locimp &) = delete;
#line 251 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}; 
#line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
#pragma warning(pop)
#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template < class _Elem,
  class _Traits,
  class _Alloc >
  bool operator ( ) ( const basic_string < _Elem, _Traits, _Alloc > & _Left,
   const basic_string < _Elem, _Traits, _Alloc > & _Right ) const
  {
  const :: std :: collate < _Elem > & _Coll_fac =
   use_facet < :: std :: collate < _Elem > > ( * this );

  return ( _Coll_fac . compare ( _Left . c_str ( ), _Left . c_str ( ) + _Left . size ( ),
   _Right . c_str ( ), _Right . c_str ( ) + _Right . size ( ) ) < 0 );
  }
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template < class _Facet >
  locale combine ( const locale & _Loc ) const
  {
  _Facet * _Facptr;

  try {
   _Facptr = ( _Facet * ) & use_facet < _Facet > ( _Loc );
  } catch ( ... ) {
   _Xruntime_error ( "locale::combine facet missing" );
  }

  _Locimp * _Newimp = _Locimp :: _New_Locimp ( * _Ptr );
  _Newimp -> _Addfac ( _Facptr, _Facet :: id );
  _Newimp -> _Catmask = none;
  _Newimp -> _Name = "*";
  return ( locale ( _Newimp ) );
  }
#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template < class _Facet >
  locale ( const locale & _Loc, const _Facet * _Facptr )
   : _Ptr ( _Locimp :: _New_Locimp ( * _Loc . _Ptr ) )
  {
  if ( _Facptr != 0 )
   {
   _Ptr -> _Addfac ( ( _Facet * ) _Facptr, _Facet :: id );
   _Ptr -> _Catmask = none;
   _Ptr -> _Name = "*";
   }
  }
#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
locale(_Uninitialized) 
#line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 300 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 323 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
locale(const locale &_Right) noexcept : _Ptr(_Right._Ptr) 
#line 325 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 326 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Ptr)->_Incref(); 
#line 327 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 329 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
locale() noexcept : _Ptr(_Init(true)) 
#line 331 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 332 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 335 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
locale(const locale &_Loc, const locale &_Other, category 
#line 336 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Cat) : _Ptr(_Locimp::_New_Locimp(*(_Loc._Ptr))) 
#line 338 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Cat != none) 
#line 340 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 341 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
try { 
#line 342 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ _Locinfo _Lobj; 
#line 343 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, &_Other); 
#line 344 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Lobj._Addcats((_Loc._Ptr)->_Catmask, (_Loc.name()).c_str()); 
#line 346 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Lobj._Addcats((_Other._Ptr)->_Catmask, (_Other.name()).c_str()); 
#line 348 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
((_Ptr)->_Catmask) = (((_Loc._Ptr)->_Catmask) | ((_Other._Ptr)->_Catmask)); 
#line 350 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(((_Ptr)->_Name) = (_Lobj._Getname())); 
#line 351 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 352 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} catch (...) { 
#line 353 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
delete (_Ptr)->_Decref(); 
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
throw; 
#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 356 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 357 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 360 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
private: void _Construct(const string &_Str, category 
#line 361 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Cat) 
#line 362 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 363 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
bool _Bad = false; 
#line 364 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Init(); 
#line 365 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Cat != none) 
#line 366 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 367 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
try { 
#line 368 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ _Locinfo _Lobj(_Cat, _Str.c_str()); 
#line 369 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (this->_Badname(_Lobj)) { 
#line 370 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Bad = true; } else 
#line 372 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 373 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0); 
#line 374 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
((_Ptr)->_Catmask) = _Cat; 
#line 375 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(((_Ptr)->_Name) = (_Str.c_str())); 
#line 376 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 377 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 378 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} catch (...) { 
#line 379 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
delete (_Ptr)->_Decref(); 
#line 380 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
throw; 
#line 381 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 382 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 384 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Bad) 
#line 385 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 386 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
delete (_Ptr)->_Decref(); 
#line 387 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Xruntime_error("bad locale name"); 
#line 388 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 389 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 392 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
public: explicit locale(const char *_Locname, category 
#line 393 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Cat = all) : _Ptr(_Locimp::_New_Locimp()) 
#line 395 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 398 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Locname == (0)) { 
#line 399 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Xruntime_error("bad locale name"); }  
#line 400 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
this->_Construct(_Locname, _Cat); 
#line 401 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
locale(const locale &_Loc, const char *_Locname, category 
#line 404 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Cat) : _Ptr(_Locimp::_New_Locimp(*(_Loc._Ptr))) 
#line 406 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 409 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Locname == (0)) { 
#line 410 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Xruntime_error("bad locale name"); }  
#line 411 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
this->_Construct(_Locname, _Cat); 
#line 412 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 414 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
explicit locale(const string &_Str, category 
#line 415 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Cat = all) : _Ptr(_Locimp::_New_Locimp()) 
#line 417 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 418 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
this->_Construct(_Str, _Cat); 
#line 419 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 421 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
locale(const locale &_Loc, const string &_Str, category 
#line 422 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Cat) : _Ptr(_Locimp::_New_Locimp(*(_Loc._Ptr))) 
#line 424 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 425 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
this->_Construct(_Str, _Cat); 
#line 426 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 429 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
~locale() noexcept 
#line 430 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 431 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Ptr) != (0)) { 
#line 432 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
delete (_Ptr)->_Decref(); }  
#line 433 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 435 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
locale &operator=(const locale &_Right) noexcept 
#line 436 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 437 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Ptr) != (_Right._Ptr)) 
#line 438 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 439 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
delete (_Ptr)->_Decref(); 
#line 440 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Ptr) = (_Right._Ptr); 
#line 441 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Ptr)->_Incref(); 
#line 442 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 443 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return *this; 
#line 444 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 447 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
string name() const 
#line 448 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 449 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (((_Ptr) == (0)) ? string() : ((_Ptr)->_Name).c_str()); 
#line 450 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 452 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const char *c_str() const 
#line 453 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 454 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return ((_Ptr) == (0)) ? "" : ((_Ptr)->_Name).c_str(); 
#line 455 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 457 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const facet *_Getfacet(size_t _Id) const 
#line 458 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 459 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const facet *_Facptr = (_Id < ((_Ptr)->_Facetcount)) ? ((_Ptr)->_Facetvec)[_Id] : (0); 
#line 461 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Facptr != (0)) || (!((_Ptr)->_Xparent))) { 
#line 462 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Facptr; } else 
#line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 465 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Locimp *_Ptr0 = _Getgloballocale(); 
#line 466 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (_Id < (_Ptr0->_Facetcount)) ? (_Ptr0->_Facetvec)[_Id] : (0); 
#line 469 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 470 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 472 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
bool operator==(const locale &_Loc) const 
#line 473 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 474 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return ((_Ptr) == (_Loc._Ptr)) || (((this->name()).compare("*") != 0) && ((this->name()).compare(_Loc.name()) == 0)); 
#line 477 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 479 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
bool operator!=(const locale &_Right) const 
#line 480 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 481 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return !((*this) == _Right); 
#line 482 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 484 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
__declspec(dllimport) static const locale &__cdecl 
#line 485 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
classic(); 
#line 487 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
__declspec(dllimport) static locale __cdecl 
#line 488 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
global(const locale &); 
#line 490 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
__declspec(dllimport) static locale __cdecl 
#line 491 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
empty(); 
#line 494 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
private: locale(_Locimp *_Ptrimp) : _Ptr(_Ptrimp) 
#line 496 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 497 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 499 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
__declspec(dllimport) static _Locimp *__cdecl 
#line 500 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Init(bool _Do_incref = false); 
#line 501 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
__declspec(dllimport) static _Locimp *__cdecl 
#line 502 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Getgloballocale(); 
#line 503 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
__declspec(dllimport) static void __cdecl 
#line 504 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Setgloballocale(void *); 
#line 506 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
bool _Badname(const _Locinfo &_Lobj) 
#line 507 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 508 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return ::strcmp(_Lobj._Getname(), "*") == 0; 
#line 509 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 511 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Locimp *_Ptr; 
#line 512 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}; 
#line 535 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template< class _Facet> 
#line 536 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
struct _Facetptr { 
#line 538 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static const locale::facet *_Psave; 
#line 539 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}; 
#line 541 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template< class _Facet> const locale::facet *
#line 543 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Facetptr< _Facet> ::_Psave = (0); 
#line 550 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template < class _Facet > inline
 const _Facet & __cdecl use_facet ( const locale & _Loc )

 {





 { :: std :: _Lockit _Lock ( 0 );
  const locale :: facet * _Psave =
   _Facetptr < _Facet > :: _Psave;

  size_t _Id = _Facet :: id;
  const locale :: facet * _Pf = _Loc . _Getfacet ( _Id );

  if ( _Pf != 0 )
   ;
  else if ( _Psave != 0 )
   _Pf = _Psave;
  else if ( _Facet :: _Getcat ( & _Psave, & _Loc ) == ( size_t ) ( - 1 ) )



   throw :: std :: bad_cast ( );





  else
   {
   _Pf = _Psave;
   _Facetptr < _Facet > :: _Psave = _Psave;

   locale :: facet * _Pfmod = ( _Facet * ) _Psave;
   _Pfmod -> _Incref ( );





   _Facet_Register ( _Pfmod );

   }

  return ( ( const _Facet & ) ( * _Pf ) );
 }

 }
#line 602 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template < class _Elem,
 class _InIt > inline
 int __cdecl _Getloctxt ( _InIt & _First, _InIt & _Last, size_t _Numfields,
  const _Elem * _Ptr )
 {
 for ( size_t _Off = 0; _Ptr [ _Off ] != ( _Elem ) 0; ++ _Off )
  if ( _Ptr [ _Off ] == _Ptr [ 0 ] )
   ++ _Numfields;
 string _Str ( _Numfields, '\000' );

 int _Ans = - 2;
 for ( size_t _Column = 1;; ++ _Column, ( void ) ++ _First, _Ans = - 1 )
  {
  bool _Prefix = false;
  size_t _Off = 0;
  size_t _Field = 0;

  for (; _Field < _Numfields; ++ _Field )
   {
   for (; _Ptr [ _Off ] != ( _Elem ) 0 && _Ptr [ _Off ] != _Ptr [ 0 ]; ++ _Off )
    ;

   if ( _Str [ _Field ] != '\000' )
    _Off += _Str [ _Field ];
   else if ( _Ptr [ _Off += _Column ] == _Ptr [ 0 ]
    || _Ptr [ _Off ] == ( _Elem ) 0 )
    {
    _Str [ _Field ] = ( char ) ( _Column < 127
     ? _Column : 127 );
    _Ans = ( int ) _Field;
    }
   else if ( _First == _Last || _Ptr [ _Off ] != * _First )
    _Str [ _Field ] = ( char ) ( _Column < 127
     ? _Column : 127 );
   else
    _Prefix = true;
   }

  if ( ! _Prefix || _First == _Last )
   break;
  }
 return ( _Ans );
 }
#line 650 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template < class _Elem > inline
 char __cdecl _Maklocbyte ( _Elem _Char,
  const _Locinfo :: _Cvtvec & )
 {
 return ( ( char ) ( unsigned char ) _Char );
 }
#line 658 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template<> inline char __cdecl _Maklocbyte(__wchar_t _Char, const _Locinfo::_Cvtvec &
#line 659 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Cvt) 
#line 660 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 661 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
char _Byte = '\000'; 
#line 662 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
mbstate_t _Mbst1 = {}; 
#line 663 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Wcrtomb(&_Byte, _Char, &_Mbst1, &_Cvt); 
#line 664 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Byte; 
#line 665 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 669 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template<> inline char __cdecl _Maklocbyte(unsigned short _Char, const _Locinfo::_Cvtvec &
#line 670 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Cvt) 
#line 671 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 672 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
char _Byte = '\000'; 
#line 673 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
mbstate_t _Mbst1 = {}; 
#line 674 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Wcrtomb(&_Byte, (__wchar_t)_Char, &_Mbst1, &_Cvt); 
#line 675 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Byte; 
#line 676 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 683 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template < class _Elem > inline
 _Elem __cdecl _Maklocchr ( char _Byte, _Elem *,
  const _Locinfo :: _Cvtvec & )
 {
 return ( ( _Elem ) ( unsigned char ) _Byte );
 }
#line 691 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template<> inline __wchar_t __cdecl _Maklocchr(char _Byte, __wchar_t *, const _Locinfo::_Cvtvec &
#line 692 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Cvt) 
#line 693 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 694 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
__wchar_t _Wc = L'\x0'; 
#line 695 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
mbstate_t _Mbst1 = {}; 
#line 696 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst1, &_Cvt); 
#line 697 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Wc; 
#line 698 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 702 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template<> inline unsigned short __cdecl _Maklocchr(char _Byte, unsigned short *, const _Locinfo::_Cvtvec &
#line 703 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Cvt) 
#line 704 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 705 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
unsigned short _Wc = ((unsigned short)0); 
#line 706 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
mbstate_t _Mbst1 = {}; 
#line 707 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mbrtowc((__wchar_t *)(&_Wc), &_Byte, 1, &_Mbst1, &_Cvt); 
#line 708 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Wc; 
#line 709 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 716 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template < class _Elem > inline
 _Elem * __cdecl _Maklocstr ( const char * _Ptr, _Elem *,
  const _Locinfo :: _Cvtvec & )
 {
 size_t _Count = :: strlen ( _Ptr ) + 1;

 _Elem * _Ptrdest = ( _Elem * ) calloc ( _Count, sizeof ( _Elem ) );


 if ( ! _Ptrdest )
  _Xbad_alloc ( );

 #pragma warning(push)
 #pragma warning(disable: 6011)
 for ( _Elem * _Ptrnext = _Ptrdest; 0 < _Count; -- _Count, ++ _Ptrnext, ++ _Ptr )
  * _Ptrnext = ( _Elem ) ( unsigned char ) * _Ptr;
 #pragma warning(pop)

 return ( _Ptrdest );
 }
#line 738 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template<> inline __wchar_t *__cdecl _Maklocstr(const char *_Ptr, __wchar_t *, const _Locinfo::_Cvtvec &
#line 739 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Cvt) 
#line 740 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 741 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
size_t _Count, _Count1; 
#line 742 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
size_t _Wchars; 
#line 743 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const char *_Ptr1; 
#line 744 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int _Bytes; 
#line 745 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
__wchar_t _Wc; 
#line 746 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
mbstate_t _Mbst1 = {}; 
#line 748 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Count1 = (::strlen(_Ptr) + (1)); 
#line 749 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (((_Count = _Count1), (_Wchars = (0))), (_Ptr1 = _Ptr); (0) < _Count; ((_Count -= _Bytes), (_Ptr1 += _Bytes)), (++_Wchars)) { 
#line 751 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0) { 
#line 752 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
break; }  }  
#line 753 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
++_Wchars; 
#line 755 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
__wchar_t *_Ptrdest = (__wchar_t *)calloc(_Wchars, sizeof(__wchar_t)); 
#line 758 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (!_Ptrdest) { 
#line 759 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Xbad_alloc(); }  
#line 760 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
__wchar_t *_Ptrnext = _Ptrdest; 
#line 761 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
mbstate_t _Mbst2 = {}; 
#line 763 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
#pragma warning(push)
#pragma warning(disable: 6011)
for (; (0) < _Wchars; (((_Count -= _Bytes), (_Ptr += _Bytes)), (--_Wchars)), (++_Ptrnext)) { 
#line 767 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0) { 
#line 768 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
break; }  }  
#line 769 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_Ptrnext) = L'\x0'; 
#pragma warning(pop)
#line 772 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Ptrdest; 
#line 773 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 777 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template<> inline unsigned short *__cdecl _Maklocstr(const char *_Ptr, unsigned short *, const _Locinfo::_Cvtvec &
#line 778 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Cvt) 
#line 779 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 780 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
size_t _Count, _Count1; 
#line 781 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
size_t _Wchars; 
#line 782 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const char *_Ptr1; 
#line 783 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int _Bytes; 
#line 784 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
unsigned short _Wc; 
#line 785 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
mbstate_t _Mbst1 = {}; 
#line 787 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Count1 = (::strlen(_Ptr) + (1)); 
#line 788 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (((_Count = _Count1), (_Wchars = (0))), (_Ptr1 = _Ptr); (0) < _Count; ((_Count -= _Bytes), (_Ptr1 += _Bytes)), (++_Wchars)) { 
#line 790 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Bytes = _Mbrtowc((__wchar_t *)(&_Wc), _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0) { 
#line 792 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
break; }  }  
#line 793 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
++_Wchars; 
#line 795 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
__wchar_t *_Ptrdest = (__wchar_t *)calloc(_Wchars, sizeof(__wchar_t)); 
#line 798 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (!_Ptrdest) { 
#line 799 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Xbad_alloc(); }  
#line 801 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
__wchar_t *_Ptrnext = _Ptrdest; 
#line 802 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
mbstate_t _Mbst2 = {}; 
#line 803 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; (0) < _Wchars; (((_Count -= _Bytes), (_Ptr += _Bytes)), (--_Wchars)), (++_Ptrnext)) { 
#line 805 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0) { 
#line 806 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
break; }  }  
#line 807 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_Ptrnext) = L'\x0'; 
#line 808 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (unsigned short *)_Ptrdest; 
#line 809 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 813 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
#pragma warning(push)
#pragma warning(disable: 4275)
#line 816 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
class __declspec(dllimport) codecvt_base : public locale::facet { 
#line 821 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
public: enum { 
#line 822 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
ok, partial, error, noconv}; 
#line 823 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef int result; 
#line 825 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
codecvt_base(size_t _Refs = 0) : locale::facet(_Refs) 
#line 827 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 828 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 830 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
bool always_noconv() const noexcept 
#line 831 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 832 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_always_noconv(); 
#line 833 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 835 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int max_length() const noexcept 
#line 836 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 837 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_max_length(); 
#line 838 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 840 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int encoding() const noexcept 
#line 841 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 842 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_encoding(); 
#line 843 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 845 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual ~codecvt_base() noexcept 
#line 846 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 847 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 850 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
protected: virtual bool do_always_noconv() const noexcept 
#line 851 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 852 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return false; 
#line 853 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 855 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual int do_max_length() const noexcept 
#line 856 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 857 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return 1; 
#line 858 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 860 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual int do_encoding() const noexcept 
#line 861 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 862 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return 1; 
#line 863 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 864 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}; 
#line 866 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
#pragma warning(pop)
#line 869 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template < class _Elem,
 class _Byte,
 class _Statype >
 class codecvt
  : public codecvt_base
 {
public :
 typedef _Elem intern_type;
 typedef _Byte extern_type;
 typedef _Statype state_type;

 result in ( _Statype & _State,
  const _Byte * _First1, const _Byte * _Last1, const _Byte * & _Mid1,
  _Elem * _First2, _Elem * _Last2, _Elem * & _Mid2 ) const
  {
  return ( do_in ( _State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2 ) );
  }

 result out ( _Statype & _State,
  const _Elem * _First1, const _Elem * _Last1, const _Elem * & _Mid1,
  _Byte * _First2, _Byte * _Last2, _Byte * & _Mid2 ) const
  {
  return ( do_out ( _State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2 ) );
  }

 result unshift ( _Statype & _State,
  _Byte * _First2, _Byte * _Last2, _Byte * & _Mid2 ) const
  {
  return ( do_unshift ( _State, _First2, _Last2, _Mid2 ) );
  }

 int length ( _Statype & _State, const _Byte * _First1,
  const _Byte * _Last1, size_t _Count ) const
  {
  return ( do_length ( _State, _First1, _Last1, _Count ) );
  }

  static locale :: id id;

 explicit codecvt ( size_t _Refs = 0 )
  : codecvt_base ( _Refs )
  {
  _Init ( _Locinfo ( ) );
  }

  codecvt ( const _Locinfo & _Lobj, size_t _Refs = 0 )
  : codecvt_base ( _Refs )
  {
  _Init ( _Lobj );
  }

 static size_t __cdecl _Getcat ( const locale :: facet * * _Ppf = 0,
  const locale * _Ploc = 0 )
  {
  if ( _Ppf != 0 && * _Ppf == 0 )
   * _Ppf = new codecvt < _Elem, _Byte, _Statype > (
    _Locinfo ( _Ploc -> c_str ( ) ) );
  return ( 2 );
  }

protected :
 virtual ~ codecvt ( ) noexcept
  {
  }

 void _Init ( const _Locinfo & )
  {
  }

 virtual bool do_always_noconv ( ) const noexcept
  {
  return ( is_same < _Byte, _Elem > :: value );
  }

 virtual result do_in ( _Statype &,
  const _Byte * _First1, const _Byte * _Last1, const _Byte * & _Mid1,
  _Elem * _First2, _Elem * _Last2, _Elem * & _Mid2 ) const
  {
  _Mid1 = _First1, _Mid2 = _First2;
  if ( is_same < _Byte, _Elem > :: value )
   return ( noconv );
  else
   {
   for (; _Mid1 != _Last1 && _Mid2 != _Last2; ++ _Mid1, ++ _Mid2 )
    * _Mid2 = ( _Elem ) * _Mid1;
   return ( ok );
   }
  }

 virtual result do_out ( _Statype &,
  const _Elem * _First1, const _Elem * _Last1, const _Elem * & _Mid1,
  _Byte * _First2, _Byte * _Last2, _Byte * & _Mid2 ) const
  {
  _Mid1 = _First1, _Mid2 = _First2;
  if ( is_same < _Byte, _Elem > :: value )
   return ( noconv );
  else
   {
   for (; _Mid1 != _Last1 && _Mid2 != _Last2; ++ _Mid1, ++ _Mid2 )
    * _Mid2 = ( _Byte ) * _Mid1;
   return ( ok );
   }
  }

 virtual result do_unshift ( _Statype &,
  _Byte * _First2, _Byte *, _Byte * & _Mid2 ) const
  {
  _Mid2 = _First2;
  return ( ok );
  }

 virtual int do_length ( _Statype &, const _Byte * _First1,
  const _Byte * _Last1, size_t _Count ) const
  {
  return ( ( int ) ( _Count < ( size_t ) ( _Last1 - _First1 )
   ? _Count : _Last1 - _First1 ) );
  }
 };
#line 991 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template< class _Elem, class 
#line 992 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Byte, class 
#line 993 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Statype> locale::id 
#line 994 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
codecvt< _Elem, _Byte, _Statype> ::id; 
#line 997 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
enum _Codecvt_mode { 
#line 998 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Consume_header = 4, 
#line 999 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Generate_header = 2
#line 1000 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}; 
#line 1004 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template<> class __declspec(dllimport) codecvt< char16_t, char, _Mbstatet>  : public codecvt_base { 
#line 1008 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
public: typedef std::codecvt< char16_t, char, _Mbstatet>  _Mybase; 
#line 1009 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef char16_t _Elem; 
#line 1010 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef char _Byte; 
#line 1011 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef _Mbstatet _Statype; 
#line 1012 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef _Elem intern_type; 
#line 1013 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef _Byte extern_type; 
#line 1014 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef _Statype state_type; 
#line 1016 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
result in(_Statype &_State, const _Byte *
#line 1017 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First1, const _Byte *_Last1, const _Byte *&_Mid1, _Elem *
#line 1018 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Elem *_Last2, _Elem *&_Mid2) const 
#line 1019 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1020 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_in(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1022 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1024 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
result out(_Statype &_State, const _Elem *
#line 1025 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First1, const _Elem *_Last1, const _Elem *&_Mid1, _Byte *
#line 1026 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1027 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1028 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_out(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1030 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1032 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
result unshift(_Statype &_State, _Byte *
#line 1033 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1034 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1035 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_unshift(_State, _First2, _Last2, _Mid2); 
#line 1037 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1039 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int length(_Statype &_State, const _Byte *_First1, const _Byte *
#line 1040 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last1, size_t _Count) const 
#line 1041 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1042 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_length(_State, _First1, _Last1, _Count); 
#line 1043 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1045 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static locale::id id; 
#line 1047 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
explicit codecvt(size_t _Refs = 0) : codecvt_base(_Refs), _Maxcode((1114111)), _Mode(_Consume_header) 
#line 1049 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1050 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ _Locinfo _Lobj; 
#line 1051 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
this->_Init(_Lobj); 
#line 1052 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1053 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1055 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
codecvt(const _Locinfo &_Lobj, size_t _Refs = 0) : codecvt_base(_Refs), _Maxcode((1114111)), _Mode(_Consume_header) 
#line 1057 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1058 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
this->_Init(_Lobj); 
#line 1059 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1061 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
codecvt(const _Locinfo &_Lobj, unsigned long _Maxcode_arg, _Codecvt_mode 
#line 1062 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mode_arg, size_t _Refs = 0) : codecvt_base(_Refs), _Maxcode(_Maxcode_arg), _Mode(_Mode_arg) 
#line 1064 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1065 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
this->_Init(_Lobj); 
#line 1066 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1068 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *
#line 1069 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Ploc = 0) 
#line 1070 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1071 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Ppf != (0)) && ((*_Ppf) == (0))) { 
#line 1072 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_Ppf) = (new std::codecvt< char16_t, char, _Mbstatet> (((_Locinfo)(_Ploc->c_str())))); }  
#line 1074 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return 2; 
#line 1075 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1078 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
protected: virtual ~codecvt() noexcept 
#line 1079 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1080 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1082 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
void _Init(const _Locinfo &) 
#line 1083 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1084 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1086 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual result do_in(_Statype &_State, const _Byte *
#line 1087 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First1, const _Byte *_Last1, const _Byte *&_Mid1, _Elem *
#line 1088 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Elem *_Last2, _Elem *&_Mid2) const 
#line 1089 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1090 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
unsigned short *_Pstate = (unsigned short *)(&_State); 
#line 1091 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mid1 = _First1; 
#line 1092 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mid2 = _First2; 
#line 1094 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; (_Mid1 != _Last1) && (_Mid2 != _Last2);) { 
#line 1095 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1096 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
unsigned char _By = (unsigned char)(*_Mid1); 
#line 1097 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
unsigned long _Ch; 
#line 1098 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int _Nextra, _Nskip; 
#line 1100 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((*_Pstate) <= 1) { 
#line 1101 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; } else { 
#line 1102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_By < 128) || (192 <= _By)) { 
#line 1103 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Mybase::error; } else 
#line 1105 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1106 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
++_Mid1; 
#line 1107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*(_Mid2++)) = ((_Elem)((*_Pstate) | (_By & 63))); 
#line 1108 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_Pstate) = (1); 
#line 1109 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
continue; 
#line 1110 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  }  
#line 1112 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_By < 128) { 
#line 1113 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Ch = _By), (_Nextra = 0); } else { 
#line 1114 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_By < 192) 
#line 1115 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1116 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
++_Mid1; 
#line 1117 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Mybase::error; 
#line 1118 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} else { 
#line 1119 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_By < 224) { 
#line 1120 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Ch = (_By & 31)), (_Nextra = 1); } else { 
#line 1121 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_By < 240) { 
#line 1122 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Ch = (_By & 15)), (_Nextra = 2); } else { 
#line 1123 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_By < 248) { 
#line 1124 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Ch = (_By & 7)), (_Nextra = 3); } else { 
#line 1126 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Ch = (_By & 3)), (_Nextra = ((_By < 252) ? 4 : 5)); }  }  }  }  }  
#line 1128 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Nskip = ((_Nextra < 3) ? 0 : 1); 
#line 1129 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First1 = _Mid1; 
#line 1131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Nextra == 0) { 
#line 1132 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
++_Mid1; } else { 
#line 1133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Last1 - _Mid1) < ((_Nextra + 1) - _Nskip)) { 
#line 1134 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
break; } else { 
#line 1136 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (++_Mid1; _Nskip < _Nextra; (--_Nextra), (++_Mid1)) { 
#line 1137 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (((_By = ((unsigned char)(*_Mid1))) < 128) || (192 <= _By)) { 
#line 1138 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Mybase::error; } else { 
#line 1140 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Ch = ((_Ch << 6) | (_By & 63)); }  }  }  }  
#line 1141 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (0 < _Nskip) { 
#line 1142 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Ch <<= 6; }  
#line 1144 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((((_Maxcode) < (1114111)) ? _Maxcode : (1114111)) < _Ch) { 
#line 1145 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Mybase::error; } else { 
#line 1146 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((65535) < _Ch) 
#line 1147 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1148 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
unsigned short _Ch0 = (unsigned short)((55296) | ((_Ch >> 10) - (64))); 
#line 1151 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*(_Mid2++)) = ((_Elem)_Ch0); 
#line 1152 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_Pstate) = ((unsigned short)((56320) | (_Ch & (1023)))); 
#line 1153 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
continue; 
#line 1154 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  }  
#line 1156 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Nskip == 0) { 
#line 1157 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; } else { 
#line 1158 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Mid1 == _Last1) 
#line 1159 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1160 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mid1 = _First1; 
#line 1161 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
break; 
#line 1162 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} else { 
#line 1163 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (((_By = ((unsigned char)(*(_Mid1++)))) < 128) || (192 <= _By)) { 
#line 1164 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Mybase::error; } else { 
#line 1166 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Ch |= (_By & 63); }  }  }  
#line 1168 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((*_Pstate) == 0) 
#line 1169 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1170 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_Pstate) = (1); 
#line 1172 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((((_Mode) & (_Consume_header)) != 0) && (_Ch == (65279))) 
#line 1173 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1174 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
result _Ans = this->do_in(_State, _Mid1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1177 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Ans == (_Mybase::partial)) 
#line 1178 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1179 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_Pstate) = (0); 
#line 1180 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mid1 = _First1; 
#line 1181 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 1182 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Ans; 
#line 1183 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 1184 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 1186 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*(_Mid2++)) = ((_Elem)_Ch); 
#line 1187 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} }  
#line 1189 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (_First1 == _Mid1) ? _Mybase::partial : _Mybase::ok; 
#line 1190 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1192 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual result do_out(_Statype &_State, const _Elem *
#line 1193 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First1, const _Elem *_Last1, const _Elem *&_Mid1, _Byte *
#line 1194 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1195 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1196 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
unsigned short *_Pstate = (unsigned short *)(&_State); 
#line 1197 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mid1 = _First1; 
#line 1198 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mid2 = _First2; 
#line 1200 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; (_Mid1 != _Last1) && (_Mid2 != _Last2);) 
#line 1201 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1202 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
unsigned long _Ch; 
#line 1203 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
unsigned short _Ch1 = (unsigned short)(*_Mid1); 
#line 1204 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
bool _Save = false; 
#line 1206 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (1 < (*_Pstate)) 
#line 1207 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1208 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Ch1 < 56320) || (57344 <= _Ch1)) { 
#line 1209 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Mybase::error; }  
#line 1210 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Ch = (((*_Pstate) << 10) | (_Ch1 - 56320)); 
#line 1211 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} else { 
#line 1212 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((55296 <= _Ch1) && (_Ch1 < 56320)) 
#line 1213 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1214 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Ch = (((_Ch1 - 55296) + 64) << 10); 
#line 1215 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Save = true; 
#line 1216 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} else { 
#line 1218 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Ch = _Ch1; }  }  
#line 1220 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Byte _By; 
#line 1221 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int _Nextra; 
#line 1223 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Ch < (128)) { 
#line 1224 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_By = ((_Byte)_Ch)), (_Nextra = 0); } else { 
#line 1225 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Ch < (2048)) { 
#line 1226 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_By = ((_Byte)((192) | (_Ch >> 6)))), (_Nextra = 1); } else { 
#line 1227 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Ch < (65536)) { 
#line 1228 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_By = ((_Byte)((224) | (_Ch >> 12)))), (_Nextra = 2); } else { 
#line 1230 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_By = ((_Byte)((240) | (_Ch >> 18)))), (_Nextra = 3); }  }  }  
#line 1232 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int _Nput = (_Nextra < 3) ? _Nextra + 1 : (_Save ? 1 : 3); 
#line 1234 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Last2 - _Mid2) < _Nput) { 
#line 1235 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
break; } else { 
#line 1236 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (((*_Pstate) != 0) || (((_Mode) & (_Generate_header)) == 0)) { 
#line 1237 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; } else { 
#line 1238 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Last2 - _Mid2) < (3 + _Nput)) { 
#line 1239 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
break; } else 
#line 1241 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1242 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*(_Mid2++)) = ((_Byte)((unsigned char)239)); 
#line 1243 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*(_Mid2++)) = ((_Byte)((unsigned char)187)); 
#line 1244 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*(_Mid2++)) = ((_Byte)((unsigned char)191)); 
#line 1245 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  }  }  
#line 1247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
++_Mid1; 
#line 1248 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Save || (_Nextra < 3)) 
#line 1249 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1250 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*(_Mid2++)) = _By; 
#line 1251 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
--_Nput; 
#line 1252 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 1253 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; 0 < _Nput; --_Nput) { 
#line 1254 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*(_Mid2++)) = ((_Byte)(((_Ch >> (6 * (--_Nextra))) & (63)) | (128))); }  
#line 1256 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_Pstate) = ((unsigned short)(_Save ? _Ch >> 10 : (1))); 
#line 1257 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 1259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (_First1 == _Mid1) ? _Mybase::partial : _Mybase::ok; 
#line 1260 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1262 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual result do_unshift(_Statype &_State, _Byte *
#line 1263 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Byte *, _Byte *&_Mid2) const 
#line 1264 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1265 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
unsigned short *_Pstate = (unsigned short *)(&_State); 
#line 1266 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mid2 = _First2; 
#line 1268 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (1 < (*_Pstate)) ? _Mybase::error : _Mybase::ok; 
#line 1270 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1272 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual int do_length(_Statype &_State, const _Byte *_First1, const _Byte *
#line 1273 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last1, size_t _Count) const 
#line 1274 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1275 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
size_t _Wchars = (0); 
#line 1276 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Statype _Mystate = _State; 
#line 1278 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; (_Wchars < _Count) && (_First1 != _Last1);) 
#line 1279 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1280 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Byte *_Mid1; 
#line 1281 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Elem *_Mid2; 
#line 1282 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Elem _Ch; 
#line 1284 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
switch (this->do_in(_Mystate, _First1, _Last1, _Mid1, &_Ch, (&_Ch) + 1, _Mid2)) 
#line 1286 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1287 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
case _Mybase::noconv:  
#line 1288 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (int)(_Wchars + (_Last1 - _First1)); 
#line 1290 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
case _Mybase::ok:  
#line 1291 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Mid2 == ((&_Ch) + 1)) { 
#line 1292 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
++_Wchars; }  
#line 1293 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First1 = _Mid1; 
#line 1294 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
break; 
#line 1296 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
default:  
#line 1297 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (int)_Wchars; 
#line 1298 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 1299 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 1301 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (int)_Wchars; 
#line 1302 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1304 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual bool do_always_noconv() const noexcept 
#line 1305 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1306 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return false; 
#line 1307 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1309 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual int do_max_length() const noexcept 
#line 1310 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1311 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (((_Mode) & (_Consume_header)) != 0) ? 9 : ((((_Mode) & (_Generate_header)) != 0) ? 7 : 6); 
#line 1314 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1316 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual int do_encoding() const noexcept 
#line 1317 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1318 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return 0; 
#line 1319 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1322 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
private: unsigned long _Maxcode; 
#line 1323 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Codecvt_mode _Mode; 
#line 1324 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}; 
#line 1328 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template<> class __declspec(dllimport) codecvt< char32_t, char, _Mbstatet>  : public codecvt_base { 
#line 1332 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
public: typedef std::codecvt< char32_t, char, _Mbstatet>  _Mybase; 
#line 1333 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef char32_t _Elem; 
#line 1334 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef char _Byte; 
#line 1335 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef _Mbstatet _Statype; 
#line 1336 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef _Elem intern_type; 
#line 1337 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef _Byte extern_type; 
#line 1338 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef _Statype state_type; 
#line 1340 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
result in(_Statype &_State, const _Byte *
#line 1341 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First1, const _Byte *_Last1, const _Byte *&_Mid1, _Elem *
#line 1342 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Elem *_Last2, _Elem *&_Mid2) const 
#line 1343 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1344 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_in(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1346 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1348 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
result out(_Statype &_State, const _Elem *
#line 1349 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First1, const _Elem *_Last1, const _Elem *&_Mid1, _Byte *
#line 1350 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1351 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1352 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_out(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1354 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1356 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
result unshift(_Statype &_State, _Byte *
#line 1357 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1358 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1359 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_unshift(_State, _First2, _Last2, _Mid2); 
#line 1361 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1363 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int length(_Statype &_State, const _Byte *_First1, const _Byte *
#line 1364 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last1, size_t _Count) const 
#line 1365 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1366 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_length(_State, _First1, _Last1, _Count); 
#line 1367 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1369 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static locale::id id; 
#line 1371 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
explicit codecvt(size_t _Refs = 0) : codecvt_base(_Refs), _Maxcode((4294967295U)), _Mode(_Consume_header) 
#line 1373 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1374 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ _Locinfo _Lobj; 
#line 1375 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
this->_Init(_Lobj); 
#line 1376 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1377 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1379 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
codecvt(const _Locinfo &_Lobj, size_t _Refs = 0) : codecvt_base(_Refs), _Maxcode((4294967295U)), _Mode(_Consume_header) 
#line 1381 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1382 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
this->_Init(_Lobj); 
#line 1383 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1385 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
codecvt(const _Locinfo &_Lobj, unsigned long _Maxcode_arg, _Codecvt_mode 
#line 1386 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mode_arg, size_t _Refs = 0) : codecvt_base(_Refs), _Maxcode(_Maxcode_arg), _Mode(_Mode_arg) 
#line 1388 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1389 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
this->_Init(_Lobj); 
#line 1390 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1392 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *
#line 1393 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Ploc = 0) 
#line 1394 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1395 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Ppf != (0)) && ((*_Ppf) == (0))) { 
#line 1396 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_Ppf) = (new std::codecvt< char32_t, char, _Mbstatet> (((_Locinfo)(_Ploc->c_str())))); }  
#line 1398 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return 2; 
#line 1399 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1402 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
protected: virtual ~codecvt() noexcept 
#line 1403 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1404 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1406 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
void _Init(const _Locinfo &) 
#line 1407 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1408 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1410 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual result do_in(_Statype &_State, const _Byte *
#line 1411 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First1, const _Byte *_Last1, const _Byte *&_Mid1, _Elem *
#line 1412 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Elem *_Last2, _Elem *&_Mid2) const 
#line 1413 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1414 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
char *_Pstate = (char *)(&_State); 
#line 1415 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mid1 = _First1; 
#line 1416 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mid2 = _First2; 
#line 1418 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; (_Mid1 != _Last1) && (_Mid2 != _Last2);) 
#line 1419 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1420 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
unsigned char _By = (unsigned char)(*_Mid1); 
#line 1421 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
unsigned long _Ch; 
#line 1422 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int _Nextra; 
#line 1424 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_By < 128) { 
#line 1425 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Ch = _By), (_Nextra = 0); } else { 
#line 1426 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_By < 192) 
#line 1427 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1428 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
++_Mid1; 
#line 1429 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Mybase::error; 
#line 1430 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} else { 
#line 1431 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_By < 224) { 
#line 1432 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Ch = (_By & 31)), (_Nextra = 1); } else { 
#line 1433 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_By < 240) { 
#line 1434 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Ch = (_By & 15)), (_Nextra = 2); } else { 
#line 1435 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_By < 248) { 
#line 1436 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Ch = (_By & 7)), (_Nextra = 3); } else { 
#line 1438 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Ch = (_By & 3)), (_Nextra = ((_By < 252) ? 4 : 5)); }  }  }  }  }  
#line 1440 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Nextra == 0) { 
#line 1441 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
++_Mid1; } else { 
#line 1442 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Last1 - _Mid1) < (_Nextra + 1)) { 
#line 1443 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
break; } else { 
#line 1445 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (++_Mid1; 0 < _Nextra; (--_Nextra), (++_Mid1)) { 
#line 1446 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (((_By = ((unsigned char)(*_Mid1))) < 128) || (192 <= _By)) { 
#line 1447 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Mybase::error; } else { 
#line 1449 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Ch = ((_Ch << 6) | (_By & 63)); }  }  }  }  
#line 1451 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((*_Pstate) == 0) 
#line 1452 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1453 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_Pstate) = (1); 
#line 1455 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((((_Mode) & (_Consume_header)) != 0) && (_Ch == (65279))) 
#line 1456 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1457 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
result _Ans = this->do_in(_State, _Mid1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1460 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Ans == (_Mybase::partial)) 
#line 1461 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1462 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_Pstate) = (0); 
#line 1463 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mid1 = _First1; 
#line 1464 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 1465 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Ans; 
#line 1466 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 1467 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 1469 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Maxcode) < _Ch) { 
#line 1470 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Mybase::error; }  
#line 1471 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*(_Mid2++)) = ((_Elem)_Ch); 
#line 1472 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 1474 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (_First1 == _Mid1) ? _Mybase::partial : _Mybase::ok; 
#line 1475 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1477 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual result do_out(_Statype &_State, const _Elem *
#line 1478 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First1, const _Elem *_Last1, const _Elem *&_Mid1, _Byte *
#line 1479 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1480 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1481 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
char *_Pstate = (char *)(&_State); 
#line 1482 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mid1 = _First1; 
#line 1483 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mid2 = _First2; 
#line 1485 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; (_Mid1 != _Last1) && (_Mid2 != _Last2);) 
#line 1486 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1487 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Byte _By; 
#line 1488 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int _Nextra; 
#line 1489 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
unsigned long _Ch = (unsigned long)(*_Mid1); 
#line 1491 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Maxcode) < _Ch) { 
#line 1492 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Mybase::error; }  
#line 1494 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Ch < (128)) { 
#line 1495 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_By = ((_Byte)_Ch)), (_Nextra = 0); } else { 
#line 1496 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Ch < (2048)) { 
#line 1497 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_By = ((_Byte)((192) | (_Ch >> 6)))), (_Nextra = 1); } else { 
#line 1498 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Ch < (65536)) { 
#line 1499 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_By = ((_Byte)((224) | (_Ch >> 12)))), (_Nextra = 2); } else { 
#line 1500 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Ch < (2097152)) { 
#line 1501 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_By = ((_Byte)((240) | (_Ch >> 18)))), (_Nextra = 3); } else { 
#line 1502 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Ch < (67108864)) { 
#line 1503 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_By = ((_Byte)((248) | (_Ch >> 24)))), (_Nextra = 4); } else { 
#line 1505 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_By = ((_Byte)((252) | ((_Ch >> 30) & (3))))), (_Nextra = 5); }  }  }  }  }  
#line 1507 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((*_Pstate) == 0) 
#line 1508 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1509 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_Pstate) = (1); 
#line 1510 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (((_Mode) & (_Generate_header)) == 0) { 
#line 1511 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; } else { 
#line 1512 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Last2 - _Mid2) < ((3 + 1) + _Nextra)) { 
#line 1513 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Mybase::partial; } else 
#line 1515 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1516 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*(_Mid2++)) = ((_Byte)((unsigned char)239)); 
#line 1517 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*(_Mid2++)) = ((_Byte)((unsigned char)187)); 
#line 1518 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*(_Mid2++)) = ((_Byte)((unsigned char)191)); 
#line 1519 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  }  
#line 1520 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 1522 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Last2 - _Mid2) < (1 + _Nextra)) { 
#line 1523 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
break; }  
#line 1525 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
++_Mid1; 
#line 1526 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for ((*(_Mid2++)) = _By; 0 < _Nextra;) { 
#line 1527 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*(_Mid2++)) = ((_Byte)(((_Ch >> (6 * (--_Nextra))) & (63)) | (128))); }  
#line 1528 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 1529 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (_First1 == _Mid1) ? _Mybase::partial : _Mybase::ok; 
#line 1530 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1532 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual result do_unshift(_Statype &, _Byte *
#line 1533 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Byte *, _Byte *&_Mid2) const 
#line 1534 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1535 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mid2 = _First2; 
#line 1536 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Mybase::ok; 
#line 1537 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1539 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual int do_length(_Statype &_State, const _Byte *_First1, const _Byte *
#line 1540 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last1, size_t _Count) const 
#line 1541 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1542 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int _Wchars = 0; 
#line 1543 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Statype _Mystate = _State; 
#line 1545 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; (((size_t)_Wchars) < _Count) && (_First1 != _Last1);) 
#line 1546 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1547 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Byte *_Mid1; 
#line 1548 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Elem *_Mid2; 
#line 1549 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Elem _Ch; 
#line 1551 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
switch (this->do_in(_Mystate, _First1, _Last1, _Mid1, &_Ch, (&_Ch) + 1, _Mid2)) 
#line 1553 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1554 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
case _Mybase::noconv:  
#line 1555 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (int)(_Wchars + ((int)(_Last1 - _First1))); 
#line 1557 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
case _Mybase::ok:  
#line 1558 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Mid2 == ((&_Ch) + 1)) { 
#line 1559 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
++_Wchars; }  
#line 1560 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First1 = _Mid1; 
#line 1561 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
break; 
#line 1563 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
default:  
#line 1564 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (int)_Wchars; 
#line 1565 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 1566 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 1568 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (int)_Wchars; 
#line 1569 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1571 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual bool do_always_noconv() const noexcept 
#line 1572 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1573 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return false; 
#line 1574 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1576 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual int do_max_length() const noexcept 
#line 1577 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1578 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (((_Mode) & ((_Consume_header) | (_Generate_header))) != 0) ? 9 : 6; 
#line 1580 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1582 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual int do_encoding() const noexcept 
#line 1583 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1584 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (((_Mode) & ((_Consume_header) | (_Generate_header))) != 0) ? -1 : 0; 
#line 1586 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1589 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
private: unsigned long _Maxcode; 
#line 1590 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Codecvt_mode _Mode; 
#line 1591 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}; 
#line 1595 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template<> class __declspec(dllimport) codecvt< __wchar_t, char, _Mbstatet>  : public codecvt_base { 
#line 1599 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
public: typedef __wchar_t _Elem; 
#line 1600 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef char _Byte; 
#line 1601 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef _Mbstatet _Statype; 
#line 1602 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef _Elem intern_type; 
#line 1603 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef _Byte extern_type; 
#line 1604 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef _Statype state_type; 
#line 1606 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
result in(_Statype &_State, const _Byte *
#line 1607 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First1, const _Byte *_Last1, const _Byte *&_Mid1, _Elem *
#line 1608 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Elem *_Last2, _Elem *&_Mid2) const 
#line 1609 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1610 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_in(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1612 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1614 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
result out(_Statype &_State, const _Elem *
#line 1615 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First1, const _Elem *_Last1, const _Elem *&_Mid1, _Byte *
#line 1616 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1617 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1618 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_out(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1620 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1622 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
result unshift(_Statype &_State, _Byte *
#line 1623 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1624 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1625 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_unshift(_State, _First2, _Last2, _Mid2); 
#line 1627 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1629 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int length(_Statype &_State, const _Byte *_First1, const _Byte *
#line 1630 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last1, size_t _Count) const 
#line 1631 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1632 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_length(_State, _First1, _Last1, _Count); 
#line 1633 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1635 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static locale::id id; 
#line 1637 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
explicit codecvt(size_t _Refs = 0) : codecvt_base(_Refs) 
#line 1639 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1640 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ _Locinfo _Lobj; 
#line 1641 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
this->_Init(_Lobj); 
#line 1642 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1643 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1645 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
codecvt(const _Locinfo &_Lobj, size_t _Refs = 0) : codecvt_base(_Refs) 
#line 1647 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1648 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
this->_Init(_Lobj); 
#line 1649 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1651 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *
#line 1652 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Ploc = 0) 
#line 1653 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1654 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Ppf != (0)) && ((*_Ppf) == (0))) { 
#line 1655 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_Ppf) = (new std::codecvt< __wchar_t, char, _Mbstatet> (((_Locinfo)(_Ploc->c_str())))); }  
#line 1657 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return 2; 
#line 1658 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1661 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
protected: virtual ~codecvt() noexcept 
#line 1662 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1663 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1665 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
void _Init(const _Locinfo &_Lobj) 
#line 1666 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1667 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Cvt) = _Lobj._Getcvt(); 
#line 1668 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1670 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual result do_in(_Statype &_State, const _Byte *
#line 1671 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First1, const _Byte *_Last1, const _Byte *&_Mid1, _Elem *
#line 1672 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Elem *_Last2, _Elem *&_Mid2) const 
#line 1673 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1674 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; 
#line 1675 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; 
#line 1676 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Mid1 = _First1), (_Mid2 = _First2); 
#line 1677 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
result _Ans = (_Mid1 == _Last1) ? ok : partial; 
#line 1678 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int _Bytes; 
#line 1680 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
while ((_Mid1 != _Last1) && (_Mid2 != _Last2)) { 
#line 1681 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
switch (_Bytes = _Mbrtowc(_Mid2, _Mid1, _Last1 - _Mid1, &_State, &(_Cvt))) 
#line 1683 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1684 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
case -2:  
#line 1685 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mid1 = _Last1; 
#line 1686 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Ans; 
#line 1688 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
case -1:  
#line 1689 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return error; 
#line 1691 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
case 0:  
#line 1692 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((*_Mid2) == ((_Elem)0)) { 
#line 1693 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Bytes = (((int)::strlen(_Mid1)) + 1); }  
#line 1696 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
default:  
#line 1697 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Bytes == (-3)) { 
#line 1698 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Bytes = 0; }  
#line 1699 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mid1 += _Bytes; 
#line 1700 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
++_Mid2; 
#line 1701 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Ans = (ok); 
#line 1702 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  }  
#line 1703 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Ans; 
#line 1704 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1706 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual result do_out(_Statype &_State, const _Elem *
#line 1707 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First1, const _Elem *_Last1, const _Elem *&_Mid1, _Byte *
#line 1708 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1709 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1710 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; 
#line 1711 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; 
#line 1712 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Mid1 = _First1), (_Mid2 = _First2); 
#line 1713 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int _Bytes; 
#line 1715 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
while ((_Mid1 != _Last1) && (_Mid2 != _Last2)) { 
#line 1716 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (((int)5) <= (_Last2 - _Mid2)) { 
#line 1717 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1, &_State, &(_Cvt))) < 0) { 
#line 1719 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return error; } else { 
#line 1721 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(++_Mid1), (_Mid2 += _Bytes); }  } else 
#line 1723 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1724 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Byte _Buf[5]; 
#line 1725 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Statype _Stsave = _State; 
#line 1727 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Bytes = _Wcrtomb(_Buf, *_Mid1, &_State, &(_Cvt))) < 0) { 
#line 1729 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return error; } else { 
#line 1730 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Last2 - _Mid2) < _Bytes) 
#line 1731 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1732 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_State = _Stsave; 
#line 1733 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
break; 
#line 1734 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} else 
#line 1736 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1737 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
::memcpy(_Mid2, _Buf, _Bytes); 
#line 1738 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(++_Mid1), (_Mid2 += _Bytes); 
#line 1739 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  }  
#line 1740 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  }  
#line 1741 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (_Mid1 == _Last1) ? ok : partial; 
#line 1742 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1744 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual result do_unshift(_Statype &_State, _Byte *
#line 1745 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1746 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1747 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; 
#line 1748 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mid2 = _First2; 
#line 1749 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
result _Ans = (ok); 
#line 1750 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int _Bytes; 
#line 1751 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Byte _Buf[5]; 
#line 1752 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Statype _Stsave = _State; 
#line 1754 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Bytes = _Wcrtomb(_Buf, L'\x0', &_State, &(_Cvt))) <= 0) { 
#line 1755 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Ans = (error); } else { 
#line 1756 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Last2 - _Mid2) < (--_Bytes)) 
#line 1757 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1758 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_State = _Stsave; 
#line 1759 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Ans = (partial); 
#line 1760 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} else { 
#line 1761 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (0 < _Bytes) 
#line 1762 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1763 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
::memcpy(_Mid2, _Buf, _Bytes); 
#line 1764 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mid2 += _Bytes; 
#line 1765 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  }  }  
#line 1766 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Ans; 
#line 1767 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1769 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual int do_length(_Statype &_State, const _Byte *_First1, const _Byte *
#line 1770 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last1, size_t _Count) const 
#line 1771 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1772 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; 
#line 1773 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int _Wchars; 
#line 1774 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Byte *_Mid1; 
#line 1775 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Statype _Mystate = _State; 
#line 1777 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for ((_Wchars = 0), (_Mid1 = _First1); (((size_t)_Wchars) < _Count) && (_Mid1 != _Last1);) 
#line 1779 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1780 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int _Bytes; 
#line 1781 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Elem _Ch; 
#line 1783 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
switch (_Bytes = _Mbrtowc(&_Ch, _Mid1, _Last1 - _Mid1, &_Mystate, &(_Cvt))) 
#line 1785 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1786 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
case -2:  
#line 1787 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Wchars; 
#line 1789 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
case -1:  
#line 1790 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Wchars; 
#line 1792 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
case 0:  
#line 1793 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Ch == ((_Elem)0)) { 
#line 1794 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Bytes = (((int)::strlen(_Mid1)) + 1); }  
#line 1797 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
default:  
#line 1798 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Bytes == (-3)) { 
#line 1799 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Bytes = 0; }  
#line 1800 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mid1 += _Bytes; 
#line 1801 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
++_Wchars; 
#line 1802 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 1803 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 1804 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Wchars; 
#line 1805 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1807 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual bool do_always_noconv() const noexcept 
#line 1808 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1809 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return false; 
#line 1810 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1812 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual int do_max_length() const noexcept 
#line 1813 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1814 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return 5; 
#line 1815 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1817 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual int do_encoding() const noexcept 
#line 1818 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1819 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return 0; 
#line 1820 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1823 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
private: _Locinfo::_Cvtvec _Cvt; 
#line 1824 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}; 
#line 1829 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template<> class __declspec(dllimport) codecvt< unsigned short, char, _Mbstatet>  : public codecvt_base { 
#line 1833 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
public: typedef unsigned short _Elem; 
#line 1834 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef char _Byte; 
#line 1835 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef _Mbstatet _Statype; 
#line 1836 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef _Elem intern_type; 
#line 1837 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef _Byte extern_type; 
#line 1838 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef _Statype state_type; 
#line 1840 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
result in(_Statype &_State, const _Byte *
#line 1841 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First1, const _Byte *_Last1, const _Byte *&_Mid1, _Elem *
#line 1842 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Elem *_Last2, _Elem *&_Mid2) const 
#line 1843 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1844 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_in(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1846 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1848 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
result out(_Statype &_State, const _Elem *
#line 1849 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First1, const _Elem *_Last1, const _Elem *&_Mid1, _Byte *
#line 1850 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1851 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1852 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_out(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1854 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1856 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
result unshift(_Statype &_State, _Byte *
#line 1857 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1858 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1859 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_unshift(_State, _First2, _Last2, _Mid2); 
#line 1861 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1863 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int length(_Statype &_State, const _Byte *_First1, const _Byte *
#line 1864 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last1, size_t _Count) const 
#line 1865 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1866 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_length(_State, _First1, _Last1, _Count); 
#line 1867 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1869 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static locale::id id; 
#line 1871 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
explicit codecvt(size_t _Refs = 0) : codecvt_base(_Refs) 
#line 1873 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1874 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ _Locinfo _Lobj; 
#line 1875 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
this->_Init(_Lobj); 
#line 1876 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1877 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1879 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
codecvt(const _Locinfo &_Lobj, size_t _Refs = 0) : codecvt_base(_Refs) 
#line 1881 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1882 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
this->_Init(_Lobj); 
#line 1883 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1885 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *
#line 1886 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Ploc = 0) 
#line 1887 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1888 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Ppf != (0)) && ((*_Ppf) == (0))) { 
#line 1889 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_Ppf) = (new std::codecvt< unsigned short, char, _Mbstatet> (((_Locinfo)(_Ploc->c_str())))); }  
#line 1891 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return 2; 
#line 1892 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1895 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
protected: virtual ~codecvt() noexcept 
#line 1896 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1897 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1899 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
void _Init(const _Locinfo &_Lobj) 
#line 1900 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1901 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Cvt) = _Lobj._Getcvt(); 
#line 1902 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1904 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual result do_in(_Statype &_State, const _Byte *
#line 1905 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First1, const _Byte *_Last1, const _Byte *&_Mid1, _Elem *
#line 1906 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Elem *_Last2, _Elem *&_Mid2) const 
#line 1907 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1908 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; 
#line 1909 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; 
#line 1910 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Mid1 = _First1), (_Mid2 = _First2); 
#line 1911 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
result _Ans = (_Mid1 == _Last1) ? ok : partial; 
#line 1912 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int _Bytes; 
#line 1914 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
while ((_Mid1 != _Last1) && (_Mid2 != _Last2)) { 
#line 1915 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
switch (_Bytes = _Mbrtowc((__wchar_t *)_Mid2, _Mid1, _Last1 - _Mid1, &_State, &(_Cvt))) 
#line 1917 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1918 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
case -2:  
#line 1919 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mid1 = _Last1; 
#line 1920 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Ans; 
#line 1922 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
case -1:  
#line 1923 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return error; 
#line 1925 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
case 0:  
#line 1926 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((*_Mid2) == ((_Elem)0)) { 
#line 1927 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Bytes = (((int)::strlen(_Mid1)) + 1); }  
#line 1930 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
default:  
#line 1931 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Bytes == (-3)) { 
#line 1932 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Bytes = 0; }  
#line 1933 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mid1 += _Bytes; 
#line 1934 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
++_Mid2; 
#line 1935 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Ans = (ok); 
#line 1936 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  }  
#line 1937 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Ans; 
#line 1938 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1940 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual result do_out(_Statype &_State, const _Elem *
#line 1941 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First1, const _Elem *_Last1, const _Elem *&_Mid1, _Byte *
#line 1942 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1943 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1944 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; 
#line 1945 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; 
#line 1946 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Mid1 = _First1), (_Mid2 = _First2); 
#line 1947 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int _Bytes; 
#line 1949 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
while ((_Mid1 != _Last1) && (_Mid2 != _Last2)) { 
#line 1950 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (((int)5) <= (_Last2 - _Mid2)) { 
#line 1951 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1, &_State, &(_Cvt))) < 0) { 
#line 1953 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return error; } else { 
#line 1955 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(++_Mid1), (_Mid2 += _Bytes); }  } else 
#line 1957 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1958 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Byte _Buf[5]; 
#line 1959 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Statype _Stsave = _State; 
#line 1961 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Bytes = _Wcrtomb(_Buf, *_Mid1, &_State, &(_Cvt))) < 0) { 
#line 1963 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return error; } else { 
#line 1964 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Last2 - _Mid2) < _Bytes) 
#line 1965 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1966 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_State = _Stsave; 
#line 1967 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
break; 
#line 1968 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} else 
#line 1970 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1971 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
::memcpy(_Mid2, _Buf, _Bytes); 
#line 1972 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(++_Mid1), (_Mid2 += _Bytes); 
#line 1973 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  }  
#line 1974 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  }  
#line 1975 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (_Mid1 == _Last1) ? ok : partial; 
#line 1976 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 1978 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual result do_unshift(_Statype &_State, _Byte *
#line 1979 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1980 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1981 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; 
#line 1982 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mid2 = _First2; 
#line 1983 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
result _Ans = (ok); 
#line 1984 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int _Bytes; 
#line 1985 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Byte _Buf[5]; 
#line 1986 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Statype _Stsave = _State; 
#line 1988 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Bytes = _Wcrtomb(_Buf, L'\x0', &_State, &(_Cvt))) <= 0) { 
#line 1989 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Ans = (error); } else { 
#line 1990 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Last2 - _Mid2) < (--_Bytes)) 
#line 1991 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1992 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_State = _Stsave; 
#line 1993 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Ans = (partial); 
#line 1994 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} else { 
#line 1995 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (0 < _Bytes) 
#line 1996 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 1997 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
::memcpy(_Mid2, _Buf, _Bytes); 
#line 1998 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mid2 += _Bytes; 
#line 1999 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  }  }  
#line 2000 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Ans; 
#line 2001 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2003 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual int do_length(_Statype &_State, const _Byte *_First1, const _Byte *
#line 2004 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last1, size_t _Count) const 
#line 2005 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2006 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; 
#line 2007 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int _Wchars; 
#line 2008 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Byte *_Mid1; 
#line 2009 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Statype _Mystate = _State; 
#line 2011 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for ((_Wchars = 0), (_Mid1 = _First1); (((size_t)_Wchars) < _Count) && (_Mid1 != _Last1);) 
#line 2013 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2014 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
int _Bytes; 
#line 2015 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Elem _Ch; 
#line 2017 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
switch (_Bytes = _Mbrtowc((__wchar_t *)(&_Ch), _Mid1, _Last1 - _Mid1, &_Mystate, &(_Cvt))) 
#line 2019 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2020 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
case -2:  
#line 2021 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Wchars; 
#line 2023 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
case -1:  
#line 2024 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Wchars; 
#line 2026 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
case 0:  
#line 2027 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Ch == ((_Elem)0)) { 
#line 2028 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Bytes = (((int)::strlen(_Mid1)) + 1); }  
#line 2031 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
default:  
#line 2032 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Bytes == (-3)) { 
#line 2033 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Bytes = 0; }  
#line 2034 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Mid1 += _Bytes; 
#line 2035 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
++_Wchars; 
#line 2036 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 2037 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 2038 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Wchars; 
#line 2039 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2041 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual bool do_always_noconv() const noexcept 
#line 2042 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2043 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return false; 
#line 2044 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2046 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual int do_max_length() const noexcept 
#line 2047 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2048 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return 5; 
#line 2049 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2051 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual int do_encoding() const noexcept 
#line 2052 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2053 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return 0; 
#line 2054 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2057 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
private: _Locinfo::_Cvtvec _Cvt; 
#line 2058 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}; 
#line 2062 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template < class _Elem,
 class _Byte,
 class _Statype >
 class codecvt_byname
  : public codecvt < _Elem, _Byte, _Statype >
 {
public :
 explicit codecvt_byname ( const char * _Locname, size_t _Refs = 0 )
  : codecvt < _Elem, _Byte, _Statype > ( _Locinfo ( _Locname ), _Refs )
  {
  }

 explicit codecvt_byname ( const string & _Str, size_t _Refs = 0 )
  : codecvt < _Elem, _Byte, _Statype > ( _Locinfo ( _Str . c_str ( ) ), _Refs )
  {
  }

protected :
 virtual ~ codecvt_byname ( ) noexcept
  {
  }
 };
#line 2086 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
#pragma warning(push)
#pragma warning(disable: 4275)
#line 2089 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
struct __declspec(dllimport) ctype_base : public locale::facet { 
#line 2093 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
enum { 
#line 2094 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
alnum = 263, alpha = 259, 
#line 2095 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
cntrl = 32, digit = 4, graph = 279, 
#line 2096 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
lower = 2, print = 471, 
#line 2097 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
punct = 16, space = 72, upper = 1, 
#line 2098 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
xdigit = 128, blank = 72}; 
#line 2099 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef short mask; 
#line 2101 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
ctype_base(size_t _Refs = 0) : locale::facet(_Refs) 
#line 2103 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2104 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2106 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual ~ctype_base() noexcept 
#line 2107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2108 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2109 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}; 
#line 2111 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
#pragma warning(pop)
#line 2114 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template < class _Elem >
 class ctype
  : public ctype_base
 {
public :
 typedef _Elem char_type;

 bool is ( mask _Maskval, _Elem _Ch ) const
  {
  return ( do_is ( _Maskval, _Ch ) );
  }

 const _Elem * is ( const _Elem * _First, const _Elem * _Last,
  mask * _Dest ) const
  {
  return ( do_is ( _First, _Last, _Dest ) );
  }

 const _Elem * scan_is ( mask _Maskval, const _Elem * _First,
  const _Elem * _Last ) const
  {
  return ( do_scan_is ( _Maskval, _First, _Last ) );
  }

 const _Elem * scan_not ( mask _Maskval, const _Elem * _First,
  const _Elem * _Last ) const
  {
  return ( do_scan_not ( _Maskval, _First, _Last ) );
  }

 _Elem tolower ( _Elem _Ch ) const
  {
  return ( do_tolower ( _Ch ) );
  }

 const _Elem * tolower ( _Elem * _First, const _Elem * _Last ) const
  {
  return ( do_tolower ( _First, _Last ) );
  }

 _Elem toupper ( _Elem _Ch ) const
  {
  return ( do_toupper ( _Ch ) );
  }

 const _Elem * toupper ( _Elem * _First, const _Elem * _Last ) const
  {
  return ( do_toupper ( _First, _Last ) );
  }

 _Elem widen ( char _Byte ) const
  {
  return ( do_widen ( _Byte ) );
  }

 const char * widen ( const char * _First, const char * _Last,
  _Elem * _Dest ) const
  {
  return ( do_widen ( _First, _Last, _Dest ) );
  }

 char narrow ( _Elem _Ch, char _Dflt = '\000' ) const
  {
  return ( do_narrow ( _Ch, _Dflt ) );
  }

 const _Elem * narrow ( const _Elem * _First, const _Elem * _Last,
  char _Dflt, char * _Dest ) const
  {
  return ( do_narrow ( _First, _Last, _Dflt, _Dest ) );
  }

  static locale :: id id;

 explicit ctype ( size_t _Refs = 0 )
  : ctype_base ( _Refs )
  {
  { _Locinfo _Lobj;
   _Init ( _Lobj );
  }
  }

  ctype ( const _Locinfo & _Lobj, size_t _Refs = 0 )
  : ctype_base ( _Refs )
  {
  _Init ( _Lobj );
  }

 static size_t __cdecl _Getcat ( const locale :: facet * * _Ppf = 0,
  const locale * _Ploc = 0 )
  {
  if ( _Ppf != 0 && * _Ppf == 0 )
   * _Ppf = new ctype < _Elem > (
    _Locinfo ( _Ploc -> c_str ( ) ) );
  return ( 2 );
  }

protected :
 virtual ~ ctype ( ) noexcept
  {
  if ( _Ctype . _Delfl )
   :: free ( ( void * ) _Ctype . _Table );

  :: free ( _Ctype . _LocaleName );
  }

 void _Init ( const _Locinfo & _Lobj )
  {
  _Ctype = _Lobj . _Getctype ( );
  _Cvt = _Lobj . _Getcvt ( );
  }

 virtual bool do_is ( mask _Maskval, _Elem _Ch ) const
  {
  return ( ( _Ctype . _Table [ ( unsigned char ) narrow ( _Ch ) ]
   & _Maskval ) != 0 );
  }

 virtual const _Elem * do_is ( const _Elem * _First, const _Elem * _Last,
  mask * _Dest ) const
  {
  ;
  for (; _First != _Last; ++ _First, ++ _Dest )
   * _Dest = _Ctype . _Table [ ( unsigned char ) narrow ( * _First ) ];
  return ( _First );
  }

 virtual const _Elem * do_scan_is ( mask _Maskval,
  const _Elem * _First, const _Elem * _Last ) const
  {
  ;
  for (; _First != _Last && ! is ( _Maskval, * _First ); ++ _First )
   ;
  return ( _First );
  }

 virtual const _Elem * do_scan_not ( mask _Maskval,
  const _Elem * _First, const _Elem * _Last ) const
  {
  ;
  for (; _First != _Last && is ( _Maskval, * _First ); ++ _First )
   ;
  return ( _First );
  }

 virtual _Elem do_tolower ( _Elem _Ch ) const
  {
  unsigned char _Byte = ( unsigned char ) narrow ( _Ch, '\000' );
  if ( _Byte == '\000' )
   return ( _Ch );
  else
   return ( widen ( ( char ) _Tolower ( _Byte, & _Ctype ) ) );
  }

 virtual const _Elem * do_tolower ( _Elem * _First,
  const _Elem * _Last ) const
  {
  ;
  for (; _First != _Last; ++ _First )
   {
   unsigned char _Byte = ( unsigned char ) narrow ( * _First, '\000' );
   if ( _Byte != '\000' )
    * _First = ( widen ( ( char ) _Tolower ( _Byte, & _Ctype ) ) );
   }
  return ( ( const _Elem * ) _First );
  }

 virtual _Elem do_toupper ( _Elem _Ch ) const
  {
  unsigned char _Byte = ( unsigned char ) narrow ( _Ch, '\000' );
  if ( _Byte == '\000' )
   return ( _Ch );
  else
   return ( widen ( ( char ) _Toupper ( _Byte, & _Ctype ) ) );
  }

 virtual const _Elem * do_toupper ( _Elem * _First,
  const _Elem * _Last ) const
  {
  ;
  for (; _First != _Last; ++ _First )
   {
   unsigned char _Byte = ( unsigned char ) narrow ( * _First, '\000' );
   if ( _Byte != '\000' )
    * _First = ( widen ( ( char ) _Toupper ( _Byte, & _Ctype ) ) );
   }
  return ( ( const _Elem * ) _First );
  }

 virtual _Elem do_widen ( char _Byte ) const
  {
  return ( _Maklocchr ( _Byte, ( _Elem * ) 0, _Cvt ) );
  }

 virtual const char * do_widen ( const char * _First,
  const char * _Last, _Elem * _Dest ) const
  {
  ;
  for (; _First != _Last; ++ _First, ++ _Dest )
   * _Dest = _Maklocchr ( * _First, ( _Elem * ) 0, _Cvt );
  return ( _First );
  }

 char _Donarrow ( _Elem _Ch, char _Dflt ) const
  {
  char _Byte;
  if ( _Ch == ( _Elem ) 0 )
   return ( '\000' );
  else if ( ( _Byte = _Maklocbyte ( ( _Elem ) _Ch, _Cvt ) ) == '\000' )
   return ( _Dflt );
  else
   return ( _Byte );
  }

 virtual char do_narrow ( _Elem _Ch, char _Dflt ) const
  {
  return ( _Donarrow ( _Ch, _Dflt ) );
  }

 virtual const _Elem * do_narrow ( const _Elem * _First,
  const _Elem * _Last, char _Dflt, char * _Dest ) const
  {
  ;
  for (; _First != _Last; ++ _First, ++ _Dest )
   * _Dest = _Donarrow ( * _First, _Dflt );
  return ( _First );
  }

private :
 _Locinfo :: _Ctypevec _Ctype;
 _Locinfo :: _Cvtvec _Cvt;
 };
#line 2348 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template< class _Elem> locale::id 
#line 2349 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
ctype< _Elem> ::id; 
#line 2353 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template<> class __declspec(dllimport) ctype< char>  : public ctype_base { 
#line 2356 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef std::ctype< char>  _Myt; 
#line 2359 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
public: typedef char _Elem; 
#line 2360 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef _Elem char_type; 
#line 2362 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
bool is(mask _Maskval, _Elem _Ch) const 
#line 2363 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2364 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return ((((_Ctype)._Table)[(unsigned char)_Ch]) & _Maskval) != 0; 
#line 2365 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2367 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Elem *is(const _Elem *_First, const _Elem *
#line 2368 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last, mask *_Dest) const 
#line 2369 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2370 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; 
#line 2371 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; _First != _Last; (++_First), (++_Dest)) { 
#line 2372 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_Dest) = (((_Ctype)._Table)[(unsigned char)(*_First)]); }  
#line 2373 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _First; 
#line 2374 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2376 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Elem *scan_is(mask _Maskval, const _Elem *
#line 2377 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First, const _Elem *_Last) const 
#line 2378 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2379 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; 
#line 2380 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; (_First != _Last) && (!this->is(_Maskval, *_First)); ++_First) { 
#line 2381 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; }  
#line 2382 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _First; 
#line 2383 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2385 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Elem *scan_not(mask _Maskval, const _Elem *
#line 2386 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First, const _Elem *_Last) const 
#line 2387 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2388 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; 
#line 2389 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; (_First != _Last) && this->is(_Maskval, *_First); ++_First) { 
#line 2390 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; }  
#line 2391 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _First; 
#line 2392 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2394 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Elem tolower(_Elem _Ch) const 
#line 2395 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2396 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_tolower(_Ch); 
#line 2397 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2399 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Elem *tolower(_Elem *_First, const _Elem *_Last) const 
#line 2400 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2401 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_tolower(_First, _Last); 
#line 2402 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2404 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Elem toupper(_Elem _Ch) const 
#line 2405 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2406 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_toupper(_Ch); 
#line 2407 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2409 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Elem *toupper(_Elem *_First, const _Elem *_Last) const 
#line 2410 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2411 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_toupper(_First, _Last); 
#line 2412 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2414 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Elem widen(char _Byte) const 
#line 2415 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2416 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_widen(_Byte); 
#line 2417 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2419 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Elem *widen(const char *_First, const char *_Last, _Elem *
#line 2420 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Dest) const 
#line 2421 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2422 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_widen(_First, _Last, _Dest); 
#line 2423 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2425 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Elem narrow(_Elem _Ch, char _Dflt = '\000') const 
#line 2426 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2427 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_narrow(_Ch, _Dflt); 
#line 2428 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2430 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Elem *narrow(const _Elem *_First, const _Elem *_Last, char 
#line 2431 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Dflt, char *_Dest) const 
#line 2432 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2433 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_narrow(_First, _Last, _Dflt, _Dest); 
#line 2434 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2436 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static locale::id id; 
#line 2438 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
explicit ctype(const mask *_Table = 0, bool 
#line 2439 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Deletetable = false, size_t 
#line 2440 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Refs = 0) : ctype_base(_Refs) 
#line 2442 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2443 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ _Locinfo _Lobj; 
#line 2444 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
this->_Init(_Lobj); 
#line 2445 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2447 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
this->_Tidy(); 
#line 2448 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (_Table != (0)) 
#line 2449 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2450 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
((_Ctype)._Table) = _Table; 
#line 2451 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
((_Ctype)._Delfl) = (_Deletetable ? -1 : 0); 
#line 2452 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} else 
#line 2454 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2455 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
((_Ctype)._Table) = classic_table(); 
#line 2456 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
((_Ctype)._Delfl) = 0; 
#line 2457 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}  
#line 2458 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2460 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
ctype(const _Locinfo &_Lobj, size_t _Refs = 0) : ctype_base(_Refs) 
#line 2462 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2463 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
this->_Init(_Lobj); 
#line 2464 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2466 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *
#line 2467 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Ploc = 0) 
#line 2468 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2469 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Ppf != (0)) && ((*_Ppf) == (0))) { 
#line 2470 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_Ppf) = (new std::ctype< char> (((_Locinfo)(_Ploc->c_str())))); }  
#line 2472 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return 2; 
#line 2473 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2475 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const mask *table() const noexcept 
#line 2476 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2477 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (_Ctype)._Table; 
#line 2478 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2480 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static const mask *__cdecl classic_table() noexcept 
#line 2481 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2482 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Myt &_Ctype_fac = use_facet< std::ctype< char> > (locale::classic()); 
#line 2483 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Ctype_fac.table(); 
#line 2484 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2486 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static const size_t table_size = (1 << 8); 
#line 2490 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
protected: virtual ~ctype() noexcept 
#line 2491 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2492 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
this->_Tidy(); 
#line 2493 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2495 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
void _Init(const _Locinfo &_Lobj) 
#line 2496 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2497 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Ctype) = _Lobj._Getctype(); 
#line 2498 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2500 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
void _Tidy() 
#line 2501 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2502 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (0 < ((_Ctype)._Delfl)) { 
#line 2503 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
::free((void *)((_Ctype)._Table)); } else { 
#line 2504 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if (((_Ctype)._Delfl) < 0) { 
#line 2505 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
delete [] ((_Ctype)._Table); }  }  
#line 2507 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
::free((_Ctype)._LocaleName); 
#line 2508 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2510 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual _Elem do_tolower(_Elem _Ch) const 
#line 2511 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2512 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (_Elem)_Tolower((unsigned char)_Ch, &(_Ctype)); 
#line 2513 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2515 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual const _Elem *do_tolower(_Elem *_First, const _Elem *
#line 2516 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last) const 
#line 2517 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2518 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; 
#line 2519 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; _First != _Last; ++_First) { 
#line 2520 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_First) = ((_Elem)_Tolower((unsigned char)(*_First), &(_Ctype))); }  
#line 2521 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (const _Elem *)_First; 
#line 2522 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2524 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual _Elem do_toupper(_Elem _Ch) const 
#line 2525 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2526 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (_Elem)_Toupper((unsigned char)_Ch, &(_Ctype)); 
#line 2527 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2529 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual const _Elem *do_toupper(_Elem *_First, const _Elem *
#line 2530 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last) const 
#line 2531 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2532 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; 
#line 2533 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; _First != _Last; ++_First) { 
#line 2534 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_First) = ((_Elem)_Toupper((unsigned char)(*_First), &(_Ctype))); }  
#line 2535 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (const _Elem *)_First; 
#line 2536 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2538 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual _Elem do_widen(char _Byte) const 
#line 2539 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2540 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Byte; 
#line 2541 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2543 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual const _Elem *do_widen(const char *_First, const char *
#line 2544 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last, _Elem *_Dest) const 
#line 2545 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2546 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; 
#line 2547 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
::memcpy(_Dest, _First, _Last - _First); 
#line 2548 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Last; 
#line 2549 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2551 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual _Elem do_narrow(_Elem _Ch, char) const 
#line 2552 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2553 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Ch; 
#line 2554 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2556 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual const _Elem *do_narrow(const _Elem *_First, const _Elem *
#line 2557 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last, char, char *_Dest) const 
#line 2558 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2559 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; 
#line 2560 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
::memcpy(_Dest, _First, _Last - _First); 
#line 2561 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Last; 
#line 2562 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2565 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
private: _Locinfo::_Ctypevec _Ctype; 
#line 2566 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}; 
#line 2570 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template<> class __declspec(dllimport) ctype< __wchar_t>  : public ctype_base { 
#line 2573 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef std::ctype< __wchar_t>  _Myt; 
#line 2576 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
public: typedef __wchar_t _Elem; 
#line 2577 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef _Elem char_type; 
#line 2579 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
bool is(mask _Maskval, _Elem _Ch) const 
#line 2580 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2581 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_is(_Maskval, _Ch); 
#line 2582 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2584 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Elem *is(const _Elem *_First, const _Elem *_Last, mask *
#line 2585 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Dest) const 
#line 2586 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2587 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_is(_First, _Last, _Dest); 
#line 2588 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2590 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Elem *scan_is(mask _Maskval, const _Elem *_First, const _Elem *
#line 2591 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last) const 
#line 2592 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2593 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_scan_is(_Maskval, _First, _Last); 
#line 2594 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2596 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Elem *scan_not(mask _Maskval, const _Elem *_First, const _Elem *
#line 2597 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last) const 
#line 2598 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2599 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_scan_not(_Maskval, _First, _Last); 
#line 2600 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2602 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Elem tolower(_Elem _Ch) const 
#line 2603 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2604 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_tolower(_Ch); 
#line 2605 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2607 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Elem *tolower(_Elem *_First, const _Elem *_Last) const 
#line 2608 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2609 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_tolower(_First, _Last); 
#line 2610 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2612 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Elem toupper(_Elem _Ch) const 
#line 2613 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2614 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_toupper(_Ch); 
#line 2615 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2617 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Elem *toupper(_Elem *_First, const _Elem *_Last) const 
#line 2618 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2619 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_toupper(_First, _Last); 
#line 2620 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2622 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Elem widen(char _Byte) const 
#line 2623 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2624 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_widen(_Byte); 
#line 2625 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2627 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const char *widen(const char *_First, const char *_Last, _Elem *
#line 2628 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Dest) const 
#line 2629 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2630 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_widen(_First, _Last, _Dest); 
#line 2631 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2633 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
char narrow(_Elem _Ch, char _Dflt = '\000') const 
#line 2634 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2635 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_narrow(_Ch, _Dflt); 
#line 2636 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2638 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Elem *narrow(const _Elem *_First, const _Elem *_Last, char 
#line 2639 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Dflt, char *_Dest) const 
#line 2640 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2641 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_narrow(_First, _Last, _Dflt, _Dest); 
#line 2642 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2644 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static locale::id id; 
#line 2646 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
explicit ctype(size_t _Refs = 0) : ctype_base(_Refs) 
#line 2648 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2649 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ _Locinfo _Lobj; 
#line 2650 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
this->_Init(_Lobj); 
#line 2651 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2652 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2654 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
ctype(const _Locinfo &_Lobj, size_t _Refs = 0) : ctype_base(_Refs) 
#line 2656 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2657 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
this->_Init(_Lobj); 
#line 2658 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2660 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *
#line 2661 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Ploc = 0) 
#line 2662 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2663 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Ppf != (0)) && ((*_Ppf) == (0))) { 
#line 2664 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_Ppf) = (new std::ctype< __wchar_t> (((_Locinfo)(_Ploc->c_str())))); }  
#line 2666 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return 2; 
#line 2667 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2670 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
protected: virtual ~ctype() noexcept 
#line 2671 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2672 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Ctype)._Delfl) { 
#line 2673 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
::free((void *)((_Ctype)._Table)); }  
#line 2675 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
::free((_Ctype)._LocaleName); 
#line 2676 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2678 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
void _Init(const _Locinfo &_Lobj) 
#line 2679 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2680 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Ctype) = _Lobj._Getctype(); 
#line 2681 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Cvt) = _Lobj._Getcvt(); 
#line 2682 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2684 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual bool do_is(mask _Maskval, _Elem _Ch) const 
#line 2685 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2686 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return ((::_Getwctype(_Ch, &(_Ctype))) & _Maskval) != 0; 
#line 2687 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2689 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual const _Elem *do_is(const _Elem *_First, const _Elem *
#line 2690 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last, mask *_Dest) const 
#line 2691 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2692 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; 
#line 2693 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return ::_Getwctypes(_First, _Last, _Dest, &(_Ctype)); 
#line 2694 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2696 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual const _Elem *do_scan_is(mask _Maskval, const _Elem *
#line 2697 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First, const _Elem *_Last) const 
#line 2698 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2699 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; 
#line 2700 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; (_First != _Last) && (!this->is(_Maskval, *_First)); ++_First) { 
#line 2701 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; }  
#line 2702 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _First; 
#line 2703 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2705 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual const _Elem *do_scan_not(mask _Maskval, const _Elem *
#line 2706 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First, const _Elem *_Last) const 
#line 2707 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2708 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; 
#line 2709 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; (_First != _Last) && this->is(_Maskval, *_First); ++_First) { 
#line 2710 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; }  
#line 2711 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _First; 
#line 2712 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2714 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual _Elem do_tolower(_Elem _Ch) const 
#line 2715 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2716 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Towlower(_Ch, &(_Ctype)); 
#line 2717 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2719 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual const _Elem *do_tolower(_Elem *_First, const _Elem *
#line 2720 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last) const 
#line 2721 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2722 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; 
#line 2723 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; _First != _Last; ++_First) { 
#line 2724 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_First) = _Towlower(*_First, &(_Ctype)); }  
#line 2725 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (const _Elem *)_First; 
#line 2726 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2728 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual _Elem do_toupper(_Elem _Ch) const 
#line 2729 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2730 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Towupper(_Ch, &(_Ctype)); 
#line 2731 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2733 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual const _Elem *do_toupper(_Elem *_First, const _Elem *
#line 2734 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last) const 
#line 2735 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2736 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; 
#line 2737 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; _First != _Last; ++_First) { 
#line 2738 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_First) = _Towupper(*_First, &(_Ctype)); }  
#line 2739 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (const _Elem *)_First; 
#line 2740 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2742 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Elem _Dowiden(char _Byte) const 
#line 2743 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2744 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
mbstate_t _Mbst = {}; 
#line 2745 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
__wchar_t _Wc; 
#line 2746 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst, &(_Cvt)) < 0) ? (__wchar_t)((wint_t)65535) : _Wc; 
#line 2748 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2750 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual _Elem do_widen(char _Byte) const 
#line 2751 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2752 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->_Dowiden(_Byte); 
#line 2753 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2755 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual const char *do_widen(const char *_First, const char *
#line 2756 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last, _Elem *_Dest) const 
#line 2757 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2758 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; 
#line 2759 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; _First != _Last; (++_First), (++_Dest)) { 
#line 2760 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_Dest) = this->_Dowiden(*_First); }  
#line 2761 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _First; 
#line 2762 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2764 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
char _Donarrow(_Elem _Ch, char _Dflt) const 
#line 2765 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2766 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
char _Buf[5]; 
#line 2767 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
mbstate_t _Mbst = {}; 
#line 2768 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (_Wcrtomb(_Buf, _Ch, &_Mbst, &(_Cvt)) != 1) ? _Dflt : ((_Buf)[0]); 
#line 2770 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2772 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual char do_narrow(_Elem _Ch, char _Dflt) const 
#line 2773 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2774 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->_Donarrow(_Ch, _Dflt); 
#line 2775 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2777 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual const _Elem *do_narrow(const _Elem *_First, const _Elem *
#line 2778 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last, char _Dflt, char *_Dest) const 
#line 2779 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2780 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; 
#line 2781 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; _First != _Last; (++_First), (++_Dest)) { 
#line 2782 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_Dest) = this->_Donarrow(*_First, _Dflt); }  
#line 2783 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _First; 
#line 2784 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2787 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
private: _Locinfo::_Ctypevec _Ctype; 
#line 2788 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Locinfo::_Cvtvec _Cvt; 
#line 2789 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}; 
#line 2794 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template<> class __declspec(dllimport) ctype< unsigned short>  : public ctype_base { 
#line 2797 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef std::ctype< unsigned short>  _Myt; 
#line 2800 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
public: typedef unsigned short _Elem; 
#line 2801 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
typedef _Elem char_type; 
#line 2803 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
bool is(mask _Maskval, _Elem _Ch) const 
#line 2804 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2805 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_is(_Maskval, _Ch); 
#line 2806 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2808 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Elem *is(const _Elem *_First, const _Elem *_Last, mask *
#line 2809 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Dest) const 
#line 2810 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2811 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_is(_First, _Last, _Dest); 
#line 2812 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2814 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Elem *scan_is(mask _Maskval, const _Elem *_First, const _Elem *
#line 2815 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last) const 
#line 2816 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2817 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_scan_is(_Maskval, _First, _Last); 
#line 2818 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2820 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Elem *scan_not(mask _Maskval, const _Elem *_First, const _Elem *
#line 2821 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last) const 
#line 2822 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2823 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_scan_not(_Maskval, _First, _Last); 
#line 2824 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2826 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Elem tolower(_Elem _Ch) const 
#line 2827 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2828 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_tolower(_Ch); 
#line 2829 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2831 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Elem *tolower(_Elem *_First, const _Elem *_Last) const 
#line 2832 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2833 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_tolower(_First, _Last); 
#line 2834 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2836 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Elem toupper(_Elem _Ch) const 
#line 2837 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2838 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_toupper(_Ch); 
#line 2839 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2841 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Elem *toupper(_Elem *_First, const _Elem *_Last) const 
#line 2842 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2843 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_toupper(_First, _Last); 
#line 2844 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2846 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Elem widen(char _Byte) const 
#line 2847 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2848 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_widen(_Byte); 
#line 2849 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2851 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const char *widen(const char *_First, const char *_Last, _Elem *
#line 2852 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Dest) const 
#line 2853 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2854 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_widen(_First, _Last, _Dest); 
#line 2855 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2857 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
char narrow(_Elem _Ch, char _Dflt = '\000') const 
#line 2858 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2859 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_narrow(_Ch, _Dflt); 
#line 2860 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2862 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
const _Elem *narrow(const _Elem *_First, const _Elem *_Last, char 
#line 2863 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Dflt, char *_Dest) const 
#line 2864 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2865 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->do_narrow(_First, _Last, _Dflt, _Dest); 
#line 2866 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2868 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static locale::id id; 
#line 2870 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
explicit ctype(size_t _Refs = 0) : ctype_base(_Refs) 
#line 2872 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2873 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ _Locinfo _Lobj; 
#line 2874 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
this->_Init(_Lobj); 
#line 2875 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2876 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2878 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
ctype(const _Locinfo &_Lobj, size_t _Refs = 0) : ctype_base(_Refs) 
#line 2880 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2881 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
this->_Init(_Lobj); 
#line 2882 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2884 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *
#line 2885 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Ploc = 0) 
#line 2886 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2887 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Ppf != (0)) && ((*_Ppf) == (0))) { 
#line 2888 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_Ppf) = (new std::ctype< unsigned short> (((_Locinfo)(_Ploc->c_str())))); }  
#line 2890 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return 2; 
#line 2891 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2894 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
protected: virtual ~ctype() noexcept 
#line 2895 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2896 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
if ((_Ctype)._Delfl) { 
#line 2897 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
::free((void *)((_Ctype)._Table)); }  
#line 2899 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
::free((_Ctype)._LocaleName); 
#line 2900 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2902 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
void _Init(const _Locinfo &_Lobj) 
#line 2903 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2904 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Ctype) = _Lobj._Getctype(); 
#line 2905 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(_Cvt) = _Lobj._Getcvt(); 
#line 2906 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2908 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual bool do_is(mask _Maskval, _Elem _Ch) const 
#line 2909 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2910 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return ((::_Getwctype(_Ch, &(_Ctype))) & _Maskval) != 0; 
#line 2911 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2913 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual const _Elem *do_is(const _Elem *_First, const _Elem *
#line 2914 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last, mask *_Dest) const 
#line 2915 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2916 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; 
#line 2917 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (const _Elem *)::_Getwctypes((const __wchar_t *)_First, (const __wchar_t *)_Last, _Dest, &(_Ctype)); 
#line 2919 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2921 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual const _Elem *do_scan_is(mask _Maskval, const _Elem *
#line 2922 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First, const _Elem *_Last) const 
#line 2923 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2924 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; 
#line 2925 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; (_First != _Last) && (!this->is(_Maskval, *_First)); ++_First) { 
#line 2926 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; }  
#line 2927 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _First; 
#line 2928 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2930 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual const _Elem *do_scan_not(mask _Maskval, const _Elem *
#line 2931 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_First, const _Elem *_Last) const 
#line 2932 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2933 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; 
#line 2934 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; (_First != _Last) && this->is(_Maskval, *_First); ++_First) { 
#line 2935 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; }  
#line 2936 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _First; 
#line 2937 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2939 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual _Elem do_tolower(_Elem _Ch) const 
#line 2940 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2941 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Towlower(_Ch, &(_Ctype)); 
#line 2942 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2944 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual const _Elem *do_tolower(_Elem *_First, const _Elem *
#line 2945 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last) const 
#line 2946 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2947 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; 
#line 2948 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; _First != _Last; ++_First) { 
#line 2949 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_First) = (_Towlower(*_First, &(_Ctype))); }  
#line 2950 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (const _Elem *)_First; 
#line 2951 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2953 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual _Elem do_toupper(_Elem _Ch) const 
#line 2954 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2955 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _Towupper(_Ch, &(_Ctype)); 
#line 2956 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2958 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual const _Elem *do_toupper(_Elem *_First, const _Elem *
#line 2959 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last) const 
#line 2960 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2961 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; 
#line 2962 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; _First != _Last; ++_First) { 
#line 2963 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_First) = (_Towupper(*_First, &(_Ctype))); }  
#line 2964 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (const _Elem *)_First; 
#line 2965 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2967 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Elem _Dowiden(char _Byte) const 
#line 2968 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2969 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
mbstate_t _Mbst = {}; 
#line 2970 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
unsigned short _Wc; 
#line 2971 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (_Mbrtowc((__wchar_t *)(&_Wc), &_Byte, 1, &_Mbst, &(_Cvt)) < 0) ? (unsigned short)((wint_t)65535) : _Wc; 
#line 2973 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2975 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual _Elem do_widen(char _Byte) const 
#line 2976 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2977 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->_Dowiden(_Byte); 
#line 2978 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2980 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual const char *do_widen(const char *_First, const char *
#line 2981 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last, _Elem *_Dest) const 
#line 2982 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2983 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; 
#line 2984 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; _First != _Last; (++_First), (++_Dest)) { 
#line 2985 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_Dest) = this->_Dowiden(*_First); }  
#line 2986 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _First; 
#line 2987 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2989 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
char _Donarrow(_Elem _Ch, char _Dflt) const 
#line 2990 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2991 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
char _Buf[5]; 
#line 2992 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
mbstate_t _Mbst = {}; 
#line 2993 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return (_Wcrtomb(_Buf, _Ch, &_Mbst, &(_Cvt)) != 1) ? _Dflt : ((_Buf)[0]); 
#line 2995 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 2997 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual char do_narrow(_Elem _Ch, char _Dflt) const 
#line 2998 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 2999 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return this->_Donarrow(_Ch, _Dflt); 
#line 3000 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 3002 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
virtual const _Elem *do_narrow(const _Elem *_First, const _Elem *
#line 3003 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Last, char _Dflt, char *_Dest) const 
#line 3004 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 3005 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
; 
#line 3006 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
for (; _First != _Last; (++_First), (++_Dest)) { 
#line 3007 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
(*_Dest) = this->_Donarrow(*_First, _Dflt); }  
#line 3008 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
return _First; 
#line 3009 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 3012 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
private: _Locinfo::_Ctypevec _Ctype; 
#line 3013 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
_Locinfo::_Cvtvec _Cvt; 
#line 3014 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}; 
#line 3018 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template < class _Elem >
 class ctype_byname
 : public ctype < _Elem >
 {
public :
 explicit ctype_byname ( const char * _Locname, size_t _Refs = 0 )
  : ctype < _Elem > ( _Locinfo ( _Locname ), _Refs )
  {
  }

 explicit ctype_byname ( const string & _Str, size_t _Refs = 0 )
  : ctype < _Elem > ( _Locinfo ( _Str . c_str ( ) ), _Refs )
  {
  }

protected :
 virtual ~ ctype_byname ( ) noexcept
  {
  }
 };
#line 3041 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template<> class ctype_byname< char>  : public ctype< char>  { 
#line 3045 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
public: explicit ctype_byname(const char *_Locname, size_t _Refs = 0) : std::ctype< char> (((_Locinfo)(_Locname)), _Refs) 
#line 3047 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 3048 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 3050 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
explicit ctype_byname(const string &_Str, size_t _Refs = 0) : std::ctype< char> (((_Locinfo)(_Str.c_str())), _Refs) 
#line 3052 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 3053 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 3056 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
protected: virtual ~ctype_byname() noexcept 
#line 3057 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
{ 
#line 3058 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
} 
#line 3059 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}; 
#line 3064 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
template class __declspec(dllimport) codecvt< char, char, _Mbstatet> ;
#line 3067 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
}
#line 3069 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
#pragma warning(pop)
#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
#pragma warning(push,3)
#line 3070 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale"
#pragma pack ( pop )
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
#pragma pack ( push, 8 )
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
namespace std { 
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
enum class errc { 
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
address_family_not_supported = 102, 
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
address_in_use = 100, 
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
address_not_available, 
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
already_connected = 113, 
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
argument_list_too_long = 7, 
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
argument_out_of_domain = 33, 
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
bad_address = 14, 
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
bad_file_descriptor = 9, 
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
bad_message = 104, 
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
broken_pipe = 32, 
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
connection_aborted = 106, 
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
connection_already_in_progress = 103, 
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
connection_refused = 107, 
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
connection_reset, 
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
cross_device_link = 18, 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
destination_address_required = 109, 
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
device_or_resource_busy = 16, 
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
directory_not_empty = 41, 
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
executable_format_error = 8, 
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
file_exists = 17, 
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
file_too_large = 27, 
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
filename_too_long = 38, 
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
function_not_supported = 40, 
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
host_unreachable = 110, 
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
identifier_removed, 
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
illegal_byte_sequence = 42, 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inappropriate_io_control_operation = 25, 
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
interrupted = 4, 
#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
invalid_argument = 22, 
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
invalid_seek = 29, 
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
io_error = 5, 
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
is_a_directory = 21, 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
message_size = 115, 
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
network_down, 
#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
network_reset, 
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
network_unreachable, 
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
no_buffer_space, 
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
no_child_process = 10, 
#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
no_link = 121, 
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
no_lock_available = 39, 
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
no_message_available = 120, 
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
no_message = 122, 
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
no_protocol_option, 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
no_space_on_device = 28, 
#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
no_stream_resources = 124, 
#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
no_such_device_or_address = 6, 
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
no_such_device = 19, 
#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
no_such_file_or_directory = 2, 
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
no_such_process, 
#line 74 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
not_a_directory = 20, 
#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
not_a_socket = 128, 
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
not_a_stream = 125, 
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
not_connected, 
#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
not_enough_memory = 12, 
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
not_supported = 129, 
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
operation_canceled = 105, 
#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
operation_in_progress = 112, 
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
operation_not_permitted = 1, 
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
operation_not_supported = 130, 
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
operation_would_block = 140, 
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
owner_dead = 133, 
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
permission_denied = 13, 
#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
protocol_error = 134, 
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
protocol_not_supported, 
#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
read_only_file_system = 30, 
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
resource_deadlock_would_occur = 36, 
#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
resource_unavailable_try_again = 11, 
#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
result_out_of_range = 34, 
#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
state_not_recoverable = 127, 
#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
stream_timeout = 137, 
#line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
text_file_busy = 139, 
#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
timed_out = 138, 
#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
too_many_files_open_in_system = 23, 
#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
too_many_files_open, 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
too_many_links = 31, 
#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
too_many_symbolic_link_levels = 114, 
#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
value_too_large = 132, 
#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
wrong_protocol_type = 136
#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
}; 
#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
typedef errc _Errc; 
#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
enum class io_errc { 
#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
stream = 1
#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
}; 
#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
typedef io_errc _Io_errc; 
#line 116 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
template< class _Enum> 
#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
struct is_error_code_enum : public false_type { 
#line 120 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
}; 
#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
template<> struct is_error_code_enum< io_errc>  : public true_type { 
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
}; 
#line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
template< class _Ty> constexpr bool 
#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
is_error_code_enum_v = (is_error_code_enum< _Ty> ::value); 
#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
template< class _Enum> 
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
struct is_error_condition_enum : public false_type { 
#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
}; 
#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
template<> struct is_error_condition_enum< errc>  : public true_type { 
#line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
}; 
#line 147 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
template< class _Ty> constexpr bool 
#line 148 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
is_error_condition_enum_v = (is_error_condition_enum< _Ty> ::value); 
#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
class error_code; 
#line 152 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
class error_condition; 
#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline error_code make_error_code(_Errc) noexcept; 
#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline error_code make_error_code(_Io_errc) noexcept; 
#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline error_condition make_error_condition(_Errc) noexcept; 
#line 156 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline error_condition make_error_condition(_Io_errc) noexcept; 
#line 159 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
class error_category; 
#line 161 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline const error_category &generic_category() noexcept; 
#line 162 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline const error_category &iostream_category() noexcept; 
#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline const error_category &system_category() noexcept; 
#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
class error_category { 
#line 168 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
public: error_category() noexcept 
#line 169 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
(_Addr) = (reinterpret_cast< uintptr_t>(this)); 
#line 171 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
virtual ~error_category() noexcept 
#line 174 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 175 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
virtual const char *name() const noexcept = 0; 
#line 179 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
virtual string message(int _Errval) const = 0; 
#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline virtual error_condition default_error_condition(int _Errval) const noexcept; 
#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline virtual bool equivalent(int _Errval, const error_condition & _Cond) const noexcept; 
#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline virtual bool equivalent(const error_code & _Code, int _Errval) const noexcept; 
#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
bool operator==(const error_category &_Right) const noexcept 
#line 191 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return (_Addr) == (_Right._Addr); 
#line 193 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 195 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
bool operator!=(const error_category &_Right) const noexcept 
#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 197 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return !((*this) == _Right); 
#line 198 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 200 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
bool operator<(const error_category &_Right) const noexcept 
#line 201 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 202 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return (_Addr) < (_Right._Addr); 
#line 203 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
error_category(const error_category &) = delete;
#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
error_category &operator=(const error_category &) = delete;
#line 209 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
protected: uintptr_t _Addr; 
#line 211 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
enum: uintptr_t { 
#line 213 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Future_addr = 1Ui64, 
#line 214 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Generic_addr = 3Ui64, 
#line 215 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Iostream_addr = 5Ui64, 
#line 216 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_System_addr = 7Ui64
#line 217 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
}; 
#line 218 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
}; 
#line 221 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
class error_code { 
#line 224 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
public: typedef error_code _Myt; 
#line 226 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
error_code() noexcept : _Myval(0), _Mycat(&system_category()) 
#line 229 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 232 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
error_code(int _Val, const error_category &_Cat) noexcept : _Myval(_Val), _Mycat(&_Cat) 
#line 234 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 237 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
template < class _Enum,
  class = typename enable_if < is_error_code_enum < _Enum > :: value,
   void > :: type >
  error_code ( _Enum _Errcode ) noexcept
  : _Myval ( 0 ), _Mycat ( 0 )
  {
  * this = make_error_code ( _Errcode );
  }
#line 246 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
void assign(int _Val, const error_category &_Cat) noexcept 
#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 248 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
(_Myval) = _Val; 
#line 249 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
(_Mycat) = (&_Cat); 
#line 250 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
template < class _Enum >
  typename enable_if < is_error_code_enum < _Enum > :: value,
   error_code > :: type & operator = ( _Enum _Errcode ) noexcept
  {
  * this = make_error_code ( _Errcode );
  return ( * this );
  }
#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
void clear() noexcept 
#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
(_Myval) = 0; 
#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
(_Mycat) = (&system_category()); 
#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
int value() const noexcept 
#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return _Myval; 
#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
const error_category &category() const noexcept 
#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return *(_Mycat); 
#line 274 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 276 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline error_condition default_error_condition() const noexcept; 
#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
string message() const 
#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 280 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return this->category().message(this->value()); 
#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 283 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
explicit operator bool() const noexcept 
#line 284 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 285 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return this->value() != 0; 
#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 289 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
private: int _Myval; 
#line 290 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
const error_category *_Mycat; 
#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
}; 
#line 294 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
class error_condition { 
#line 297 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
public: typedef error_condition _Myt; 
#line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
error_condition() noexcept : _Myval(0), _Mycat(&generic_category()) 
#line 302 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 305 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
error_condition(int _Val, const error_category &_Cat) noexcept : _Myval(_Val), _Mycat(&_Cat) 
#line 307 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 308 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 310 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
template < class _Enum,
  class = typename enable_if < is_error_condition_enum < _Enum > :: value,
   void > :: type >
  error_condition ( _Enum _Errcode ) noexcept
  : _Myval ( 0 ), _Mycat ( 0 )
  {
  * this = make_error_condition ( _Errcode );
  }
#line 319 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
void assign(int _Val, const error_category &_Cat) noexcept 
#line 320 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 321 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
(_Myval) = _Val; 
#line 322 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
(_Mycat) = (&_Cat); 
#line 323 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 325 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
template < class _Enum >
  typename enable_if < is_error_condition_enum < _Enum > :: value,
   error_condition > :: type & operator = ( _Enum _Errcode ) noexcept
  {
  * this = make_error_condition ( _Errcode );
  return ( * this );
  }
#line 333 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
void clear() noexcept 
#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 335 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
(_Myval) = 0; 
#line 336 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
(_Mycat) = (&generic_category()); 
#line 337 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
int value() const noexcept 
#line 340 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 341 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return _Myval; 
#line 342 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 344 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
const error_category &category() const noexcept 
#line 345 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 346 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return *(_Mycat); 
#line 347 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 349 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
string message() const 
#line 350 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 351 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return this->category().message(this->value()); 
#line 352 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
explicit operator bool() const noexcept 
#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 356 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return this->value() != 0; 
#line 357 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 360 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
private: int _Myval; 
#line 361 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
const error_category *_Mycat; 
#line 362 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
}; 
#line 365 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline bool operator==(const error_code &
#line 366 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Left, const error_code &
#line 367 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Right) noexcept 
#line 368 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 369 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return ((_Left.category()) == (_Right.category())) && (_Left.value() == _Right.value()); 
#line 371 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 373 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline bool operator==(const error_code &
#line 374 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Left, const error_condition &
#line 375 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Right) noexcept 
#line 376 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 377 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return _Left.category().equivalent(_Left.value(), _Right) || _Right.category().equivalent(_Left, _Right.value()); 
#line 379 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 381 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline bool operator==(const error_condition &
#line 382 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Left, const error_code &
#line 383 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Right) noexcept 
#line 384 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 385 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return _Right.category().equivalent(_Right.value(), _Left) || _Left.category().equivalent(_Right, _Left.value()); 
#line 387 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 389 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline bool operator==(const error_condition &
#line 390 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Left, const error_condition &
#line 391 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Right) noexcept 
#line 392 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 393 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return ((_Left.category()) == (_Right.category())) && (_Left.value() == _Right.value()); 
#line 395 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 398 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline bool operator!=(const error_code &
#line 399 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Left, const error_code &
#line 400 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Right) noexcept 
#line 401 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 402 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return !((_Left == _Right)); 
#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 405 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline bool operator!=(const error_code &
#line 406 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Left, const error_condition &
#line 407 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Right) noexcept 
#line 408 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 409 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return !((_Left == _Right)); 
#line 410 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 412 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline bool operator!=(const error_condition &
#line 413 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Left, const error_code &
#line 414 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Right) noexcept 
#line 415 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 416 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return !((_Left == _Right)); 
#line 417 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 419 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline bool operator!=(const error_condition &
#line 420 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Left, const error_condition &
#line 421 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Right) noexcept 
#line 422 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 423 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return !((_Left == _Right)); 
#line 424 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 427 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline bool operator<(const error_code &
#line 428 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Left, const error_code &
#line 429 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Right) noexcept 
#line 430 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 431 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return ((_Left.category()) < (_Right.category())) || (((_Left.category()) == (_Right.category())) && (_Left.value() < _Right.value())); 
#line 434 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 436 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline bool operator<(const error_condition &
#line 437 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Left, const error_condition &
#line 438 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Right) noexcept 
#line 439 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 440 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return ((_Left.category()) < (_Right.category())) || (((_Left.category()) == (_Right.category())) && (_Left.value() < _Right.value())); 
#line 443 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 447 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline error_condition error_category::default_error_condition(int _Errval) const noexcept 
#line 448 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 449 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return error_condition(_Errval, *this); 
#line 450 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 453 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline bool error_category::equivalent(int _Errval, const error_condition &
#line 454 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Cond) const noexcept 
#line 455 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 456 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return ((this->default_error_condition(_Errval)) == _Cond); 
#line 457 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 460 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline bool error_category::equivalent(const error_code &_Code, int 
#line 461 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Errval) const noexcept 
#line 462 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 463 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return ((*this) == (_Code.category())) && (_Code.value() == _Errval); 
#line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 467 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline error_condition error_code::default_error_condition() const noexcept 
#line 468 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 469 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return this->category().default_error_condition(this->value()); 
#line 470 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 473 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline error_code make_error_code(_Errc _Errno) noexcept 
#line 474 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 475 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return error_code((int)_Errno, generic_category()); 
#line 476 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 478 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline error_code make_error_code(_Io_errc _Errno) noexcept 
#line 479 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 480 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return error_code((int)_Errno, iostream_category()); 
#line 481 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 484 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline error_condition make_error_condition(_Errc _Errno) noexcept 
#line 485 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 486 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return error_condition((int)_Errno, generic_category()); 
#line 487 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 489 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline error_condition make_error_condition(_Io_errc _Errno) noexcept 
#line 490 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 491 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return error_condition((int)_Errno, iostream_category()); 
#line 492 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 496 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
template<> struct hash< error_code>  { 
#line 498 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
typedef error_code argument_type; 
#line 499 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
typedef size_t result_type; 
#line 501 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
size_t operator()(const argument_type &_Keyval) const 
#line 502 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 503 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return std::hash< int> ()(_Keyval.value()); 
#line 504 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 505 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
}; 
#line 508 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
class _System_error : public runtime_error { 
#line 512 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
static string _Makestr(error_code _Errcode, string _Message) 
#line 513 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 514 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
if (!_Message.empty()) { 
#line 515 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Message.append(": "); }  
#line 516 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Message.append(_Errcode.message()); 
#line 517 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return _Message; 
#line 518 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 521 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
protected: _System_error(error_code _Errcode, const string &_Message) : runtime_error(_Makestr(_Errcode, _Message)), _Mycode(_Errcode) 
#line 523 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 524 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 526 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
error_code _Mycode; 
#line 527 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
}; 
#line 529 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
class system_error : public _System_error { 
#line 533 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
typedef _System_error _Mybase; 
#line 536 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
public: system_error(error_code _Errcode) : _Mybase(_Errcode, "") 
#line 538 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 539 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 541 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
system_error(error_code _Errcode, const string &_Message) : _Mybase(_Errcode, _Message) 
#line 543 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 544 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 546 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
system_error(error_code _Errcode, const char *_Message) : _Mybase(_Errcode, _Message) 
#line 548 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 549 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 551 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
system_error(int _Errval, const error_category &_Errcat) : _Mybase(error_code(_Errval, _Errcat), "") 
#line 553 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 554 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 556 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
system_error(int _Errval, const error_category &_Errcat, const string &
#line 557 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Message) : _Mybase(error_code(_Errval, _Errcat), _Message) 
#line 559 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 560 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 562 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
system_error(int _Errval, const error_category &_Errcat, const char *
#line 563 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Message) : _Mybase(error_code(_Errval, _Errcat), _Message) 
#line 565 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 566 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 568 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
const error_code &code() const noexcept 
#line 569 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 570 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return _Mycode; 
#line 571 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 582 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
}; 
#line 584 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
__declspec(dllimport) const char *__cdecl _Syserror_map(int); 
#line 585 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
__declspec(dllimport) int __cdecl _Winerror_map(int); 
#line 586 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
__declspec(dllimport) unsigned long __cdecl _Winerror_message(unsigned long _Message_id, char * _Narrow, unsigned long _Size); 
#line 590 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
class _Generic_error_category : public error_category { 
#line 594 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
public: _Generic_error_category() noexcept 
#line 595 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 596 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
(_Addr) = (_Generic_addr); 
#line 597 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 599 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
virtual const char *name() const noexcept 
#line 600 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 601 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return "generic"; 
#line 602 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 604 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
virtual string message(int _Errcode) const 
#line 605 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 606 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return _Syserror_map(_Errcode); 
#line 607 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 608 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
}; 
#line 611 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
class _Iostream_error_category : public _Generic_error_category { 
#line 615 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
public: _Iostream_error_category() noexcept 
#line 616 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 617 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
(_Addr) = (_Iostream_addr); 
#line 618 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 620 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
virtual const char *name() const noexcept 
#line 621 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 622 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return "iostream"; 
#line 623 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 625 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
virtual string message(int _Errcode) const 
#line 626 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 627 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
if (_Errcode == ((int)io_errc::stream)) { 
#line 628 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return "iostream stream error"; } else { 
#line 630 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return this->_Generic_error_category::message(_Errcode); }  
#line 631 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 632 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
}; 
#line 635 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
class _System_error_category : public error_category { 
#line 639 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
public: _System_error_category() noexcept 
#line 640 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 641 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
(_Addr) = (_System_addr); 
#line 642 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 644 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
virtual const char *name() const noexcept 
#line 645 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 646 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return "system"; 
#line 647 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 649 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
virtual string message(int _Errcode) const 
#line 650 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 651 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
const unsigned long _Size = (32767); 
#line 652 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
string _Narrow(_Size, '\000'); 
#line 654 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
const unsigned long _Val = _Winerror_message(static_cast< unsigned long>(_Errcode), &_Narrow[0], _Size); 
#line 657 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
if (_Val == (0)) { 
#line 658 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return "unknown error"; }  
#line 660 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Narrow.resize(_Val); 
#line 661 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
_Narrow.shrink_to_fit(); 
#line 662 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return _Narrow; 
#line 663 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 666 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
virtual error_condition default_error_condition(int _Errval) const noexcept 
#line 667 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 668 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
int _Posv = _Winerror_map(_Errval); 
#line 670 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
if (_Posv != 0) { 
#line 671 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return error_condition(_Posv, generic_category()); } else { 
#line 673 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return error_condition(_Errval, system_category()); }  
#line 674 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 675 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
}; 
#line 677 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
template < class _Ty >
 struct _Immortalizer
 {
 _Immortalizer ( )
  {
  :: new ( static_cast < void * > ( & _Storage ) ) _Ty ( );
  }

 ~ _Immortalizer ( ) noexcept
  {
  }

 _Immortalizer ( const _Immortalizer & ) = delete;
 _Immortalizer & operator = ( const _Immortalizer & ) = delete;

 typename aligned_union < 1, _Ty > :: type _Storage;
 };
#line 695 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
template < class _Ty > inline
 _Ty & _Immortalize ( )
 {
  static _Immortalizer < _Ty > _Static;
 return ( * reinterpret_cast < _Ty * > ( & _Static . _Storage ) );
 }
#line 702 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline const error_category &generic_category() noexcept 
#line 703 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 704 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return _Immortalize< _Generic_error_category> (); 
#line 705 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 707 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline const error_category &iostream_category() noexcept 
#line 708 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 709 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return _Immortalize< _Iostream_error_category> (); 
#line 710 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 712 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
inline const error_category &system_category() noexcept 
#line 713 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
{ 
#line 714 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
return _Immortalize< _System_error_category> (); 
#line 715 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
} 
#line 716 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
}
#line 718 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
#pragma warning(pop)
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
#pragma warning(push,3)
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
#pragma warning(disable: 4412)
#line 719 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error"
#pragma pack ( pop )
#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
#pragma pack ( push, 8 )
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
namespace std { 
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> 
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
class _Iosb { 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
public: enum _Dummy_enum { _Dummy_enum_val = 1}; 
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
enum _Fmtflags { 
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Fmtmask = 65535, _Fmtzero = 0}; 
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Fmtflags skipws = ((_Fmtflags)1); 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Fmtflags unitbuf = ((_Fmtflags)2); 
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Fmtflags uppercase = ((_Fmtflags)4); 
#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Fmtflags showbase = ((_Fmtflags)8); 
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Fmtflags showpoint = ((_Fmtflags)16); 
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Fmtflags showpos = ((_Fmtflags)32); 
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Fmtflags left = ((_Fmtflags)64); 
#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Fmtflags right = ((_Fmtflags)128); 
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Fmtflags internal = ((_Fmtflags)256); 
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Fmtflags dec = ((_Fmtflags)512); 
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Fmtflags oct = ((_Fmtflags)1024); 
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Fmtflags hex = ((_Fmtflags)2048); 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Fmtflags scientific = ((_Fmtflags)4096); 
#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Fmtflags fixed = ((_Fmtflags)8192); 
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Fmtflags hexfloat = ((_Fmtflags)12288); 
#line 74 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Fmtflags boolalpha = ((_Fmtflags)16384); 
#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Fmtflags _Stdio = ((_Fmtflags)32768); 
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Fmtflags adjustfield = ((_Fmtflags)((64 | 128) | 256)); 
#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Fmtflags basefield = ((_Fmtflags)((512 | 1024) | 2048)); 
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Fmtflags floatfield = ((_Fmtflags)(4096 | 8192)); 
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
enum _Iostate { 
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Statmask = 23}; 
#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Iostate goodbit = ((_Iostate)0); 
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Iostate eofbit = ((_Iostate)1); 
#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Iostate failbit = ((_Iostate)2); 
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Iostate badbit = ((_Iostate)4); 
#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
enum _Openmode { 
#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Openmask = 255}; 
#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Openmode in = ((_Openmode)1); 
#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Openmode out = ((_Openmode)2); 
#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Openmode ate = ((_Openmode)4); 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Openmode app = ((_Openmode)8); 
#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Openmode trunc = ((_Openmode)16); 
#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Openmode _Nocreate = ((_Openmode)64); 
#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Openmode _Noreplace = ((_Openmode)128); 
#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Openmode binary = ((_Openmode)32); 
#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
enum _Seekdir { 
#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Seekbeg, 
#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Seekcur, 
#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Seekend
#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
}; 
#line 112 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Seekdir beg = (_Seekbeg); 
#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Seekdir cur = (_Seekcur); 
#line 114 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static constexpr _Seekdir end = (_Seekend); 
#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
enum { 
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Openprot = 64}; 
#line 119 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
}; 
#line 121 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 122 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::skipws; 
#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::unitbuf; 
#line 125 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::uppercase; 
#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::showbase; 
#line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::showpoint; 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::showpos; 
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::left; 
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::right; 
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::internal; 
#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::dec; 
#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::oct; 
#line 143 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::hex; 
#line 145 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 146 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::scientific; 
#line 147 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 148 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::fixed; 
#line 150 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 152 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::hexfloat; 
#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::boolalpha; 
#line 156 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::_Stdio; 
#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 159 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::adjustfield; 
#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 161 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::basefield; 
#line 162 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags 
#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::floatfield; 
#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Iostate 
#line 166 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::goodbit; 
#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Iostate 
#line 168 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::eofbit; 
#line 169 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Iostate 
#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::failbit; 
#line 171 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Iostate 
#line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::badbit; 
#line 174 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Openmode 
#line 175 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::in; 
#line 176 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Openmode 
#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::out; 
#line 178 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Openmode 
#line 179 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::ate; 
#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Openmode 
#line 181 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::app; 
#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Openmode 
#line 183 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::trunc; 
#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Openmode 
#line 185 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::_Nocreate; 
#line 186 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Openmode 
#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::_Noreplace; 
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Openmode 
#line 189 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::binary; 
#line 191 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Seekdir 
#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::beg; 
#line 193 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Seekdir 
#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::cur; 
#line 195 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Seekdir 
#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosb< _Dummy> ::end; 
#line 199 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
class __declspec(dllimport) ios_base : public _Iosb< int>  { 
#line 203 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
public: typedef int fmtflags; 
#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
typedef int iostate; 
#line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
typedef int openmode; 
#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
typedef int seekdir; 
#line 209 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
typedef std::streamoff streamoff; 
#line 210 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
typedef std::streampos streampos; 
#line 213 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
enum event { 
#line 215 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
erase_event, imbue_event, copyfmt_event}; 
#line 217 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
typedef void (__cdecl *event_callback)(event, ios_base &, int); 
#line 220 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
typedef unsigned io_state, open_mode, seek_dir; 
#line 224 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
class failure : public system_error { 
#line 229 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
public: explicit failure(const string &_Message, const error_code &
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Errcode = make_error_code(io_errc::stream)) : system_error(_Errcode, _Message) 
#line 232 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 233 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
explicit failure(const char *_Message, const error_code &
#line 236 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Errcode = make_error_code(io_errc::stream)) : system_error(_Errcode, _Message) 
#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 251 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
}; 
#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
class __declspec(dllimport) Init { 
#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
public: Init() 
#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Init_ctor(this); 
#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
~Init() noexcept 
#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Init_dtor(this); 
#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
private: static void __cdecl _Init_ctor(Init *); 
#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static void __cdecl _Init_dtor(Init *); 
#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static int _Init_cnt; 
#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static int &__cdecl _Init_cnt_func(); 
#line 274 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
}; 
#line 276 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
explicit operator bool() const 
#line 277 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return !this->fail(); 
#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
bool operator!() const 
#line 282 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 283 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return this->fail(); 
#line 284 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
void clear(iostate _State, bool _Reraise) 
#line 287 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 288 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Mystate) = ((iostate)(_State & (_Statmask))); 
#line 289 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
if (((_Mystate) & (_Except)) == 0) { 
#line 290 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
; } else { 
#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
if (_Reraise) { 
#line 292 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
throw; } else { 
#line 293 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
if (((_Mystate) & (_Except)) & badbit) { 
#line 294 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
throw ((failure)("ios_base::badbit set")); } else { 
#line 295 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
if (((_Mystate) & (_Except)) & failbit) { 
#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
throw ((failure)("ios_base::failbit set")); } else { 
#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
throw ((failure)("ios_base::eofbit set")); }  }  }  }  
#line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 301 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
void clear(iostate _State = goodbit) 
#line 302 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
this->clear(_State, false); 
#line 304 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 307 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
void clear(io_state _State) 
#line 308 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
this->clear((iostate)_State); 
#line 310 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 313 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
iostate rdstate() const 
#line 314 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 315 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return _Mystate; 
#line 316 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 318 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
void setstate(iostate _State, bool _Exreraise) 
#line 319 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 320 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
if (_State != goodbit) { 
#line 321 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
this->clear((iostate)(((int)this->rdstate()) | ((int)_State)), _Exreraise); }  
#line 322 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 324 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
void setstate(iostate _State) 
#line 325 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 326 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
if (_State != goodbit) { 
#line 327 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
this->clear((iostate)(((int)this->rdstate()) | ((int)_State)), false); }  
#line 328 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 331 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
void setstate(io_state _State) 
#line 332 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 333 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
this->setstate((iostate)_State); 
#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 337 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
bool good() const 
#line 338 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return this->rdstate() == goodbit; 
#line 340 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 342 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
bool eof() const 
#line 343 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 344 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return ((int)this->rdstate()) & ((int)eofbit); 
#line 345 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 347 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
bool fail() const 
#line 348 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 349 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return (((int)this->rdstate()) & (((int)badbit) | ((int)failbit))) != 0; 
#line 351 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 353 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
bool bad() const 
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return (((int)this->rdstate()) & ((int)badbit)) != 0; 
#line 356 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 358 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
iostate exceptions() const 
#line 359 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 360 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return _Except; 
#line 361 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 363 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
void exceptions(iostate _Newexcept) 
#line 364 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 365 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Except) = ((iostate)(((int)_Newexcept) & ((int)_Statmask))); 
#line 366 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
this->clear(_Mystate); 
#line 367 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 370 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
void exceptions(io_state _State) 
#line 371 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 372 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
this->exceptions((iostate)_State); 
#line 373 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 376 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
fmtflags flags() const 
#line 377 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 378 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return _Fmtfl; 
#line 379 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 381 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
fmtflags flags(fmtflags _Newfmtflags) 
#line 382 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 383 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
fmtflags _Oldfmtflags = _Fmtfl; 
#line 384 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Fmtfl) = ((fmtflags)(((int)_Newfmtflags) & ((int)_Fmtmask))); 
#line 385 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return _Oldfmtflags; 
#line 386 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 388 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
fmtflags setf(fmtflags _Newfmtflags) 
#line 389 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 390 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
fmtflags _Oldfmtflags = _Fmtfl; 
#line 391 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Fmtfl) = ((fmtflags)(((int)(_Fmtfl)) | (((int)_Newfmtflags) & ((int)_Fmtmask)))); 
#line 393 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return _Oldfmtflags; 
#line 394 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 396 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
fmtflags setf(fmtflags _Newfmtflags, fmtflags _Mask) 
#line 397 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 398 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
fmtflags _Oldfmtflags = _Fmtfl; 
#line 399 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Fmtfl) = ((fmtflags)((((int)(_Fmtfl)) & ((int)(~_Mask))) | ((((int)_Newfmtflags) & ((int)_Mask)) & ((int)_Fmtmask)))); 
#line 401 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return _Oldfmtflags; 
#line 402 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 404 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
void unsetf(fmtflags _Mask) 
#line 405 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 406 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Fmtfl) = ((fmtflags)(((int)(_Fmtfl)) & ((int)(~_Mask)))); 
#line 407 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 409 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
streamsize precision() const 
#line 410 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 411 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return _Prec; 
#line 412 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 414 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
streamsize precision(streamsize _Newprecision) 
#line 415 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 416 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
streamsize _Oldprecision = _Prec; 
#line 417 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Prec) = _Newprecision; 
#line 418 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return _Oldprecision; 
#line 419 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 421 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
streamsize width() const 
#line 422 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 423 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return _Wide; 
#line 424 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 426 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
streamsize width(streamsize _Newwidth) 
#line 427 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 428 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
streamsize _Oldwidth = _Wide; 
#line 429 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Wide) = _Newwidth; 
#line 430 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return _Oldwidth; 
#line 431 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 433 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
locale getloc() const 
#line 434 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 435 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return *(_Ploc); 
#line 436 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 438 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
locale imbue(const locale &_Loc) 
#line 439 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 440 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
locale _Oldlocale = *(_Ploc); 
#line 441 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
((*(_Ploc)) = _Loc); 
#line 442 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
this->_Callfns(imbue_event); 
#line 443 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return _Oldlocale; 
#line 444 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 446 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static int __cdecl xalloc() 
#line 447 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 448 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ _Lockit _Lock(2); 
#line 449 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return _Index++; 
#line 450 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 451 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 453 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
long &iword(int _Idx) 
#line 454 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 455 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return this->_Findarr(_Idx)._Lo; 
#line 456 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 458 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
void *&pword(int _Idx) 
#line 459 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 460 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return this->_Findarr(_Idx)._Vp; 
#line 461 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 463 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
void register_callback(event_callback _Pfn, int 
#line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Idx) 
#line 465 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 466 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Calls) = (new _Fnarray(_Idx, _Pfn, _Calls)); 
#line 467 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 469 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
ios_base &copyfmt(const ios_base &_Other) 
#line 470 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 471 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
if (this != (&_Other)) 
#line 472 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 473 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
this->_Tidy(); 
#line 474 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
((*(_Ploc)) = (*(_Other._Ploc))); 
#line 475 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Fmtfl) = (_Other._Fmtfl); 
#line 476 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Prec) = (_Other._Prec); 
#line 477 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Wide) = (_Other._Wide); 
#line 478 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosarray *_Ptr = _Other._Arr; 
#line 480 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
for ((_Arr) = (0); _Ptr != (0); _Ptr = (_Ptr->_Next)) { 
#line 481 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
if (((_Ptr->_Lo) != (0)) || ((_Ptr->_Vp) != (0))) 
#line 482 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 483 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
this->iword(_Ptr->_Index) = (_Ptr->_Lo); 
#line 484 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
this->pword(_Ptr->_Index) = (_Ptr->_Vp); 
#line 485 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
}  }  
#line 487 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
for (_Fnarray *_Pfa = _Other._Calls; _Pfa != (0); _Pfa = (_Pfa->_Next)) { 
#line 489 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
this->register_callback(_Pfa->_Pfn, _Pfa->_Index); }  
#line 491 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
this->_Callfns(copyfmt_event); 
#line 492 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
this->exceptions(_Other._Except); 
#line 493 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
}  
#line 494 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return *this; 
#line 495 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 497 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static bool __cdecl sync_with_stdio(bool _Newsync = true) 
#line 498 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 499 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ _Lockit _Lock(2); 
#line 500 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
const bool _Oldsync = _Sync; 
#line 501 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Sync = _Newsync; 
#line 502 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return _Oldsync; 
#line 503 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 504 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 506 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
void swap(ios_base &_Right) 
#line 507 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 508 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
if (this != (&_Right)) 
#line 509 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 510 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
::std::swap(_Mystate, _Right._Mystate); 
#line 511 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
::std::swap(_Except, _Right._Except); 
#line 512 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
::std::swap(_Fmtfl, _Right._Fmtfl); 
#line 513 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
::std::swap(_Prec, _Right._Prec); 
#line 514 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
::std::swap(_Wide, _Right._Wide); 
#line 516 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
::std::swap(_Arr, _Right._Arr); 
#line 517 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
::std::swap(_Calls, _Right._Calls); 
#line 518 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
::std::swap(_Ploc, _Right._Ploc); 
#line 519 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
}  
#line 520 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 522 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
virtual ~ios_base() noexcept 
#line 523 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 524 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Ios_base_dtor(this); 
#line 525 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 528 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static void __cdecl _Addstd(ios_base *); 
#line 530 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
size_t _Stdstr; 
#line 533 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
protected: ios_base() 
#line 534 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 535 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 537 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
void _Init() 
#line 538 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 539 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Ploc) = (0); 
#line 540 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Stdstr) = (0); 
#line 541 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Except) = goodbit; 
#line 542 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Fmtfl) = ((fmtflags)(skipws | dec)); 
#line 543 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Prec) = (6); 
#line 544 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Wide) = (0); 
#line 545 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Arr) = (0); 
#line 546 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Calls) = (0); 
#line 547 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
this->clear(goodbit); 
#line 548 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Ploc) = (new locale); 
#line 549 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 553 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
private: struct _Iosarray : public _Crt_new_delete { 
#line 557 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosarray(int _Idx, _Iosarray *_Link) : _Next(_Link), _Index(_Idx), _Lo((0)), _Vp((0)) 
#line 559 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 560 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 562 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosarray *_Next; 
#line 563 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
int _Index; 
#line 564 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
long _Lo; 
#line 565 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
void *_Vp; 
#line 566 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
}; 
#line 569 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
struct _Fnarray : public _Crt_new_delete { 
#line 572 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Fnarray(int _Idx, event_callback _Pnew, _Fnarray *_Link) : _Next(_Link), _Index(_Idx), _Pfn(_Pnew) 
#line 574 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 575 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 577 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Fnarray *_Next; 
#line 578 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
int _Index; 
#line 579 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
event_callback _Pfn; 
#line 580 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
}; 
#line 582 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
void _Callfns(event _Ev) 
#line 583 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 584 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
for (_Fnarray *_Pfa = _Calls; _Pfa != (0); _Pfa = (_Pfa->_Next)) { 
#line 585 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(*(_Pfa->_Pfn))(_Ev, *this, _Pfa->_Index); }  
#line 586 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 588 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosarray &_Findarr(int _Idx) 
#line 589 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 590 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosarray *_Ptr1, *_Ptr2; 
#line 592 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
for ((_Ptr1 = (_Arr)), (_Ptr2 = (0)); _Ptr1 != (0); _Ptr1 = (_Ptr1->_Next)) { 
#line 593 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
if ((_Ptr1->_Index) == _Idx) { 
#line 594 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return *_Ptr1; } else { 
#line 595 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
if (((_Ptr2 == (0)) && ((_Ptr1->_Lo) == (0))) && ((_Ptr1->_Vp) == (0))) { 
#line 596 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Ptr2 = _Ptr1; }  }  }  
#line 598 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
if (_Ptr2 != (0)) 
#line 599 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 600 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Ptr2->_Index) = _Idx; 
#line 601 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return *_Ptr2; 
#line 602 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
}  
#line 604 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Arr) = (new _Iosarray(_Idx, _Arr)); 
#line 605 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
return *(_Arr); 
#line 606 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 608 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
void _Tidy() 
#line 609 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 610 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
this->_Callfns(erase_event); 
#line 611 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosarray *_Ptr1, *_Ptr2; 
#line 613 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
for (_Ptr1 = (_Arr); _Ptr1 != (0); _Ptr1 = _Ptr2) 
#line 614 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 615 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Ptr2 = (_Ptr1->_Next); 
#line 616 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
delete _Ptr1; 
#line 617 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
}  
#line 618 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Arr) = (0); 
#line 620 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Fnarray *_Pfa1, *_Pfa2; 
#line 621 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
for (_Pfa1 = (_Calls); _Pfa1 != (0); _Pfa1 = _Pfa2) 
#line 622 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
{ 
#line 623 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Pfa2 = (_Pfa1->_Next); 
#line 624 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
delete _Pfa1; 
#line 625 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
}  
#line 626 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
(_Calls) = (0); 
#line 627 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
} 
#line 629 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
iostate _Mystate; 
#line 630 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
iostate _Except; 
#line 631 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
fmtflags _Fmtfl; 
#line 632 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
streamsize _Prec; 
#line 633 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
streamsize _Wide; 
#line 634 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Iosarray *_Arr; 
#line 635 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
_Fnarray *_Calls; 
#line 636 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
locale *_Ploc; 
#line 638 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static int _Index; 
#line 639 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static bool _Sync; 
#line 642 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
static void __cdecl _Ios_base_dtor(ios_base *); 
#line 645 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
public: ios_base(const ios_base &) = delete;
#line 646 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
ios_base &operator=(const ios_base &) = delete;
#line 647 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
}; 
#line 653 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
}
#line 655 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
#pragma warning(pop)
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
#pragma warning(push,3)
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
#pragma warning(disable: 4251)
#line 656 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase"
#pragma pack ( pop )
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
#pragma pack ( push, 8 )
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
namespace std { 
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
template < class _Elem,
 class _Traits >
 class basic_streambuf
 {
 typedef basic_streambuf < _Elem, _Traits > _Myt;

protected :
  basic_streambuf ( )
  : _Plocale ( new locale )
  {
  _Init ( );
  }

  basic_streambuf ( _Uninitialized )
  {
  }

  basic_streambuf ( const _Myt & _Right )
  : _Plocale ( new locale ( _Right . getloc ( ) ) )
  {
  _Init ( );
  setp ( _Right . pbase ( ), _Right . pptr ( ), _Right . epptr ( ) );
  setg ( _Right . eback ( ), _Right . gptr ( ), _Right . egptr ( ) );
  }

 _Myt & operator = ( const _Myt & _Right )
  {
  if ( this != & _Right )
   {
   setp ( _Right . pbase ( ), _Right . pptr ( ), _Right . epptr ( ) );
   setg ( _Right . eback ( ), _Right . gptr ( ), _Right . egptr ( ) );
   pubimbue ( _Right . getloc ( ) );
   }
  return ( * this );
  }

 void swap ( _Myt & _Right )
  {
  if ( this != & _Right )
   {
   _Elem * _Pfirst0 = pbase ( );
   _Elem * _Pnext0 = pptr ( );
   _Elem * _Pend = epptr ( );
   _Elem * _Gfirst0 = eback ( );
   _Elem * _Gnext0 = gptr ( );
   _Elem * _Gend = egptr ( );

   setp ( _Right . pbase ( ), _Right . pptr ( ), _Right . epptr ( ) );
   _Right . setp ( _Pfirst0, _Pnext0, _Pend );

   setg ( _Right . eback ( ), _Right . gptr ( ), _Right . egptr ( ) );
   _Right . setg ( _Gfirst0, _Gnext0, _Gend );

   :: std :: swap ( _Plocale, _Right . _Plocale );
   }
  }

public :
 typedef _Elem char_type;
 typedef _Traits traits_type;

 virtual ~ basic_streambuf ( ) noexcept
  {
  delete _Plocale;
  }

 typedef typename _Traits :: int_type int_type;
 typedef typename _Traits :: pos_type pos_type;
 typedef typename _Traits :: off_type off_type;

 pos_type pubseekoff ( off_type _Off,
  ios_base :: seekdir _Way,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out )
  {
  return ( seekoff ( _Off, _Way, _Mode ) );
  }


 pos_type pubseekoff ( off_type _Off,
  ios_base :: seek_dir _Way,
  ios_base :: open_mode _Mode )
  {
  return ( pubseekoff ( _Off, ( ios_base :: seekdir ) _Way,
   ( ios_base :: openmode ) _Mode ) );
  }


 pos_type pubseekpos ( pos_type _Pos,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out )
  {
  return ( seekpos ( _Pos, _Mode ) );
  }


 pos_type pubseekpos ( pos_type _Pos,
  ios_base :: open_mode _Mode )
  {
  return ( seekpos ( _Pos, ( ios_base :: openmode ) _Mode ) );
  }


 _Myt * pubsetbuf ( _Elem * _Buffer,
  streamsize _Count )
  {
  return ( setbuf ( _Buffer, _Count ) );
  }

 locale pubimbue ( const locale & _Newlocale )
  {
  locale _Oldlocale = * _Plocale;
  imbue ( _Newlocale );
  * _Plocale = _Newlocale;
  return ( _Oldlocale );
  }

 locale getloc ( ) const
  {
  return ( * _Plocale );
  }

 streamsize in_avail ( )
  {
  streamsize _Res = _Gnavail ( );
  return ( 0 < _Res ? _Res : showmanyc ( ) );
  }

 int pubsync ( )
  {
  return ( sync ( ) );
  }

 int_type sbumpc ( )
  {
  return ( 0 < _Gnavail ( )
   ? _Traits :: to_int_type ( * _Gninc ( ) ) : uflow ( ) );
  }

 int_type sgetc ( )
  {
  return ( 0 < _Gnavail ( )
   ? _Traits :: to_int_type ( * gptr ( ) ) : underflow ( ) );
  }

 streamsize sgetn ( _Elem * _Ptr,
  streamsize _Count )
  {
  return ( xsgetn ( _Ptr, _Count ) );
  }

 int_type snextc ( )
  {
  return ( 1 < _Gnavail ( )
   ? _Traits :: to_int_type ( * _Gnpreinc ( ) )
   : _Traits :: eq_int_type ( _Traits :: eof ( ), sbumpc ( ) )
    ? _Traits :: eof ( ) : sgetc ( ) );
  }

 int_type sputbackc ( _Elem _Ch )
  {
  return ( gptr ( ) != 0 && eback ( ) < gptr ( )
   && _Traits :: eq ( _Ch, gptr ( ) [ - 1 ] )
   ? _Traits :: to_int_type ( * _Gndec ( ) )
   : pbackfail ( _Traits :: to_int_type ( _Ch ) ) );
  }


 void stossc ( )
  {
  if ( 0 < _Gnavail ( ) )
   _Gninc ( );
  else
   uflow ( );
  }


 int_type sungetc ( )
  {
  return ( gptr ( ) != 0 && eback ( ) < gptr ( )
   ? _Traits :: to_int_type ( * _Gndec ( ) ) : pbackfail ( ) );
  }

 int_type sputc ( _Elem _Ch )
  {
  return ( 0 < _Pnavail ( )
   ? _Traits :: to_int_type ( * _Pninc ( ) = _Ch )
   : overflow ( _Traits :: to_int_type ( _Ch ) ) );
  }

 streamsize sputn ( const _Elem * _Ptr,
  streamsize _Count )
  {
  return ( xsputn ( _Ptr, _Count ) );
  }

 virtual void _Lock ( )
  {
  }

 virtual void _Unlock ( )
  {
  }

protected :
 _Elem * eback ( ) const
  {
  return ( * _IGfirst );
  }

 _Elem * gptr ( ) const
  {
  return ( * _IGnext );
  }

 _Elem * pbase ( ) const
  {
  return ( * _IPfirst );
  }

 _Elem * pptr ( ) const
  {
  return ( * _IPnext );
  }

 _Elem * egptr ( ) const
  {
  return ( * _IGnext + * _IGcount );
  }

 void gbump ( int _Off )
  {
  * _IGcount -= _Off;
  * _IGnext += _Off;
  }

 void setg ( _Elem * _First, _Elem * _Next, _Elem * _Last )
  {
  * _IGfirst = _First;
  * _IGnext = _Next;
  * _IGcount = ( int ) ( _Last - _Next );
  }

 _Elem * epptr ( ) const
  {
  return ( * _IPnext + * _IPcount );
  }

 _Elem * _Gndec ( )
  {
  ++ * _IGcount;
  return ( -- * _IGnext );
  }

 _Elem * _Gninc ( )
  {
  -- * _IGcount;
  return ( ( * _IGnext ) ++ );
  }

 _Elem * _Gnpreinc ( )
  {
  -- * _IGcount;
  return ( ++ ( * _IGnext ) );
  }

 streamsize _Gnavail ( ) const
  {
  return ( * _IGnext != 0 ? * _IGcount : 0 );
  }

 void pbump ( int _Off )
  {
  * _IPcount -= _Off;
  * _IPnext += _Off;
  }

 void setp ( _Elem * _First, _Elem * _Last )
  {
  * _IPfirst = _First;
  * _IPnext = _First;
  * _IPcount = ( int ) ( _Last - _First );
  }

 void setp ( _Elem * _First, _Elem * _Next, _Elem * _Last )
  {
  * _IPfirst = _First;
  * _IPnext = _Next;
  * _IPcount = ( int ) ( _Last - _Next );
  }

 _Elem * _Pninc ( )
  {
  -- * _IPcount;
  return ( ( * _IPnext ) ++ );
  }

 streamsize _Pnavail ( ) const
  {
  return ( * _IPnext != 0 ? * _IPcount : 0 );
  }

 void _Init ( )
  {
  _IGfirst = & _Gfirst;
  _IPfirst = & _Pfirst;
  _IGnext = & _Gnext;
  _IPnext = & _Pnext;
  _IGcount = & _Gcount;
  _IPcount = & _Pcount;
  setp ( 0, 0 );
  setg ( 0, 0, 0 );
  }

 void _Init ( _Elem * * _Gf, _Elem * * _Gn, int * _Gc,
  _Elem * * _Pf, _Elem * * _Pn, int * _Pc )
  {
  _IGfirst = _Gf;
  _IPfirst = _Pf;
  _IGnext = _Gn;
  _IPnext = _Pn;
  _IGcount = _Gc;
  _IPcount = _Pc;
  }

 virtual int_type overflow ( int_type = _Traits :: eof ( ) )
  {
  return ( _Traits :: eof ( ) );
  }

 virtual int_type pbackfail ( int_type = _Traits :: eof ( ) )
  {
  return ( _Traits :: eof ( ) );
  }

 virtual streamsize showmanyc ( )
  {
  return ( 0 );
  }

 virtual int_type underflow ( )
  {
  return ( _Traits :: eof ( ) );
  }

 virtual int_type uflow ( )
  {
  return ( _Traits :: eq_int_type ( _Traits :: eof ( ), underflow ( ) )
   ? _Traits :: eof ( ) : _Traits :: to_int_type ( * _Gninc ( ) ) );
  }

 virtual streamsize xsgetn ( _Elem * _Ptr,
  streamsize _Count )
  {
  int_type _Meta;
  streamsize _Size, _Copied;

  for ( _Copied = 0; 0 < _Count; )
   if ( 0 < ( _Size = _Gnavail ( ) ) )
    {
    if ( _Count < _Size )
     _Size = _Count;
    _Traits :: copy ( _Ptr, gptr ( ), ( size_t ) _Size );
    _Ptr += _Size;
    _Copied += _Size;
    _Count -= _Size;
    gbump ( ( int ) _Size );
    }
   else if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta = uflow ( ) ) )
    break;
   else
    {
    * _Ptr ++ = _Traits :: to_char_type ( _Meta );
    ++ _Copied;
    -- _Count;
    }

  return ( _Copied );
  }

 virtual streamsize xsputn ( const _Elem * _Ptr,
  streamsize _Count )
  {
  streamsize _Size, _Copied;

  for ( _Copied = 0; 0 < _Count; )
   if ( 0 < ( _Size = _Pnavail ( ) ) )
    {
    if ( _Count < _Size )
     _Size = _Count;
    _Traits :: copy ( pptr ( ), _Ptr, ( size_t ) _Size );
    _Ptr += _Size;
    _Copied += _Size;
    _Count -= _Size;
    pbump ( ( int ) _Size );
    }
   else if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
    overflow ( _Traits :: to_int_type ( * _Ptr ) ) ) )
    break;
   else
    {
    ++ _Ptr;
    ++ _Copied;
    -- _Count;
    }

  return ( _Copied );
  }

 virtual pos_type seekoff ( off_type,
  ios_base :: seekdir,
  ios_base :: openmode = ios_base :: in | ios_base :: out )
  {
  return ( streampos ( _BADOFF ) );
  }

 virtual pos_type seekpos ( pos_type,
  ios_base :: openmode = ios_base :: in | ios_base :: out )
  {
  return ( streampos ( _BADOFF ) );
  }

 virtual _Myt * setbuf ( _Elem *, streamsize )
  {
  return ( this );
  }

 virtual int sync ( )
  {
  return ( 0 );
  }

 virtual void imbue ( const locale & )
  {
  }

private :
 _Elem * _Gfirst;
 _Elem * _Pfirst;
 _Elem * * _IGfirst;
 _Elem * * _IPfirst;
 _Elem * _Gnext;
 _Elem * _Pnext;
 _Elem * * _IGnext;
 _Elem * * _IPnext;

 int _Gcount;
 int _Pcount;
 int * _IGcount;
 int * _IPcount;

protected :
 locale * _Plocale;
 };
#line 473 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
template class __declspec(dllimport) basic_streambuf< char, char_traits< char> > ;
#line 474 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
template class __declspec(dllimport) basic_streambuf< __wchar_t, char_traits< __wchar_t> > ;
#line 484 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
template < class _Elem,
 class _Traits >
 class istreambuf_iterator
  : public iterator < input_iterator_tag,
   _Elem, typename _Traits :: off_type, const _Elem *, _Elem >
 {
 typedef istreambuf_iterator < _Elem, _Traits > _Myt;
public :
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef basic_streambuf < _Elem, _Traits > streambuf_type;
 typedef basic_istream < _Elem, _Traits > istream_type;

 typedef typename traits_type :: int_type int_type;
 typedef const _Elem * pointer;

 constexpr istreambuf_iterator ( streambuf_type * _Sb = 0 ) noexcept
  : _Strbuf ( _Sb ), _Got ( _Sb == 0 ), _Val ( )
  {
  }

 istreambuf_iterator ( istream_type & _Istr ) noexcept
  : _Strbuf ( _Istr . rdbuf ( ) ), _Got ( _Istr . rdbuf ( ) == 0 )
  {
  }

 _Elem operator * ( ) const
  {
  if ( ! _Got )
   _Peek ( );






  return ( _Val );
  }

 const _Elem * operator -> ( ) const
  {
  return ( pointer_traits < pointer > :: pointer_to ( * * this ) );
  }

 _Myt & operator ++ ( )
  {





  _Inc ( );
  return ( * this );
  }

 _Myt operator ++ ( int )
  {
  if ( ! _Got )
   _Peek ( );
  _Myt _Tmp = * this;
  ++ * this;
  return ( _Tmp );
  }

 bool equal ( const _Myt & _Right ) const
  {
  if ( ! _Got )
   _Peek ( );
  if ( ! _Right . _Got )
   _Right . _Peek ( );
  return ( ( _Strbuf == 0 && _Right . _Strbuf == 0 )
   || ( _Strbuf != 0 && _Right . _Strbuf != 0 ) );
  }

private :
 void _Inc ( )
  {
  if ( _Strbuf == 0
   || traits_type :: eq_int_type ( traits_type :: eof ( ),
    _Strbuf -> sbumpc ( ) ) )
   _Strbuf = 0, _Got = true;
  else
   _Got = false;
  }

 _Elem _Peek ( ) const
  {
  int_type _Meta;
  if ( _Strbuf == 0
   || traits_type :: eq_int_type ( traits_type :: eof ( ),
    _Meta = _Strbuf -> sgetc ( ) ) )
   _Strbuf = 0;
  else
   _Val = traits_type :: to_char_type ( _Meta );
  _Got = true;
  return ( _Val );
  }

 mutable streambuf_type * _Strbuf;
 mutable bool _Got;
 mutable _Elem _Val;
 };
#line 587 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
template< class _Elem, class 
#line 588 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
_Traits> 
#pragma pack(8)
#line 589 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
struct _Is_checked_helper< istreambuf_iterator< _Elem, _Traits> , void>  : public true_type { 
#line 592 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
}; 
#pragma pack()
#line 595 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
template < class _Elem,
 class _Traits > inline
 bool operator == (
  const istreambuf_iterator < _Elem, _Traits > & _Left,
  const istreambuf_iterator < _Elem, _Traits > & _Right )
 {
 return ( _Left . equal ( _Right ) );
 }
#line 604 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
template < class _Elem,
 class _Traits > inline
 bool operator != (
  const istreambuf_iterator < _Elem, _Traits > & _Left,
  const istreambuf_iterator < _Elem, _Traits > & _Right )
 {
 return ( ! ( _Left == _Right ) );
 }
#line 614 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
template < class _Elem,
 class _Traits >
 class ostreambuf_iterator
  : public _Outit
 {
 typedef ostreambuf_iterator < _Elem, _Traits > _Myt;
public :
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef basic_streambuf < _Elem, _Traits > streambuf_type;
 typedef basic_ostream < _Elem, _Traits > ostream_type;

 ostreambuf_iterator ( streambuf_type * _Sb ) noexcept
  : _Failed ( false ), _Strbuf ( _Sb )
  {
  }

 ostreambuf_iterator ( ostream_type & _Ostr ) noexcept
  : _Failed ( false ), _Strbuf ( _Ostr . rdbuf ( ) )
  {
  }

 _Myt & operator = ( _Elem _Right )
  {
  if ( _Strbuf == 0
   || traits_type :: eq_int_type ( _Traits :: eof ( ),
    _Strbuf -> sputc ( _Right ) ) )
   _Failed = true;
  return ( * this );
  }

 _Myt & operator * ( )
  {
  return ( * this );
  }

 _Myt & operator ++ ( )
  {
  return ( * this );
  }

 _Myt & operator ++ ( int )
  {
  return ( * this );
  }

 bool failed ( ) const noexcept
  {
  return ( _Failed );
  }

private :
 bool _Failed;
 streambuf_type * _Strbuf;
 };
#line 670 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
template< class _Elem, class 
#line 671 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
_Traits> 
#pragma pack(8)
#line 672 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
struct _Is_checked_helper< ostreambuf_iterator< _Elem, _Traits> , void>  : public true_type { 
#line 675 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
}; 
#pragma pack()
#line 676 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
}
#line 679 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
#pragma warning(pop)
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
#pragma warning(push,3)
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
#pragma warning(disable: 4189 4275)
#line 680 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf"
#pragma pack ( pop )
#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
#pragma pack ( push, 8 )
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
extern "C" {
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
__declspec(dllimport) extern float __cdecl _Stofx(const char *, char **, long, int *); 
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
__declspec(dllimport) extern double __cdecl _Stodx(const char *, char **, long, int *); 
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
__declspec(dllimport) extern long double __cdecl _Stoldx(const char *, char **, long, int *); 
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
__declspec(dllimport) extern long __cdecl _Stolx(const char *, char **, int, int *); 
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
__declspec(dllimport) extern unsigned long __cdecl _Stoulx(const char *, char **, int, int *); 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
__declspec(dllimport) extern __int64 __cdecl _Stollx(const char *, char **, int, int *); 
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
__declspec(dllimport) extern unsigned __int64 __cdecl _Stoullx(const char *, char **, int, int *); 
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
}
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
namespace std { 
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
inline double _Stodx_v2(const char *_Str, char **_Endptr, int _Pten, int *_Perr) 
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
{ 
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
int &_Errno_ref = *_errno(); 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
const int _Orig = _Errno_ref; 
#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
_Errno_ref = 0; 
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
double _Val = ::strtod(_Str, _Endptr); 
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
(*_Perr) = _Errno_ref; 
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
_Errno_ref = _Orig; 
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
if (_Pten != 0) { 
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
_Val *= ::pow((10.0), static_cast< double>(_Pten)); }  
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
return _Val; 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
} 
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
inline float _Stofx_v2(const char *_Str, char **_Endptr, int _Pten, int *_Perr) 
#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
{ 
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
int &_Errno_ref = *_errno(); 
#line 74 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
const int _Orig = _Errno_ref; 
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
_Errno_ref = 0; 
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
float _Val = ::strtof(_Str, _Endptr); 
#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
(*_Perr) = _Errno_ref; 
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
_Errno_ref = _Orig; 
#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
if (_Pten != 0) { 
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
_Val *= ::powf((10.0F), static_cast< float>(_Pten)); }  
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
return _Val; 
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
} 
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
template < class _Elem > inline
 size_t _Find_elem ( _Elem * _Base, _Elem _Ch )
 {
 _Elem * _Ptr = _Base;
 for (; * _Ptr != ( _Elem ) 0 && * _Ptr != _Ch; ++ _Ptr )
  ;
 return ( ( size_t ) ( _Ptr - _Base ) );
 }
#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
inline __wchar_t *_Maklocwcs(const __wchar_t *_Ptr) 
#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
{ 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
size_t _Count = ::wcslen(_Ptr) + (1); 
#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
__wchar_t *_Ptrdest = (__wchar_t *)calloc(_Count, sizeof(__wchar_t)); 
#line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
if (!_Ptrdest) { 
#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
_Xbad_alloc(); }  
#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
::wmemcpy(_Ptrdest, _Ptr, _Count); 
#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
return _Ptrdest; 
#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
} 
#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
template < class _Elem >
 class numpunct
  : public locale :: facet
 {
public :
 typedef basic_string < _Elem, char_traits < _Elem >, allocator < _Elem > >
  string_type;
 typedef _Elem char_type;

  __declspec ( dllimport ) static locale :: id id;

 _Elem decimal_point ( ) const
  {
  return ( do_decimal_point ( ) );
  }

 _Elem thousands_sep ( ) const
  {
  return ( do_thousands_sep ( ) );
  }

 string grouping ( ) const
  {
  return ( do_grouping ( ) );
  }

 string_type falsename ( ) const
  {
  return ( do_falsename ( ) );
  }

 string_type truename ( ) const
  {
  return ( do_truename ( ) );
  }

 explicit numpunct ( size_t _Refs = 0 )
  : locale :: facet ( _Refs )
  {
  { _Locinfo _Lobj;
   _Init ( _Lobj );
   if ( _Kseparator == 0 )
    _Kseparator =
     _Maklocchr ( ',', ( _Elem * ) 0, _Lobj . _Getcvt ( ) );
  }
  }

 numpunct ( const _Locinfo & _Lobj, size_t _Refs = 0, bool _Isdef = false )
  : locale :: facet ( _Refs )
  {
  _Init ( _Lobj, _Isdef );
  }

 static size_t _Getcat ( const locale :: facet * * _Ppf = 0,
  const locale * _Ploc = 0 )
  {
  if ( _Ppf != 0 && * _Ppf == 0 )
   * _Ppf = new numpunct < _Elem > (
    _Locinfo ( _Ploc -> c_str ( ) ), 0, true );
  return ( 4 );
  }

protected :
 virtual ~ numpunct ( ) noexcept
  {
  _Tidy ( );
  }

 numpunct ( const char * _Locname, size_t _Refs = 0, bool _Isdef = false )
  : locale :: facet ( _Refs )
  {
  { _Locinfo _Lobj ( _Locname );
   _Init ( _Lobj, _Isdef );
  }
  }

 template < class _Elem2 >
  void _Getvals ( _Elem2, const lconv * _Ptr, _Locinfo :: _Cvtvec _Cvt )
  {
  _Dp = _Maklocchr ( _Ptr -> decimal_point [ 0 ], ( _Elem2 * ) 0, _Cvt );
  _Kseparator = _Maklocchr ( _Ptr -> thousands_sep [ 0 ], ( _Elem2 * ) 0, _Cvt );
  }

 template < >
  void _Getvals ( wchar_t, const lconv * _Ptr, _Locinfo :: _Cvtvec )
  {
  _Dp = ( _Elem ) _Ptr -> _W_decimal_point [ 0 ];
  _Kseparator = ( _Elem ) _Ptr -> _W_thousands_sep [ 0 ];
  }

 void _Init ( const _Locinfo & _Lobj, bool _Isdef = false )
  {
  const lconv * _Ptr = _Lobj . _Getlconv ( );
  _Locinfo :: _Cvtvec _Cvt = _Lobj . _Getcvt ( );

  _Grouping = 0;
  _Falsename = 0;
  _Truename = 0;

  try {
  _Grouping = _Maklocstr ( _Isdef ? "" : _Ptr -> grouping, ( char * ) 0, _Lobj . _Getcvt ( ) );

  _Falsename = _Maklocstr ( _Lobj . _Getfalse ( ), ( _Elem * ) 0, _Cvt );
  _Truename = _Maklocstr ( _Lobj . _Gettrue ( ), ( _Elem * ) 0, _Cvt );
  } catch ( ... ) {
  _Tidy ( );
  throw;
  }

  if ( _Isdef )
   {

   _Dp = _Maklocchr ( '.', ( _Elem * ) 0, _Cvt );
   _Kseparator = _Maklocchr ( ',', ( _Elem * ) 0, _Cvt );
   }
  else
   _Getvals ( ( _Elem ) 0, _Ptr, _Cvt );
  }

 virtual _Elem do_decimal_point ( ) const
  {
  return ( _Dp );
  }

 virtual _Elem do_thousands_sep ( ) const
  {
  return ( _Kseparator );
  }

 virtual string do_grouping ( ) const
  {
  return ( string ( _Grouping ) );
  }

 virtual string_type do_falsename ( ) const
  {
  return ( string_type ( _Falsename ) );
  }

 virtual string_type do_truename ( ) const
  {
  return ( string_type ( _Truename ) );
  }

private :
 void _Tidy ( )
  {
  :: free ( ( void * ) _Grouping );
  :: free ( ( void * ) _Falsename );
  :: free ( ( void * ) _Truename );
  }

 const char * _Grouping;
 _Elem _Dp;
 _Elem _Kseparator;
 const _Elem * _Falsename;
 const _Elem * _Truename;
 };
#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
template < class _Elem >
 class numpunct_byname
  : public numpunct < _Elem >
 {
public :
 explicit numpunct_byname ( const char * _Locname, size_t _Refs = 0 )
  : numpunct < _Elem > ( _Locname, _Refs )
  {
  }

 explicit numpunct_byname ( const string & _Str, size_t _Refs = 0 )
  : numpunct < _Elem > ( _Str . c_str ( ), _Refs )
  {
  }

protected :
 virtual ~ numpunct_byname ( ) noexcept
  {
  }
 };
#line 293 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
template< class _Elem> locale::id 
#line 294 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
numpunct< _Elem> ::id; 
#line 297 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
template < class _Elem,
 class _InIt = istreambuf_iterator < _Elem, char_traits < _Elem > > >
 class num_get
  : public locale :: facet
 {
public :
 typedef numpunct < _Elem > _Mypunct;
 typedef basic_string < _Elem, char_traits < _Elem >, allocator < _Elem > >
  _Mystr;

 static size_t __cdecl _Getcat ( const locale :: facet * * _Ppf = 0,
  const locale * _Ploc = 0 )
  {
  if ( _Ppf != 0 && * _Ppf == 0 )
   * _Ppf = new num_get < _Elem, _InIt > (
    _Locinfo ( _Ploc -> c_str ( ) ) );
  return ( 4 );
  }

  static locale :: id id;

protected :
 virtual ~ num_get ( ) noexcept
  {
  }

 void _Init ( const _Locinfo & )
  {
  }

public :
 explicit num_get ( size_t _Refs = 0 )
  : locale :: facet ( _Refs )
  {
  { _Locinfo _Lobj;
   _Init ( _Lobj );
  }
  }

  num_get ( const _Locinfo & _Lobj, size_t _Refs = 0 )
  : locale :: facet ( _Refs )
  {
  _Init ( _Lobj );
  }

 typedef _Elem char_type;
 typedef _InIt iter_type;

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   bool & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   unsigned short & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   unsigned int & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   long & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   unsigned long & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   long long & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   unsigned long long & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   float & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   double & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   long double & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   void * & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

protected :
 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   bool & _Val ) const
  {
  ;
  int _Ans = - 1;

  if ( _Iosbase . flags ( ) & ios_base :: boolalpha )
   {
   typedef typename _Mystr :: size_type _Mystrsize;
   const _Mypunct & _Punct_fac = use_facet < _Mypunct > ( _Iosbase . getloc ( ) );
   _Mystr _Str ( ( _Mystrsize ) 1, ( char_type ) 0 );
   _Str += _Punct_fac . falsename ( );
   _Str += ( char_type ) 0;
   _Str += _Punct_fac . truename ( );
   _Ans = _Getloctxt ( _First, _Last, ( size_t ) 2, _Str . c_str ( ) );
   }
  else
   {
   char _Ac [ 32 ], * _Ep;
   int _Errno = 0;
   const unsigned long _Ulo = :: _Stoulx ( _Ac, & _Ep,
    _Getifld ( _Ac, _First, _Last, _Iosbase . flags ( ),
     _Iosbase . getloc ( ) ), & _Errno );
   if ( _Ep != _Ac && _Errno == 0 && _Ulo <= 1 )
    _Ans = _Ulo;
   }

  if ( _First == _Last )
   _State |= ios_base :: eofbit;
  if ( _Ans < 0 )
   _State |= ios_base :: failbit;
  else
   _Val = _Ans != 0;
  return ( _First );
  }

 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   unsigned short & _Val ) const
  {
  ;
  char _Ac [ 32 ], * _Ep;
  int _Errno = 0;
  int _Base = _Getifld ( _Ac, _First, _Last, _Iosbase . flags ( ),
   _Iosbase . getloc ( ) );
  char * _Ptr = _Ac [ 0 ] == '-' ? _Ac + 1 : _Ac;
  const unsigned long _Ans =
   :: _Stoulx ( _Ptr, & _Ep, _Base, & _Errno );

  if ( _First == _Last )
   _State |= ios_base :: eofbit;
  if ( _Ep == _Ptr || _Errno != 0 || 65535 < _Ans )
   _State |= ios_base :: failbit;
  else
   _Val = ( unsigned short ) ( _Ac [ 0 ] == '-'
    ? 0 - _Ans : _Ans );
  return ( _First );
  }

 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   unsigned int & _Val ) const
  {
  ;
  char _Ac [ 32 ], * _Ep;
  int _Errno = 0;
  int _Base = _Getifld ( _Ac, _First, _Last, _Iosbase . flags ( ),
   _Iosbase . getloc ( ) );
  char * _Ptr = _Ac [ 0 ] == '-' ? _Ac + 1 : _Ac;
  const unsigned long _Ans =
   :: _Stoulx ( _Ptr, & _Ep, _Base, & _Errno );

  if ( _First == _Last )
   _State |= ios_base :: eofbit;
  if ( _Ep == _Ptr || _Errno != 0 || 4294967295U < _Ans )
   _State |= ios_base :: failbit;
  else
   _Val = _Ac [ 0 ] == '-' ? 0 - _Ans : _Ans;
  return ( _First );
  }

 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   long & _Val ) const
  {
  ;
  char _Ac [ 32 ], * _Ep;
  int _Errno = 0;
  const long _Ans = :: _Stolx ( _Ac, & _Ep,
   _Getifld ( _Ac, _First, _Last, _Iosbase . flags ( ),
    _Iosbase . getloc ( ) ), & _Errno );

  if ( _First == _Last )
   _State |= ios_base :: eofbit;
  if ( _Ep == _Ac || _Errno != 0 )
   _State |= ios_base :: failbit;
  else
   _Val = _Ans;
  return ( _First );
  }

 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   unsigned long & _Val ) const
  {
  ;
  char _Ac [ 32 ], * _Ep;
  int _Errno = 0;
  const unsigned long _Ans = :: _Stoulx ( _Ac, & _Ep,
   _Getifld ( _Ac, _First, _Last, _Iosbase . flags ( ),
    _Iosbase . getloc ( ) ), & _Errno );

  if ( _First == _Last )
   _State |= ios_base :: eofbit;
  if ( _Ep == _Ac || _Errno != 0 )
   _State |= ios_base :: failbit;
  else
   _Val = _Ans;
  return ( _First );
  }

 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   long long & _Val ) const
  {
  ;
  char _Ac [ 32 ], * _Ep;
  int _Errno = 0;
  const long long _Ans = :: _Stollx ( _Ac, & _Ep,
   _Getifld ( _Ac, _First, _Last, _Iosbase . flags ( ),
    _Iosbase . getloc ( ) ), & _Errno );

  if ( _First == _Last )
   _State |= ios_base :: eofbit;
  if ( _Ep == _Ac || _Errno != 0 )
   _State |= ios_base :: failbit;
  else
   _Val = _Ans;
  return ( _First );
  }

 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   unsigned long long & _Val ) const
  {
  ;
  char _Ac [ 32 ], * _Ep;
  int _Errno = 0;
  const unsigned long long _Ans = :: _Stoullx ( _Ac, & _Ep,
   _Getifld ( _Ac, _First, _Last, _Iosbase . flags ( ),
    _Iosbase . getloc ( ) ), & _Errno );

  if ( _First == _Last )
   _State |= ios_base :: eofbit;
  if ( _Ep == _Ac || _Errno != 0 )
   _State |= ios_base :: failbit;
  else
   _Val = _Ans;
  return ( _First );
  }







 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   float & _Val ) const
  {
  ;
  char _Ac [ ( 8 + 768 + 16 ) ], * _Ep;
  int _Errno = 0;
  int _Hexexp = 1000000000;
  float _Ans = _Stofx_v2 ( _Ac, & _Ep,
   _Getffld ( _Ac, _First, _Last,
    _Iosbase, & _Hexexp ), & _Errno );

  if ( _Hexexp != 1000000000 && _Hexexp != 0 )
   _Ans = :: ldexpf ( _Ans, 4 * _Hexexp );

  if ( _First == _Last )
   _State |= ios_base :: eofbit;
  if ( _Ep == _Ac || _Errno != 0 )
   _State |= ios_base :: failbit;
  else
   _Val = _Ans;
  return ( _First );
  }

 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   double & _Val ) const
  {
  ;
  char _Ac [ ( 8 + 768 + 16 ) ], * _Ep;
  int _Errno = 0;
  int _Hexexp = 1000000000;
  double _Ans = _Stodx_v2 ( _Ac, & _Ep,
   _Getffld ( _Ac, _First, _Last,
    _Iosbase, & _Hexexp ), & _Errno );

  if ( _Hexexp != 1000000000 && _Hexexp != 0 )
   _Ans = :: ldexp ( _Ans, 4 * _Hexexp );

  if ( _First == _Last )
   _State |= ios_base :: eofbit;
  if ( _Ep == _Ac || _Errno != 0 )
   _State |= ios_base :: failbit;
  else
   _Val = _Ans;
  return ( _First );
  }

 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   long double & _Val ) const
  {
  ;
  char _Ac [ ( 8 + 768 + 16 ) ], * _Ep;
  int _Errno = 0;
  int _Hexexp = 1000000000;
  long double _Ans = _Stodx_v2 ( _Ac, & _Ep,
   _Getffld ( _Ac, _First, _Last,
    _Iosbase, & _Hexexp ), & _Errno );

  if ( _Hexexp != 1000000000 && _Hexexp != 0 )
   _Ans = :: ldexpl ( _Ans, 4 * _Hexexp );

  if ( _First == _Last )
   _State |= ios_base :: eofbit;
  if ( _Ep == _Ac || _Errno != 0 )
   _State |= ios_base :: failbit;
  else
   _Val = _Ans;
  return ( _First );
  }



 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   void * & _Val ) const
  {
  ;
  char _Ac [ 32 ], * _Ep;
  int _Errno = 0;

  int _Base = _Getifld ( _Ac, _First, _Last, ios_base :: hex,
   _Iosbase . getloc ( ) );
  const unsigned long long _Ans =
   ( sizeof ( void * ) == sizeof ( unsigned long ) )
    ? ( unsigned long long ) :: _Stoulx ( _Ac, & _Ep, _Base, & _Errno )
    : :: _Stoullx ( _Ac, & _Ep, _Base, & _Errno );

  if ( _First == _Last )
   _State |= ios_base :: eofbit;
  if ( _Ep == _Ac || _Errno != 0 )
   _State |= ios_base :: failbit;
  else
   _Val = ( void * ) ( ( char * ) 0 + _Ans );
  return ( _First );
  }

private :
 int __cdecl _Getifld ( char * _Ac,
  _InIt & _First, _InIt & _Last, ios_base :: fmtflags _Basefield,
   const locale & _Loc ) const
  {
  const _Mypunct & _Punct_fac = use_facet < _Mypunct > ( _Loc );
  const string _Grouping = _Punct_fac . grouping ( );
  const _Elem _Kseparator = _Grouping . size ( ) == 0
   ? ( _Elem ) 0 : _Punct_fac . thousands_sep ( );

  enum {
   _NUMGET_SIGNOFF = 22,
   _NUMGET_XOFF = 24 };
  static const char _Src [ ] = { "0123456789ABCDEFabcdef-+Xx" };
  _Elem _Atoms [ sizeof ( _Src ) ];
  const ctype < _Elem > & _Ctype_fac =
   use_facet < ctype < _Elem > > ( _Loc );
  _Ctype_fac . widen ( & _Src [ 0 ], & _Src [ sizeof ( _Src ) ], _Atoms );

  char * _Ptr = _Ac;

  if ( _First == _Last )
   ;
  else if ( * _First == _Atoms [ _NUMGET_SIGNOFF + 1 ] )
   * _Ptr ++ = '+', ++ _First;
  else if ( * _First == _Atoms [ _NUMGET_SIGNOFF ] )
   * _Ptr ++ = '-', ++ _First;

  _Basefield &= ios_base :: basefield;
  int _Base = _Basefield == ios_base :: oct ? 8
   : _Basefield == ios_base :: hex ? 16
   : _Basefield == ios_base :: _Fmtzero ? 0 : 10;

  bool _Seendigit = false;
  bool _Nonzero = false;

  if ( _First != _Last && * _First == _Atoms [ 0 ] )
   {
   _Seendigit = true, ++ _First;
   if ( _First != _Last && ( * _First == _Atoms [ _NUMGET_XOFF + 1 ]
     || * _First == _Atoms [ _NUMGET_XOFF ] )
    && ( _Base == 0 || _Base == 16 ) )
    _Base = 16, _Seendigit = false, ++ _First;
   else if ( _Base == 0 )
    _Base = 8;
   }

  size_t _Dlen = _Base == 0 || _Base == 10 ? 10
   : _Base == 8 ? 8 : 16 + 6;
  string _Groups ( ( size_t ) 1, ( char ) _Seendigit );
  size_t _Group = 0;

  for ( char * const _Pe = & _Ac [ 32 - 1 ];
   _First != _Last; ++ _First )
   {
   size_t _Idx = _Find_elem ( _Atoms, * _First );
   if ( _Idx < _Dlen )
    {
    * _Ptr = _Src [ _Idx ];
    if ( ( _Nonzero || * _Ptr != '0' ) && _Ptr < _Pe )
     ++ _Ptr, _Nonzero = true;
    _Seendigit = true;
    if ( _Groups [ _Group ] != 127 )
     ++ _Groups [ _Group ];
    }
   else if ( _Groups [ _Group ] == '\000'
    || _Kseparator == ( _Elem ) 0
    || * _First != _Kseparator )
    break;
   else
    {
    _Groups . append ( ( string :: size_type ) 1, '\000' );
    ++ _Group;
    }
   }

  if ( _Group == 0 )
   ;
  else if ( '\000' < _Groups [ _Group ] )
   ++ _Group;
  else
   _Seendigit = false;

  for ( const char * _Pg = & _Grouping [ 0 ]; _Seendigit && 0 < _Group; )
   if ( * _Pg == 127 )
    break;
   else if ( ( 0 < -- _Group && * _Pg != _Groups [ _Group ] )
    || ( 0 == _Group && * _Pg < _Groups [ _Group ] ) )
    _Seendigit = false;
   else if ( '\000' < _Pg [ 1 ] )
    ++ _Pg;

  if ( _Seendigit && ! _Nonzero )
   * _Ptr ++ = '0';
  else if ( ! _Seendigit )
   _Ptr = _Ac;
  * _Ptr = '\000';
  return ( _Base );
  }

 int __cdecl _Getffld ( char * _Ac,
  _InIt & _First, _InIt & _Last,
  ios_base & _Iosbase, int * _Phexexp ) const
  {
  if ( ( _Iosbase . flags ( ) & ios_base :: floatfield ) == ios_base :: hexfloat )
   return ( _Getffldx ( _Ac, _First, _Last,
    _Iosbase, _Phexexp ) );

  const _Mypunct & _Punct_fac = use_facet < _Mypunct > ( _Iosbase . getloc ( ) );
  const string _Grouping = _Punct_fac . grouping ( );
  char * _Ptr = _Ac;
  bool _Bad = false;
  bool _Sticky = false;

  enum {
   _NUMGET_SIGNOFF = 10,
   _NUMGET_EOFF = 12 };
  static const char _Src [ ] = { "0123456789-+Ee" };
  _Elem _Atoms [ sizeof ( _Src ) ];
  const ctype < _Elem > & _Ctype_fac =
   use_facet < ctype < _Elem > > ( _Iosbase . getloc ( ) );
  _Ctype_fac . widen ( & _Src [ 0 ], & _Src [ sizeof ( _Src ) ], _Atoms );

  if ( _First == _Last )
   ;
  else if ( * _First == _Atoms [ _NUMGET_SIGNOFF + 1 ] )
   * _Ptr ++ = '+', ++ _First;
  else if ( * _First == _Atoms [ _NUMGET_SIGNOFF ] )
   * _Ptr ++ = '-', ++ _First;

  char * _Leading = _Ptr;
  * _Ptr ++ = '0';

  bool _Seendigit = false;
  int _Significant = 0;
  int _Pten = 0;
  size_t _Idx;

  const int _Max_sig_dig = ( * _Phexexp == 1000000000 ? 768 : 36 );

  const char * _Pg = & _Grouping [ 0 ];
  if ( * _Pg == 127 || * _Pg <= '\000' )
   for (; _First != _Last
    && ( _Idx = _Find_elem ( _Atoms, * _First ) ) < 10;
     _Seendigit = true, ++ _First )
    if ( _Max_sig_dig <= _Significant )
     {
     ++ _Pten;
     if ( 0 < _Idx )
      _Sticky = true;
     }
    else if ( _Idx == 0 && _Significant == 0 )
     ;
    else
     {
     * _Ptr ++ = _Src [ _Idx ];
     ++ _Significant;
     }
  else
   {
   const _Elem _Kseparator = _Grouping . size ( ) == 0
    ? ( _Elem ) 0 : _Punct_fac . thousands_sep ( );
   string _Groups ( ( size_t ) 1, '\000' );
   size_t _Group = 0;

   for (; _First != _Last; ++ _First )
    if ( ( _Idx = _Find_elem ( _Atoms, * _First ) ) < 10 )
     {
     _Seendigit = true;
     if ( _Max_sig_dig <= _Significant )
      {
      ++ _Pten;
      if ( 0 < _Idx )
       _Sticky = true;
      }
     else if ( _Idx == 0 && _Significant == 0 )
      ;
     else
      {
      * _Ptr ++ = _Src [ _Idx ];
      ++ _Significant;
      }
     if ( _Groups [ _Group ] != 127 )
      ++ _Groups [ _Group ];
     }
    else if ( _Groups [ _Group ] == '\000'
     || _Kseparator == ( _Elem ) 0
     || * _First != _Kseparator )
     break;
    else
     {
     _Groups . append ( ( size_t ) 1, '\000' );
     ++ _Group;
     }
   if ( _Group == 0 )
    ;
   else if ( '\000' < _Groups [ _Group ] )
    ++ _Group;
   else
    _Bad = true;

   while ( ! _Bad && 0 < _Group )
    if ( * _Pg == 127 )
     break;
    else if ( ( 0 < -- _Group && * _Pg != _Groups [ _Group ] )
     || ( 0 == _Group && * _Pg < _Groups [ _Group ] ) )
     _Bad = true;
    else if ( '\000' < _Pg [ 1 ] )
     ++ _Pg;
   }

  if ( _First != _Last && * _First == _Punct_fac . decimal_point ( ) )
   * _Ptr ++ = localeconv ( ) -> decimal_point [ 0 ], ++ _First;

  if ( * _Phexexp != 1000000000 && _Significant == 0 )
   {
   for (; _First != _Last && * _First == _Atoms [ 0 ];
    _Seendigit = true, ++ _First )
    -- _Pten;
   if ( _Pten < 0 )
    * _Ptr ++ = '0', ++ _Pten;
   }

  for (; _First != _Last
    && ( _Idx = _Find_elem ( _Atoms, * _First ) ) < 10;
    _Seendigit = true, ++ _First )
   if ( _Significant < _Max_sig_dig )
    {
    * _Ptr ++ = _Src [ _Idx ];
    ++ _Significant;
    }
   else if ( 0 < _Idx )
    _Sticky = true;

  if ( _Sticky )
   {
   char * _Px = _Ptr;
   for (; -- _Px != _Leading; )
    {
    if ( * _Px == localeconv ( ) -> decimal_point [ 0 ] )
     ;
    else if ( * _Px != '9' )
     {
     ++ * _Px;
     break;
     }
    else
     * _Px = '0';
    }

   if ( _Px == _Leading )
    {
    * _Px = '1';
    ++ _Pten;
    }
   }

  if ( _Seendigit && _First != _Last
   && ( * _First == _Atoms [ _NUMGET_EOFF + 1 ]
    || * _First == _Atoms [ _NUMGET_EOFF ] ) )
   {
   * _Ptr ++ = 'e', ++ _First;
   _Seendigit = false, _Significant = 0;

   if ( _First == _Last )
    ;
   else if ( * _First == _Atoms [ _NUMGET_SIGNOFF + 1 ] )
    * _Ptr ++ = '+', ++ _First;
   else if ( * _First == _Atoms [ _NUMGET_SIGNOFF ] )
    * _Ptr ++ = '-', ++ _First;
   for (; _First != _Last && * _First == _Atoms [ 0 ]; )
    _Seendigit = true, ++ _First;
   if ( _Seendigit )
    * _Ptr ++ = '0';
   for (; _First != _Last
    && ( _Idx = _Find_elem ( _Atoms, * _First ) ) < 10;
    _Seendigit = true, ++ _First )
    if ( _Significant < 8 )
     {
     * _Ptr ++ = _Src [ _Idx ];
     ++ _Significant;
     }
   }

  if ( _Bad || ! _Seendigit )
   _Ptr = _Ac;
  * _Ptr = '\000';
  return ( _Pten );
  }

 int __cdecl _Getffldx ( char * _Ac,
  _InIt & _First, _InIt & _Last,
  ios_base & _Iosbase, int * _Phexexp ) const
  {
  const _Mypunct & _Punct_fac = use_facet < _Mypunct > ( _Iosbase . getloc ( ) );
  const string _Grouping = _Punct_fac . grouping ( );

  enum {
   _NUMGET_SIGNOFF = 22,
   _NUMGET_XOFF = 24,
   _NUMGET_POFF = 26 };
  static const char _Src [ ] = { "0123456789ABCDEFabcdef-+XxPp" };
  _Elem _Atoms [ sizeof ( _Src ) ];
  const ctype < _Elem > & _Ctype_fac =
   use_facet < ctype < _Elem > > ( _Iosbase . getloc ( ) );
  _Ctype_fac . widen ( & _Src [ 0 ], & _Src [ sizeof ( _Src ) ], _Atoms );

  char * _Ptr = _Ac;
  bool _Bad = false;
  size_t _Idx;

  if ( _First == _Last )
   ;
  else if ( * _First == _Atoms [ _NUMGET_SIGNOFF + 1 ] )
   * _Ptr ++ = '+', ++ _First;
  else if ( * _First == _Atoms [ _NUMGET_SIGNOFF ] )
   * _Ptr ++ = '-', ++ _First;

  * _Ptr ++ = '0';
  * _Ptr ++ = 'x';

  bool _Seendigit = false;
  int _Significant = 0;
  int _Phex = 0;

  if ( _First == _Last || * _First != _Atoms [ 0 ] )
   ;
  else if ( ++ _First != _Last
   && ( * _First == _Atoms [ _NUMGET_XOFF + 1 ]
    || * _First == _Atoms [ _NUMGET_XOFF ] ) )
   ++ _First;
  else
   _Seendigit = true;

  const int _Max_sig_dig = ( * _Phexexp == 1000000000 ? 768 : 36 );

  const char * _Pg = & _Grouping [ 0 ];
  if ( * _Pg == 127 || * _Pg <= '\000' )
   for (; _First != _Last
    && ( _Idx = _Find_elem ( _Atoms, * _First ) ) < _NUMGET_SIGNOFF;
     _Seendigit = true, ++ _First )
    if ( _Max_sig_dig <= _Significant )
     ++ _Phex;
    else if ( _Idx == 0 && _Significant == 0 )
     ;
    else
     {
     * _Ptr ++ = _Src [ _Idx ];
     ++ _Significant;
     }
  else
   {
   const _Elem _Kseparator = _Grouping . size ( ) == 0
    ? ( _Elem ) 0 : _Punct_fac . thousands_sep ( );
   string _Groups ( ( size_t ) 1, '\000' );
   size_t _Group = 0;

   for (; _First != _Last; ++ _First )
    if ( ( _Idx = _Find_elem ( _Atoms, * _First ) ) < _NUMGET_SIGNOFF )
     {
     _Seendigit = true;
     if ( _Max_sig_dig <= _Significant )
      ++ _Phex;
     else if ( _Idx == 0 && _Significant == 0 )
      ;
     else
      {
      * _Ptr ++ = _Src [ _Idx ];
      ++ _Significant;
      }
     if ( _Groups [ _Group ] != 127 )
      ++ _Groups [ _Group ];
     }
    else if ( _Groups [ _Group ] == '\000'
     || _Kseparator == ( _Elem ) 0
     || * _First != _Kseparator )
     break;
    else
     {
     _Groups . append ( ( size_t ) 1, '\000' );
     ++ _Group;
     }
   if ( _Group == 0 )
    ;
   else if ( '\000' < _Groups [ _Group ] )
    ++ _Group;
   else
    _Bad = true;

   while ( ! _Bad && 0 < _Group )
    if ( * _Pg == 127 )
     break;
    else if ( ( 0 < -- _Group && * _Pg != _Groups [ _Group ] )
     || ( 0 == _Group && * _Pg < _Groups [ _Group ] ) )
     _Bad = true;
    else if ( '\000' < _Pg [ 1 ] )
     ++ _Pg;
   }

  if ( _Seendigit && _Significant == 0 )
   * _Ptr ++ = '0';

  if ( _First != _Last && * _First == _Punct_fac . decimal_point ( ) )
   * _Ptr ++ = localeconv ( ) -> decimal_point [ 0 ], ++ _First;

  if ( _Significant == 0 )
   {
   for (; _First != _Last && * _First == _Atoms [ 0 ];
    _Seendigit = true, ++ _First )
    -- _Phex;
   if ( _Phex < 0 )
    * _Ptr ++ = '0', ++ _Phex;
   }

  for (; _First != _Last
    && ( _Idx = _Find_elem ( _Atoms, * _First ) ) < _NUMGET_SIGNOFF;
    _Seendigit = true, ++ _First )
   if ( _Significant < _Max_sig_dig )
    {
    * _Ptr ++ = _Src [ _Idx ];
    ++ _Significant;
    }

  if ( _Seendigit && _First != _Last
   && ( * _First == _Atoms [ _NUMGET_POFF + 1 ]
    || * _First == _Atoms [ _NUMGET_POFF ] ) )
   {
   * _Ptr ++ = 'p', ++ _First;
   _Seendigit = false, _Significant = 0;

   if ( _First == _Last )
    ;
   else if ( * _First == _Atoms [ _NUMGET_SIGNOFF + 1 ] )
    * _Ptr ++ = '+', ++ _First;
   else if ( * _First == _Atoms [ _NUMGET_SIGNOFF ] )
    * _Ptr ++ = '-', ++ _First;
   for (; _First != _Last && * _First == _Atoms [ 0 ]; )
    _Seendigit = true, ++ _First;
   if ( _Seendigit )
    * _Ptr ++ = '0';
   for (; _First != _Last
    && ( _Idx = _Find_elem ( _Atoms, * _First ) ) < _NUMGET_SIGNOFF;
    _Seendigit = true, ++ _First )
    if ( _Significant < 8 )
     {
     * _Ptr ++ = _Src [ _Idx ];
     ++ _Significant;
     }
   }

  if ( _Bad || ! _Seendigit )
   _Ptr = _Ac;
  * _Ptr = '\000';
  * _Phexexp = _Phex;
  return ( 0 );
  }



 };
#line 1151 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
template< class _Elem, class 
#line 1152 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
_InIt> locale::id 
#line 1153 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
num_get< _Elem, _InIt> ::id; 
#line 1156 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
template < class _Elem,
 class _OutIt = ostreambuf_iterator < _Elem, char_traits < _Elem > > >
 class num_put
  : public locale :: facet
 {
public :
 typedef numpunct < _Elem > _Mypunct;
 typedef basic_string < _Elem, char_traits < _Elem >, allocator < _Elem > >
  _Mystr;

 static size_t __cdecl _Getcat ( const locale :: facet * * _Ppf = 0,
  const locale * _Ploc = 0 )
  {
  if ( _Ppf != 0 && * _Ppf == 0 )
   * _Ppf = new num_put < _Elem, _OutIt > (
    _Locinfo ( _Ploc -> c_str ( ) ) );
  return ( 4 );
  }

  static locale :: id id;

protected :
 virtual ~ num_put ( ) noexcept
  {
  }

 void _Init ( const _Locinfo & )
  {
  }

public :
 explicit num_put ( size_t _Refs = 0 )
  : locale :: facet ( _Refs )
  {
  { _Locinfo _Lobj;
   _Init ( _Lobj );
  }
  }

  num_put ( const _Locinfo & _Lobj, size_t _Refs = 0 )
  : locale :: facet ( _Refs )
  {
  _Init ( _Lobj );
  }

 typedef _Elem char_type;
 typedef _OutIt iter_type;

 _OutIt put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, bool _Val ) const
  {
  return ( do_put ( _Dest, _Iosbase, _Fill, _Val ) );
  }

 _OutIt put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, long _Val ) const
  {
  return ( do_put ( _Dest, _Iosbase, _Fill, _Val ) );
  }

 _OutIt put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, unsigned long _Val ) const
  {
  return ( do_put ( _Dest, _Iosbase, _Fill, _Val ) );
  }

 _OutIt put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, long long _Val ) const
  {
  return ( do_put ( _Dest, _Iosbase, _Fill, _Val ) );
  }

 _OutIt put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, unsigned long long _Val ) const
  {
  return ( do_put ( _Dest, _Iosbase, _Fill, _Val ) );
  }

 _OutIt put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, double _Val ) const
  {
  return ( do_put ( _Dest, _Iosbase, _Fill, _Val ) );
  }

 _OutIt put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, long double _Val ) const
  {
  return ( do_put ( _Dest, _Iosbase, _Fill, _Val ) );
  }

 _OutIt put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, const void * _Val ) const
  {
  return ( do_put ( _Dest, _Iosbase, _Fill, _Val ) );
  }

protected :
 virtual _OutIt do_put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, bool _Val ) const
  {
  ;
  if ( ! ( _Iosbase . flags ( ) & ios_base :: boolalpha ) )
   return ( do_put ( _Dest, _Iosbase, _Fill, ( long ) _Val ) );
  else
   {
   const _Mypunct & _Punct_fac = use_facet < _Mypunct > ( _Iosbase . getloc ( ) );
   _Mystr _Str;
   if ( _Val )
    _Str . assign ( _Punct_fac . truename ( ) );
   else
    _Str . assign ( _Punct_fac . falsename ( ) );

   size_t _Fillcount = _Iosbase . width ( ) <= 0
    || ( size_t ) _Iosbase . width ( ) <= _Str . size ( )
     ? 0 : ( size_t ) _Iosbase . width ( ) - _Str . size ( );

   if ( ( _Iosbase . flags ( ) & ios_base :: adjustfield ) != ios_base :: left )
    {
    _Dest = _Rep ( _Dest, _Fill, _Fillcount );
    _Fillcount = 0;
    }
   _Dest = _Put ( _Dest, _Str . c_str ( ), _Str . size ( ) );
   _Iosbase . width ( 0 );
   return ( _Rep ( _Dest, _Fill, _Fillcount ) );
   }
  }

 virtual _OutIt do_put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, long _Val ) const
  {
  char _Buf [ 2 * 32 ], _Fmt [ 6 ];

  return ( _Iput ( _Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s ( _Buf, sizeof ( _Buf ), _Ifmt ( _Fmt, "ld",
    _Iosbase . flags ( ) ), _Val ) ) );
  }

 virtual _OutIt do_put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, unsigned long _Val ) const
  {
  char _Buf [ 2 * 32 ], _Fmt [ 6 ];

  return ( _Iput ( _Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s ( _Buf, sizeof ( _Buf ), _Ifmt ( _Fmt, "lu",
    _Iosbase . flags ( ) ), _Val ) ) );
  }

 virtual _OutIt do_put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, long long _Val ) const
  {
  char _Buf [ 2 * 32 ], _Fmt [ 8 ];

  return ( _Iput ( _Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s ( _Buf, sizeof ( _Buf ), _Ifmt ( _Fmt, "Ld",
    _Iosbase . flags ( ) ), _Val ) ) );
  }

 virtual _OutIt do_put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, unsigned long long _Val ) const
  {
  char _Buf [ 2 * 32 ], _Fmt [ 8 ];

  return ( _Iput ( _Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s ( _Buf, sizeof ( _Buf ), _Ifmt ( _Fmt, "Lu",
    _Iosbase . flags ( ) ), _Val ) ) );
  }

 virtual _OutIt do_put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, double _Val ) const
  {
  string _Buf;
  char _Fmt [ 8 ];
  bool _Isfixed = ( _Iosbase . flags ( ) & ios_base :: floatfield )
   == ios_base :: fixed;
  streamsize _Precision = _Iosbase . precision ( ) <= 0 && ! _Isfixed
   ? 6 : _Iosbase . precision ( );
  size_t _Bufsize = ( size_t ) _Precision;
  if ( _Isfixed && (10000000000.0) < :: fabs ( _Val ) )
   {
   int _Ptwo;
   ( void ) :: frexp ( _Val, & _Ptwo );
   _Bufsize += :: abs ( _Ptwo ) * 30103L / 100000L;
   }
  _Buf . resize ( _Bufsize + 50 );

  int _Ngen = :: sprintf_s ( ( char * ) _Buf . c_str ( ), _Buf . size ( ),
   _Ffmt ( _Fmt, 0, _Iosbase . flags ( ) ), ( int ) _Precision, _Val );

  return ( _Fput ( _Dest, _Iosbase, _Fill, _Buf . c_str ( ), _Ngen ) );
  }

 virtual _OutIt do_put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, long double _Val ) const
  {
  string _Buf;
  char _Fmt [ 8 ];
  bool _Isfixed = ( _Iosbase . flags ( ) & ios_base :: floatfield )
   == ios_base :: fixed;
  streamsize _Precision = _Iosbase . precision ( ) <= 0 && ! _Isfixed
   ? 6 : _Iosbase . precision ( );
  size_t _Bufsize = ( size_t ) _Precision;
  if ( _Isfixed && (10000000000.0) < :: fabsl ( _Val ) )
   {
   int _Ptwo;
   ( void ) :: frexpl ( _Val, & _Ptwo );
   _Bufsize += :: abs ( _Ptwo ) * 30103L / 100000L;
   }
  _Buf . resize ( _Bufsize + 50 );

  int _Ngen = :: sprintf_s ( ( char * ) _Buf . c_str ( ), _Buf . size ( ),
   _Ffmt ( _Fmt, 'L', _Iosbase . flags ( ) ), ( int ) _Precision, _Val );

  return ( _Fput ( _Dest, _Iosbase, _Fill, _Buf . c_str ( ), _Ngen ) );
  }

 virtual _OutIt do_put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, const void * _Val ) const
  {
  char _Buf [ 2 * 32 ];

  return ( _Iput ( _Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s ( _Buf, sizeof ( _Buf ), "%p", _Val ) ) );
  }

private :
 char * __cdecl _Ffmt ( char * _Fmt,
  char _Spec, ios_base :: fmtflags _Flags ) const
  {
  char * _Ptr = _Fmt;
  * _Ptr ++ = '%';

  if ( _Flags & ios_base :: showpos )
   * _Ptr ++ = '+';
  if ( _Flags & ios_base :: showpoint )
   * _Ptr ++ = '#';
  * _Ptr ++ = '.';
  * _Ptr ++ = '*';
  if ( _Spec != '\000' )
   * _Ptr ++ = _Spec;

  ios_base :: fmtflags _Ffl = _Flags & ios_base :: floatfield;
  if ( _Flags & ios_base :: uppercase )
   * _Ptr ++ = _Ffl == ios_base :: fixed ? 'f'
    : _Ffl == ios_base :: hexfloat ? 'A'
    : _Ffl == ios_base :: scientific ? 'E' : 'G';
  else
   * _Ptr ++ = _Ffl == ios_base :: fixed ? 'f'
    : _Ffl == ios_base :: hexfloat ? 'a'
    : _Ffl == ios_base :: scientific ? 'e' : 'g';

  * _Ptr = '\000';
  return ( _Fmt );
  }

 _OutIt __cdecl _Fput ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, const char * _Buf,
   size_t _Count ) const
  {
  ;
  size_t _Prefix = 0 < _Count && ( * _Buf == '+' || * _Buf == '-' )
   ? 1 : 0;

  const char * _Exps;
  if ( ( _Iosbase . flags ( ) & ios_base :: floatfield ) != ios_base :: hexfloat )
   _Exps = "eE";
  else
   {
   _Exps = "pP";
   if ( _Prefix + 2 <= _Count && _Buf [ _Prefix ] == '0'
    && ( _Buf [ _Prefix + 1 ] == 'x' || _Buf [ _Prefix + 1 ] == 'X' ) )
    _Prefix += 2;
   }
  const size_t _Eoff =
   :: strcspn ( & _Buf [ 0 ], _Exps );
  char _Dp [ 2 ] = { "." };
  _Dp [ 0 ] = :: localeconv ( ) -> decimal_point [ 0 ];
  const size_t _Poff =
   :: strcspn ( & _Buf [ 0 ], & _Dp [ 0 ] );

  const ctype < _Elem > & _Ctype_fac =
   use_facet < ctype < _Elem > > ( _Iosbase . getloc ( ) );
  _Mystr _Groupstring ( _Count, _Elem ( 0 ) );
  _Ctype_fac . widen ( & _Buf [ 0 ], & _Buf [ _Count ], & _Groupstring [ 0 ] );

  const _Mypunct & _Punct_fac = use_facet < _Mypunct > ( _Iosbase . getloc ( ) );
  const string _Grouping = _Punct_fac . grouping ( );
  const _Elem _Kseparator = _Punct_fac . thousands_sep ( );

  if ( _Poff != _Count )
   _Groupstring [ _Poff ] = _Punct_fac . decimal_point ( );

  size_t _Off = _Poff == _Count ? _Eoff : _Poff;
  const char * _Pg = & _Grouping [ 0 ];
  while ( * _Pg != 127 && '\000' < * _Pg
   && ( size_t ) * _Pg < _Off - _Prefix )
   {
   _Groupstring . insert ( _Off -= * _Pg, ( size_t ) 1, _Kseparator );
   if ( '\000' < _Pg [ 1 ] )
    ++ _Pg;
   }

  _Count = _Groupstring . size ( );
  size_t _Fillcount = _Iosbase . width ( ) <= 0
   || ( size_t ) _Iosbase . width ( ) <= _Count
    ? 0 : ( size_t ) _Iosbase . width ( ) - _Count;

  ios_base :: fmtflags _Adjustfield =
   _Iosbase . flags ( ) & ios_base :: adjustfield;
  if ( _Adjustfield != ios_base :: left
   && _Adjustfield != ios_base :: internal )
   {
   _Dest = _Rep ( _Dest, _Fill, _Fillcount );
   _Fillcount = 0;
   _Dest = _Put ( _Dest, & _Groupstring [ 0 ], _Prefix );
   }
  else if ( _Adjustfield == ios_base :: internal )
   {
   _Dest = _Put ( _Dest, & _Groupstring [ 0 ], _Prefix );
   _Dest = _Rep ( _Dest, _Fill, _Fillcount );
   _Fillcount = 0;
   }
  else
   _Dest = _Put ( _Dest, & _Groupstring [ 0 ], _Prefix );

  _Dest = _Put ( _Dest, & _Groupstring [ _Prefix ], _Count - _Prefix );
  _Iosbase . width ( 0 );
  return ( _Rep ( _Dest, _Fill, _Fillcount ) );
  }

 char * __cdecl _Ifmt ( char * _Fmt,
  const char * _Spec, ios_base :: fmtflags _Flags ) const
  {
  char * _Ptr = _Fmt;
  * _Ptr ++ = '%';

  if ( _Flags & ios_base :: showpos )
   * _Ptr ++ = '+';
  if ( _Flags & ios_base :: showbase )
   * _Ptr ++ = '#';
  if ( _Spec [ 0 ] != 'L' )
   * _Ptr ++ = _Spec [ 0 ];
  else

   {
   * _Ptr ++ = 'I';
   * _Ptr ++ = '6';
   * _Ptr ++ = '4';
   }

  ios_base :: fmtflags _Basefield = _Flags & ios_base :: basefield;
  * _Ptr ++ = _Basefield == ios_base :: oct ? 'o'
   : _Basefield != ios_base :: hex ? _Spec [ 1 ]
   : _Flags & ios_base :: uppercase ? 'X' : 'x';
  * _Ptr = '\000';
  return ( _Fmt );
  }

 _OutIt __cdecl _Iput ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, char * _Buf, size_t _Count ) const
  {
  ;
  size_t _Prefix = 0 < _Count && ( * _Buf == '+' || * _Buf == '-' )
   ? 1 : 0;
  if ( ( _Iosbase . flags ( ) & ios_base :: basefield ) == ios_base :: hex
   && _Prefix + 2 <= _Count && _Buf [ _Prefix ] == '0'
   && ( _Buf [ _Prefix + 1 ] == 'x' || _Buf [ _Prefix + 1 ] == 'X' ) )
   _Prefix += 2;

  const ctype < _Elem > & _Ctype_fac =
   use_facet < ctype < _Elem > > ( _Iosbase . getloc ( ) );
  _Mystr _Groupstring ( _Count, _Elem ( 0 ) );
  _Ctype_fac . widen ( & _Buf [ 0 ], & _Buf [ _Count ], & _Groupstring [ 0 ] );

  const _Mypunct & _Punct_fac = use_facet < _Mypunct > ( _Iosbase . getloc ( ) );
  const string _Grouping = _Punct_fac . grouping ( );
  const char * _Pg = & _Grouping [ 0 ];
  if ( * _Pg != 127 && '\000' < * _Pg )
   {
   const _Elem _Kseparator = _Punct_fac . thousands_sep ( );
   while ( * _Pg != 127 && '\000' < * _Pg
    && ( size_t ) * _Pg < _Count - _Prefix )
    {
    _Count -= * _Pg;
    _Groupstring . insert ( _Count, 1, _Kseparator );
    if ( '\000' < _Pg [ 1 ] )
     ++ _Pg;
    }
   }

  _Count = _Groupstring . size ( );
  size_t _Fillcount = _Iosbase . width ( ) <= 0
   || ( size_t ) _Iosbase . width ( ) <= _Count
    ? 0 : ( size_t ) _Iosbase . width ( ) - _Count;

  ios_base :: fmtflags _Adjustfield =
   _Iosbase . flags ( ) & ios_base :: adjustfield;
  if ( _Adjustfield != ios_base :: left
   && _Adjustfield != ios_base :: internal )
   {
   _Dest = _Rep ( _Dest, _Fill, _Fillcount );
   _Fillcount = 0;
   _Dest = _Put ( _Dest, & _Groupstring [ 0 ], _Prefix );
   }
  else if ( _Adjustfield == ios_base :: internal )
   {
   _Dest = _Put ( _Dest, & _Groupstring [ 0 ], _Prefix );
   _Dest = _Rep ( _Dest, _Fill, _Fillcount );
   _Fillcount = 0;
   }
  else
   _Dest = _Put ( _Dest, & _Groupstring [ 0 ], _Prefix );

  _Dest = _Put ( _Dest, & _Groupstring [ _Prefix ], _Count - _Prefix );
  _Iosbase . width ( 0 );
  return ( _Rep ( _Dest, _Fill, _Fillcount ) );
  }

 _OutIt __cdecl _Put ( _OutIt _Dest,
  const _Elem * _Ptr, size_t _Count ) const
  {
  for (; 0 < _Count; -- _Count, ( void ) ++ _Dest, ++ _Ptr )
   * _Dest = * _Ptr;
  return ( _Dest );
  }

 _OutIt __cdecl _Rep ( _OutIt _Dest,
  _Elem _Ch, size_t _Count ) const
  {
  for (; 0 < _Count; -- _Count, ( void ) ++ _Dest )
   * _Dest = _Ch;
  return ( _Dest );
  }
 };
#line 1591 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
template< class _Elem, class 
#line 1592 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
_OutIt> locale::id 
#line 1593 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
num_put< _Elem, _OutIt> ::id; 
#line 1598 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
template locale::id numpunct< char> ::id;
#line 1599 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
template class __declspec(dllimport) num_get< char, istreambuf_iterator< char, char_traits< char> > > ;
#line 1601 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
template class __declspec(dllimport) num_put< char, ostreambuf_iterator< char, char_traits< char> > > ;
#line 1604 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
template locale::id numpunct< __wchar_t> ::id;
#line 1605 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
template class __declspec(dllimport) num_get< __wchar_t, istreambuf_iterator< __wchar_t, char_traits< __wchar_t> > > ;
#line 1607 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
template class __declspec(dllimport) num_put< __wchar_t, ostreambuf_iterator< __wchar_t, char_traits< __wchar_t> > > ;
#line 1619 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
}
#line 1621 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
#pragma warning(pop)
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
#pragma warning(push,3)
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
#pragma warning(disable: 4189)
#line 1622 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum"
#pragma pack ( pop )
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
#pragma pack ( push, 8 )
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
namespace std { 
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
template < class _Elem,
 class _Traits >
 class basic_ios
  : public ios_base
 {
public :
 typedef basic_ios < _Elem, _Traits > _Myt;
 typedef basic_ostream < _Elem, _Traits > _Myos;
 typedef basic_streambuf < _Elem, _Traits > _Mysb;
 typedef ctype < _Elem > _Ctype;
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef typename _Traits :: int_type int_type;
 typedef typename _Traits :: pos_type pos_type;
 typedef typename _Traits :: off_type off_type;

 explicit basic_ios ( _Mysb * _Strbuf )
  {
  init ( _Strbuf );
  }

 virtual ~ basic_ios ( ) noexcept
  {
  }

 void clear ( iostate _State = goodbit,
  bool _Reraise = false )
  {
  ios_base :: clear ( ( iostate ) ( _Mystrbuf == 0
   ? ( int ) _State | ( int ) badbit : ( int ) _State ), _Reraise );
  }


 void clear ( io_state _State )
  {
  clear ( ( iostate ) _State );
  }


 void setstate ( iostate _State,
  bool _Reraise = false )
  {
  if ( _State != goodbit )
   clear ( ( iostate ) ( ( int ) rdstate ( ) | ( int ) _State ), _Reraise );
  }


 void setstate ( io_state _State )
  {
  setstate ( ( iostate ) _State );
  }


 _Myt & copyfmt ( const _Myt & _Right )
  {
  _Tiestr = _Right . tie ( );
  _Fillch = _Right . fill ( );
  ios_base :: copyfmt ( _Right );
  return ( * this );
  }

 _Myos * tie ( ) const
  {
  return ( _Tiestr );
  }

 _Myos * tie ( _Myos * _Newtie )
  {
  _Myos * _Oldtie = _Tiestr;
  _Tiestr = _Newtie;
  return ( _Oldtie );
  }

 _Mysb * rdbuf ( ) const
  {
  return ( _Mystrbuf );
  }

 _Mysb * rdbuf ( _Mysb * _Strbuf )
  {
  _Mysb * _Oldstrbuf = _Mystrbuf;
  _Mystrbuf = _Strbuf;
  clear ( );
  return ( _Oldstrbuf );
  }

 locale imbue ( const locale & _Loc )
  {
  locale _Oldlocale = ios_base :: imbue ( _Loc );
  if ( rdbuf ( ) != 0 )
   rdbuf ( ) -> pubimbue ( _Loc );
  return ( _Oldlocale );
  }

 _Elem fill ( ) const
  {
  return ( _Fillch );
  }

 _Elem fill ( _Elem _Newfill )
  {
  _Elem _Oldfill = _Fillch;
  _Fillch = _Newfill;
  return ( _Oldfill );
  }

 char narrow ( _Elem _Ch, char _Dflt = '\000' ) const
  {
  const _Ctype & _Ctype_fac = use_facet < _Ctype > ( getloc ( ) );
  return ( _Ctype_fac . narrow ( _Ch, _Dflt ) );
  }

 _Elem widen ( char _Byte ) const
  {
  const _Ctype & _Ctype_fac = use_facet < _Ctype > ( getloc ( ) );
  return ( _Ctype_fac . widen ( _Byte ) );
  }

 void move ( _Myt & _Right )
  {
  if ( this != & _Right )
   {
   _Mystrbuf = 0;
   _Tiestr = 0;
   this -> swap ( _Right );
   }
  }

 void move ( _Myt && _Right )
  {
  if ( this != & _Right )
   {
   _Mystrbuf = 0;
   _Tiestr = 0;
   this -> swap ( _Right );
   }
  }

 void swap ( _Myt & _Right ) noexcept
  {
  ios_base :: swap ( _Right );
  :: std :: swap ( _Fillch, _Right . _Fillch );
  :: std :: swap ( _Tiestr, _Right . _Tiestr );
  }

 void set_rdbuf ( _Mysb * _Strbuf )
  {
  _Mystrbuf = _Strbuf;
  }

protected :
 void init ( _Mysb * _Strbuf = 0,
  bool _Isstd = false )
  {
  _Init ( );
  _Mystrbuf = _Strbuf;
  _Tiestr = 0;
  _Fillch = widen ( ' ' );

  if ( _Mystrbuf == 0 )
   setstate ( badbit );

  if ( _Isstd )
   _Addstd ( this );
  }

  basic_ios ( )
  {
  }

private :
 _Mysb * _Mystrbuf;
 _Myos * _Tiestr;
 _Elem _Fillch;

public :
  basic_ios ( const _Myt & ) = delete;
 _Myt & operator = ( const _Myt & ) = delete;
 };
#line 200 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
template class __declspec(dllimport) basic_ios< char, char_traits< char> > ;
#line 202 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
template class __declspec(dllimport) basic_ios< __wchar_t, char_traits< __wchar_t> > ;
#line 213 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl boolalpha(ios_base &_Iosbase) 
#line 214 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 215 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.setf(_Iosb< int> ::boolalpha); 
#line 216 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 217 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 219 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl dec(ios_base &_Iosbase) 
#line 220 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 221 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.setf(_Iosb< int> ::dec, _Iosb< int> ::basefield); 
#line 222 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 223 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 225 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl defaultfloat(ios_base &_Iosbase) 
#line 226 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 227 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.unsetf(_Iosb< int> ::floatfield); 
#line 228 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 229 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 231 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl fixed(ios_base &_Iosbase) 
#line 232 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 233 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.setf(_Iosb< int> ::fixed, _Iosb< int> ::floatfield); 
#line 234 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 237 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl hex(ios_base &_Iosbase) 
#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.setf(_Iosb< int> ::hex, _Iosb< int> ::basefield); 
#line 240 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 241 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl hexfloat(ios_base &_Iosbase) 
#line 244 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.setf(_Iosb< int> ::hexfloat, _Iosb< int> ::floatfield); 
#line 246 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 250 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
namespace tr1 { 
#line 251 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
using std::hexfloat;
#line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
}
#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl internal(ios_base &_Iosbase) 
#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.setf(_Iosb< int> ::internal, _Iosb< int> ::adjustfield); 
#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl left(ios_base &_Iosbase) 
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.setf(_Iosb< int> ::left, _Iosb< int> ::adjustfield); 
#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl noboolalpha(ios_base &_Iosbase) 
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.unsetf(_Iosb< int> ::boolalpha); 
#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl noshowbase(ios_base &_Iosbase) 
#line 274 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 275 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.unsetf(_Iosb< int> ::showbase); 
#line 276 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 277 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl noshowpoint(ios_base &_Iosbase) 
#line 280 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.unsetf(_Iosb< int> ::showpoint); 
#line 282 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 283 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 285 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl noshowpos(ios_base &_Iosbase) 
#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 287 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.unsetf(_Iosb< int> ::showpos); 
#line 288 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 289 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl noskipws(ios_base &_Iosbase) 
#line 292 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 293 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.unsetf(_Iosb< int> ::skipws); 
#line 294 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 295 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 297 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl nounitbuf(ios_base &_Iosbase) 
#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.unsetf(_Iosb< int> ::unitbuf); 
#line 300 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 301 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl nouppercase(ios_base &_Iosbase) 
#line 304 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 305 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.unsetf(_Iosb< int> ::uppercase); 
#line 306 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 307 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl oct(ios_base &_Iosbase) 
#line 310 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.setf(_Iosb< int> ::oct, _Iosb< int> ::basefield); 
#line 312 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 313 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 315 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl right(ios_base &_Iosbase) 
#line 316 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 317 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.setf(_Iosb< int> ::right, _Iosb< int> ::adjustfield); 
#line 318 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 319 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 321 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl scientific(ios_base &_Iosbase) 
#line 322 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 323 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.setf(_Iosb< int> ::scientific, _Iosb< int> ::floatfield); 
#line 324 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 325 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 327 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl showbase(ios_base &_Iosbase) 
#line 328 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 329 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.setf(_Iosb< int> ::showbase); 
#line 330 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 331 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 333 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl showpoint(ios_base &_Iosbase) 
#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 335 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.setf(_Iosb< int> ::showpoint); 
#line 336 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 337 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl showpos(ios_base &_Iosbase) 
#line 340 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 341 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.setf(_Iosb< int> ::showpos); 
#line 342 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 343 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 345 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl skipws(ios_base &_Iosbase) 
#line 346 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 347 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.setf(_Iosb< int> ::skipws); 
#line 348 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 349 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 351 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl unitbuf(ios_base &_Iosbase) 
#line 352 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 353 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.setf(_Iosb< int> ::unitbuf); 
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 357 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
inline ios_base &__cdecl uppercase(ios_base &_Iosbase) 
#line 358 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
{ 
#line 359 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
_Iosbase.setf(_Iosb< int> ::uppercase); 
#line 360 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
return _Iosbase; 
#line 361 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
} 
#line 362 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
}
#line 365 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
#pragma warning(pop)
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
#pragma warning(push,3)
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
#pragma warning(disable: 4189 4390)
#line 366 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios"
#pragma pack ( pop )
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
#pragma pack ( push, 8 )
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
namespace std { 
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
#pragma vtordisp(push, 2)
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
template < class _Elem,
 class _Traits >
 class basic_ostream
  : virtual public basic_ios < _Elem, _Traits >
 {
public :
 typedef basic_ostream < _Elem, _Traits > _Myt;
 typedef basic_ios < _Elem, _Traits > _Myios;
 typedef basic_streambuf < _Elem, _Traits > _Mysb;
 typedef ostreambuf_iterator < _Elem, _Traits > _Iter;
 typedef num_put < _Elem, _Iter > _Nput;

 explicit basic_ostream (
  basic_streambuf < _Elem, _Traits > * _Strbuf,

  bool _Isstd = false )
  {
  _Myios :: init ( _Strbuf, _Isstd );
  }

  basic_ostream ( _Uninitialized, bool _Addit = true )
  {
  if ( _Addit )
   this -> _Addstd ( this );
  }

protected :
  basic_ostream ( _Myt && _Right )
  {
  _Myios :: init ( );
  _Myios :: move ( :: std :: move ( _Right ) );
  }

 _Myt & operator = ( _Myt && _Right )
  {
  this -> swap ( _Right );
  return ( * this );
  }

 void swap ( _Myt & _Right )
  {
  if ( this != & _Right )
   _Myios :: swap ( _Right );
  }

public :
  basic_ostream ( const _Myt & ) = delete;
 _Myt & operator = ( const _Myt & ) = delete;

 virtual ~ basic_ostream ( ) noexcept
  {
  }

 typedef typename _Traits :: int_type int_type;
 typedef typename _Traits :: pos_type pos_type;
 typedef typename _Traits :: off_type off_type;

 class _Sentry_base
  {
 public :
   _Sentry_base ( _Myt & _Ostr )
   : _Myostr ( _Ostr )
   {
   if ( _Myostr . rdbuf ( ) != 0 )
    _Myostr . rdbuf ( ) -> _Lock ( );
   }

   ~ _Sentry_base ( ) noexcept
   {
   if ( _Myostr . rdbuf ( ) != 0 )
    _Myostr . rdbuf ( ) -> _Unlock ( );
   }

  _Myt & _Myostr;

 private :
  _Sentry_base & operator = ( const _Sentry_base & );
  };

 class sentry
  : public _Sentry_base
  {
 public :
  explicit sentry ( _Myt & _Ostr )
   : _Sentry_base ( _Ostr )
   {
   if ( _Ostr . good ( ) && _Ostr . tie ( ) != 0 && _Ostr . tie ( ) != & _Ostr )
    _Ostr . tie ( ) -> flush ( );
   _Ok = _Ostr . good ( );
   }

   ~ sentry ( ) noexcept
   {

   if ( ! :: std :: uncaught_exception ( ) )
    this -> _Myostr . _Osfx ( );




   }

  explicit operator bool ( ) const
   {
   return ( _Ok );
   }

   sentry ( const sentry & ) = delete;
  sentry & operator = ( const sentry & ) = delete;

 private :
  bool _Ok;
  };

 bool opfx ( )
  {
  if ( this -> good ( ) && _Myios :: tie ( ) != 0 && _Myios :: tie ( ) != this )
   _Myios :: tie ( ) -> flush ( );
  return ( this -> good ( ) );
  }

 void osfx ( )
  {
  _Osfx ( );
  }

 void _Osfx ( )
  {
  try {
  if ( this -> good ( ) && this -> flags ( ) & ios_base :: unitbuf )
   if ( _Myios :: rdbuf ( ) -> pubsync ( ) == - 1 )
    _Myios :: setstate ( ios_base :: badbit );
  } catch ( ... ) {
  }
  }























 _Myt & operator << ( _Myt & ( __cdecl * _Pfn ) ( _Myt & ) )
  {
  ;
  return ( ( * _Pfn ) ( * this ) );
  }

 _Myt & operator << ( _Myios & ( __cdecl * _Pfn ) ( _Myios & ) )
  {
  ;
  ( * _Pfn ) ( * ( _Myios * ) this );
  return ( * this );
  }

 _Myt & operator << ( ios_base & ( __cdecl * _Pfn ) ( ios_base & ) )
  {
  ;
  ( * _Pfn ) ( * ( ios_base * ) this );
  return ( * this );
  }

 _Myt & operator << ( bool _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( this -> getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator << ( short _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( this -> getloc ( ) );
   ios_base :: fmtflags _Bfl =
    this -> flags ( ) & ios_base :: basefield;
   long _Tmp = ( _Bfl == ios_base :: oct
    || _Bfl == ios_base :: hex )
    ? ( long ) ( unsigned short ) _Val : ( long ) _Val;

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Tmp ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }










 _Myt & operator << ( unsigned short _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( this -> getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), ( unsigned long ) _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator << ( int _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( this -> getloc ( ) );
   ios_base :: fmtflags _Bfl =
    this -> flags ( ) & ios_base :: basefield;
   long _Tmp = ( _Bfl == ios_base :: oct
    || _Bfl == ios_base :: hex )
    ? ( long ) ( unsigned int ) _Val : ( long ) _Val;

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Tmp ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator << ( unsigned int _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( this -> getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), ( unsigned long ) _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator << ( long _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( this -> getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator << ( unsigned long _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( this -> getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator << ( long long _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( this -> getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator << ( unsigned long long _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( this -> getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator << ( float _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( this -> getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), ( double ) _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator << ( double _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( this -> getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator << ( long double _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( this -> getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator << ( const void * _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( this -> getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator << ( _Mysb * _Strbuf )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  bool _Copied = false;
  const sentry _Ok ( * this );

  if ( _Ok && _Strbuf != 0 )
   for ( int_type _Meta = _Traits :: eof ( );; _Copied = true )
    {
    try {
    _Meta = _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta )
     ? _Strbuf -> sgetc ( ) : _Strbuf -> snextc ( );
    } catch ( ... ) {
     _Myios :: setstate ( ios_base :: failbit );
     throw;
    }

    if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
     break;

    try {
     if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
      _Myios :: rdbuf ( ) -> sputc (
       _Traits :: to_char_type ( _Meta ) ) ) )
      {
      _State |= ios_base :: badbit;
      break;
      }
    } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
    }

  this -> width ( 0 );
  _Myios :: setstate ( _Strbuf == 0 ? ios_base :: badbit
   : ! _Copied ? _State | ios_base :: failbit : _State );
  return ( * this );
  }

 _Myt & put ( _Elem _Ch )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( ! _Ok )
   _State |= ios_base :: badbit;
  else
   {
   try {
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Myios :: rdbuf ( ) -> sputc ( _Ch ) ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & write ( const _Elem * _Str,
  streamsize _Count )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( ! _Ok )
   _State |= ios_base :: badbit;
  else if ( 0 < _Count )
   {
   ;
   try {
   if ( _Myios :: rdbuf ( ) -> sputn ( _Str, _Count ) != _Count )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & flush ( )
  {
  if ( _Myios :: rdbuf ( ) != 0 )
   {
   const sentry _Ok ( * this );

   if ( _Ok && _Myios :: rdbuf ( ) -> pubsync ( ) == - 1 )
    _Myios :: setstate ( ios_base :: badbit );
   }
  return ( * this );
  }

 _Myt & seekp ( pos_type _Pos )
  {
  const sentry _Ok ( * this );

  if ( ! this -> fail ( )
   && ( off_type ) _Myios :: rdbuf ( ) -> pubseekpos ( _Pos,
    ios_base :: out ) == _BADOFF )
   _Myios :: setstate ( ios_base :: failbit );
  return ( * this );
  }

 _Myt & seekp ( off_type _Off, ios_base :: seekdir _Way )
  {
  const sentry _Ok ( * this );

  if ( ! this -> fail ( )
   && ( off_type ) _Myios :: rdbuf ( ) -> pubseekoff ( _Off, _Way,
    ios_base :: out ) == _BADOFF )
   _Myios :: setstate ( ios_base :: failbit );
  return ( * this );
  }

 pos_type tellp ( )
  {
  const sentry _Ok ( * this );

  if ( ! this -> fail ( ) )
   return ( _Myios :: rdbuf ( ) -> pubseekoff ( 0,
    ios_base :: cur, ios_base :: out ) );
  else
   return ( pos_type ( _BADOFF ) );
  }
 };
#line 619 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
#pragma vtordisp(pop)
#line 676 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
template class __declspec(dllimport) basic_ostream< char, char_traits< char> > ;
#line 678 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
template class __declspec(dllimport) basic_ostream< __wchar_t, char_traits< __wchar_t> > ;
#line 690 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
template < class _Elem,
 class _Traits > inline
 basic_ostream < _Elem, _Traits > & operator << (
  basic_ostream < _Elem, _Traits > & _Ostr, const char * _Val )
 {
 ios_base :: iostate _State = ios_base :: goodbit;
 streamsize _Count = ( streamsize ) :: strlen ( _Val );
 streamsize _Pad = _Ostr . width ( ) <= 0 || _Ostr . width ( ) <= _Count
  ? 0 : _Ostr . width ( ) - _Count;
 const typename basic_ostream < _Elem, _Traits > :: sentry _Ok ( _Ostr );

 if ( ! _Ok )
  _State |= ios_base :: badbit;
 else
  {
  try {
  const ctype < _Elem > & _Ctype_fac = use_facet < ctype < _Elem > > ( _Ostr . getloc ( ) );
  if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left )
   for (; 0 < _Pad; -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     {
     _State |= ios_base :: badbit;
     break;
     }

  for (; _State == ios_base :: goodbit && 0 < _Count; -- _Count, ++ _Val )
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Ostr . rdbuf ( ) -> sputc ( _Ctype_fac . widen ( * _Val ) ) ) )
     _State |= ios_base :: badbit;

  if ( _State == ios_base :: goodbit )
   for (; 0 < _Pad; -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     {
     _State |= ios_base :: badbit;
     break;
     }
  _Ostr . width ( 0 );
  } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
  }

 _Ostr . setstate ( _State );
 return ( _Ostr );
 }
#line 737 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
template < class _Elem,
 class _Traits > inline
 basic_ostream < _Elem, _Traits > & operator << (
  basic_ostream < _Elem, _Traits > & _Ostr, char _Ch )
 {
 ios_base :: iostate _State = ios_base :: goodbit;
 const typename basic_ostream < _Elem, _Traits > :: sentry _Ok ( _Ostr );

 if ( _Ok )
  {
  const ctype < _Elem > & _Ctype_fac = use_facet < ctype < _Elem > > ( _Ostr . getloc ( ) );
  streamsize _Pad = _Ostr . width ( ) <= 1 ? 0 : _Ostr . width ( ) - 1;

  try {
  if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left )
   for (; _State == ios_base :: goodbit && 0 < _Pad;
    -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     _State |= ios_base :: badbit;

  if ( _State == ios_base :: goodbit
   && _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Ostr . rdbuf ( ) -> sputc ( _Ctype_fac . widen ( _Ch ) ) ) )
   _State |= ios_base :: badbit;

  for (; _State == ios_base :: goodbit && 0 < _Pad;
   -- _Pad )
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
    _State |= ios_base :: badbit;
  } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
  }

 _Ostr . width ( 0 );
 _Ostr . setstate ( _State );
 return ( _Ostr );
 }
#line 776 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
template < class _Traits > inline
 basic_ostream < char, _Traits > & operator << (
  basic_ostream < char, _Traits > & _Ostr,
  const char * _Val )
 {
 typedef char _Elem;
 typedef basic_ostream < _Elem, _Traits > _Myos;
 ios_base :: iostate _State = ios_base :: goodbit;
 streamsize _Count = ( streamsize ) _Traits :: length ( _Val );
 streamsize _Pad = _Ostr . width ( ) <= 0 || _Ostr . width ( ) <= _Count
  ? 0 : _Ostr . width ( ) - _Count;
 const typename _Myos :: sentry _Ok ( _Ostr );

 if ( ! _Ok )
  _State |= ios_base :: badbit;
 else
  {
  try {
  if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left )
   for (; 0 < _Pad; -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     {
     _State |= ios_base :: badbit;
     break;
     }

  if ( _State == ios_base :: goodbit
   && _Ostr . rdbuf ( ) -> sputn ( _Val, _Count ) != _Count )
   _State |= ios_base :: badbit;

  if ( _State == ios_base :: goodbit )
   for (; 0 < _Pad; -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     {
     _State |= ios_base :: badbit;
     break;
     }
  _Ostr . width ( 0 );
  } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
  }

 _Ostr . setstate ( _State );
 return ( _Ostr );
 }
#line 823 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
template < class _Traits > inline
 basic_ostream < char, _Traits > & operator << (
  basic_ostream < char, _Traits > & _Ostr, char _Ch )
 {
 typedef char _Elem;
 typedef basic_ostream < _Elem, _Traits > _Myos;
 ios_base :: iostate _State = ios_base :: goodbit;
 const typename _Myos :: sentry _Ok ( _Ostr );

 if ( _Ok )
  {
  streamsize _Pad = _Ostr . width ( ) <= 1 ? 0 : _Ostr . width ( ) - 1;

  try {
  if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left )
   for (; _State == ios_base :: goodbit && 0 < _Pad;
    -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     _State |= ios_base :: badbit;

  if ( _State == ios_base :: goodbit
   && _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Ostr . rdbuf ( ) -> sputc ( _Ch ) ) )
   _State |= ios_base :: badbit;

  for (; _State == ios_base :: goodbit && 0 < _Pad;
   -- _Pad )
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
    _State |= ios_base :: badbit;
  } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
  }

 _Ostr . width ( 0 );
 _Ostr . setstate ( _State );
 return ( _Ostr );
 }
#line 862 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
template < class _Elem,
 class _Traits > inline
 basic_ostream < _Elem, _Traits > & operator << (
  basic_ostream < _Elem, _Traits > & _Ostr, const _Elem * _Val )
 {
 typedef basic_ostream < _Elem, _Traits > _Myos;

 ios_base :: iostate _State = ios_base :: goodbit;
 streamsize _Count = ( streamsize ) _Traits :: length ( _Val );
 streamsize _Pad = _Ostr . width ( ) <= 0 || _Ostr . width ( ) <= _Count
  ? 0 : _Ostr . width ( ) - _Count;
 const typename _Myos :: sentry _Ok ( _Ostr );

 if ( ! _Ok )
  _State |= ios_base :: badbit;
 else
  {
  try {
  if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left )
   for (; 0 < _Pad; -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     {
     _State |= ios_base :: badbit;
     break;
     }

  if ( _State == ios_base :: goodbit
   && _Ostr . rdbuf ( ) -> sputn ( _Val, _Count ) != _Count )
   _State |= ios_base :: badbit;

  if ( _State == ios_base :: goodbit )
   for (; 0 < _Pad; -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     {
     _State |= ios_base :: badbit;
     break;
     }
  _Ostr . width ( 0 );
  } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
  }

 _Ostr . setstate ( _State );
 return ( _Ostr );
 }
#line 909 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
template < class _Elem,
 class _Traits > inline
 basic_ostream < _Elem, _Traits > & operator << (
  basic_ostream < _Elem, _Traits > & _Ostr, _Elem _Ch )
 {
 typedef basic_ostream < _Elem, _Traits > _Myos;

 ios_base :: iostate _State = ios_base :: goodbit;
 const typename _Myos :: sentry _Ok ( _Ostr );

 if ( _Ok )
  {
  streamsize _Pad = _Ostr . width ( ) <= 1 ? 0 : _Ostr . width ( ) - 1;

  try {
  if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left )
   for (; _State == ios_base :: goodbit && 0 < _Pad;
    -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     _State |= ios_base :: badbit;

  if ( _State == ios_base :: goodbit
   && _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Ostr . rdbuf ( ) -> sputc ( _Ch ) ) )
   _State |= ios_base :: badbit;

  for (; _State == ios_base :: goodbit && 0 < _Pad;
   -- _Pad )
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
    _State |= ios_base :: badbit;
  } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
  }

 _Ostr . width ( 0 );
 _Ostr . setstate ( _State );
 return ( _Ostr );
 }
#line 949 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
template < class _Traits > inline
 basic_ostream < char, _Traits > & operator << (
  basic_ostream < char, _Traits > & _Ostr, const signed char * _Val )
 {
 return ( _Ostr << ( const char * ) _Val );
 }
#line 956 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
template < class _Traits > inline
 basic_ostream < char, _Traits > & operator << (
  basic_ostream < char, _Traits > & _Ostr, signed char _Ch )
 {
 return ( _Ostr << ( char ) _Ch );
 }
#line 963 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
template < class _Traits > inline
 basic_ostream < char, _Traits > & operator << (
  basic_ostream < char, _Traits > & _Ostr, const unsigned char * _Val )
 {
 return ( _Ostr << ( const char * ) _Val );
 }
#line 970 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
template < class _Traits > inline
 basic_ostream < char, _Traits > & operator << (
  basic_ostream < char, _Traits > & _Ostr, unsigned char _Ch )
 {
 return ( _Ostr << ( char ) _Ch );
 }
#line 977 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
template < class _Elem,
 class _Traits,
 class _Ty > inline
 basic_ostream < _Elem, _Traits > &
  operator << ( basic_ostream < _Elem, _Traits > && _Ostr, const _Ty & _Val )
 {
 return ( _Ostr << _Val );
 }
#line 987 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
template < class _Elem,
 class _Traits > inline
 basic_ostream < _Elem, _Traits > &
  __cdecl endl ( basic_ostream < _Elem, _Traits > & _Ostr )
 {
 _Ostr . put ( _Ostr . widen ( '\n' ) );
 _Ostr . flush ( );
 return ( _Ostr );
 }
#line 997 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
template < class _Elem,
 class _Traits > inline
 basic_ostream < _Elem, _Traits > &
  __cdecl ends ( basic_ostream < _Elem, _Traits > & _Ostr )
 {
 _Ostr . put ( _Elem ( ) );
 return ( _Ostr );
 }
#line 1006 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
template < class _Elem,
 class _Traits > inline
 basic_ostream < _Elem, _Traits > &
  __cdecl flush ( basic_ostream < _Elem, _Traits > & _Ostr )
 {
 _Ostr . flush ( );
 return ( _Ostr );
 }
#line 1016 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
template < class _Elem,
 class _Traits > inline
 basic_ostream < _Elem, _Traits > &
  operator << ( basic_ostream < _Elem, _Traits > & _Ostr,
   const error_code & _Errcode )
 {
 return ( _Ostr << _Errcode . category ( ) . name ( ) << ':' << _Errcode . value ( ) );
 }
#line 1024 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
}
#line 1027 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
#pragma warning(pop)
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
#pragma warning(push,3)
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
#pragma warning(disable: 4189)
#line 1028 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream"
#pragma pack ( pop )
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
#pragma pack ( push, 8 )
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
namespace std { 
#pragma vtordisp(push, 2)
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
template < class _Elem,
 class _Traits >
 class basic_istream
  : virtual public basic_ios < _Elem, _Traits >
 {
public :
 typedef basic_istream < _Elem, _Traits > _Myt;
 typedef basic_ios < _Elem, _Traits > _Myios;
 typedef basic_streambuf < _Elem, _Traits > _Mysb;
 typedef istreambuf_iterator < _Elem, _Traits > _Iter;
 typedef ctype < _Elem > _Ctype;
 typedef num_get < _Elem, _Iter > _Nget;











 explicit basic_istream ( _Mysb * _Strbuf,
  bool _Isstd = false )

  : _Chcount ( 0 )
  {
  _Myios :: init ( _Strbuf, _Isstd );
  }

  basic_istream ( _Uninitialized )
  {
  this -> _Addstd ( this );
  }

protected :
  basic_istream ( _Myt && _Right )
  : _Chcount ( _Right . _Chcount )
  {
  _Myios :: init ( );
  _Myios :: move ( :: std :: move ( _Right ) );
  _Right . _Chcount = 0;
  }

 _Myt & operator = ( _Myt && _Right )
  {
  this -> swap ( _Right );
  return ( * this );
  }

 void swap ( _Myt & _Right )
  {
  _Myios :: swap ( _Right );
  :: std :: swap ( _Chcount, _Right . _Chcount );
  }

public :
  basic_istream ( const _Myt & ) = delete;
 _Myt & operator = ( const _Myt & ) = delete;

 virtual ~ basic_istream ( ) noexcept
  {
  }

 typedef typename _Traits :: int_type int_type;
 typedef typename _Traits :: pos_type pos_type;
 typedef typename _Traits :: off_type off_type;


 class _Sentry_base
  {
 public :
   _Sentry_base ( _Myt & _Istr )
   : _Myistr ( _Istr )
   {
   if ( _Myistr . rdbuf ( ) != 0 )
    _Myistr . rdbuf ( ) -> _Lock ( );
   }

   ~ _Sentry_base ( ) noexcept
   {
   if ( _Myistr . rdbuf ( ) != 0 )
    _Myistr . rdbuf ( ) -> _Unlock ( );
   }

  _Myt & _Myistr;

 private :
  _Sentry_base & operator = ( const _Sentry_base & );
  };

 class sentry
  : public _Sentry_base
  {
 public :
  explicit sentry ( _Myt & _Istr, bool _Noskip = false )
   : _Sentry_base ( _Istr )
   {
   _Ok = this -> _Myistr . _Ipfx ( _Noskip );
   }

  explicit operator bool ( ) const
   {
   return ( _Ok );
   }

   sentry ( const sentry & ) = delete;
  sentry & operator = ( const sentry & ) = delete;

 private :
  bool _Ok;
  };

 bool _Ipfx ( bool _Noskip = false )
  {
  if ( this -> good ( ) )
   {
   if ( _Myios :: tie ( ) != 0 )
    _Myios :: tie ( ) -> flush ( );

   if ( ! _Noskip && this -> flags ( ) & ios_base :: skipws )
    {
    const _Ctype & _Ctype_fac = use_facet < _Ctype > ( this -> getloc ( ) );

    try {
    int_type _Meta = _Myios :: rdbuf ( ) -> sgetc ( );

    for (;; _Meta = _Myios :: rdbuf ( ) -> snextc ( ) )
     if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
      {
      _Myios :: setstate ( ios_base :: eofbit );
      break;
      }
     else if ( ! _Ctype_fac . is ( _Ctype :: space,
      _Traits :: to_char_type ( _Meta ) ) )
      break;
    } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
    }

   if ( this -> good ( ) )
    return ( true );
   }
  _Myios :: setstate ( ios_base :: failbit );
  return ( false );
  }

 bool ipfx ( bool _Noskip = false )
  {
  return ( _Ipfx ( _Noskip ) );
  }

 void isfx ( )
  {
  }























 _Myt & operator >> ( _Myt & ( __cdecl * _Pfn ) ( _Myt & ) )
  {
  ;
  return ( ( * _Pfn ) ( * this ) );
  }

 _Myt & operator >> ( _Myios & ( __cdecl * _Pfn ) ( _Myios & ) )
  {
  ;
  ( * _Pfn ) ( * ( _Myios * ) this );
  return ( * this );
  }

 _Myt & operator >> ( ios_base & ( __cdecl * _Pfn ) ( ios_base & ) )
  {
  ;
  ( * _Pfn ) ( * ( ios_base * ) this );
  return ( * this );
  }

 _Myt & operator >> ( bool & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nget & _Nget_fac = use_facet < _Nget > ( this -> getloc ( ) );

   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Val );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator >> ( short & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   long _Tmp = 0;
   const _Nget & _Nget_fac = use_facet < _Nget > ( this -> getloc ( ) );

   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Tmp );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }

   if ( _State & ios_base :: failbit
    || _Tmp < ( - 32768 ) || 32767 < _Tmp )
    _State |= ios_base :: failbit;
   else
    _Val = ( short ) _Tmp;
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }










 _Myt & operator >> ( unsigned short & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nget & _Nget_fac = use_facet < _Nget > ( this -> getloc ( ) );

   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Val );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator >> ( int & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   long _Tmp = 0;
   const _Nget & _Nget_fac = use_facet < _Nget > ( this -> getloc ( ) );

   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Tmp );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }

   if ( _State & ios_base :: failbit
    || _Tmp < ( - 2147483647 - 1 ) || 2147483647 < _Tmp )
    _State |= ios_base :: failbit;
   else
    _Val = _Tmp;
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator >> ( unsigned int & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );
  if ( _Ok )
   {
   const _Nget & _Nget_fac = use_facet < _Nget > ( this -> getloc ( ) );

   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Val );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator >> ( long & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nget & _Nget_fac = use_facet < _Nget > ( this -> getloc ( ) );
   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Val );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator >> ( unsigned long & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nget & _Nget_fac = use_facet < _Nget > ( this -> getloc ( ) );

   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Val );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator >> ( long long & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nget & _Nget_fac = use_facet < _Nget > ( this -> getloc ( ) );

   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Val );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator >> ( unsigned long long & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );
  if ( _Ok )
   {
   const _Nget & _Nget_fac = use_facet < _Nget > ( this -> getloc ( ) );

   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Val );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator >> ( float & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nget & _Nget_fac = use_facet < _Nget > ( this -> getloc ( ) );

   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Val );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator >> ( double & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );
  if ( _Ok )
   {
   const _Nget & _Nget_fac = use_facet < _Nget > ( this -> getloc ( ) );

   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Val );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator >> ( long double & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nget & _Nget_fac = use_facet < _Nget > ( this -> getloc ( ) );
   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Val );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator >> ( void * & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nget & _Nget_fac = use_facet < _Nget > ( this -> getloc ( ) );

   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Val );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator >> ( _Mysb * _Strbuf )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  bool _Copied = false;
  const sentry _Ok ( * this );

  if ( _Ok && _Strbuf != 0 )
   {
   try {
   int_type _Meta = _Myios :: rdbuf ( ) -> sgetc ( );

   for (;; _Meta = _Myios :: rdbuf ( ) -> snextc ( ) )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
     {
     _State |= ios_base :: eofbit;
     break;
     }
    else
     {
     try {
      if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
       _Strbuf -> sputc ( _Traits :: to_char_type ( _Meta ) ) ) )
       break;
     } catch ( ... ) {
      break;
     }
     _Copied = true;
     }
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( ! _Copied ? _State | ios_base :: failbit : _State );
  return ( * this );
  }

 int_type get ( )
  {
  int_type _Meta = 0;
  ios_base :: iostate _State = ios_base :: goodbit;
  _Chcount = 0;
  const sentry _Ok ( * this, true );

  if ( ! _Ok )
   _Meta = _Traits :: eof ( );
  else
   {
   try {
   _Meta = _Myios :: rdbuf ( ) -> sgetc ( );

   if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
    _State |= ios_base :: eofbit | ios_base :: failbit;
   else
    {
    _Myios :: rdbuf ( ) -> sbumpc ( );
    ++ _Chcount;
    }
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( _Meta );
  }

 _Myt & get ( _Elem * _Str, streamsize _Count )
  {
  return ( get ( _Str, _Count, _Myios :: widen ( '\n' ) ) );
  }

 _Myt & get ( _Elem * _Str,
  streamsize _Count, _Elem _Delim )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  _Chcount = 0;
  const sentry _Ok ( * this, true );

  if ( _Ok && 0 < _Count )
   {
   try {
   int_type _Meta = _Myios :: rdbuf ( ) -> sgetc ( );

   for (; 0 < -- _Count; _Meta = _Myios :: rdbuf ( ) -> snextc ( ) )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
     {
     _State |= ios_base :: eofbit;
     break;
     }
    else if ( _Traits :: to_char_type ( _Meta ) == _Delim )
     break;
    else
     {
     ;
     * _Str ++ = _Traits :: to_char_type ( _Meta );
     ++ _Chcount;
     }
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _Chcount == 0
   ? _State | ios_base :: failbit : _State );
  * _Str = _Elem ( );
  return ( * this );
  }

 _Myt & get ( _Elem & _Ch )
  {
  int_type _Meta = get ( );
  if ( ! _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
   _Ch = _Traits :: to_char_type ( _Meta );
  return ( * this );
  }

 _Myt & get ( _Mysb & _Strbuf )
  {
  return ( get ( _Strbuf, _Myios :: widen ( '\n' ) ) );
  }

 _Myt & get ( _Mysb & _Strbuf, _Elem _Delim )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  _Chcount = 0;
  const sentry _Ok ( * this, true );

  if ( _Ok )
   {
   try {
   int_type _Meta = _Myios :: rdbuf ( ) -> sgetc ( );

   for (;; _Meta = _Myios :: rdbuf ( ) -> snextc ( ) )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
     {
     _State |= ios_base :: eofbit;
     break;
     }
    else
     {
     try {
      _Elem _Ch = _Traits :: to_char_type ( _Meta );
      if ( _Ch == _Delim
       || _Traits :: eq_int_type ( _Traits :: eof ( ),
        _Strbuf . sputc ( _Ch ) ) )
       break;
     } catch ( ... ) {
      break;
     }
     ++ _Chcount;
     }
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  if ( _Chcount == 0 )
   _State |= ios_base :: failbit;
  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & getline ( _Elem * _Str, streamsize _Count )
  {
  return ( getline ( _Str, _Count, _Myios :: widen ( '\n' ) ) );
  }

 _Myt & getline ( _Elem * _Str,
  streamsize _Count, _Elem _Delim )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  _Chcount = 0;
  const sentry _Ok ( * this, true );

  if ( _Ok && 0 < _Count )
   {
   int_type _Metadelim = _Traits :: to_int_type ( _Delim );

   try {
   int_type _Meta = _Myios :: rdbuf ( ) -> sgetc ( );

   for (;; _Meta = _Myios :: rdbuf ( ) -> snextc ( ) )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
     {
     _State |= ios_base :: eofbit;
     break;
     }
    else if ( _Meta == _Metadelim )
     {
     ++ _Chcount;
     _Myios :: rdbuf ( ) -> sbumpc ( );
     break;
     }
    else if ( -- _Count <= 0 )
     {
     _State |= ios_base :: failbit;
     break;
     }
    else
     {
     ;
     * _Str ++ = _Traits :: to_char_type ( _Meta );
     ++ _Chcount;
     }
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  * _Str = _Elem ( );
  _Myios :: setstate ( _Chcount == 0 ? _State | ios_base :: failbit : _State );
  return ( * this );
  }

 _Myt & ignore ( streamsize _Count = 1,
  int_type _Metadelim = _Traits :: eof ( ) )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  _Chcount = 0;
  const sentry _Ok ( * this, true );

  if ( _Ok && 0 < _Count )
   {
   try {
   for (;; )
    {
    int_type _Meta;
    if ( _Count != ( numeric_limits < streamsize > :: max ) ( )
     && -- _Count < 0 )
     break;
    else if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Meta = _Myios :: rdbuf ( ) -> sbumpc ( ) ) )
     {
     _State |= ios_base :: eofbit;
     break;
     }
    else
     {
     ++ _Chcount;
     if ( _Meta == _Metadelim )
      break;
     }
    }
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & read ( _Elem * _Str, streamsize _Count )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  _Chcount = 0;
  const sentry _Ok ( * this, true );

  if ( _Ok && 0 < _Count )
   {
   try {
   ;
   const streamsize _Num = _Myios :: rdbuf ( ) -> sgetn ( _Str, _Count );
   _Chcount += _Num;
   if ( _Num != _Count )
    _State |= ios_base :: eofbit | ios_base :: failbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 streamsize readsome ( _Elem * _Str,
  streamsize _Count )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  _Chcount = 0;
  const sentry _Ok ( * this, true );
  streamsize _Num;

  if ( ! _Ok )
   _State |= ios_base :: failbit;
  else if ( ( _Num = _Myios :: rdbuf ( ) -> in_avail ( ) ) < 0 )
   _State |= ios_base :: eofbit;
  else if ( 0 < _Count && 0 < _Num )
   {
   ;
   read ( _Str, _Num < _Count ? _Num : _Count );
   }

  _Myios :: setstate ( _State );
  return ( gcount ( ) );
  }

 int_type peek ( )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  _Chcount = 0;
  int_type _Meta = 0;
  const sentry _Ok ( * this, true );

  if ( ! _Ok )
   _Meta = _Traits :: eof ( );
  else
   {
   try {
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Meta = _Myios :: rdbuf ( ) -> sgetc ( ) ) )
    _State |= ios_base :: eofbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( _Meta );
  }

 _Myt & putback ( _Elem _Ch )
  {
  _Chcount = 0;
  ios_base :: iostate _State = ios_base :: goodbit;
  ios_base :: iostate _Oldstate = _Myios :: rdstate ( );
  _Myios :: clear ( _Oldstate & ~ ios_base :: eofbit );
  const sentry _Ok ( * this, true );

  if ( _Ok )
   {
   try {
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Myios :: rdbuf ( ) -> sputbackc ( _Ch ) ) )
    _State |= ios_base :: badbit | _Oldstate;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & unget ( )
  {
  _Chcount = 0;
  ios_base :: iostate _State = ios_base :: goodbit;
  ios_base :: iostate _Oldstate = _Myios :: rdstate ( );
  _Myios :: clear ( _Oldstate & ~ ios_base :: eofbit );
  const sentry _Ok ( * this, true );

  if ( _Ok )
   {
   try {
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Myios :: rdbuf ( ) -> sungetc ( ) ) )
    _State |= ios_base :: badbit | _Oldstate;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 streamsize gcount ( ) const
  {
  return ( _Chcount );
  }

 int sync ( )
  {
  const sentry _Ok ( * this, true );

  if ( _Myios :: rdbuf ( ) == 0 )
   return ( - 1 );
  else if ( _Myios :: rdbuf ( ) -> pubsync ( ) == - 1 )
   {
   _Myios :: setstate ( ios_base :: badbit );
   return ( - 1 );
   }
  else
   return ( 0 );
  }

 _Myt & seekg ( pos_type _Pos )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  ios_base :: iostate _Oldstate = _Myios :: rdstate ( );
  _Myios :: clear ( _Oldstate & ~ ios_base :: eofbit );
  const sentry _Ok ( * this, true );

  if ( ! this -> fail ( )
   && ( off_type ) _Myios :: rdbuf ( ) -> pubseekpos ( _Pos,
    ios_base :: in ) == _BADOFF )
   _Myios :: setstate ( _State | ios_base :: failbit );
  return ( * this );
  }

 _Myt & seekg ( off_type _Off, ios_base :: seekdir _Way )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  ios_base :: iostate _Oldstate = _Myios :: rdstate ( );
  _Myios :: clear ( _Oldstate & ~ ios_base :: eofbit );
  const sentry _Ok ( * this, true );

  if ( ! this -> fail ( )
   && ( off_type ) _Myios :: rdbuf ( ) -> pubseekoff ( _Off, _Way,
    ios_base :: in ) == _BADOFF )
   _Myios :: setstate ( _State | ios_base :: failbit );
  return ( * this );
  }

 pos_type tellg ( )
  {
  const sentry _Ok ( * this, true );

  if ( ! this -> fail ( ) )
   return ( _Myios :: rdbuf ( ) -> pubseekoff ( 0,
    ios_base :: cur, ios_base :: in ) );
  else
   return ( pos_type ( _BADOFF ) );
  }

private :
 streamsize _Chcount;
 };
#line 895 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
#pragma vtordisp(pop)
#line 923 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
template class __declspec(dllimport) basic_istream< char, char_traits< char> > ;
#line 924 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
template class __declspec(dllimport) basic_istream< __wchar_t, char_traits< __wchar_t> > ;
#line 934 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
template < class _Elem,
 class _Traits >
 class basic_iostream
 : public basic_istream < _Elem, _Traits >,
  public basic_ostream < _Elem, _Traits >
 {
public :
 typedef basic_iostream < _Elem, _Traits > _Myt;
 typedef basic_istream < _Elem, _Traits > _Myis;
 typedef basic_ostream < _Elem, _Traits > _Myos;
 typedef basic_ios < _Elem, _Traits > _Myios;
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef typename _Traits :: int_type int_type;
 typedef typename _Traits :: pos_type pos_type;
 typedef typename _Traits :: off_type off_type;

 explicit basic_iostream ( basic_streambuf < _Elem, _Traits > * _Strbuf )
  : _Myis ( _Strbuf, false ),
   _Myos ( _Noinit, false )
  {
  }

protected :
  basic_iostream ( _Myt && _Right )
  : _Myis ( _Right . rdbuf ( ), false ),
   _Myos ( _Noinit, false )
  {
  _Myios :: init ( );
  _Myios :: move ( :: std :: forward < _Myt > ( _Right ) );
  }

 _Myt & operator = ( _Myt && _Right )
  {
  this -> swap ( _Right );
  return ( * this );
  }

 void swap ( _Myt & _Right )
  {
  if ( this != & _Right )
   _Myios :: swap ( _Right );
  }

public :
  basic_iostream ( const _Myt & ) = delete;
 _Myt & operator = ( const _Myt & ) = delete;

 virtual ~ basic_iostream ( ) noexcept
  {
  }
 };
#line 992 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
template class __declspec(dllimport) basic_iostream< char, char_traits< char> > ;
#line 993 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
template class __declspec(dllimport) basic_iostream< __wchar_t, char_traits< __wchar_t> > ;
#line 1004 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
template < class _Elem,
 class _Traits > inline
 basic_istream < _Elem, _Traits > & operator >> (
  basic_istream < _Elem, _Traits > & _Istr, _Elem * _Str )
 {
 ;
 typedef basic_istream < _Elem, _Traits > _Myis;
 typedef ctype < _Elem > _Ctype;
 ios_base :: iostate _State = ios_base :: goodbit;
 _Elem * _Str0 = _Str;
 const typename _Myis :: sentry _Ok ( _Istr );

 if ( _Ok )
  {
  const _Ctype & _Ctype_fac = use_facet < _Ctype > ( _Istr . getloc ( ) );

  try {
  streamsize _Count = 0 < _Istr . width ( ) ? _Istr . width ( )
   : ( numeric_limits < streamsize > :: max ) ( );
  typename _Myis :: int_type _Meta = _Istr . rdbuf ( ) -> sgetc ( );
  _Elem _Ch;
  for (; 0 < -- _Count; _Meta = _Istr . rdbuf ( ) -> snextc ( ) )
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
    {
    _State |= ios_base :: eofbit;
    break;
    }
   else if ( _Ctype_fac . is ( _Ctype :: space,
    _Ch = _Traits :: to_char_type ( _Meta ) )
     || _Ch == _Elem ( ) )
    break;
   else
    * _Str ++ = _Traits :: to_char_type ( _Meta );
  } catch ( ... ) { ( _Istr ) . setstate ( ios_base :: badbit, true ); }
  }

 * _Str = _Elem ( );
 _Istr . width ( 0 );
 _Istr . setstate ( _Str == _Str0 ? _State | ios_base :: failbit : _State );
 return ( _Istr );
 }
#line 1046 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
template < class _Elem,
 class _Traits > inline
 basic_istream < _Elem, _Traits > & operator >> (
  basic_istream < _Elem, _Traits > & _Istr, _Elem & _Ch )
 {
 typedef basic_istream < _Elem, _Traits > _Myis;

 typename _Myis :: int_type _Meta;
 ios_base :: iostate _State = ios_base :: goodbit;
 const typename _Myis :: sentry _Ok ( _Istr );

 if ( _Ok )
  {
  try {
  _Meta = _Istr . rdbuf ( ) -> sbumpc ( );
  if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
   _State |= ios_base :: eofbit | ios_base :: failbit;
  else
   _Ch = _Traits :: to_char_type ( _Meta );
  } catch ( ... ) { ( _Istr ) . setstate ( ios_base :: badbit, true ); }
  }

 _Istr . setstate ( _State );
 return ( _Istr );
 }
#line 1072 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
template < class _Traits > inline
 basic_istream < char, _Traits > & operator >> (
  basic_istream < char, _Traits > & _Istr, signed char * _Str )
 {
 return ( _Istr >> ( char * ) _Str );
 }
#line 1079 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
template < class _Traits > inline
 basic_istream < char, _Traits > & operator >> (
  basic_istream < char, _Traits > & _Istr, signed char & _Ch )
 {
 return ( _Istr >> ( char & ) _Ch );
 }
#line 1086 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
template < class _Traits > inline
 basic_istream < char, _Traits > & operator >> (
  basic_istream < char, _Traits > & _Istr, unsigned char * _Str )
 {
 return ( _Istr >> ( char * ) _Str );
 }
#line 1093 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
template < class _Traits > inline
 basic_istream < char, _Traits > & operator >> (
  basic_istream < char, _Traits > & _Istr, unsigned char & _Ch )
 {
 return ( _Istr >> ( char & ) _Ch );
 }
#line 1100 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
template < class _Elem,
 class _Traits,
 class _Ty > inline
 basic_istream < _Elem, _Traits > &
  operator >> ( basic_istream < _Elem, _Traits > && _Istr, _Ty & _Val )
 {
 return ( _Istr >> _Val );
 }
#line 1110 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
template < class _Elem,
 class _Traits > inline
 basic_istream < _Elem, _Traits > &
  __cdecl ws ( basic_istream < _Elem, _Traits > & _Istr )
 {
 typedef basic_istream < _Elem, _Traits > _Myis;
 typedef ctype < _Elem > _Ctype;

 if ( ! _Istr . eof ( ) )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const typename _Myis :: sentry _Ok ( _Istr, true );

  if ( _Ok )
   {
   const _Ctype & _Ctype_fac = use_facet < _Ctype > ( _Istr . getloc ( ) );

   try {
   for ( typename _Traits :: int_type _Meta = _Istr . rdbuf ( ) -> sgetc ( );;
    _Meta = _Istr . rdbuf ( ) -> snextc ( ) )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
     {
     _State |= ios_base :: eofbit;
     break;
     }
    else if ( ! _Ctype_fac . is ( _Ctype :: space,
     _Traits :: to_char_type ( _Meta ) ) )
     break;
   } catch ( ... ) { ( _Istr ) . setstate ( ios_base :: badbit, true ); }
   }

  _Istr . setstate ( _State );
  }
 return ( _Istr );
 }
#line 1145 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
}
#line 1148 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
#pragma warning(pop)
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
#pragma warning(push,3)
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
#pragma warning(disable: 4189)
#pragma warning(disable: 4172)
#pragma warning(disable: 4455)
#line 1149 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream"
#pragma pack ( pop )
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
#pragma pack ( push, 8 )
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
namespace std { 
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_istream < _Elem, _Traits > & operator >> (
  basic_istream < _Elem, _Traits > && _Istr,
  basic_string < _Elem, _Traits, _Alloc > & _Str )
 {
 typedef ctype < _Elem > _Ctype;
 typedef basic_istream < _Elem, _Traits > _Myis;
 typedef basic_string < _Elem, _Traits, _Alloc > _Mystr;
 typedef typename _Mystr :: size_type _Mysizt;

 ios_base :: iostate _State = ios_base :: goodbit;
 bool _Changed = false;
 const typename _Myis :: sentry _Ok ( _Istr );

 if ( _Ok )
  {
  const _Ctype & _Ctype_fac = use_facet < _Ctype > ( _Istr . getloc ( ) );
  _Str . erase ( );

  try {
  _Mysizt _Size = 0 < _Istr . width ( )
   && ( _Mysizt ) _Istr . width ( ) < _Str . max_size ( )
    ? ( _Mysizt ) _Istr . width ( ) : _Str . max_size ( );
  typename _Traits :: int_type _Meta = _Istr . rdbuf ( ) -> sgetc ( );

  for (; 0 < _Size; -- _Size, _Meta = _Istr . rdbuf ( ) -> snextc ( ) )
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
    {
    _State |= ios_base :: eofbit;
    break;
    }
   else if ( _Ctype_fac . is ( _Ctype :: space,
    _Traits :: to_char_type ( _Meta ) ) )
    break;
   else
    {
    _Str . append ( 1, _Traits :: to_char_type ( _Meta ) );
    _Changed = true;
    }
  } catch ( ... ) { ( _Istr ) . setstate ( ios_base :: badbit, true ); }
  }

 _Istr . width ( 0 );
 if ( ! _Changed )
  _State |= ios_base :: failbit;
 _Istr . setstate ( _State );
 return ( _Istr );
 }
#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_istream < _Elem, _Traits > & getline (
  basic_istream < _Elem, _Traits > && _Istr,
  basic_string < _Elem, _Traits, _Alloc > & _Str,
  const _Elem _Delim )
 {
 typedef basic_istream < _Elem, _Traits > _Myis;

 ios_base :: iostate _State = ios_base :: goodbit;
 bool _Changed = false;
 const typename _Myis :: sentry _Ok ( _Istr, true );

 if ( _Ok )
  {
  try {
  _Str . erase ( );
  const typename _Traits :: int_type _Metadelim =
   _Traits :: to_int_type ( _Delim );
  typename _Traits :: int_type _Meta = _Istr . rdbuf ( ) -> sgetc ( );

  for (;; _Meta = _Istr . rdbuf ( ) -> snextc ( ) )
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
    {
    _State |= ios_base :: eofbit;
    break;
    }
   else if ( _Traits :: eq_int_type ( _Meta, _Metadelim ) )
    {
    _Changed = true;
    _Istr . rdbuf ( ) -> sbumpc ( );
    break;
    }
   else if ( _Str . max_size ( ) <= _Str . size ( ) )
    {
    _State |= ios_base :: failbit;
    break;
    }
   else
    {
    _Str += _Traits :: to_char_type ( _Meta );
    _Changed = true;
    }
  } catch ( ... ) { ( _Istr ) . setstate ( ios_base :: badbit, true ); }
  }

 if ( ! _Changed )
  _State |= ios_base :: failbit;
 _Istr . setstate ( _State );
 return ( _Istr );
 }
#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_istream < _Elem, _Traits > & getline (
  basic_istream < _Elem, _Traits > && _Istr,
  basic_string < _Elem, _Traits, _Alloc > & _Str )
 {
 return ( getline ( _Istr, _Str, _Istr . widen ( '\n' ) ) );
 }
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_istream < _Elem, _Traits > & operator >> (
  basic_istream < _Elem, _Traits > & _Istr,
  basic_string < _Elem, _Traits, _Alloc > & _Str )
 {
 return ( :: std :: move ( _Istr ) >> _Str );
 }
#line 143 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_istream < _Elem, _Traits > & getline (
  basic_istream < _Elem, _Traits > & _Istr,
  basic_string < _Elem, _Traits, _Alloc > & _Str,
  const _Elem _Delim )
 {
 return ( getline ( :: std :: move ( _Istr ), _Str, _Delim ) );
 }
#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_istream < _Elem, _Traits > & getline (
  basic_istream < _Elem, _Traits > & _Istr,
  basic_string < _Elem, _Traits, _Alloc > & _Str )
 {
 return ( getline ( :: std :: move ( _Istr ), _Str, _Istr . widen ( '\n' ) ) );
 }
#line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_ostream < _Elem, _Traits > & operator << (
  basic_ostream < _Elem, _Traits > & _Ostr,
  const basic_string < _Elem, _Traits, _Alloc > & _Str )
 {
 typedef basic_ostream < _Elem, _Traits > _Myos;
 typedef basic_string < _Elem, _Traits, _Alloc > _Mystr;
 typedef typename _Mystr :: size_type _Mysizt;

 ios_base :: iostate _State = ios_base :: goodbit;
 _Mysizt _Size = _Str . size ( );
 _Mysizt _Pad = _Ostr . width ( ) <= 0 || ( _Mysizt ) _Ostr . width ( ) <= _Size
  ? 0 : ( _Mysizt ) _Ostr . width ( ) - _Size;
 const typename _Myos :: sentry _Ok ( _Ostr );

 if ( ! _Ok )
  _State |= ios_base :: badbit;
 else
  {
 try {
  if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left )
   for (; 0 < _Pad; -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     {
     _State |= ios_base :: badbit;
     break;
     }

  if ( _State == ios_base :: goodbit
   && _Ostr . rdbuf ( ) -> sputn ( _Str . c_str ( ), ( streamsize ) _Size )
    != ( streamsize ) _Size )
    _State |= ios_base :: badbit;
  else
   for (; 0 < _Pad; -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     {
     _State |= ios_base :: badbit;
     break;
     }
  _Ostr . width ( 0 );
  } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
  }

 _Ostr . setstate ( _State );
 return ( _Ostr );
 }
#line 217 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline int stoi(const string &_Str, size_t *_Idx = 0, int 
#line 218 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Base = 10) 
#line 219 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 220 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
const char *_Ptr = _Str.c_str(); 
#line 221 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
char *_Eptr; 
#line 222 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_errno()) = 0; 
#line 223 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
long _Ans = ::strtol(_Ptr, &_Eptr, _Base); 
#line 225 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Ptr == _Eptr) { 
#line 226 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xinvalid_argument("invalid stoi argument"); }  
#line 227 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if ((((*_errno()) == 34) || (_Ans < ((-2147483647) - 1))) || ((2147483647) < _Ans)) { 
#line 228 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xout_of_range("stoi argument out of range"); }  
#line 229 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Idx != (0)) { 
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 231 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return (int)_Ans; 
#line 232 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 234 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline long stol(const string &_Str, size_t *_Idx = 0, int 
#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Base = 10) 
#line 236 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 237 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
const char *_Ptr = _Str.c_str(); 
#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
char *_Eptr; 
#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_errno()) = 0; 
#line 240 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
long _Ans = ::strtol(_Ptr, &_Eptr, _Base); 
#line 242 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Ptr == _Eptr) { 
#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xinvalid_argument("invalid stol argument"); }  
#line 244 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if ((*_errno()) == 34) { 
#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xout_of_range("stol argument out of range"); }  
#line 246 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Idx != (0)) { 
#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 248 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Ans; 
#line 249 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 251 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline unsigned long stoul(const string &_Str, size_t *_Idx = 0, int 
#line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Base = 10) 
#line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
const char *_Ptr = _Str.c_str(); 
#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
char *_Eptr; 
#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_errno()) = 0; 
#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
unsigned long _Ans = ::strtoul(_Ptr, &_Eptr, _Base); 
#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Ptr == _Eptr) { 
#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xinvalid_argument("invalid stoul argument"); }  
#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if ((*_errno()) == 34) { 
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xout_of_range("stoul argument out of range"); }  
#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Idx != (0)) { 
#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Ans; 
#line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline __int64 stoll(const string &_Str, size_t *_Idx = 0, int 
#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Base = 10) 
#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
const char *_Ptr = _Str.c_str(); 
#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
char *_Eptr; 
#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_errno()) = 0; 
#line 274 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
__int64 _Ans = ::strtoll(_Ptr, &_Eptr, _Base); 
#line 276 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Ptr == _Eptr) { 
#line 277 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xinvalid_argument("invalid stoll argument"); }  
#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if ((*_errno()) == 34) { 
#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xout_of_range("stoll argument out of range"); }  
#line 280 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Idx != (0)) { 
#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 282 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Ans; 
#line 283 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 285 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline unsigned __int64 stoull(const string &_Str, size_t *_Idx = 0, int 
#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Base = 10) 
#line 287 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 288 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
const char *_Ptr = _Str.c_str(); 
#line 289 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
char *_Eptr; 
#line 290 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_errno()) = 0; 
#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
unsigned __int64 _Ans = ::strtoull(_Ptr, &_Eptr, _Base); 
#line 293 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Ptr == _Eptr) { 
#line 294 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xinvalid_argument("invalid stoull argument"); }  
#line 295 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if ((*_errno()) == 34) { 
#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xout_of_range("stoull argument out of range"); }  
#line 297 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Idx != (0)) { 
#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Ans; 
#line 300 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 302 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline float stof(const string &_Str, size_t *_Idx = 0) 
#line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 304 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
const char *_Ptr = _Str.c_str(); 
#line 305 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
char *_Eptr; 
#line 306 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_errno()) = 0; 
#line 307 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
float _Ans = ::strtof(_Ptr, &_Eptr); 
#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Ptr == _Eptr) { 
#line 310 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xinvalid_argument("invalid stof argument"); }  
#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if ((*_errno()) == 34) { 
#line 312 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xout_of_range("stof argument out of range"); }  
#line 313 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Idx != (0)) { 
#line 314 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 315 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Ans; 
#line 316 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 318 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline double stod(const string &_Str, size_t *_Idx = 0) 
#line 319 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 320 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
const char *_Ptr = _Str.c_str(); 
#line 321 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
char *_Eptr; 
#line 322 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_errno()) = 0; 
#line 323 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
double _Ans = ::strtod(_Ptr, &_Eptr); 
#line 325 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Ptr == _Eptr) { 
#line 326 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xinvalid_argument("invalid stod argument"); }  
#line 327 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if ((*_errno()) == 34) { 
#line 328 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xout_of_range("stod argument out of range"); }  
#line 329 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Idx != (0)) { 
#line 330 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 331 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Ans; 
#line 332 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline long double stold(const string &_Str, size_t *_Idx = 0) 
#line 335 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 336 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
const char *_Ptr = _Str.c_str(); 
#line 337 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
char *_Eptr; 
#line 338 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_errno()) = 0; 
#line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
long double _Ans = ::strtold(_Ptr, &_Eptr); 
#line 341 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Ptr == _Eptr) { 
#line 342 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xinvalid_argument("invalid stold argument"); }  
#line 343 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if ((*_errno()) == 34) { 
#line 344 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xout_of_range("stold argument out of range"); }  
#line 345 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Idx != (0)) { 
#line 346 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 347 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Ans; 
#line 348 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 351 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline int stoi(const wstring &_Str, size_t *_Idx = 0, int 
#line 352 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Base = 10) 
#line 353 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
const __wchar_t *_Ptr = _Str.c_str(); 
#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
__wchar_t *_Eptr; 
#line 356 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_errno()) = 0; 
#line 357 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
long _Ans = ::wcstol(_Ptr, &_Eptr, _Base); 
#line 359 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Ptr == _Eptr) { 
#line 360 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xinvalid_argument("invalid stoi argument"); }  
#line 361 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if ((((*_errno()) == 34) || (_Ans < ((-2147483647) - 1))) || ((2147483647) < _Ans)) { 
#line 362 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xout_of_range("stoi argument out of range"); }  
#line 363 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Idx != (0)) { 
#line 364 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 365 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return (int)_Ans; 
#line 366 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 368 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline long stol(const wstring &_Str, size_t *_Idx = 0, int 
#line 369 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Base = 10) 
#line 370 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 371 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
const __wchar_t *_Ptr = _Str.c_str(); 
#line 372 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
__wchar_t *_Eptr; 
#line 373 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_errno()) = 0; 
#line 374 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
long _Ans = ::wcstol(_Ptr, &_Eptr, _Base); 
#line 376 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Ptr == _Eptr) { 
#line 377 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xinvalid_argument("invalid stol argument"); }  
#line 378 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if ((*_errno()) == 34) { 
#line 379 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xout_of_range("stol argument out of range"); }  
#line 380 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Idx != (0)) { 
#line 381 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 382 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Ans; 
#line 383 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 385 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline unsigned long stoul(const wstring &_Str, size_t *_Idx = 0, int 
#line 386 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Base = 10) 
#line 387 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 388 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
const __wchar_t *_Ptr = _Str.c_str(); 
#line 389 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
__wchar_t *_Eptr; 
#line 390 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_errno()) = 0; 
#line 391 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
unsigned long _Ans = ::wcstoul(_Ptr, &_Eptr, _Base); 
#line 393 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Ptr == _Eptr) { 
#line 394 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xinvalid_argument("invalid stoul argument"); }  
#line 395 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if ((*_errno()) == 34) { 
#line 396 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xout_of_range("stoul argument out of range"); }  
#line 397 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Idx != (0)) { 
#line 398 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 399 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Ans; 
#line 400 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 402 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline __int64 stoll(const wstring &_Str, size_t *_Idx = 0, int 
#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Base = 10) 
#line 404 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 405 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
const __wchar_t *_Ptr = _Str.c_str(); 
#line 406 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
__wchar_t *_Eptr; 
#line 407 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_errno()) = 0; 
#line 408 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
__int64 _Ans = ::wcstoll(_Ptr, &_Eptr, _Base); 
#line 410 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Ptr == _Eptr) { 
#line 411 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xinvalid_argument("invalid stoll argument"); }  
#line 412 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if ((*_errno()) == 34) { 
#line 413 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xout_of_range("stoll argument out of range"); }  
#line 414 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Idx != (0)) { 
#line 415 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 416 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Ans; 
#line 417 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 419 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline unsigned __int64 stoull(const wstring &_Str, size_t *_Idx = 0, int 
#line 420 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Base = 10) 
#line 421 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 422 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
const __wchar_t *_Ptr = _Str.c_str(); 
#line 423 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
__wchar_t *_Eptr; 
#line 424 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_errno()) = 0; 
#line 425 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
unsigned __int64 _Ans = ::wcstoull(_Ptr, &_Eptr, _Base); 
#line 427 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Ptr == _Eptr) { 
#line 428 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xinvalid_argument("invalid stoull argument"); }  
#line 429 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if ((*_errno()) == 34) { 
#line 430 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xout_of_range("stoull argument out of range"); }  
#line 431 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Idx != (0)) { 
#line 432 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 433 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Ans; 
#line 434 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 436 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline float stof(const wstring &_Str, size_t *_Idx = 0) 
#line 437 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 438 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
const __wchar_t *_Ptr = _Str.c_str(); 
#line 439 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
__wchar_t *_Eptr; 
#line 440 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_errno()) = 0; 
#line 441 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
float _Ans = ::wcstof(_Ptr, &_Eptr); 
#line 443 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Ptr == _Eptr) { 
#line 444 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xinvalid_argument("invalid stof argument"); }  
#line 445 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if ((*_errno()) == 34) { 
#line 446 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xout_of_range("stof argument out of range"); }  
#line 447 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Idx != (0)) { 
#line 448 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 449 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Ans; 
#line 450 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 452 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline double stod(const wstring &_Str, size_t *_Idx = 0) 
#line 453 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 454 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
const __wchar_t *_Ptr = _Str.c_str(); 
#line 455 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
__wchar_t *_Eptr; 
#line 456 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_errno()) = 0; 
#line 457 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
double _Ans = ::wcstod(_Ptr, &_Eptr); 
#line 459 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Ptr == _Eptr) { 
#line 460 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xinvalid_argument("invalid stod argument"); }  
#line 461 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if ((*_errno()) == 34) { 
#line 462 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xout_of_range("stod argument out of range"); }  
#line 463 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Idx != (0)) { 
#line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 465 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Ans; 
#line 466 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 468 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline long double stold(const wstring &_Str, size_t *_Idx = 0) 
#line 469 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 470 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
const __wchar_t *_Ptr = _Str.c_str(); 
#line 471 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
__wchar_t *_Eptr; 
#line 472 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_errno()) = 0; 
#line 473 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
long double _Ans = ::wcstold(_Ptr, &_Eptr); 
#line 475 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Ptr == _Eptr) { 
#line 476 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xinvalid_argument("invalid stold argument"); }  
#line 477 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if ((*_errno()) == 34) { 
#line 478 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
_Xout_of_range("stold argument out of range"); }  
#line 479 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
if (_Idx != (0)) { 
#line 480 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
(*_Idx) = ((size_t)(_Eptr - _Ptr)); }  
#line 481 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Ans; 
#line 482 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 485 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
#pragma warning(push)
#pragma warning(disable: 4127)
template < class _Elem,
 class _UTy > inline
 _Elem * _UIntegral_to_buff ( _Elem * _RNext, _UTy _UVal )
 {
 static_assert ( is_unsigned < _UTy > :: value, "_UTy must be unsigned" );


 auto _UVal_trunc = _UVal;



















 do
  {
  * -- _RNext = '0' + _UVal_trunc % 10;
  _UVal_trunc /= 10;
  }
 while ( _UVal_trunc != 0 );
 return ( _RNext );
 }
#line 522 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
#pragma warning(pop)
#line 524 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
template < class _Elem,
 class _Ty > inline
 basic_string < _Elem > _Integral_to_string ( const _Ty _Val )
 {
 static_assert ( is_integral < _Ty > :: value, "_Ty must be integral" );
 using _UTy = make_unsigned_t < _Ty >;
 _Elem _Buff [ 21 ];
 _Elem * const _Buff_end = :: std :: end ( _Buff );
 _Elem * _RNext = _Buff_end;
 auto _UVal = static_cast < _UTy > ( _Val );
 if ( _Val < 0 )
  {
  _RNext = _UIntegral_to_buff ( _RNext, 0 - _UVal );
  * -- _RNext = '-';
  }
 else
  _RNext = _UIntegral_to_buff ( _RNext, _UVal );

 return ( basic_string < _Elem > ( _RNext, _Buff_end ) );
 }
#line 545 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
template < class _Ty > inline
 string _Floating_to_string ( const char * _Fmt, _Ty _Val )
 {
 static_assert ( is_floating_point < _Ty > :: value,
  "_Ty must be floating point" );

 int _Len = :: _scprintf ( _Fmt, _Val );
 string _Str ( _Len + 1, '\000' );
 :: sprintf_s ( & _Str [ 0 ], _Len + 1, _Fmt, _Val );
 _Str . resize ( _Len );
 return ( _Str );
 }
#line 558 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
template < class _Ty > inline
 wstring _Floating_to_wstring ( const wchar_t * _Fmt, _Ty _Val )
 {
 static_assert ( is_floating_point < _Ty > :: value,
  "_Ty must be floating point" );

 int _Len = :: _scwprintf ( _Fmt, _Val );
 wstring _Str ( _Len + 1, L'\x0' );
 :: swprintf_s ( & _Str [ 0 ], _Len + 1, _Fmt, _Val );
 _Str . resize ( _Len );
 return ( _Str );
 }
#line 574 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline string to_string(int _Val) 
#line 575 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 576 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Integral_to_string< char> (_Val); 
#line 577 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 579 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline string to_string(unsigned _Val) 
#line 580 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 581 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Integral_to_string< char> (_Val); 
#line 582 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 584 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline string to_string(long _Val) 
#line 585 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 586 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Integral_to_string< char> (_Val); 
#line 587 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 589 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline string to_string(unsigned long _Val) 
#line 590 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 591 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Integral_to_string< char> (_Val); 
#line 592 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 594 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline string to_string(__int64 _Val) 
#line 595 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 596 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Integral_to_string< char> (_Val); 
#line 597 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 599 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline string to_string(unsigned __int64 _Val) 
#line 600 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 601 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Integral_to_string< char> (_Val); 
#line 602 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 604 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline string to_string(float _Val) 
#line 605 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 606 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Floating_to_string("%f", _Val); 
#line 607 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 609 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline string to_string(double _Val) 
#line 610 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 611 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Floating_to_string("%f", _Val); 
#line 612 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 614 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline string to_string(long double _Val) 
#line 615 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 616 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Floating_to_string("%Lf", _Val); 
#line 617 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 620 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline wstring to_wstring(int _Val) 
#line 621 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 622 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Integral_to_string< __wchar_t> (_Val); 
#line 623 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 625 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline wstring to_wstring(unsigned _Val) 
#line 626 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 627 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Integral_to_string< __wchar_t> (_Val); 
#line 628 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 630 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline wstring to_wstring(long _Val) 
#line 631 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 632 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Integral_to_string< __wchar_t> (_Val); 
#line 633 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 635 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline wstring to_wstring(unsigned long _Val) 
#line 636 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 637 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Integral_to_string< __wchar_t> (_Val); 
#line 638 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 640 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline wstring to_wstring(__int64 _Val) 
#line 641 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 642 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Integral_to_string< __wchar_t> (_Val); 
#line 643 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 645 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline wstring to_wstring(unsigned __int64 _Val) 
#line 646 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 647 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Integral_to_string< __wchar_t> (_Val); 
#line 648 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 650 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline wstring to_wstring(float _Val) 
#line 651 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 652 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Floating_to_wstring(L"\x25\x66", _Val); 
#line 653 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 655 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline wstring to_wstring(double _Val) 
#line 656 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 657 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Floating_to_wstring(L"\x25\x66", _Val); 
#line 658 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 660 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline wstring to_wstring(long double _Val) 
#line 661 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 662 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return _Floating_to_wstring(L"\x25\x4c\x66", _Val); 
#line 663 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 671 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline namespace literals { 
#line 672 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline namespace string_literals { 
#line 673 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline string operator ""s(const char *_Str, size_t _Len) 
#line 674 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 675 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return string(_Str, _Len); 
#line 676 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 678 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline wstring operator ""s(const __wchar_t *_Str, size_t _Len) 
#line 679 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 680 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return wstring(_Str, _Len); 
#line 681 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 683 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline u16string operator ""s(const char16_t *_Str, size_t _Len) 
#line 684 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 685 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return u16string(_Str, _Len); 
#line 686 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 688 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
inline u32string operator ""s(const char32_t *_Str, size_t _Len) 
#line 689 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
{ 
#line 690 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
return u32string(_Str, _Len); 
#line 691 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
} 
#line 692 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
}
#line 693 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
}
#line 699 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
}
#line 702 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
#pragma warning(pop)
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sstream"
#pragma warning(push,3)
#line 703 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string"
#pragma pack ( pop )
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sstream"
#pragma pack ( push, 8 )
#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sstream"
namespace std { 
#pragma warning(disable: 4251)
#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sstream"
template < class _Elem,
 class _Traits,
 class _Alloc >
 class basic_stringbuf
  : public basic_streambuf < _Elem, _Traits >
 {
public :
 typedef basic_stringbuf < _Elem, _Traits, _Alloc > _Myt;
 typedef _Alloc allocator_type;
 typedef basic_streambuf < _Elem, _Traits > _Mysb;
 typedef basic_string < _Elem, _Traits, _Alloc > _Mystr;

 explicit basic_stringbuf ( ios_base :: openmode _Mode =
  ios_base :: in | ios_base :: out )
  {
  _Init ( 0, 0, _Getstate ( _Mode ) );
  }

 explicit basic_stringbuf ( const _Mystr & _Str,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out )
  {
  _Init ( _Str . c_str ( ), _Str . size ( ), _Getstate ( _Mode ) );
  }

 basic_stringbuf ( _Myt && _Right )
  {
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  }

 _Myt & operator = ( _Myt && _Right )
  {
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  return ( * this );
  }

 void _Assign_rv ( _Myt && _Right )
  {
  if ( this != & _Right )
   {
   _Tidy ( );
   this -> swap ( _Right );
   }
  }

 void swap ( _Myt & _Right )
  {
  if ( this != & _Right )
   {
   _Mysb :: swap ( _Right );
   :: std :: swap ( _Seekhigh, _Right . _Seekhigh );
   :: std :: swap ( _Mystate, _Right . _Mystate );
   _Swap_adl ( _Al, _Right . _Al );
   }
  }

 basic_stringbuf ( const _Myt & ) = delete;
 _Myt & operator = ( const _Myt & ) = delete;

 virtual ~ basic_stringbuf ( ) noexcept
  {
  _Tidy ( );
  }

 enum
  {
  _Allocated = 1,
  _Constant = 2,
  _Noread = 4,
  _Append = 8,
  _Atend = 16 };
 typedef int _Strstate;

 typedef typename _Traits :: int_type int_type;
 typedef typename _Traits :: pos_type pos_type;
 typedef typename _Traits :: off_type off_type;

 _Mystr str ( ) const
  {
  if ( ! ( _Mystate & _Constant ) && _Mysb :: pptr ( ) != 0 )
   {
   _Mystr _Str ( _Mysb :: pbase ( ), ( _Seekhigh < _Mysb :: pptr ( )
    ? _Mysb :: pptr ( ) : _Seekhigh ) - _Mysb :: pbase ( ) );
   return ( _Str );
   }
  else if ( ! ( _Mystate & _Noread ) && _Mysb :: gptr ( ) != 0 )
   {
   _Mystr _Str ( _Mysb :: eback ( ), _Mysb :: egptr ( ) - _Mysb :: eback ( ) );
   return ( _Str );
   }
  else
   {
   _Mystr _Nul;
   return ( _Nul );
   }
  }

 void str ( const _Mystr & _Newstr )
  {
  _Tidy ( );
  _Init ( _Newstr . c_str ( ), _Newstr . size ( ), _Mystate );
  }

protected :
 virtual int_type overflow ( int_type _Meta = _Traits :: eof ( ) )
  {
  if ( _Mystate & _Constant )
   return ( _Traits :: eof ( ) );
  else if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
   return ( _Traits :: not_eof ( _Meta ) );

  if ( _Mystate & _Append
   && _Mysb :: pptr ( ) != 0 && _Mysb :: pptr ( ) < _Seekhigh )
   _Mysb :: setp ( _Mysb :: pbase ( ), _Seekhigh, _Mysb :: epptr ( ) );

  if ( _Mysb :: pptr ( ) != 0
   && _Mysb :: pptr ( ) < _Mysb :: epptr ( ) )
   {
   * _Mysb :: _Pninc ( ) = _Traits :: to_char_type ( _Meta );
   return ( _Meta );
   }
  else
   {
   size_t _Oldsize = _Mysb :: pptr ( ) == 0
    ? 0 : _Mysb :: epptr ( ) - _Mysb :: eback ( );
   size_t _Newsize = _Oldsize;
   size_t _Inc = _Newsize / 2 < _MINSIZE
    ? _MINSIZE : _Newsize / 2;

   while ( 0 < _Inc && 2147483647 - _Inc < _Newsize )
    _Inc /= 2;
   if ( _Inc == 0 )
    return ( _Traits :: eof ( ) );

   _Newsize += _Inc;

   _Elem * _Newptr = _Al . allocate ( _Newsize );
   _Elem * _Oldptr = _Mysb :: eback ( );

   if ( 0 < _Oldsize )
    _Traits :: copy ( _Newptr, _Oldptr, _Oldsize );

   if ( _Oldsize == 0 )
    {
    _Seekhigh = _Newptr;
    _Mysb :: setp ( _Newptr, _Newptr + _Newsize );
    if ( _Mystate & _Noread )
     _Mysb :: setg ( _Newptr, 0, _Newptr );
    else
     _Mysb :: setg ( _Newptr, _Newptr, _Newptr + 1 );
    }
   else
    {
    _Seekhigh = _Newptr + ( _Seekhigh - _Oldptr );
    _Mysb :: setp ( _Newptr + ( _Mysb :: pbase ( ) - _Oldptr ),
     _Newptr + ( _Mysb :: pptr ( ) - _Oldptr ),
     _Newptr + _Newsize );
    if ( _Mystate & _Noread )
     _Mysb :: setg ( _Newptr, 0, _Newptr );
    else
     _Mysb :: setg ( _Newptr,
      _Newptr + ( _Mysb :: gptr ( ) - _Oldptr ),
      _Mysb :: pptr ( ) + 1 );
    }

   if ( _Mystate & _Allocated )
    _Al . deallocate ( _Oldptr, _Oldsize );
   _Mystate |= _Allocated;

   * _Mysb :: _Pninc ( ) = _Traits :: to_char_type ( _Meta );
   return ( _Meta );
   }
  }

 virtual int_type pbackfail ( int_type _Meta = _Traits :: eof ( ) )
  {
  if ( _Mysb :: gptr ( ) == 0
   || _Mysb :: gptr ( ) <= _Mysb :: eback ( )
   || ( ! _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta )
   && ! _Traits :: eq ( _Traits :: to_char_type ( _Meta ), _Mysb :: gptr ( ) [ - 1 ] )
   && _Mystate & _Constant ) )
   return ( _Traits :: eof ( ) );
  else
   {
   _Mysb :: gbump ( - 1 );
   if ( ! _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
    * _Mysb :: gptr ( ) = _Traits :: to_char_type ( _Meta );
   return ( _Traits :: not_eof ( _Meta ) );
   }
  }

 virtual int_type underflow ( )
  {
  if ( _Mysb :: gptr ( ) == 0 )
   return ( _Traits :: eof ( ) );
  else if ( _Mysb :: gptr ( ) < _Mysb :: egptr ( ) )
   return ( _Traits :: to_int_type ( * _Mysb :: gptr ( ) ) );
  else if ( _Mystate & _Noread || _Mysb :: pptr ( ) == 0
   || ( _Mysb :: pptr ( ) <= _Mysb :: gptr ( ) && _Seekhigh <= _Mysb :: gptr ( ) ) )
   return ( _Traits :: eof ( ) );
  else
   {
   if ( _Seekhigh < _Mysb :: pptr ( ) )
    _Seekhigh = _Mysb :: pptr ( );
   _Mysb :: setg ( _Mysb :: eback ( ), _Mysb :: gptr ( ), _Seekhigh );
   return ( _Traits :: to_int_type ( * _Mysb :: gptr ( ) ) );
   }
  }

 virtual pos_type seekoff ( off_type _Off,
  ios_base :: seekdir _Way,
  ios_base :: openmode _Which = ios_base :: in | ios_base :: out )
  {
  if ( _Mysb :: pptr ( ) != 0 && _Seekhigh < _Mysb :: pptr ( ) )
   _Seekhigh = _Mysb :: pptr ( );

  if ( _Which & ios_base :: in && _Mysb :: gptr ( ) != 0 )
   {
   if ( _Way == ios_base :: end )
    _Off += ( off_type ) ( _Seekhigh - _Mysb :: eback ( ) );
   else if ( _Way == ios_base :: cur
    && ( _Which & ios_base :: out ) == 0 )
    _Off += ( off_type ) ( _Mysb :: gptr ( ) - _Mysb :: eback ( ) );
   else if ( _Way != ios_base :: beg )
    _Off = _BADOFF;

   if ( 0 <= _Off && _Off <= _Seekhigh - _Mysb :: eback ( ) )
    {
    _Mysb :: gbump ( ( int ) ( _Mysb :: eback ( ) - _Mysb :: gptr ( ) + _Off ) );
    if ( _Which & ios_base :: out && _Mysb :: pptr ( ) != 0 )
     _Mysb :: setp ( _Mysb :: pbase ( ), _Mysb :: gptr ( ),
      _Mysb :: epptr ( ) );
    }
   else
    _Off = _BADOFF;
   }
  else if ( _Which & ios_base :: out && _Mysb :: pptr ( ) != 0 )
   {
   if ( _Way == ios_base :: end )
    _Off += ( off_type ) ( _Seekhigh - _Mysb :: eback ( ) );
   else if ( _Way == ios_base :: cur )
    _Off += ( off_type ) ( _Mysb :: pptr ( ) - _Mysb :: eback ( ) );
   else if ( _Way != ios_base :: beg )
    _Off = _BADOFF;

   if ( 0 <= _Off && _Off <= _Seekhigh - _Mysb :: eback ( ) )
    _Mysb :: pbump ( ( int ) ( _Mysb :: eback ( )
     - _Mysb :: pptr ( ) + _Off ) );
   else
    _Off = _BADOFF;
   }

  else if ( _Off != 0 )


   _Off = _BADOFF;
  return ( pos_type ( _Off ) );
  }

 virtual pos_type seekpos ( pos_type _Ptr,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out )
  {
  streamoff _Off = ( streamoff ) _Ptr;
  if ( _Mysb :: pptr ( ) != 0 && _Seekhigh < _Mysb :: pptr ( ) )
   _Seekhigh = _Mysb :: pptr ( );

  if ( _Off == _BADOFF )
   ;
  else if ( _Mode & ios_base :: in && _Mysb :: gptr ( ) != 0 )
   {
   if ( 0 <= _Off && _Off <= _Seekhigh - _Mysb :: eback ( ) )
    {
    _Mysb :: gbump ( ( int ) ( _Mysb :: eback ( ) - _Mysb :: gptr ( ) + _Off ) );
    if ( _Mode & ios_base :: out && _Mysb :: pptr ( ) != 0 )
     _Mysb :: setp ( _Mysb :: pbase ( ), _Mysb :: gptr ( ),
      _Mysb :: epptr ( ) );
    }
   else
    _Off = _BADOFF;
   }
  else if ( _Mode & ios_base :: out && _Mysb :: pptr ( ) != 0 )
   {
   if ( 0 <= _Off && _Off <= _Seekhigh - _Mysb :: eback ( ) )
    _Mysb :: pbump ( ( int ) ( _Mysb :: eback ( )
     - _Mysb :: pptr ( ) + _Off ) );
   else
    _Off = _BADOFF;
   }
  else
   _Off = _BADOFF;
  return ( streampos ( _Off ) );
  }

 void _Init ( const _Elem * _Ptr,
  size_t _Count, _Strstate _State )
  {
  _Seekhigh = 0;
  _Mystate = _State;

  if ( _Count != 0
   && ( _Mystate & ( _Noread | _Constant ) ) != ( _Noread | _Constant ) )
   {
   _Elem * _Pnew = _Al . allocate ( _Count );
   _Traits :: copy ( _Pnew, _Ptr, _Count );
   _Seekhigh = _Pnew + _Count;

   if ( ! ( _Mystate & _Noread ) )
    _Mysb :: setg ( _Pnew, _Pnew,
     _Pnew + _Count );
   if ( ! ( _Mystate & _Constant ) )
    {
    _Mysb :: setp ( _Pnew,
     ( _Mystate & ( _Atend | _Append ) ) ? _Pnew + _Count : _Pnew,
     _Pnew + _Count );
    if ( _Mysb :: gptr ( ) == 0 )
     _Mysb :: setg ( _Pnew, 0, _Pnew );
    }
   _Mystate |= _Allocated;
   }
  }

 void _Tidy ( )
  {
  if ( _Mystate & _Allocated )
   _Al . deallocate ( _Mysb :: eback ( ),
    ( _Mysb :: pptr ( ) != 0 ? _Mysb :: epptr ( )
     : _Mysb :: egptr ( ) ) - _Mysb :: eback ( ) );
  _Mysb :: setg ( 0, 0, 0 );
  _Mysb :: setp ( 0, 0 );
  _Seekhigh = 0;
  _Mystate &= ~ _Allocated;
  }

private :
 enum
  {
  _MINSIZE = 32 };

 _Strstate _Getstate ( ios_base :: openmode _Mode )
  {
  _Strstate _State = ( _Strstate ) 0;
  if ( ! ( _Mode & ios_base :: in ) )
   _State |= _Noread;
  if ( ! ( _Mode & ios_base :: out ) )
   _State |= _Constant;
  if ( _Mode & ios_base :: app )
   _State |= _Append;
  if ( _Mode & ios_base :: ate )
   _State |= _Atend;
  return ( _State );
  }

 _Elem * _Seekhigh;
 _Strstate _Mystate;
 allocator_type _Al;
 };
#line 373 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sstream"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 void swap ( basic_stringbuf < _Elem, _Traits, _Alloc > & _Left,
  basic_stringbuf < _Elem, _Traits, _Alloc > & _Right )
 {
 _Left . swap ( _Right );
 }
#line 383 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sstream"
template < class _Elem,
 class _Traits,
 class _Alloc >
 class basic_istringstream
  : public basic_istream < _Elem, _Traits >
 {
public :
 typedef basic_istringstream < _Elem, _Traits, _Alloc > _Myt;
 typedef basic_istream < _Elem, _Traits > _Mybase;
 typedef _Alloc allocator_type;
 typedef basic_stringbuf < _Elem, _Traits, _Alloc > _Mysb;
 typedef basic_string < _Elem, _Traits, _Alloc > _Mystr;

 explicit basic_istringstream ( ios_base :: openmode _Mode = ios_base :: in )
  : _Mybase ( & _Stringbuffer ),
   _Stringbuffer ( _Mode | ios_base :: in )
  {
  }

 explicit basic_istringstream ( const _Mystr & _Str,
  ios_base :: openmode _Mode = ios_base :: in )
  : _Mybase ( & _Stringbuffer ),
   _Stringbuffer ( _Str, _Mode | ios_base :: in )
  {
  }

 basic_istringstream ( _Myt && _Right )
  : _Mybase ( & _Stringbuffer )
  {
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  }

 _Myt & operator = ( _Myt && _Right )
  {
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  return ( * this );
  }

 void _Assign_rv ( _Myt && _Right )
  {
  if ( this != & _Right )
   {
   _Stringbuffer . str ( _Mystr ( ) );
   this -> swap ( _Right );
   }
  }

 void swap ( _Myt & _Right )
  {
  if ( this != & _Right )
   {
   _Mybase :: swap ( _Right );
   _Stringbuffer . swap ( _Right . _Stringbuffer );
   }
  }

 basic_istringstream ( const _Myt & ) = delete;
 _Myt & operator = ( const _Myt & ) = delete;

 virtual ~ basic_istringstream ( ) noexcept
  {
  }

 _Mysb * rdbuf ( ) const
  {
  return ( ( _Mysb * ) & _Stringbuffer );
  }

 _Mystr str ( ) const
  {
  return ( _Stringbuffer . str ( ) );
  }

 void str ( const _Mystr & _Newstr )
  {
  _Stringbuffer . str ( _Newstr );
  }

private :
 _Mysb _Stringbuffer;
 };
#line 466 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sstream"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 void swap ( basic_istringstream < _Elem, _Traits, _Alloc > & _Left,
  basic_istringstream < _Elem, _Traits, _Alloc > & _Right )
 {
 _Left . swap ( _Right );
 }
#line 476 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sstream"
template < class _Elem,
 class _Traits,
 class _Alloc >
 class basic_ostringstream
  : public basic_ostream < _Elem, _Traits >
 {
public :
 typedef basic_ostringstream < _Elem, _Traits, _Alloc > _Myt;
 typedef basic_ostream < _Elem, _Traits > _Mybase;
 typedef _Alloc allocator_type;
 typedef basic_stringbuf < _Elem, _Traits, _Alloc > _Mysb;
 typedef basic_string < _Elem, _Traits, _Alloc > _Mystr;

 explicit basic_ostringstream ( ios_base :: openmode _Mode = ios_base :: out )
  : _Mybase ( & _Stringbuffer ),
   _Stringbuffer ( _Mode | ios_base :: out )
  {
  }

 explicit basic_ostringstream ( const _Mystr & _Str,
  ios_base :: openmode _Mode = ios_base :: out )
  : _Mybase ( & _Stringbuffer ),
   _Stringbuffer ( _Str, _Mode | ios_base :: out )
  {
  }

 basic_ostringstream ( _Myt && _Right )
  : _Mybase ( & _Stringbuffer )
  {
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  }

 _Myt & operator = ( _Myt && _Right )
  {
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  return ( * this );
  }

 void _Assign_rv ( _Myt && _Right )
  {
  if ( this != & _Right )
   {
   _Stringbuffer . str ( _Mystr ( ) );
   this -> swap ( _Right );
   }
  }

 void swap ( _Myt & _Right )
  {
  if ( this != & _Right )
   {
   _Mybase :: swap ( _Right );
   _Stringbuffer . swap ( _Right . _Stringbuffer );
   }
  }

 basic_ostringstream ( const _Myt & ) = delete;
 _Myt & operator = ( const _Myt & ) = delete;

 virtual ~ basic_ostringstream ( ) noexcept
  {
  }

 _Mysb * rdbuf ( ) const
  {
  return ( ( _Mysb * ) & _Stringbuffer );
  }

 _Mystr str ( ) const
  {
  return ( _Stringbuffer . str ( ) );
  }

 void str ( const _Mystr & _Newstr )
  {
  _Stringbuffer . str ( _Newstr );
  }

private :
 _Mysb _Stringbuffer;
 };
#line 559 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sstream"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 void swap ( basic_ostringstream < _Elem, _Traits, _Alloc > & _Left,
  basic_ostringstream < _Elem, _Traits, _Alloc > & _Right )
 {
 _Left . swap ( _Right );
 }
#line 569 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sstream"
template < class _Elem,
 class _Traits,
 class _Alloc >
 class basic_stringstream
  : public basic_iostream < _Elem, _Traits >
 {
public :
 typedef basic_stringstream < _Elem, _Traits, _Alloc > _Myt;
 typedef basic_iostream < _Elem, _Traits > _Mybase;
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef _Alloc allocator_type;
 typedef typename _Traits :: int_type int_type;
 typedef typename _Traits :: pos_type pos_type;
 typedef typename _Traits :: off_type off_type;
 typedef basic_stringbuf < _Elem, _Traits, _Alloc > _Mysb;
 typedef basic_string < _Elem, _Traits, _Alloc > _Mystr;

 explicit basic_stringstream ( ios_base :: openmode _Mode =
  ios_base :: in | ios_base :: out )
  : _Mybase ( & _Stringbuffer ),
   _Stringbuffer ( _Mode )
  {
  }

 explicit basic_stringstream ( const _Mystr & _Str,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out )
  : _Mybase ( & _Stringbuffer ),
   _Stringbuffer ( _Str, _Mode )
  {
  }

 basic_stringstream ( _Myt && _Right )
  : _Mybase ( & _Stringbuffer )
  {
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  }

 _Myt & operator = ( _Myt && _Right )
  {
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  return ( * this );
  }

 void _Assign_rv ( _Myt && _Right )
  {
  if ( this != & _Right )
   {
   _Stringbuffer . str ( _Mystr ( ) );
   this -> swap ( _Right );
   }
  }

 void swap ( _Myt & _Right )
  {
  if ( this != & _Right )
   {
   _Mybase :: swap ( _Right );
   _Stringbuffer . swap ( _Right . _Stringbuffer );
   }
  }

 basic_stringstream ( const _Myt & ) = delete;
 _Myt & operator = ( const _Myt & ) = delete;

 virtual ~ basic_stringstream ( ) noexcept
  {
  }

 _Mysb * rdbuf ( ) const
  {
  return ( ( _Mysb * ) & _Stringbuffer );
  }

 _Mystr str ( ) const
  {
  return ( _Stringbuffer . str ( ) );
  }

 void str ( const _Mystr & _Newstr )
  {
  _Stringbuffer . str ( _Newstr );
  }

private :
 _Mysb _Stringbuffer;
 };
#line 658 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sstream"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 void swap ( basic_stringstream < _Elem, _Traits, _Alloc > & _Left,
  basic_stringstream < _Elem, _Traits, _Alloc > & _Right )
 {
 _Left . swap ( _Right );
 }
#line 666 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sstream"
}
#line 668 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sstream"
#pragma warning(pop)
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
#pragma warning(push,3)
#line 669 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sstream"
#pragma pack ( pop )
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
#pragma pack ( push, 8 )
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
namespace std { 
#pragma warning(disable: 4127)
#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
__declspec(dllimport) extern FILE *__cdecl _Fiopen(const char *, ios_base::openmode, int); 
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
__declspec(dllimport) extern FILE *__cdecl _Fiopen(const __wchar_t *, ios_base::openmode, int); 
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
__declspec(dllimport) extern FILE *__cdecl _Fiopen(const unsigned short *, ios_base::openmode, int); 
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template < class _Elem > inline
 bool _Fgetc ( _Elem & _Ch, FILE * _File )
 {
 return ( fread ( & _Ch, sizeof ( _Elem ), 1, _File ) == 1 );
 }
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template<> inline bool _Fgetc(char &_Byte, FILE *_File) 
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
{ 
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
int _Meta; 
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
if ((_Meta = fgetc(_File)) == (-1)) { 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
return false; } else 
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
{ 
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
_Byte = ((char)_Meta); 
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
return true; 
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
}  
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
} 
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template<> inline bool _Fgetc(__wchar_t &_Wchar, FILE *_File) 
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
{ 
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
wint_t _Meta; 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
if ((_Meta = ::fgetwc(_File)) == ((wint_t)65535)) { 
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
return false; } else 
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
{ 
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
_Wchar = ((__wchar_t)_Meta); 
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
return true; 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
}  
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
} 
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template<> inline bool _Fgetc(unsigned short &_Wchar, FILE *_File) 
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
{ 
#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
wint_t _Meta; 
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
if ((_Meta = ::fgetwc(_File)) == ((wint_t)65535)) { 
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
return false; } else 
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
{ 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
_Wchar = ((unsigned short)_Meta); 
#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
return true; 
#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
}  
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
} 
#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template < class _Elem > inline
 bool _Fputc ( _Elem _Ch, FILE * _File )
 {
 return ( fwrite ( & _Ch, 1, sizeof ( _Elem ), _File ) == sizeof ( _Elem ) );
 }
#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template<> inline bool _Fputc(char _Byte, FILE *_File) 
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
{ 
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
return fputc(_Byte, _File) != (-1); 
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
} 
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template<> inline bool _Fputc(__wchar_t _Wchar, FILE *_File) 
#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
{ 
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
return (::fputwc(_Wchar, _File)) != ((wint_t)65535); 
#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
} 
#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template<> inline bool _Fputc(unsigned short _Wchar, FILE *_File) 
#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
{ 
#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
return (::fputwc(_Wchar, _File)) != ((wint_t)65535); 
#line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
} 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template < class _Elem > inline
 bool _Ungetc ( const _Elem & _Ch, FILE * _File )
 {
 return ( false );
 }
#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template<> inline bool _Ungetc(const char &_Byte, FILE *_File) 
#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
{ 
#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
return ungetc((unsigned char)_Byte, _File) != (-1); 
#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
} 
#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template<> inline bool _Ungetc(const signed char &_Byte, FILE *_File) 
#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
{ 
#line 112 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
return ungetc((unsigned char)_Byte, _File) != (-1); 
#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
} 
#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template<> inline bool _Ungetc(const unsigned char &_Byte, FILE *_File) 
#line 116 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
{ 
#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
return ungetc(_Byte, _File) != (-1); 
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
} 
#line 120 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template<> inline bool _Ungetc(const __wchar_t &_Wchar, FILE *_File) 
#line 121 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
{ 
#line 122 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
return (::ungetwc(_Wchar, _File)) != ((wint_t)65535); 
#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
} 
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template<> inline bool _Ungetc(const unsigned short &_Wchar, FILE *_File) 
#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
{ 
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
return (::ungetwc(_Wchar, _File)) != ((wint_t)65535); 
#line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
} 
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template < class _Elem,
 class _Traits >
 class basic_filebuf
  : public basic_streambuf < _Elem, _Traits >
 {
public :
 typedef basic_filebuf < _Elem, _Traits > _Myt;
 typedef basic_streambuf < _Elem, _Traits > _Mysb;
 typedef typename _Traits :: state_type _Myst;
 typedef codecvt < _Elem, char, typename _Traits :: state_type > _Cvt;

 basic_filebuf ( FILE * _File = 0 )
  : _Mysb ( )
  {
  _Init ( _File, _Newfl );
  }

 virtual ~ basic_filebuf ( ) noexcept
  {
  if ( _Myfile != 0 )
   _Reset_back ( );
  if ( _Closef )
   close ( );
  }

 typedef typename _Traits :: int_type int_type;
 typedef typename _Traits :: pos_type pos_type;
 typedef typename _Traits :: off_type off_type;

 basic_filebuf ( _Uninitialized )
  : _Mysb ( _Noinit )
  {
  }

 basic_filebuf ( _Myt && _Right )
  {
  _Init ( _Right . _Myfile, _Newfl );
  _Init ( ( FILE * ) 0, _Closefl );
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  }

 _Myt & operator = ( _Myt && _Right )
  {
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  return ( * this );
  }

 void _Assign_rv ( _Myt && _Right )
  {
  if ( this != & _Right )
   {
   close ( );
   this -> swap ( _Right );
   }
  }

 void swap ( _Myt & _Right )
  {
  if ( this != & _Right )
   {

   FILE * _Myfile_sav = _Myfile;
   const _Cvt * _Pcvt_sav = _Pcvt;
   typename _Traits :: state_type _State_sav = _State;
   bool _Wrotesome_sav = _Wrotesome;
   bool _Closef_sav = _Closef;
   bool _Set_eback_sav = _Mysb :: eback ( ) == & _Mychar;
   bool _Set_eback_live = _Mysb :: gptr ( ) == & _Mychar;

   _Elem * _Pfirst0 = _Mysb :: pbase ( );
   _Elem * _Pnext0 = _Mysb :: pptr ( );
   _Elem * _Pend = _Mysb :: epptr ( );
   _Elem * _Gfirst0 = _Mysb :: eback ( );
   _Elem * _Gnext0 = _Mysb :: gptr ( );
   _Elem * _Gend = _Mysb :: egptr ( );


   _Init ( _Right . _Myfile, _Right . _Myfile != 0 ? _Openfl : _Newfl );
   _Mysb :: setp ( _Right . pbase ( ), _Right . pptr ( ), _Right . epptr ( ) );
   if ( _Right . eback ( ) != & _Right . _Mychar )
    _Mysb :: setg ( _Right . eback ( ), _Right . gptr ( ), _Right . egptr ( ) );
   else if ( _Right . gptr ( ) != & _Right . _Mychar )
    _Mysb :: setg ( & _Mychar, & _Mychar + 1, & _Mychar + 1 );
   else
    _Mysb :: setg ( & _Mychar, & _Mychar, & _Mychar + 1 );

   _Pcvt = _Right . _Pcvt;
   _State = _Right . _State;
   _Wrotesome = _Right . _Wrotesome;
   _Closef = _Right . _Closef;


   _Right . _Init ( _Myfile_sav, _Myfile_sav != 0 ? _Openfl : _Newfl );
   _Right . setp ( _Pfirst0, _Pnext0, _Pend );
   if ( ! _Set_eback_sav )
    _Right . setg ( _Gfirst0, _Gnext0, _Gend );
   else if ( ! _Set_eback_live )
    _Right . setg ( & _Right . _Mychar, & _Right . _Mychar + 1,
     & _Right . _Mychar + 1 );
   else
    _Right . setg ( & _Right . _Mychar, & _Right . _Mychar,
     & _Right . _Mychar + 1 );

   _Right . _Pcvt = _Pcvt_sav;
   _Right . _State = _State_sav;
   _Right . _Wrotesome = _Wrotesome_sav;
   _Right . _Closef = _Closef_sav;


   :: std :: swap ( _Set_eback, _Right . _Set_eback );
   :: std :: swap ( _Set_egptr, _Right . _Set_egptr );

   :: std :: swap ( _Mychar, _Right . _Mychar );
   :: std :: swap ( _Mysb :: _Plocale, _Right . _Plocale );
   }
  }

 basic_filebuf ( const _Myt & ) = delete;
 _Myt & operator = ( const _Myt & ) = delete;

 enum _Initfl
  {
  _Newfl, _Openfl, _Closefl };

 bool is_open ( ) const
  {
  return ( _Myfile != 0 );
  }

 _Myt * open ( const char * _Filename,
  ios_base :: openmode _Mode,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  FILE * _File;
  if ( _Myfile != 0 || ( _File = _Fiopen ( _Filename, _Mode, _Prot ) ) == 0 )
   return ( 0 );

  _Init ( _File, _Openfl );
  _Initcvt ( & use_facet < _Cvt > ( _Mysb :: getloc ( ) ) );
  return ( this );
  }

 _Myt * open ( const string & _Str,
  ios_base :: openmode _Mode,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  return ( open ( _Str . c_str ( ), _Mode, _Prot ) );
  }


 _Myt * open ( const char * _Filename, ios_base :: open_mode _Mode )
  {
  return ( open ( _Filename, ( ios_base :: openmode ) _Mode ) );
  }


 _Myt * open ( const wchar_t * _Filename,
  ios_base :: openmode _Mode,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  FILE * _File;
  if ( _Myfile != 0 || ( _File = _Fiopen ( _Filename, _Mode, _Prot ) ) == 0 )
   return ( 0 );

  _Init ( _File, _Openfl );
  _Initcvt ( & use_facet < _Cvt > ( _Mysb :: getloc ( ) ) );
  return ( this );
  }

 _Myt * open ( const wstring & _Str,
  ios_base :: openmode _Mode,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  return ( open ( _Str . c_str ( ), _Mode, _Prot ) );
  }


 _Myt * open ( const wchar_t * _Filename,
  ios_base :: open_mode _Mode )
  {
  return ( open ( _Filename, ( ios_base :: openmode ) _Mode ) );
  }



 _Myt * open ( const unsigned short * _Filename,
  ios_base :: openmode _Mode,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  FILE * _File;
  if ( _Myfile != 0 || ( _File = _Fiopen ( _Filename, _Mode, _Prot ) ) == 0 )
   return ( 0 );

  _Init ( _File, _Openfl );
  _Initcvt ( & use_facet < _Cvt > ( _Mysb :: getloc ( ) ) );
  return ( this );
  }


 _Myt * open ( const unsigned short * _Filename,
  ios_base :: open_mode _Mode )
  {
  return ( open ( _Filename, ( ios_base :: openmode ) _Mode ) );
  }



 _Myt * close ( )
  {
  _Myt * _Ans = this;
  if ( _Myfile == 0 )
   _Ans = 0;
  else
   {
   if ( ! _Endwrite ( ) )
    _Ans = 0;
   if ( fclose ( _Myfile ) != 0 )
    _Ans = 0;
   }
  _Init ( 0, _Closefl );
  return ( _Ans );
  }

 virtual void _Lock ( )
  {
  if ( _Myfile )
   :: _lock_file ( _Myfile );
  }

 virtual void _Unlock ( )
  {
  if ( _Myfile )
   :: _unlock_file ( _Myfile );
  }

protected :
 virtual int_type overflow ( int_type _Meta =
  _Traits :: eof ( ) )
  {
  if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
   return ( _Traits :: not_eof ( _Meta ) );
  else if ( _Mysb :: pptr ( ) != 0
   && _Mysb :: pptr ( ) < _Mysb :: epptr ( ) )
   {
   * _Mysb :: _Pninc ( ) = _Traits :: to_char_type ( _Meta );
   return ( _Meta );
   }
  else if ( _Myfile == 0 )
   return ( _Traits :: eof ( ) );
  _Reset_back ( );
  if ( _Pcvt == 0 )
   return ( _Fputc ( _Traits :: to_char_type ( _Meta ), _Myfile )
    ? _Meta : _Traits :: eof ( ) );
  else
   {
   const int _STRING_INC = 8;
   const _Elem _Ch = _Traits :: to_char_type ( _Meta );
   const _Elem * _Src;
   char * _Dest;

   string _Str ( _STRING_INC, '\000' );
   for (;; )
    switch ( _Pcvt -> out ( _State,
     & _Ch, & _Ch + 1, _Src,
     & * _Str . begin ( ), & * _Str . begin ( ) + _Str . size ( ), _Dest ) )
    {
    case codecvt_base :: partial :
    case codecvt_base :: ok :
     {
     size_t _Count = _Dest - & * _Str . begin ( );
     if ( 0 < _Count && _Count !=
      fwrite ( & * _Str . begin ( ), 1, _Count, _Myfile ) )
      return ( _Traits :: eof ( ) );

     _Wrotesome = true;
     if ( _Src != & _Ch )
      return ( _Meta );

     if ( 0 < _Count )
      ;
     else if ( _Str . size ( ) < 4 * _STRING_INC )
      _Str . append ( _STRING_INC, '\000' );
     else
      return ( _Traits :: eof ( ) );
     break;
     }

    case codecvt_base :: noconv :
     return ( _Fputc ( _Ch, _Myfile ) ? _Meta
      : _Traits :: eof ( ) );

    default :
     return ( _Traits :: eof ( ) );
    }
   }
 }

 virtual int_type pbackfail ( int_type _Meta =
  _Traits :: eof ( ) )
  {
  if ( _Mysb :: gptr ( ) != 0
   && _Mysb :: eback ( ) < _Mysb :: gptr ( )
   && ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta )
   || _Traits :: eq_int_type ( _Traits :: to_int_type ( _Mysb :: gptr ( ) [ - 1 ] ),
    _Meta ) ) )
   {
   _Mysb :: _Gndec ( );
   return ( _Traits :: not_eof ( _Meta ) );
   }
  else if ( _Myfile == 0 || _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
   return ( _Traits :: eof ( ) );
  else if ( _Pcvt == 0 && _Ungetc ( _Traits :: to_char_type ( _Meta ), _Myfile ) )
   return ( _Meta );
  else if ( _Mysb :: gptr ( ) != & _Mychar )
   {
   _Mychar = _Traits :: to_char_type ( _Meta );
   _Set_back ( );
   return ( _Meta );
   }
  else
   return ( _Traits :: eof ( ) );
 }

 virtual int_type underflow ( )
  {
  int_type _Meta;
  if ( _Mysb :: gptr ( ) != 0
   && _Mysb :: gptr ( ) < _Mysb :: egptr ( ) )
   return ( _Traits :: to_int_type ( * _Mysb :: gptr ( ) ) );
  else if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta = uflow ( ) ) )
   return ( _Meta );
  else
   {
   pbackfail ( _Meta );
   return ( _Meta );
   }
  }

 virtual int_type uflow ( )
  {
  if ( _Mysb :: gptr ( ) != 0
   && _Mysb :: gptr ( ) < _Mysb :: egptr ( ) )
   return ( _Traits :: to_int_type (
    * _Mysb :: _Gninc ( ) ) );
  else if ( _Myfile == 0 )
   return ( _Traits :: eof ( ) );
  _Reset_back ( );
  if ( _Pcvt == 0 )
   {
   _Elem _Ch = 0;
   return ( _Fgetc ( _Ch, _Myfile ) ? _Traits :: to_int_type ( _Ch )
    : _Traits :: eof ( ) );
   }
  else
   {
   string _Str;

   for (;; )
    {
    _Elem _Ch, * _Dest;
    const char * _Src;
    int _Nleft;
    int _Meta = fgetc ( _Myfile );

    if ( _Meta == ( - 1 ) )
     return ( _Traits :: eof ( ) );

    _Str . append ( 1, ( char ) _Meta );
    switch ( _Pcvt -> in ( _State,
     & * _Str . begin ( ), & * _Str . begin ( ) + _Str . size ( ), _Src,
     & _Ch, & _Ch + 1, _Dest ) )
     {
    case codecvt_base :: partial :
    case codecvt_base :: ok :
     if ( _Dest != & _Ch )
      {
      _Nleft = ( int ) ( & * _Str . begin ( ) + _Str . size ( ) - _Src );
      for (; 0 < _Nleft; )
       ungetc ( _Src [ -- _Nleft ], _Myfile );
      return ( _Traits :: to_int_type ( _Ch ) );
      }
     else
      _Str . erase ( ( size_t ) 0,
       ( size_t ) ( _Src - & * _Str . begin ( ) ) );
     break;

    case codecvt_base :: noconv :
     if ( _Str . size ( ) < sizeof ( _Elem ) )
      break;

     :: memcpy_s ( ( & _Ch ), ( sizeof ( _Elem ) ), ( & * _Str . begin ( ) ), ( sizeof ( _Elem ) ) );


     return ( _Traits :: to_int_type ( _Ch ) );

    default :
     return ( _Traits :: eof ( ) );
     }
    }
   }
  }

 virtual pos_type seekoff ( off_type _Off,
  ios_base :: seekdir _Way,
  ios_base :: openmode =
   ( ios_base :: openmode ) ( ios_base :: in | ios_base :: out ) )
  {
  fpos_t _Fileposition;

  if ( _Mysb :: gptr ( ) == & _Mychar
   && _Way == ios_base :: cur
   && _Pcvt == 0 )
   _Off -= ( off_type ) sizeof ( _Elem );

  if ( _Myfile == 0 || ! _Endwrite ( )
   || ( ( _Off != 0 || _Way != ios_base :: cur )
    && _fseeki64 ( _Myfile, _Off, _Way ) != 0 )
   || fgetpos ( _Myfile, & _Fileposition ) != 0 )
   return ( pos_type ( _BADOFF ) );

  _Reset_back ( );
  return ( pos_type ( _State, _Fileposition ) );

  }

 virtual pos_type seekpos ( pos_type _Pos,
  ios_base :: openmode =
   ( ios_base :: openmode ) ( ios_base :: in | ios_base :: out ) )
  {
  fpos_t _Fileposition = _Pos . seekpos ( );
  off_type _Off = ( off_type ) _Pos - ( off_type ) ( ( long long ) ( _Fileposition ) );

  if ( _Myfile == 0 || ! _Endwrite ( )
   || fsetpos ( _Myfile, & _Fileposition ) != 0
   || ( _Off != 0 && _fseeki64 ( _Myfile, _Off, 1 ) != 0 )
   || fgetpos ( _Myfile, & _Fileposition ) != 0 )
   return ( pos_type ( _BADOFF ) );

  _State = _Pos . state ( );

  _Reset_back ( );
  return ( pos_type ( _State, _Fileposition ) );

  }

 virtual _Mysb * setbuf ( _Elem * _Buffer, streamsize _Count )
  {
  if ( _Myfile == 0 || setvbuf ( _Myfile, ( char * ) _Buffer,
   _Buffer == 0 && _Count == 0 ? 4 : 0,
   ( size_t ) _Count * sizeof ( _Elem ) ) != 0 )
   return ( 0 );
  else
   {
   _Init ( _Myfile, _Openfl );
   return ( this );
   }
  }

 virtual int sync ( )
  {
  return ( _Myfile == 0
   || _Traits :: eq_int_type ( _Traits :: eof ( ), overflow ( ) )
   || 0 <= fflush ( _Myfile ) ? 0 : - 1 );
  }

 virtual void imbue ( const locale & _Loc )
  {
  _Initcvt ( & use_facet < _Cvt > ( _Loc ) );
  }

 void _Init ( FILE * _File, _Initfl _Which )
  {
   static _Myst _Stinit;

  _Closef = _Which == _Openfl;
  _Wrotesome = false;

  _Mysb :: _Init ( );






  #pragma warning(push)
  #pragma warning(disable: 6240)
  if ( _File != 0 && sizeof ( _Elem ) == 1 )
  #pragma warning(pop)

   {
   _Elem * * _Pb = 0;
   _Elem * * _Pn = 0;
   int * _Nr = 0;

   :: _get_stream_buffer_pointers (
    _File,
    reinterpret_cast < char * * * > ( & _Pb ),
    reinterpret_cast < char * * * > ( & _Pn ),
    & _Nr );
   int * _Nw = _Nr;

   _Mysb :: _Init ( _Pb, _Pn, _Nr, _Pb, _Pn, _Nw );
   }

  _Myfile = _File;
  _State = _Stinit;
  _Pcvt = 0;
  }

 bool _Endwrite ( )
  {
  if ( _Pcvt == 0 || ! _Wrotesome )
   return ( true );
  else
   {
   const int _STRING_INC = 8;
   char * _Dest;
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ), overflow ( ) ) )
    return ( false );

   string _Str ( _STRING_INC, '\000' );
   for (;; )
    switch ( _Pcvt -> unshift ( _State,
     & * _Str . begin ( ), & * _Str . begin ( ) + _Str . size ( ), _Dest ) )
    {
    case codecvt_base :: ok :
     _Wrotesome = false;

    case codecvt_base :: partial :
     {
     size_t _Count = _Dest - & * _Str . begin ( );
     if ( 0 < _Count && _Count !=
      fwrite ( & * _Str . begin ( ), 1, _Count, _Myfile ) )
      return ( false );
     if ( ! _Wrotesome )
      return ( true );
     if ( _Count == 0 )
      _Str . append ( _STRING_INC, '\000' );
     break;
     }

    case codecvt_base :: noconv :
     return ( true );

    default :
     return ( false );
    }
   }
  }

 void _Initcvt ( const _Cvt * _Newpcvt )
  {
  if ( _Newpcvt -> always_noconv ( ) )
   _Pcvt = 0;
  else
   {
   _Pcvt = _Newpcvt;
   _Mysb :: _Init ( );
   }
  }

private :
 const _Cvt * _Pcvt;
 _Elem _Mychar;
 bool _Wrotesome;
 typename _Traits :: state_type _State;
 bool _Closef;
 FILE * _Myfile;

 void _Reset_back ( )
  {
  if ( _Mysb :: eback ( ) == & _Mychar )
   _Mysb :: setg ( _Set_eback, _Set_eback, _Set_egptr );
  }

 void _Set_back ( )
  {
  if ( _Mysb :: eback ( ) != & _Mychar )
   {
   _Set_eback = _Mysb :: eback ( );
   _Set_egptr = _Mysb :: egptr ( );
   }
  _Mysb :: setg ( & _Mychar, & _Mychar, & _Mychar + 1 );
  }

 _Elem * _Set_eback;
 _Elem * _Set_egptr;
 };
#line 723 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template < class _Elem,
 class _Traits > inline
 void swap ( basic_filebuf < _Elem, _Traits > & _Left,
  basic_filebuf < _Elem, _Traits > & _Right )
 {
 _Left . swap ( _Right );
 }
#line 732 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template < class _Elem,
 class _Traits >
 class basic_ifstream
  : public basic_istream < _Elem, _Traits >
 {
public :
 typedef basic_ifstream < _Elem, _Traits > _Myt;
 typedef basic_istream < _Elem, _Traits > _Mybase;
 typedef basic_filebuf < _Elem, _Traits > _Myfb;
 typedef basic_ios < _Elem, _Traits > _Myios;

 basic_ifstream ( )
  : _Mybase ( & _Filebuffer )
  {
  }

 explicit basic_ifstream ( const char * _Filename,
  ios_base :: openmode _Mode = ios_base :: in,
  int _Prot = ( int ) ios_base :: _Openprot )
  : _Mybase ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: in, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

 explicit basic_ifstream ( const string & _Str,
  ios_base :: openmode _Mode = ios_base :: in,
  int _Prot = ( int ) ios_base :: _Openprot )
  : _Mybase ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Str . c_str ( ), _Mode | ios_base :: in, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

 explicit basic_ifstream ( const wchar_t * _Filename,
  ios_base :: openmode _Mode = ios_base :: in,
  int _Prot = ( int ) ios_base :: _Openprot )
  : _Mybase ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: in, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

 explicit basic_ifstream ( const wstring & _Str,
  ios_base :: openmode _Mode = ios_base :: in,
  int _Prot = ( int ) ios_base :: _Openprot )
  : _Mybase ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Str . c_str ( ), _Mode | ios_base :: in, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }


 explicit basic_ifstream ( const unsigned short * _Filename,
  ios_base :: openmode _Mode = ios_base :: in,
  int _Prot = ( int ) ios_base :: _Openprot )
  : _Mybase ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: in, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }


 explicit basic_ifstream ( FILE * _File )
  : _Mybase ( & _Filebuffer ),
   _Filebuffer ( _File )
  {
  }

 basic_ifstream ( _Myt && _Right )
  : _Mybase ( & _Filebuffer )
  {
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  }

 _Myt & operator = ( _Myt && _Right )
  {
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  return ( * this );
  }

 void _Assign_rv ( _Myt && _Right )
  {
  if ( this != & _Right )
   {
   _Filebuffer . close ( );
   this -> swap ( _Right );
   }
  }

 void swap ( _Myt & _Right )
  {
  if ( this != & _Right )
   {
   _Mybase :: swap ( _Right );
   _Filebuffer . swap ( _Right . _Filebuffer );
   }
  }

 basic_ifstream ( const _Myt & ) = delete;
 _Myt & operator = ( const _Myt & ) = delete;

 void open ( const wchar_t * _Filename,
  ios_base :: openmode _Mode = ios_base :: in,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: in, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  else
   _Myios :: clear ( );
  }

 void open ( const wstring & _Str,
  ios_base :: openmode _Mode = ios_base :: in,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  open ( _Str . c_str ( ), _Mode, _Prot );
  }


 void open ( const wchar_t * _Filename, ios_base :: open_mode _Mode )
  {
  open ( _Filename, ( ios_base :: openmode ) _Mode );
  }



 void open ( const unsigned short * _Filename,
  ios_base :: openmode _Mode = ios_base :: in,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: in, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  else
   _Myios :: clear ( );
  }


 void open ( const unsigned short * _Filename,
  ios_base :: open_mode _Mode )
  {
  open ( _Filename, ( ios_base :: openmode ) _Mode );
  }



 virtual ~ basic_ifstream ( ) noexcept
  {
  }

 _Myfb * rdbuf ( ) const
  {
  return ( ( _Myfb * ) & _Filebuffer );
  }

 bool is_open ( ) const
  {
  return ( _Filebuffer . is_open ( ) );
  }

 void open ( const char * _Filename,
  ios_base :: openmode _Mode = ios_base :: in,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: in, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  else
   _Myios :: clear ( );
  }

 void open ( const string & _Str,
  ios_base :: openmode _Mode = ios_base :: in,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  open ( _Str . c_str ( ), _Mode, _Prot );
  }


 void open ( const char * _Filename, ios_base :: open_mode _Mode )
  {
  open ( _Filename, ( ios_base :: openmode ) _Mode );
  }


 void close ( )
  {
  if ( _Filebuffer . close ( ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

private :
 _Myfb _Filebuffer;
 };
#line 927 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template < class _Elem,
 class _Traits > inline
 void swap ( basic_ifstream < _Elem, _Traits > & _Left,
  basic_ifstream < _Elem, _Traits > & _Right )
 {
 _Left . swap ( _Right );
 }
#line 936 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template < class _Elem,
 class _Traits >
 class basic_ofstream
  : public basic_ostream < _Elem, _Traits >
 {
public :
 typedef basic_ofstream < _Elem, _Traits > _Myt;
 typedef basic_ostream < _Elem, _Traits > _Mybase;
 typedef basic_filebuf < _Elem, _Traits > _Myfb;
 typedef basic_ios < _Elem, _Traits > _Myios;

 basic_ofstream ( )
  : _Mybase ( & _Filebuffer )
  {
  }

 explicit basic_ofstream ( const char * _Filename,
  ios_base :: openmode _Mode = ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  : _Mybase ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: out, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

 explicit basic_ofstream ( const string & _Str,
  ios_base :: openmode _Mode = ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  : _Mybase ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Str . c_str ( ), _Mode | ios_base :: out, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

 explicit basic_ofstream ( const wchar_t * _Filename,
  ios_base :: openmode _Mode = ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  : _Mybase ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: out, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

 explicit basic_ofstream ( const wstring & _Str,
  ios_base :: openmode _Mode = ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  : _Mybase ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Str . c_str ( ), _Mode | ios_base :: out, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }


 explicit basic_ofstream ( const unsigned short * _Filename,
  ios_base :: openmode _Mode = ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  : _Mybase ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: out, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }


 explicit basic_ofstream ( FILE * _File )
  : _Mybase ( & _Filebuffer ),
   _Filebuffer ( _File )
  {
  }

 basic_ofstream ( _Myt && _Right )
  : _Mybase ( & _Filebuffer )
  {
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  }

 _Myt & operator = ( _Myt && _Right )
  {
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  return ( * this );
  }

 void _Assign_rv ( _Myt && _Right )
  {
  if ( this != & _Right )
   {
   _Filebuffer . close ( );
   this -> swap ( _Right );
   }
  }

 void swap ( _Myt & _Right )
  {
  if ( this != & _Right )
   {
   _Mybase :: swap ( _Right );
   _Filebuffer . swap ( _Right . _Filebuffer );
   }
  }

 basic_ofstream ( const _Myt & ) = delete;
 _Myt & operator = ( const _Myt & ) = delete;

 void open ( const wchar_t * _Filename,
  ios_base :: openmode _Mode = ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: out, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  else
   _Myios :: clear ( );
  }

 void open ( const wstring & _Str,
  ios_base :: openmode _Mode = ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  open ( _Str . c_str ( ), _Mode, _Prot );
  }


 void open ( const wchar_t * _Filename, ios_base :: open_mode _Mode )
  {
  open ( _Filename, ( ios_base :: openmode ) _Mode );
  }



 void open ( const unsigned short * _Filename,
  ios_base :: openmode _Mode = ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: out, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  else
   _Myios :: clear ( );
  }


 void open ( const unsigned short * _Filename,
  ios_base :: open_mode _Mode )
  {
  open ( _Filename, ( ios_base :: openmode ) _Mode );
  }



 virtual ~ basic_ofstream ( ) noexcept
  {
  }

 _Myfb * rdbuf ( ) const
  {
  return ( ( _Myfb * ) & _Filebuffer );
  }

 bool is_open ( ) const
  {
  return ( _Filebuffer . is_open ( ) );
  }

 void open ( const char * _Filename,
  ios_base :: openmode _Mode = ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: out, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  else
   _Myios :: clear ( );
  }

 void open ( const string & _Str,
  ios_base :: openmode _Mode = ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  open ( _Str . c_str ( ), _Mode, _Prot );
  }


 void open ( const char * _Filename, ios_base :: open_mode _Mode )
  {
  open ( _Filename, ( ios_base :: openmode ) _Mode );
  }


 void close ( )
  {
  if ( _Filebuffer . close ( ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

private :
 _Myfb _Filebuffer;
 };
#line 1131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template < class _Elem,
 class _Traits > inline
 void swap ( basic_ofstream < _Elem, _Traits > & _Left,
  basic_ofstream < _Elem, _Traits > & _Right )
 {
 _Left . swap ( _Right );
 }
#line 1140 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template < class _Elem,
 class _Traits >
 class basic_fstream
  : public basic_iostream < _Elem, _Traits >
 {
public :
 typedef basic_fstream < _Elem, _Traits > _Myt;
 typedef basic_iostream < _Elem, _Traits > _Mybase;
 typedef basic_filebuf < _Elem, _Traits > _Myfb;
 typedef basic_ios < _Elem, _Traits > _Myios;
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef typename _Traits :: int_type int_type;
 typedef typename _Traits :: pos_type pos_type;
 typedef typename _Traits :: off_type off_type;

 basic_fstream ( )
  : _Mybase ( & _Filebuffer )
  {
  }

 explicit basic_fstream ( const char * _Filename,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  : _Mybase ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Filename, _Mode, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

 explicit basic_fstream ( const string & _Str,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  : _Mybase ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Str . c_str ( ), _Mode, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

 explicit basic_fstream ( const wchar_t * _Filename,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  : _Mybase ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Filename, _Mode, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

 explicit basic_fstream ( const wstring & _Str,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  : _Mybase ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Str . c_str ( ), _Mode, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }


 explicit basic_fstream ( const unsigned short * _Filename,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  : _Mybase ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Filename, _Mode, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }


 explicit basic_fstream ( FILE * _File )
  : _Mybase ( & _Filebuffer ),
   _Filebuffer ( _File )
  {
  }

 basic_fstream ( _Myt && _Right )
  : _Mybase ( & _Filebuffer )
  {
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  }

 _Myt & operator = ( _Myt && _Right )
  {
  _Assign_rv ( :: std :: forward < _Myt > ( _Right ) );
  return ( * this );
  }

 void _Assign_rv ( _Myt && _Right )
  {
  if ( this != & _Right )
   {
   _Filebuffer . close ( );
   this -> swap ( _Right );
   }
  }

 void swap ( _Myt & _Right )
  {
  if ( this != & _Right )
   {
   _Mybase :: swap ( _Right );
   _Filebuffer . swap ( _Right . _Filebuffer );
   }
  }

 basic_fstream ( const _Myt & ) = delete;
 _Myt & operator = ( const _Myt & ) = delete;

 void open ( const wchar_t * _Filename,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  if ( _Filebuffer . open ( _Filename, _Mode, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  else
   _Myios :: clear ( );
  }

 void open ( const wstring & _Str,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  open ( _Str . c_str ( ), _Mode, _Prot );
  }


 void open ( const wchar_t * _Filename, ios_base :: open_mode _Mode )
  {
  open ( _Filename, ( ios_base :: openmode ) _Mode );
  }



 void open ( const unsigned short * _Filename,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  if ( _Filebuffer . open ( _Filename, _Mode, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  else
   _Myios :: clear ( );
  }


 void open ( const unsigned short * _Filename,
  ios_base :: open_mode _Mode )
  {
  open ( _Filename, ( ios_base :: openmode ) _Mode );
  }



 virtual ~ basic_fstream ( ) noexcept
  {
  }

 _Myfb * rdbuf ( ) const
  {
  return ( ( _Myfb * ) & _Filebuffer );
  }

 bool is_open ( ) const
  {
  return ( _Filebuffer . is_open ( ) );
  }

 void open ( const char * _Filename,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  if ( _Filebuffer . open ( _Filename, _Mode, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  else
   _Myios :: clear ( );
  }

 void open ( const string & _Str,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  open ( _Str . c_str ( ), _Mode, _Prot );
  }


 void open ( const char * _Filename, ios_base :: open_mode _Mode )
  {
  open ( _Filename, ( ios_base :: openmode ) _Mode );
  }


 void close ( )
  {
  if ( _Filebuffer . close ( ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
 }

private :
 _Myfb _Filebuffer;
 };
#line 1340 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
template < class _Elem,
 class _Traits > inline
 void swap ( basic_fstream < _Elem, _Traits > & _Left,
  basic_fstream < _Elem, _Traits > & _Right )
 {
 _Left . swap ( _Right );
 }
#line 1347 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
}
#line 1350 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream"
#pragma warning(pop)
#pragma pack ( pop )
#line 108 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
typedef 
#line 66 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
struct { 
#line 67 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
double *e; 
#line 68 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
double *f; 
#line 69 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
unsigned short N; 
#line 71 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
unsigned short *Ks; 
#line 72 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
float *Cms; 
#line 73 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
unsigned short NModels; 
#line 74 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
unsigned short NComps; 
#line 75 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
unsigned short *boolModel; 
#line 77 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
unsigned short Depth; 
#line 78 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
unsigned short LognDepth; 
#line 79 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
unsigned short nFathers; 
#line 80 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
unsigned short nCallForFather; 
#line 81 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
unsigned short *Fathers; 
#line 83 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
unsigned short *SonNoVec; 
#line 85 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
unsigned short *RelStarts; 
#line 86 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
unsigned short *RelEnds; 
#line 87 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
unsigned short *RelVec; 
#line 88 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
unsigned short *SegStartI; 
#line 89 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
unsigned short *SegEndI; 
#line 90 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
unsigned short *SegToComp; 
#line 91 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
unsigned short *MidComps; 
#line 93 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
unsigned short *FIdxs; 
#line 96 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
unsigned short *CompByLevel32; 
#line 97 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
unsigned short *CompByFLevel32; 
#line 98 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
unsigned short nLRel; 
#line 99 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
unsigned short *LRelStarts; 
#line 100 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
unsigned short *LRelEnds; 
#line 101 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
unsigned short nFLRel; 
#line 102 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
unsigned short *FLRelStarts; 
#line 103 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
unsigned short *FLRelEnds; 
#line 108 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
} HMat; 
#line 122 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
typedef 
#line 111 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
struct { 
#line 112 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
unsigned short NStimuli; 
#line 113 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
unsigned short loc; 
#line 114 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
unsigned short comp; 
#line 115 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
unsigned short numofdts; 
#line 116 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
float area; 
#line 117 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
unsigned short *dtInds; 
#line 118 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
float *amps; 
#line 119 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
float *durs; 
#line 120 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
float *dels; 
#line 121 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
float Nt; 
#line 122 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
} Stim; 
#line 133 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
typedef 
#line 126 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
struct { 
#line 127 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
float *Vs; 
#line 128 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
float dt; 
#line 129 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
float TFinal; 
#line 130 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
float Celsius; 
#line 131 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
unsigned short NRecSites; 
#line 132 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
unsigned short *RecSites; 
#line 133 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
} Sim; 
#line 136 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
void RunByModelSerial(); 
#line 137 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
void RunByModelP(); 
#line 139 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
void solveByNeuron(const HMat & InMat, double * B, double * D); 
#line 140 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
float maxf(float a, float b); 
#line 141 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
float MaxAbsDiffVec(float * A, float * B, int n); 
#line 143 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
void CopyVec(float * A, float * B, int n); 
#line 144 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
void CopyVecTwoTypes(double * B, float * A, int n); 
#line 145 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
void FlipVec(float * A, float * B, int n); 
#line 146 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
void CompareArrays(const float * App, const float * Real, int n, char * Prefix); 
#line 147 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
double diffclock(clock_t clock1, clock_t clock2); 
#line 152 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
void ReadSerialNeuronData(const char * FN, HMat & TheMat); 
#line 153 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
void ReadParallelNeuronData(const char * FN, HMat & TheMat, unsigned short * CompDepth, unsigned short * CompFDepth); 
#line 154 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
void FreeSerialNeuronData(HMat & InMat); 
#line 155 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
void ReadStimData(const char * FN, Stim & stim, unsigned short Nx); 
#line 156 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
void CreateStimData(Stim & stim); 
#line 157 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
void ReadSimData(const char * FN, unsigned short N, Sim & sim); 
#line 158 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
void ReadStimFromFile(const char * FN, Stim & stim); 
#line 159 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
void FreeStimData(Stim & stim); 
#line 160 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
void FreeSimData(Sim & sim); 
#line 162 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
void SaveArrayToFile(const char * FN, const int N, const float * Arr); 
#line 163 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
void SaveVHots(const char * FN, float ** VHotsHost, unsigned short Nt, unsigned short NStimuli); 
#line 164 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
void ReadDebugData(const char * FN, float ** DebugData, unsigned short Nsegs, unsigned short Nt); 
#line 165 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
void ReadRHSData(const char * FN, float ** DebugData, unsigned short Nsegs, unsigned short Nt); 
#line 166 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
void ReadDData(const char * FN, float ** DebugData, unsigned short Nsegs, unsigned short Nt); 
#line 167 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
void SetStatesFromDebug(float ** StatesM, float ** DebugData, unsigned short i, unsigned short N); 
#line 168 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
void SetRHSFromNeuron(float * rhs, float ** DebugData, unsigned short i, unsigned short N); 
#line 169 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
void SetDFromNeuron(float * D, float ** DebugData, unsigned short i, unsigned short N); 
#line 170 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
void ReadVData(const char * FN, float ** DebugData, unsigned short Nsegs, unsigned short Nt); 
#line 171 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
void SetVFromNeuron(float * vs, float ** DebugData, unsigned short i, unsigned short N); 
#line 172 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
void debugPrintMYFTYPE(float * A, unsigned short N, FILE * fdebug); 
#line 173 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
void debugPrintMYSECONDFTYPE(double * A, unsigned short N, FILE * fdebug); 
#line 174 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
void ReadShortFromCSV(char * line, unsigned short * ans, int n); 
#line 175 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
void ReadDoubleFromCSV(char * line, double * ans, int n); 
#line 176 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
void ReadFloatFromCSV(char * line, float * ans, int n); 
#line 177 "c:\\pyneurogpu_winnew\\neurogpu6\\Util.h"
float *ReadAllParams(const char * FN, unsigned short NParams, unsigned short Nx, unsigned short & ntemp); 
#line 3 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
float maxf(float a, float b) { 
#line 4 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
if (a > b) { 
#line 5 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
return a; }  
#line 6 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
return b; 
#line 7 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
} 
#line 9 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
float MaxAbsDiffVec(float *A, float *B, int n) { 
#line 10 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
float cmax = (-1); 
#line 11 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
float curdiff; 
#line 12 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
for (int i = 0; i < n; i++) { 
#line 13 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
curdiff = abs((A[i]) - (B[i])); 
#line 14 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
cmax = maxf(cmax, curdiff); 
#line 15 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
}  
#line 16 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
return cmax; 
#line 17 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
} 
#line 19 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
void CopyVec(float *A, float *B, int n) { 
#line 20 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
for (int i = 0; i < n; i++) { 
#line 21 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
(A[i]) = (B[i]); 
#line 22 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
}  
#line 23 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
} 
#line 24 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
void CopyVecMYSECONDFTYPE(double *A, double *B, int n) { 
#line 25 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
for (int i = 0; i < n; i++) { 
#line 26 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
(A[i]) = (B[i]); 
#line 27 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
}  
#line 28 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
} 
#line 29 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
void CopyVecTwoTypes(double *A, float *B, int n) { 
#line 30 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
for (int i = 0; i < n; i++) { 
#line 31 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
(A[i]) = (B[i]); 
#line 32 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
}  
#line 33 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
} 
#line 34 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
void FlipVec(float *A, float *B, int n) { 
#line 35 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
for (int i = 0; i < n; i++) { 
#line 36 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
(A[i]) = (B[n - i]); 
#line 37 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
}  
#line 38 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
} 
#line 39 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
void ReadShortFromCSV(char *line, unsigned short *ans, int n) { 
#line 40 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
int count = 0; 
#line 41 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
char *tok; 
#line 42 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
unsigned short tmp; 
#line 43 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
if (n == 1) { 
#line 44 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
tok = strtok(line, ","); 
#line 45 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
printf("%s\n", tok); 
#line 46 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
tmp = (atoi(tok)); 
#line 47 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
(*ans) = ((unsigned short)tmp); 
#line 48 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
} else 
#line 49 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
{ 
#line 51 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
for (tok = strtok(line, ","); tok != (0); tok = strtok(0, ",")) 
#line 52 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
{ 
#line 53 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
tmp = (atoi(tok)); 
#line 54 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
(ans[count++]) = ((unsigned short)tmp); 
#line 56 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
}  
#line 57 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
}  
#line 58 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
} 
#line 61 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
void ReadDoubleFromCSV(char *line, double *ans, int n) { 
#line 62 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
int count = 0; 
#line 63 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
char *tok; 
#line 64 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
double tmp; 
#line 65 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
if (n == 1) { 
#line 66 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
tok = strtok(line, ","); 
#line 67 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
tmp = atof(tok); 
#line 68 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
(*ans) = ((double)tmp); 
#line 69 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
} else { 
#line 71 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
for (tok = strtok(line, ","); tok != (0); tok = strtok(0, ",")) 
#line 72 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
{ 
#line 73 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
tmp = atof(tok); 
#line 74 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
(ans[count++]) = tmp; 
#line 76 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
}  
#line 77 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
}  
#line 78 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
} 
#line 79 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
void ReadFloatFromCSV(char *line, float *ans, int n) { 
#line 80 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
int count = 0; 
#line 81 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
char *tok; 
#line 82 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
float tmp; 
#line 83 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
if (n == 1) { 
#line 84 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
tok = strtok(line, ","); 
#line 85 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
tmp = (atof(tok)); 
#line 86 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
(*ans) = ((float)tmp); 
#line 87 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
} else 
#line 88 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
{ 
#line 90 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
for (tok = strtok(line, ","); tok != (0); tok = strtok(0, ",")) 
#line 91 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
{ 
#line 92 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
tmp = (atof(tok)); 
#line 93 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
(ans[count++]) = tmp; 
#line 95 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
}  
#line 96 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
}  
#line 97 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
} 
#line 98 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
float *ReadAllParams(const char *FN, unsigned short NParams, unsigned short Nx, unsigned short &nSets) { 
#line 99 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
char FileName[300]; 
#line 102 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
float *ans; 
#line 103 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
unsigned short tmp; 
#line 104 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
FILE *fl = fopen(FN, "r"); 
#line 105 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
if (!fl) { 
#line 106 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
printf("Failed to read allparmas.csv\n"); 
#line 107 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
return nullptr; 
#line 108 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
}  
#line 109 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
char line[1009600]; 
#line 110 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
fgets(line, sizeof line, fl); 
#line 111 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
ReadShortFromCSV(line, &nSets, 1); 
#line 112 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
ans = ((float *)malloc(((Nx * NParams) * nSets) * sizeof(float))); 
#line 114 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
for (int i = 0; i < nSets; i++) { 
#line 115 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
fgets(line, sizeof line, fl); 
#line 116 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
ReadFloatFromCSV(line, &(ans[(i * Nx) * NParams]), Nx * NParams); 
#line 117 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
}  
#line 118 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
fclose(fl); 
#line 119 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
return ans; 
#line 120 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
} 
#line 155 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
void solveByNeuron(const HMat &InMat, double *B, double *D) { 
#line 156 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
FILE *fdebug2; 
#line 157 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
double p; 
#line 158 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
int ParentInd; 
#line 159 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
for (int seg = (InMat.N) - 1; seg >= 1; seg--) { 
#line 161 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
p = (((InMat.e)[(((InMat.N) + 2) - seg) - 2]) / (D[seg])); 
#line 162 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
ParentInd = ((InMat.N) - ((InMat.Ks)[(InMat.N) - seg])); 
#line 164 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
(D[ParentInd]) -= (p * ((InMat.f)[(((InMat.N) + 1) - seg) - 2])); 
#line 165 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
(B[ParentInd]) -= (p * (B[seg])); 
#line 166 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
}  
#line 168 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
(B[0]) = ((B[0]) / (D[0])); 
#line 169 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
for (int seg = 1; seg < (InMat.N); seg++) { 
#line 170 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
ParentInd = ((InMat.N) - ((InMat.Ks)[(InMat.N) - seg])); 
#line 171 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
(B[seg]) -= (((InMat.f)[(((InMat.N) + 1) - seg) - 2]) * (B[ParentInd])); 
#line 172 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
(B[seg]) = ((B[seg]) / (D[seg])); 
#line 174 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
}  
#line 175 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
} 
#line 204 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
void FreeSerialNeuronData(HMat &InMat) { 
#line 205 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
printf("Freeing\n"); 
#line 206 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
free(InMat.e); 
#line 207 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
free(InMat.f); 
#line 208 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
free(InMat.Ks); 
#line 209 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
free(InMat.boolModel); 
#line 210 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
free(InMat.Cms); 
#line 211 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
printf("End\n"); 
#line 212 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
} 
#line 214 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
void ReadStimData(const char *FN, Stim &stim, unsigned short Nx) { 
#line 215 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
char FileName[300]; 
#line 217 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
sprintf(FileName, "%s.dat", FN); 
#line 218 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
printf("Start reading file - ReadStimData()\n"); 
#line 220 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
FILE *fl; 
#line 221 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
fl = fopen(FileName, "rb"); 
#line 222 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
if (!fl) 
#line 223 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
{ 
#line 224 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
printf("Failed to read StimData\n"); 
#line 225 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
return; 
#line 226 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
}  
#line 228 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
(stim.NStimuli) = (1); 
#line 229 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
(stim.dels) = ((float *)malloc((stim.NStimuli) * sizeof(float))); 
#line 230 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
fread(stim.dels, sizeof(float), stim.NStimuli, fl); 
#line 231 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
(stim.durs) = ((float *)malloc((stim.NStimuli) * sizeof(float))); 
#line 232 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
fread(stim.durs, sizeof(float), stim.NStimuli, fl); 
#line 233 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
(stim.amps) = ((float *)malloc((stim.NStimuli) * sizeof(float))); 
#line 234 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
fread(stim.amps, sizeof(float), stim.NStimuli, fl); 
#line 236 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
fread(&(stim.area), sizeof(float), 1, fl); 
#line 237 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
fread(&(stim.loc), sizeof(unsigned short), 1, fl); 
#line 238 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
(stim.loc) = ((stim.loc) - 1); 
#line 239 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
fclose(fl); 
#line 241 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
} 
#line 246 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
void CreateStimData(Stim &stim) { 
#line 247 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
(stim.NStimuli) = (1); 
#line 248 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
(stim.dels) = ((float *)malloc((stim.NStimuli) * sizeof(float))); 
#line 249 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
(stim.durs) = ((float *)malloc((stim.NStimuli) * sizeof(float))); 
#line 250 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
(stim.amps) = ((float *)malloc((stim.NStimuli) * sizeof(float))); 
#line 251 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
(stim.comp) = (1); 
#line 252 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
(stim.area) = ((28.377099999999999)); 
#line 253 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
(stim.loc) = (2); 
#line 254 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
float initAmp = (-1); 
#line 255 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
for (int i = 0; i < (stim.NStimuli); i++) { 
#line 256 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
((stim.durs)[i]) = ((20.0)); 
#line 257 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
((stim.dels)[i]) = ((10.0)); 
#line 258 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
((stim.amps)[i]) = (initAmp + (1 * i)); 
#line 259 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
}  
#line 261 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
} 
#line 263 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
void ReadStimFromFile(const char *FN, Stim &stim) { 
#line 264 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
FILE *fl; 
#line 265 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
fl = fopen(FN, "rb"); 
#line 266 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
printf("reading stimfromfile - %s", FN); 
#line 267 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
if (!fl) 
#line 268 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
{ 
#line 269 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
printf("Failed to read StimData\n"); 
#line 270 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
return; 
#line 271 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
}  
#line 272 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
unsigned short Nt; 
#line 273 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
fread(&(stim.NStimuli), sizeof(unsigned short), 1, fl); 
#line 274 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
fread(&Nt, sizeof(unsigned short), 1, fl); 
#line 275 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
(stim.Nt) = ((unsigned short)(ceil(((float)Nt) / (32)) * (32))); 
#line 276 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
fread(&(stim.comp), sizeof(unsigned short), 1, fl); 
#line 277 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
fread(&(stim.loc), sizeof(unsigned short), 1, fl); 
#line 278 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
(stim.loc) -= 1; 
#line 279 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
fread(&(stim.area), sizeof(float), 1, fl); 
#line 280 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
fread(&(stim.numofdts), sizeof(unsigned short), 1, fl); 
#line 281 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
(stim.dtInds) = ((unsigned short *)malloc((stim.numofdts) * sizeof(unsigned short))); 
#line 282 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
(stim.durs) = ((float *)malloc((stim.numofdts) * sizeof(float))); 
#line 283 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
(stim.amps) = ((float *)malloc((Nt * (stim.NStimuli)) * sizeof(float))); 
#line 284 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
fread(stim.dtInds, sizeof(unsigned short), stim.numofdts, fl); 
#line 285 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
fread(stim.durs, sizeof(float), stim.numofdts, fl); 
#line 286 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
fread(stim.amps, sizeof(float), Nt * (stim.NStimuli), fl); 
#line 287 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
fclose(fl); 
#line 289 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
} 
#line 290 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
void FreeStimData(Stim &stim) { 
#line 291 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
printf("Still need to implement FreeStimData()\n"); 
#line 292 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
} 
#line 293 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
void ReadSimData(const char *FN, unsigned short N, Sim &sim) { 
#line 294 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
char FileName[300]; 
#line 296 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
sprintf(FileName, "%s.dat", FN); 
#line 297 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
printf("Start reading file - ReadSimData()\n"); 
#line 298 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
FILE *fl; 
#line 299 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
fl = fopen(FileName, "rb"); 
#line 300 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
if (!fl) 
#line 301 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
{ 
#line 302 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
printf("Failed to read SimData\n"); 
#line 303 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
return; 
#line 304 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
}  
#line 305 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
(sim.Vs) = ((float *)malloc(N * sizeof(float))); 
#line 306 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
fread(sim.Vs, sizeof(float), N, fl); 
#line 307 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
fread(&(sim.dt), sizeof(float), 1, fl); 
#line 308 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
fread(&(sim.TFinal), sizeof(float), 1, fl); 
#line 309 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
unsigned short Nt = ceil((sim.TFinal) / (sim.dt)); 
#line 310 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
unsigned short to32 = 32 - (Nt % 32); 
#line 311 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
(sim.TFinal) = ((sim.TFinal) + ((to32 + 1) * (sim.dt))); 
#line 312 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
fread(&(sim.NRecSites), sizeof(unsigned short), 1, fl); 
#line 314 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
(sim.RecSites) = ((unsigned short *)malloc((sim.NRecSites) * sizeof(unsigned short))); 
#line 315 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
fread(sim.RecSites, sizeof(unsigned short), sim.NRecSites, fl); 
#line 317 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
fclose(fl); 
#line 319 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
} 
#line 320 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
void FreeSimData(Sim &sim) { 
#line 321 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
printf("Still need to implement FreeStimData()\n"); 
#line 322 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
} 
#line 323 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
double diffclock(clock_t clock1, clock_t clock2) 
#line 324 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
{ 
#line 325 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
double diffticks = clock1 - clock2; 
#line 326 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
double diffms = diffticks / ((clock_t)1000); 
#line 327 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
return diffms; 
#line 328 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
} 
#line 330 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
void SaveArrayToFile(const char *FN, const int N, const float *Arr) { 
#line 331 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
printf("printing %s size is %d\n", FN, N); 
#line 332 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
const int prec = 3; 
#line 333 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
FILE *file = fopen(FN, "wb"); 
#line 334 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
if (file) { 
#line 335 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
fwrite(&N, sizeof(int), 1, file); 
#line 336 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
fwrite(&prec, sizeof(int), 1, file); 
#line 337 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
fwrite(Arr, sizeof(float), N, file); 
#line 338 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
} else 
#line 339 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
{ 
#line 340 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
printf("ERR SaveArrayToFile %s %d\n", FN, N); 
#line 341 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
}  
#line 342 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
fclose(file); 
#line 343 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
} 
#line 345 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
void CompareArrays(const float *App, const float *Real, int n, char *Prefix) { 
#line 346 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
float MaxDiff = (0), CurDiff, MaxRDiff = (0); 
#line 347 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
for (int i = 0; i < n; i++) { 
#line 348 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
CurDiff = abs((App[i]) - (Real[i])); 
#line 349 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
MaxDiff = maxf(MaxDiff, CurDiff); 
#line 350 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
MaxRDiff = maxf(MaxRDiff, CurDiff / abs(Real[i])); 
#line 351 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
}  
#line 352 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
printf("Comparing %s,%d: MaxD=%f, MaxRD=%f\n", Prefix, n, MaxDiff, MaxRDiff); 
#line 353 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
} 
#line 354 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
void SaveVHots(const char *FN, float **VHotsHost, unsigned short Nt, unsigned short NStimuli) { 
#line 355 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
FILE *file = fopen(FN, "wb"); 
#line 356 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
if (file) { 
#line 357 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
for (int i = 0; i < NStimuli; i++) { 
#line 358 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
fwrite(VHotsHost[i], sizeof(float), Nt, file); 
#line 359 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
}  
#line 360 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
} else 
#line 361 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
{ 
#line 362 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
printf("ERR SaveArrayToFile %s %d\n", FN); 
#line 363 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
}  
#line 364 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
fclose(file); 
#line 365 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
} 
#line 391 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
void ReadRHSData(const char *FN, float **DebugData, unsigned short Nsegs, unsigned short Nt) { 
#line 392 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
FILE *fl; 
#line 393 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
fl = fopen(FN, "rb"); 
#line 394 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
for (int i = 0; i < Nt; i++) { 
#line 395 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
(DebugData[i]) = ((float *)malloc(Nsegs * sizeof(float))); 
#line 396 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
fread(DebugData[i], sizeof(float), Nsegs, fl); 
#line 397 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
}  
#line 398 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
} 
#line 400 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
void SetRHSFromNeuron(float *rhs, float **DebugData, unsigned short i, unsigned short N) { 
#line 402 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
for (int currSeg = 0; currSeg < N; currSeg++) { 
#line 403 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
(rhs[currSeg]) = ((DebugData[i])[currSeg]); 
#line 404 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
}  
#line 407 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
} 
#line 408 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
void ReadDData(const char *FN, float **DebugData, unsigned short Nsegs, unsigned short Nt) { 
#line 409 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
FILE *fl; 
#line 410 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
fl = fopen(FN, "rb"); 
#line 411 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
for (int i = 0; i < Nt; i++) { 
#line 412 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
(DebugData[i]) = ((float *)malloc(Nsegs * sizeof(float))); 
#line 413 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
fread(DebugData[i], sizeof(float), Nsegs, fl); 
#line 414 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
}  
#line 415 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
} 
#line 417 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
void SetDFromNeuron(float *D, float **DebugData, unsigned short i, unsigned short N) { 
#line 419 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
for (int currSeg = 0; currSeg < N; currSeg++) { 
#line 420 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
(D[currSeg]) = ((DebugData[i])[currSeg]); 
#line 422 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
}  
#line 424 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
} 
#line 425 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
void ReadVData(const char *FN, float **DebugData, unsigned short Nsegs, unsigned short Nt) { 
#line 426 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
FILE *fl; 
#line 427 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
fl = fopen(FN, "rb"); 
#line 428 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
for (int i = 0; i < Nt; i++) { 
#line 429 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
(DebugData[i]) = ((float *)malloc(Nsegs * sizeof(float))); 
#line 430 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
fread(DebugData[i], sizeof(float), Nsegs, fl); 
#line 431 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
}  
#line 432 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
} 
#line 433 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
void SetVFromNeuron(float *vs, float **DebugData, unsigned short i, unsigned short N) { 
#line 434 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
if (i > 0) { 
#line 435 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
for (int currSeg = 0; currSeg < N; currSeg++) { 
#line 436 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
(vs[currSeg]) = ((DebugData[i - 1])[currSeg]); 
#line 437 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
}  
#line 438 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
}  
#line 440 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
} 
#line 441 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
void debugPrintMYFTYPE(float *A, unsigned short N, FILE *fdebug) { 
#line 442 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
fwrite(&N, sizeof(unsigned short), 1, fdebug); 
#line 443 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
fwrite(A, sizeof(float), N, fdebug); 
#line 444 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
} 
#line 445 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
void debugPrintMYSECONDFTYPE(double *A, unsigned short N, FILE *fdebug) { 
#line 446 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
fwrite(&N, sizeof(unsigned short), 1, fdebug); 
#line 447 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
fwrite(A, sizeof(double), N, fdebug); 
#line 448 "C:/pyNeuroGPU_winnew/NeuroGPU6/Util.cu"
} 
#line 1 "Util.cudafe1.stub.c"

#line 1 "Util.cudafe1.stub.c"
#line 1 "c:\\pyneurogpu_winnew\\neurogpu6\\x64\\release\\Util.cudafe1.stub.c"

#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"







































































#line 73 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"

template <typename T>
static inline T *__cudaAddressOf(T &val) 
{
    return (T *)((void *)(&(const_cast<char &>(reinterpret_cast<const volatile char &>(val)))));
}





        











          



          







#line 109 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"


#line 112 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"




#line 117 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"


#line 120 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"

static void ____nv_dummy_param_ref(void *param) { volatile static void **__ref; __ref = (volatile void **)param; }




extern "C" {
void __cudaRegisterLinkedBinary__NV_MODULE_ID ( void (*)(void **), void *, void *, void (*)(void *));
}




extern "C" {

#pragma data_seg("__nv_module_id")
  static const __declspec(allocate("__nv_module_id")) unsigned char __module_id_str[] = "__NV_MODULE_ID";
#pragma data_seg()




#line 143 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"









}

extern "C" {
extern void** __stdcall __cudaRegisterFatBinary(
  void *fatCubin
);

extern void __stdcall __cudaUnregisterFatBinary(
  void **fatCubinHandle
);

extern void __stdcall __cudaRegisterVar(
        void **fatCubinHandle,
        char  *hostVar,
        char  *deviceAddress,
  const char  *deviceName,
        int    ext,
        int    size,
        int    constant,
        int    global
);

extern void __stdcall __cudaRegisterManagedVar(
        void **fatCubinHandle,
        void **hostVarPtrAddress,
        char  *deviceAddress,
  const char  *deviceName,
        int    ext,
        int    size,
        int    constant,
        int    global
);

extern char __stdcall __cudaInitModule(
        void **fatCubinHandle
);

extern void __stdcall __cudaRegisterTexture(
        void                    **fatCubinHandle,
  const struct textureReference  *hostVar,
  const void                    **deviceAddress,
  const char                     *deviceName,
        int                       dim,       
        int                       norm,      
        int                        ext        
);

extern void __stdcall __cudaRegisterSurface(
        void                    **fatCubinHandle,
  const struct surfaceReference  *hostVar,
  const void                    **deviceAddress,
  const char                     *deviceName,
        int                       dim,       
        int                       ext        
);

extern void __stdcall __cudaRegisterFunction(
        void   **fatCubinHandle,
  const char    *hostFun,
        char    *deviceFun,
  const char    *deviceName,
        int      thread_limit,
        uint3   *tid,
        uint3   *bid,
        dim3    *bDim,
        dim3    *gDim,
        int     *wSize
);




#line 225 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"


#line 228 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"
extern int __cdecl atexit(void(__cdecl *)(void));
#line 230 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"

}

static void **__cudaFatCubinHandle;

static void __cdecl __cudaUnregisterBinaryUtil(void)
{
  ____nv_dummy_param_ref((void *)&__cudaFatCubinHandle);
  __cudaUnregisterFatBinary(__cudaFatCubinHandle);
}

static char __nv_init_managed_rt_with_module(void **handle)
{
  return __cudaInitModule(handle);
}

#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\common_functions.h"












































































































































































































































#line 238 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\common_functions.h"









#line 248 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\common_functions.h"

#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"





































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 9831 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"





#line 9837 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"


















































































































































































































#line 10048 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"







#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/func_macro.h"













































#line 47 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/func_macro.h"





#line 53 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/func_macro.h"









#line 63 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/func_macro.h"







#line 71 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/func_macro.h"

#line 73 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/func_macro.h"

#line 75 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/func_macro.h"
#line 10056 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



#pragma warning(disable : 4211)

#line 10062 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

static inline double rsqrt(double a);

static inline double rcbrt(double a);

static inline double sinpi(double a);

static inline double cospi(double a);

static inline void sincospi(double a, double *sptr, double *cptr);

static inline double erfinv(double a);

static inline double erfcinv(double a);

static inline double normcdfinv(double a);

static inline double normcdf(double a);

static inline double erfcx(double a);

static inline float rsqrtf(float a);

static inline float rcbrtf(float a);

static inline float sinpif(float a);

static inline float cospif(float a);

static inline void sincospif(float a, float *sptr, float *cptr);

static inline float erfinvf(float a);

static inline float erfcinvf(float a);

static inline float normcdfinvf(float a);

static inline float normcdff(float a);

static inline float erfcxf(float a);

static inline int min(int a, int b);

static inline unsigned int umin(unsigned int a, unsigned int b);

static inline long long int llmin(long long int a, long long int b);

static inline unsigned long long int ullmin(unsigned long long int a, unsigned long long int b);

static inline int max(int a, int b);

static inline unsigned int umax(unsigned int a, unsigned int b);

static inline long long int llmax(long long int a, long long int b);

static inline unsigned long long int ullmax(unsigned long long int a, unsigned long long int b);



static inline int __isnan(double a);

#line 10124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



static inline void sincos(double a, double *sptr, double *cptr);

#line 10130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



static inline double exp10(double a);

static inline float exp10f(float a);

static inline void sincosf(float a, float *sptr, float *cptr);

static inline int __isinf(double a);

#line 10142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"





#line 10148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



static inline int __signbit(double a);

static inline int __finite(double a);

static inline int __signbitl(long double a);

static inline int __signbitf(float a);

static inline int __finitel(long double a);

static inline int __finitef(float a);

static inline int __isinfl(long double a);

static inline int __isinff(float a);

static inline int __isnanl(long double a);

static inline int __isnanf(float a);

#line 10172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"













































































































































#line 10314 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



#pragma warning(default: 4211)

#line 10320 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

#line 10322 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

#line 10324 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1092 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 1095 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_constants.h"























































































































































#line 153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_constants.h"
#line 1096 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"


























































































































































































































































































































































































































































































































































































#line 1667 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"







#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/func_macro.h"









































































#line 75 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/func_macro.h"
#line 1675 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"



#pragma warning(disable : 4211)

#line 1681 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"



static inline int __isnan(double a)
{
  volatile union {
    double                 d;
    unsigned long long int l;
  } cvt;

  cvt.d = a;

  return cvt.l << 1 > 0xffe0000000000000ull;
}

#line 1697 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"









static inline double exp10(double a)
{
  return pow(10.0, a);
}

static inline float exp10f(float a)
{
    return (float)exp10((double)a);
}

static inline void sincos(double a, double *sptr, double *cptr)
{
  *sptr = sin(a);
  *cptr = cos(a);
}

static inline void sincosf(float a, float *sptr, float *cptr)
{
  double s, c;

  sincos((double)a, &s, &c);
  *sptr = (float)s;
  *cptr = (float)c;
}

static inline int __isinf(double a)
{
  volatile union {
    double                 d;
    unsigned long long int l;
  } cvt;

  cvt.d = a;

  return cvt.l << 1 == 0xffe0000000000000ull;
}

#line 1744 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"








#line 1753 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"

#line 1755 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"









static inline int __signbit(double a)
{
  volatile union {
    double               d;
    signed long long int l;
  } cvt;

  cvt.d = a;
  return cvt.l < 0ll;
}














#line 1789 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"

static inline int __finite(double a)
{
  volatile union {
    double                 d;
    unsigned long long int l;
  } cvt;

  cvt.d = a;
  return cvt.l << 1 < 0xffe0000000000000ull;
}








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"








static inline int __signbitl(long double a)
{
  return __signbit((double)a);
}

static inline int __signbitf(float a)
{
  return __signbit((double)a);
}

static inline int __finitel(long double a)
{
  return __finite((double)a);
}

static inline int __finitef(float a)
{
  return __finite((double)a);
}

static inline int __isinfl(long double a)
{
  return __isinf((double)a);
}

static inline int __isinff(float a)
{
  return __isinf((double)a);
}

static inline int __isnanl(long double a)
{
  return __isnan((double)a);
}

static inline int __isnanf(float a)
{
  return __isnan((double)a);
}























































































































































#line 3352 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"


























































#line 3411 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"

#line 3413 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"







static inline double rsqrt(double a)
{
  return 1.0 / sqrt(a);
}

static inline double rcbrt(double a)
{
  double s, t;

  if (__isnan(a)) {
    return a + a;
  }
  if (a == 0.0 || __isinf(a)) {
    return 1.0 / a;
  } 
  s = fabs(a);
  t = exp2(-3.3333333333333333e-1 * log2(s));                
  t = ((t*t) * (-s*t) + 1.0) * (3.3333333333333333e-1*t) + t;


#line 3441 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
  if (__signbit(a))
#line 3443 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
  {
    t = -t;
  }
  return t;
}

static inline double sinpi(double a)
{
  int n;

  if (__isnan(a)) {
    return a + a;
  }
  if (a == 0.0 || __isinf(a)) {
    return sin (a);
  } 
  if (a == floor(a)) {
    return ((a / 1.0e308) / 1.0e308) / 1.0e308;
  }
  a = remquo (a, 0.5, &n);
  a = a * 3.1415926535897931e+0;
  if (n & 1) {
    a = cos (a);
  } else {
    a = sin (a);
  }
  if (n & 2) {
    a = -a;
  }
  return a;
}

static inline double cospi(double a)
{
  int n;

  if (__isnan(a)) {
    return a + a;
  }
  if (__isinf(a)) {
    return cos (a);
  } 
  if (fabs(a) > 9.0071992547409920e+015) {
    a = 0.0;
  }
  a = remquo (a, 0.5, &n);
  a = a * 3.1415926535897931e+0;
  n++;
  if (n & 1) {
    a = cos (a);
  } else {
    a = sin (a);
  }
  if (n & 2) {
    a = -a;
  }
  if (a == 0.0) {
    a = fabs(a);
  }
  return a;
}

static inline void sincospi(double a, double *sptr, double *cptr)
{
  *sptr = sinpi(a);
  *cptr = cospi(a);
}

static inline double erfinv(double a)
{
  double p, q, t, fa;
  volatile union {
    double d;
    unsigned long long int l;
  } cvt;

  fa = fabs(a);
  if (fa >= 1.0) {
    cvt.l = 0xfff8000000000000ull;
    t = cvt.d;                    
    if (fa == 1.0) {
      t = a * exp(1000.0);        
    }
  } else if (fa >= 0.9375) {
    



    t = log1p(-fa);
    t = 1.0 / sqrt(-t);
    p =         2.7834010353747001060e-3;
    p = p * t + 8.6030097526280260580e-1;
    p = p * t + 2.1371214997265515515e+0;
    p = p * t + 3.1598519601132090206e+0;
    p = p * t + 3.5780402569085996758e+0;
    p = p * t + 1.5335297523989890804e+0;
    p = p * t + 3.4839207139657522572e-1;
    p = p * t + 5.3644861147153648366e-2;
    p = p * t + 4.3836709877126095665e-3;
    p = p * t + 1.3858518113496718808e-4;
    p = p * t + 1.1738352509991666680e-6;
    q =     t + 2.2859981272422905412e+0;
    q = q * t + 4.3859045256449554654e+0;
    q = q * t + 4.6632960348736635331e+0;
    q = q * t + 3.9846608184671757296e+0;
    q = q * t + 1.6068377709719017609e+0;
    q = q * t + 3.5609087305900265560e-1;
    q = q * t + 5.3963550303200816744e-2;
    q = q * t + 4.3873424022706935023e-3;
    q = q * t + 1.3858762165532246059e-4;
    q = q * t + 1.1738313872397777529e-6;
    t = p / (q * t);
    if (a < 0.0) t = -t;
  } else if (fa >= 0.75) {
    



    t = a * a - .87890625;
    p =         .21489185007307062000e+0;
    p = p * t - .64200071507209448655e+1;
    p = p * t + .29631331505876308123e+2;
    p = p * t - .47644367129787181803e+2;
    p = p * t + .34810057749357500873e+2;
    p = p * t - .12954198980646771502e+2;
    p = p * t + .25349389220714893917e+1;
    p = p * t - .24758242362823355486e+0;
    p = p * t + .94897362808681080020e-2;
    q =     t - .12831383833953226499e+2;
    q = q * t + .41409991778428888716e+2;
    q = q * t - .53715373448862143349e+2;
    q = q * t + .33880176779595142685e+2;
    q = q * t - .11315360624238054876e+2;
    q = q * t + .20369295047216351160e+1;
    q = q * t - .18611650627372178511e+0;
    q = q * t + .67544512778850945940e-2;
    p = p / q;
    t = a * p;
  } else {
    



    t = a * a - .5625;
    p =       - .23886240104308755900e+2;
    p = p * t + .45560204272689128170e+3;
    p = p * t - .22977467176607144887e+4;
    p = p * t + .46631433533434331287e+4;
    p = p * t - .43799652308386926161e+4;
    p = p * t + .19007153590528134753e+4;
    p = p * t - .30786872642313695280e+3;
    q =     t - .83288327901936570000e+2;
    q = q * t + .92741319160935318800e+3;
    q = q * t - .35088976383877264098e+4;
    q = q * t + .59039348134843665626e+4;
    q = q * t - .48481635430048872102e+4;
    q = q * t + .18997769186453057810e+4;
    q = q * t - .28386514725366621129e+3;
    p = p / q;
    t = a * p;
  }
  return t;
}

static inline double erfcinv(double a)
{
  double t;
  volatile union {
    double d;
    unsigned long long int l;
  } cvt;

  if (__isnan(a)) {
    return a + a;
  }
  if (a <= 0.0) {
    cvt.l = 0xfff8000000000000ull;
    t = cvt.d;                        
    if (a == 0.0) {
        t = (1.0 - a) * exp(1000.0);  
    }
  } 
  else if (a >= 0.0625) {
    t = erfinv (1.0 - a);
  }
  else if (a >= 1e-100) {
    



    double p, q;
    t = log(a);
    t = 1.0 / sqrt(-t);
    p =         2.7834010353747001060e-3;
    p = p * t + 8.6030097526280260580e-1;
    p = p * t + 2.1371214997265515515e+0;
    p = p * t + 3.1598519601132090206e+0;
    p = p * t + 3.5780402569085996758e+0;
    p = p * t + 1.5335297523989890804e+0;
    p = p * t + 3.4839207139657522572e-1;
    p = p * t + 5.3644861147153648366e-2;
    p = p * t + 4.3836709877126095665e-3;
    p = p * t + 1.3858518113496718808e-4;
    p = p * t + 1.1738352509991666680e-6;
    q =     t + 2.2859981272422905412e+0;
    q = q * t + 4.3859045256449554654e+0;
    q = q * t + 4.6632960348736635331e+0;
    q = q * t + 3.9846608184671757296e+0;
    q = q * t + 1.6068377709719017609e+0;
    q = q * t + 3.5609087305900265560e-1;
    q = q * t + 5.3963550303200816744e-2;
    q = q * t + 4.3873424022706935023e-3;
    q = q * t + 1.3858762165532246059e-4;
    q = q * t + 1.1738313872397777529e-6;
    t = p / (q * t);
  }
  else {
    



    double p, q;
    t = log(a);
    t = 1.0 / sqrt(-t);
    p =         6.9952990607058154858e-1;
    p = p * t + 1.9507620287580568829e+0;
    p = p * t + 8.2810030904462690216e-1;
    p = p * t + 1.1279046353630280005e-1;
    p = p * t + 6.0537914739162189689e-3;
    p = p * t + 1.3714329569665128933e-4;
    p = p * t + 1.2964481560643197452e-6;
    p = p * t + 4.6156006321345332510e-9;
    p = p * t + 4.5344689563209398450e-12;
    q =     t + 1.5771922386662040546e+0;
    q = q * t + 2.1238242087454993542e+0;
    q = q * t + 8.4001814918178042919e-1;
    q = q * t + 1.1311889334355782065e-1;
    q = q * t + 6.0574830550097140404e-3;
    q = q * t + 1.3715891988350205065e-4;
    q = q * t + 1.2964671850944981713e-6;
    q = q * t + 4.6156017600933592558e-9;
    q = q * t + 4.5344687377088206783e-12;
    t = p / (q * t);
  }
  return t;
}

static inline double normcdfinv(double a)
{
  return -1.4142135623730951 * erfcinv(a + a);
}

static inline double normcdf(double a)
{
  double ah, al, t1, t2, u1, u2, v1, v2, z;
  if (fabs (a) > 38.5) a = copysign (38.5, a);
  ah = a * 134217729.0;
  u1 = (a - ah) + ah;
  u2 = a - u1;
  v1 = -7.0710678398609161e-01;
  v2 =  2.7995440410322203e-09;
  t1 = a * -7.0710678118654757e-1;
  t2 = (((u1 * v1 - t1) + u1 * v2) + u2 * v1) + u2 * v2;
  t2 = (a * -(-4.8336466567264567e-17)) + t2;
  ah = t1 + t2;
  z = erfc (ah);
  if (a < -1.0) {
    al = (t1 - ah) + t2;
    t1 = -2.0 * ah * z;
    z = t1 * al + z;
  }
  return 0.5 * z;
}

static inline double erfcx(double a)
{
  double x, t1, t2, t3;

  if (__isnan(a)) {
    return a + a;
  }
  x = fabs(a); 
  if (x < 32.0) {
    








  
     
     
    t1 = x - 4.0; 
    t2 = x + 4.0; 
    t2 = t1 / t2;
       
    t1 =         - 3.5602694826817400E-010; 
    t1 = t1 * t2 - 9.7239122591447274E-009; 
    t1 = t1 * t2 - 8.9350224851649119E-009; 
    t1 = t1 * t2 + 1.0404430921625484E-007; 
    t1 = t1 * t2 + 5.8806698585341259E-008; 
    t1 = t1 * t2 - 8.2147414929116908E-007; 
    t1 = t1 * t2 + 3.0956409853306241E-007; 
    t1 = t1 * t2 + 5.7087871844325649E-006; 
    t1 = t1 * t2 - 1.1231787437600085E-005; 
    t1 = t1 * t2 - 2.4399558857200190E-005; 
    t1 = t1 * t2 + 1.5062557169571788E-004; 
    t1 = t1 * t2 - 1.9925637684786154E-004; 
    t1 = t1 * t2 - 7.5777429182785833E-004; 
    t1 = t1 * t2 + 5.0319698792599572E-003; 
    t1 = t1 * t2 - 1.6197733895953217E-002; 
    t1 = t1 * t2 + 3.7167515553018733E-002; 
    t1 = t1 * t2 - 6.6330365827532434E-002; 
    t1 = t1 * t2 + 9.3732834997115544E-002; 
    t1 = t1 * t2 - 1.0103906603555676E-001; 
    t1 = t1 * t2 + 6.8097054254735140E-002; 
    t1 = t1 * t2 + 1.5379652102605428E-002; 
    t1 = t1 * t2 - 1.3962111684056291E-001; 
    t1 = t1 * t2 + 1.2329951186255526E+000; 
      
    t2 = 2.0 * x + 1.0; 
    t1 = t1 / t2;
  } else {
    
    t2 = 1.0 / x;
    t3 = t2 * t2;
    t1 =         -29.53125;
    t1 = t1 * t3 + 6.5625;
    t1 = t1 * t3 - 1.875;
    t1 = t1 * t3 + 0.75;
    t1 = t1 * t3 - 0.5;
    t1 = t1 * t3 + 1.0;
    t2 = t2 * 5.6418958354775628e-001;
    t1 = t1 * t2;
  }
  if (a < 0.0) {
    
    t2 = ((int)(x * 16.0)) * 0.0625;
    t3 = (x - t2) * (x + t2);
    t3 = exp(t2 * t2) * exp(t3);
    t3 = t3 + t3;
    t1 = t3 - t1;
  }
  return t1;
}

static inline float rsqrtf(float a)
{
  return (float)rsqrt((double)a);
}

static inline float rcbrtf(float a)
{
  return (float)rcbrt((double)a);
}

static inline float sinpif(float a)
{
  return (float)sinpi((double)a);
}

static inline float cospif(float a)
{
  return (float)cospi((double)a);
}

static inline void sincospif(float a, float *sptr, float *cptr)
{
  double s, c;

  sincospi((double)a, &s, &c);
  *sptr = (float)s;
  *cptr = (float)c;
}

static inline float erfinvf(float a)
{
  return (float)erfinv((double)a);
}

static inline float erfcinvf(float a)
{
  return (float)erfcinv((double)a);
}

static inline float normcdfinvf(float a)
{
  return (float)normcdfinv((double)a);
}

static inline float normcdff(float a)
{
  return (float)normcdf((double)a);
}

static inline float erfcxf(float a)
{
  return (float)erfcx((double)a);
}



#pragma warning(default: 4211)

#line 3851 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"

#line 3853 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"

#line 3855 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"

#line 3857 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"


#line 10328 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

#line 10330 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.h"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.h"













































































































































































































#line 266 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.h"




#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.hpp"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.hpp"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.hpp"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.hpp"











































































































































































































































































































































































































































































































#line 552 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.hpp"



#line 556 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.hpp"

#line 271 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.h"
#line 272 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.h"

#line 274 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.h"
#line 10332 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

#line 10334 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

#line 250 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\common_functions.h"

#line 252 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\common_functions.h"

#line 247 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"





#line 253 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"

#pragma pack()



#pragma warning(disable: 4099)





#line 265 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"

#line 267 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"

#line 269 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"

#line 271 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"
#line 3 "c:\\pyneurogpu_winnew\\neurogpu6\\x64\\release\\Util.cudafe1.stub.c"
#line 1 "c:\\pyneurogpu_winnew\\neurogpu6\\x64\\release\\Util.fatbin.c"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\fatBinaryCtl.h"
































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\fatbinary.h"
















































typedef struct fatBinaryHeader *computeFatBinaryFormat_t;




#line 55 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\fatbinary.h"



#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\fatbinary.h"



















struct __declspec(align(8)) fatBinaryHeader
{
  unsigned int           magic;
  unsigned short         version;
  unsigned short         headerSize;
  unsigned long long int fatSize;
};


typedef enum {
  FATBIN_KIND_PTX      = 0x0001,
  FATBIN_KIND_ELF      = 0x0002,
  FATBIN_KIND_OLDCUBIN = 0x0004,
} fatBinaryCodeKind;

#line 94 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\fatbinary.h"
#line 34 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\fatBinaryCtl.h"


extern "C" {
#line 38 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\fatBinaryCtl.h"






typedef enum {
  FBCTL_ERROR_NONE = 0,
  FBCTL_ERROR_NULL,           
  FBCTL_ERROR_UNRECOGNIZED,   
  FBCTL_ERROR_NO_CANDIDATE,   
  FBCTL_ERROR_COMPILE_FAILED, 
  FBCTL_ERROR_INTERNAL        
} fatBinaryCtlError_t;
extern char* fatBinaryCtl_Errmsg (fatBinaryCtlError_t e);

extern fatBinaryCtlError_t fatBinaryCtl_Create (void* *data);

extern void fatBinaryCtl_Delete (void* data);


extern fatBinaryCtlError_t fatBinaryCtl (void* data, int request, ...);















typedef enum {
  fatBinary_PreferBestCode,  
  fatBinary_AvoidPTX,        
  fatBinary_ForcePTX,        
  fatBinary_JITIfNotMatch    
} fatBinary_CompilationPolicy;





extern fatBinaryCtlError_t fatBinaryCtl_PickCandidate (void* data);







extern fatBinaryCtlError_t fatBinaryCtl_Compile (void* data, 
                                                 void* *elf, size_t *esize);








typedef struct {
  int magic;
  int version;
  const unsigned long long* data;
  void *filename_or_fatbins;  

} __fatBinC_Wrapper_t;

















#line 129 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\fatBinaryCtl.h"




}
#line 135 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\fatBinaryCtl.h"

#line 137 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\fatBinaryCtl.h"
#line 2 "c:\\pyneurogpu_winnew\\neurogpu6\\x64\\release\\Util.fatbin.c"



extern "C" {
#line 7 "c:\\pyneurogpu_winnew\\neurogpu6\\x64\\release\\Util.fatbin.c"

#pragma data_seg(".nv_fatbin")
static const __declspec(allocate(".nv_fatbin")) unsigned long long fatbinData[]= {
0x00100001ba55ed50,0x0000000000000338,0x0000004001010002,0x0000000000000268,
0x0000000000000000,0x0000002300010007,0x0000000000000000,0x0000000000000045,
0x0000000000000000,0x0000000000000000,0x33010102464c457f,0x0000000000000007,
0x0000005000be0002,0x0000000000000000,0x00000000000001c0,0x00000000000000c0,
0x0038004000230523,0x0001000400400003,0x7472747368732e00,0x747274732e006261,
0x746d79732e006261,0x746d79732e006261,0x78646e68735f6261,0x666e692e766e2e00,
0x747368732e00006f,0x74732e0062617472,0x79732e0062617472,0x79732e006261746d,
0x6e68735f6261746d,0x692e766e2e007864,0x00000000006f666e,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000300000001,0x0000000000000000,
0x0000000000000000,0x0000000000000040,0x0000000000000032,0x0000000000000000,
0x0000000000000001,0x0000000000000000,0x000000030000000b,0x0000000000000000,
0x0000000000000000,0x0000000000000072,0x0000000000000032,0x0000000000000000,
0x0000000000000001,0x0000000000000000,0x0000000200000013,0x0000000000000000,
0x0000000000000000,0x00000000000000a8,0x0000000000000018,0x0000000000000002,
0x0000000000000008,0x0000000000000018,0x0000000500000006,0x00000000000001c0,
0x0000000000000000,0x0000000000000000,0x00000000000000a8,0x00000000000000a8,
0x0000000000000008,0x0000000500000001,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000008,
0x0000000600000001,0x0000000000000000,0x0000000000000000,0x0000000000000000,
0x0000000000000000,0x0000000000000000,0x0000000000000008,0x0000005001010001,
0x0000000000000040,0x000000400000003c,0x0000002300050000,0x0000000000000000,
0x0000000000002045,0x0000000000000000,0x0000000000000045,0x0000000000000048,
0xffffffff00000000,0x2e26f000020a0d2a,0x206e6f6973726576,0x61742e0a0d302e35,
0x5f6d732074656772,0x6464612e0a0d3533,0x7a69735f73736572,0x0a0d0a0d34362065,
0x000000000a0d0a0d
};
#pragma data_seg()


}
#line 43 "c:\\pyneurogpu_winnew\\neurogpu6\\x64\\release\\Util.fatbin.c"


extern "C" {
#line 47 "c:\\pyneurogpu_winnew\\neurogpu6\\x64\\release\\Util.fatbin.c"
#pragma data_seg(".nvFatBinSegment")
__declspec(allocate(".nvFatBinSegment")) __declspec(align(8)) static const __fatBinC_Wrapper_t __fatDeviceText= 
	{ 0x466243b1, 1, fatbinData, 0 };
#pragma data_seg()

}
#line 54 "c:\\pyneurogpu_winnew\\neurogpu6\\x64\\release\\Util.fatbin.c"
#line 4 "c:\\pyneurogpu_winnew\\neurogpu6\\x64\\release\\Util.cudafe1.stub.c"
static void __nv_cudaEntityRegisterCallback(void **);
static void __sti____cudaRegisterAll_12_Util_cpp1_ii_b6b78192(void);
#pragma section(".CRT$XCU",read)
__declspec(allocate(".CRT$XCU"))static void (*__dummy_static_init__sti____cudaRegisterAll_12_Util_cpp1_ii_b6b78192[])(void) = {__sti____cudaRegisterAll_12_Util_cpp1_ii_b6b78192};
static void __nv_cudaEntityRegisterCallback(void **__T20){{ volatile static void **__ref; __ref = (volatile void **)__T20; };__nv_save_fatbinhandle_for_managed_rt(__T20);}
static void __sti____cudaRegisterAll_12_Util_cpp1_ii_b6b78192(void){__cudaFatCubinHandle = __cudaRegisterFatBinary((void*)&__fatDeviceText); { void (*callback_fp)(void **) = (void (*)(void **))(__nv_cudaEntityRegisterCallback); (*callback_fp)(__cudaFatCubinHandle); } atexit(__cudaUnregisterBinaryUtil);}
#line 2 "Util.cudafe1.stub.c"
#line 1 "Util.cudafe1.stub.c"


